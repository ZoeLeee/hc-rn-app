{"version":3,"file":"js/vender~e588738d.32a35d4b.js","mappings":"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","sources":["webpack:///../../../node_modules/@babylonjs/core/Meshes/geodesicMesh.js","webpack:///../../../node_modules/@babylonjs/core/Meshes/geometry.js","webpack:///../../../node_modules/@babylonjs/core/Meshes/goldbergMesh.js","webpack:///../../../node_modules/@babylonjs/core/Meshes/groundMesh.js","webpack:///../../../node_modules/@babylonjs/core/Meshes/csg.js","webpack:///../../../node_modules/@babylonjs/core/Meshes/meshSimplification.js","webpack:///../../../node_modules/@babylonjs/core/Meshes/meshSimplificationSceneComponent.js","webpack:///../../../node_modules/@babylonjs/core/Meshes/instancedMesh.js","webpack:///../../../node_modules/@babylonjs/core/Meshes/linesMesh.js","webpack:///../../../node_modules/@babylonjs/core/Meshes/mesh.js","webpack:///../../../node_modules/@babylonjs/core/Meshes/mesh.vertexData.js","webpack:///../../../node_modules/@babylonjs/core/Meshes/meshBuilder.js","webpack:///../../../node_modules/@babylonjs/core/Meshes/meshLODLevel.js","webpack:///../../../node_modules/@babylonjs/core/Meshes/polygonMesh.js","webpack:///../../../node_modules/@babylonjs/core/Meshes/subMesh.js","webpack:///../../../node_modules/@babylonjs/core/Meshes/subMesh.project.js","webpack:///../../../node_modules/@babylonjs/core/Meshes/thinInstanceMesh.js","webpack:///../../../node_modules/@babylonjs/core/Meshes/transformNode.js"],"sourcesContent":["import { Vector3, TmpVectors } from \"../Maths/math.vector.js\";\nimport { Scalar } from \"../Maths/math.scalar.js\";\nimport { PHI } from \"../Maths/math.constants.js\";\nimport { _IsoVector } from \"../Maths/math.isovector.js\";\n/**\n * Class representing data for one face OAB of an equilateral icosahedron\n * When O is the isovector (0, 0), A is isovector (m, n)\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class _PrimaryIsoTriangle {\n    constructor() {\n        this.cartesian = [];\n        this.vertices = [];\n        this.max = [];\n        this.min = [];\n        this.closestTo = [];\n        this.innerFacets = [];\n        this.isoVecsABOB = [];\n        this.isoVecsOBOA = [];\n        this.isoVecsBAOA = [];\n        this.vertexTypes = [];\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        this.IDATA = new PolyhedronData(\"icosahedron\", \"Regular\", [\n            [0, PHI, -1],\n            [-PHI, 1, 0],\n            [-1, 0, -PHI],\n            [1, 0, -PHI],\n            [PHI, 1, 0],\n            [0, PHI, 1],\n            [-1, 0, PHI],\n            [-PHI, -1, 0],\n            [0, -PHI, -1],\n            [PHI, -1, 0],\n            [1, 0, PHI],\n            [0, -PHI, 1],\n        ], [\n            [0, 2, 1],\n            [0, 3, 2],\n            [0, 4, 3],\n            [0, 5, 4],\n            [0, 1, 5],\n            [7, 6, 1],\n            [8, 7, 2],\n            [9, 8, 3],\n            [10, 9, 4],\n            [6, 10, 5],\n            [2, 7, 1],\n            [3, 8, 2],\n            [4, 9, 3],\n            [5, 10, 4],\n            [1, 6, 5],\n            [11, 6, 7],\n            [11, 7, 8],\n            [11, 8, 9],\n            [11, 9, 10],\n            [11, 10, 6],\n        ]);\n    }\n    /**\n     * Creates the PrimaryIsoTriangle Triangle OAB\n     * @param m an integer\n     * @param n an integer\n     */\n    //operators\n    setIndices() {\n        let indexCount = 12; // 12 vertices already assigned\n        const vecToidx = {}; //maps iso-vectors to indexCount;\n        const m = this.m;\n        const n = this.n;\n        let g = m; // hcf of m, n when n != 0\n        let m1 = 1;\n        let n1 = 0;\n        if (n !== 0) {\n            g = Scalar.HCF(m, n);\n        }\n        m1 = m / g;\n        n1 = n / g;\n        let fr; //face to the right of current face\n        let rot; //rotation about which vertex for fr\n        let O;\n        let A;\n        let B;\n        const oVec = _IsoVector.Zero();\n        const aVec = new _IsoVector(m, n);\n        const bVec = new _IsoVector(-n, m + n);\n        const oaVec = _IsoVector.Zero();\n        const abVec = _IsoVector.Zero();\n        const obVec = _IsoVector.Zero();\n        let verts = [];\n        let idx;\n        let idxR;\n        let isoId;\n        let isoIdR;\n        const closestTo = [];\n        const vDist = this.vertByDist;\n        const matchIdx = (f, fr, isoId, isoIdR) => {\n            idx = f + \"|\" + isoId;\n            idxR = fr + \"|\" + isoIdR;\n            if (!(idx in vecToidx || idxR in vecToidx)) {\n                vecToidx[idx] = indexCount;\n                vecToidx[idxR] = indexCount;\n                indexCount++;\n            }\n            else if (idx in vecToidx && !(idxR in vecToidx)) {\n                vecToidx[idxR] = vecToidx[idx];\n            }\n            else if (idxR in vecToidx && !(idx in vecToidx)) {\n                vecToidx[idx] = vecToidx[idxR];\n            }\n            if (vDist[isoId][0] > 2) {\n                closestTo[vecToidx[idx]] = [-vDist[isoId][0], vDist[isoId][1], vecToidx[idx]];\n            }\n            else {\n                closestTo[vecToidx[idx]] = [verts[vDist[isoId][0]], vDist[isoId][1], vecToidx[idx]];\n            }\n        };\n        this.IDATA.edgematch = [\n            [1, \"B\"],\n            [2, \"B\"],\n            [3, \"B\"],\n            [4, \"B\"],\n            [0, \"B\"],\n            [10, \"O\", 14, \"A\"],\n            [11, \"O\", 10, \"A\"],\n            [12, \"O\", 11, \"A\"],\n            [13, \"O\", 12, \"A\"],\n            [14, \"O\", 13, \"A\"],\n            [0, \"O\"],\n            [1, \"O\"],\n            [2, \"O\"],\n            [3, \"O\"],\n            [4, \"O\"],\n            [19, \"B\", 5, \"A\"],\n            [15, \"B\", 6, \"A\"],\n            [16, \"B\", 7, \"A\"],\n            [17, \"B\", 8, \"A\"],\n            [18, \"B\", 9, \"A\"],\n        ];\n        /***edges AB to OB***** rotation about B*/\n        for (let f = 0; f < 20; f++) {\n            //f current face\n            verts = this.IDATA.face[f];\n            O = verts[2];\n            A = verts[1];\n            B = verts[0];\n            isoId = oVec.x + \"|\" + oVec.y;\n            idx = f + \"|\" + isoId;\n            if (!(idx in vecToidx)) {\n                vecToidx[idx] = O;\n                closestTo[O] = [verts[vDist[isoId][0]], vDist[isoId][1]];\n            }\n            isoId = aVec.x + \"|\" + aVec.y;\n            idx = f + \"|\" + isoId;\n            if (!(idx in vecToidx)) {\n                vecToidx[idx] = A;\n                closestTo[A] = [verts[vDist[isoId][0]], vDist[isoId][1]];\n            }\n            isoId = bVec.x + \"|\" + bVec.y;\n            idx = f + \"|\" + isoId;\n            if (!(idx in vecToidx)) {\n                vecToidx[idx] = B;\n                closestTo[B] = [verts[vDist[isoId][0]], vDist[isoId][1]];\n            }\n            //for edge vertices\n            fr = this.IDATA.edgematch[f][0];\n            rot = this.IDATA.edgematch[f][1];\n            if (rot === \"B\") {\n                for (let i = 1; i < g; i++) {\n                    abVec.x = m - i * (m1 + n1);\n                    abVec.y = n + i * m1;\n                    obVec.x = -i * n1;\n                    obVec.y = i * (m1 + n1);\n                    isoId = abVec.x + \"|\" + abVec.y;\n                    isoIdR = obVec.x + \"|\" + obVec.y;\n                    matchIdx(f, fr, isoId, isoIdR);\n                }\n            }\n            if (rot === \"O\") {\n                for (let i = 1; i < g; i++) {\n                    obVec.x = -i * n1;\n                    obVec.y = i * (m1 + n1);\n                    oaVec.x = i * m1;\n                    oaVec.y = i * n1;\n                    isoId = obVec.x + \"|\" + obVec.y;\n                    isoIdR = oaVec.x + \"|\" + oaVec.y;\n                    matchIdx(f, fr, isoId, isoIdR);\n                }\n            }\n            fr = this.IDATA.edgematch[f][2];\n            rot = this.IDATA.edgematch[f][3];\n            if (rot && rot === \"A\") {\n                for (let i = 1; i < g; i++) {\n                    oaVec.x = i * m1;\n                    oaVec.y = i * n1;\n                    abVec.x = m - (g - i) * (m1 + n1); //reversed for BA\n                    abVec.y = n + (g - i) * m1; //reversed for BA\n                    isoId = oaVec.x + \"|\" + oaVec.y;\n                    isoIdR = abVec.x + \"|\" + abVec.y;\n                    matchIdx(f, fr, isoId, isoIdR);\n                }\n            }\n            for (let i = 0; i < this.vertices.length; i++) {\n                isoId = this.vertices[i].x + \"|\" + this.vertices[i].y;\n                idx = f + \"|\" + isoId;\n                if (!(idx in vecToidx)) {\n                    vecToidx[idx] = indexCount++;\n                    if (vDist[isoId][0] > 2) {\n                        closestTo[vecToidx[idx]] = [-vDist[isoId][0], vDist[isoId][1], vecToidx[idx]];\n                    }\n                    else {\n                        closestTo[vecToidx[idx]] = [verts[vDist[isoId][0]], vDist[isoId][1], vecToidx[idx]];\n                    }\n                }\n            }\n        }\n        this.closestTo = closestTo;\n        this.vecToidx = vecToidx;\n    }\n    calcCoeffs() {\n        const m = this.m;\n        const n = this.n;\n        const thirdR3 = Math.sqrt(3) / 3;\n        const LSQD = m * m + n * n + m * n;\n        this.coau = (m + n) / LSQD;\n        this.cobu = -n / LSQD;\n        this.coav = (-thirdR3 * (m - n)) / LSQD;\n        this.cobv = (thirdR3 * (2 * m + n)) / LSQD;\n    }\n    createInnerFacets() {\n        const m = this.m;\n        const n = this.n;\n        for (let y = 0; y < n + m + 1; y++) {\n            for (let x = this.min[y]; x < this.max[y] + 1; x++) {\n                if (x < this.max[y] && x < this.max[y + 1] + 1) {\n                    this.innerFacets.push([\"|\" + x + \"|\" + y, \"|\" + x + \"|\" + (y + 1), \"|\" + (x + 1) + \"|\" + y]);\n                }\n                if (y > 0 && x < this.max[y - 1] && x + 1 < this.max[y] + 1) {\n                    this.innerFacets.push([\"|\" + x + \"|\" + y, \"|\" + (x + 1) + \"|\" + y, \"|\" + (x + 1) + \"|\" + (y - 1)]);\n                }\n            }\n        }\n    }\n    edgeVecsABOB() {\n        const m = this.m;\n        const n = this.n;\n        const B = new _IsoVector(-n, m + n);\n        for (let y = 1; y < m + n; y++) {\n            const point = new _IsoVector(this.min[y], y);\n            const prev = new _IsoVector(this.min[y - 1], y - 1);\n            const next = new _IsoVector(this.min[y + 1], y + 1);\n            const pointR = point.clone();\n            const prevR = prev.clone();\n            const nextR = next.clone();\n            pointR.rotate60About(B);\n            prevR.rotate60About(B);\n            nextR.rotate60About(B);\n            const maxPoint = new _IsoVector(this.max[pointR.y], pointR.y);\n            const maxPrev = new _IsoVector(this.max[pointR.y - 1], pointR.y - 1);\n            const maxLeftPrev = new _IsoVector(this.max[pointR.y - 1] - 1, pointR.y - 1);\n            if (pointR.x !== maxPoint.x || pointR.y !== maxPoint.y) {\n                if (pointR.x !== maxPrev.x) {\n                    // type2\n                    //up\n                    this.vertexTypes.push([1, 0, 0]);\n                    this.isoVecsABOB.push([point, maxPrev, maxLeftPrev]);\n                    //down\n                    this.vertexTypes.push([1, 0, 0]);\n                    this.isoVecsABOB.push([point, maxLeftPrev, maxPoint]);\n                }\n                else if (pointR.y === nextR.y) {\n                    // type1\n                    //up\n                    this.vertexTypes.push([1, 1, 0]);\n                    this.isoVecsABOB.push([point, prev, maxPrev]);\n                    //down\n                    this.vertexTypes.push([1, 0, 1]);\n                    this.isoVecsABOB.push([point, maxPrev, next]);\n                }\n                else {\n                    // type 0\n                    //up\n                    this.vertexTypes.push([1, 1, 0]);\n                    this.isoVecsABOB.push([point, prev, maxPrev]);\n                    //down\n                    this.vertexTypes.push([1, 0, 0]);\n                    this.isoVecsABOB.push([point, maxPrev, maxPoint]);\n                }\n            }\n        }\n    }\n    mapABOBtoOBOA() {\n        const point = new _IsoVector(0, 0);\n        for (let i = 0; i < this.isoVecsABOB.length; i++) {\n            const temp = [];\n            for (let j = 0; j < 3; j++) {\n                point.x = this.isoVecsABOB[i][j].x;\n                point.y = this.isoVecsABOB[i][j].y;\n                if (this.vertexTypes[i][j] === 0) {\n                    point.rotateNeg120(this.m, this.n);\n                }\n                temp.push(point.clone());\n            }\n            this.isoVecsOBOA.push(temp);\n        }\n    }\n    mapABOBtoBAOA() {\n        const point = new _IsoVector(0, 0);\n        for (let i = 0; i < this.isoVecsABOB.length; i++) {\n            const temp = [];\n            for (let j = 0; j < 3; j++) {\n                point.x = this.isoVecsABOB[i][j].x;\n                point.y = this.isoVecsABOB[i][j].y;\n                if (this.vertexTypes[i][j] === 1) {\n                    point.rotate120(this.m, this.n);\n                }\n                temp.push(point.clone());\n            }\n            this.isoVecsBAOA.push(temp);\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    MapToFace(faceNb, geodesicData) {\n        const F = this.IDATA.face[faceNb];\n        const oidx = F[2];\n        const aidx = F[1];\n        const bidx = F[0];\n        const O = Vector3.FromArray(this.IDATA.vertex[oidx]);\n        const A = Vector3.FromArray(this.IDATA.vertex[aidx]);\n        const B = Vector3.FromArray(this.IDATA.vertex[bidx]);\n        const OA = A.subtract(O);\n        const OB = B.subtract(O);\n        const x = OA.scale(this.coau).add(OB.scale(this.cobu));\n        const y = OA.scale(this.coav).add(OB.scale(this.cobv));\n        const mapped = [];\n        let idx;\n        let tempVec = TmpVectors.Vector3[0];\n        for (let i = 0; i < this.cartesian.length; i++) {\n            tempVec = x.scale(this.cartesian[i].x).add(y.scale(this.cartesian[i].y)).add(O);\n            mapped[i] = [tempVec.x, tempVec.y, tempVec.z];\n            idx = faceNb + \"|\" + this.vertices[i].x + \"|\" + this.vertices[i].y;\n            geodesicData.vertex[this.vecToidx[idx]] = [tempVec.x, tempVec.y, tempVec.z];\n        }\n    }\n    //statics\n    /**Creates a primary triangle\n     * @internal\n     */\n    build(m, n) {\n        const vertices = new Array();\n        const O = _IsoVector.Zero();\n        const A = new _IsoVector(m, n);\n        const B = new _IsoVector(-n, m + n);\n        vertices.push(O, A, B);\n        //max internal isoceles triangle vertices\n        for (let y = n; y < m + 1; y++) {\n            for (let x = 0; x < m + 1 - y; x++) {\n                vertices.push(new _IsoVector(x, y));\n            }\n        }\n        //shared vertices along edges when needed\n        if (n > 0) {\n            const g = Scalar.HCF(m, n);\n            const m1 = m / g;\n            const n1 = n / g;\n            for (let i = 1; i < g; i++) {\n                vertices.push(new _IsoVector(i * m1, i * n1)); //OA\n                vertices.push(new _IsoVector(-i * n1, i * (m1 + n1))); //OB\n                vertices.push(new _IsoVector(m - i * (m1 + n1), n + i * m1)); // AB\n            }\n            //lower rows vertices and their rotations\n            const ratio = m / n;\n            for (let y = 1; y < n; y++) {\n                for (let x = 0; x < y * ratio; x++) {\n                    vertices.push(new _IsoVector(x, y));\n                    vertices.push(new _IsoVector(x, y).rotate120(m, n));\n                    vertices.push(new _IsoVector(x, y).rotateNeg120(m, n));\n                }\n            }\n        }\n        //order vertices by x and then y\n        vertices.sort((a, b) => {\n            return a.x - b.x;\n        });\n        vertices.sort((a, b) => {\n            return a.y - b.y;\n        });\n        const min = new Array(m + n + 1);\n        const max = new Array(m + n + 1);\n        for (let i = 0; i < min.length; i++) {\n            min[i] = Infinity;\n            max[i] = -Infinity;\n        }\n        let y = 0;\n        let x = 0;\n        const len = vertices.length;\n        for (let i = 0; i < len; i++) {\n            x = vertices[i].x;\n            y = vertices[i].y;\n            min[y] = Math.min(x, min[y]);\n            max[y] = Math.max(x, max[y]);\n        }\n        //calculates the distance of a vertex from a given primary vertex\n        const distFrom = (vert, primVert) => {\n            const v = vert.clone();\n            if (primVert === \"A\") {\n                v.rotateNeg120(m, n);\n            }\n            if (primVert === \"B\") {\n                v.rotate120(m, n);\n            }\n            if (v.x < 0) {\n                return v.y;\n            }\n            return v.x + v.y;\n        };\n        const cartesian = [];\n        const distFromO = [];\n        const distFromA = [];\n        const distFromB = [];\n        const vertByDist = {};\n        const vertData = [];\n        let closest = -1;\n        let dist = -1;\n        for (let i = 0; i < len; i++) {\n            cartesian[i] = vertices[i].toCartesianOrigin(new _IsoVector(0, 0), 0.5);\n            distFromO[i] = distFrom(vertices[i], \"O\");\n            distFromA[i] = distFrom(vertices[i], \"A\");\n            distFromB[i] = distFrom(vertices[i], \"B\");\n            if (distFromO[i] === distFromA[i] && distFromA[i] === distFromB[i]) {\n                closest = 3;\n                dist = distFromO[i];\n            }\n            else if (distFromO[i] === distFromA[i]) {\n                closest = 4;\n                dist = distFromO[i];\n            }\n            else if (distFromA[i] === distFromB[i]) {\n                closest = 5;\n                dist = distFromA[i];\n            }\n            else if (distFromB[i] === distFromO[i]) {\n                closest = 6;\n                dist = distFromO[i];\n            }\n            if (distFromO[i] < distFromA[i] && distFromO[i] < distFromB[i]) {\n                closest = 2;\n                dist = distFromO[i];\n            }\n            if (distFromA[i] < distFromO[i] && distFromA[i] < distFromB[i]) {\n                closest = 1;\n                dist = distFromA[i];\n            }\n            if (distFromB[i] < distFromA[i] && distFromB[i] < distFromO[i]) {\n                closest = 0;\n                dist = distFromB[i];\n            }\n            vertData.push([closest, dist, vertices[i].x, vertices[i].y]);\n        }\n        vertData.sort((a, b) => {\n            return a[2] - b[2];\n        });\n        vertData.sort((a, b) => {\n            return a[3] - b[3];\n        });\n        vertData.sort((a, b) => {\n            return a[1] - b[1];\n        });\n        vertData.sort((a, b) => {\n            return a[0] - b[0];\n        });\n        for (let v = 0; v < vertData.length; v++) {\n            vertByDist[vertData[v][2] + \"|\" + vertData[v][3]] = [vertData[v][0], vertData[v][1], v];\n        }\n        this.m = m;\n        this.n = n;\n        this.vertices = vertices;\n        this.vertByDist = vertByDist;\n        this.cartesian = cartesian;\n        this.min = min;\n        this.max = max;\n        return this;\n    }\n}\n/** Builds Polyhedron Data\n * @internal\n */\nexport class PolyhedronData {\n    constructor(name, category, vertex, face) {\n        this.name = name;\n        this.category = category;\n        this.vertex = vertex;\n        this.face = face;\n    }\n}\n/**\n * This class Extends the PolyhedronData Class to provide measures for a Geodesic Polyhedron\n */\nexport class GeodesicData extends PolyhedronData {\n    /**\n     * @internal\n     */\n    innerToData(face, primTri) {\n        for (let i = 0; i < primTri.innerFacets.length; i++) {\n            this.face.push(primTri.innerFacets[i].map((el) => primTri.vecToidx[face + el]));\n        }\n    }\n    /**\n     * @internal\n     */\n    mapABOBtoDATA(faceNb, primTri) {\n        const fr = primTri.IDATA.edgematch[faceNb][0];\n        for (let i = 0; i < primTri.isoVecsABOB.length; i++) {\n            const temp = [];\n            for (let j = 0; j < 3; j++) {\n                if (primTri.vertexTypes[i][j] === 0) {\n                    temp.push(faceNb + \"|\" + primTri.isoVecsABOB[i][j].x + \"|\" + primTri.isoVecsABOB[i][j].y);\n                }\n                else {\n                    temp.push(fr + \"|\" + primTri.isoVecsABOB[i][j].x + \"|\" + primTri.isoVecsABOB[i][j].y);\n                }\n            }\n            this.face.push([primTri.vecToidx[temp[0]], primTri.vecToidx[temp[1]], primTri.vecToidx[temp[2]]]);\n        }\n    }\n    /**\n     * @internal\n     */\n    mapOBOAtoDATA(faceNb, primTri) {\n        const fr = primTri.IDATA.edgematch[faceNb][0];\n        for (let i = 0; i < primTri.isoVecsOBOA.length; i++) {\n            const temp = [];\n            for (let j = 0; j < 3; j++) {\n                if (primTri.vertexTypes[i][j] === 1) {\n                    temp.push(faceNb + \"|\" + primTri.isoVecsOBOA[i][j].x + \"|\" + primTri.isoVecsOBOA[i][j].y);\n                }\n                else {\n                    temp.push(fr + \"|\" + primTri.isoVecsOBOA[i][j].x + \"|\" + primTri.isoVecsOBOA[i][j].y);\n                }\n            }\n            this.face.push([primTri.vecToidx[temp[0]], primTri.vecToidx[temp[1]], primTri.vecToidx[temp[2]]]);\n        }\n    }\n    /**\n     * @internal\n     */\n    mapBAOAtoDATA(faceNb, primTri) {\n        const fr = primTri.IDATA.edgematch[faceNb][2];\n        for (let i = 0; i < primTri.isoVecsBAOA.length; i++) {\n            const temp = [];\n            for (let j = 0; j < 3; j++) {\n                if (primTri.vertexTypes[i][j] === 1) {\n                    temp.push(faceNb + \"|\" + primTri.isoVecsBAOA[i][j].x + \"|\" + primTri.isoVecsBAOA[i][j].y);\n                }\n                else {\n                    temp.push(fr + \"|\" + primTri.isoVecsBAOA[i][j].x + \"|\" + primTri.isoVecsBAOA[i][j].y);\n                }\n            }\n            this.face.push([primTri.vecToidx[temp[0]], primTri.vecToidx[temp[1]], primTri.vecToidx[temp[2]]]);\n        }\n    }\n    /**\n     * @internal\n     */\n    orderData(primTri) {\n        const nearTo = [];\n        for (let i = 0; i < 13; i++) {\n            nearTo[i] = [];\n        }\n        const close = primTri.closestTo;\n        for (let i = 0; i < close.length; i++) {\n            if (close[i][0] > -1) {\n                if (close[i][1] > 0) {\n                    nearTo[close[i][0]].push([i, close[i][1]]);\n                }\n            }\n            else {\n                nearTo[12].push([i, close[i][0]]);\n            }\n        }\n        const near = [];\n        for (let i = 0; i < 12; i++) {\n            near[i] = i;\n        }\n        let nearIndex = 12;\n        for (let i = 0; i < 12; i++) {\n            nearTo[i].sort((a, b) => {\n                return a[1] - b[1];\n            });\n            for (let j = 0; j < nearTo[i].length; j++) {\n                near[nearTo[i][j][0]] = nearIndex++;\n            }\n        }\n        for (let j = 0; j < nearTo[12].length; j++) {\n            near[nearTo[12][j][0]] = nearIndex++;\n        }\n        for (let i = 0; i < this.vertex.length; i++) {\n            this.vertex[i].push(near[i]);\n        }\n        this.vertex.sort((a, b) => {\n            return a[3] - b[3];\n        });\n        for (let i = 0; i < this.vertex.length; i++) {\n            this.vertex[i].pop();\n        }\n        for (let i = 0; i < this.face.length; i++) {\n            for (let j = 0; j < this.face[i].length; j++) {\n                this.face[i][j] = near[this.face[i][j]];\n            }\n        }\n        this.sharedNodes = nearTo[12].length;\n        this.poleNodes = this.vertex.length - this.sharedNodes;\n    }\n    /**\n     * @internal\n     */\n    setOrder(m, faces) {\n        const adjVerts = [];\n        const dualFaces = [];\n        let face = faces.pop();\n        dualFaces.push(face);\n        let index = this.face[face].indexOf(m);\n        index = (index + 2) % 3;\n        let v = this.face[face][index];\n        adjVerts.push(v);\n        let f = 0;\n        while (faces.length > 0) {\n            face = faces[f];\n            if (this.face[face].indexOf(v) > -1) {\n                // v is a vertex of face f\n                index = (this.face[face].indexOf(v) + 1) % 3;\n                v = this.face[face][index];\n                adjVerts.push(v);\n                dualFaces.push(face);\n                faces.splice(f, 1);\n                f = 0;\n            }\n            else {\n                f++;\n            }\n        }\n        this.adjacentFaces.push(adjVerts);\n        return dualFaces;\n    }\n    /**\n     * @internal\n     */\n    toGoldbergPolyhedronData() {\n        const goldbergPolyhedronData = new PolyhedronData(\"GeoDual\", \"Goldberg\", [], []);\n        goldbergPolyhedronData.name = \"GD dual\";\n        const verticesNb = this.vertex.length;\n        const map = new Array(verticesNb);\n        for (let v = 0; v < verticesNb; v++) {\n            map[v] = [];\n        }\n        for (let f = 0; f < this.face.length; f++) {\n            for (let i = 0; i < 3; i++) {\n                map[this.face[f][i]].push(f);\n            }\n        }\n        let cx = 0;\n        let cy = 0;\n        let cz = 0;\n        let face = [];\n        let vertex = [];\n        this.adjacentFaces = [];\n        for (let m = 0; m < map.length; m++) {\n            goldbergPolyhedronData.face[m] = this.setOrder(m, map[m].concat([]));\n            map[m].forEach((el) => {\n                cx = 0;\n                cy = 0;\n                cz = 0;\n                face = this.face[el];\n                for (let i = 0; i < 3; i++) {\n                    vertex = this.vertex[face[i]];\n                    cx += vertex[0];\n                    cy += vertex[1];\n                    cz += vertex[2];\n                }\n                goldbergPolyhedronData.vertex[el] = [cx / 3, cy / 3, cz / 3];\n            });\n        }\n        return goldbergPolyhedronData;\n    }\n    //statics\n    /**Builds the data for a Geodesic Polyhedron from a primary triangle\n     * @param primTri the primary triangle\n     * @internal\n     */\n    static BuildGeodesicData(primTri) {\n        const geodesicData = new GeodesicData(\"Geodesic-m-n\", \"Geodesic\", [\n            [0, PHI, -1],\n            [-PHI, 1, 0],\n            [-1, 0, -PHI],\n            [1, 0, -PHI],\n            [PHI, 1, 0],\n            [0, PHI, 1],\n            [-1, 0, PHI],\n            [-PHI, -1, 0],\n            [0, -PHI, -1],\n            [PHI, -1, 0],\n            [1, 0, PHI],\n            [0, -PHI, 1],\n        ], []);\n        primTri.setIndices();\n        primTri.calcCoeffs();\n        primTri.createInnerFacets();\n        primTri.edgeVecsABOB();\n        primTri.mapABOBtoOBOA();\n        primTri.mapABOBtoBAOA();\n        for (let f = 0; f < primTri.IDATA.face.length; f++) {\n            primTri.MapToFace(f, geodesicData);\n            geodesicData.innerToData(f, primTri);\n            if (primTri.IDATA.edgematch[f][1] === \"B\") {\n                geodesicData.mapABOBtoDATA(f, primTri);\n            }\n            if (primTri.IDATA.edgematch[f][1] === \"O\") {\n                geodesicData.mapOBOAtoDATA(f, primTri);\n            }\n            if (primTri.IDATA.edgematch[f][3] === \"A\") {\n                geodesicData.mapBAOAtoDATA(f, primTri);\n            }\n        }\n        geodesicData.orderData(primTri);\n        const radius = 1;\n        geodesicData.vertex = geodesicData.vertex.map(function (el) {\n            const a = el[0];\n            const b = el[1];\n            const c = el[2];\n            const d = Math.sqrt(a * a + b * b + c * c);\n            el[0] *= radius / d;\n            el[1] *= radius / d;\n            el[2] *= radius / d;\n            return el;\n        });\n        return geodesicData;\n    }\n}\n//# sourceMappingURL=geodesicMesh.js.map","import { Vector3 } from \"../Maths/math.vector.js\";\nimport { Color4 } from \"../Maths/math.color.js\";\nimport { VertexData } from \"../Meshes/mesh.vertexData.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { SubMesh } from \"../Meshes/subMesh.js\";\nimport { SceneLoaderFlags } from \"../Loading/sceneLoaderFlags.js\";\nimport { BoundingInfo } from \"../Culling/boundingInfo.js\";\n\nimport { Tools } from \"../Misc/tools.js\";\nimport { Tags } from \"../Misc/tags.js\";\nimport { extractMinAndMax } from \"../Maths/math.functions.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nimport { CompatibilityOptions } from \"../Compat/compatibilityOptions.js\";\n/**\n * Class used to store geometry data (vertex buffers + index buffer)\n */\nexport class Geometry {\n    /**\n     *  Gets or sets the Bias Vector to apply on the bounding elements (box/sphere), the max extend is computed as v += v * bias.x + bias.y, the min is computed as v -= v * bias.x + bias.y\n     */\n    get boundingBias() {\n        return this._boundingBias;\n    }\n    /**\n     *  Gets or sets the Bias Vector to apply on the bounding elements (box/sphere), the max extend is computed as v += v * bias.x + bias.y, the min is computed as v -= v * bias.x + bias.y\n     */\n    set boundingBias(value) {\n        if (this._boundingBias) {\n            this._boundingBias.copyFrom(value);\n        }\n        else {\n            this._boundingBias = value.clone();\n        }\n        this._updateBoundingInfo(true, null);\n    }\n    /**\n     * Static function used to attach a new empty geometry to a mesh\n     * @param mesh defines the mesh to attach the geometry to\n     * @returns the new Geometry\n     */\n    static CreateGeometryForMesh(mesh) {\n        const geometry = new Geometry(Geometry.RandomId(), mesh.getScene());\n        geometry.applyToMesh(mesh);\n        return geometry;\n    }\n    /** Get the list of meshes using this geometry */\n    get meshes() {\n        return this._meshes;\n    }\n    /**\n     * Creates a new geometry\n     * @param id defines the unique ID\n     * @param scene defines the hosting scene\n     * @param vertexData defines the VertexData used to get geometry data\n     * @param updatable defines if geometry must be updatable (false by default)\n     * @param mesh defines the mesh that will be associated with the geometry\n     */\n    constructor(id, scene, vertexData, updatable = false, mesh = null) {\n        /**\n         * Gets the delay loading state of the geometry (none by default which means not delayed)\n         */\n        this.delayLoadState = 0;\n        this._totalVertices = 0;\n        this._isDisposed = false;\n        this._indexBufferIsUpdatable = false;\n        this._positionsCache = [];\n        /** @internal */\n        this._parentContainer = null;\n        /**\n         * If set to true (false by default), the bounding info applied to the meshes sharing this geometry will be the bounding info defined at the class level\n         * and won't be computed based on the vertex positions (which is what we get when useBoundingInfoFromGeometry = false)\n         */\n        this.useBoundingInfoFromGeometry = false;\n        this._scene = scene || EngineStore.LastCreatedScene;\n        if (!this._scene) {\n            return;\n        }\n        this.id = id;\n        this.uniqueId = this._scene.getUniqueId();\n        this._engine = this._scene.getEngine();\n        this._meshes = [];\n        //Init vertex buffer cache\n        this._vertexBuffers = {};\n        this._indices = [];\n        this._updatable = updatable;\n        // vertexData\n        if (vertexData) {\n            this.setAllVerticesData(vertexData, updatable);\n        }\n        else {\n            this._totalVertices = 0;\n        }\n        if (this._engine.getCaps().vertexArrayObject) {\n            this._vertexArrayObjects = {};\n        }\n        // applyToMesh\n        if (mesh) {\n            this.applyToMesh(mesh);\n            mesh.computeWorldMatrix(true);\n        }\n    }\n    /**\n     * Gets the current extend of the geometry\n     */\n    get extend() {\n        return this._extend;\n    }\n    /**\n     * Gets the hosting scene\n     * @returns the hosting Scene\n     */\n    getScene() {\n        return this._scene;\n    }\n    /**\n     * Gets the hosting engine\n     * @returns the hosting Engine\n     */\n    getEngine() {\n        return this._engine;\n    }\n    /**\n     * Defines if the geometry is ready to use\n     * @returns true if the geometry is ready to be used\n     */\n    isReady() {\n        return this.delayLoadState === 1 || this.delayLoadState === 0;\n    }\n    /**\n     * Gets a value indicating that the geometry should not be serialized\n     */\n    get doNotSerialize() {\n        for (let index = 0; index < this._meshes.length; index++) {\n            if (!this._meshes[index].doNotSerialize) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /** @internal */\n    _rebuild() {\n        if (this._vertexArrayObjects) {\n            this._vertexArrayObjects = {};\n        }\n        // Index buffer\n        if (this._meshes.length !== 0 && this._indices) {\n            this._indexBuffer = this._engine.createIndexBuffer(this._indices, this._updatable);\n        }\n        // Vertex buffers\n        for (const key in this._vertexBuffers) {\n            const vertexBuffer = this._vertexBuffers[key];\n            vertexBuffer._rebuild();\n        }\n    }\n    /**\n     * Affects all geometry data in one call\n     * @param vertexData defines the geometry data\n     * @param updatable defines if the geometry must be flagged as updatable (false as default)\n     */\n    setAllVerticesData(vertexData, updatable) {\n        vertexData.applyToGeometry(this, updatable);\n        this._notifyUpdate();\n    }\n    /**\n     * Set specific vertex data\n     * @param kind defines the data kind (Position, normal, etc...)\n     * @param data defines the vertex data to use\n     * @param updatable defines if the vertex must be flagged as updatable (false as default)\n     * @param stride defines the stride to use (0 by default). This value is deduced from the kind value if not specified\n     */\n    setVerticesData(kind, data, updatable = false, stride) {\n        if (updatable && Array.isArray(data)) {\n            // to avoid converting to Float32Array at each draw call in engine.updateDynamicVertexBuffer, we make the conversion a single time here\n            data = new Float32Array(data);\n        }\n        const buffer = new VertexBuffer(this._engine, data, kind, updatable, this._meshes.length === 0, stride);\n        this.setVerticesBuffer(buffer);\n    }\n    /**\n     * Removes a specific vertex data\n     * @param kind defines the data kind (Position, normal, etc...)\n     */\n    removeVerticesData(kind) {\n        if (this._vertexBuffers[kind]) {\n            this._vertexBuffers[kind].dispose();\n            delete this._vertexBuffers[kind];\n        }\n        if (this._vertexArrayObjects) {\n            this._disposeVertexArrayObjects();\n        }\n    }\n    /**\n     * Affect a vertex buffer to the geometry. the vertexBuffer.getKind() function is used to determine where to store the data\n     * @param buffer defines the vertex buffer to use\n     * @param totalVertices defines the total number of vertices for position kind (could be null)\n     * @param disposeExistingBuffer disposes the existing buffer, if any (default: true)\n     */\n    setVerticesBuffer(buffer, totalVertices = null, disposeExistingBuffer = true) {\n        const kind = buffer.getKind();\n        if (this._vertexBuffers[kind] && disposeExistingBuffer) {\n            this._vertexBuffers[kind].dispose();\n        }\n        if (buffer._buffer) {\n            buffer._buffer._increaseReferences();\n        }\n        this._vertexBuffers[kind] = buffer;\n        const meshes = this._meshes;\n        const numOfMeshes = meshes.length;\n        if (kind === VertexBuffer.PositionKind) {\n            const data = buffer.getData();\n            if (totalVertices != null) {\n                this._totalVertices = totalVertices;\n            }\n            else {\n                if (data != null) {\n                    this._totalVertices = data.length / (buffer.type === VertexBuffer.BYTE ? buffer.byteStride : buffer.byteStride / 4);\n                }\n            }\n            this._updateExtend(data);\n            this._resetPointsArrayCache();\n            for (let index = 0; index < numOfMeshes; index++) {\n                const mesh = meshes[index];\n                mesh.buildBoundingInfo(this._extend.minimum, this._extend.maximum);\n                mesh._createGlobalSubMesh(mesh.isUnIndexed);\n                mesh.computeWorldMatrix(true);\n                mesh.synchronizeInstances();\n            }\n        }\n        this._notifyUpdate(kind);\n    }\n    /**\n     * Update a specific vertex buffer\n     * This function will directly update the underlying DataBuffer according to the passed numeric array or Float32Array\n     * It will do nothing if the buffer is not updatable\n     * @param kind defines the data kind (Position, normal, etc...)\n     * @param data defines the data to use\n     * @param offset defines the offset in the target buffer where to store the data\n     * @param useBytes set to true if the offset is in bytes\n     */\n    updateVerticesDataDirectly(kind, data, offset, useBytes = false) {\n        const vertexBuffer = this.getVertexBuffer(kind);\n        if (!vertexBuffer) {\n            return;\n        }\n        vertexBuffer.updateDirectly(data, offset, useBytes);\n        this._notifyUpdate(kind);\n    }\n    /**\n     * Update a specific vertex buffer\n     * This function will create a new buffer if the current one is not updatable\n     * @param kind defines the data kind (Position, normal, etc...)\n     * @param data defines the data to use\n     * @param updateExtends defines if the geometry extends must be recomputed (false by default)\n     */\n    updateVerticesData(kind, data, updateExtends = false) {\n        const vertexBuffer = this.getVertexBuffer(kind);\n        if (!vertexBuffer) {\n            return;\n        }\n        vertexBuffer.update(data);\n        if (kind === VertexBuffer.PositionKind) {\n            this._updateBoundingInfo(updateExtends, data);\n        }\n        this._notifyUpdate(kind);\n    }\n    _updateBoundingInfo(updateExtends, data) {\n        if (updateExtends) {\n            this._updateExtend(data);\n        }\n        this._resetPointsArrayCache();\n        if (updateExtends) {\n            const meshes = this._meshes;\n            for (const mesh of meshes) {\n                if (mesh.hasBoundingInfo) {\n                    mesh.getBoundingInfo().reConstruct(this._extend.minimum, this._extend.maximum);\n                }\n                else {\n                    mesh.buildBoundingInfo(this._extend.minimum, this._extend.maximum);\n                }\n                const subMeshes = mesh.subMeshes;\n                for (const subMesh of subMeshes) {\n                    subMesh.refreshBoundingInfo();\n                }\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    _bind(effect, indexToBind, overrideVertexBuffers, overrideVertexArrayObjects) {\n        if (!effect) {\n            return;\n        }\n        if (indexToBind === undefined) {\n            indexToBind = this._indexBuffer;\n        }\n        const vbs = this.getVertexBuffers();\n        if (!vbs) {\n            return;\n        }\n        if (indexToBind != this._indexBuffer || (!this._vertexArrayObjects && !overrideVertexArrayObjects)) {\n            this._engine.bindBuffers(vbs, indexToBind, effect, overrideVertexBuffers);\n            return;\n        }\n        const vaos = overrideVertexArrayObjects ? overrideVertexArrayObjects : this._vertexArrayObjects;\n        // Using VAO\n        if (!vaos[effect.key]) {\n            vaos[effect.key] = this._engine.recordVertexArrayObject(vbs, indexToBind, effect, overrideVertexBuffers);\n        }\n        this._engine.bindVertexArrayObject(vaos[effect.key], indexToBind);\n    }\n    /**\n     * Gets total number of vertices\n     * @returns the total number of vertices\n     */\n    getTotalVertices() {\n        if (!this.isReady()) {\n            return 0;\n        }\n        return this._totalVertices;\n    }\n    /**\n     * Gets a specific vertex data attached to this geometry. Float data is constructed if the vertex buffer data cannot be returned directly.\n     * @param kind defines the data kind (Position, normal, etc...)\n     * @param copyWhenShared defines if the returned array must be cloned upon returning it if the current geometry is shared between multiple meshes\n     * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\n     * @returns a float array containing vertex data\n     */\n    getVerticesData(kind, copyWhenShared, forceCopy) {\n        const vertexBuffer = this.getVertexBuffer(kind);\n        if (!vertexBuffer) {\n            return null;\n        }\n        return vertexBuffer.getFloatData(this._totalVertices, forceCopy || (copyWhenShared && this._meshes.length !== 1));\n    }\n    /**\n     * Returns a boolean defining if the vertex data for the requested `kind` is updatable\n     * @param kind defines the data kind (Position, normal, etc...)\n     * @returns true if the vertex buffer with the specified kind is updatable\n     */\n    isVertexBufferUpdatable(kind) {\n        const vb = this._vertexBuffers[kind];\n        if (!vb) {\n            return false;\n        }\n        return vb.isUpdatable();\n    }\n    /**\n     * Gets a specific vertex buffer\n     * @param kind defines the data kind (Position, normal, etc...)\n     * @returns a VertexBuffer\n     */\n    getVertexBuffer(kind) {\n        if (!this.isReady()) {\n            return null;\n        }\n        return this._vertexBuffers[kind];\n    }\n    /**\n     * Returns all vertex buffers\n     * @returns an object holding all vertex buffers indexed by kind\n     */\n    getVertexBuffers() {\n        if (!this.isReady()) {\n            return null;\n        }\n        return this._vertexBuffers;\n    }\n    /**\n     * Gets a boolean indicating if specific vertex buffer is present\n     * @param kind defines the data kind (Position, normal, etc...)\n     * @returns true if data is present\n     */\n    isVerticesDataPresent(kind) {\n        if (!this._vertexBuffers) {\n            if (this._delayInfo) {\n                return this._delayInfo.indexOf(kind) !== -1;\n            }\n            return false;\n        }\n        return this._vertexBuffers[kind] !== undefined;\n    }\n    /**\n     * Gets a list of all attached data kinds (Position, normal, etc...)\n     * @returns a list of string containing all kinds\n     */\n    getVerticesDataKinds() {\n        const result = [];\n        let kind;\n        if (!this._vertexBuffers && this._delayInfo) {\n            for (kind in this._delayInfo) {\n                result.push(kind);\n            }\n        }\n        else {\n            for (kind in this._vertexBuffers) {\n                result.push(kind);\n            }\n        }\n        return result;\n    }\n    /**\n     * Update index buffer\n     * @param indices defines the indices to store in the index buffer\n     * @param offset defines the offset in the target buffer where to store the data\n     * @param gpuMemoryOnly defines a boolean indicating that only the GPU memory must be updated leaving the CPU version of the indices unchanged (false by default)\n     */\n    updateIndices(indices, offset, gpuMemoryOnly = false) {\n        if (!this._indexBuffer) {\n            return;\n        }\n        if (!this._indexBufferIsUpdatable) {\n            this.setIndices(indices, null, true);\n        }\n        else {\n            const needToUpdateSubMeshes = indices.length !== this._indices.length;\n            if (!gpuMemoryOnly) {\n                this._indices = indices.slice();\n            }\n            this._engine.updateDynamicIndexBuffer(this._indexBuffer, indices, offset);\n            if (needToUpdateSubMeshes) {\n                for (const mesh of this._meshes) {\n                    mesh._createGlobalSubMesh(true);\n                }\n            }\n        }\n    }\n    /**\n     * Creates a new index buffer\n     * @param indices defines the indices to store in the index buffer\n     * @param totalVertices defines the total number of vertices (could be null)\n     * @param updatable defines if the index buffer must be flagged as updatable (false by default)\n     */\n    setIndices(indices, totalVertices = null, updatable = false) {\n        if (this._indexBuffer) {\n            this._engine._releaseBuffer(this._indexBuffer);\n        }\n        this._indices = indices;\n        this._indexBufferIsUpdatable = updatable;\n        if (this._meshes.length !== 0 && this._indices) {\n            this._indexBuffer = this._engine.createIndexBuffer(this._indices, updatable);\n        }\n        if (totalVertices != undefined) {\n            // including null and undefined\n            this._totalVertices = totalVertices;\n        }\n        for (const mesh of this._meshes) {\n            mesh._createGlobalSubMesh(true);\n            mesh.synchronizeInstances();\n        }\n        this._notifyUpdate();\n    }\n    /**\n     * Return the total number of indices\n     * @returns the total number of indices\n     */\n    getTotalIndices() {\n        if (!this.isReady()) {\n            return 0;\n        }\n        return this._indices.length;\n    }\n    /**\n     * Gets the index buffer array\n     * @param copyWhenShared defines if the returned array must be cloned upon returning it if the current geometry is shared between multiple meshes\n     * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\n     * @returns the index buffer array\n     */\n    getIndices(copyWhenShared, forceCopy) {\n        if (!this.isReady()) {\n            return null;\n        }\n        const orig = this._indices;\n        if (!forceCopy && (!copyWhenShared || this._meshes.length === 1)) {\n            return orig;\n        }\n        else {\n            return orig.slice();\n        }\n    }\n    /**\n     * Gets the index buffer\n     * @returns the index buffer\n     */\n    getIndexBuffer() {\n        if (!this.isReady()) {\n            return null;\n        }\n        return this._indexBuffer;\n    }\n    /**\n     * @internal\n     */\n    _releaseVertexArrayObject(effect = null) {\n        if (!effect || !this._vertexArrayObjects) {\n            return;\n        }\n        if (this._vertexArrayObjects[effect.key]) {\n            this._engine.releaseVertexArrayObject(this._vertexArrayObjects[effect.key]);\n            delete this._vertexArrayObjects[effect.key];\n        }\n    }\n    /**\n     * Release the associated resources for a specific mesh\n     * @param mesh defines the source mesh\n     * @param shouldDispose defines if the geometry must be disposed if there is no more mesh pointing to it\n     */\n    releaseForMesh(mesh, shouldDispose) {\n        const meshes = this._meshes;\n        const index = meshes.indexOf(mesh);\n        if (index === -1) {\n            return;\n        }\n        meshes.splice(index, 1);\n        if (this._vertexArrayObjects) {\n            mesh._invalidateInstanceVertexArrayObject();\n        }\n        mesh._geometry = null;\n        if (meshes.length === 0 && shouldDispose) {\n            this.dispose();\n        }\n    }\n    /**\n     * Apply current geometry to a given mesh\n     * @param mesh defines the mesh to apply geometry to\n     */\n    applyToMesh(mesh) {\n        if (mesh._geometry === this) {\n            return;\n        }\n        const previousGeometry = mesh._geometry;\n        if (previousGeometry) {\n            previousGeometry.releaseForMesh(mesh);\n        }\n        if (this._vertexArrayObjects) {\n            mesh._invalidateInstanceVertexArrayObject();\n        }\n        const meshes = this._meshes;\n        // must be done before setting vertexBuffers because of mesh._createGlobalSubMesh()\n        mesh._geometry = this;\n        mesh._internalAbstractMeshDataInfo._positions = null;\n        this._scene.pushGeometry(this);\n        meshes.push(mesh);\n        if (this.isReady()) {\n            this._applyToMesh(mesh);\n        }\n        else if (this._boundingInfo) {\n            mesh.setBoundingInfo(this._boundingInfo);\n        }\n    }\n    _updateExtend(data = null) {\n        if (this.useBoundingInfoFromGeometry && this._boundingInfo) {\n            this._extend = {\n                minimum: this._boundingInfo.minimum.clone(),\n                maximum: this._boundingInfo.maximum.clone(),\n            };\n        }\n        else {\n            if (!data) {\n                data = this.getVerticesData(VertexBuffer.PositionKind);\n                // This can happen if the buffer comes from a Hardware Buffer where\n                // The data have not been uploaded by Babylon. (ex: Compute Shaders and Storage Buffers)\n                if (!data) {\n                    return;\n                }\n            }\n            this._extend = extractMinAndMax(data, 0, this._totalVertices, this.boundingBias, 3);\n        }\n    }\n    _applyToMesh(mesh) {\n        const numOfMeshes = this._meshes.length;\n        // vertexBuffers\n        for (const kind in this._vertexBuffers) {\n            if (numOfMeshes === 1) {\n                this._vertexBuffers[kind].create();\n            }\n            if (kind === VertexBuffer.PositionKind) {\n                if (!this._extend) {\n                    this._updateExtend();\n                }\n                mesh.buildBoundingInfo(this._extend.minimum, this._extend.maximum);\n                mesh._createGlobalSubMesh(mesh.isUnIndexed);\n                //bounding info was just created again, world matrix should be applied again.\n                mesh._updateBoundingInfo();\n            }\n        }\n        // indexBuffer\n        if (numOfMeshes === 1 && this._indices && this._indices.length > 0) {\n            this._indexBuffer = this._engine.createIndexBuffer(this._indices, this._updatable);\n        }\n        // morphTargets\n        mesh._syncGeometryWithMorphTargetManager();\n        // instances\n        mesh.synchronizeInstances();\n    }\n    _notifyUpdate(kind) {\n        if (this.onGeometryUpdated) {\n            this.onGeometryUpdated(this, kind);\n        }\n        if (this._vertexArrayObjects) {\n            this._disposeVertexArrayObjects();\n        }\n        for (const mesh of this._meshes) {\n            mesh._markSubMeshesAsAttributesDirty();\n        }\n    }\n    /**\n     * Load the geometry if it was flagged as delay loaded\n     * @param scene defines the hosting scene\n     * @param onLoaded defines a callback called when the geometry is loaded\n     */\n    load(scene, onLoaded) {\n        if (this.delayLoadState === 2) {\n            return;\n        }\n        if (this.isReady()) {\n            if (onLoaded) {\n                onLoaded();\n            }\n            return;\n        }\n        this.delayLoadState = 2;\n        this._queueLoad(scene, onLoaded);\n    }\n    _queueLoad(scene, onLoaded) {\n        if (!this.delayLoadingFile) {\n            return;\n        }\n        scene.addPendingData(this);\n        scene._loadFile(this.delayLoadingFile, (data) => {\n            if (!this._delayLoadingFunction) {\n                return;\n            }\n            this._delayLoadingFunction(JSON.parse(data), this);\n            this.delayLoadState = 1;\n            this._delayInfo = [];\n            scene.removePendingData(this);\n            const meshes = this._meshes;\n            const numOfMeshes = meshes.length;\n            for (let index = 0; index < numOfMeshes; index++) {\n                this._applyToMesh(meshes[index]);\n            }\n            if (onLoaded) {\n                onLoaded();\n            }\n        }, undefined, true);\n    }\n    /**\n     * Invert the geometry to move from a right handed system to a left handed one.\n     */\n    toLeftHanded() {\n        // Flip faces\n        const tIndices = this.getIndices(false);\n        if (tIndices != null && tIndices.length > 0) {\n            for (let i = 0; i < tIndices.length; i += 3) {\n                const tTemp = tIndices[i + 0];\n                tIndices[i + 0] = tIndices[i + 2];\n                tIndices[i + 2] = tTemp;\n            }\n            this.setIndices(tIndices);\n        }\n        // Negate position.z\n        const tPositions = this.getVerticesData(VertexBuffer.PositionKind, false);\n        if (tPositions != null && tPositions.length > 0) {\n            for (let i = 0; i < tPositions.length; i += 3) {\n                tPositions[i + 2] = -tPositions[i + 2];\n            }\n            this.setVerticesData(VertexBuffer.PositionKind, tPositions, false);\n        }\n        // Negate normal.z\n        const tNormals = this.getVerticesData(VertexBuffer.NormalKind, false);\n        if (tNormals != null && tNormals.length > 0) {\n            for (let i = 0; i < tNormals.length; i += 3) {\n                tNormals[i + 2] = -tNormals[i + 2];\n            }\n            this.setVerticesData(VertexBuffer.NormalKind, tNormals, false);\n        }\n    }\n    // Cache\n    /** @internal */\n    _resetPointsArrayCache() {\n        this._positions = null;\n    }\n    /** @internal */\n    _generatePointsArray() {\n        if (this._positions) {\n            return true;\n        }\n        const data = this.getVerticesData(VertexBuffer.PositionKind);\n        if (!data || data.length === 0) {\n            return false;\n        }\n        for (let index = this._positionsCache.length * 3, arrayIdx = this._positionsCache.length; index < data.length; index += 3, ++arrayIdx) {\n            this._positionsCache[arrayIdx] = Vector3.FromArray(data, index);\n        }\n        for (let index = 0, arrayIdx = 0; index < data.length; index += 3, ++arrayIdx) {\n            this._positionsCache[arrayIdx].set(data[0 + index], data[1 + index], data[2 + index]);\n        }\n        // just in case the number of positions was reduced, splice the array\n        this._positionsCache.length = data.length / 3;\n        this._positions = this._positionsCache;\n        return true;\n    }\n    /**\n     * Gets a value indicating if the geometry is disposed\n     * @returns true if the geometry was disposed\n     */\n    isDisposed() {\n        return this._isDisposed;\n    }\n    _disposeVertexArrayObjects() {\n        if (this._vertexArrayObjects) {\n            for (const kind in this._vertexArrayObjects) {\n                this._engine.releaseVertexArrayObject(this._vertexArrayObjects[kind]);\n            }\n            this._vertexArrayObjects = {}; // Will trigger a rebuild of the VAO if supported\n            const meshes = this._meshes;\n            const numOfMeshes = meshes.length;\n            for (let index = 0; index < numOfMeshes; index++) {\n                meshes[index]._invalidateInstanceVertexArrayObject();\n            }\n        }\n    }\n    /**\n     * Free all associated resources\n     */\n    dispose() {\n        const meshes = this._meshes;\n        const numOfMeshes = meshes.length;\n        let index;\n        for (index = 0; index < numOfMeshes; index++) {\n            this.releaseForMesh(meshes[index]);\n        }\n        this._meshes.length = 0;\n        this._disposeVertexArrayObjects();\n        for (const kind in this._vertexBuffers) {\n            this._vertexBuffers[kind].dispose();\n        }\n        this._vertexBuffers = {};\n        this._totalVertices = 0;\n        if (this._indexBuffer) {\n            this._engine._releaseBuffer(this._indexBuffer);\n        }\n        this._indexBuffer = null;\n        this._indices = [];\n        this.delayLoadState = 0;\n        this.delayLoadingFile = null;\n        this._delayLoadingFunction = null;\n        this._delayInfo = [];\n        this._boundingInfo = null;\n        this._scene.removeGeometry(this);\n        if (this._parentContainer) {\n            const index = this._parentContainer.geometries.indexOf(this);\n            if (index > -1) {\n                this._parentContainer.geometries.splice(index, 1);\n            }\n            this._parentContainer = null;\n        }\n        this._isDisposed = true;\n    }\n    /**\n     * Clone the current geometry into a new geometry\n     * @param id defines the unique ID of the new geometry\n     * @returns a new geometry object\n     */\n    copy(id) {\n        const vertexData = new VertexData();\n        vertexData.indices = [];\n        const indices = this.getIndices();\n        if (indices) {\n            for (let index = 0; index < indices.length; index++) {\n                vertexData.indices.push(indices[index]);\n            }\n        }\n        let updatable = false;\n        let stopChecking = false;\n        let kind;\n        for (kind in this._vertexBuffers) {\n            // using slice() to make a copy of the array and not just reference it\n            const data = this.getVerticesData(kind);\n            if (data) {\n                if (data instanceof Float32Array) {\n                    vertexData.set(new Float32Array(data), kind);\n                }\n                else {\n                    vertexData.set(data.slice(0), kind);\n                }\n                if (!stopChecking) {\n                    const vb = this.getVertexBuffer(kind);\n                    if (vb) {\n                        updatable = vb.isUpdatable();\n                        stopChecking = !updatable;\n                    }\n                }\n            }\n        }\n        const geometry = new Geometry(id, this._scene, vertexData, updatable);\n        geometry.delayLoadState = this.delayLoadState;\n        geometry.delayLoadingFile = this.delayLoadingFile;\n        geometry._delayLoadingFunction = this._delayLoadingFunction;\n        for (kind in this._delayInfo) {\n            geometry._delayInfo = geometry._delayInfo || [];\n            geometry._delayInfo.push(kind);\n        }\n        // Bounding info\n        geometry._boundingInfo = new BoundingInfo(this._extend.minimum, this._extend.maximum);\n        return geometry;\n    }\n    /**\n     * Serialize the current geometry info (and not the vertices data) into a JSON object\n     * @returns a JSON representation of the current geometry data (without the vertices data)\n     */\n    serialize() {\n        const serializationObject = {};\n        serializationObject.id = this.id;\n        serializationObject.uniqueId = this.uniqueId;\n        serializationObject.updatable = this._updatable;\n        if (Tags && Tags.HasTags(this)) {\n            serializationObject.tags = Tags.GetTags(this);\n        }\n        return serializationObject;\n    }\n    _toNumberArray(origin) {\n        if (Array.isArray(origin)) {\n            return origin;\n        }\n        else {\n            return Array.prototype.slice.call(origin);\n        }\n    }\n    /**\n     * Release any memory retained by the cached data on the Geometry.\n     *\n     * Call this function to reduce memory footprint of the mesh.\n     * Vertex buffers will not store CPU data anymore (this will prevent picking, collisions or physics to work correctly)\n     */\n    clearCachedData() {\n        this._indices = [];\n        this._resetPointsArrayCache();\n        for (const vbName in this._vertexBuffers) {\n            if (!Object.prototype.hasOwnProperty.call(this._vertexBuffers, vbName)) {\n                continue;\n            }\n            this._vertexBuffers[vbName]._buffer._data = null;\n        }\n    }\n    /**\n     * Serialize all vertices data into a JSON object\n     * @returns a JSON representation of the current geometry data\n     */\n    serializeVerticeData() {\n        const serializationObject = this.serialize();\n        if (this.isVerticesDataPresent(VertexBuffer.PositionKind)) {\n            serializationObject.positions = this._toNumberArray(this.getVerticesData(VertexBuffer.PositionKind));\n            if (this.isVertexBufferUpdatable(VertexBuffer.PositionKind)) {\n                serializationObject.positions._updatable = true;\n            }\n        }\n        if (this.isVerticesDataPresent(VertexBuffer.NormalKind)) {\n            serializationObject.normals = this._toNumberArray(this.getVerticesData(VertexBuffer.NormalKind));\n            if (this.isVertexBufferUpdatable(VertexBuffer.NormalKind)) {\n                serializationObject.normals._updatable = true;\n            }\n        }\n        if (this.isVerticesDataPresent(VertexBuffer.TangentKind)) {\n            serializationObject.tangents = this._toNumberArray(this.getVerticesData(VertexBuffer.TangentKind));\n            if (this.isVertexBufferUpdatable(VertexBuffer.TangentKind)) {\n                serializationObject.tangents._updatable = true;\n            }\n        }\n        if (this.isVerticesDataPresent(VertexBuffer.UVKind)) {\n            serializationObject.uvs = this._toNumberArray(this.getVerticesData(VertexBuffer.UVKind));\n            if (this.isVertexBufferUpdatable(VertexBuffer.UVKind)) {\n                serializationObject.uvs._updatable = true;\n            }\n        }\n        if (this.isVerticesDataPresent(VertexBuffer.UV2Kind)) {\n            serializationObject.uv2s = this._toNumberArray(this.getVerticesData(VertexBuffer.UV2Kind));\n            if (this.isVertexBufferUpdatable(VertexBuffer.UV2Kind)) {\n                serializationObject.uv2s._updatable = true;\n            }\n        }\n        if (this.isVerticesDataPresent(VertexBuffer.UV3Kind)) {\n            serializationObject.uv3s = this._toNumberArray(this.getVerticesData(VertexBuffer.UV3Kind));\n            if (this.isVertexBufferUpdatable(VertexBuffer.UV3Kind)) {\n                serializationObject.uv3s._updatable = true;\n            }\n        }\n        if (this.isVerticesDataPresent(VertexBuffer.UV4Kind)) {\n            serializationObject.uv4s = this._toNumberArray(this.getVerticesData(VertexBuffer.UV4Kind));\n            if (this.isVertexBufferUpdatable(VertexBuffer.UV4Kind)) {\n                serializationObject.uv4s._updatable = true;\n            }\n        }\n        if (this.isVerticesDataPresent(VertexBuffer.UV5Kind)) {\n            serializationObject.uv5s = this._toNumberArray(this.getVerticesData(VertexBuffer.UV5Kind));\n            if (this.isVertexBufferUpdatable(VertexBuffer.UV5Kind)) {\n                serializationObject.uv5s._updatable = true;\n            }\n        }\n        if (this.isVerticesDataPresent(VertexBuffer.UV6Kind)) {\n            serializationObject.uv6s = this._toNumberArray(this.getVerticesData(VertexBuffer.UV6Kind));\n            if (this.isVertexBufferUpdatable(VertexBuffer.UV6Kind)) {\n                serializationObject.uv6s._updatable = true;\n            }\n        }\n        if (this.isVerticesDataPresent(VertexBuffer.ColorKind)) {\n            serializationObject.colors = this._toNumberArray(this.getVerticesData(VertexBuffer.ColorKind));\n            if (this.isVertexBufferUpdatable(VertexBuffer.ColorKind)) {\n                serializationObject.colors._updatable = true;\n            }\n        }\n        if (this.isVerticesDataPresent(VertexBuffer.MatricesIndicesKind)) {\n            serializationObject.matricesIndices = this._toNumberArray(this.getVerticesData(VertexBuffer.MatricesIndicesKind));\n            serializationObject.matricesIndices._isExpanded = true;\n            if (this.isVertexBufferUpdatable(VertexBuffer.MatricesIndicesKind)) {\n                serializationObject.matricesIndices._updatable = true;\n            }\n        }\n        if (this.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind)) {\n            serializationObject.matricesWeights = this._toNumberArray(this.getVerticesData(VertexBuffer.MatricesWeightsKind));\n            if (this.isVertexBufferUpdatable(VertexBuffer.MatricesWeightsKind)) {\n                serializationObject.matricesWeights._updatable = true;\n            }\n        }\n        serializationObject.indices = this._toNumberArray(this.getIndices());\n        return serializationObject;\n    }\n    // Statics\n    /**\n     * Extracts a clone of a mesh geometry\n     * @param mesh defines the source mesh\n     * @param id defines the unique ID of the new geometry object\n     * @returns the new geometry object\n     */\n    static ExtractFromMesh(mesh, id) {\n        const geometry = mesh._geometry;\n        if (!geometry) {\n            return null;\n        }\n        return geometry.copy(id);\n    }\n    /**\n     * You should now use Tools.RandomId(), this method is still here for legacy reasons.\n     * Implementation from http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#answer-2117523\n     * Be aware Math.random() could cause collisions, but:\n     * \"All but 6 of the 128 bits of the ID are randomly generated, which means that for any two ids, there's a 1 in 2^^122 (or 5.3x10^^36) chance they'll collide\"\n     * @returns a string containing a new GUID\n     */\n    static RandomId() {\n        return Tools.RandomId();\n    }\n    static _GetGeometryByLoadedUniqueId(uniqueId, scene) {\n        for (let index = 0; index < scene.geometries.length; index++) {\n            if (scene.geometries[index]._loadedUniqueId === uniqueId) {\n                return scene.geometries[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * @internal\n     */\n    static _ImportGeometry(parsedGeometry, mesh) {\n        const scene = mesh.getScene();\n        // Geometry\n        const geometryUniqueId = parsedGeometry.geometryUniqueId;\n        const geometryId = parsedGeometry.geometryId;\n        if (geometryUniqueId || geometryId) {\n            const geometry = geometryUniqueId ? this._GetGeometryByLoadedUniqueId(geometryUniqueId, scene) : scene.getGeometryById(geometryId);\n            if (geometry) {\n                geometry.applyToMesh(mesh);\n            }\n        }\n        else if (parsedGeometry instanceof ArrayBuffer) {\n            const binaryInfo = mesh._binaryInfo;\n            if (binaryInfo.positionsAttrDesc && binaryInfo.positionsAttrDesc.count > 0) {\n                const positionsData = new Float32Array(parsedGeometry, binaryInfo.positionsAttrDesc.offset, binaryInfo.positionsAttrDesc.count);\n                mesh.setVerticesData(VertexBuffer.PositionKind, positionsData, false);\n            }\n            if (binaryInfo.normalsAttrDesc && binaryInfo.normalsAttrDesc.count > 0) {\n                const normalsData = new Float32Array(parsedGeometry, binaryInfo.normalsAttrDesc.offset, binaryInfo.normalsAttrDesc.count);\n                mesh.setVerticesData(VertexBuffer.NormalKind, normalsData, false);\n            }\n            if (binaryInfo.tangetsAttrDesc && binaryInfo.tangetsAttrDesc.count > 0) {\n                const tangentsData = new Float32Array(parsedGeometry, binaryInfo.tangetsAttrDesc.offset, binaryInfo.tangetsAttrDesc.count);\n                mesh.setVerticesData(VertexBuffer.TangentKind, tangentsData, false);\n            }\n            if (binaryInfo.uvsAttrDesc && binaryInfo.uvsAttrDesc.count > 0) {\n                const uvsData = new Float32Array(parsedGeometry, binaryInfo.uvsAttrDesc.offset, binaryInfo.uvsAttrDesc.count);\n                if (CompatibilityOptions.UseOpenGLOrientationForUV) {\n                    for (let index = 1; index < uvsData.length; index += 2) {\n                        uvsData[index] = 1 - uvsData[index];\n                    }\n                }\n                mesh.setVerticesData(VertexBuffer.UVKind, uvsData, false);\n            }\n            if (binaryInfo.uvs2AttrDesc && binaryInfo.uvs2AttrDesc.count > 0) {\n                const uvs2Data = new Float32Array(parsedGeometry, binaryInfo.uvs2AttrDesc.offset, binaryInfo.uvs2AttrDesc.count);\n                if (CompatibilityOptions.UseOpenGLOrientationForUV) {\n                    for (let index = 1; index < uvs2Data.length; index += 2) {\n                        uvs2Data[index] = 1 - uvs2Data[index];\n                    }\n                }\n                mesh.setVerticesData(VertexBuffer.UV2Kind, uvs2Data, false);\n            }\n            if (binaryInfo.uvs3AttrDesc && binaryInfo.uvs3AttrDesc.count > 0) {\n                const uvs3Data = new Float32Array(parsedGeometry, binaryInfo.uvs3AttrDesc.offset, binaryInfo.uvs3AttrDesc.count);\n                if (CompatibilityOptions.UseOpenGLOrientationForUV) {\n                    for (let index = 1; index < uvs3Data.length; index += 2) {\n                        uvs3Data[index] = 1 - uvs3Data[index];\n                    }\n                }\n                mesh.setVerticesData(VertexBuffer.UV3Kind, uvs3Data, false);\n            }\n            if (binaryInfo.uvs4AttrDesc && binaryInfo.uvs4AttrDesc.count > 0) {\n                const uvs4Data = new Float32Array(parsedGeometry, binaryInfo.uvs4AttrDesc.offset, binaryInfo.uvs4AttrDesc.count);\n                if (CompatibilityOptions.UseOpenGLOrientationForUV) {\n                    for (let index = 1; index < uvs4Data.length; index += 2) {\n                        uvs4Data[index] = 1 - uvs4Data[index];\n                    }\n                }\n                mesh.setVerticesData(VertexBuffer.UV4Kind, uvs4Data, false);\n            }\n            if (binaryInfo.uvs5AttrDesc && binaryInfo.uvs5AttrDesc.count > 0) {\n                const uvs5Data = new Float32Array(parsedGeometry, binaryInfo.uvs5AttrDesc.offset, binaryInfo.uvs5AttrDesc.count);\n                if (CompatibilityOptions.UseOpenGLOrientationForUV) {\n                    for (let index = 1; index < uvs5Data.length; index += 2) {\n                        uvs5Data[index] = 1 - uvs5Data[index];\n                    }\n                }\n                mesh.setVerticesData(VertexBuffer.UV5Kind, uvs5Data, false);\n            }\n            if (binaryInfo.uvs6AttrDesc && binaryInfo.uvs6AttrDesc.count > 0) {\n                const uvs6Data = new Float32Array(parsedGeometry, binaryInfo.uvs6AttrDesc.offset, binaryInfo.uvs6AttrDesc.count);\n                if (CompatibilityOptions.UseOpenGLOrientationForUV) {\n                    for (let index = 1; index < uvs6Data.length; index += 2) {\n                        uvs6Data[index] = 1 - uvs6Data[index];\n                    }\n                }\n                mesh.setVerticesData(VertexBuffer.UV6Kind, uvs6Data, false);\n            }\n            if (binaryInfo.colorsAttrDesc && binaryInfo.colorsAttrDesc.count > 0) {\n                const colorsData = new Float32Array(parsedGeometry, binaryInfo.colorsAttrDesc.offset, binaryInfo.colorsAttrDesc.count);\n                mesh.setVerticesData(VertexBuffer.ColorKind, colorsData, false, binaryInfo.colorsAttrDesc.stride);\n            }\n            if (binaryInfo.matricesIndicesAttrDesc && binaryInfo.matricesIndicesAttrDesc.count > 0) {\n                const matricesIndicesData = new Int32Array(parsedGeometry, binaryInfo.matricesIndicesAttrDesc.offset, binaryInfo.matricesIndicesAttrDesc.count);\n                const floatIndices = [];\n                for (let i = 0; i < matricesIndicesData.length; i++) {\n                    const index = matricesIndicesData[i];\n                    floatIndices.push(index & 0x000000ff);\n                    floatIndices.push((index & 0x0000ff00) >> 8);\n                    floatIndices.push((index & 0x00ff0000) >> 16);\n                    floatIndices.push((index >> 24) & 0xff); // & 0xFF to convert to v + 256 if v < 0\n                }\n                mesh.setVerticesData(VertexBuffer.MatricesIndicesKind, floatIndices, false);\n            }\n            if (binaryInfo.matricesIndicesExtraAttrDesc && binaryInfo.matricesIndicesExtraAttrDesc.count > 0) {\n                const matricesIndicesData = new Int32Array(parsedGeometry, binaryInfo.matricesIndicesExtraAttrDesc.offset, binaryInfo.matricesIndicesExtraAttrDesc.count);\n                const floatIndices = [];\n                for (let i = 0; i < matricesIndicesData.length; i++) {\n                    const index = matricesIndicesData[i];\n                    floatIndices.push(index & 0x000000ff);\n                    floatIndices.push((index & 0x0000ff00) >> 8);\n                    floatIndices.push((index & 0x00ff0000) >> 16);\n                    floatIndices.push((index >> 24) & 0xff); // & 0xFF to convert to v + 256 if v < 0\n                }\n                mesh.setVerticesData(VertexBuffer.MatricesIndicesExtraKind, floatIndices, false);\n            }\n            if (binaryInfo.matricesWeightsAttrDesc && binaryInfo.matricesWeightsAttrDesc.count > 0) {\n                const matricesWeightsData = new Float32Array(parsedGeometry, binaryInfo.matricesWeightsAttrDesc.offset, binaryInfo.matricesWeightsAttrDesc.count);\n                mesh.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeightsData, false);\n            }\n            if (binaryInfo.indicesAttrDesc && binaryInfo.indicesAttrDesc.count > 0) {\n                const indicesData = new Int32Array(parsedGeometry, binaryInfo.indicesAttrDesc.offset, binaryInfo.indicesAttrDesc.count);\n                mesh.setIndices(indicesData, null);\n            }\n            if (binaryInfo.subMeshesAttrDesc && binaryInfo.subMeshesAttrDesc.count > 0) {\n                const subMeshesData = new Int32Array(parsedGeometry, binaryInfo.subMeshesAttrDesc.offset, binaryInfo.subMeshesAttrDesc.count * 5);\n                mesh.subMeshes = [];\n                for (let i = 0; i < binaryInfo.subMeshesAttrDesc.count; i++) {\n                    const materialIndex = subMeshesData[i * 5 + 0];\n                    const verticesStart = subMeshesData[i * 5 + 1];\n                    const verticesCount = subMeshesData[i * 5 + 2];\n                    const indexStart = subMeshesData[i * 5 + 3];\n                    const indexCount = subMeshesData[i * 5 + 4];\n                    SubMesh.AddToMesh(materialIndex, verticesStart, verticesCount, indexStart, indexCount, mesh);\n                }\n            }\n        }\n        else if (parsedGeometry.positions && parsedGeometry.normals && parsedGeometry.indices) {\n            mesh.setVerticesData(VertexBuffer.PositionKind, parsedGeometry.positions, parsedGeometry.positions._updatable);\n            mesh.setVerticesData(VertexBuffer.NormalKind, parsedGeometry.normals, parsedGeometry.normals._updatable);\n            if (parsedGeometry.tangents) {\n                mesh.setVerticesData(VertexBuffer.TangentKind, parsedGeometry.tangents, parsedGeometry.tangents._updatable);\n            }\n            if (parsedGeometry.uvs) {\n                mesh.setVerticesData(VertexBuffer.UVKind, parsedGeometry.uvs, parsedGeometry.uvs._updatable);\n            }\n            if (parsedGeometry.uvs2) {\n                mesh.setVerticesData(VertexBuffer.UV2Kind, parsedGeometry.uvs2, parsedGeometry.uvs2._updatable);\n            }\n            if (parsedGeometry.uvs3) {\n                mesh.setVerticesData(VertexBuffer.UV3Kind, parsedGeometry.uvs3, parsedGeometry.uvs3._updatable);\n            }\n            if (parsedGeometry.uvs4) {\n                mesh.setVerticesData(VertexBuffer.UV4Kind, parsedGeometry.uvs4, parsedGeometry.uvs4._updatable);\n            }\n            if (parsedGeometry.uvs5) {\n                mesh.setVerticesData(VertexBuffer.UV5Kind, parsedGeometry.uvs5, parsedGeometry.uvs5._updatable);\n            }\n            if (parsedGeometry.uvs6) {\n                mesh.setVerticesData(VertexBuffer.UV6Kind, parsedGeometry.uvs6, parsedGeometry.uvs6._updatable);\n            }\n            if (parsedGeometry.colors) {\n                mesh.setVerticesData(VertexBuffer.ColorKind, Color4.CheckColors4(parsedGeometry.colors, parsedGeometry.positions.length / 3), parsedGeometry.colors._updatable);\n            }\n            if (parsedGeometry.matricesIndices) {\n                if (!parsedGeometry.matricesIndices._isExpanded) {\n                    const floatIndices = [];\n                    for (let i = 0; i < parsedGeometry.matricesIndices.length; i++) {\n                        const matricesIndex = parsedGeometry.matricesIndices[i];\n                        floatIndices.push(matricesIndex & 0x000000ff);\n                        floatIndices.push((matricesIndex & 0x0000ff00) >> 8);\n                        floatIndices.push((matricesIndex & 0x00ff0000) >> 16);\n                        floatIndices.push((matricesIndex >> 24) & 0xff); // & 0xFF to convert to v + 256 if v < 0\n                    }\n                    mesh.setVerticesData(VertexBuffer.MatricesIndicesKind, floatIndices, parsedGeometry.matricesIndices._updatable);\n                }\n                else {\n                    delete parsedGeometry.matricesIndices._isExpanded;\n                    mesh.setVerticesData(VertexBuffer.MatricesIndicesKind, parsedGeometry.matricesIndices, parsedGeometry.matricesIndices._updatable);\n                }\n            }\n            if (parsedGeometry.matricesIndicesExtra) {\n                if (!parsedGeometry.matricesIndicesExtra._isExpanded) {\n                    const floatIndices = [];\n                    for (let i = 0; i < parsedGeometry.matricesIndicesExtra.length; i++) {\n                        const matricesIndex = parsedGeometry.matricesIndicesExtra[i];\n                        floatIndices.push(matricesIndex & 0x000000ff);\n                        floatIndices.push((matricesIndex & 0x0000ff00) >> 8);\n                        floatIndices.push((matricesIndex & 0x00ff0000) >> 16);\n                        floatIndices.push((matricesIndex >> 24) & 0xff); // & 0xFF to convert to v + 256 if v < 0\n                    }\n                    mesh.setVerticesData(VertexBuffer.MatricesIndicesExtraKind, floatIndices, parsedGeometry.matricesIndicesExtra._updatable);\n                }\n                else {\n                    delete parsedGeometry.matricesIndices._isExpanded;\n                    mesh.setVerticesData(VertexBuffer.MatricesIndicesExtraKind, parsedGeometry.matricesIndicesExtra, parsedGeometry.matricesIndicesExtra._updatable);\n                }\n            }\n            if (parsedGeometry.matricesWeights) {\n                Geometry._CleanMatricesWeights(parsedGeometry, mesh);\n                mesh.setVerticesData(VertexBuffer.MatricesWeightsKind, parsedGeometry.matricesWeights, parsedGeometry.matricesWeights._updatable);\n            }\n            if (parsedGeometry.matricesWeightsExtra) {\n                mesh.setVerticesData(VertexBuffer.MatricesWeightsExtraKind, parsedGeometry.matricesWeightsExtra, parsedGeometry.matricesWeights._updatable);\n            }\n            mesh.setIndices(parsedGeometry.indices, null);\n        }\n        // SubMeshes\n        if (parsedGeometry.subMeshes) {\n            mesh.subMeshes = [];\n            for (let subIndex = 0; subIndex < parsedGeometry.subMeshes.length; subIndex++) {\n                const parsedSubMesh = parsedGeometry.subMeshes[subIndex];\n                SubMesh.AddToMesh(parsedSubMesh.materialIndex, parsedSubMesh.verticesStart, parsedSubMesh.verticesCount, parsedSubMesh.indexStart, parsedSubMesh.indexCount, mesh);\n            }\n        }\n        // Flat shading\n        if (mesh._shouldGenerateFlatShading) {\n            mesh.convertToFlatShadedMesh();\n            mesh._shouldGenerateFlatShading = false;\n        }\n        // Update\n        mesh.computeWorldMatrix(true);\n        scene.onMeshImportedObservable.notifyObservers(mesh);\n    }\n    static _CleanMatricesWeights(parsedGeometry, mesh) {\n        const epsilon = 1e-3;\n        if (!SceneLoaderFlags.CleanBoneMatrixWeights) {\n            return;\n        }\n        let noInfluenceBoneIndex = 0.0;\n        if (parsedGeometry.skeletonId > -1) {\n            const skeleton = mesh.getScene().getLastSkeletonById(parsedGeometry.skeletonId);\n            if (!skeleton) {\n                return;\n            }\n            noInfluenceBoneIndex = skeleton.bones.length;\n        }\n        else {\n            return;\n        }\n        const matricesIndices = mesh.getVerticesData(VertexBuffer.MatricesIndicesKind);\n        const matricesIndicesExtra = mesh.getVerticesData(VertexBuffer.MatricesIndicesExtraKind);\n        const matricesWeights = parsedGeometry.matricesWeights;\n        const matricesWeightsExtra = parsedGeometry.matricesWeightsExtra;\n        const influencers = parsedGeometry.numBoneInfluencer;\n        const size = matricesWeights.length;\n        for (let i = 0; i < size; i += 4) {\n            let weight = 0.0;\n            let firstZeroWeight = -1;\n            for (let j = 0; j < 4; j++) {\n                const w = matricesWeights[i + j];\n                weight += w;\n                if (w < epsilon && firstZeroWeight < 0) {\n                    firstZeroWeight = j;\n                }\n            }\n            if (matricesWeightsExtra) {\n                for (let j = 0; j < 4; j++) {\n                    const w = matricesWeightsExtra[i + j];\n                    weight += w;\n                    if (w < epsilon && firstZeroWeight < 0) {\n                        firstZeroWeight = j + 4;\n                    }\n                }\n            }\n            if (firstZeroWeight < 0 || firstZeroWeight > influencers - 1) {\n                firstZeroWeight = influencers - 1;\n            }\n            if (weight > epsilon) {\n                const mweight = 1.0 / weight;\n                for (let j = 0; j < 4; j++) {\n                    matricesWeights[i + j] *= mweight;\n                }\n                if (matricesWeightsExtra) {\n                    for (let j = 0; j < 4; j++) {\n                        matricesWeightsExtra[i + j] *= mweight;\n                    }\n                }\n            }\n            else {\n                if (firstZeroWeight >= 4) {\n                    matricesWeightsExtra[i + firstZeroWeight - 4] = 1.0 - weight;\n                    matricesIndicesExtra[i + firstZeroWeight - 4] = noInfluenceBoneIndex;\n                }\n                else {\n                    matricesWeights[i + firstZeroWeight] = 1.0 - weight;\n                    matricesIndices[i + firstZeroWeight] = noInfluenceBoneIndex;\n                }\n            }\n        }\n        mesh.setVerticesData(VertexBuffer.MatricesIndicesKind, matricesIndices);\n        if (parsedGeometry.matricesWeightsExtra) {\n            mesh.setVerticesData(VertexBuffer.MatricesIndicesExtraKind, matricesIndicesExtra);\n        }\n    }\n    /**\n     * Create a new geometry from persisted data (Using .babylon file format)\n     * @param parsedVertexData defines the persisted data\n     * @param scene defines the hosting scene\n     * @param rootUrl defines the root url to use to load assets (like delayed data)\n     * @returns the new geometry object\n     */\n    static Parse(parsedVertexData, scene, rootUrl) {\n        const geometry = new Geometry(parsedVertexData.id, scene, undefined, parsedVertexData.updatable);\n        geometry._loadedUniqueId = parsedVertexData.uniqueId;\n        if (Tags) {\n            Tags.AddTagsTo(geometry, parsedVertexData.tags);\n        }\n        if (parsedVertexData.delayLoadingFile) {\n            geometry.delayLoadState = 4;\n            geometry.delayLoadingFile = rootUrl + parsedVertexData.delayLoadingFile;\n            geometry._boundingInfo = new BoundingInfo(Vector3.FromArray(parsedVertexData.boundingBoxMinimum), Vector3.FromArray(parsedVertexData.boundingBoxMaximum));\n            geometry._delayInfo = [];\n            if (parsedVertexData.hasUVs) {\n                geometry._delayInfo.push(VertexBuffer.UVKind);\n            }\n            if (parsedVertexData.hasUVs2) {\n                geometry._delayInfo.push(VertexBuffer.UV2Kind);\n            }\n            if (parsedVertexData.hasUVs3) {\n                geometry._delayInfo.push(VertexBuffer.UV3Kind);\n            }\n            if (parsedVertexData.hasUVs4) {\n                geometry._delayInfo.push(VertexBuffer.UV4Kind);\n            }\n            if (parsedVertexData.hasUVs5) {\n                geometry._delayInfo.push(VertexBuffer.UV5Kind);\n            }\n            if (parsedVertexData.hasUVs6) {\n                geometry._delayInfo.push(VertexBuffer.UV6Kind);\n            }\n            if (parsedVertexData.hasColors) {\n                geometry._delayInfo.push(VertexBuffer.ColorKind);\n            }\n            if (parsedVertexData.hasMatricesIndices) {\n                geometry._delayInfo.push(VertexBuffer.MatricesIndicesKind);\n            }\n            if (parsedVertexData.hasMatricesWeights) {\n                geometry._delayInfo.push(VertexBuffer.MatricesWeightsKind);\n            }\n            geometry._delayLoadingFunction = VertexData.ImportVertexData;\n        }\n        else {\n            VertexData.ImportVertexData(parsedVertexData, geometry);\n        }\n        scene.pushGeometry(geometry, true);\n        return geometry;\n    }\n}\n//# sourceMappingURL=geometry.js.map","import { Vector3 } from \"../Maths/math.vector.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { Color4 } from \"../Maths/math.color.js\";\nimport { Logger } from \"../Misc/logger.js\";\nMesh._GoldbergMeshParser = (parsedMesh, scene) => {\n    return GoldbergMesh.Parse(parsedMesh, scene);\n};\n/**\n * Mesh for a Goldberg Polyhedron which is made from 12 pentagonal and the rest hexagonal faces\n * @see https://en.wikipedia.org/wiki/Goldberg_polyhedron\n */\nexport class GoldbergMesh extends Mesh {\n    constructor() {\n        super(...arguments);\n        /**\n         * Defines the specific Goldberg data used in this mesh construction.\n         */\n        this.goldbergData = {\n            faceColors: [],\n            faceCenters: [],\n            faceZaxis: [],\n            faceXaxis: [],\n            faceYaxis: [],\n            nbSharedFaces: 0,\n            nbUnsharedFaces: 0,\n            nbFaces: 0,\n            nbFacesAtPole: 0,\n            adjacentFaces: [],\n        };\n    }\n    /**\n     * Gets the related Goldberg face from pole infos\n     * @param poleOrShared Defines the pole index or the shared face index if the fromPole parameter is passed in\n     * @param fromPole Defines an optional pole index to find the related info from\n     * @returns the goldberg face number\n     */\n    relatedGoldbergFace(poleOrShared, fromPole) {\n        if (fromPole === void 0) {\n            if (poleOrShared > this.goldbergData.nbUnsharedFaces - 1) {\n                Logger.Warn(\"Maximum number of unshared faces used\");\n                poleOrShared = this.goldbergData.nbUnsharedFaces - 1;\n            }\n            return this.goldbergData.nbUnsharedFaces + poleOrShared;\n        }\n        if (poleOrShared > 11) {\n            Logger.Warn(\"Last pole used\");\n            poleOrShared = 11;\n        }\n        if (fromPole > this.goldbergData.nbFacesAtPole - 1) {\n            Logger.Warn(\"Maximum number of faces at a pole used\");\n            fromPole = this.goldbergData.nbFacesAtPole - 1;\n        }\n        return 12 + poleOrShared * this.goldbergData.nbFacesAtPole + fromPole;\n    }\n    _changeGoldbergFaceColors(colorRange) {\n        for (let i = 0; i < colorRange.length; i++) {\n            const min = colorRange[i][0];\n            const max = colorRange[i][1];\n            const col = colorRange[i][2];\n            for (let f = min; f < max + 1; f++) {\n                this.goldbergData.faceColors[f] = col;\n            }\n        }\n        const newCols = [];\n        for (let f = 0; f < 12; f++) {\n            for (let i = 0; i < 5; i++) {\n                newCols.push(this.goldbergData.faceColors[f].r, this.goldbergData.faceColors[f].g, this.goldbergData.faceColors[f].b, this.goldbergData.faceColors[f].a);\n            }\n        }\n        for (let f = 12; f < this.goldbergData.faceColors.length; f++) {\n            for (let i = 0; i < 6; i++) {\n                newCols.push(this.goldbergData.faceColors[f].r, this.goldbergData.faceColors[f].g, this.goldbergData.faceColors[f].b, this.goldbergData.faceColors[f].a);\n            }\n        }\n        return newCols;\n    }\n    /**\n     * Set new goldberg face colors\n     * @param colorRange the new color to apply to the mesh\n     */\n    setGoldbergFaceColors(colorRange) {\n        const newCols = this._changeGoldbergFaceColors(colorRange);\n        this.setVerticesData(VertexBuffer.ColorKind, newCols);\n    }\n    /**\n     * Updates new goldberg face colors\n     * @param colorRange the new color to apply to the mesh\n     */\n    updateGoldbergFaceColors(colorRange) {\n        const newCols = this._changeGoldbergFaceColors(colorRange);\n        this.updateVerticesData(VertexBuffer.ColorKind, newCols);\n    }\n    _changeGoldbergFaceUVs(uvRange) {\n        const uvs = this.getVerticesData(VertexBuffer.UVKind);\n        for (let i = 0; i < uvRange.length; i++) {\n            const min = uvRange[i][0];\n            const max = uvRange[i][1];\n            const center = uvRange[i][2];\n            const radius = uvRange[i][3];\n            const angle = uvRange[i][4];\n            const points5 = [];\n            const points6 = [];\n            let u;\n            let v;\n            for (let p = 0; p < 5; p++) {\n                u = center.x + radius * Math.cos(angle + (p * Math.PI) / 2.5);\n                v = center.y + radius * Math.sin(angle + (p * Math.PI) / 2.5);\n                if (u < 0) {\n                    u = 0;\n                }\n                if (u > 1) {\n                    u = 1;\n                }\n                points5.push(u, v);\n            }\n            for (let p = 0; p < 6; p++) {\n                u = center.x + radius * Math.cos(angle + (p * Math.PI) / 3);\n                v = center.y + radius * Math.sin(angle + (p * Math.PI) / 3);\n                if (u < 0) {\n                    u = 0;\n                }\n                if (u > 1) {\n                    u = 1;\n                }\n                points6.push(u, v);\n            }\n            for (let f = min; f < Math.min(12, max + 1); f++) {\n                for (let p = 0; p < 5; p++) {\n                    uvs[10 * f + 2 * p] = points5[2 * p];\n                    uvs[10 * f + 2 * p + 1] = points5[2 * p + 1];\n                }\n            }\n            for (let f = Math.max(12, min); f < max + 1; f++) {\n                for (let p = 0; p < 6; p++) {\n                    //120 + 12 * (f - 12) = 12 * f - 24\n                    uvs[12 * f - 24 + 2 * p] = points6[2 * p];\n                    uvs[12 * f - 23 + 2 * p] = points6[2 * p + 1];\n                }\n            }\n        }\n        return uvs;\n    }\n    /**\n     * set new goldberg face UVs\n     * @param uvRange the new UVs to apply to the mesh\n     */\n    setGoldbergFaceUVs(uvRange) {\n        const newUVs = this._changeGoldbergFaceUVs(uvRange);\n        this.setVerticesData(VertexBuffer.UVKind, newUVs);\n    }\n    /**\n     * Updates new goldberg face UVs\n     * @param uvRange the new UVs to apply to the mesh\n     */\n    updateGoldbergFaceUVs(uvRange) {\n        const newUVs = this._changeGoldbergFaceUVs(uvRange);\n        this.updateVerticesData(VertexBuffer.UVKind, newUVs);\n    }\n    /**\n     * Places a mesh on a particular face of the goldberg polygon\n     * @param mesh Defines the mesh to position\n     * @param face Defines the face to position onto\n     * @param position Defines the position relative to the face we are positioning the mesh onto\n     */\n    placeOnGoldbergFaceAt(mesh, face, position) {\n        const orientation = Vector3.RotationFromAxis(this.goldbergData.faceXaxis[face], this.goldbergData.faceYaxis[face], this.goldbergData.faceZaxis[face]);\n        mesh.rotation = orientation;\n        mesh.position = this.goldbergData.faceCenters[face]\n            .add(this.goldbergData.faceXaxis[face].scale(position.x))\n            .add(this.goldbergData.faceYaxis[face].scale(position.y))\n            .add(this.goldbergData.faceZaxis[face].scale(position.z));\n    }\n    /**\n     * Serialize current mesh\n     * @param serializationObject defines the object which will receive the serialization data\n     */\n    serialize(serializationObject) {\n        super.serialize(serializationObject);\n        serializationObject.type = \"GoldbergMesh\";\n        const goldbergData = {};\n        goldbergData.adjacentFaces = this.goldbergData.adjacentFaces;\n        goldbergData.nbSharedFaces = this.goldbergData.nbSharedFaces;\n        goldbergData.nbUnsharedFaces = this.goldbergData.nbUnsharedFaces;\n        goldbergData.nbFaces = this.goldbergData.nbFaces;\n        goldbergData.nbFacesAtPole = this.goldbergData.nbFacesAtPole;\n        if (this.goldbergData.faceColors) {\n            goldbergData.faceColors = [];\n            for (const color of this.goldbergData.faceColors) {\n                goldbergData.faceColors.push(color.asArray());\n            }\n        }\n        if (this.goldbergData.faceCenters) {\n            goldbergData.faceCenters = [];\n            for (const vector of this.goldbergData.faceCenters) {\n                goldbergData.faceCenters.push(vector.asArray());\n            }\n        }\n        if (this.goldbergData.faceZaxis) {\n            goldbergData.faceZaxis = [];\n            for (const vector of this.goldbergData.faceZaxis) {\n                goldbergData.faceZaxis.push(vector.asArray());\n            }\n        }\n        if (this.goldbergData.faceYaxis) {\n            goldbergData.faceYaxis = [];\n            for (const vector of this.goldbergData.faceYaxis) {\n                goldbergData.faceYaxis.push(vector.asArray());\n            }\n        }\n        if (this.goldbergData.faceXaxis) {\n            goldbergData.faceXaxis = [];\n            for (const vector of this.goldbergData.faceXaxis) {\n                goldbergData.faceXaxis.push(vector.asArray());\n            }\n        }\n        serializationObject.goldbergData = goldbergData;\n    }\n    /**\n     * Parses a serialized goldberg mesh\n     * @param parsedMesh the serialized mesh\n     * @param scene the scene to create the goldberg mesh in\n     * @returns the created goldberg mesh\n     */\n    static Parse(parsedMesh, scene) {\n        const goldbergData = parsedMesh.goldbergData;\n        goldbergData.faceColors = goldbergData.faceColors.map((el) => Color4.FromArray(el));\n        goldbergData.faceCenters = goldbergData.faceCenters.map((el) => Vector3.FromArray(el));\n        goldbergData.faceZaxis = goldbergData.faceZaxis.map((el) => Vector3.FromArray(el));\n        goldbergData.faceXaxis = goldbergData.faceXaxis.map((el) => Vector3.FromArray(el));\n        goldbergData.faceYaxis = goldbergData.faceYaxis.map((el) => Vector3.FromArray(el));\n        const goldberg = new GoldbergMesh(parsedMesh.name, scene);\n        goldberg.goldbergData = goldbergData;\n        return goldberg;\n    }\n}\n//# sourceMappingURL=goldbergMesh.js.map","import { Vector3, Vector2, TmpVectors, Vector4 } from \"../Maths/math.vector.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nMesh._GroundMeshParser = (parsedMesh, scene) => {\n    return GroundMesh.Parse(parsedMesh, scene);\n};\n/**\n * Mesh representing the ground\n */\nexport class GroundMesh extends Mesh {\n    constructor(name, scene) {\n        super(name, scene);\n        /** If octree should be generated */\n        this.generateOctree = false;\n    }\n    /**\n     * \"GroundMesh\"\n     * @returns \"GroundMesh\"\n     */\n    getClassName() {\n        return \"GroundMesh\";\n    }\n    /**\n     * The minimum of x and y subdivisions\n     */\n    get subdivisions() {\n        return Math.min(this._subdivisionsX, this._subdivisionsY);\n    }\n    /**\n     * X subdivisions\n     */\n    get subdivisionsX() {\n        return this._subdivisionsX;\n    }\n    /**\n     * Y subdivisions\n     */\n    get subdivisionsY() {\n        return this._subdivisionsY;\n    }\n    /**\n     * This function will divide the mesh into submeshes and update an octree to help to select the right submeshes\n     * for rendering, picking and collision computations. Please note that you must have a decent number of submeshes\n     * to get performance improvements when using an octree.\n     * @param chunksCount the number of submeshes the mesh will be divided into\n     * @param octreeBlocksSize the maximum size of the octree blocks (Default: 32)\n     */\n    optimize(chunksCount, octreeBlocksSize = 32) {\n        this._subdivisionsX = chunksCount;\n        this._subdivisionsY = chunksCount;\n        this.subdivide(chunksCount);\n        // Call the octree system optimization if it is defined.\n        const thisAsAny = this;\n        if (thisAsAny.createOrUpdateSubmeshesOctree) {\n            thisAsAny.createOrUpdateSubmeshesOctree(octreeBlocksSize);\n        }\n    }\n    /**\n     * Returns a height (y) value in the World system :\n     * the ground altitude at the coordinates (x, z) expressed in the World system.\n     * @param x x coordinate\n     * @param z z coordinate\n     * @returns the ground y position if (x, z) are outside the ground surface.\n     */\n    getHeightAtCoordinates(x, z) {\n        const world = this.getWorldMatrix();\n        const invMat = TmpVectors.Matrix[5];\n        world.invertToRef(invMat);\n        const tmpVect = TmpVectors.Vector3[8];\n        Vector3.TransformCoordinatesFromFloatsToRef(x, 0.0, z, invMat, tmpVect); // transform x,z in the mesh local space\n        x = tmpVect.x;\n        z = tmpVect.z;\n        if (x < this._minX || x >= this._maxX || z <= this._minZ || z > this._maxZ) {\n            return this.position.y;\n        }\n        if (!this._heightQuads || this._heightQuads.length == 0) {\n            this._initHeightQuads();\n            this._computeHeightQuads();\n        }\n        const facet = this._getFacetAt(x, z);\n        const y = -(facet.x * x + facet.z * z + facet.w) / facet.y;\n        // return y in the World system\n        Vector3.TransformCoordinatesFromFloatsToRef(0.0, y, 0.0, world, tmpVect);\n        return tmpVect.y;\n    }\n    /**\n     * Returns a normalized vector (Vector3) orthogonal to the ground\n     * at the ground coordinates (x, z) expressed in the World system.\n     * @param x x coordinate\n     * @param z z coordinate\n     * @returns Vector3(0.0, 1.0, 0.0) if (x, z) are outside the ground surface.\n     */\n    getNormalAtCoordinates(x, z) {\n        const normal = new Vector3(0.0, 1.0, 0.0);\n        this.getNormalAtCoordinatesToRef(x, z, normal);\n        return normal;\n    }\n    /**\n     * Updates the Vector3 passed a reference with a normalized vector orthogonal to the ground\n     * at the ground coordinates (x, z) expressed in the World system.\n     * Doesn't update the reference Vector3 if (x, z) are outside the ground surface.\n     * @param x x coordinate\n     * @param z z coordinate\n     * @param ref vector to store the result\n     * @returns the GroundMesh.\n     */\n    getNormalAtCoordinatesToRef(x, z, ref) {\n        const world = this.getWorldMatrix();\n        const tmpMat = TmpVectors.Matrix[5];\n        world.invertToRef(tmpMat);\n        const tmpVect = TmpVectors.Vector3[8];\n        Vector3.TransformCoordinatesFromFloatsToRef(x, 0.0, z, tmpMat, tmpVect); // transform x,z in the mesh local space\n        x = tmpVect.x;\n        z = tmpVect.z;\n        if (x < this._minX || x > this._maxX || z < this._minZ || z > this._maxZ) {\n            return this;\n        }\n        if (!this._heightQuads || this._heightQuads.length == 0) {\n            this._initHeightQuads();\n            this._computeHeightQuads();\n        }\n        const facet = this._getFacetAt(x, z);\n        Vector3.TransformNormalFromFloatsToRef(facet.x, facet.y, facet.z, world, ref);\n        return this;\n    }\n    /**\n     * Force the heights to be recomputed for getHeightAtCoordinates() or getNormalAtCoordinates()\n     * if the ground has been updated.\n     * This can be used in the render loop.\n     * @returns the GroundMesh.\n     */\n    updateCoordinateHeights() {\n        if (!this._heightQuads || this._heightQuads.length == 0) {\n            this._initHeightQuads();\n        }\n        this._computeHeightQuads();\n        return this;\n    }\n    // Returns the element \"facet\" from the heightQuads array relative to (x, z) local coordinates\n    _getFacetAt(x, z) {\n        // retrieve col and row from x, z coordinates in the ground local system\n        const col = Math.floor(((x + this._maxX) * this._subdivisionsX) / this._width);\n        const row = Math.floor((-(z + this._maxZ) * this._subdivisionsY) / this._height + this._subdivisionsY);\n        const quad = this._heightQuads[row * this._subdivisionsX + col];\n        let facet;\n        if (z < quad.slope.x * x + quad.slope.y) {\n            facet = quad.facet1;\n        }\n        else {\n            facet = quad.facet2;\n        }\n        return facet;\n    }\n    //  Creates and populates the heightMap array with \"facet\" elements :\n    // a quad is two triangular facets separated by a slope, so a \"facet\" element is 1 slope + 2 facets\n    // slope : Vector2(c, h) = 2D diagonal line equation setting apart two triangular facets in a quad : z = cx + h\n    // facet1 : Vector4(a, b, c, d) = first facet 3D plane equation : ax + by + cz + d = 0\n    // facet2 :  Vector4(a, b, c, d) = second facet 3D plane equation : ax + by + cz + d = 0\n    // Returns the GroundMesh.\n    _initHeightQuads() {\n        const subdivisionsX = this._subdivisionsX;\n        const subdivisionsY = this._subdivisionsY;\n        this._heightQuads = new Array();\n        for (let row = 0; row < subdivisionsY; row++) {\n            for (let col = 0; col < subdivisionsX; col++) {\n                const quad = { slope: Vector2.Zero(), facet1: new Vector4(0.0, 0.0, 0.0, 0.0), facet2: new Vector4(0.0, 0.0, 0.0, 0.0) };\n                this._heightQuads[row * subdivisionsX + col] = quad;\n            }\n        }\n        return this;\n    }\n    // Compute each quad element values and update the the heightMap array :\n    // slope : Vector2(c, h) = 2D diagonal line equation setting apart two triangular facets in a quad : z = cx + h\n    // facet1 : Vector4(a, b, c, d) = first facet 3D plane equation : ax + by + cz + d = 0\n    // facet2 :  Vector4(a, b, c, d) = second facet 3D plane equation : ax + by + cz + d = 0\n    // Returns the GroundMesh.\n    _computeHeightQuads() {\n        const positions = this.getVerticesData(VertexBuffer.PositionKind);\n        if (!positions) {\n            return this;\n        }\n        const v1 = TmpVectors.Vector3[3];\n        const v2 = TmpVectors.Vector3[2];\n        const v3 = TmpVectors.Vector3[1];\n        const v4 = TmpVectors.Vector3[0];\n        const v1v2 = TmpVectors.Vector3[4];\n        const v1v3 = TmpVectors.Vector3[5];\n        const v1v4 = TmpVectors.Vector3[6];\n        const norm1 = TmpVectors.Vector3[7];\n        const norm2 = TmpVectors.Vector3[8];\n        let i = 0;\n        let j = 0;\n        let k = 0;\n        let cd = 0; // 2D slope coefficient : z = cd * x + h\n        let h = 0;\n        let d1 = 0; // facet plane equation : ax + by + cz + d = 0\n        let d2 = 0;\n        const subdivisionsX = this._subdivisionsX;\n        const subdivisionsY = this._subdivisionsY;\n        for (let row = 0; row < subdivisionsY; row++) {\n            for (let col = 0; col < subdivisionsX; col++) {\n                i = col * 3;\n                j = row * (subdivisionsX + 1) * 3;\n                k = (row + 1) * (subdivisionsX + 1) * 3;\n                v1.x = positions[j + i];\n                v1.y = positions[j + i + 1];\n                v1.z = positions[j + i + 2];\n                v2.x = positions[j + i + 3];\n                v2.y = positions[j + i + 4];\n                v2.z = positions[j + i + 5];\n                v3.x = positions[k + i];\n                v3.y = positions[k + i + 1];\n                v3.z = positions[k + i + 2];\n                v4.x = positions[k + i + 3];\n                v4.y = positions[k + i + 4];\n                v4.z = positions[k + i + 5];\n                // 2D slope V1V4\n                cd = (v4.z - v1.z) / (v4.x - v1.x);\n                h = v1.z - cd * v1.x; // v1 belongs to the slope\n                // facet equations :\n                // we compute each facet normal vector\n                // the equation of the facet plane is : norm.x * x + norm.y * y + norm.z * z + d = 0\n                // we compute the value d by applying the equation to v1 which belongs to the plane\n                // then we store the facet equation in a Vector4\n                v2.subtractToRef(v1, v1v2);\n                v3.subtractToRef(v1, v1v3);\n                v4.subtractToRef(v1, v1v4);\n                Vector3.CrossToRef(v1v4, v1v3, norm1); // caution : CrossToRef uses the Tmp class\n                Vector3.CrossToRef(v1v2, v1v4, norm2);\n                norm1.normalize();\n                norm2.normalize();\n                d1 = -(norm1.x * v1.x + norm1.y * v1.y + norm1.z * v1.z);\n                d2 = -(norm2.x * v2.x + norm2.y * v2.y + norm2.z * v2.z);\n                const quad = this._heightQuads[row * subdivisionsX + col];\n                quad.slope.copyFromFloats(cd, h);\n                quad.facet1.copyFromFloats(norm1.x, norm1.y, norm1.z, d1);\n                quad.facet2.copyFromFloats(norm2.x, norm2.y, norm2.z, d2);\n            }\n        }\n        return this;\n    }\n    /**\n     * Serializes this ground mesh\n     * @param serializationObject object to write serialization to\n     */\n    serialize(serializationObject) {\n        super.serialize(serializationObject);\n        serializationObject.subdivisionsX = this._subdivisionsX;\n        serializationObject.subdivisionsY = this._subdivisionsY;\n        serializationObject.minX = this._minX;\n        serializationObject.maxX = this._maxX;\n        serializationObject.minZ = this._minZ;\n        serializationObject.maxZ = this._maxZ;\n        serializationObject.width = this._width;\n        serializationObject.height = this._height;\n    }\n    /**\n     * Parses a serialized ground mesh\n     * @param parsedMesh the serialized mesh\n     * @param scene the scene to create the ground mesh in\n     * @returns the created ground mesh\n     */\n    static Parse(parsedMesh, scene) {\n        const result = new GroundMesh(parsedMesh.name, scene);\n        result._subdivisionsX = parsedMesh.subdivisionsX || 1;\n        result._subdivisionsY = parsedMesh.subdivisionsY || 1;\n        result._minX = parsedMesh.minX;\n        result._maxX = parsedMesh.maxX;\n        result._minZ = parsedMesh.minZ;\n        result._maxZ = parsedMesh.maxZ;\n        result._width = parsedMesh.width;\n        result._height = parsedMesh.height;\n        return result;\n    }\n}\n//# sourceMappingURL=groundMesh.js.map","import { Quaternion, Matrix, Vector3, Vector2 } from \"../Maths/math.vector.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { SubMesh } from \"../Meshes/subMesh.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { Color4 } from \"../Maths/math.color.js\";\n\n/**\n * Unique ID when we import meshes from Babylon to CSG\n */\nlet currentCSGMeshId = 0;\n/**\n * Represents a vertex of a polygon. Use your own vertex class instead of this\n * one to provide additional features like texture coordinates and vertex\n * colors. Custom vertex classes need to provide a `pos` property and `clone()`,\n * `flip()`, and `interpolate()` methods that behave analogous to the ones\n * defined by `BABYLON.CSG.Vertex`. This class provides `normal` so convenience\n * functions like `BABYLON.CSG.sphere()` can return a smooth vertex normal, but `normal`\n * is not used anywhere else.\n * Same goes for uv, it allows to keep the original vertex uv coordinates of the 2 meshes\n */\nclass Vertex {\n    /**\n     * Initializes the vertex\n     * @param pos The position of the vertex\n     * @param normal The normal of the vertex\n     * @param uv The texture coordinate of the vertex\n     * @param vertColor The RGBA color of the vertex\n     */\n    constructor(\n    /**\n     * The position of the vertex\n     */\n    pos, \n    /**\n     * The normal of the vertex\n     */\n    normal, \n    /**\n     * The texture coordinate of the vertex\n     */\n    uv, \n    /**\n     * The texture coordinate of the vertex\n     */\n    vertColor) {\n        this.pos = pos;\n        this.normal = normal;\n        this.uv = uv;\n        this.vertColor = vertColor;\n    }\n    /**\n     * Make a clone, or deep copy, of the vertex\n     * @returns A new Vertex\n     */\n    clone() {\n        var _a, _b;\n        return new Vertex(this.pos.clone(), this.normal.clone(), (_a = this.uv) === null || _a === void 0 ? void 0 : _a.clone(), (_b = this.vertColor) === null || _b === void 0 ? void 0 : _b.clone());\n    }\n    /**\n     * Invert all orientation-specific data (e.g. vertex normal). Called when the\n     * orientation of a polygon is flipped.\n     */\n    flip() {\n        this.normal = this.normal.scale(-1);\n    }\n    /**\n     * Create a new vertex between this vertex and `other` by linearly\n     * interpolating all properties using a parameter of `t`. Subclasses should\n     * override this to interpolate additional properties.\n     * @param other the vertex to interpolate against\n     * @param t The factor used to linearly interpolate between the vertices\n     */\n    interpolate(other, t) {\n        return new Vertex(Vector3.Lerp(this.pos, other.pos, t), Vector3.Lerp(this.normal, other.normal, t), this.uv && other.uv ? Vector2.Lerp(this.uv, other.uv, t) : undefined, this.vertColor && other.vertColor ? Color4.Lerp(this.vertColor, other.vertColor, t) : undefined);\n    }\n}\n/**\n * Represents a plane in 3D space.\n */\nclass Plane {\n    /**\n     * Initializes the plane\n     * @param normal The normal for the plane\n     * @param w\n     */\n    constructor(normal, w) {\n        this.normal = normal;\n        this.w = w;\n    }\n    /**\n     * Construct a plane from three points\n     * @param a Point a\n     * @param b Point b\n     * @param c Point c\n     */\n    static FromPoints(a, b, c) {\n        const v0 = c.subtract(a);\n        const v1 = b.subtract(a);\n        if (v0.lengthSquared() === 0 || v1.lengthSquared() === 0) {\n            return null;\n        }\n        const n = Vector3.Normalize(Vector3.Cross(v0, v1));\n        return new Plane(n, Vector3.Dot(n, a));\n    }\n    /**\n     * Clone, or make a deep copy of the plane\n     * @returns a new Plane\n     */\n    clone() {\n        return new Plane(this.normal.clone(), this.w);\n    }\n    /**\n     * Flip the face of the plane\n     */\n    flip() {\n        this.normal.scaleInPlace(-1);\n        this.w = -this.w;\n    }\n    /**\n     * Split `polygon` by this plane if needed, then put the polygon or polygon\n     * fragments in the appropriate lists. Coplanar polygons go into either\n    `* coplanarFront` or `coplanarBack` depending on their orientation with\n     * respect to this plane. Polygons in front or in back of this plane go into\n     * either `front` or `back`\n     * @param polygon The polygon to be split\n     * @param coplanarFront Will contain polygons coplanar with the plane that are oriented to the front of the plane\n     * @param coplanarBack Will contain polygons coplanar with the plane that are oriented to the back of the plane\n     * @param front Will contain the polygons in front of the plane\n     * @param back Will contain the polygons begind the plane\n     */\n    splitPolygon(polygon, coplanarFront, coplanarBack, front, back) {\n        const COPLANAR = 0;\n        const FRONT = 1;\n        const BACK = 2;\n        const SPANNING = 3;\n        // Classify each point as well as the entire polygon into one of the above\n        // four classes.\n        let polygonType = 0;\n        const types = [];\n        let i;\n        let t;\n        for (i = 0; i < polygon.vertices.length; i++) {\n            t = Vector3.Dot(this.normal, polygon.vertices[i].pos) - this.w;\n            const type = t < -Plane.EPSILON ? BACK : t > Plane.EPSILON ? FRONT : COPLANAR;\n            polygonType |= type;\n            types.push(type);\n        }\n        // Put the polygon in the correct list, splitting it when necessary\n        switch (polygonType) {\n            case COPLANAR:\n                (Vector3.Dot(this.normal, polygon.plane.normal) > 0 ? coplanarFront : coplanarBack).push(polygon);\n                break;\n            case FRONT:\n                front.push(polygon);\n                break;\n            case BACK:\n                back.push(polygon);\n                break;\n            case SPANNING: {\n                const f = [], b = [];\n                for (i = 0; i < polygon.vertices.length; i++) {\n                    const j = (i + 1) % polygon.vertices.length;\n                    const ti = types[i], tj = types[j];\n                    const vi = polygon.vertices[i], vj = polygon.vertices[j];\n                    if (ti !== BACK) {\n                        f.push(vi);\n                    }\n                    if (ti !== FRONT) {\n                        b.push(ti !== BACK ? vi.clone() : vi);\n                    }\n                    if ((ti | tj) === SPANNING) {\n                        t = (this.w - Vector3.Dot(this.normal, vi.pos)) / Vector3.Dot(this.normal, vj.pos.subtract(vi.pos));\n                        const v = vi.interpolate(vj, t);\n                        f.push(v);\n                        b.push(v.clone());\n                    }\n                }\n                let poly;\n                if (f.length >= 3) {\n                    poly = new Polygon(f, polygon.shared);\n                    if (poly.plane) {\n                        front.push(poly);\n                    }\n                }\n                if (b.length >= 3) {\n                    poly = new Polygon(b, polygon.shared);\n                    if (poly.plane) {\n                        back.push(poly);\n                    }\n                }\n                break;\n            }\n        }\n    }\n}\n/**\n * `CSG.Plane.EPSILON` is the tolerance used by `splitPolygon()` to decide if a\n * point is on the plane\n */\nPlane.EPSILON = 1e-5;\n/**\n * Represents a convex polygon. The vertices used to initialize a polygon must\n * be coplanar and form a convex loop.\n *\n * Each convex polygon has a `shared` property, which is shared between all\n * polygons that are clones of each other or were split from the same polygon.\n * This can be used to define per-polygon properties (such as surface color)\n */\nclass Polygon {\n    /**\n     * Initializes the polygon\n     * @param vertices The vertices of the polygon\n     * @param shared The properties shared across all polygons\n     */\n    constructor(vertices, shared) {\n        this.vertices = vertices;\n        this.shared = shared;\n        this.plane = Plane.FromPoints(vertices[0].pos, vertices[1].pos, vertices[2].pos);\n    }\n    /**\n     * Clones, or makes a deep copy, or the polygon\n     */\n    clone() {\n        const vertices = this.vertices.map((v) => v.clone());\n        return new Polygon(vertices, this.shared);\n    }\n    /**\n     * Flips the faces of the polygon\n     */\n    flip() {\n        this.vertices.reverse().map((v) => {\n            v.flip();\n        });\n        this.plane.flip();\n    }\n}\n/**\n * Holds a node in a BSP tree. A BSP tree is built from a collection of polygons\n * by picking a polygon to split along. That polygon (and all other coplanar\n * polygons) are added directly to that node and the other polygons are added to\n * the front and/or back subtrees. This is not a leafy BSP tree since there is\n * no distinction between internal and leaf nodes\n */\nclass Node {\n    /**\n     * Initializes the node\n     * @param polygons A collection of polygons held in the node\n     */\n    constructor(polygons) {\n        this._plane = null;\n        this._front = null;\n        this._back = null;\n        this._polygons = new Array();\n        if (polygons) {\n            this.build(polygons);\n        }\n    }\n    /**\n     * Clones, or makes a deep copy, of the node\n     * @returns The cloned node\n     */\n    clone() {\n        const node = new Node();\n        node._plane = this._plane && this._plane.clone();\n        node._front = this._front && this._front.clone();\n        node._back = this._back && this._back.clone();\n        node._polygons = this._polygons.map((p) => p.clone());\n        return node;\n    }\n    /**\n     * Convert solid space to empty space and empty space to solid space\n     */\n    invert() {\n        for (let i = 0; i < this._polygons.length; i++) {\n            this._polygons[i].flip();\n        }\n        if (this._plane) {\n            this._plane.flip();\n        }\n        if (this._front) {\n            this._front.invert();\n        }\n        if (this._back) {\n            this._back.invert();\n        }\n        const temp = this._front;\n        this._front = this._back;\n        this._back = temp;\n    }\n    /**\n     * Recursively remove all polygons in `polygons` that are inside this BSP\n     * tree.\n     * @param polygons Polygons to remove from the BSP\n     * @returns Polygons clipped from the BSP\n     */\n    clipPolygons(polygons) {\n        if (!this._plane) {\n            return polygons.slice();\n        }\n        let front = new Array(), back = new Array();\n        for (let i = 0; i < polygons.length; i++) {\n            this._plane.splitPolygon(polygons[i], front, back, front, back);\n        }\n        if (this._front) {\n            front = this._front.clipPolygons(front);\n        }\n        if (this._back) {\n            back = this._back.clipPolygons(back);\n        }\n        else {\n            back = [];\n        }\n        return front.concat(back);\n    }\n    /**\n     * Remove all polygons in this BSP tree that are inside the other BSP tree\n     * `bsp`.\n     * @param bsp BSP containing polygons to remove from this BSP\n     */\n    clipTo(bsp) {\n        this._polygons = bsp.clipPolygons(this._polygons);\n        if (this._front) {\n            this._front.clipTo(bsp);\n        }\n        if (this._back) {\n            this._back.clipTo(bsp);\n        }\n    }\n    /**\n     * Return a list of all polygons in this BSP tree\n     * @returns List of all polygons in this BSP tree\n     */\n    allPolygons() {\n        let polygons = this._polygons.slice();\n        if (this._front) {\n            polygons = polygons.concat(this._front.allPolygons());\n        }\n        if (this._back) {\n            polygons = polygons.concat(this._back.allPolygons());\n        }\n        return polygons;\n    }\n    /**\n     * Build a BSP tree out of `polygons`. When called on an existing tree, the\n     * new polygons are filtered down to the bottom of the tree and become new\n     * nodes there. Each set of polygons is partitioned using the first polygon\n     * (no heuristic is used to pick a good split)\n     * @param polygons Polygons used to construct the BSP tree\n     */\n    build(polygons) {\n        if (!polygons.length) {\n            return;\n        }\n        if (!this._plane) {\n            this._plane = polygons[0].plane.clone();\n        }\n        const front = new Array(), back = new Array();\n        for (let i = 0; i < polygons.length; i++) {\n            this._plane.splitPolygon(polygons[i], this._polygons, this._polygons, front, back);\n        }\n        if (front.length) {\n            if (!this._front) {\n                this._front = new Node();\n            }\n            this._front.build(front);\n        }\n        if (back.length) {\n            if (!this._back) {\n                this._back = new Node();\n            }\n            this._back.build(back);\n        }\n    }\n}\n/**\n * Class for building Constructive Solid Geometry\n */\nexport class CSG {\n    constructor() {\n        this._polygons = new Array();\n    }\n    /**\n     * Convert the Mesh to CSG\n     * @param mesh The Mesh to convert to CSG\n     * @param absolute If true, the final (local) matrix transformation is set to the identity and not to that of `mesh`. It can help when dealing with right-handed meshes (default: false)\n     * @returns A new CSG from the Mesh\n     */\n    static FromMesh(mesh, absolute = false) {\n        let vertex, normal, uv = undefined, position, vertColor = undefined, polygon, vertices;\n        const polygons = new Array();\n        let matrix, meshPosition, meshRotation, meshRotationQuaternion = null, meshScaling;\n        let invertWinding = false;\n        if (mesh instanceof Mesh) {\n            mesh.computeWorldMatrix(true);\n            matrix = mesh.getWorldMatrix();\n            meshPosition = mesh.position.clone();\n            meshRotation = mesh.rotation.clone();\n            if (mesh.rotationQuaternion) {\n                meshRotationQuaternion = mesh.rotationQuaternion.clone();\n            }\n            meshScaling = mesh.scaling.clone();\n            if (mesh.material && absolute) {\n                invertWinding = mesh.material.sideOrientation === 0;\n            }\n        }\n        else {\n            throw \"BABYLON.CSG: Wrong Mesh type, must be BABYLON.Mesh\";\n        }\n        const indices = mesh.getIndices(), positions = mesh.getVerticesData(VertexBuffer.PositionKind), normals = mesh.getVerticesData(VertexBuffer.NormalKind), uvs = mesh.getVerticesData(VertexBuffer.UVKind), vertColors = mesh.getVerticesData(VertexBuffer.ColorKind);\n        const subMeshes = mesh.subMeshes;\n        for (let sm = 0, sml = subMeshes.length; sm < sml; sm++) {\n            for (let i = subMeshes[sm].indexStart, il = subMeshes[sm].indexCount + subMeshes[sm].indexStart; i < il; i += 3) {\n                vertices = [];\n                for (let j = 0; j < 3; j++) {\n                    const indexIndices = j === 0 ? i + j : invertWinding ? i + 3 - j : i + j;\n                    const sourceNormal = new Vector3(normals[indices[indexIndices] * 3], normals[indices[indexIndices] * 3 + 1], normals[indices[indexIndices] * 3 + 2]);\n                    if (uvs) {\n                        uv = new Vector2(uvs[indices[indexIndices] * 2], uvs[indices[indexIndices] * 2 + 1]);\n                    }\n                    if (vertColors) {\n                        vertColor = new Color4(vertColors[indices[indexIndices] * 4], vertColors[indices[indexIndices] * 4 + 1], vertColors[indices[indexIndices] * 4 + 2], vertColors[indices[indexIndices] * 4 + 3]);\n                    }\n                    const sourcePosition = new Vector3(positions[indices[indexIndices] * 3], positions[indices[indexIndices] * 3 + 1], positions[indices[indexIndices] * 3 + 2]);\n                    position = Vector3.TransformCoordinates(sourcePosition, matrix);\n                    normal = Vector3.TransformNormal(sourceNormal, matrix);\n                    vertex = new Vertex(position, normal, uv, vertColor);\n                    vertices.push(vertex);\n                }\n                polygon = new Polygon(vertices, { subMeshId: sm, meshId: currentCSGMeshId, materialIndex: subMeshes[sm].materialIndex });\n                // To handle the case of degenerated triangle\n                // polygon.plane == null <=> the polygon does not represent 1 single plane <=> the triangle is degenerated\n                if (polygon.plane) {\n                    polygons.push(polygon);\n                }\n            }\n        }\n        const csg = CSG._FromPolygons(polygons);\n        csg.matrix = absolute ? Matrix.Identity() : matrix;\n        csg.position = absolute ? Vector3.Zero() : meshPosition;\n        csg.rotation = absolute ? Vector3.Zero() : meshRotation;\n        csg.scaling = absolute ? Vector3.One() : meshScaling;\n        csg.rotationQuaternion = absolute && meshRotationQuaternion ? Quaternion.Identity() : meshRotationQuaternion;\n        currentCSGMeshId++;\n        return csg;\n    }\n    /**\n     * Construct a CSG solid from a list of `CSG.Polygon` instances.\n     * @param polygons Polygons used to construct a CSG solid\n     */\n    static _FromPolygons(polygons) {\n        const csg = new CSG();\n        csg._polygons = polygons;\n        return csg;\n    }\n    /**\n     * Clones, or makes a deep copy, of the CSG\n     * @returns A new CSG\n     */\n    clone() {\n        const csg = new CSG();\n        csg._polygons = this._polygons.map((p) => p.clone());\n        csg.copyTransformAttributes(this);\n        return csg;\n    }\n    /**\n     * Unions this CSG with another CSG\n     * @param csg The CSG to union against this CSG\n     * @returns The unioned CSG\n     */\n    union(csg) {\n        const a = new Node(this.clone()._polygons);\n        const b = new Node(csg.clone()._polygons);\n        a.clipTo(b);\n        b.clipTo(a);\n        b.invert();\n        b.clipTo(a);\n        b.invert();\n        a.build(b.allPolygons());\n        return CSG._FromPolygons(a.allPolygons()).copyTransformAttributes(this);\n    }\n    /**\n     * Unions this CSG with another CSG in place\n     * @param csg The CSG to union against this CSG\n     */\n    unionInPlace(csg) {\n        const a = new Node(this._polygons);\n        const b = new Node(csg._polygons);\n        a.clipTo(b);\n        b.clipTo(a);\n        b.invert();\n        b.clipTo(a);\n        b.invert();\n        a.build(b.allPolygons());\n        this._polygons = a.allPolygons();\n    }\n    /**\n     * Subtracts this CSG with another CSG\n     * @param csg The CSG to subtract against this CSG\n     * @returns A new CSG\n     */\n    subtract(csg) {\n        const a = new Node(this.clone()._polygons);\n        const b = new Node(csg.clone()._polygons);\n        a.invert();\n        a.clipTo(b);\n        b.clipTo(a);\n        b.invert();\n        b.clipTo(a);\n        b.invert();\n        a.build(b.allPolygons());\n        a.invert();\n        return CSG._FromPolygons(a.allPolygons()).copyTransformAttributes(this);\n    }\n    /**\n     * Subtracts this CSG with another CSG in place\n     * @param csg The CSG to subtract against this CSG\n     */\n    subtractInPlace(csg) {\n        const a = new Node(this._polygons);\n        const b = new Node(csg._polygons);\n        a.invert();\n        a.clipTo(b);\n        b.clipTo(a);\n        b.invert();\n        b.clipTo(a);\n        b.invert();\n        a.build(b.allPolygons());\n        a.invert();\n        this._polygons = a.allPolygons();\n    }\n    /**\n     * Intersect this CSG with another CSG\n     * @param csg The CSG to intersect against this CSG\n     * @returns A new CSG\n     */\n    intersect(csg) {\n        const a = new Node(this.clone()._polygons);\n        const b = new Node(csg.clone()._polygons);\n        a.invert();\n        b.clipTo(a);\n        b.invert();\n        a.clipTo(b);\n        b.clipTo(a);\n        a.build(b.allPolygons());\n        a.invert();\n        return CSG._FromPolygons(a.allPolygons()).copyTransformAttributes(this);\n    }\n    /**\n     * Intersects this CSG with another CSG in place\n     * @param csg The CSG to intersect against this CSG\n     */\n    intersectInPlace(csg) {\n        const a = new Node(this._polygons);\n        const b = new Node(csg._polygons);\n        a.invert();\n        b.clipTo(a);\n        b.invert();\n        a.clipTo(b);\n        b.clipTo(a);\n        a.build(b.allPolygons());\n        a.invert();\n        this._polygons = a.allPolygons();\n    }\n    /**\n     * Return a new CSG solid with solid and empty space switched. This solid is\n     * not modified.\n     * @returns A new CSG solid with solid and empty space switched\n     */\n    inverse() {\n        const csg = this.clone();\n        csg.inverseInPlace();\n        return csg;\n    }\n    /**\n     * Inverses the CSG in place\n     */\n    inverseInPlace() {\n        this._polygons.map((p) => {\n            p.flip();\n        });\n    }\n    /**\n     * This is used to keep meshes transformations so they can be restored\n     * when we build back a Babylon Mesh\n     * NB : All CSG operations are performed in world coordinates\n     * @param csg The CSG to copy the transform attributes from\n     * @returns This CSG\n     */\n    copyTransformAttributes(csg) {\n        this.matrix = csg.matrix;\n        this.position = csg.position;\n        this.rotation = csg.rotation;\n        this.scaling = csg.scaling;\n        this.rotationQuaternion = csg.rotationQuaternion;\n        return this;\n    }\n    /**\n     * Build Raw mesh from CSG\n     * Coordinates here are in world space\n     * @param name The name of the mesh geometry\n     * @param scene The Scene\n     * @param keepSubMeshes Specifies if the submeshes should be kept\n     * @returns A new Mesh\n     */\n    buildMeshGeometry(name, scene, keepSubMeshes) {\n        const matrix = this.matrix.clone();\n        matrix.invert();\n        const mesh = new Mesh(name, scene);\n        const vertices = [];\n        const indices = [];\n        const normals = [];\n        let uvs = null;\n        let vertColors = null;\n        const vertex = Vector3.Zero();\n        const normal = Vector3.Zero();\n        const uv = Vector2.Zero();\n        const vertColor = new Color4(0, 0, 0, 0);\n        const polygons = this._polygons;\n        const polygonIndices = [0, 0, 0];\n        let polygon;\n        const vertice_dict = {};\n        let vertex_idx;\n        let currentIndex = 0;\n        const subMeshDict = {};\n        let subMeshObj;\n        if (keepSubMeshes) {\n            // Sort Polygons, since subMeshes are indices range\n            polygons.sort((a, b) => {\n                if (a.shared.meshId === b.shared.meshId) {\n                    return a.shared.subMeshId - b.shared.subMeshId;\n                }\n                else {\n                    return a.shared.meshId - b.shared.meshId;\n                }\n            });\n        }\n        for (let i = 0, il = polygons.length; i < il; i++) {\n            polygon = polygons[i];\n            // Building SubMeshes\n            if (!subMeshDict[polygon.shared.meshId]) {\n                subMeshDict[polygon.shared.meshId] = {};\n            }\n            if (!subMeshDict[polygon.shared.meshId][polygon.shared.subMeshId]) {\n                subMeshDict[polygon.shared.meshId][polygon.shared.subMeshId] = {\n                    indexStart: +Infinity,\n                    indexEnd: -Infinity,\n                    materialIndex: polygon.shared.materialIndex,\n                };\n            }\n            subMeshObj = subMeshDict[polygon.shared.meshId][polygon.shared.subMeshId];\n            for (let j = 2, jl = polygon.vertices.length; j < jl; j++) {\n                polygonIndices[0] = 0;\n                polygonIndices[1] = j - 1;\n                polygonIndices[2] = j;\n                for (let k = 0; k < 3; k++) {\n                    vertex.copyFrom(polygon.vertices[polygonIndices[k]].pos);\n                    normal.copyFrom(polygon.vertices[polygonIndices[k]].normal);\n                    if (polygon.vertices[polygonIndices[k]].uv) {\n                        if (!uvs) {\n                            uvs = [];\n                        }\n                        uv.copyFrom(polygon.vertices[polygonIndices[k]].uv);\n                    }\n                    if (polygon.vertices[polygonIndices[k]].vertColor) {\n                        if (!vertColors) {\n                            vertColors = [];\n                        }\n                        vertColor.copyFrom(polygon.vertices[polygonIndices[k]].vertColor);\n                    }\n                    const localVertex = Vector3.TransformCoordinates(vertex, matrix);\n                    const localNormal = Vector3.TransformNormal(normal, matrix);\n                    vertex_idx = vertice_dict[localVertex.x + \",\" + localVertex.y + \",\" + localVertex.z];\n                    let areUvsDifferent = false;\n                    if (uvs && !(uvs[vertex_idx * 2] === uv.x || uvs[vertex_idx * 2 + 1] === uv.y)) {\n                        areUvsDifferent = true;\n                    }\n                    let areColorsDifferent = false;\n                    if (vertColors &&\n                        !(vertColors[vertex_idx * 4] === vertColor.r ||\n                            vertColors[vertex_idx * 4 + 1] === vertColor.g ||\n                            vertColors[vertex_idx * 4 + 2] === vertColor.b ||\n                            vertColors[vertex_idx * 4 + 3] === vertColor.a)) {\n                        areColorsDifferent = true;\n                    }\n                    // Check if 2 points can be merged\n                    if (!(typeof vertex_idx !== \"undefined\" &&\n                        normals[vertex_idx * 3] === localNormal.x &&\n                        normals[vertex_idx * 3 + 1] === localNormal.y &&\n                        normals[vertex_idx * 3 + 2] === localNormal.z) ||\n                        areUvsDifferent ||\n                        areColorsDifferent) {\n                        vertices.push(localVertex.x, localVertex.y, localVertex.z);\n                        if (uvs) {\n                            uvs.push(uv.x, uv.y);\n                        }\n                        normals.push(normal.x, normal.y, normal.z);\n                        if (vertColors) {\n                            vertColors.push(vertColor.r, vertColor.g, vertColor.b, vertColor.a);\n                        }\n                        vertex_idx = vertice_dict[localVertex.x + \",\" + localVertex.y + \",\" + localVertex.z] = vertices.length / 3 - 1;\n                    }\n                    indices.push(vertex_idx);\n                    subMeshObj.indexStart = Math.min(currentIndex, subMeshObj.indexStart);\n                    subMeshObj.indexEnd = Math.max(currentIndex, subMeshObj.indexEnd);\n                    currentIndex++;\n                }\n            }\n        }\n        mesh.setVerticesData(VertexBuffer.PositionKind, vertices);\n        mesh.setVerticesData(VertexBuffer.NormalKind, normals);\n        if (uvs) {\n            mesh.setVerticesData(VertexBuffer.UVKind, uvs);\n        }\n        if (vertColors) {\n            mesh.setVerticesData(VertexBuffer.ColorKind, vertColors);\n        }\n        mesh.setIndices(indices, null);\n        if (keepSubMeshes) {\n            // We offset the materialIndex by the previous number of materials in the CSG mixed meshes\n            let materialIndexOffset = 0, materialMaxIndex;\n            mesh.subMeshes = new Array();\n            for (const m in subMeshDict) {\n                materialMaxIndex = -1;\n                for (const sm in subMeshDict[m]) {\n                    subMeshObj = subMeshDict[m][sm];\n                    SubMesh.CreateFromIndices(subMeshObj.materialIndex + materialIndexOffset, subMeshObj.indexStart, subMeshObj.indexEnd - subMeshObj.indexStart + 1, mesh);\n                    materialMaxIndex = Math.max(subMeshObj.materialIndex, materialMaxIndex);\n                }\n                materialIndexOffset += ++materialMaxIndex;\n            }\n        }\n        return mesh;\n    }\n    /**\n     * Build Mesh from CSG taking material and transforms into account\n     * @param name The name of the Mesh\n     * @param material The material of the Mesh\n     * @param scene The Scene\n     * @param keepSubMeshes Specifies if submeshes should be kept\n     * @returns The new Mesh\n     */\n    toMesh(name, material = null, scene, keepSubMeshes) {\n        const mesh = this.buildMeshGeometry(name, scene, keepSubMeshes);\n        mesh.material = material;\n        mesh.position.copyFrom(this.position);\n        mesh.rotation.copyFrom(this.rotation);\n        if (this.rotationQuaternion) {\n            mesh.rotationQuaternion = this.rotationQuaternion.clone();\n        }\n        mesh.scaling.copyFrom(this.scaling);\n        mesh.computeWorldMatrix(true);\n        return mesh;\n    }\n}\n//# sourceMappingURL=csg.js.map","import { Vector3 } from \"../Maths/math.vector.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { SubMesh } from \"../Meshes/subMesh.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { AsyncLoop } from \"../Misc/tools.js\";\nimport { Epsilon } from \"../Maths/math.constants.js\";\n/**\n * Class used to specify simplification options\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/simplifyingMeshes\n */\nexport class SimplificationSettings {\n    /**\n     * Creates a SimplificationSettings\n     * @param quality expected quality\n     * @param distance distance when this optimized version should be used\n     * @param optimizeMesh already optimized mesh\n     */\n    constructor(\n    /** expected quality */\n    quality, \n    /** distance when this optimized version should be used */\n    distance, \n    /** already optimized mesh  */\n    optimizeMesh) {\n        this.quality = quality;\n        this.distance = distance;\n        this.optimizeMesh = optimizeMesh;\n    }\n}\n/**\n * Queue used to order the simplification tasks\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/simplifyingMeshes\n */\nexport class SimplificationQueue {\n    /**\n     * Creates a new queue\n     */\n    constructor() {\n        this.running = false;\n        this._simplificationArray = [];\n    }\n    /**\n     * Adds a new simplification task\n     * @param task defines a task to add\n     */\n    addTask(task) {\n        this._simplificationArray.push(task);\n    }\n    /**\n     * Execute next task\n     */\n    executeNext() {\n        const task = this._simplificationArray.pop();\n        if (task) {\n            this.running = true;\n            this.runSimplification(task);\n        }\n        else {\n            this.running = false;\n        }\n    }\n    /**\n     * Execute a simplification task\n     * @param task defines the task to run\n     */\n    runSimplification(task) {\n        if (task.parallelProcessing) {\n            //parallel simplifier\n            task.settings.forEach((setting) => {\n                const simplifier = this._getSimplifier(task);\n                simplifier.simplify(setting, (newMesh) => {\n                    if (setting.distance !== undefined) {\n                        task.mesh.addLODLevel(setting.distance, newMesh);\n                    }\n                    newMesh.isVisible = true;\n                    //check if it is the last\n                    if (setting.quality === task.settings[task.settings.length - 1].quality && task.successCallback) {\n                        //all done, run the success callback.\n                        task.successCallback();\n                    }\n                    this.executeNext();\n                });\n            });\n        }\n        else {\n            //single simplifier.\n            const simplifier = this._getSimplifier(task);\n            const runDecimation = (setting, callback) => {\n                simplifier.simplify(setting, (newMesh) => {\n                    if (setting.distance !== undefined) {\n                        task.mesh.addLODLevel(setting.distance, newMesh);\n                    }\n                    newMesh.isVisible = true;\n                    //run the next quality level\n                    callback();\n                });\n            };\n            AsyncLoop.Run(task.settings.length, (loop) => {\n                runDecimation(task.settings[loop.index], () => {\n                    loop.executeNext();\n                });\n            }, () => {\n                //execution ended, run the success callback.\n                if (task.successCallback) {\n                    task.successCallback();\n                }\n                this.executeNext();\n            });\n        }\n    }\n    _getSimplifier(task) {\n        switch (task.simplificationType) {\n            case SimplificationType.QUADRATIC:\n            default:\n                return new QuadraticErrorSimplification(task.mesh);\n        }\n    }\n}\n/**\n * The implemented types of simplification\n * At the moment only Quadratic Error Decimation is implemented\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/simplifyingMeshes\n */\nexport var SimplificationType;\n(function (SimplificationType) {\n    /** Quadratic error decimation */\n    SimplificationType[SimplificationType[\"QUADRATIC\"] = 0] = \"QUADRATIC\";\n})(SimplificationType || (SimplificationType = {}));\nclass DecimationTriangle {\n    constructor(_vertices) {\n        this._vertices = _vertices;\n        this.error = new Array(4);\n        this.deleted = false;\n        this.isDirty = false;\n        this.deletePending = false;\n        this.borderFactor = 0;\n    }\n}\nclass DecimationVertex {\n    constructor(position, id) {\n        this.position = position;\n        this.id = id;\n        this.isBorder = true;\n        this.q = new QuadraticMatrix();\n        this.triangleCount = 0;\n        this.triangleStart = 0;\n        this.originalOffsets = [];\n    }\n    updatePosition(newPosition) {\n        this.position.copyFrom(newPosition);\n    }\n}\nclass QuadraticMatrix {\n    constructor(data) {\n        this.data = new Array(10);\n        for (let i = 0; i < 10; ++i) {\n            if (data && data[i]) {\n                this.data[i] = data[i];\n            }\n            else {\n                this.data[i] = 0;\n            }\n        }\n    }\n    det(a11, a12, a13, a21, a22, a23, a31, a32, a33) {\n        const det = this.data[a11] * this.data[a22] * this.data[a33] +\n            this.data[a13] * this.data[a21] * this.data[a32] +\n            this.data[a12] * this.data[a23] * this.data[a31] -\n            this.data[a13] * this.data[a22] * this.data[a31] -\n            this.data[a11] * this.data[a23] * this.data[a32] -\n            this.data[a12] * this.data[a21] * this.data[a33];\n        return det;\n    }\n    addInPlace(matrix) {\n        for (let i = 0; i < 10; ++i) {\n            this.data[i] += matrix.data[i];\n        }\n    }\n    addArrayInPlace(data) {\n        for (let i = 0; i < 10; ++i) {\n            this.data[i] += data[i];\n        }\n    }\n    add(matrix) {\n        const m = new QuadraticMatrix();\n        for (let i = 0; i < 10; ++i) {\n            m.data[i] = this.data[i] + matrix.data[i];\n        }\n        return m;\n    }\n    static FromData(a, b, c, d) {\n        return new QuadraticMatrix(QuadraticMatrix.DataFromNumbers(a, b, c, d));\n    }\n    //returning an array to avoid garbage collection\n    static DataFromNumbers(a, b, c, d) {\n        return [a * a, a * b, a * c, a * d, b * b, b * c, b * d, c * c, c * d, d * d];\n    }\n}\nclass Reference {\n    constructor(vertexId, triangleId) {\n        this.vertexId = vertexId;\n        this.triangleId = triangleId;\n    }\n}\n/**\n * An implementation of the Quadratic Error simplification algorithm.\n * Original paper : http://www1.cs.columbia.edu/~cs4162/html05s/garland97.pdf\n * Ported mostly from QSlim and http://voxels.blogspot.de/2014/05/quadric-mesh-simplification-with-source.html to babylon JS\n * @author RaananW\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/simplifyingMeshes\n */\nexport class QuadraticErrorSimplification {\n    /**\n     * Creates a new QuadraticErrorSimplification\n     * @param _mesh defines the target mesh\n     */\n    constructor(_mesh) {\n        this._mesh = _mesh;\n        /** Gets or sets the number pf sync iterations */\n        this.syncIterations = 5000;\n        this.aggressiveness = 7;\n        this.decimationIterations = 100;\n        this.boundingBoxEpsilon = Epsilon;\n    }\n    /**\n     * Simplification of a given mesh according to the given settings.\n     * Since this requires computation, it is assumed that the function runs async.\n     * @param settings The settings of the simplification, including quality and distance\n     * @param successCallback A callback that will be called after the mesh was simplified.\n     */\n    simplify(settings, successCallback) {\n        this._initDecimatedMesh();\n        //iterating through the submeshes array, one after the other.\n        AsyncLoop.Run(this._mesh.subMeshes.length, (loop) => {\n            this._initWithMesh(loop.index, () => {\n                this._runDecimation(settings, loop.index, () => {\n                    loop.executeNext();\n                });\n            }, settings.optimizeMesh);\n        }, () => {\n            setTimeout(() => {\n                successCallback(this._reconstructedMesh);\n            }, 0);\n        });\n    }\n    _runDecimation(settings, submeshIndex, successCallback) {\n        const targetCount = ~~(this._triangles.length * settings.quality);\n        let deletedTriangles = 0;\n        const triangleCount = this._triangles.length;\n        const iterationFunction = (iteration, callback) => {\n            setTimeout(() => {\n                if (iteration % 5 === 0) {\n                    this._updateMesh(iteration === 0);\n                }\n                for (let i = 0; i < this._triangles.length; ++i) {\n                    this._triangles[i].isDirty = false;\n                }\n                const threshold = 0.000000001 * Math.pow(iteration + 3, this.aggressiveness);\n                const trianglesIterator = (i) => {\n                    const tIdx = ~~((this._triangles.length / 2 + i) % this._triangles.length);\n                    const t = this._triangles[tIdx];\n                    if (!t) {\n                        return;\n                    }\n                    if (t.error[3] > threshold || t.deleted || t.isDirty) {\n                        return;\n                    }\n                    for (let j = 0; j < 3; ++j) {\n                        if (t.error[j] < threshold) {\n                            const deleted0 = [];\n                            const deleted1 = [];\n                            const v0 = t._vertices[j];\n                            const v1 = t._vertices[(j + 1) % 3];\n                            if (v0.isBorder || v1.isBorder) {\n                                continue;\n                            }\n                            const p = Vector3.Zero();\n                            // var n = Vector3.Zero();\n                            // var uv = Vector2.Zero();\n                            // var color = new Color4(0, 0, 0, 1);\n                            this._calculateError(v0, v1, p);\n                            const delTr = new Array();\n                            if (this._isFlipped(v0, v1, p, deleted0, delTr)) {\n                                continue;\n                            }\n                            if (this._isFlipped(v1, v0, p, deleted1, delTr)) {\n                                continue;\n                            }\n                            if (deleted0.indexOf(true) < 0 || deleted1.indexOf(true) < 0) {\n                                continue;\n                            }\n                            const uniqueArray = new Array();\n                            delTr.forEach((deletedT) => {\n                                if (uniqueArray.indexOf(deletedT) === -1) {\n                                    deletedT.deletePending = true;\n                                    uniqueArray.push(deletedT);\n                                }\n                            });\n                            if (uniqueArray.length % 2 !== 0) {\n                                continue;\n                            }\n                            v0.q = v1.q.add(v0.q);\n                            v0.updatePosition(p);\n                            const tStart = this._references.length;\n                            deletedTriangles = this._updateTriangles(v0, v0, deleted0, deletedTriangles);\n                            deletedTriangles = this._updateTriangles(v0, v1, deleted1, deletedTriangles);\n                            const tCount = this._references.length - tStart;\n                            if (tCount <= v0.triangleCount) {\n                                if (tCount) {\n                                    for (let c = 0; c < tCount; c++) {\n                                        this._references[v0.triangleStart + c] = this._references[tStart + c];\n                                    }\n                                }\n                            }\n                            else {\n                                v0.triangleStart = tStart;\n                            }\n                            v0.triangleCount = tCount;\n                            break;\n                        }\n                    }\n                };\n                AsyncLoop.SyncAsyncForLoop(this._triangles.length, this.syncIterations, trianglesIterator, callback, () => {\n                    return triangleCount - deletedTriangles <= targetCount;\n                });\n            }, 0);\n        };\n        AsyncLoop.Run(this.decimationIterations, (loop) => {\n            if (triangleCount - deletedTriangles <= targetCount) {\n                loop.breakLoop();\n            }\n            else {\n                iterationFunction(loop.index, () => {\n                    loop.executeNext();\n                });\n            }\n        }, () => {\n            setTimeout(() => {\n                //reconstruct this part of the mesh\n                this._reconstructMesh(submeshIndex);\n                successCallback();\n            }, 0);\n        });\n    }\n    _initWithMesh(submeshIndex, callback, optimizeMesh) {\n        this._vertices = [];\n        this._triangles = [];\n        const positionData = this._mesh.getVerticesData(VertexBuffer.PositionKind);\n        const indices = this._mesh.getIndices();\n        const submesh = this._mesh.subMeshes[submeshIndex];\n        const findInVertices = (positionToSearch) => {\n            if (optimizeMesh) {\n                for (let ii = 0; ii < this._vertices.length; ++ii) {\n                    if (this._vertices[ii].position.equalsWithEpsilon(positionToSearch, 0.0001)) {\n                        return this._vertices[ii];\n                    }\n                }\n            }\n            return null;\n        };\n        const vertexReferences = [];\n        const vertexInit = (i) => {\n            if (!positionData) {\n                return;\n            }\n            const offset = i + submesh.verticesStart;\n            const position = Vector3.FromArray(positionData, offset * 3);\n            const vertex = findInVertices(position) || new DecimationVertex(position, this._vertices.length);\n            vertex.originalOffsets.push(offset);\n            if (vertex.id === this._vertices.length) {\n                this._vertices.push(vertex);\n            }\n            vertexReferences.push(vertex.id);\n        };\n        //var totalVertices = mesh.getTotalVertices();\n        const totalVertices = submesh.verticesCount;\n        AsyncLoop.SyncAsyncForLoop(totalVertices, (this.syncIterations / 4) >> 0, vertexInit, () => {\n            const indicesInit = (i) => {\n                if (!indices) {\n                    return;\n                }\n                const offset = submesh.indexStart / 3 + i;\n                const pos = offset * 3;\n                const i0 = indices[pos + 0];\n                const i1 = indices[pos + 1];\n                const i2 = indices[pos + 2];\n                const v0 = this._vertices[vertexReferences[i0 - submesh.verticesStart]];\n                const v1 = this._vertices[vertexReferences[i1 - submesh.verticesStart]];\n                const v2 = this._vertices[vertexReferences[i2 - submesh.verticesStart]];\n                const triangle = new DecimationTriangle([v0, v1, v2]);\n                triangle.originalOffset = pos;\n                this._triangles.push(triangle);\n            };\n            AsyncLoop.SyncAsyncForLoop(submesh.indexCount / 3, this.syncIterations, indicesInit, () => {\n                this._init(callback);\n            });\n        });\n    }\n    _init(callback) {\n        const triangleInit1 = (i) => {\n            const t = this._triangles[i];\n            t.normal = Vector3.Cross(t._vertices[1].position.subtract(t._vertices[0].position), t._vertices[2].position.subtract(t._vertices[0].position)).normalize();\n            for (let j = 0; j < 3; j++) {\n                t._vertices[j].q.addArrayInPlace(QuadraticMatrix.DataFromNumbers(t.normal.x, t.normal.y, t.normal.z, -Vector3.Dot(t.normal, t._vertices[0].position)));\n            }\n        };\n        AsyncLoop.SyncAsyncForLoop(this._triangles.length, this.syncIterations, triangleInit1, () => {\n            const triangleInit2 = (i) => {\n                const t = this._triangles[i];\n                for (let j = 0; j < 3; ++j) {\n                    t.error[j] = this._calculateError(t._vertices[j], t._vertices[(j + 1) % 3]);\n                }\n                t.error[3] = Math.min(t.error[0], t.error[1], t.error[2]);\n            };\n            AsyncLoop.SyncAsyncForLoop(this._triangles.length, this.syncIterations, triangleInit2, () => {\n                callback();\n            });\n        });\n    }\n    _reconstructMesh(submeshIndex) {\n        const newTriangles = [];\n        let i;\n        for (i = 0; i < this._vertices.length; ++i) {\n            this._vertices[i].triangleCount = 0;\n        }\n        let t;\n        let j;\n        for (i = 0; i < this._triangles.length; ++i) {\n            if (!this._triangles[i].deleted) {\n                t = this._triangles[i];\n                for (j = 0; j < 3; ++j) {\n                    t._vertices[j].triangleCount = 1;\n                }\n                newTriangles.push(t);\n            }\n        }\n        const newPositionData = (this._reconstructedMesh.getVerticesData(VertexBuffer.PositionKind) || []);\n        const newNormalData = (this._reconstructedMesh.getVerticesData(VertexBuffer.NormalKind) || []);\n        const newUVsData = (this._reconstructedMesh.getVerticesData(VertexBuffer.UVKind) || []);\n        const newColorsData = (this._reconstructedMesh.getVerticesData(VertexBuffer.ColorKind) || []);\n        const normalData = this._mesh.getVerticesData(VertexBuffer.NormalKind);\n        const uvs = this._mesh.getVerticesData(VertexBuffer.UVKind);\n        const colorsData = this._mesh.getVerticesData(VertexBuffer.ColorKind);\n        let vertexCount = 0;\n        for (i = 0; i < this._vertices.length; ++i) {\n            const vertex = this._vertices[i];\n            vertex.id = vertexCount;\n            if (vertex.triangleCount) {\n                vertex.originalOffsets.forEach((originalOffset) => {\n                    newPositionData.push(vertex.position.x);\n                    newPositionData.push(vertex.position.y);\n                    newPositionData.push(vertex.position.z);\n                    if (normalData && normalData.length) {\n                        newNormalData.push(normalData[originalOffset * 3]);\n                        newNormalData.push(normalData[originalOffset * 3 + 1]);\n                        newNormalData.push(normalData[originalOffset * 3 + 2]);\n                    }\n                    if (uvs && uvs.length) {\n                        newUVsData.push(uvs[originalOffset * 2]);\n                        newUVsData.push(uvs[originalOffset * 2 + 1]);\n                    }\n                    if (colorsData && colorsData.length) {\n                        newColorsData.push(colorsData[originalOffset * 4]);\n                        newColorsData.push(colorsData[originalOffset * 4 + 1]);\n                        newColorsData.push(colorsData[originalOffset * 4 + 2]);\n                        newColorsData.push(colorsData[originalOffset * 4 + 3]);\n                    }\n                    ++vertexCount;\n                });\n            }\n        }\n        const startingIndex = this._reconstructedMesh.getTotalIndices();\n        const startingVertex = this._reconstructedMesh.getTotalVertices();\n        const submeshesArray = this._reconstructedMesh.subMeshes;\n        this._reconstructedMesh.subMeshes = [];\n        const newIndicesArray = this._reconstructedMesh.getIndices(); //[];\n        const originalIndices = this._mesh.getIndices();\n        for (i = 0; i < newTriangles.length; ++i) {\n            t = newTriangles[i]; //now get the new referencing point for each vertex\n            [0, 1, 2].forEach((idx) => {\n                const id = originalIndices[t.originalOffset + idx];\n                let offset = t._vertices[idx].originalOffsets.indexOf(id);\n                if (offset < 0) {\n                    offset = 0;\n                }\n                newIndicesArray.push(t._vertices[idx].id + offset + startingVertex);\n            });\n        }\n        //overwriting the old vertex buffers and indices.\n        this._reconstructedMesh.setIndices(newIndicesArray);\n        this._reconstructedMesh.setVerticesData(VertexBuffer.PositionKind, newPositionData);\n        if (newNormalData.length > 0) {\n            this._reconstructedMesh.setVerticesData(VertexBuffer.NormalKind, newNormalData);\n        }\n        if (newUVsData.length > 0) {\n            this._reconstructedMesh.setVerticesData(VertexBuffer.UVKind, newUVsData);\n        }\n        if (newColorsData.length > 0) {\n            this._reconstructedMesh.setVerticesData(VertexBuffer.ColorKind, newColorsData);\n        }\n        //create submesh\n        const originalSubmesh = this._mesh.subMeshes[submeshIndex];\n        if (submeshIndex > 0) {\n            this._reconstructedMesh.subMeshes = [];\n            submeshesArray.forEach((submesh) => {\n                SubMesh.AddToMesh(submesh.materialIndex, submesh.verticesStart, submesh.verticesCount, \n                /* 0, newPositionData.length/3, */ submesh.indexStart, submesh.indexCount, submesh.getMesh());\n            });\n            SubMesh.AddToMesh(originalSubmesh.materialIndex, startingVertex, vertexCount, \n            /* 0, newPositionData.length / 3, */ startingIndex, newTriangles.length * 3, this._reconstructedMesh);\n        }\n    }\n    _initDecimatedMesh() {\n        this._reconstructedMesh = new Mesh(this._mesh.name + \"Decimated\", this._mesh.getScene());\n        this._reconstructedMesh.material = this._mesh.material;\n        this._reconstructedMesh.parent = this._mesh.parent;\n        this._reconstructedMesh.isVisible = false;\n        this._reconstructedMesh.renderingGroupId = this._mesh.renderingGroupId;\n    }\n    _isFlipped(vertex1, vertex2, point, deletedArray, delTr) {\n        for (let i = 0; i < vertex1.triangleCount; ++i) {\n            const t = this._triangles[this._references[vertex1.triangleStart + i].triangleId];\n            if (t.deleted) {\n                continue;\n            }\n            const s = this._references[vertex1.triangleStart + i].vertexId;\n            const v1 = t._vertices[(s + 1) % 3];\n            const v2 = t._vertices[(s + 2) % 3];\n            if (v1 === vertex2 || v2 === vertex2) {\n                deletedArray[i] = true;\n                delTr.push(t);\n                continue;\n            }\n            let d1 = v1.position.subtract(point);\n            d1 = d1.normalize();\n            let d2 = v2.position.subtract(point);\n            d2 = d2.normalize();\n            if (Math.abs(Vector3.Dot(d1, d2)) > 0.999) {\n                return true;\n            }\n            const normal = Vector3.Cross(d1, d2).normalize();\n            deletedArray[i] = false;\n            if (Vector3.Dot(normal, t.normal) < 0.2) {\n                return true;\n            }\n        }\n        return false;\n    }\n    _updateTriangles(origVertex, vertex, deletedArray, deletedTriangles) {\n        let newDeleted = deletedTriangles;\n        for (let i = 0; i < vertex.triangleCount; ++i) {\n            const ref = this._references[vertex.triangleStart + i];\n            const t = this._triangles[ref.triangleId];\n            if (t.deleted) {\n                continue;\n            }\n            if (deletedArray[i] && t.deletePending) {\n                t.deleted = true;\n                newDeleted++;\n                continue;\n            }\n            t._vertices[ref.vertexId] = origVertex;\n            t.isDirty = true;\n            t.error[0] = this._calculateError(t._vertices[0], t._vertices[1]) + t.borderFactor / 2;\n            t.error[1] = this._calculateError(t._vertices[1], t._vertices[2]) + t.borderFactor / 2;\n            t.error[2] = this._calculateError(t._vertices[2], t._vertices[0]) + t.borderFactor / 2;\n            t.error[3] = Math.min(t.error[0], t.error[1], t.error[2]);\n            this._references.push(ref);\n        }\n        return newDeleted;\n    }\n    _identifyBorder() {\n        for (let i = 0; i < this._vertices.length; ++i) {\n            const vCount = [];\n            const vId = [];\n            const v = this._vertices[i];\n            let j;\n            for (j = 0; j < v.triangleCount; ++j) {\n                const triangle = this._triangles[this._references[v.triangleStart + j].triangleId];\n                for (let ii = 0; ii < 3; ii++) {\n                    let ofs = 0;\n                    const vv = triangle._vertices[ii];\n                    while (ofs < vCount.length) {\n                        if (vId[ofs] === vv.id) {\n                            break;\n                        }\n                        ++ofs;\n                    }\n                    if (ofs === vCount.length) {\n                        vCount.push(1);\n                        vId.push(vv.id);\n                    }\n                    else {\n                        vCount[ofs]++;\n                    }\n                }\n            }\n            for (j = 0; j < vCount.length; ++j) {\n                if (vCount[j] === 1) {\n                    this._vertices[vId[j]].isBorder = true;\n                }\n                else {\n                    this._vertices[vId[j]].isBorder = false;\n                }\n            }\n        }\n    }\n    _updateMesh(identifyBorders = false) {\n        let i;\n        if (!identifyBorders) {\n            const newTrianglesVector = [];\n            for (i = 0; i < this._triangles.length; ++i) {\n                if (!this._triangles[i].deleted) {\n                    newTrianglesVector.push(this._triangles[i]);\n                }\n            }\n            this._triangles = newTrianglesVector;\n        }\n        for (i = 0; i < this._vertices.length; ++i) {\n            this._vertices[i].triangleCount = 0;\n            this._vertices[i].triangleStart = 0;\n        }\n        let t;\n        let j;\n        let v;\n        for (i = 0; i < this._triangles.length; ++i) {\n            t = this._triangles[i];\n            for (j = 0; j < 3; ++j) {\n                v = t._vertices[j];\n                v.triangleCount++;\n            }\n        }\n        let tStart = 0;\n        for (i = 0; i < this._vertices.length; ++i) {\n            this._vertices[i].triangleStart = tStart;\n            tStart += this._vertices[i].triangleCount;\n            this._vertices[i].triangleCount = 0;\n        }\n        const newReferences = new Array(this._triangles.length * 3);\n        for (i = 0; i < this._triangles.length; ++i) {\n            t = this._triangles[i];\n            for (j = 0; j < 3; ++j) {\n                v = t._vertices[j];\n                newReferences[v.triangleStart + v.triangleCount] = new Reference(j, i);\n                v.triangleCount++;\n            }\n        }\n        this._references = newReferences;\n        if (identifyBorders) {\n            this._identifyBorder();\n        }\n    }\n    _vertexError(q, point) {\n        const x = point.x;\n        const y = point.y;\n        const z = point.z;\n        return (q.data[0] * x * x +\n            2 * q.data[1] * x * y +\n            2 * q.data[2] * x * z +\n            2 * q.data[3] * x +\n            q.data[4] * y * y +\n            2 * q.data[5] * y * z +\n            2 * q.data[6] * y +\n            q.data[7] * z * z +\n            2 * q.data[8] * z +\n            q.data[9]);\n    }\n    _calculateError(vertex1, vertex2, pointResult) {\n        const q = vertex1.q.add(vertex2.q);\n        const border = vertex1.isBorder && vertex2.isBorder;\n        let error = 0;\n        const qDet = q.det(0, 1, 2, 1, 4, 5, 2, 5, 7);\n        if (qDet !== 0 && !border) {\n            if (!pointResult) {\n                pointResult = Vector3.Zero();\n            }\n            pointResult.x = (-1 / qDet) * q.det(1, 2, 3, 4, 5, 6, 5, 7, 8);\n            pointResult.y = (1 / qDet) * q.det(0, 2, 3, 1, 5, 6, 2, 7, 8);\n            pointResult.z = (-1 / qDet) * q.det(0, 1, 3, 1, 4, 6, 2, 5, 8);\n            error = this._vertexError(q, pointResult);\n        }\n        else {\n            const p3 = vertex1.position.add(vertex2.position).divide(new Vector3(2, 2, 2));\n            //var norm3 = (vertex1.normal.add(vertex2.normal)).divide(new Vector3(2, 2, 2)).normalize();\n            const error1 = this._vertexError(q, vertex1.position);\n            const error2 = this._vertexError(q, vertex2.position);\n            const error3 = this._vertexError(q, p3);\n            error = Math.min(error1, error2, error3);\n            if (error === error1) {\n                if (pointResult) {\n                    pointResult.copyFrom(vertex1.position);\n                }\n            }\n            else if (error === error2) {\n                if (pointResult) {\n                    pointResult.copyFrom(vertex2.position);\n                }\n            }\n            else {\n                if (pointResult) {\n                    pointResult.copyFrom(p3);\n                }\n            }\n        }\n        return error;\n    }\n}\n//# sourceMappingURL=meshSimplification.js.map","import { Scene } from \"../scene.js\";\nimport { Mesh } from \"./mesh.js\";\nimport { SimplificationQueue, SimplificationType } from \"./meshSimplification.js\";\nimport { SceneComponentConstants } from \"../sceneComponent.js\";\nObject.defineProperty(Scene.prototype, \"simplificationQueue\", {\n    get: function () {\n        if (!this._simplificationQueue) {\n            this._simplificationQueue = new SimplificationQueue();\n            let component = this._getComponent(SceneComponentConstants.NAME_SIMPLIFICATIONQUEUE);\n            if (!component) {\n                component = new SimplicationQueueSceneComponent(this);\n                this._addComponent(component);\n            }\n        }\n        return this._simplificationQueue;\n    },\n    set: function (value) {\n        this._simplificationQueue = value;\n    },\n    enumerable: true,\n    configurable: true,\n});\nMesh.prototype.simplify = function (settings, parallelProcessing = true, simplificationType = SimplificationType.QUADRATIC, successCallback) {\n    this.getScene().simplificationQueue.addTask({\n        settings: settings,\n        parallelProcessing: parallelProcessing,\n        mesh: this,\n        simplificationType: simplificationType,\n        successCallback: successCallback,\n    });\n    return this;\n};\n/**\n * Defines the simplification queue scene component responsible to help scheduling the various simplification task\n * created in a scene\n */\nexport class SimplicationQueueSceneComponent {\n    /**\n     * Creates a new instance of the component for the given scene\n     * @param scene Defines the scene to register the component in\n     */\n    constructor(scene) {\n        /**\n         * The component name helpfull to identify the component in the list of scene components.\n         */\n        this.name = SceneComponentConstants.NAME_SIMPLIFICATIONQUEUE;\n        this.scene = scene;\n    }\n    /**\n     * Registers the component in a given scene\n     */\n    register() {\n        this.scene._beforeCameraUpdateStage.registerStep(SceneComponentConstants.STEP_BEFORECAMERAUPDATE_SIMPLIFICATIONQUEUE, this, this._beforeCameraUpdate);\n    }\n    /**\n     * Rebuilds the elements related to this component in case of\n     * context lost for instance.\n     */\n    rebuild() {\n        // Nothing to do for this component\n    }\n    /**\n     * Disposes the component and the associated resources\n     */\n    dispose() {\n        // Nothing to do for this component\n    }\n    _beforeCameraUpdate() {\n        if (this.scene._simplificationQueue && !this.scene._simplificationQueue.running) {\n            this.scene._simplificationQueue.executeNext();\n        }\n    }\n}\n//# sourceMappingURL=meshSimplificationSceneComponent.js.map","import { Matrix, TmpVectors } from \"../Maths/math.vector.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { AbstractMesh } from \"../Meshes/abstractMesh.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { DeepCopier } from \"../Misc/deepCopier.js\";\nimport { TransformNode } from \"./transformNode.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nMesh._instancedMeshFactory = (name, mesh) => {\n    const instance = new InstancedMesh(name, mesh);\n    if (mesh.instancedBuffers) {\n        instance.instancedBuffers = {};\n        for (const key in mesh.instancedBuffers) {\n            instance.instancedBuffers[key] = mesh.instancedBuffers[key];\n        }\n    }\n    return instance;\n};\n/**\n * Creates an instance based on a source mesh.\n */\nexport class InstancedMesh extends AbstractMesh {\n    constructor(name, source) {\n        super(name, source.getScene());\n        /** @internal */\n        this._indexInSourceMeshInstanceArray = -1;\n        /** @internal */\n        this._distanceToCamera = 0;\n        source.addInstance(this);\n        this._sourceMesh = source;\n        this._unIndexed = source._unIndexed;\n        this.position.copyFrom(source.position);\n        this.rotation.copyFrom(source.rotation);\n        this.scaling.copyFrom(source.scaling);\n        if (source.rotationQuaternion) {\n            this.rotationQuaternion = source.rotationQuaternion.clone();\n        }\n        this.animations = source.animations.slice();\n        for (const range of source.getAnimationRanges()) {\n            if (range != null) {\n                this.createAnimationRange(range.name, range.from, range.to);\n            }\n        }\n        this.infiniteDistance = source.infiniteDistance;\n        this.setPivotMatrix(source.getPivotMatrix());\n        this.refreshBoundingInfo(true, true);\n        this._syncSubMeshes();\n    }\n    /**\n     * Returns the string \"InstancedMesh\".\n     */\n    getClassName() {\n        return \"InstancedMesh\";\n    }\n    /** Gets the list of lights affecting that mesh */\n    get lightSources() {\n        return this._sourceMesh._lightSources;\n    }\n    _resyncLightSources() {\n        // Do nothing as all the work will be done by source mesh\n    }\n    _resyncLightSource() {\n        // Do nothing as all the work will be done by source mesh\n    }\n    _removeLightSource() {\n        // Do nothing as all the work will be done by source mesh\n    }\n    // Methods\n    /**\n     * If the source mesh receives shadows\n     */\n    get receiveShadows() {\n        return this._sourceMesh.receiveShadows;\n    }\n    /**\n     * The material of the source mesh\n     */\n    get material() {\n        return this._sourceMesh.material;\n    }\n    /**\n     * Visibility of the source mesh\n     */\n    get visibility() {\n        return this._sourceMesh.visibility;\n    }\n    /**\n     * Skeleton of the source mesh\n     */\n    get skeleton() {\n        return this._sourceMesh.skeleton;\n    }\n    /**\n     * Rendering ground id of the source mesh\n     */\n    get renderingGroupId() {\n        return this._sourceMesh.renderingGroupId;\n    }\n    set renderingGroupId(value) {\n        if (!this._sourceMesh || value === this._sourceMesh.renderingGroupId) {\n            return;\n        }\n        //no-op with warning\n        Logger.Warn(\"Note - setting renderingGroupId of an instanced mesh has no effect on the scene\");\n    }\n    /**\n     * Returns the total number of vertices (integer).\n     */\n    getTotalVertices() {\n        return this._sourceMesh ? this._sourceMesh.getTotalVertices() : 0;\n    }\n    /**\n     * Returns a positive integer : the total number of indices in this mesh geometry.\n     * @returns the number of indices or zero if the mesh has no geometry.\n     */\n    getTotalIndices() {\n        return this._sourceMesh.getTotalIndices();\n    }\n    /**\n     * The source mesh of the instance\n     */\n    get sourceMesh() {\n        return this._sourceMesh;\n    }\n    /**\n     * Creates a new InstancedMesh object from the mesh model.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances\n     * @param name defines the name of the new instance\n     * @returns a new InstancedMesh\n     */\n    createInstance(name) {\n        return this._sourceMesh.createInstance(name);\n    }\n    /**\n     * Is this node ready to be used/rendered\n     * @param completeCheck defines if a complete check (including materials and lights) has to be done (false by default)\n     * @returns {boolean} is it ready\n     */\n    isReady(completeCheck = false) {\n        return this._sourceMesh.isReady(completeCheck, true);\n    }\n    /**\n     * Returns an array of integers or a typed array (Int32Array, Uint32Array, Uint16Array) populated with the mesh indices.\n     * @param kind kind of verticies to retrieve (eg. positions, normals, uvs, etc.)\n     * @param copyWhenShared If true (default false) and and if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one.\n     * @returns a float array or a Float32Array of the requested kind of data : positions, normals, uvs, etc.\n     */\n    getVerticesData(kind, copyWhenShared) {\n        return this._sourceMesh.getVerticesData(kind, copyWhenShared);\n    }\n    /**\n     * Sets the vertex data of the mesh geometry for the requested `kind`.\n     * If the mesh has no geometry, a new Geometry object is set to the mesh and then passed this vertex data.\n     * The `data` are either a numeric array either a Float32Array.\n     * The parameter `updatable` is passed as is to the underlying Geometry object constructor (if initially none) or updater.\n     * The parameter `stride` is an optional positive integer, it is usually automatically deducted from the `kind` (3 for positions or normals, 2 for UV, etc).\n     * Note that a new underlying VertexBuffer object is created each call.\n     * If the `kind` is the `PositionKind`, the mesh BoundingInfo is renewed, so the bounding box and sphere, and the mesh World Matrix is recomputed.\n     *\n     * Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     *\n     * Returns the Mesh.\n     * @param kind\n     * @param data\n     * @param updatable\n     * @param stride\n     */\n    setVerticesData(kind, data, updatable, stride) {\n        if (this.sourceMesh) {\n            this.sourceMesh.setVerticesData(kind, data, updatable, stride);\n        }\n        return this.sourceMesh;\n    }\n    /**\n     * Updates the existing vertex data of the mesh geometry for the requested `kind`.\n     * If the mesh has no geometry, it is simply returned as it is.\n     * The `data` are either a numeric array either a Float32Array.\n     * No new underlying VertexBuffer object is created.\n     * If the `kind` is the `PositionKind` and if `updateExtends` is true, the mesh BoundingInfo is renewed, so the bounding box and sphere, and the mesh World Matrix is recomputed.\n     * If the parameter `makeItUnique` is true, a new global geometry is created from this positions and is set to the mesh.\n     *\n     * Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     *\n     * Returns the Mesh.\n     * @param kind\n     * @param data\n     * @param updateExtends\n     * @param makeItUnique\n     */\n    updateVerticesData(kind, data, updateExtends, makeItUnique) {\n        if (this.sourceMesh) {\n            this.sourceMesh.updateVerticesData(kind, data, updateExtends, makeItUnique);\n        }\n        return this.sourceMesh;\n    }\n    /**\n     * Sets the mesh indices.\n     * Expects an array populated with integers or a typed array (Int32Array, Uint32Array, Uint16Array).\n     * If the mesh has no geometry, a new Geometry object is created and set to the mesh.\n     * This method creates a new index buffer each call.\n     * Returns the Mesh.\n     * @param indices\n     * @param totalVertices\n     */\n    setIndices(indices, totalVertices = null) {\n        if (this.sourceMesh) {\n            this.sourceMesh.setIndices(indices, totalVertices);\n        }\n        return this.sourceMesh;\n    }\n    /**\n     * Boolean : True if the mesh owns the requested kind of data.\n     * @param kind\n     */\n    isVerticesDataPresent(kind) {\n        return this._sourceMesh.isVerticesDataPresent(kind);\n    }\n    /**\n     * Returns an array of indices (IndicesArray).\n     */\n    getIndices() {\n        return this._sourceMesh.getIndices();\n    }\n    get _positions() {\n        return this._sourceMesh._positions;\n    }\n    /**\n     * This method recomputes and sets a new BoundingInfo to the mesh unless it is locked.\n     * This means the mesh underlying bounding box and sphere are recomputed.\n     * @param applySkeleton defines whether to apply the skeleton before computing the bounding info\n     * @param applyMorph  defines whether to apply the morph target before computing the bounding info\n     * @returns the current mesh\n     */\n    refreshBoundingInfo(applySkeleton = false, applyMorph = false) {\n        if (this.hasBoundingInfo && this.getBoundingInfo().isLocked) {\n            return this;\n        }\n        const bias = this._sourceMesh.geometry ? this._sourceMesh.geometry.boundingBias : null;\n        this._refreshBoundingInfo(this._sourceMesh._getPositionData(applySkeleton, applyMorph), bias);\n        return this;\n    }\n    /** @internal */\n    _preActivate() {\n        if (this._currentLOD) {\n            this._currentLOD._preActivate();\n        }\n        return this;\n    }\n    /**\n     * @internal\n     */\n    _activate(renderId, intermediateRendering) {\n        super._activate(renderId, intermediateRendering);\n        if (!this._sourceMesh.subMeshes) {\n            Logger.Warn(\"Instances should only be created for meshes with geometry.\");\n        }\n        if (this._currentLOD) {\n            const differentSign = this._currentLOD._getWorldMatrixDeterminant() >= 0 !== this._getWorldMatrixDeterminant() >= 0;\n            if (differentSign) {\n                this._internalAbstractMeshDataInfo._actAsRegularMesh = true;\n                return true;\n            }\n            this._internalAbstractMeshDataInfo._actAsRegularMesh = false;\n            this._currentLOD._registerInstanceForRenderId(this, renderId);\n            if (intermediateRendering) {\n                if (!this._currentLOD._internalAbstractMeshDataInfo._isActiveIntermediate) {\n                    this._currentLOD._internalAbstractMeshDataInfo._onlyForInstancesIntermediate = true;\n                    return true;\n                }\n            }\n            else {\n                if (!this._currentLOD._internalAbstractMeshDataInfo._isActive) {\n                    this._currentLOD._internalAbstractMeshDataInfo._onlyForInstances = true;\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /** @internal */\n    _postActivate() {\n        if (this._sourceMesh.edgesShareWithInstances && this._sourceMesh._edgesRenderer && this._sourceMesh._edgesRenderer.isEnabled && this._sourceMesh._renderingGroup) {\n            // we are using the edge renderer of the source mesh\n            this._sourceMesh._renderingGroup._edgesRenderers.pushNoDuplicate(this._sourceMesh._edgesRenderer);\n            this._sourceMesh._edgesRenderer.customInstances.push(this.getWorldMatrix());\n        }\n        else if (this._edgesRenderer && this._edgesRenderer.isEnabled && this._sourceMesh._renderingGroup) {\n            // we are using the edge renderer defined for this instance\n            this._sourceMesh._renderingGroup._edgesRenderers.push(this._edgesRenderer);\n        }\n    }\n    getWorldMatrix() {\n        if (this._currentLOD && this._currentLOD.billboardMode !== TransformNode.BILLBOARDMODE_NONE && this._currentLOD._masterMesh !== this) {\n            if (!this._billboardWorldMatrix) {\n                this._billboardWorldMatrix = new Matrix();\n            }\n            const tempMaster = this._currentLOD._masterMesh;\n            this._currentLOD._masterMesh = this;\n            TmpVectors.Vector3[7].copyFrom(this._currentLOD.position);\n            this._currentLOD.position.set(0, 0, 0);\n            this._billboardWorldMatrix.copyFrom(this._currentLOD.computeWorldMatrix(true));\n            this._currentLOD.position.copyFrom(TmpVectors.Vector3[7]);\n            this._currentLOD._masterMesh = tempMaster;\n            return this._billboardWorldMatrix;\n        }\n        return super.getWorldMatrix();\n    }\n    get isAnInstance() {\n        return true;\n    }\n    /**\n     * Returns the current associated LOD AbstractMesh.\n     * @param camera\n     */\n    getLOD(camera) {\n        if (!camera) {\n            return this;\n        }\n        const sourceMeshLODLevels = this.sourceMesh.getLODLevels();\n        if (!sourceMeshLODLevels || sourceMeshLODLevels.length === 0) {\n            this._currentLOD = this.sourceMesh;\n        }\n        else {\n            const boundingInfo = this.getBoundingInfo();\n            this._currentLOD = this.sourceMesh.getLOD(camera, boundingInfo.boundingSphere);\n        }\n        return this._currentLOD;\n    }\n    /**\n     * @internal\n     */\n    _preActivateForIntermediateRendering(renderId) {\n        return this.sourceMesh._preActivateForIntermediateRendering(renderId);\n    }\n    /** @internal */\n    _syncSubMeshes() {\n        this.releaseSubMeshes();\n        if (this._sourceMesh.subMeshes) {\n            for (let index = 0; index < this._sourceMesh.subMeshes.length; index++) {\n                this._sourceMesh.subMeshes[index].clone(this, this._sourceMesh);\n            }\n        }\n        return this;\n    }\n    /** @internal */\n    _generatePointsArray() {\n        return this._sourceMesh._generatePointsArray();\n    }\n    /** @internal */\n    _updateBoundingInfo() {\n        if (this.hasBoundingInfo) {\n            this.getBoundingInfo().update(this.worldMatrixFromCache);\n        }\n        else {\n            this.buildBoundingInfo(this.absolutePosition, this.absolutePosition, this.worldMatrixFromCache);\n        }\n        this._updateSubMeshesBoundingInfo(this.worldMatrixFromCache);\n        return this;\n    }\n    /**\n     * Creates a new InstancedMesh from the current mesh.\n     *\n     * Returns the clone.\n     * @param name the cloned mesh name\n     * @param newParent the optional Node to parent the clone to.\n     * @param doNotCloneChildren if `true` the model children aren't cloned.\n     * @param newSourceMesh if set this mesh will be used as the source mesh instead of ths instance's one\n     * @returns the clone\n     */\n    clone(name, newParent = null, doNotCloneChildren, newSourceMesh) {\n        const result = (newSourceMesh || this._sourceMesh).createInstance(name);\n        // Deep copy\n        DeepCopier.DeepCopy(this, result, [\n            \"name\",\n            \"subMeshes\",\n            \"uniqueId\",\n            \"parent\",\n            \"lightSources\",\n            \"receiveShadows\",\n            \"material\",\n            \"visibility\",\n            \"skeleton\",\n            \"sourceMesh\",\n            \"isAnInstance\",\n            \"facetNb\",\n            \"isFacetDataEnabled\",\n            \"isBlocked\",\n            \"useBones\",\n            \"hasInstances\",\n            \"collider\",\n            \"edgesRenderer\",\n            \"forward\",\n            \"up\",\n            \"right\",\n            \"absolutePosition\",\n            \"absoluteScaling\",\n            \"absoluteRotationQuaternion\",\n            \"isWorldMatrixFrozen\",\n            \"nonUniformScaling\",\n            \"behaviors\",\n            \"worldMatrixFromCache\",\n            \"hasThinInstances\",\n            \"hasBoundingInfo\",\n        ], []);\n        // Bounding info\n        this.refreshBoundingInfo();\n        // Parent\n        if (newParent) {\n            result.parent = newParent;\n        }\n        if (!doNotCloneChildren) {\n            // Children\n            for (let index = 0; index < this.getScene().meshes.length; index++) {\n                const mesh = this.getScene().meshes[index];\n                if (mesh.parent === this) {\n                    mesh.clone(mesh.name, result);\n                }\n            }\n        }\n        result.computeWorldMatrix(true);\n        this.onClonedObservable.notifyObservers(result);\n        return result;\n    }\n    /**\n     * Disposes the InstancedMesh.\n     * Returns nothing.\n     * @param doNotRecurse\n     * @param disposeMaterialAndTextures\n     */\n    dispose(doNotRecurse, disposeMaterialAndTextures = false) {\n        // Remove from mesh\n        this._sourceMesh.removeInstance(this);\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\n    }\n    /**\n     * @internal\n     */\n    _serializeAsParent(serializationObject) {\n        super._serializeAsParent(serializationObject);\n        serializationObject.parentId = this._sourceMesh.uniqueId;\n        serializationObject.parentInstanceIndex = this._indexInSourceMeshInstanceArray;\n    }\n    /**\n     * Instantiate (when possible) or clone that node with its hierarchy\n     * @param newParent defines the new parent to use for the instance (or clone)\n     * @param options defines options to configure how copy is done\n     * @param options.doNotInstantiate defines if the model must be instantiated or just cloned\n     * @param options.newSourcedMesh newSourcedMesh the new source mesh for the instance (or clone)\n     * @param onNewNodeCreated defines an option callback to call when a clone or an instance is created\n     * @returns an instance (or a clone) of the current node with its hierarchy\n     */\n    instantiateHierarchy(newParent = null, options, onNewNodeCreated) {\n        const clone = this.clone(\"Clone of \" + (this.name || this.id), newParent || this.parent, true, options && options.newSourcedMesh);\n        if (clone) {\n            if (onNewNodeCreated) {\n                onNewNodeCreated(this, clone);\n            }\n        }\n        for (const child of this.getChildTransformNodes(true)) {\n            child.instantiateHierarchy(clone, options, onNewNodeCreated);\n        }\n        return clone;\n    }\n}\nMesh.prototype.registerInstancedBuffer = function (kind, stride) {\n    var _a, _b;\n    // Remove existing one\n    (_b = (_a = this._userInstancedBuffersStorage) === null || _a === void 0 ? void 0 : _a.vertexBuffers[kind]) === null || _b === void 0 ? void 0 : _b.dispose();\n    // Creates the instancedBuffer field if not present\n    if (!this.instancedBuffers) {\n        this.instancedBuffers = {};\n        for (const instance of this.instances) {\n            instance.instancedBuffers = {};\n        }\n        if (!this._userInstancedBuffersStorage) {\n            this._userInstancedBuffersStorage = {\n                data: {},\n                vertexBuffers: {},\n                strides: {},\n                sizes: {},\n                vertexArrayObjects: this.getEngine().getCaps().vertexArrayObject ? {} : undefined,\n            };\n        }\n    }\n    // Creates an empty property for this kind\n    this.instancedBuffers[kind] = null;\n    this._userInstancedBuffersStorage.strides[kind] = stride;\n    this._userInstancedBuffersStorage.sizes[kind] = stride * 32; // Initial size\n    this._userInstancedBuffersStorage.data[kind] = new Float32Array(this._userInstancedBuffersStorage.sizes[kind]);\n    this._userInstancedBuffersStorage.vertexBuffers[kind] = new VertexBuffer(this.getEngine(), this._userInstancedBuffersStorage.data[kind], kind, true, false, stride, true);\n    for (const instance of this.instances) {\n        instance.instancedBuffers[kind] = null;\n    }\n    this._invalidateInstanceVertexArrayObject();\n    this._markSubMeshesAsAttributesDirty();\n};\nMesh.prototype._processInstancedBuffers = function (visibleInstances, renderSelf) {\n    const instanceCount = visibleInstances ? visibleInstances.length : 0;\n    for (const kind in this.instancedBuffers) {\n        let size = this._userInstancedBuffersStorage.sizes[kind];\n        const stride = this._userInstancedBuffersStorage.strides[kind];\n        // Resize if required\n        const expectedSize = (instanceCount + 1) * stride;\n        while (size < expectedSize) {\n            size *= 2;\n        }\n        if (this._userInstancedBuffersStorage.data[kind].length != size) {\n            this._userInstancedBuffersStorage.data[kind] = new Float32Array(size);\n            this._userInstancedBuffersStorage.sizes[kind] = size;\n            if (this._userInstancedBuffersStorage.vertexBuffers[kind]) {\n                this._userInstancedBuffersStorage.vertexBuffers[kind].dispose();\n                this._userInstancedBuffersStorage.vertexBuffers[kind] = null;\n            }\n        }\n        const data = this._userInstancedBuffersStorage.data[kind];\n        // Update data buffer\n        let offset = 0;\n        if (renderSelf) {\n            const value = this.instancedBuffers[kind];\n            if (value.toArray) {\n                value.toArray(data, offset);\n            }\n            else if (value.copyToArray) {\n                value.copyToArray(data, offset);\n            }\n            else {\n                data[offset] = value;\n            }\n            offset += stride;\n        }\n        for (let instanceIndex = 0; instanceIndex < instanceCount; instanceIndex++) {\n            const instance = visibleInstances[instanceIndex];\n            const value = instance.instancedBuffers[kind];\n            if (value.toArray) {\n                value.toArray(data, offset);\n            }\n            else if (value.copyToArray) {\n                value.copyToArray(data, offset);\n            }\n            else {\n                data[offset] = value;\n            }\n            offset += stride;\n        }\n        // Update vertex buffer\n        if (!this._userInstancedBuffersStorage.vertexBuffers[kind]) {\n            this._userInstancedBuffersStorage.vertexBuffers[kind] = new VertexBuffer(this.getEngine(), this._userInstancedBuffersStorage.data[kind], kind, true, false, stride, true);\n            this._invalidateInstanceVertexArrayObject();\n        }\n        else {\n            this._userInstancedBuffersStorage.vertexBuffers[kind].updateDirectly(data, 0);\n        }\n    }\n};\nMesh.prototype._invalidateInstanceVertexArrayObject = function () {\n    if (!this._userInstancedBuffersStorage || this._userInstancedBuffersStorage.vertexArrayObjects === undefined) {\n        return;\n    }\n    for (const kind in this._userInstancedBuffersStorage.vertexArrayObjects) {\n        this.getEngine().releaseVertexArrayObject(this._userInstancedBuffersStorage.vertexArrayObjects[kind]);\n    }\n    this._userInstancedBuffersStorage.vertexArrayObjects = {};\n};\nMesh.prototype._disposeInstanceSpecificData = function () {\n    if (this._instanceDataStorage.instancesBuffer) {\n        this._instanceDataStorage.instancesBuffer.dispose();\n        this._instanceDataStorage.instancesBuffer = null;\n    }\n    while (this.instances.length) {\n        this.instances[0].dispose();\n    }\n    for (const kind in this.instancedBuffers) {\n        if (this._userInstancedBuffersStorage.vertexBuffers[kind]) {\n            this._userInstancedBuffersStorage.vertexBuffers[kind].dispose();\n        }\n    }\n    this._invalidateInstanceVertexArrayObject();\n    this.instancedBuffers = {};\n};\n//# sourceMappingURL=instancedMesh.js.map","import { Color3, Color4 } from \"../Maths/math.color.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { InstancedMesh } from \"../Meshes/instancedMesh.js\";\nimport { Material } from \"../Materials/material.js\";\nimport { ShaderMaterial } from \"../Materials/shaderMaterial.js\";\nimport \"../Shaders/color.fragment.js\";\nimport \"../Shaders/color.vertex.js\";\nMesh._LinesMeshParser = (parsedMesh, scene) => {\n    return LinesMesh.Parse(parsedMesh, scene);\n};\n/**\n * Line mesh\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param\n */\nexport class LinesMesh extends Mesh {\n    _isShaderMaterial(shader) {\n        return shader.getClassName() === \"ShaderMaterial\";\n    }\n    /**\n     * Creates a new LinesMesh\n     * @param name defines the name\n     * @param scene defines the hosting scene\n     * @param parent defines the parent mesh if any\n     * @param source defines the optional source LinesMesh used to clone data from\n     * @param doNotCloneChildren When cloning, skip cloning child meshes of source, default False.\n     * When false, achieved by calling a clone(), also passing False.\n     * This will make creation of children, recursive.\n     * @param useVertexColor defines if this LinesMesh supports vertex color\n     * @param useVertexAlpha defines if this LinesMesh supports vertex alpha\n     * @param material material to use to draw the line. If not provided, will create a new one\n     */\n    constructor(name, scene = null, parent = null, source = null, doNotCloneChildren, \n    /**\n     * If vertex color should be applied to the mesh\n     */\n    useVertexColor, \n    /**\n     * If vertex alpha should be applied to the mesh\n     */\n    useVertexAlpha, material) {\n        super(name, scene, parent, source, doNotCloneChildren);\n        this.useVertexColor = useVertexColor;\n        this.useVertexAlpha = useVertexAlpha;\n        /**\n         * Color of the line (Default: White)\n         */\n        this.color = new Color3(1, 1, 1);\n        /**\n         * Alpha of the line (Default: 1)\n         */\n        this.alpha = 1;\n        if (source) {\n            this.color = source.color.clone();\n            this.alpha = source.alpha;\n            this.useVertexColor = source.useVertexColor;\n            this.useVertexAlpha = source.useVertexAlpha;\n        }\n        this.intersectionThreshold = 0.1;\n        const defines = [];\n        const options = {\n            attributes: [VertexBuffer.PositionKind],\n            uniforms: [\"world\", \"viewProjection\"],\n            needAlphaBlending: true,\n            defines: defines,\n            useClipPlane: null,\n        };\n        if (useVertexAlpha === false) {\n            options.needAlphaBlending = false;\n        }\n        else {\n            options.defines.push(\"#define VERTEXALPHA\");\n        }\n        if (!useVertexColor) {\n            options.uniforms.push(\"color\");\n            this._color4 = new Color4();\n        }\n        else {\n            options.defines.push(\"#define VERTEXCOLOR\");\n            options.attributes.push(VertexBuffer.ColorKind);\n        }\n        if (material) {\n            this.material = material;\n        }\n        else {\n            this.material = new ShaderMaterial(\"colorShader\", this.getScene(), \"color\", options, false);\n            this.material.doNotSerialize = true;\n        }\n    }\n    isReady() {\n        if (!this._lineMaterial.isReady(this, !!this._userInstancedBuffersStorage)) {\n            return false;\n        }\n        return super.isReady();\n    }\n    /**\n     * Returns the string \"LineMesh\"\n     */\n    getClassName() {\n        return \"LinesMesh\";\n    }\n    /**\n     * @internal\n     */\n    get material() {\n        return this._lineMaterial;\n    }\n    /**\n     * @internal\n     */\n    set material(value) {\n        this._lineMaterial = value;\n        this._lineMaterial.fillMode = Material.LineListDrawMode;\n    }\n    /**\n     * @internal\n     */\n    get checkCollisions() {\n        return false;\n    }\n    set checkCollisions(value) {\n        // Just ignore it\n    }\n    /**\n     * @internal\n     */\n    _bind(_subMesh, colorEffect) {\n        if (!this._geometry) {\n            return this;\n        }\n        // VBOs\n        const indexToBind = this.isUnIndexed ? null : this._geometry.getIndexBuffer();\n        if (!this._userInstancedBuffersStorage) {\n            this._geometry._bind(colorEffect, indexToBind);\n        }\n        else {\n            this._geometry._bind(colorEffect, indexToBind, this._userInstancedBuffersStorage.vertexBuffers, this._userInstancedBuffersStorage.vertexArrayObjects);\n        }\n        // Color\n        if (!this.useVertexColor && this._isShaderMaterial(this._lineMaterial)) {\n            const { r, g, b } = this.color;\n            this._color4.set(r, g, b, this.alpha);\n            this._lineMaterial.setColor4(\"color\", this._color4);\n        }\n        return this;\n    }\n    /**\n     * @internal\n     */\n    _draw(subMesh, fillMode, instancesCount) {\n        if (!this._geometry || !this._geometry.getVertexBuffers() || (!this._unIndexed && !this._geometry.getIndexBuffer())) {\n            return this;\n        }\n        const engine = this.getScene().getEngine();\n        // Draw order\n        if (this._unIndexed) {\n            engine.drawArraysType(Material.LineListDrawMode, subMesh.verticesStart, subMesh.verticesCount, instancesCount);\n        }\n        else {\n            engine.drawElementsType(Material.LineListDrawMode, subMesh.indexStart, subMesh.indexCount, instancesCount);\n        }\n        return this;\n    }\n    /**\n     * Disposes of the line mesh\n     * @param doNotRecurse If children should be disposed\n     * @param disposeMaterialAndTextures This parameter is not used by the LineMesh class\n     * @param doNotDisposeMaterial If the material should not be disposed (default: false, meaning the material is disposed)\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    dispose(doNotRecurse, disposeMaterialAndTextures = false, doNotDisposeMaterial) {\n        if (!doNotDisposeMaterial) {\n            this._lineMaterial.dispose(false, false, true);\n        }\n        super.dispose(doNotRecurse);\n    }\n    /**\n     * Returns a new LineMesh object cloned from the current one.\n     * @param name\n     * @param newParent\n     * @param doNotCloneChildren\n     */\n    clone(name, newParent = null, doNotCloneChildren) {\n        return new LinesMesh(name, this.getScene(), newParent, this, doNotCloneChildren);\n    }\n    /**\n     * Creates a new InstancedLinesMesh object from the mesh model.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances\n     * @param name defines the name of the new instance\n     * @returns a new InstancedLinesMesh\n     */\n    createInstance(name) {\n        const instance = new InstancedLinesMesh(name, this);\n        if (this.instancedBuffers) {\n            instance.instancedBuffers = {};\n            for (const key in this.instancedBuffers) {\n                instance.instancedBuffers[key] = this.instancedBuffers[key];\n            }\n        }\n        return instance;\n    }\n    /**\n     * Serializes this ground mesh\n     * @param serializationObject object to write serialization to\n     */\n    serialize(serializationObject) {\n        super.serialize(serializationObject);\n        serializationObject.color = this.color.asArray();\n        serializationObject.alpha = this.alpha;\n    }\n    /**\n     * Parses a serialized ground mesh\n     * @param parsedMesh the serialized mesh\n     * @param scene the scene to create the ground mesh in\n     * @returns the created ground mesh\n     */\n    static Parse(parsedMesh, scene) {\n        const result = new LinesMesh(parsedMesh.name, scene);\n        result.color = Color3.FromArray(parsedMesh.color);\n        result.alpha = parsedMesh.alpha;\n        return result;\n    }\n}\n/**\n * Creates an instance based on a source LinesMesh\n */\nexport class InstancedLinesMesh extends InstancedMesh {\n    constructor(name, source) {\n        super(name, source);\n        this.intersectionThreshold = source.intersectionThreshold;\n    }\n    /**\n     * Returns the string \"InstancedLinesMesh\".\n     */\n    getClassName() {\n        return \"InstancedLinesMesh\";\n    }\n}\n//# sourceMappingURL=linesMesh.js.map","import { Observable } from \"../Misc/observable.js\";\nimport { Tools, AsyncLoop } from \"../Misc/tools.js\";\nimport { DeepCopier } from \"../Misc/deepCopier.js\";\nimport { Tags } from \"../Misc/tags.js\";\nimport { runCoroutineSync, runCoroutineAsync, createYieldingScheduler } from \"../Misc/coroutine.js\";\nimport { Camera } from \"../Cameras/camera.js\";\nimport { ScenePerformancePriority } from \"../scene.js\";\nimport { Quaternion, Matrix, Vector3, Vector2 } from \"../Maths/math.vector.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { Node } from \"../node.js\";\nimport { VertexBuffer, Buffer } from \"../Buffers/buffer.js\";\nimport { VertexData } from \"./mesh.vertexData.js\";\nimport { Geometry } from \"./geometry.js\";\nimport { AbstractMesh } from \"./abstractMesh.js\";\nimport { SubMesh } from \"./subMesh.js\";\nimport { Material } from \"../Materials/material.js\";\nimport { MultiMaterial } from \"../Materials/multiMaterial.js\";\nimport { SceneLoaderFlags } from \"../Loading/sceneLoaderFlags.js\";\n\nimport { SerializationHelper } from \"../Misc/decorators.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { GetClass, RegisterClass } from \"../Misc/typeStore.js\";\nimport { _WarnImport } from \"../Misc/devTools.js\";\nimport { SceneComponentConstants } from \"../sceneComponent.js\";\nimport { MeshLODLevel } from \"./meshLODLevel.js\";\n/**\n * @internal\n **/\nexport class _CreationDataStorage {\n}\n/**\n * @internal\n **/\nclass _InstanceDataStorage {\n    constructor() {\n        this.visibleInstances = {};\n        this.batchCache = new _InstancesBatch();\n        this.batchCacheReplacementModeInFrozenMode = new _InstancesBatch();\n        this.instancesBufferSize = 32 * 16 * 4; // let's start with a maximum of 32 instances\n    }\n}\n/**\n * @internal\n **/\nexport class _InstancesBatch {\n    constructor() {\n        this.mustReturn = false;\n        this.visibleInstances = new Array();\n        this.renderSelf = new Array();\n        this.hardwareInstancedRendering = new Array();\n    }\n}\n/**\n * @internal\n **/\nclass _ThinInstanceDataStorage {\n    constructor() {\n        this.instancesCount = 0;\n        this.matrixBuffer = null;\n        this.previousMatrixBuffer = null;\n        this.matrixBufferSize = 32 * 16; // let's start with a maximum of 32 thin instances\n        this.matrixData = null;\n        this.boundingVectors = [];\n        this.worldMatrices = null;\n    }\n}\n/**\n * @internal\n **/\nclass _InternalMeshDataInfo {\n    constructor() {\n        this._areNormalsFrozen = false; // Will be used by ribbons mainly\n        // Will be used to save a source mesh reference, If any\n        this._source = null;\n        // Will be used to for fast cloned mesh lookup\n        this.meshMap = null;\n        this._preActivateId = -1;\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        this._LODLevels = new Array();\n        /** Alternative definition of LOD level, using screen coverage instead of distance */\n        this._useLODScreenCoverage = false;\n        this._effectiveMaterial = null;\n        this._forcedInstanceCount = 0;\n    }\n}\n/**\n * Class used to represent renderable models\n */\nexport class Mesh extends AbstractMesh {\n    /**\n     * Gets the default side orientation.\n     * @param orientation the orientation to value to attempt to get\n     * @returns the default orientation\n     * @internal\n     */\n    static _GetDefaultSideOrientation(orientation) {\n        return orientation || Mesh.FRONTSIDE; // works as Mesh.FRONTSIDE is 0\n    }\n    /**\n     * Determines if the LOD levels are intended to be calculated using screen coverage (surface area ratio) instead of distance.\n     */\n    get useLODScreenCoverage() {\n        return this._internalMeshDataInfo._useLODScreenCoverage;\n    }\n    set useLODScreenCoverage(value) {\n        this._internalMeshDataInfo._useLODScreenCoverage = value;\n        this._sortLODLevels();\n    }\n    get computeBonesUsingShaders() {\n        return this._internalAbstractMeshDataInfo._computeBonesUsingShaders;\n    }\n    set computeBonesUsingShaders(value) {\n        if (this._internalAbstractMeshDataInfo._computeBonesUsingShaders === value) {\n            return;\n        }\n        if (value && this._internalMeshDataInfo._sourcePositions) {\n            // switch from software to GPU computation: we need to reset the vertex and normal buffers that have been updated by the software process\n            this.setVerticesData(VertexBuffer.PositionKind, this._internalMeshDataInfo._sourcePositions, true);\n            if (this._internalMeshDataInfo._sourceNormals) {\n                this.setVerticesData(VertexBuffer.NormalKind, this._internalMeshDataInfo._sourceNormals, true);\n            }\n            this._internalMeshDataInfo._sourcePositions = null;\n            this._internalMeshDataInfo._sourceNormals = null;\n        }\n        this._internalAbstractMeshDataInfo._computeBonesUsingShaders = value;\n        this._markSubMeshesAsAttributesDirty();\n    }\n    /**\n     * An event triggered before rendering the mesh\n     */\n    get onBeforeRenderObservable() {\n        if (!this._internalMeshDataInfo._onBeforeRenderObservable) {\n            this._internalMeshDataInfo._onBeforeRenderObservable = new Observable();\n        }\n        return this._internalMeshDataInfo._onBeforeRenderObservable;\n    }\n    /**\n     * An event triggered before binding the mesh\n     */\n    get onBeforeBindObservable() {\n        if (!this._internalMeshDataInfo._onBeforeBindObservable) {\n            this._internalMeshDataInfo._onBeforeBindObservable = new Observable();\n        }\n        return this._internalMeshDataInfo._onBeforeBindObservable;\n    }\n    /**\n     * An event triggered after rendering the mesh\n     */\n    get onAfterRenderObservable() {\n        if (!this._internalMeshDataInfo._onAfterRenderObservable) {\n            this._internalMeshDataInfo._onAfterRenderObservable = new Observable();\n        }\n        return this._internalMeshDataInfo._onAfterRenderObservable;\n    }\n    /**\n     * An event triggeredbetween rendering pass when using separateCullingPass = true\n     */\n    get onBetweenPassObservable() {\n        if (!this._internalMeshDataInfo._onBetweenPassObservable) {\n            this._internalMeshDataInfo._onBetweenPassObservable = new Observable();\n        }\n        return this._internalMeshDataInfo._onBetweenPassObservable;\n    }\n    /**\n     * An event triggered before drawing the mesh\n     */\n    get onBeforeDrawObservable() {\n        if (!this._internalMeshDataInfo._onBeforeDrawObservable) {\n            this._internalMeshDataInfo._onBeforeDrawObservable = new Observable();\n        }\n        return this._internalMeshDataInfo._onBeforeDrawObservable;\n    }\n    /**\n     * Sets a callback to call before drawing the mesh. It is recommended to use onBeforeDrawObservable instead\n     */\n    set onBeforeDraw(callback) {\n        if (this._onBeforeDrawObserver) {\n            this.onBeforeDrawObservable.remove(this._onBeforeDrawObserver);\n        }\n        this._onBeforeDrawObserver = this.onBeforeDrawObservable.add(callback);\n    }\n    get hasInstances() {\n        return this.instances.length > 0;\n    }\n    get hasThinInstances() {\n        var _a;\n        return ((_a = this._thinInstanceDataStorage.instancesCount) !== null && _a !== void 0 ? _a : 0) > 0;\n    }\n    /**\n     * Gets or sets the forced number of instances to display.\n     * If 0 (default value), the number of instances is not forced and depends on the draw type\n     * (regular / instance / thin instances mesh)\n     */\n    get forcedInstanceCount() {\n        return this._internalMeshDataInfo._forcedInstanceCount;\n    }\n    set forcedInstanceCount(count) {\n        this._internalMeshDataInfo._forcedInstanceCount = count;\n    }\n    /**\n     * Gets the source mesh (the one used to clone this one from)\n     */\n    get source() {\n        return this._internalMeshDataInfo._source;\n    }\n    /**\n     * Gets the list of clones of this mesh\n     * The scene must have been constructed with useClonedMeshMap=true for this to work!\n     * Note that useClonedMeshMap=true is the default setting\n     */\n    get cloneMeshMap() {\n        return this._internalMeshDataInfo.meshMap;\n    }\n    /**\n     * Gets or sets a boolean indicating that this mesh does not use index buffer\n     */\n    get isUnIndexed() {\n        return this._unIndexed;\n    }\n    set isUnIndexed(value) {\n        if (this._unIndexed !== value) {\n            this._unIndexed = value;\n            this._markSubMeshesAsAttributesDirty();\n        }\n    }\n    /** Gets the array buffer used to store the instanced buffer used for instances' world matrices */\n    get worldMatrixInstancedBuffer() {\n        return this._instanceDataStorage.instancesData;\n    }\n    /** Gets the array buffer used to store the instanced buffer used for instances' previous world matrices */\n    get previousWorldMatrixInstancedBuffer() {\n        return this._instanceDataStorage.instancesPreviousData;\n    }\n    /** Gets or sets a boolean indicating that the update of the instance buffer of the world matrices is manual */\n    get manualUpdateOfWorldMatrixInstancedBuffer() {\n        return this._instanceDataStorage.manualUpdate;\n    }\n    set manualUpdateOfWorldMatrixInstancedBuffer(value) {\n        this._instanceDataStorage.manualUpdate = value;\n    }\n    /** Gets or sets a boolean indicating that the update of the instance buffer of the world matrices is manual */\n    get manualUpdateOfPreviousWorldMatrixInstancedBuffer() {\n        return this._instanceDataStorage.previousManualUpdate;\n    }\n    set manualUpdateOfPreviousWorldMatrixInstancedBuffer(value) {\n        this._instanceDataStorage.previousManualUpdate = value;\n    }\n    /** Gets or sets a boolean indicating that the update of the instance buffer of the world matrices must be performed in all cases (and notably even in frozen mode) */\n    get forceWorldMatrixInstancedBufferUpdate() {\n        return this._instanceDataStorage.forceMatrixUpdates;\n    }\n    set forceWorldMatrixInstancedBufferUpdate(value) {\n        this._instanceDataStorage.forceMatrixUpdates = value;\n    }\n    /**\n     * @constructor\n     * @param name The value used by scene.getMeshByName() to do a lookup.\n     * @param scene The scene to add this mesh to.\n     * @param parent The parent of this mesh, if it has one\n     * @param source An optional Mesh from which geometry is shared, cloned.\n     * @param doNotCloneChildren When cloning, skip cloning child meshes of source, default False.\n     *                  When false, achieved by calling a clone(), also passing False.\n     *                  This will make creation of children, recursive.\n     * @param clonePhysicsImpostor When cloning, include cloning mesh physics impostor, default True.\n     */\n    constructor(name, scene = null, parent = null, source = null, doNotCloneChildren, clonePhysicsImpostor = true) {\n        super(name, scene);\n        // Internal data\n        this._internalMeshDataInfo = new _InternalMeshDataInfo();\n        // Members\n        /**\n         * Gets the delay loading state of the mesh (when delay loading is turned on)\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/importers/incrementalLoading\n         */\n        this.delayLoadState = 0;\n        /**\n         * Gets the list of instances created from this mesh\n         * it is not supposed to be modified manually.\n         * Note also that the order of the InstancedMesh wihin the array is not significant and might change.\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances\n         */\n        this.instances = new Array();\n        // Private\n        /** @internal */\n        this._creationDataStorage = null;\n        /** @internal */\n        this._geometry = null;\n        /** @internal */\n        this._instanceDataStorage = new _InstanceDataStorage();\n        /** @internal */\n        this._thinInstanceDataStorage = new _ThinInstanceDataStorage();\n        /** @internal */\n        this._shouldGenerateFlatShading = false;\n        // Use by builder only to know what orientation were the mesh build in.\n        /** @internal */\n        this._originalBuilderSideOrientation = Mesh.DEFAULTSIDE;\n        /**\n         * Use this property to change the original side orientation defined at construction time\n         */\n        this.overrideMaterialSideOrientation = null;\n        /**\n         * Gets or sets a boolean indicating whether to render ignoring the active camera's max z setting. (false by default)\n         * Note this will reduce performance when set to true.\n         */\n        this.ignoreCameraMaxZ = false;\n        scene = this.getScene();\n        this._onBeforeDraw = (isInstance, world, effectiveMaterial) => {\n            if (isInstance && effectiveMaterial) {\n                if (this._uniformBuffer) {\n                    this.transferToEffect(world);\n                }\n                else {\n                    effectiveMaterial.bindOnlyWorldMatrix(world);\n                }\n            }\n        };\n        if (source) {\n            // Geometry\n            if (source._geometry) {\n                source._geometry.applyToMesh(this);\n            }\n            // Deep copy\n            DeepCopier.DeepCopy(source, this, [\n                \"name\",\n                \"material\",\n                \"skeleton\",\n                \"instances\",\n                \"parent\",\n                \"uniqueId\",\n                \"source\",\n                \"metadata\",\n                \"morphTargetManager\",\n                \"hasInstances\",\n                \"worldMatrixInstancedBuffer\",\n                \"previousWorldMatrixInstancedBuffer\",\n                \"hasLODLevels\",\n                \"geometry\",\n                \"isBlocked\",\n                \"areNormalsFrozen\",\n                \"facetNb\",\n                \"isFacetDataEnabled\",\n                \"lightSources\",\n                \"useBones\",\n                \"isAnInstance\",\n                \"collider\",\n                \"edgesRenderer\",\n                \"forward\",\n                \"up\",\n                \"right\",\n                \"absolutePosition\",\n                \"absoluteScaling\",\n                \"absoluteRotationQuaternion\",\n                \"isWorldMatrixFrozen\",\n                \"nonUniformScaling\",\n                \"behaviors\",\n                \"worldMatrixFromCache\",\n                \"hasThinInstances\",\n                \"cloneMeshMap\",\n                \"hasBoundingInfo\",\n            ], [\"_poseMatrix\"]);\n            // Source mesh\n            this._internalMeshDataInfo._source = source;\n            if (scene.useClonedMeshMap) {\n                if (!source._internalMeshDataInfo.meshMap) {\n                    source._internalMeshDataInfo.meshMap = {};\n                }\n                source._internalMeshDataInfo.meshMap[this.uniqueId] = this;\n            }\n            // Construction Params\n            // Clone parameters allowing mesh to be updated in case of parametric shapes.\n            this._originalBuilderSideOrientation = source._originalBuilderSideOrientation;\n            this._creationDataStorage = source._creationDataStorage;\n            // Animation ranges\n            if (source._ranges) {\n                const ranges = source._ranges;\n                for (const name in ranges) {\n                    if (!Object.prototype.hasOwnProperty.call(ranges, name)) {\n                        continue;\n                    }\n                    if (!ranges[name]) {\n                        continue;\n                    }\n                    this.createAnimationRange(name, ranges[name].from, ranges[name].to);\n                }\n            }\n            // Metadata\n            if (source.metadata && source.metadata.clone) {\n                this.metadata = source.metadata.clone();\n            }\n            else {\n                this.metadata = source.metadata;\n            }\n            this._internalMetadata = source._internalMetadata;\n            // Tags\n            if (Tags && Tags.HasTags(source)) {\n                Tags.AddTagsTo(this, Tags.GetTags(source, true));\n            }\n            // Enabled. We shouldn't need to check the source's ancestors, as this mesh\n            // will have the same ones.\n            this.setEnabled(source.isEnabled(false));\n            // Parent\n            this.parent = source.parent;\n            // Pivot\n            this.setPivotMatrix(source.getPivotMatrix());\n            this.id = name + \".\" + source.id;\n            // Material\n            this.material = source.material;\n            if (!doNotCloneChildren) {\n                // Children\n                const directDescendants = source.getDescendants(true);\n                for (let index = 0; index < directDescendants.length; index++) {\n                    const child = directDescendants[index];\n                    if (child.clone) {\n                        child.clone(name + \".\" + child.name, this);\n                    }\n                }\n            }\n            // Morphs\n            if (source.morphTargetManager) {\n                this.morphTargetManager = source.morphTargetManager;\n            }\n            // Physics clone\n            if (scene.getPhysicsEngine) {\n                const physicsEngine = scene.getPhysicsEngine();\n                if (clonePhysicsImpostor && physicsEngine && physicsEngine.getPluginVersion() === 1) {\n                    const impostor = physicsEngine.getImpostorForPhysicsObject(source);\n                    if (impostor) {\n                        this.physicsImpostor = impostor.clone(this);\n                    }\n                }\n            }\n            // Particles\n            for (let index = 0; index < scene.particleSystems.length; index++) {\n                const system = scene.particleSystems[index];\n                if (system.emitter === source) {\n                    system.clone(system.name, this);\n                }\n            }\n            // Skeleton\n            this.skeleton = source.skeleton;\n            this.refreshBoundingInfo(true, true);\n            this.computeWorldMatrix(true);\n        }\n        // Parent\n        if (parent !== null) {\n            this.parent = parent;\n        }\n        this._instanceDataStorage.hardwareInstancedRendering = this.getEngine().getCaps().instancedArrays;\n        this._internalMeshDataInfo._onMeshReadyObserverAdded = (observer) => {\n            // only notify once! then unregister the observer\n            observer.unregisterOnNextCall = true;\n            if (this.isReady(true)) {\n                this.onMeshReadyObservable.notifyObservers(this);\n            }\n            else {\n                if (!this._internalMeshDataInfo._checkReadinessObserver) {\n                    this._internalMeshDataInfo._checkReadinessObserver = this._scene.onBeforeRenderObservable.add(() => {\n                        // check for complete readiness\n                        if (this.isReady(true)) {\n                            this._scene.onBeforeRenderObservable.remove(this._internalMeshDataInfo._checkReadinessObserver);\n                            this._internalMeshDataInfo._checkReadinessObserver = null;\n                            this.onMeshReadyObservable.notifyObservers(this);\n                        }\n                    });\n                }\n            }\n        };\n        this.onMeshReadyObservable = new Observable(this._internalMeshDataInfo._onMeshReadyObserverAdded);\n        if (source) {\n            source.onClonedObservable.notifyObservers(this);\n        }\n    }\n    instantiateHierarchy(newParent = null, options, onNewNodeCreated) {\n        const instance = this.getTotalVertices() === 0 || (options && options.doNotInstantiate && (options.doNotInstantiate === true || options.doNotInstantiate(this)))\n            ? this.clone(\"Clone of \" + (this.name || this.id), newParent || this.parent, true)\n            : this.createInstance(\"instance of \" + (this.name || this.id));\n        instance.parent = newParent || this.parent;\n        instance.position = this.position.clone();\n        instance.scaling = this.scaling.clone();\n        if (this.rotationQuaternion) {\n            instance.rotationQuaternion = this.rotationQuaternion.clone();\n        }\n        else {\n            instance.rotation = this.rotation.clone();\n        }\n        if (onNewNodeCreated) {\n            onNewNodeCreated(this, instance);\n        }\n        for (const child of this.getChildTransformNodes(true)) {\n            // instancedMesh should have a different sourced mesh\n            if (child.getClassName() === \"InstancedMesh\" && instance.getClassName() === \"Mesh\" && child.sourceMesh === this) {\n                child.instantiateHierarchy(instance, {\n                    doNotInstantiate: (options && options.doNotInstantiate) || false,\n                    newSourcedMesh: instance\n                }, onNewNodeCreated);\n            }\n            else {\n                child.instantiateHierarchy(instance, options, onNewNodeCreated);\n            }\n        }\n        return instance;\n    }\n    /**\n     * Gets the class name\n     * @returns the string \"Mesh\".\n     */\n    getClassName() {\n        return \"Mesh\";\n    }\n    /** @internal */\n    get _isMesh() {\n        return true;\n    }\n    /**\n     * Returns a description of this mesh\n     * @param fullDetails define if full details about this mesh must be used\n     * @returns a descriptive string representing this mesh\n     */\n    toString(fullDetails) {\n        let ret = super.toString(fullDetails);\n        ret += \", n vertices: \" + this.getTotalVertices();\n        ret += \", parent: \" + (this._waitingParentId ? this._waitingParentId : this.parent ? this.parent.name : \"NONE\");\n        if (this.animations) {\n            for (let i = 0; i < this.animations.length; i++) {\n                ret += \", animation[0]: \" + this.animations[i].toString(fullDetails);\n            }\n        }\n        if (fullDetails) {\n            if (this._geometry) {\n                const ib = this.getIndices();\n                const vb = this.getVerticesData(VertexBuffer.PositionKind);\n                if (vb && ib) {\n                    ret += \", flat shading: \" + (vb.length / 3 === ib.length ? \"YES\" : \"NO\");\n                }\n            }\n            else {\n                ret += \", flat shading: UNKNOWN\";\n            }\n        }\n        return ret;\n    }\n    /** @internal */\n    _unBindEffect() {\n        super._unBindEffect();\n        for (const instance of this.instances) {\n            instance._unBindEffect();\n        }\n    }\n    /**\n     * Gets a boolean indicating if this mesh has LOD\n     */\n    get hasLODLevels() {\n        return this._internalMeshDataInfo._LODLevels.length > 0;\n    }\n    /**\n     * Gets the list of MeshLODLevel associated with the current mesh\n     * @returns an array of MeshLODLevel\n     */\n    getLODLevels() {\n        return this._internalMeshDataInfo._LODLevels;\n    }\n    _sortLODLevels() {\n        const sortingOrderFactor = this._internalMeshDataInfo._useLODScreenCoverage ? -1 : 1;\n        this._internalMeshDataInfo._LODLevels.sort((a, b) => {\n            if (a.distanceOrScreenCoverage < b.distanceOrScreenCoverage) {\n                return sortingOrderFactor;\n            }\n            if (a.distanceOrScreenCoverage > b.distanceOrScreenCoverage) {\n                return -sortingOrderFactor;\n            }\n            return 0;\n        });\n    }\n    /**\n     * Add a mesh as LOD level triggered at the given distance.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\n     * @param distanceOrScreenCoverage Either distance from the center of the object to show this level or the screen coverage if `useScreenCoverage` is set to `true`.\n     * If screen coverage, value is a fraction of the screen's total surface, between 0 and 1.\n     * Example Playground for distance https://playground.babylonjs.com/#QE7KM#197\n     * Example Playground for screen coverage https://playground.babylonjs.com/#QE7KM#196\n     * @param mesh The mesh to be added as LOD level (can be null)\n     * @returns This mesh (for chaining)\n     */\n    addLODLevel(distanceOrScreenCoverage, mesh) {\n        if (mesh && mesh._masterMesh) {\n            Logger.Warn(\"You cannot use a mesh as LOD level twice\");\n            return this;\n        }\n        const level = new MeshLODLevel(distanceOrScreenCoverage, mesh);\n        this._internalMeshDataInfo._LODLevels.push(level);\n        if (mesh) {\n            mesh._masterMesh = this;\n        }\n        this._sortLODLevels();\n        return this;\n    }\n    /**\n     * Returns the LOD level mesh at the passed distance or null if not found.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\n     * @param distance The distance from the center of the object to show this level\n     * @returns a Mesh or `null`\n     */\n    getLODLevelAtDistance(distance) {\n        const internalDataInfo = this._internalMeshDataInfo;\n        for (let index = 0; index < internalDataInfo._LODLevels.length; index++) {\n            const level = internalDataInfo._LODLevels[index];\n            if (level.distanceOrScreenCoverage === distance) {\n                return level.mesh;\n            }\n        }\n        return null;\n    }\n    /**\n     * Remove a mesh from the LOD array\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\n     * @param mesh defines the mesh to be removed\n     * @returns This mesh (for chaining)\n     */\n    removeLODLevel(mesh) {\n        const internalDataInfo = this._internalMeshDataInfo;\n        for (let index = 0; index < internalDataInfo._LODLevels.length; index++) {\n            if (internalDataInfo._LODLevels[index].mesh === mesh) {\n                internalDataInfo._LODLevels.splice(index, 1);\n                if (mesh) {\n                    mesh._masterMesh = null;\n                }\n            }\n        }\n        this._sortLODLevels();\n        return this;\n    }\n    /**\n     * Returns the registered LOD mesh distant from the parameter `camera` position if any, else returns the current mesh.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\n     * @param camera defines the camera to use to compute distance\n     * @param boundingSphere defines a custom bounding sphere to use instead of the one from this mesh\n     * @returns This mesh (for chaining)\n     */\n    getLOD(camera, boundingSphere) {\n        const internalDataInfo = this._internalMeshDataInfo;\n        if (!internalDataInfo._LODLevels || internalDataInfo._LODLevels.length === 0) {\n            return this;\n        }\n        const bSphere = boundingSphere || this.getBoundingInfo().boundingSphere;\n        const distanceToCamera = camera.mode === Camera.ORTHOGRAPHIC_CAMERA ? camera.minZ : bSphere.centerWorld.subtract(camera.globalPosition).length();\n        let compareValue = distanceToCamera;\n        let compareSign = 1;\n        if (internalDataInfo._useLODScreenCoverage) {\n            const screenArea = camera.screenArea;\n            let meshArea = (bSphere.radiusWorld * camera.minZ) / distanceToCamera;\n            meshArea = meshArea * meshArea * Math.PI;\n            compareValue = meshArea / screenArea;\n            compareSign = -1;\n        }\n        if (compareSign * internalDataInfo._LODLevels[internalDataInfo._LODLevels.length - 1].distanceOrScreenCoverage > compareSign * compareValue) {\n            if (this.onLODLevelSelection) {\n                this.onLODLevelSelection(compareValue, this, this);\n            }\n            return this;\n        }\n        for (let index = 0; index < internalDataInfo._LODLevels.length; index++) {\n            const level = internalDataInfo._LODLevels[index];\n            if (compareSign * level.distanceOrScreenCoverage < compareSign * compareValue) {\n                if (level.mesh) {\n                    if (level.mesh.delayLoadState === 4) {\n                        level.mesh._checkDelayState();\n                        return this;\n                    }\n                    if (level.mesh.delayLoadState === 2) {\n                        return this;\n                    }\n                    level.mesh._preActivate();\n                    level.mesh._updateSubMeshesBoundingInfo(this.worldMatrixFromCache);\n                }\n                if (this.onLODLevelSelection) {\n                    this.onLODLevelSelection(compareValue, this, level.mesh);\n                }\n                return level.mesh;\n            }\n        }\n        if (this.onLODLevelSelection) {\n            this.onLODLevelSelection(compareValue, this, this);\n        }\n        return this;\n    }\n    /**\n     * Gets the mesh internal Geometry object\n     */\n    get geometry() {\n        return this._geometry;\n    }\n    /**\n     * Returns the total number of vertices within the mesh geometry or zero if the mesh has no geometry.\n     * @returns the total number of vertices\n     */\n    getTotalVertices() {\n        if (this._geometry === null || this._geometry === undefined) {\n            return 0;\n        }\n        return this._geometry.getTotalVertices();\n    }\n    /**\n     * Returns the content of an associated vertex buffer\n     * @param kind defines which buffer to read from (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @param copyWhenShared defines a boolean indicating that if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one\n     * @param forceCopy defines a boolean forcing the copy of the buffer no matter what the value of copyWhenShared is\n     * @returns a FloatArray or null if the mesh has no geometry or no vertex buffer for this kind.\n     */\n    getVerticesData(kind, copyWhenShared, forceCopy) {\n        var _a, _b;\n        if (!this._geometry) {\n            return null;\n        }\n        let data = (_b = (_a = this._userInstancedBuffersStorage) === null || _a === void 0 ? void 0 : _a.vertexBuffers[kind]) === null || _b === void 0 ? void 0 : _b.getFloatData(this._geometry.getTotalVertices(), forceCopy || (copyWhenShared && this._geometry.meshes.length !== 1));\n        if (!data) {\n            data = this._geometry.getVerticesData(kind, copyWhenShared, forceCopy);\n        }\n        return data;\n    }\n    /**\n     * Returns the mesh VertexBuffer object from the requested `kind`\n     * @param kind defines which buffer to read from (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.NormalKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @returns a FloatArray or null if the mesh has no vertex buffer for this kind.\n     */\n    getVertexBuffer(kind) {\n        var _a, _b;\n        if (!this._geometry) {\n            return null;\n        }\n        return (_b = (_a = this._userInstancedBuffersStorage) === null || _a === void 0 ? void 0 : _a.vertexBuffers[kind]) !== null && _b !== void 0 ? _b : this._geometry.getVertexBuffer(kind);\n    }\n    /**\n     * Tests if a specific vertex buffer is associated with this mesh\n     * @param kind defines which buffer to check (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.NormalKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @returns a boolean\n     */\n    isVerticesDataPresent(kind) {\n        var _a;\n        if (!this._geometry) {\n            if (this._delayInfo) {\n                return this._delayInfo.indexOf(kind) !== -1;\n            }\n            return false;\n        }\n        return ((_a = this._userInstancedBuffersStorage) === null || _a === void 0 ? void 0 : _a.vertexBuffers[kind]) !== undefined || this._geometry.isVerticesDataPresent(kind);\n    }\n    /**\n     * Returns a boolean defining if the vertex data for the requested `kind` is updatable.\n     * @param kind defines which buffer to check (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @returns a boolean\n     */\n    isVertexBufferUpdatable(kind) {\n        var _a, _b;\n        if (!this._geometry) {\n            if (this._delayInfo) {\n                return this._delayInfo.indexOf(kind) !== -1;\n            }\n            return false;\n        }\n        return ((_b = (_a = this._userInstancedBuffersStorage) === null || _a === void 0 ? void 0 : _a.vertexBuffers[kind]) === null || _b === void 0 ? void 0 : _b.isUpdatable()) || this._geometry.isVertexBufferUpdatable(kind);\n    }\n    /**\n     * Returns a string which contains the list of existing `kinds` of Vertex Data associated with this mesh.\n     * @returns an array of strings\n     */\n    getVerticesDataKinds() {\n        if (!this._geometry) {\n            const result = new Array();\n            if (this._delayInfo) {\n                this._delayInfo.forEach(function (kind) {\n                    result.push(kind);\n                });\n            }\n            return result;\n        }\n        const kinds = this._geometry.getVerticesDataKinds();\n        if (this._userInstancedBuffersStorage) {\n            for (const kind in this._userInstancedBuffersStorage.vertexBuffers) {\n                kinds.push(kind);\n            }\n        }\n        return kinds;\n    }\n    /**\n     * Returns a positive integer : the total number of indices in this mesh geometry.\n     * @returns the numner of indices or zero if the mesh has no geometry.\n     */\n    getTotalIndices() {\n        if (!this._geometry) {\n            return 0;\n        }\n        return this._geometry.getTotalIndices();\n    }\n    /**\n     * Returns an array of integers or a typed array (Int32Array, Uint32Array, Uint16Array) populated with the mesh indices.\n     * @param copyWhenShared If true (default false) and and if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one.\n     * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\n     * @returns the indices array or an empty array if the mesh has no geometry\n     */\n    getIndices(copyWhenShared, forceCopy) {\n        if (!this._geometry) {\n            return [];\n        }\n        return this._geometry.getIndices(copyWhenShared, forceCopy);\n    }\n    get isBlocked() {\n        return this._masterMesh !== null && this._masterMesh !== undefined;\n    }\n    /**\n     * Determine if the current mesh is ready to be rendered\n     * @param completeCheck defines if a complete check (including materials and lights) has to be done (false by default)\n     * @param forceInstanceSupport will check if the mesh will be ready when used with instances (false by default)\n     * @returns true if all associated assets are ready (material, textures, shaders)\n     */\n    isReady(completeCheck = false, forceInstanceSupport = false) {\n        var _a, _b, _c, _d, _e, _f;\n        if (this.delayLoadState === 2) {\n            return false;\n        }\n        if (!super.isReady(completeCheck)) {\n            return false;\n        }\n        if (!this.subMeshes || this.subMeshes.length === 0) {\n            return true;\n        }\n        if (!completeCheck) {\n            return true;\n        }\n        const engine = this.getEngine();\n        const scene = this.getScene();\n        const hardwareInstancedRendering = forceInstanceSupport || (engine.getCaps().instancedArrays && (this.instances.length > 0 || this.hasThinInstances));\n        this.computeWorldMatrix();\n        const mat = this.material || scene.defaultMaterial;\n        if (mat) {\n            if (mat._storeEffectOnSubMeshes) {\n                for (const subMesh of this.subMeshes) {\n                    const effectiveMaterial = subMesh.getMaterial();\n                    if (effectiveMaterial) {\n                        if (effectiveMaterial._storeEffectOnSubMeshes) {\n                            if (!effectiveMaterial.isReadyForSubMesh(this, subMesh, hardwareInstancedRendering)) {\n                                return false;\n                            }\n                        }\n                        else {\n                            if (!effectiveMaterial.isReady(this, hardwareInstancedRendering)) {\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                if (!mat.isReady(this, hardwareInstancedRendering)) {\n                    return false;\n                }\n            }\n        }\n        // Shadows\n        const currentRenderPassId = engine.currentRenderPassId;\n        for (const light of this.lightSources) {\n            const generators = light.getShadowGenerators();\n            if (!generators) {\n                continue;\n            }\n            const iterator = generators.values();\n            for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\n                const generator = key.value;\n                if (generator && (!((_a = generator.getShadowMap()) === null || _a === void 0 ? void 0 : _a.renderList) || (((_b = generator.getShadowMap()) === null || _b === void 0 ? void 0 : _b.renderList) && ((_d = (_c = generator.getShadowMap()) === null || _c === void 0 ? void 0 : _c.renderList) === null || _d === void 0 ? void 0 : _d.indexOf(this)) !== -1))) {\n                    if (generator.getShadowMap()) {\n                        engine.currentRenderPassId = generator.getShadowMap().renderPassId;\n                    }\n                    for (const subMesh of this.subMeshes) {\n                        if (!generator.isReady(subMesh, hardwareInstancedRendering, (_f = (_e = subMesh.getMaterial()) === null || _e === void 0 ? void 0 : _e.needAlphaBlendingForMesh(this)) !== null && _f !== void 0 ? _f : false)) {\n                            engine.currentRenderPassId = currentRenderPassId;\n                            return false;\n                        }\n                    }\n                    engine.currentRenderPassId = currentRenderPassId;\n                }\n            }\n        }\n        // LOD\n        for (const lod of this._internalMeshDataInfo._LODLevels) {\n            if (lod.mesh && !lod.mesh.isReady(hardwareInstancedRendering)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Gets a boolean indicating if the normals aren't to be recomputed on next mesh `positions` array update. This property is pertinent only for updatable parametric shapes.\n     */\n    get areNormalsFrozen() {\n        return this._internalMeshDataInfo._areNormalsFrozen;\n    }\n    /**\n     * This function affects parametric shapes on vertex position update only : ribbons, tubes, etc. It has no effect at all on other shapes. It prevents the mesh normals from being recomputed on next `positions` array update.\n     * @returns the current mesh\n     */\n    freezeNormals() {\n        this._internalMeshDataInfo._areNormalsFrozen = true;\n        return this;\n    }\n    /**\n     * This function affects parametric shapes on vertex position update only : ribbons, tubes, etc. It has no effect at all on other shapes. It reactivates the mesh normals computation if it was previously frozen\n     * @returns the current mesh\n     */\n    unfreezeNormals() {\n        this._internalMeshDataInfo._areNormalsFrozen = false;\n        return this;\n    }\n    /**\n     * Sets a value overriding the instance count. Only applicable when custom instanced InterleavedVertexBuffer are used rather than InstancedMeshs\n     */\n    set overridenInstanceCount(count) {\n        this._instanceDataStorage.overridenInstanceCount = count;\n    }\n    // Methods\n    /** @internal */\n    _preActivate() {\n        const internalDataInfo = this._internalMeshDataInfo;\n        const sceneRenderId = this.getScene().getRenderId();\n        if (internalDataInfo._preActivateId === sceneRenderId) {\n            return this;\n        }\n        internalDataInfo._preActivateId = sceneRenderId;\n        this._instanceDataStorage.visibleInstances = null;\n        return this;\n    }\n    /**\n     * @internal\n     */\n    _preActivateForIntermediateRendering(renderId) {\n        if (this._instanceDataStorage.visibleInstances) {\n            this._instanceDataStorage.visibleInstances.intermediateDefaultRenderId = renderId;\n        }\n        return this;\n    }\n    /**\n     * @internal\n     */\n    _registerInstanceForRenderId(instance, renderId) {\n        if (!this._instanceDataStorage.visibleInstances) {\n            this._instanceDataStorage.visibleInstances = {\n                defaultRenderId: renderId,\n                selfDefaultRenderId: this._renderId\n            };\n        }\n        if (!this._instanceDataStorage.visibleInstances[renderId]) {\n            if (this._instanceDataStorage.previousRenderId !== undefined && this._instanceDataStorage.isFrozen) {\n                this._instanceDataStorage.visibleInstances[this._instanceDataStorage.previousRenderId] = null;\n            }\n            this._instanceDataStorage.previousRenderId = renderId;\n            this._instanceDataStorage.visibleInstances[renderId] = new Array();\n        }\n        this._instanceDataStorage.visibleInstances[renderId].push(instance);\n        return this;\n    }\n    _afterComputeWorldMatrix() {\n        super._afterComputeWorldMatrix();\n        if (!this.hasThinInstances) {\n            return;\n        }\n        if (!this.doNotSyncBoundingInfo) {\n            this.thinInstanceRefreshBoundingInfo(false);\n        }\n    }\n    /** @internal */\n    _postActivate() {\n        if (this.edgesShareWithInstances && this.edgesRenderer && this.edgesRenderer.isEnabled && this._renderingGroup) {\n            this._renderingGroup._edgesRenderers.pushNoDuplicate(this.edgesRenderer);\n            this.edgesRenderer.customInstances.push(this.getWorldMatrix());\n        }\n    }\n    /**\n     * This method recomputes and sets a new BoundingInfo to the mesh unless it is locked.\n     * This means the mesh underlying bounding box and sphere are recomputed.\n     * @param applySkeleton defines whether to apply the skeleton before computing the bounding info\n     * @param applyMorph  defines whether to apply the morph target before computing the bounding info\n     * @returns the current mesh\n     */\n    refreshBoundingInfo(applySkeleton = false, applyMorph = false) {\n        if (this.hasBoundingInfo && this.getBoundingInfo().isLocked) {\n            return this;\n        }\n        const bias = this.geometry ? this.geometry.boundingBias : null;\n        this._refreshBoundingInfo(this._getPositionData(applySkeleton, applyMorph), bias);\n        return this;\n    }\n    /**\n     * @internal\n     */\n    _createGlobalSubMesh(force) {\n        const totalVertices = this.getTotalVertices();\n        if (!totalVertices || !this.getIndices()) {\n            return null;\n        }\n        // Check if we need to recreate the submeshes\n        if (this.subMeshes && this.subMeshes.length > 0) {\n            const ib = this.getIndices();\n            if (!ib) {\n                return null;\n            }\n            const totalIndices = ib.length;\n            let needToRecreate = false;\n            if (force) {\n                needToRecreate = true;\n            }\n            else {\n                for (const submesh of this.subMeshes) {\n                    if (submesh.indexStart + submesh.indexCount > totalIndices) {\n                        needToRecreate = true;\n                        break;\n                    }\n                    if (submesh.verticesStart + submesh.verticesCount > totalVertices) {\n                        needToRecreate = true;\n                        break;\n                    }\n                }\n            }\n            if (!needToRecreate) {\n                return this.subMeshes[0];\n            }\n        }\n        this.releaseSubMeshes();\n        return new SubMesh(0, 0, totalVertices, 0, this.getTotalIndices(), this);\n    }\n    /**\n     * This function will subdivide the mesh into multiple submeshes\n     * @param count defines the expected number of submeshes\n     */\n    subdivide(count) {\n        if (count < 1) {\n            return;\n        }\n        const totalIndices = this.getTotalIndices();\n        let subdivisionSize = (totalIndices / count) | 0;\n        let offset = 0;\n        // Ensure that subdivisionSize is a multiple of 3\n        while (subdivisionSize % 3 !== 0) {\n            subdivisionSize++;\n        }\n        this.releaseSubMeshes();\n        for (let index = 0; index < count; index++) {\n            if (offset >= totalIndices) {\n                break;\n            }\n            SubMesh.CreateFromIndices(0, offset, index === count - 1 ? totalIndices - offset : subdivisionSize, this);\n            offset += subdivisionSize;\n        }\n        this.synchronizeInstances();\n    }\n    /**\n     * Copy a FloatArray into a specific associated vertex buffer\n     * @param kind defines which buffer to write to (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @param data defines the data source\n     * @param updatable defines if the updated vertex buffer must be flagged as updatable\n     * @param stride defines the data stride size (can be null)\n     * @returns the current mesh\n     */\n    setVerticesData(kind, data, updatable = false, stride) {\n        if (!this._geometry) {\n            const vertexData = new VertexData();\n            vertexData.set(data, kind);\n            const scene = this.getScene();\n            new Geometry(Geometry.RandomId(), scene, vertexData, updatable, this);\n        }\n        else {\n            this._geometry.setVerticesData(kind, data, updatable, stride);\n        }\n        return this;\n    }\n    /**\n     * Delete a vertex buffer associated with this mesh\n     * @param kind defines which buffer to delete (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     */\n    removeVerticesData(kind) {\n        if (!this._geometry) {\n            return;\n        }\n        this._geometry.removeVerticesData(kind);\n    }\n    /**\n     * Flags an associated vertex buffer as updatable\n     * @param kind defines which buffer to use (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @param updatable defines if the updated vertex buffer must be flagged as updatable\n     */\n    markVerticesDataAsUpdatable(kind, updatable = true) {\n        const vb = this.getVertexBuffer(kind);\n        if (!vb || vb.isUpdatable() === updatable) {\n            return;\n        }\n        this.setVerticesData(kind, this.getVerticesData(kind), updatable);\n    }\n    /**\n     * Sets the mesh global Vertex Buffer\n     * @param buffer defines the buffer to use\n     * @param disposeExistingBuffer disposes the existing buffer, if any (default: true)\n     * @returns the current mesh\n     */\n    setVerticesBuffer(buffer, disposeExistingBuffer = true) {\n        if (!this._geometry) {\n            this._geometry = Geometry.CreateGeometryForMesh(this);\n        }\n        this._geometry.setVerticesBuffer(buffer, null, disposeExistingBuffer);\n        return this;\n    }\n    /**\n     * Update a specific associated vertex buffer\n     * @param kind defines which buffer to write to (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @param data defines the data source\n     * @param updateExtends defines if extends info of the mesh must be updated (can be null). This is mostly useful for \"position\" kind\n     * @param makeItUnique defines if the geometry associated with the mesh must be cloned to make the change only for this mesh (and not all meshes associated with the same geometry)\n     * @returns the current mesh\n     */\n    updateVerticesData(kind, data, updateExtends, makeItUnique) {\n        if (!this._geometry) {\n            return this;\n        }\n        if (!makeItUnique) {\n            this._geometry.updateVerticesData(kind, data, updateExtends);\n        }\n        else {\n            this.makeGeometryUnique();\n            this.updateVerticesData(kind, data, updateExtends, false);\n        }\n        return this;\n    }\n    /**\n     * This method updates the vertex positions of an updatable mesh according to the `positionFunction` returned values.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/dynamicMeshMorph#other-shapes-updatemeshpositions\n     * @param positionFunction is a simple JS function what is passed the mesh `positions` array. It doesn't need to return anything\n     * @param computeNormals is a boolean (default true) to enable/disable the mesh normal recomputation after the vertex position update\n     * @returns the current mesh\n     */\n    updateMeshPositions(positionFunction, computeNormals = true) {\n        const positions = this.getVerticesData(VertexBuffer.PositionKind);\n        if (!positions) {\n            return this;\n        }\n        positionFunction(positions);\n        this.updateVerticesData(VertexBuffer.PositionKind, positions, false, false);\n        if (computeNormals) {\n            const indices = this.getIndices();\n            const normals = this.getVerticesData(VertexBuffer.NormalKind);\n            if (!normals) {\n                return this;\n            }\n            VertexData.ComputeNormals(positions, indices, normals);\n            this.updateVerticesData(VertexBuffer.NormalKind, normals, false, false);\n        }\n        return this;\n    }\n    /**\n     * Creates a un-shared specific occurence of the geometry for the mesh.\n     * @returns the current mesh\n     */\n    makeGeometryUnique() {\n        if (!this._geometry) {\n            return this;\n        }\n        if (this._geometry.meshes.length === 1) {\n            return this;\n        }\n        const oldGeometry = this._geometry;\n        const geometry = this._geometry.copy(Geometry.RandomId());\n        oldGeometry.releaseForMesh(this, true);\n        geometry.applyToMesh(this);\n        return this;\n    }\n    /**\n     * Set the index buffer of this mesh\n     * @param indices defines the source data\n     * @param totalVertices defines the total number of vertices referenced by this index data (can be null)\n     * @param updatable defines if the updated index buffer must be flagged as updatable (default is false)\n     * @returns the current mesh\n     */\n    setIndices(indices, totalVertices = null, updatable = false) {\n        if (!this._geometry) {\n            const vertexData = new VertexData();\n            vertexData.indices = indices;\n            const scene = this.getScene();\n            new Geometry(Geometry.RandomId(), scene, vertexData, updatable, this);\n        }\n        else {\n            this._geometry.setIndices(indices, totalVertices, updatable);\n        }\n        return this;\n    }\n    /**\n     * Update the current index buffer\n     * @param indices defines the source data\n     * @param offset defines the offset in the index buffer where to store the new data (can be null)\n     * @param gpuMemoryOnly defines a boolean indicating that only the GPU memory must be updated leaving the CPU version of the indices unchanged (false by default)\n     * @returns the current mesh\n     */\n    updateIndices(indices, offset, gpuMemoryOnly = false) {\n        if (!this._geometry) {\n            return this;\n        }\n        this._geometry.updateIndices(indices, offset, gpuMemoryOnly);\n        return this;\n    }\n    /**\n     * Invert the geometry to move from a right handed system to a left handed one.\n     * @returns the current mesh\n     */\n    toLeftHanded() {\n        if (!this._geometry) {\n            return this;\n        }\n        this._geometry.toLeftHanded();\n        return this;\n    }\n    /**\n     * @internal\n     */\n    _bind(subMesh, effect, fillMode) {\n        if (!this._geometry) {\n            return this;\n        }\n        const engine = this.getScene().getEngine();\n        // Morph targets\n        if (this.morphTargetManager && this.morphTargetManager.isUsingTextureForTargets) {\n            this.morphTargetManager._bind(effect);\n        }\n        // Wireframe\n        let indexToBind;\n        if (this._unIndexed) {\n            indexToBind = null;\n        }\n        else {\n            switch (fillMode) {\n                case Material.PointFillMode:\n                    indexToBind = null;\n                    break;\n                case Material.WireFrameFillMode:\n                    indexToBind = subMesh._getLinesIndexBuffer(this.getIndices(), engine);\n                    break;\n                default:\n                case Material.TriangleFillMode:\n                    indexToBind = this._geometry.getIndexBuffer();\n                    break;\n            }\n        }\n        // VBOs\n        if (!this._userInstancedBuffersStorage || this.hasThinInstances) {\n            this._geometry._bind(effect, indexToBind);\n        }\n        else {\n            this._geometry._bind(effect, indexToBind, this._userInstancedBuffersStorage.vertexBuffers, this._userInstancedBuffersStorage.vertexArrayObjects);\n        }\n        return this;\n    }\n    /**\n     * @internal\n     */\n    _draw(subMesh, fillMode, instancesCount) {\n        if (!this._geometry || !this._geometry.getVertexBuffers() || (!this._unIndexed && !this._geometry.getIndexBuffer())) {\n            return this;\n        }\n        if (this._internalMeshDataInfo._onBeforeDrawObservable) {\n            this._internalMeshDataInfo._onBeforeDrawObservable.notifyObservers(this);\n        }\n        const scene = this.getScene();\n        const engine = scene.getEngine();\n        if (this._unIndexed || fillMode == Material.PointFillMode) {\n            // or triangles as points\n            engine.drawArraysType(fillMode, subMesh.verticesStart, subMesh.verticesCount, this.forcedInstanceCount || instancesCount);\n        }\n        else if (fillMode == Material.WireFrameFillMode) {\n            // Triangles as wireframe\n            engine.drawElementsType(fillMode, 0, subMesh._linesIndexCount, this.forcedInstanceCount || instancesCount);\n        }\n        else {\n            engine.drawElementsType(fillMode, subMesh.indexStart, subMesh.indexCount, this.forcedInstanceCount || instancesCount);\n        }\n        return this;\n    }\n    /**\n     * Registers for this mesh a javascript function called just before the rendering process\n     * @param func defines the function to call before rendering this mesh\n     * @returns the current mesh\n     */\n    registerBeforeRender(func) {\n        this.onBeforeRenderObservable.add(func);\n        return this;\n    }\n    /**\n     * Disposes a previously registered javascript function called before the rendering\n     * @param func defines the function to remove\n     * @returns the current mesh\n     */\n    unregisterBeforeRender(func) {\n        this.onBeforeRenderObservable.removeCallback(func);\n        return this;\n    }\n    /**\n     * Registers for this mesh a javascript function called just after the rendering is complete\n     * @param func defines the function to call after rendering this mesh\n     * @returns the current mesh\n     */\n    registerAfterRender(func) {\n        this.onAfterRenderObservable.add(func);\n        return this;\n    }\n    /**\n     * Disposes a previously registered javascript function called after the rendering.\n     * @param func defines the function to remove\n     * @returns the current mesh\n     */\n    unregisterAfterRender(func) {\n        this.onAfterRenderObservable.removeCallback(func);\n        return this;\n    }\n    /**\n     * @internal\n     */\n    _getInstancesRenderList(subMeshId, isReplacementMode = false) {\n        if (this._instanceDataStorage.isFrozen) {\n            if (isReplacementMode) {\n                this._instanceDataStorage.batchCacheReplacementModeInFrozenMode.hardwareInstancedRendering[subMeshId] = false;\n                this._instanceDataStorage.batchCacheReplacementModeInFrozenMode.renderSelf[subMeshId] = true;\n                return this._instanceDataStorage.batchCacheReplacementModeInFrozenMode;\n            }\n            if (this._instanceDataStorage.previousBatch) {\n                return this._instanceDataStorage.previousBatch;\n            }\n        }\n        const scene = this.getScene();\n        const isInIntermediateRendering = scene._isInIntermediateRendering();\n        const onlyForInstances = isInIntermediateRendering\n            ? this._internalAbstractMeshDataInfo._onlyForInstancesIntermediate\n            : this._internalAbstractMeshDataInfo._onlyForInstances;\n        const batchCache = this._instanceDataStorage.batchCache;\n        batchCache.mustReturn = false;\n        batchCache.renderSelf[subMeshId] = isReplacementMode || (!onlyForInstances && this.isEnabled() && this.isVisible);\n        batchCache.visibleInstances[subMeshId] = null;\n        if (this._instanceDataStorage.visibleInstances && !isReplacementMode) {\n            const visibleInstances = this._instanceDataStorage.visibleInstances;\n            const currentRenderId = scene.getRenderId();\n            const defaultRenderId = isInIntermediateRendering ? visibleInstances.intermediateDefaultRenderId : visibleInstances.defaultRenderId;\n            batchCache.visibleInstances[subMeshId] = visibleInstances[currentRenderId];\n            if (!batchCache.visibleInstances[subMeshId] && defaultRenderId) {\n                batchCache.visibleInstances[subMeshId] = visibleInstances[defaultRenderId];\n            }\n        }\n        batchCache.hardwareInstancedRendering[subMeshId] =\n            !isReplacementMode &&\n                this._instanceDataStorage.hardwareInstancedRendering &&\n                batchCache.visibleInstances[subMeshId] !== null &&\n                batchCache.visibleInstances[subMeshId] !== undefined;\n        this._instanceDataStorage.previousBatch = batchCache;\n        return batchCache;\n    }\n    /**\n     * @internal\n     */\n    _renderWithInstances(subMesh, fillMode, batch, effect, engine) {\n        var _a;\n        const visibleInstances = batch.visibleInstances[subMesh._id];\n        const visibleInstanceCount = visibleInstances ? visibleInstances.length : 0;\n        const instanceStorage = this._instanceDataStorage;\n        const currentInstancesBufferSize = instanceStorage.instancesBufferSize;\n        let instancesBuffer = instanceStorage.instancesBuffer;\n        let instancesPreviousBuffer = instanceStorage.instancesPreviousBuffer;\n        const matricesCount = visibleInstanceCount + 1;\n        const bufferSize = matricesCount * 16 * 4;\n        while (instanceStorage.instancesBufferSize < bufferSize) {\n            instanceStorage.instancesBufferSize *= 2;\n        }\n        if (!instanceStorage.instancesData || currentInstancesBufferSize != instanceStorage.instancesBufferSize) {\n            instanceStorage.instancesData = new Float32Array(instanceStorage.instancesBufferSize / 4);\n        }\n        if ((this._scene.needsPreviousWorldMatrices && !instanceStorage.instancesPreviousData) || currentInstancesBufferSize != instanceStorage.instancesBufferSize) {\n            instanceStorage.instancesPreviousData = new Float32Array(instanceStorage.instancesBufferSize / 4);\n        }\n        let offset = 0;\n        let instancesCount = 0;\n        const renderSelf = batch.renderSelf[subMesh._id];\n        const needUpdateBuffer = !instancesBuffer ||\n            currentInstancesBufferSize !== instanceStorage.instancesBufferSize ||\n            (this._scene.needsPreviousWorldMatrices && !instanceStorage.instancesPreviousBuffer);\n        if (!this._instanceDataStorage.manualUpdate && (!instanceStorage.isFrozen || needUpdateBuffer)) {\n            const world = this.getWorldMatrix();\n            if (renderSelf) {\n                if (this._scene.needsPreviousWorldMatrices) {\n                    if (!instanceStorage.masterMeshPreviousWorldMatrix) {\n                        instanceStorage.masterMeshPreviousWorldMatrix = world.clone();\n                        instanceStorage.masterMeshPreviousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\n                    }\n                    else {\n                        instanceStorage.masterMeshPreviousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\n                        instanceStorage.masterMeshPreviousWorldMatrix.copyFrom(world);\n                    }\n                }\n                world.copyToArray(instanceStorage.instancesData, offset);\n                offset += 16;\n                instancesCount++;\n            }\n            if (visibleInstances) {\n                if (Mesh.INSTANCEDMESH_SORT_TRANSPARENT && this._scene.activeCamera && ((_a = subMesh.getMaterial()) === null || _a === void 0 ? void 0 : _a.needAlphaBlendingForMesh(subMesh.getRenderingMesh()))) {\n                    const cameraPosition = this._scene.activeCamera.globalPosition;\n                    for (let instanceIndex = 0; instanceIndex < visibleInstances.length; instanceIndex++) {\n                        const instanceMesh = visibleInstances[instanceIndex];\n                        instanceMesh._distanceToCamera = Vector3.Distance(instanceMesh.getBoundingInfo().boundingSphere.centerWorld, cameraPosition);\n                    }\n                    visibleInstances.sort((m1, m2) => {\n                        return m1._distanceToCamera > m2._distanceToCamera ? -1 : m1._distanceToCamera < m2._distanceToCamera ? 1 : 0;\n                    });\n                }\n                for (let instanceIndex = 0; instanceIndex < visibleInstances.length; instanceIndex++) {\n                    const instance = visibleInstances[instanceIndex];\n                    const matrix = instance.getWorldMatrix();\n                    matrix.copyToArray(instanceStorage.instancesData, offset);\n                    if (this._scene.needsPreviousWorldMatrices) {\n                        if (!instance._previousWorldMatrix) {\n                            instance._previousWorldMatrix = matrix.clone();\n                            instance._previousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\n                        }\n                        else {\n                            instance._previousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\n                            instance._previousWorldMatrix.copyFrom(matrix);\n                        }\n                    }\n                    offset += 16;\n                    instancesCount++;\n                }\n            }\n        }\n        else {\n            instancesCount = (renderSelf ? 1 : 0) + visibleInstanceCount;\n        }\n        if (needUpdateBuffer) {\n            if (instancesBuffer) {\n                instancesBuffer.dispose();\n            }\n            if (instancesPreviousBuffer) {\n                instancesPreviousBuffer.dispose();\n            }\n            instancesBuffer = new Buffer(engine, instanceStorage.instancesData, true, 16, false, true);\n            instanceStorage.instancesBuffer = instancesBuffer;\n            if (!this._userInstancedBuffersStorage) {\n                this._userInstancedBuffersStorage = {\n                    data: {},\n                    vertexBuffers: {},\n                    strides: {},\n                    sizes: {},\n                    vertexArrayObjects: this.getEngine().getCaps().vertexArrayObject ? {} : undefined\n                };\n            }\n            this._userInstancedBuffersStorage.vertexBuffers[\"world0\"] = instancesBuffer.createVertexBuffer(\"world0\", 0, 4);\n            this._userInstancedBuffersStorage.vertexBuffers[\"world1\"] = instancesBuffer.createVertexBuffer(\"world1\", 4, 4);\n            this._userInstancedBuffersStorage.vertexBuffers[\"world2\"] = instancesBuffer.createVertexBuffer(\"world2\", 8, 4);\n            this._userInstancedBuffersStorage.vertexBuffers[\"world3\"] = instancesBuffer.createVertexBuffer(\"world3\", 12, 4);\n            if (this._scene.needsPreviousWorldMatrices) {\n                instancesPreviousBuffer = new Buffer(engine, instanceStorage.instancesPreviousData, true, 16, false, true);\n                instanceStorage.instancesPreviousBuffer = instancesPreviousBuffer;\n                this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld0\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld0\", 0, 4);\n                this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld1\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld1\", 4, 4);\n                this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld2\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld2\", 8, 4);\n                this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld3\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld3\", 12, 4);\n            }\n            this._invalidateInstanceVertexArrayObject();\n        }\n        else {\n            if (!this._instanceDataStorage.isFrozen || this._instanceDataStorage.forceMatrixUpdates) {\n                instancesBuffer.updateDirectly(instanceStorage.instancesData, 0, instancesCount);\n                if (this._scene.needsPreviousWorldMatrices && (!this._instanceDataStorage.manualUpdate || this._instanceDataStorage.previousManualUpdate)) {\n                    instancesPreviousBuffer.updateDirectly(instanceStorage.instancesPreviousData, 0, instancesCount);\n                }\n            }\n        }\n        this._processInstancedBuffers(visibleInstances, renderSelf);\n        // Stats\n        this.getScene()._activeIndices.addCount(subMesh.indexCount * instancesCount, false);\n        // Draw\n        if (engine._currentDrawContext) {\n            engine._currentDrawContext.useInstancing = true;\n        }\n        this._bind(subMesh, effect, fillMode);\n        this._draw(subMesh, fillMode, instancesCount);\n        // Write current matrices as previous matrices in case of manual update\n        // Default behaviour when previous matrices are not specified explicitly\n        // Will break if instances number/order changes\n        if (this._scene.needsPreviousWorldMatrices &&\n            !needUpdateBuffer &&\n            this._instanceDataStorage.manualUpdate &&\n            (!this._instanceDataStorage.isFrozen || this._instanceDataStorage.forceMatrixUpdates) &&\n            !this._instanceDataStorage.previousManualUpdate) {\n            instancesPreviousBuffer.updateDirectly(instanceStorage.instancesData, 0, instancesCount);\n        }\n        engine.unbindInstanceAttributes();\n        return this;\n    }\n    /**\n     * @internal\n     */\n    _renderWithThinInstances(subMesh, fillMode, effect, engine) {\n        var _a, _b;\n        // Stats\n        const instancesCount = (_b = (_a = this._thinInstanceDataStorage) === null || _a === void 0 ? void 0 : _a.instancesCount) !== null && _b !== void 0 ? _b : 0;\n        this.getScene()._activeIndices.addCount(subMesh.indexCount * instancesCount, false);\n        // Draw\n        if (engine._currentDrawContext) {\n            engine._currentDrawContext.useInstancing = true;\n        }\n        this._bind(subMesh, effect, fillMode);\n        this._draw(subMesh, fillMode, instancesCount);\n        // Write current matrices as previous matrices\n        // Default behaviour when previous matrices are not specified explicitly\n        // Will break if instances number/order changes\n        if (this._scene.needsPreviousWorldMatrices && !this._thinInstanceDataStorage.previousMatrixData && this._thinInstanceDataStorage.matrixData) {\n            if (!this._thinInstanceDataStorage.previousMatrixBuffer) {\n                this._thinInstanceDataStorage.previousMatrixBuffer = this._thinInstanceCreateMatrixBuffer(\"previousWorld\", this._thinInstanceDataStorage.matrixData, false);\n            }\n            else {\n                this._thinInstanceDataStorage.previousMatrixBuffer.updateDirectly(this._thinInstanceDataStorage.matrixData, 0, instancesCount);\n            }\n        }\n        engine.unbindInstanceAttributes();\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _processInstancedBuffers(visibleInstances, renderSelf) {\n        // Do nothing\n    }\n    /**\n     * @internal\n     */\n    _processRendering(renderingMesh, subMesh, effect, fillMode, batch, hardwareInstancedRendering, onBeforeDraw, effectiveMaterial) {\n        const scene = this.getScene();\n        const engine = scene.getEngine();\n        if (hardwareInstancedRendering && subMesh.getRenderingMesh().hasThinInstances) {\n            this._renderWithThinInstances(subMesh, fillMode, effect, engine);\n            return this;\n        }\n        if (hardwareInstancedRendering) {\n            this._renderWithInstances(subMesh, fillMode, batch, effect, engine);\n        }\n        else {\n            if (engine._currentDrawContext) {\n                engine._currentDrawContext.useInstancing = false;\n            }\n            let instanceCount = 0;\n            if (batch.renderSelf[subMesh._id]) {\n                // Draw\n                if (onBeforeDraw) {\n                    onBeforeDraw(false, renderingMesh.getWorldMatrix(), effectiveMaterial);\n                }\n                instanceCount++;\n                this._draw(subMesh, fillMode, this._instanceDataStorage.overridenInstanceCount);\n            }\n            const visibleInstancesForSubMesh = batch.visibleInstances[subMesh._id];\n            if (visibleInstancesForSubMesh) {\n                const visibleInstanceCount = visibleInstancesForSubMesh.length;\n                instanceCount += visibleInstanceCount;\n                // Stats\n                for (let instanceIndex = 0; instanceIndex < visibleInstanceCount; instanceIndex++) {\n                    const instance = visibleInstancesForSubMesh[instanceIndex];\n                    // World\n                    const world = instance.getWorldMatrix();\n                    if (onBeforeDraw) {\n                        onBeforeDraw(true, world, effectiveMaterial);\n                    }\n                    // Draw\n                    this._draw(subMesh, fillMode);\n                }\n            }\n            // Stats\n            scene._activeIndices.addCount(subMesh.indexCount * instanceCount, false);\n        }\n        return this;\n    }\n    /**\n     * @internal\n     */\n    _rebuild(dispose = false) {\n        if (this._instanceDataStorage.instancesBuffer) {\n            // Dispose instance buffer to be recreated in _renderWithInstances when rendered\n            if (dispose) {\n                this._instanceDataStorage.instancesBuffer.dispose();\n            }\n            this._instanceDataStorage.instancesBuffer = null;\n        }\n        if (this._userInstancedBuffersStorage) {\n            for (const kind in this._userInstancedBuffersStorage.vertexBuffers) {\n                const buffer = this._userInstancedBuffersStorage.vertexBuffers[kind];\n                if (buffer) {\n                    // Dispose instance buffer to be recreated in _renderWithInstances when rendered\n                    if (dispose) {\n                        buffer.dispose();\n                    }\n                    this._userInstancedBuffersStorage.vertexBuffers[kind] = null;\n                }\n            }\n            if (this._userInstancedBuffersStorage.vertexArrayObjects) {\n                this._userInstancedBuffersStorage.vertexArrayObjects = {};\n            }\n        }\n        this._internalMeshDataInfo._effectiveMaterial = null;\n        super._rebuild(dispose);\n    }\n    /** @internal */\n    _freeze() {\n        if (!this.subMeshes) {\n            return;\n        }\n        // Prepare batches\n        for (let index = 0; index < this.subMeshes.length; index++) {\n            this._getInstancesRenderList(index);\n        }\n        this._internalMeshDataInfo._effectiveMaterial = null;\n        this._instanceDataStorage.isFrozen = true;\n    }\n    /** @internal */\n    _unFreeze() {\n        this._instanceDataStorage.isFrozen = false;\n        this._instanceDataStorage.previousBatch = null;\n    }\n    /**\n     * Triggers the draw call for the mesh. Usually, you don't need to call this method by your own because the mesh rendering is handled by the scene rendering manager\n     * @param subMesh defines the subMesh to render\n     * @param enableAlphaMode defines if alpha mode can be changed\n     * @param effectiveMeshReplacement defines an optional mesh used to provide info for the rendering\n     * @returns the current mesh\n     */\n    render(subMesh, enableAlphaMode, effectiveMeshReplacement) {\n        var _a, _b, _c;\n        const scene = this.getScene();\n        if (this._internalAbstractMeshDataInfo._isActiveIntermediate) {\n            this._internalAbstractMeshDataInfo._isActiveIntermediate = false;\n        }\n        else {\n            this._internalAbstractMeshDataInfo._isActive = false;\n        }\n        if (this._checkOcclusionQuery() && !this._occlusionDataStorage.forceRenderingWhenOccluded) {\n            return this;\n        }\n        // Managing instances\n        const batch = this._getInstancesRenderList(subMesh._id, !!effectiveMeshReplacement);\n        if (batch.mustReturn) {\n            return this;\n        }\n        // Checking geometry state\n        if (!this._geometry || !this._geometry.getVertexBuffers() || (!this._unIndexed && !this._geometry.getIndexBuffer())) {\n            return this;\n        }\n        const engine = scene.getEngine();\n        let oldCameraMaxZ = 0;\n        let oldCamera = null;\n        if (this.ignoreCameraMaxZ && scene.activeCamera && !scene._isInIntermediateRendering()) {\n            oldCameraMaxZ = scene.activeCamera.maxZ;\n            oldCamera = scene.activeCamera;\n            scene.activeCamera.maxZ = 0;\n            scene.updateTransformMatrix(true);\n        }\n        if (this._internalMeshDataInfo._onBeforeRenderObservable) {\n            this._internalMeshDataInfo._onBeforeRenderObservable.notifyObservers(this);\n        }\n        const renderingMesh = subMesh.getRenderingMesh();\n        const hardwareInstancedRendering = batch.hardwareInstancedRendering[subMesh._id] ||\n            renderingMesh.hasThinInstances ||\n            (!!this._userInstancedBuffersStorage && !subMesh.getMesh()._internalAbstractMeshDataInfo._actAsRegularMesh);\n        const instanceDataStorage = this._instanceDataStorage;\n        const material = subMesh.getMaterial();\n        if (!material) {\n            if (oldCamera) {\n                oldCamera.maxZ = oldCameraMaxZ;\n                scene.updateTransformMatrix(true);\n            }\n            return this;\n        }\n        // Material\n        if (!instanceDataStorage.isFrozen || !this._internalMeshDataInfo._effectiveMaterial || this._internalMeshDataInfo._effectiveMaterial !== material) {\n            if (material._storeEffectOnSubMeshes) {\n                if (!material.isReadyForSubMesh(this, subMesh, hardwareInstancedRendering)) {\n                    if (oldCamera) {\n                        oldCamera.maxZ = oldCameraMaxZ;\n                        scene.updateTransformMatrix(true);\n                    }\n                    return this;\n                }\n            }\n            else if (!material.isReady(this, hardwareInstancedRendering)) {\n                if (oldCamera) {\n                    oldCamera.maxZ = oldCameraMaxZ;\n                    scene.updateTransformMatrix(true);\n                }\n                return this;\n            }\n            this._internalMeshDataInfo._effectiveMaterial = material;\n        }\n        else if ((material._storeEffectOnSubMeshes && !((_a = subMesh.effect) === null || _a === void 0 ? void 0 : _a._wasPreviouslyReady)) ||\n            (!material._storeEffectOnSubMeshes && !((_b = material.getEffect()) === null || _b === void 0 ? void 0 : _b._wasPreviouslyReady))) {\n            if (oldCamera) {\n                oldCamera.maxZ = oldCameraMaxZ;\n                scene.updateTransformMatrix(true);\n            }\n            return this;\n        }\n        // Alpha mode\n        if (enableAlphaMode) {\n            engine.setAlphaMode(this._internalMeshDataInfo._effectiveMaterial.alphaMode);\n        }\n        let drawWrapper;\n        if (this._internalMeshDataInfo._effectiveMaterial._storeEffectOnSubMeshes) {\n            drawWrapper = subMesh._drawWrapper;\n        }\n        else {\n            drawWrapper = this._internalMeshDataInfo._effectiveMaterial._getDrawWrapper();\n        }\n        const effect = (_c = drawWrapper === null || drawWrapper === void 0 ? void 0 : drawWrapper.effect) !== null && _c !== void 0 ? _c : null;\n        for (const step of scene._beforeRenderingMeshStage) {\n            step.action(this, subMesh, batch, effect);\n        }\n        if (!drawWrapper || !effect) {\n            if (oldCamera) {\n                oldCamera.maxZ = oldCameraMaxZ;\n                scene.updateTransformMatrix(true);\n            }\n            return this;\n        }\n        const effectiveMesh = effectiveMeshReplacement || this;\n        let sideOrientation;\n        if (!instanceDataStorage.isFrozen && (this._internalMeshDataInfo._effectiveMaterial.backFaceCulling || this.overrideMaterialSideOrientation !== null)) {\n            const mainDeterminant = effectiveMesh._getWorldMatrixDeterminant();\n            sideOrientation = this.overrideMaterialSideOrientation;\n            if (sideOrientation == null) {\n                sideOrientation = this._internalMeshDataInfo._effectiveMaterial.sideOrientation;\n            }\n            if (mainDeterminant < 0) {\n                sideOrientation = sideOrientation === Material.ClockWiseSideOrientation ? Material.CounterClockWiseSideOrientation : Material.ClockWiseSideOrientation;\n            }\n            instanceDataStorage.sideOrientation = sideOrientation;\n        }\n        else {\n            sideOrientation = instanceDataStorage.sideOrientation;\n        }\n        const reverse = this._internalMeshDataInfo._effectiveMaterial._preBind(drawWrapper, sideOrientation);\n        if (this._internalMeshDataInfo._effectiveMaterial.forceDepthWrite) {\n            engine.setDepthWrite(true);\n        }\n        // Bind\n        const fillMode = scene.forcePointsCloud\n            ? Material.PointFillMode\n            : scene.forceWireframe\n                ? Material.WireFrameFillMode\n                : this._internalMeshDataInfo._effectiveMaterial.fillMode;\n        if (this._internalMeshDataInfo._onBeforeBindObservable) {\n            this._internalMeshDataInfo._onBeforeBindObservable.notifyObservers(this);\n        }\n        if (!hardwareInstancedRendering) {\n            // Binding will be done later because we need to add more info to the VB\n            this._bind(subMesh, effect, fillMode);\n        }\n        const effectiveMaterial = this._internalMeshDataInfo._effectiveMaterial;\n        const world = effectiveMesh.getWorldMatrix();\n        if (effectiveMaterial._storeEffectOnSubMeshes) {\n            effectiveMaterial.bindForSubMesh(world, this, subMesh);\n        }\n        else {\n            effectiveMaterial.bind(world, this);\n        }\n        if (!effectiveMaterial.backFaceCulling && effectiveMaterial.separateCullingPass) {\n            engine.setState(true, effectiveMaterial.zOffset, false, !reverse, effectiveMaterial.cullBackFaces, effectiveMaterial.stencil, effectiveMaterial.zOffsetUnits);\n            this._processRendering(this, subMesh, effect, fillMode, batch, hardwareInstancedRendering, this._onBeforeDraw, this._internalMeshDataInfo._effectiveMaterial);\n            engine.setState(true, effectiveMaterial.zOffset, false, reverse, effectiveMaterial.cullBackFaces, effectiveMaterial.stencil, effectiveMaterial.zOffsetUnits);\n            if (this._internalMeshDataInfo._onBetweenPassObservable) {\n                this._internalMeshDataInfo._onBetweenPassObservable.notifyObservers(subMesh);\n            }\n        }\n        // Draw\n        this._processRendering(this, subMesh, effect, fillMode, batch, hardwareInstancedRendering, this._onBeforeDraw, this._internalMeshDataInfo._effectiveMaterial);\n        // Unbind\n        this._internalMeshDataInfo._effectiveMaterial.unbind();\n        for (const step of scene._afterRenderingMeshStage) {\n            step.action(this, subMesh, batch, effect);\n        }\n        if (this._internalMeshDataInfo._onAfterRenderObservable) {\n            this._internalMeshDataInfo._onAfterRenderObservable.notifyObservers(this);\n        }\n        if (oldCamera) {\n            oldCamera.maxZ = oldCameraMaxZ;\n            scene.updateTransformMatrix(true);\n        }\n        if (scene.performancePriority === ScenePerformancePriority.Aggressive && !instanceDataStorage.isFrozen) {\n            this._freeze();\n        }\n        return this;\n    }\n    /**\n     *   Renormalize the mesh and patch it up if there are no weights\n     *   Similar to normalization by adding the weights compute the reciprocal and multiply all elements, this wil ensure that everything adds to 1.\n     *   However in the case of zero weights then we set just a single influence to 1.\n     *   We check in the function for extra's present and if so we use the normalizeSkinWeightsWithExtras rather than the FourWeights version.\n     */\n    cleanMatrixWeights() {\n        if (this.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind)) {\n            if (this.isVerticesDataPresent(VertexBuffer.MatricesWeightsExtraKind)) {\n                this._normalizeSkinWeightsAndExtra();\n            }\n            else {\n                this._normalizeSkinFourWeights();\n            }\n        }\n    }\n    // faster 4 weight version.\n    _normalizeSkinFourWeights() {\n        const matricesWeights = this.getVerticesData(VertexBuffer.MatricesWeightsKind);\n        const numWeights = matricesWeights.length;\n        for (let a = 0; a < numWeights; a += 4) {\n            // accumulate weights\n            const t = matricesWeights[a] + matricesWeights[a + 1] + matricesWeights[a + 2] + matricesWeights[a + 3];\n            // check for invalid weight and just set it to 1.\n            if (t === 0) {\n                matricesWeights[a] = 1;\n            }\n            else {\n                // renormalize so everything adds to 1 use reciprocal\n                const recip = 1 / t;\n                matricesWeights[a] *= recip;\n                matricesWeights[a + 1] *= recip;\n                matricesWeights[a + 2] *= recip;\n                matricesWeights[a + 3] *= recip;\n            }\n        }\n        this.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeights);\n    }\n    // handle special case of extra verts.  (in theory gltf can handle 12 influences)\n    _normalizeSkinWeightsAndExtra() {\n        const matricesWeightsExtra = this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind);\n        const matricesWeights = this.getVerticesData(VertexBuffer.MatricesWeightsKind);\n        const numWeights = matricesWeights.length;\n        for (let a = 0; a < numWeights; a += 4) {\n            // accumulate weights\n            let t = matricesWeights[a] + matricesWeights[a + 1] + matricesWeights[a + 2] + matricesWeights[a + 3];\n            t += matricesWeightsExtra[a] + matricesWeightsExtra[a + 1] + matricesWeightsExtra[a + 2] + matricesWeightsExtra[a + 3];\n            // check for invalid weight and just set it to 1.\n            if (t === 0) {\n                matricesWeights[a] = 1;\n            }\n            else {\n                // renormalize so everything adds to 1 use reciprocal\n                const recip = 1 / t;\n                matricesWeights[a] *= recip;\n                matricesWeights[a + 1] *= recip;\n                matricesWeights[a + 2] *= recip;\n                matricesWeights[a + 3] *= recip;\n                // same goes for extras\n                matricesWeightsExtra[a] *= recip;\n                matricesWeightsExtra[a + 1] *= recip;\n                matricesWeightsExtra[a + 2] *= recip;\n                matricesWeightsExtra[a + 3] *= recip;\n            }\n        }\n        this.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeights);\n        this.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeightsExtra);\n    }\n    /**\n     * ValidateSkinning is used to determine that a mesh has valid skinning data along with skin metrics, if missing weights,\n     * or not normalized it is returned as invalid mesh the string can be used for console logs, or on screen messages to let\n     * the user know there was an issue with importing the mesh\n     * @returns a validation object with skinned, valid and report string\n     */\n    validateSkinning() {\n        const matricesWeightsExtra = this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind);\n        const matricesWeights = this.getVerticesData(VertexBuffer.MatricesWeightsKind);\n        if (matricesWeights === null || this.skeleton == null) {\n            return { skinned: false, valid: true, report: \"not skinned\" };\n        }\n        const numWeights = matricesWeights.length;\n        let numberNotSorted = 0;\n        let missingWeights = 0;\n        let maxUsedWeights = 0;\n        let numberNotNormalized = 0;\n        const numInfluences = matricesWeightsExtra === null ? 4 : 8;\n        const usedWeightCounts = new Array();\n        for (let a = 0; a <= numInfluences; a++) {\n            usedWeightCounts[a] = 0;\n        }\n        const toleranceEpsilon = 0.001;\n        for (let a = 0; a < numWeights; a += 4) {\n            let lastWeight = matricesWeights[a];\n            let t = lastWeight;\n            let usedWeights = t === 0 ? 0 : 1;\n            for (let b = 1; b < numInfluences; b++) {\n                const d = b < 4 ? matricesWeights[a + b] : matricesWeightsExtra[a + b - 4];\n                if (d > lastWeight) {\n                    numberNotSorted++;\n                }\n                if (d !== 0) {\n                    usedWeights++;\n                }\n                t += d;\n                lastWeight = d;\n            }\n            // count the buffer weights usage\n            usedWeightCounts[usedWeights]++;\n            // max influences\n            if (usedWeights > maxUsedWeights) {\n                maxUsedWeights = usedWeights;\n            }\n            // check for invalid weight and just set it to 1.\n            if (t === 0) {\n                missingWeights++;\n            }\n            else {\n                // renormalize so everything adds to 1 use reciprocal\n                const recip = 1 / t;\n                let tolerance = 0;\n                for (let b = 0; b < numInfluences; b++) {\n                    if (b < 4) {\n                        tolerance += Math.abs(matricesWeights[a + b] - matricesWeights[a + b] * recip);\n                    }\n                    else {\n                        tolerance += Math.abs(matricesWeightsExtra[a + b - 4] - matricesWeightsExtra[a + b - 4] * recip);\n                    }\n                }\n                // arbitrary epsilon value for dictating not normalized\n                if (tolerance > toleranceEpsilon) {\n                    numberNotNormalized++;\n                }\n            }\n        }\n        // validate bone indices are in range of the skeleton\n        const numBones = this.skeleton.bones.length;\n        const matricesIndices = this.getVerticesData(VertexBuffer.MatricesIndicesKind);\n        const matricesIndicesExtra = this.getVerticesData(VertexBuffer.MatricesIndicesExtraKind);\n        let numBadBoneIndices = 0;\n        for (let a = 0; a < numWeights; a += 4) {\n            for (let b = 0; b < numInfluences; b++) {\n                const index = b < 4 ? matricesIndices[a + b] : matricesIndicesExtra[a + b - 4];\n                if (index >= numBones || index < 0) {\n                    numBadBoneIndices++;\n                }\n            }\n        }\n        // log mesh stats\n        const output = \"Number of Weights = \" +\n            numWeights / 4 +\n            \"\\nMaximum influences = \" +\n            maxUsedWeights +\n            \"\\nMissing Weights = \" +\n            missingWeights +\n            \"\\nNot Sorted = \" +\n            numberNotSorted +\n            \"\\nNot Normalized = \" +\n            numberNotNormalized +\n            \"\\nWeightCounts = [\" +\n            usedWeightCounts +\n            \"]\" +\n            \"\\nNumber of bones = \" +\n            numBones +\n            \"\\nBad Bone Indices = \" +\n            numBadBoneIndices;\n        return { skinned: true, valid: missingWeights === 0 && numberNotNormalized === 0 && numBadBoneIndices === 0, report: output };\n    }\n    /** @internal */\n    _checkDelayState() {\n        const scene = this.getScene();\n        if (this._geometry) {\n            this._geometry.load(scene);\n        }\n        else if (this.delayLoadState === 4) {\n            this.delayLoadState = 2;\n            this._queueLoad(scene);\n        }\n        return this;\n    }\n    _queueLoad(scene) {\n        scene.addPendingData(this);\n        const getBinaryData = this.delayLoadingFile.indexOf(\".babylonbinarymeshdata\") !== -1;\n        Tools.LoadFile(this.delayLoadingFile, (data) => {\n            if (data instanceof ArrayBuffer) {\n                this._delayLoadingFunction(data, this);\n            }\n            else {\n                this._delayLoadingFunction(JSON.parse(data), this);\n            }\n            this.instances.forEach((instance) => {\n                instance.refreshBoundingInfo();\n                instance._syncSubMeshes();\n            });\n            this.delayLoadState = 1;\n            scene.removePendingData(this);\n        }, () => { }, scene.offlineProvider, getBinaryData);\n        return this;\n    }\n    /**\n     * Returns `true` if the mesh is within the frustum defined by the passed array of planes.\n     * A mesh is in the frustum if its bounding box intersects the frustum\n     * @param frustumPlanes defines the frustum to test\n     * @returns true if the mesh is in the frustum planes\n     */\n    isInFrustum(frustumPlanes) {\n        if (this.delayLoadState === 2) {\n            return false;\n        }\n        if (!super.isInFrustum(frustumPlanes)) {\n            return false;\n        }\n        this._checkDelayState();\n        return true;\n    }\n    /**\n     * Sets the mesh material by the material or multiMaterial `id` property\n     * @param id is a string identifying the material or the multiMaterial\n     * @returns the current mesh\n     */\n    setMaterialById(id) {\n        const materials = this.getScene().materials;\n        let index;\n        for (index = materials.length - 1; index > -1; index--) {\n            if (materials[index].id === id) {\n                this.material = materials[index];\n                return this;\n            }\n        }\n        // Multi\n        const multiMaterials = this.getScene().multiMaterials;\n        for (index = multiMaterials.length - 1; index > -1; index--) {\n            if (multiMaterials[index].id === id) {\n                this.material = multiMaterials[index];\n                return this;\n            }\n        }\n        return this;\n    }\n    /**\n     * Returns as a new array populated with the mesh material and/or skeleton, if any.\n     * @returns an array of IAnimatable\n     */\n    getAnimatables() {\n        const results = new Array();\n        if (this.material) {\n            results.push(this.material);\n        }\n        if (this.skeleton) {\n            results.push(this.skeleton);\n        }\n        return results;\n    }\n    /**\n     * Modifies the mesh geometry according to the passed transformation matrix.\n     * This method returns nothing, but it really modifies the mesh even if it's originally not set as updatable.\n     * The mesh normals are modified using the same transformation.\n     * Note that, under the hood, this method sets a new VertexBuffer each call.\n     * @param transform defines the transform matrix to use\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/center_origin/bakingTransforms\n     * @returns the current mesh\n     */\n    bakeTransformIntoVertices(transform) {\n        // Position\n        if (!this.isVerticesDataPresent(VertexBuffer.PositionKind)) {\n            return this;\n        }\n        const submeshes = this.subMeshes.splice(0);\n        this._resetPointsArrayCache();\n        let data = this.getVerticesData(VertexBuffer.PositionKind);\n        const temp = Vector3.Zero();\n        let index;\n        for (index = 0; index < data.length; index += 3) {\n            Vector3.TransformCoordinatesFromFloatsToRef(data[index], data[index + 1], data[index + 2], transform, temp).toArray(data, index);\n        }\n        this.setVerticesData(VertexBuffer.PositionKind, data, this.getVertexBuffer(VertexBuffer.PositionKind).isUpdatable());\n        // Normals\n        if (this.isVerticesDataPresent(VertexBuffer.NormalKind)) {\n            data = this.getVerticesData(VertexBuffer.NormalKind);\n            for (index = 0; index < data.length; index += 3) {\n                Vector3.TransformNormalFromFloatsToRef(data[index], data[index + 1], data[index + 2], transform, temp)\n                    .normalize()\n                    .toArray(data, index);\n            }\n            this.setVerticesData(VertexBuffer.NormalKind, data, this.getVertexBuffer(VertexBuffer.NormalKind).isUpdatable());\n        }\n        // flip faces?\n        if (transform.determinant() < 0) {\n            this.flipFaces();\n        }\n        // Restore submeshes\n        this.releaseSubMeshes();\n        this.subMeshes = submeshes;\n        return this;\n    }\n    /**\n     * Modifies the mesh geometry according to its own current World Matrix.\n     * The mesh World Matrix is then reset.\n     * This method returns nothing but really modifies the mesh even if it's originally not set as updatable.\n     * Note that, under the hood, this method sets a new VertexBuffer each call.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/center_origin/bakingTransforms\n     * @param bakeIndependentlyOfChildren indicates whether to preserve all child nodes' World Matrix during baking\n     * @returns the current mesh\n     */\n    bakeCurrentTransformIntoVertices(bakeIndependentlyOfChildren = true) {\n        this.bakeTransformIntoVertices(this.computeWorldMatrix(true));\n        this.resetLocalMatrix(bakeIndependentlyOfChildren);\n        return this;\n    }\n    // Cache\n    /** @internal */\n    get _positions() {\n        if (this._internalAbstractMeshDataInfo._positions) {\n            return this._internalAbstractMeshDataInfo._positions;\n        }\n        if (this._geometry) {\n            return this._geometry._positions;\n        }\n        return null;\n    }\n    /** @internal */\n    _resetPointsArrayCache() {\n        if (this._geometry) {\n            this._geometry._resetPointsArrayCache();\n        }\n        return this;\n    }\n    /** @internal */\n    _generatePointsArray() {\n        if (this._geometry) {\n            return this._geometry._generatePointsArray();\n        }\n        return false;\n    }\n    /**\n     * Returns a new Mesh object generated from the current mesh properties.\n     * This method must not get confused with createInstance()\n     * @param name is a string, the name given to the new mesh\n     * @param newParent can be any Node object (default `null`)\n     * @param doNotCloneChildren allows/denies the recursive cloning of the original mesh children if any (default `false`)\n     * @param clonePhysicsImpostor allows/denies the cloning in the same time of the original mesh `body` used by the physics engine, if any (default `true`)\n     * @returns a new mesh\n     */\n    clone(name = \"\", newParent = null, doNotCloneChildren, clonePhysicsImpostor = true) {\n        return new Mesh(name, this.getScene(), newParent, this, doNotCloneChildren, clonePhysicsImpostor);\n    }\n    /**\n     * Releases resources associated with this mesh.\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\n     */\n    dispose(doNotRecurse, disposeMaterialAndTextures = false) {\n        this.morphTargetManager = null;\n        if (this._geometry) {\n            this._geometry.releaseForMesh(this, true);\n        }\n        const internalDataInfo = this._internalMeshDataInfo;\n        if (internalDataInfo._onBeforeDrawObservable) {\n            internalDataInfo._onBeforeDrawObservable.clear();\n        }\n        if (internalDataInfo._onBeforeBindObservable) {\n            internalDataInfo._onBeforeBindObservable.clear();\n        }\n        if (internalDataInfo._onBeforeRenderObservable) {\n            internalDataInfo._onBeforeRenderObservable.clear();\n        }\n        if (internalDataInfo._onAfterRenderObservable) {\n            internalDataInfo._onAfterRenderObservable.clear();\n        }\n        if (internalDataInfo._onBetweenPassObservable) {\n            internalDataInfo._onBetweenPassObservable.clear();\n        }\n        // Sources\n        if (this._scene.useClonedMeshMap) {\n            if (internalDataInfo.meshMap) {\n                for (const uniqueId in internalDataInfo.meshMap) {\n                    const mesh = internalDataInfo.meshMap[uniqueId];\n                    if (mesh) {\n                        mesh._internalMeshDataInfo._source = null;\n                        internalDataInfo.meshMap[uniqueId] = undefined;\n                    }\n                }\n            }\n            if (internalDataInfo._source && internalDataInfo._source._internalMeshDataInfo.meshMap) {\n                internalDataInfo._source._internalMeshDataInfo.meshMap[this.uniqueId] = undefined;\n            }\n        }\n        else {\n            const meshes = this.getScene().meshes;\n            for (const abstractMesh of meshes) {\n                const mesh = abstractMesh;\n                if (mesh._internalMeshDataInfo && mesh._internalMeshDataInfo._source && mesh._internalMeshDataInfo._source === this) {\n                    mesh._internalMeshDataInfo._source = null;\n                }\n            }\n        }\n        internalDataInfo._source = null;\n        // Instances\n        this._disposeInstanceSpecificData();\n        // Thin instances\n        this._disposeThinInstanceSpecificData();\n        if (this._internalMeshDataInfo._checkReadinessObserver) {\n            this._scene.onBeforeRenderObservable.remove(this._internalMeshDataInfo._checkReadinessObserver);\n        }\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\n    }\n    /** @internal */\n    _disposeInstanceSpecificData() {\n        // Do nothing\n    }\n    /** @internal */\n    _disposeThinInstanceSpecificData() {\n        // Do nothing\n    }\n    /** @internal */\n    _invalidateInstanceVertexArrayObject() {\n        // Do nothing\n    }\n    /**\n     * Modifies the mesh geometry according to a displacement map.\n     * A displacement map is a colored image. Each pixel color value (actually a gradient computed from red, green, blue values) will give the displacement to apply to each mesh vertex.\n     * The mesh must be set as updatable. Its internal geometry is directly modified, no new buffer are allocated.\n     * @param url is a string, the URL from the image file is to be downloaded.\n     * @param minHeight is the lower limit of the displacement.\n     * @param maxHeight is the upper limit of the displacement.\n     * @param onSuccess is an optional Javascript function to be called just after the mesh is modified. It is passed the modified mesh and must return nothing.\n     * @param uvOffset is an optional vector2 used to offset UV.\n     * @param uvScale is an optional vector2 used to scale UV.\n     * @param forceUpdate defines whether or not to force an update of the generated buffers. This is useful to apply on a deserialized model for instance.\n     * @returns the Mesh.\n     */\n    applyDisplacementMap(url, minHeight, maxHeight, onSuccess, uvOffset, uvScale, forceUpdate = false) {\n        const scene = this.getScene();\n        const onload = (img) => {\n            // Getting height map data\n            const heightMapWidth = img.width;\n            const heightMapHeight = img.height;\n            const canvas = this.getEngine().createCanvas(heightMapWidth, heightMapHeight);\n            const context = canvas.getContext(\"2d\");\n            context.drawImage(img, 0, 0);\n            // Create VertexData from map data\n            //Cast is due to wrong definition in lib.d.ts from ts 1.3 - https://github.com/Microsoft/TypeScript/issues/949\n            const buffer = context.getImageData(0, 0, heightMapWidth, heightMapHeight).data;\n            this.applyDisplacementMapFromBuffer(buffer, heightMapWidth, heightMapHeight, minHeight, maxHeight, uvOffset, uvScale, forceUpdate);\n            //execute success callback, if set\n            if (onSuccess) {\n                onSuccess(this);\n            }\n        };\n        Tools.LoadImage(url, onload, () => { }, scene.offlineProvider);\n        return this;\n    }\n    /**\n     * Modifies the mesh geometry according to a displacementMap buffer.\n     * A displacement map is a colored image. Each pixel color value (actually a gradient computed from red, green, blue values) will give the displacement to apply to each mesh vertex.\n     * The mesh must be set as updatable. Its internal geometry is directly modified, no new buffer are allocated.\n     * @param buffer is a `Uint8Array` buffer containing series of `Uint8` lower than 255, the red, green, blue and alpha values of each successive pixel.\n     * @param heightMapWidth is the width of the buffer image.\n     * @param heightMapHeight is the height of the buffer image.\n     * @param minHeight is the lower limit of the displacement.\n     * @param maxHeight is the upper limit of the displacement.\n     * @param uvOffset is an optional vector2 used to offset UV.\n     * @param uvScale is an optional vector2 used to scale UV.\n     * @param forceUpdate defines whether or not to force an update of the generated buffers. This is useful to apply on a deserialized model for instance.\n     * @returns the Mesh.\n     */\n    applyDisplacementMapFromBuffer(buffer, heightMapWidth, heightMapHeight, minHeight, maxHeight, uvOffset, uvScale, forceUpdate = false) {\n        if (!this.isVerticesDataPresent(VertexBuffer.PositionKind) || !this.isVerticesDataPresent(VertexBuffer.NormalKind) || !this.isVerticesDataPresent(VertexBuffer.UVKind)) {\n            Logger.Warn(\"Cannot call applyDisplacementMap: Given mesh is not complete. Position, Normal or UV are missing\");\n            return this;\n        }\n        const positions = this.getVerticesData(VertexBuffer.PositionKind, true, true);\n        const normals = this.getVerticesData(VertexBuffer.NormalKind);\n        const uvs = this.getVerticesData(VertexBuffer.UVKind);\n        let position = Vector3.Zero();\n        const normal = Vector3.Zero();\n        const uv = Vector2.Zero();\n        uvOffset = uvOffset || Vector2.Zero();\n        uvScale = uvScale || new Vector2(1, 1);\n        for (let index = 0; index < positions.length; index += 3) {\n            Vector3.FromArrayToRef(positions, index, position);\n            Vector3.FromArrayToRef(normals, index, normal);\n            Vector2.FromArrayToRef(uvs, (index / 3) * 2, uv);\n            // Compute height\n            const u = (Math.abs(uv.x * uvScale.x + (uvOffset.x % 1)) * (heightMapWidth - 1)) % heightMapWidth | 0;\n            const v = (Math.abs(uv.y * uvScale.y + (uvOffset.y % 1)) * (heightMapHeight - 1)) % heightMapHeight | 0;\n            const pos = (u + v * heightMapWidth) * 4;\n            const r = buffer[pos] / 255.0;\n            const g = buffer[pos + 1] / 255.0;\n            const b = buffer[pos + 2] / 255.0;\n            const gradient = r * 0.3 + g * 0.59 + b * 0.11;\n            normal.normalize();\n            normal.scaleInPlace(minHeight + (maxHeight - minHeight) * gradient);\n            position = position.add(normal);\n            position.toArray(positions, index);\n        }\n        VertexData.ComputeNormals(positions, this.getIndices(), normals);\n        if (forceUpdate) {\n            this.setVerticesData(VertexBuffer.PositionKind, positions);\n            this.setVerticesData(VertexBuffer.NormalKind, normals);\n            this.setVerticesData(VertexBuffer.UVKind, uvs);\n        }\n        else {\n            this.updateVerticesData(VertexBuffer.PositionKind, positions);\n            this.updateVerticesData(VertexBuffer.NormalKind, normals);\n        }\n        return this;\n    }\n    /**\n     * Modify the mesh to get a flat shading rendering.\n     * This means each mesh facet will then have its own normals. Usually new vertices are added in the mesh geometry to get this result.\n     * Warning : the mesh is really modified even if not set originally as updatable and, under the hood, a new VertexBuffer is allocated.\n     * @returns current mesh\n     */\n    convertToFlatShadedMesh() {\n        const kinds = this.getVerticesDataKinds();\n        const vbs = {};\n        const data = {};\n        const newdata = {};\n        let updatableNormals = false;\n        let kindIndex;\n        let kind;\n        for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n            kind = kinds[kindIndex];\n            const vertexBuffer = this.getVertexBuffer(kind);\n            // Check data consistency\n            const vertexData = vertexBuffer.getData();\n            if (vertexData instanceof Array || vertexData instanceof Float32Array) {\n                if (vertexData.length === 0) {\n                    continue;\n                }\n            }\n            if (kind === VertexBuffer.NormalKind) {\n                updatableNormals = vertexBuffer.isUpdatable();\n                kinds.splice(kindIndex, 1);\n                kindIndex--;\n                continue;\n            }\n            vbs[kind] = vertexBuffer;\n            data[kind] = this.getVerticesData(kind);\n            newdata[kind] = [];\n        }\n        // Save previous submeshes\n        const previousSubmeshes = this.subMeshes.slice(0);\n        const indices = this.getIndices();\n        const totalIndices = this.getTotalIndices();\n        // Generating unique vertices per face\n        let index;\n        for (index = 0; index < totalIndices; index++) {\n            const vertexIndex = indices[index];\n            for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n                kind = kinds[kindIndex];\n                if (!vbs[kind]) {\n                    continue;\n                }\n                const stride = vbs[kind].getStrideSize();\n                for (let offset = 0; offset < stride; offset++) {\n                    newdata[kind].push(data[kind][vertexIndex * stride + offset]);\n                }\n            }\n        }\n        // Updating faces & normal\n        const normals = [];\n        const positions = newdata[VertexBuffer.PositionKind];\n        const useRightHandedSystem = this.getScene().useRightHandedSystem;\n        let flipNormalGeneration;\n        if (useRightHandedSystem) {\n            flipNormalGeneration = this.overrideMaterialSideOrientation === 1;\n        }\n        else {\n            flipNormalGeneration = this.overrideMaterialSideOrientation === 0;\n        }\n        for (index = 0; index < totalIndices; index += 3) {\n            indices[index] = index;\n            indices[index + 1] = index + 1;\n            indices[index + 2] = index + 2;\n            const p1 = Vector3.FromArray(positions, index * 3);\n            const p2 = Vector3.FromArray(positions, (index + 1) * 3);\n            const p3 = Vector3.FromArray(positions, (index + 2) * 3);\n            const p1p2 = p1.subtract(p2);\n            const p3p2 = p3.subtract(p2);\n            const normal = Vector3.Normalize(Vector3.Cross(p1p2, p3p2));\n            if (flipNormalGeneration) {\n                normal.scaleInPlace(-1);\n            }\n            // Store same normals for every vertex\n            for (let localIndex = 0; localIndex < 3; localIndex++) {\n                normals.push(normal.x);\n                normals.push(normal.y);\n                normals.push(normal.z);\n            }\n        }\n        this.setIndices(indices);\n        this.setVerticesData(VertexBuffer.NormalKind, normals, updatableNormals);\n        // Updating vertex buffers\n        for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n            kind = kinds[kindIndex];\n            if (!newdata[kind]) {\n                continue;\n            }\n            this.setVerticesData(kind, newdata[kind], vbs[kind].isUpdatable());\n        }\n        // Updating submeshes\n        this.releaseSubMeshes();\n        for (let submeshIndex = 0; submeshIndex < previousSubmeshes.length; submeshIndex++) {\n            const previousOne = previousSubmeshes[submeshIndex];\n            SubMesh.AddToMesh(previousOne.materialIndex, previousOne.indexStart, previousOne.indexCount, previousOne.indexStart, previousOne.indexCount, this);\n        }\n        this.synchronizeInstances();\n        return this;\n    }\n    /**\n     * This method removes all the mesh indices and add new vertices (duplication) in order to unfold facets into buffers.\n     * In other words, more vertices, no more indices and a single bigger VBO.\n     * The mesh is really modified even if not set originally as updatable. Under the hood, a new VertexBuffer is allocated.\n     * @returns current mesh\n     */\n    convertToUnIndexedMesh() {\n        const kinds = this.getVerticesDataKinds();\n        const vbs = {};\n        const data = {};\n        const newdata = {};\n        let kindIndex;\n        let kind;\n        for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n            kind = kinds[kindIndex];\n            const vertexBuffer = this.getVertexBuffer(kind);\n            vbs[kind] = vertexBuffer;\n            data[kind] = vbs[kind].getData();\n            newdata[kind] = [];\n        }\n        // Save previous submeshes\n        const previousSubmeshes = this.subMeshes.slice(0);\n        const indices = this.getIndices();\n        const totalIndices = this.getTotalIndices();\n        // Generating unique vertices per face\n        let index;\n        for (index = 0; index < totalIndices; index++) {\n            const vertexIndex = indices[index];\n            for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n                kind = kinds[kindIndex];\n                const stride = vbs[kind].getStrideSize();\n                for (let offset = 0; offset < stride; offset++) {\n                    newdata[kind].push(data[kind][vertexIndex * stride + offset]);\n                }\n            }\n        }\n        // Updating indices\n        for (index = 0; index < totalIndices; index += 3) {\n            indices[index] = index;\n            indices[index + 1] = index + 1;\n            indices[index + 2] = index + 2;\n        }\n        this.setIndices(indices);\n        // Updating vertex buffers\n        for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n            kind = kinds[kindIndex];\n            this.setVerticesData(kind, newdata[kind], vbs[kind].isUpdatable(), vbs[kind].getStrideSize());\n        }\n        // Updating submeshes\n        this.releaseSubMeshes();\n        for (let submeshIndex = 0; submeshIndex < previousSubmeshes.length; submeshIndex++) {\n            const previousOne = previousSubmeshes[submeshIndex];\n            SubMesh.AddToMesh(previousOne.materialIndex, previousOne.indexStart, previousOne.indexCount, previousOne.indexStart, previousOne.indexCount, this);\n        }\n        this._unIndexed = true;\n        this.synchronizeInstances();\n        return this;\n    }\n    /**\n     * Inverses facet orientations.\n     * Warning : the mesh is really modified even if not set originally as updatable. A new VertexBuffer is created under the hood each call.\n     * @param flipNormals will also inverts the normals\n     * @returns current mesh\n     */\n    flipFaces(flipNormals = false) {\n        const vertex_data = VertexData.ExtractFromMesh(this);\n        let i;\n        if (flipNormals && this.isVerticesDataPresent(VertexBuffer.NormalKind) && vertex_data.normals) {\n            for (i = 0; i < vertex_data.normals.length; i++) {\n                vertex_data.normals[i] *= -1;\n            }\n        }\n        if (vertex_data.indices) {\n            let temp;\n            for (i = 0; i < vertex_data.indices.length; i += 3) {\n                // reassign indices\n                temp = vertex_data.indices[i + 1];\n                vertex_data.indices[i + 1] = vertex_data.indices[i + 2];\n                vertex_data.indices[i + 2] = temp;\n            }\n        }\n        vertex_data.applyToMesh(this, this.isVertexBufferUpdatable(VertexBuffer.PositionKind));\n        return this;\n    }\n    /**\n     * Increase the number of facets and hence vertices in a mesh\n     * Vertex normals are interpolated from existing vertex normals\n     * Warning : the mesh is really modified even if not set originally as updatable. A new VertexBuffer is created under the hood each call.\n     * @param numberPerEdge the number of new vertices to add to each edge of a facet, optional default 1\n     */\n    increaseVertices(numberPerEdge = 1) {\n        const vertex_data = VertexData.ExtractFromMesh(this);\n        const currentIndices = vertex_data.indices && !Array.isArray(vertex_data.indices) && Array.from ? Array.from(vertex_data.indices) : vertex_data.indices;\n        const positions = vertex_data.positions && !Array.isArray(vertex_data.positions) && Array.from ? Array.from(vertex_data.positions) : vertex_data.positions;\n        const uvs = vertex_data.uvs && !Array.isArray(vertex_data.uvs) && Array.from ? Array.from(vertex_data.uvs) : vertex_data.uvs;\n        const normals = vertex_data.normals && !Array.isArray(vertex_data.normals) && Array.from ? Array.from(vertex_data.normals) : vertex_data.normals;\n        if (!currentIndices || !positions) {\n            Logger.Warn(\"Couldn't increase number of vertices : VertexData must contain at least indices and positions\");\n        }\n        else {\n            vertex_data.indices = currentIndices;\n            vertex_data.positions = positions;\n            if (uvs) {\n                vertex_data.uvs = uvs;\n            }\n            if (normals) {\n                vertex_data.normals = normals;\n            }\n            const segments = numberPerEdge + 1; //segments per current facet edge, become sides of new facets\n            const tempIndices = new Array();\n            for (let i = 0; i < segments + 1; i++) {\n                tempIndices[i] = new Array();\n            }\n            let a; //vertex index of one end of a side\n            let b; //vertex index of other end of the side\n            const deltaPosition = new Vector3(0, 0, 0);\n            const deltaNormal = new Vector3(0, 0, 0);\n            const deltaUV = new Vector2(0, 0);\n            const indices = new Array();\n            const vertexIndex = new Array();\n            const side = new Array();\n            let len;\n            let positionPtr = positions.length;\n            let uvPtr;\n            if (uvs) {\n                uvPtr = uvs.length;\n            }\n            let normalsPtr;\n            if (normals) {\n                normalsPtr = normals.length;\n            }\n            for (let i = 0; i < currentIndices.length; i += 3) {\n                vertexIndex[0] = currentIndices[i];\n                vertexIndex[1] = currentIndices[i + 1];\n                vertexIndex[2] = currentIndices[i + 2];\n                for (let j = 0; j < 3; j++) {\n                    a = vertexIndex[j];\n                    b = vertexIndex[(j + 1) % 3];\n                    if (side[a] === undefined && side[b] === undefined) {\n                        side[a] = new Array();\n                        side[b] = new Array();\n                    }\n                    else {\n                        if (side[a] === undefined) {\n                            side[a] = new Array();\n                        }\n                        if (side[b] === undefined) {\n                            side[b] = new Array();\n                        }\n                    }\n                    if (side[a][b] === undefined && side[b][a] === undefined) {\n                        side[a][b] = [];\n                        deltaPosition.x = (positions[3 * b] - positions[3 * a]) / segments;\n                        deltaPosition.y = (positions[3 * b + 1] - positions[3 * a + 1]) / segments;\n                        deltaPosition.z = (positions[3 * b + 2] - positions[3 * a + 2]) / segments;\n                        if (normals) {\n                            deltaNormal.x = (normals[3 * b] - normals[3 * a]) / segments;\n                            deltaNormal.y = (normals[3 * b + 1] - normals[3 * a + 1]) / segments;\n                            deltaNormal.z = (normals[3 * b + 2] - normals[3 * a + 2]) / segments;\n                        }\n                        if (uvs) {\n                            deltaUV.x = (uvs[2 * b] - uvs[2 * a]) / segments;\n                            deltaUV.y = (uvs[2 * b + 1] - uvs[2 * a + 1]) / segments;\n                        }\n                        side[a][b].push(a);\n                        for (let k = 1; k < segments; k++) {\n                            side[a][b].push(positions.length / 3);\n                            positions[positionPtr++] = positions[3 * a] + k * deltaPosition.x;\n                            positions[positionPtr++] = positions[3 * a + 1] + k * deltaPosition.y;\n                            positions[positionPtr++] = positions[3 * a + 2] + k * deltaPosition.z;\n                            if (normals) {\n                                normals[normalsPtr++] = normals[3 * a] + k * deltaNormal.x;\n                                normals[normalsPtr++] = normals[3 * a + 1] + k * deltaNormal.y;\n                                normals[normalsPtr++] = normals[3 * a + 2] + k * deltaNormal.z;\n                            }\n                            if (uvs) {\n                                uvs[uvPtr++] = uvs[2 * a] + k * deltaUV.x;\n                                uvs[uvPtr++] = uvs[2 * a + 1] + k * deltaUV.y;\n                            }\n                        }\n                        side[a][b].push(b);\n                        side[b][a] = new Array();\n                        len = side[a][b].length;\n                        for (let idx = 0; idx < len; idx++) {\n                            side[b][a][idx] = side[a][b][len - 1 - idx];\n                        }\n                    }\n                }\n                //Calculate positions, normals and uvs of new internal vertices\n                tempIndices[0][0] = currentIndices[i];\n                tempIndices[1][0] = side[currentIndices[i]][currentIndices[i + 1]][1];\n                tempIndices[1][1] = side[currentIndices[i]][currentIndices[i + 2]][1];\n                for (let k = 2; k < segments; k++) {\n                    tempIndices[k][0] = side[currentIndices[i]][currentIndices[i + 1]][k];\n                    tempIndices[k][k] = side[currentIndices[i]][currentIndices[i + 2]][k];\n                    deltaPosition.x = (positions[3 * tempIndices[k][k]] - positions[3 * tempIndices[k][0]]) / k;\n                    deltaPosition.y = (positions[3 * tempIndices[k][k] + 1] - positions[3 * tempIndices[k][0] + 1]) / k;\n                    deltaPosition.z = (positions[3 * tempIndices[k][k] + 2] - positions[3 * tempIndices[k][0] + 2]) / k;\n                    if (normals) {\n                        deltaNormal.x = (normals[3 * tempIndices[k][k]] - normals[3 * tempIndices[k][0]]) / k;\n                        deltaNormal.y = (normals[3 * tempIndices[k][k] + 1] - normals[3 * tempIndices[k][0] + 1]) / k;\n                        deltaNormal.z = (normals[3 * tempIndices[k][k] + 2] - normals[3 * tempIndices[k][0] + 2]) / k;\n                    }\n                    if (uvs) {\n                        deltaUV.x = (uvs[2 * tempIndices[k][k]] - uvs[2 * tempIndices[k][0]]) / k;\n                        deltaUV.y = (uvs[2 * tempIndices[k][k] + 1] - uvs[2 * tempIndices[k][0] + 1]) / k;\n                    }\n                    for (let j = 1; j < k; j++) {\n                        tempIndices[k][j] = positions.length / 3;\n                        positions[positionPtr++] = positions[3 * tempIndices[k][0]] + j * deltaPosition.x;\n                        positions[positionPtr++] = positions[3 * tempIndices[k][0] + 1] + j * deltaPosition.y;\n                        positions[positionPtr++] = positions[3 * tempIndices[k][0] + 2] + j * deltaPosition.z;\n                        if (normals) {\n                            normals[normalsPtr++] = normals[3 * tempIndices[k][0]] + j * deltaNormal.x;\n                            normals[normalsPtr++] = normals[3 * tempIndices[k][0] + 1] + j * deltaNormal.y;\n                            normals[normalsPtr++] = normals[3 * tempIndices[k][0] + 2] + j * deltaNormal.z;\n                        }\n                        if (uvs) {\n                            uvs[uvPtr++] = uvs[2 * tempIndices[k][0]] + j * deltaUV.x;\n                            uvs[uvPtr++] = uvs[2 * tempIndices[k][0] + 1] + j * deltaUV.y;\n                        }\n                    }\n                }\n                tempIndices[segments] = side[currentIndices[i + 1]][currentIndices[i + 2]];\n                // reform indices\n                indices.push(tempIndices[0][0], tempIndices[1][0], tempIndices[1][1]);\n                for (let k = 1; k < segments; k++) {\n                    let j;\n                    for (j = 0; j < k; j++) {\n                        indices.push(tempIndices[k][j], tempIndices[k + 1][j], tempIndices[k + 1][j + 1]);\n                        indices.push(tempIndices[k][j], tempIndices[k + 1][j + 1], tempIndices[k][j + 1]);\n                    }\n                    indices.push(tempIndices[k][j], tempIndices[k + 1][j], tempIndices[k + 1][j + 1]);\n                }\n            }\n            vertex_data.indices = indices;\n            vertex_data.applyToMesh(this, this.isVertexBufferUpdatable(VertexBuffer.PositionKind));\n        }\n    }\n    /**\n     * Force adjacent facets to share vertices and remove any facets that have all vertices in a line\n     * This will undo any application of covertToFlatShadedMesh\n     * Warning : the mesh is really modified even if not set originally as updatable. A new VertexBuffer is created under the hood each call.\n     */\n    forceSharedVertices() {\n        const vertex_data = VertexData.ExtractFromMesh(this);\n        const currentUVs = vertex_data.uvs;\n        const currentIndices = vertex_data.indices;\n        const currentPositions = vertex_data.positions;\n        const currentColors = vertex_data.colors;\n        const currentMatrixIndices = vertex_data.matricesIndices;\n        const currentMatrixWeights = vertex_data.matricesWeights;\n        const currentMatrixIndicesExtra = vertex_data.matricesIndicesExtra;\n        const currentMatrixWeightsExtra = vertex_data.matricesWeightsExtra;\n        if (currentIndices === void 0 || currentPositions === void 0 || currentIndices === null || currentPositions === null) {\n            Logger.Warn(\"VertexData contains empty entries\");\n        }\n        else {\n            const positions = new Array();\n            const indices = new Array();\n            const uvs = new Array();\n            const colors = new Array();\n            const matrixIndices = new Array();\n            const matrixWeights = new Array();\n            const matrixIndicesExtra = new Array();\n            const matrixWeightsExtra = new Array();\n            let pstring = new Array(); //lists facet vertex positions (a,b,c) as string \"a|b|c\"\n            let indexPtr = 0; // pointer to next available index value\n            const uniquePositions = {}; // unique vertex positions\n            let ptr; // pointer to element in uniquePositions\n            let facet;\n            for (let i = 0; i < currentIndices.length; i += 3) {\n                facet = [currentIndices[i], currentIndices[i + 1], currentIndices[i + 2]]; //facet vertex indices\n                pstring = new Array();\n                for (let j = 0; j < 3; j++) {\n                    pstring[j] = \"\";\n                    for (let k = 0; k < 3; k++) {\n                        //small values make 0\n                        if (Math.abs(currentPositions[3 * facet[j] + k]) < 0.00000001) {\n                            currentPositions[3 * facet[j] + k] = 0;\n                        }\n                        pstring[j] += currentPositions[3 * facet[j] + k] + \"|\";\n                    }\n                }\n                //check facet vertices to see that none are repeated\n                // do not process any facet that has a repeated vertex, ie is a line\n                if (!(pstring[0] == pstring[1] || pstring[0] == pstring[2] || pstring[1] == pstring[2])) {\n                    //for each facet position check if already listed in uniquePositions\n                    // if not listed add to uniquePositions and set index pointer\n                    // if listed use its index in uniquePositions and new index pointer\n                    for (let j = 0; j < 3; j++) {\n                        ptr = uniquePositions[pstring[j]];\n                        if (ptr === undefined) {\n                            uniquePositions[pstring[j]] = indexPtr;\n                            ptr = indexPtr++;\n                            //not listed so add individual x, y, z coordinates to positions\n                            for (let k = 0; k < 3; k++) {\n                                positions.push(currentPositions[3 * facet[j] + k]);\n                            }\n                            if (currentColors !== null && currentColors !== void 0) {\n                                for (let k = 0; k < 4; k++) {\n                                    colors.push(currentColors[4 * facet[j] + k]);\n                                }\n                            }\n                            if (currentUVs !== null && currentUVs !== void 0) {\n                                for (let k = 0; k < 2; k++) {\n                                    uvs.push(currentUVs[2 * facet[j] + k]);\n                                }\n                            }\n                            if (currentMatrixIndices !== null && currentMatrixIndices !== void 0) {\n                                for (let k = 0; k < 4; k++) {\n                                    matrixIndices.push(currentMatrixIndices[4 * facet[j] + k]);\n                                }\n                            }\n                            if (currentMatrixWeights !== null && currentMatrixWeights !== void 0) {\n                                for (let k = 0; k < 4; k++) {\n                                    matrixWeights.push(currentMatrixWeights[4 * facet[j] + k]);\n                                }\n                            }\n                            if (currentMatrixIndicesExtra !== null && currentMatrixIndicesExtra !== void 0) {\n                                for (let k = 0; k < 4; k++) {\n                                    matrixIndicesExtra.push(currentMatrixIndicesExtra[4 * facet[j] + k]);\n                                }\n                            }\n                            if (currentMatrixWeightsExtra !== null && currentMatrixWeightsExtra !== void 0) {\n                                for (let k = 0; k < 4; k++) {\n                                    matrixWeightsExtra.push(currentMatrixWeightsExtra[4 * facet[j] + k]);\n                                }\n                            }\n                        }\n                        // add new index pointer to indices array\n                        indices.push(ptr);\n                    }\n                }\n            }\n            const normals = new Array();\n            VertexData.ComputeNormals(positions, indices, normals);\n            //create new vertex data object and update\n            vertex_data.positions = positions;\n            vertex_data.indices = indices;\n            vertex_data.normals = normals;\n            if (currentUVs !== null && currentUVs !== void 0) {\n                vertex_data.uvs = uvs;\n            }\n            if (currentColors !== null && currentColors !== void 0) {\n                vertex_data.colors = colors;\n            }\n            if (currentMatrixIndices !== null && currentMatrixIndices !== void 0) {\n                vertex_data.matricesIndices = matrixIndices;\n            }\n            if (currentMatrixWeights !== null && currentMatrixWeights !== void 0) {\n                vertex_data.matricesWeights = matrixWeights;\n            }\n            if (currentMatrixIndicesExtra !== null && currentMatrixIndicesExtra !== void 0) {\n                vertex_data.matricesIndicesExtra = matrixIndicesExtra;\n            }\n            if (currentMatrixWeights !== null && currentMatrixWeights !== void 0) {\n                vertex_data.matricesWeightsExtra = matrixWeightsExtra;\n            }\n            vertex_data.applyToMesh(this, this.isVertexBufferUpdatable(VertexBuffer.PositionKind));\n        }\n    }\n    // Instances\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/naming-convention\n    static _instancedMeshFactory(name, mesh) {\n        throw _WarnImport(\"InstancedMesh\");\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    static _PhysicsImpostorParser(scene, physicObject, jsonObject) {\n        throw _WarnImport(\"PhysicsImpostor\");\n    }\n    /**\n     * Creates a new InstancedMesh object from the mesh model.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances\n     * @param name defines the name of the new instance\n     * @returns a new InstancedMesh\n     */\n    createInstance(name) {\n        return Mesh._instancedMeshFactory(name, this);\n    }\n    /**\n     * Synchronises all the mesh instance submeshes to the current mesh submeshes, if any.\n     * After this call, all the mesh instances have the same submeshes than the current mesh.\n     * @returns the current mesh\n     */\n    synchronizeInstances() {\n        for (let instanceIndex = 0; instanceIndex < this.instances.length; instanceIndex++) {\n            const instance = this.instances[instanceIndex];\n            instance._syncSubMeshes();\n        }\n        return this;\n    }\n    /**\n     * Optimization of the mesh's indices, in case a mesh has duplicated vertices.\n     * The function will only reorder the indices and will not remove unused vertices to avoid problems with submeshes.\n     * This should be used together with the simplification to avoid disappearing triangles.\n     * @param successCallback an optional success callback to be called after the optimization finished.\n     * @returns the current mesh\n     */\n    optimizeIndices(successCallback) {\n        const indices = this.getIndices();\n        const positions = this.getVerticesData(VertexBuffer.PositionKind);\n        if (!positions || !indices) {\n            return this;\n        }\n        const vectorPositions = new Array();\n        for (let pos = 0; pos < positions.length; pos = pos + 3) {\n            vectorPositions.push(Vector3.FromArray(positions, pos));\n        }\n        const dupes = new Array();\n        AsyncLoop.SyncAsyncForLoop(vectorPositions.length, 40, (iteration) => {\n            const realPos = vectorPositions.length - 1 - iteration;\n            const testedPosition = vectorPositions[realPos];\n            for (let j = 0; j < realPos; ++j) {\n                const againstPosition = vectorPositions[j];\n                if (testedPosition.equals(againstPosition)) {\n                    dupes[realPos] = j;\n                    break;\n                }\n            }\n        }, () => {\n            for (let i = 0; i < indices.length; ++i) {\n                indices[i] = dupes[indices[i]] || indices[i];\n            }\n            //indices are now reordered\n            const originalSubMeshes = this.subMeshes.slice(0);\n            this.setIndices(indices);\n            this.subMeshes = originalSubMeshes;\n            if (successCallback) {\n                successCallback(this);\n            }\n        });\n        return this;\n    }\n    /**\n     * Serialize current mesh\n     * @param serializationObject defines the object which will receive the serialization data\n     */\n    serialize(serializationObject = {}) {\n        serializationObject.name = this.name;\n        serializationObject.id = this.id;\n        serializationObject.uniqueId = this.uniqueId;\n        serializationObject.type = this.getClassName();\n        if (Tags && Tags.HasTags(this)) {\n            serializationObject.tags = Tags.GetTags(this);\n        }\n        serializationObject.position = this.position.asArray();\n        if (this.rotationQuaternion) {\n            serializationObject.rotationQuaternion = this.rotationQuaternion.asArray();\n        }\n        else if (this.rotation) {\n            serializationObject.rotation = this.rotation.asArray();\n        }\n        serializationObject.scaling = this.scaling.asArray();\n        if (this._postMultiplyPivotMatrix) {\n            serializationObject.pivotMatrix = this.getPivotMatrix().asArray();\n        }\n        else {\n            serializationObject.localMatrix = this.getPivotMatrix().asArray();\n        }\n        serializationObject.isEnabled = this.isEnabled(false);\n        serializationObject.isVisible = this.isVisible;\n        serializationObject.infiniteDistance = this.infiniteDistance;\n        serializationObject.pickable = this.isPickable;\n        serializationObject.receiveShadows = this.receiveShadows;\n        serializationObject.billboardMode = this.billboardMode;\n        serializationObject.visibility = this.visibility;\n        serializationObject.checkCollisions = this.checkCollisions;\n        serializationObject.isBlocker = this.isBlocker;\n        serializationObject.overrideMaterialSideOrientation = this.overrideMaterialSideOrientation;\n        // Parent\n        if (this.parent) {\n            this.parent._serializeAsParent(serializationObject);\n        }\n        // Geometry\n        serializationObject.isUnIndexed = this.isUnIndexed;\n        const geometry = this._geometry;\n        if (geometry && this.subMeshes) {\n            serializationObject.geometryUniqueId = geometry.uniqueId;\n            serializationObject.geometryId = geometry.id;\n            // SubMeshes\n            serializationObject.subMeshes = [];\n            for (let subIndex = 0; subIndex < this.subMeshes.length; subIndex++) {\n                const subMesh = this.subMeshes[subIndex];\n                serializationObject.subMeshes.push({\n                    materialIndex: subMesh.materialIndex,\n                    verticesStart: subMesh.verticesStart,\n                    verticesCount: subMesh.verticesCount,\n                    indexStart: subMesh.indexStart,\n                    indexCount: subMesh.indexCount\n                });\n            }\n        }\n        // Material\n        if (this.material) {\n            if (!this.material.doNotSerialize) {\n                serializationObject.materialUniqueId = this.material.uniqueId;\n                serializationObject.materialId = this.material.id; // back compat\n            }\n        }\n        else {\n            this.material = null;\n            serializationObject.materialUniqueId = this._scene.defaultMaterial.uniqueId;\n            serializationObject.materialId = this._scene.defaultMaterial.id; // back compat\n        }\n        // Morph targets\n        if (this.morphTargetManager) {\n            serializationObject.morphTargetManagerId = this.morphTargetManager.uniqueId;\n        }\n        // Skeleton\n        if (this.skeleton) {\n            serializationObject.skeletonId = this.skeleton.id;\n            serializationObject.numBoneInfluencers = this.numBoneInfluencers;\n        }\n        // Physics\n        //TODO implement correct serialization for physics impostors.\n        if (this.getScene()._getComponent(SceneComponentConstants.NAME_PHYSICSENGINE)) {\n            const impostor = this.getPhysicsImpostor();\n            if (impostor) {\n                serializationObject.physicsMass = impostor.getParam(\"mass\");\n                serializationObject.physicsFriction = impostor.getParam(\"friction\");\n                serializationObject.physicsRestitution = impostor.getParam(\"mass\");\n                serializationObject.physicsImpostor = impostor.type;\n            }\n        }\n        // Metadata\n        if (this.metadata) {\n            serializationObject.metadata = this.metadata;\n        }\n        // Instances\n        serializationObject.instances = [];\n        for (let index = 0; index < this.instances.length; index++) {\n            const instance = this.instances[index];\n            if (instance.doNotSerialize) {\n                continue;\n            }\n            const serializationInstance = {\n                name: instance.name,\n                id: instance.id,\n                isEnabled: instance.isEnabled(false),\n                isVisible: instance.isVisible,\n                isPickable: instance.isPickable,\n                checkCollisions: instance.checkCollisions,\n                position: instance.position.asArray(),\n                scaling: instance.scaling.asArray()\n            };\n            if (instance.parent) {\n                instance.parent._serializeAsParent(serializationInstance);\n            }\n            if (instance.rotationQuaternion) {\n                serializationInstance.rotationQuaternion = instance.rotationQuaternion.asArray();\n            }\n            else if (instance.rotation) {\n                serializationInstance.rotation = instance.rotation.asArray();\n            }\n            // Physics\n            //TODO implement correct serialization for physics impostors.\n            if (this.getScene()._getComponent(SceneComponentConstants.NAME_PHYSICSENGINE)) {\n                const impostor = instance.getPhysicsImpostor();\n                if (impostor) {\n                    serializationInstance.physicsMass = impostor.getParam(\"mass\");\n                    serializationInstance.physicsFriction = impostor.getParam(\"friction\");\n                    serializationInstance.physicsRestitution = impostor.getParam(\"mass\");\n                    serializationInstance.physicsImpostor = impostor.type;\n                }\n            }\n            // Metadata\n            if (instance.metadata) {\n                serializationInstance.metadata = instance.metadata;\n            }\n            // Action Manager\n            if (instance.actionManager) {\n                serializationInstance.actions = instance.actionManager.serialize(instance.name);\n            }\n            serializationObject.instances.push(serializationInstance);\n            // Animations\n            SerializationHelper.AppendSerializedAnimations(instance, serializationInstance);\n            serializationInstance.ranges = instance.serializeAnimationRanges();\n        }\n        // Thin instances\n        if (this._thinInstanceDataStorage.instancesCount && this._thinInstanceDataStorage.matrixData) {\n            serializationObject.thinInstances = {\n                instancesCount: this._thinInstanceDataStorage.instancesCount,\n                matrixData: Array.from(this._thinInstanceDataStorage.matrixData),\n                matrixBufferSize: this._thinInstanceDataStorage.matrixBufferSize,\n                enablePicking: this.thinInstanceEnablePicking\n            };\n            if (this._userThinInstanceBuffersStorage) {\n                const userThinInstance = {\n                    data: {},\n                    sizes: {},\n                    strides: {}\n                };\n                for (const kind in this._userThinInstanceBuffersStorage.data) {\n                    userThinInstance.data[kind] = Array.from(this._userThinInstanceBuffersStorage.data[kind]);\n                    userThinInstance.sizes[kind] = this._userThinInstanceBuffersStorage.sizes[kind];\n                    userThinInstance.strides[kind] = this._userThinInstanceBuffersStorage.strides[kind];\n                }\n                serializationObject.thinInstances.userThinInstance = userThinInstance;\n            }\n        }\n        // Animations\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\n        serializationObject.ranges = this.serializeAnimationRanges();\n        // Layer mask\n        serializationObject.layerMask = this.layerMask;\n        // Alpha\n        serializationObject.alphaIndex = this.alphaIndex;\n        serializationObject.hasVertexAlpha = this.hasVertexAlpha;\n        // Overlay\n        serializationObject.overlayAlpha = this.overlayAlpha;\n        serializationObject.overlayColor = this.overlayColor.asArray();\n        serializationObject.renderOverlay = this.renderOverlay;\n        // Fog\n        serializationObject.applyFog = this.applyFog;\n        // Action Manager\n        if (this.actionManager) {\n            serializationObject.actions = this.actionManager.serialize(this.name);\n        }\n        return serializationObject;\n    }\n    /** @internal */\n    _syncGeometryWithMorphTargetManager() {\n        if (!this.geometry) {\n            return;\n        }\n        this._markSubMeshesAsAttributesDirty();\n        const morphTargetManager = this._internalAbstractMeshDataInfo._morphTargetManager;\n        if (morphTargetManager && morphTargetManager.vertexCount) {\n            if (morphTargetManager.vertexCount !== this.getTotalVertices()) {\n                Logger.Error(\"Mesh is incompatible with morph targets. Targets and mesh must all have the same vertices count.\");\n                this.morphTargetManager = null;\n                return;\n            }\n            if (morphTargetManager.isUsingTextureForTargets) {\n                return;\n            }\n            for (let index = 0; index < morphTargetManager.numInfluencers; index++) {\n                const morphTarget = morphTargetManager.getActiveTarget(index);\n                const positions = morphTarget.getPositions();\n                if (!positions) {\n                    Logger.Error(\"Invalid morph target. Target must have positions.\");\n                    return;\n                }\n                this.geometry.setVerticesData(VertexBuffer.PositionKind + index, positions, false, 3);\n                const normals = morphTarget.getNormals();\n                if (normals) {\n                    this.geometry.setVerticesData(VertexBuffer.NormalKind + index, normals, false, 3);\n                }\n                const tangents = morphTarget.getTangents();\n                if (tangents) {\n                    this.geometry.setVerticesData(VertexBuffer.TangentKind + index, tangents, false, 3);\n                }\n                const uvs = morphTarget.getUVs();\n                if (uvs) {\n                    this.geometry.setVerticesData(VertexBuffer.UVKind + \"_\" + index, uvs, false, 2);\n                }\n            }\n        }\n        else {\n            let index = 0;\n            // Positions\n            while (this.geometry.isVerticesDataPresent(VertexBuffer.PositionKind + index)) {\n                this.geometry.removeVerticesData(VertexBuffer.PositionKind + index);\n                if (this.geometry.isVerticesDataPresent(VertexBuffer.NormalKind + index)) {\n                    this.geometry.removeVerticesData(VertexBuffer.NormalKind + index);\n                }\n                if (this.geometry.isVerticesDataPresent(VertexBuffer.TangentKind + index)) {\n                    this.geometry.removeVerticesData(VertexBuffer.TangentKind + index);\n                }\n                if (this.geometry.isVerticesDataPresent(VertexBuffer.UVKind + index)) {\n                    this.geometry.removeVerticesData(VertexBuffer.UVKind + \"_\" + index);\n                }\n                index++;\n            }\n        }\n    }\n    /**\n     * Returns a new Mesh object parsed from the source provided.\n     * @param parsedMesh is the source\n     * @param scene defines the hosting scene\n     * @param rootUrl is the root URL to prefix the `delayLoadingFile` property with\n     * @returns a new Mesh\n     */\n    static Parse(parsedMesh, scene, rootUrl) {\n        let mesh;\n        if (parsedMesh.type && parsedMesh.type === \"LinesMesh\") {\n            mesh = Mesh._LinesMeshParser(parsedMesh, scene);\n        }\n        else if (parsedMesh.type && parsedMesh.type === \"GroundMesh\") {\n            mesh = Mesh._GroundMeshParser(parsedMesh, scene);\n        }\n        else if (parsedMesh.type && parsedMesh.type === \"GoldbergMesh\") {\n            mesh = Mesh._GoldbergMeshParser(parsedMesh, scene);\n        }\n        else {\n            mesh = new Mesh(parsedMesh.name, scene);\n        }\n        mesh.id = parsedMesh.id;\n        mesh._waitingParsedUniqueId = parsedMesh.uniqueId;\n        if (Tags) {\n            Tags.AddTagsTo(mesh, parsedMesh.tags);\n        }\n        mesh.position = Vector3.FromArray(parsedMesh.position);\n        if (parsedMesh.metadata !== undefined) {\n            mesh.metadata = parsedMesh.metadata;\n        }\n        if (parsedMesh.rotationQuaternion) {\n            mesh.rotationQuaternion = Quaternion.FromArray(parsedMesh.rotationQuaternion);\n        }\n        else if (parsedMesh.rotation) {\n            mesh.rotation = Vector3.FromArray(parsedMesh.rotation);\n        }\n        mesh.scaling = Vector3.FromArray(parsedMesh.scaling);\n        if (parsedMesh.localMatrix) {\n            mesh.setPreTransformMatrix(Matrix.FromArray(parsedMesh.localMatrix));\n        }\n        else if (parsedMesh.pivotMatrix) {\n            mesh.setPivotMatrix(Matrix.FromArray(parsedMesh.pivotMatrix));\n        }\n        mesh.setEnabled(parsedMesh.isEnabled);\n        mesh.isVisible = parsedMesh.isVisible;\n        mesh.infiniteDistance = parsedMesh.infiniteDistance;\n        mesh.showBoundingBox = parsedMesh.showBoundingBox;\n        mesh.showSubMeshesBoundingBox = parsedMesh.showSubMeshesBoundingBox;\n        if (parsedMesh.applyFog !== undefined) {\n            mesh.applyFog = parsedMesh.applyFog;\n        }\n        if (parsedMesh.pickable !== undefined) {\n            mesh.isPickable = parsedMesh.pickable;\n        }\n        if (parsedMesh.alphaIndex !== undefined) {\n            mesh.alphaIndex = parsedMesh.alphaIndex;\n        }\n        mesh.receiveShadows = parsedMesh.receiveShadows;\n        if (parsedMesh.billboardMode !== undefined) {\n            mesh.billboardMode = parsedMesh.billboardMode;\n        }\n        if (parsedMesh.visibility !== undefined) {\n            mesh.visibility = parsedMesh.visibility;\n        }\n        mesh.checkCollisions = parsedMesh.checkCollisions;\n        mesh.overrideMaterialSideOrientation = parsedMesh.overrideMaterialSideOrientation;\n        if (parsedMesh.isBlocker !== undefined) {\n            mesh.isBlocker = parsedMesh.isBlocker;\n        }\n        mesh._shouldGenerateFlatShading = parsedMesh.useFlatShading;\n        // freezeWorldMatrix\n        if (parsedMesh.freezeWorldMatrix) {\n            mesh._waitingData.freezeWorldMatrix = parsedMesh.freezeWorldMatrix;\n        }\n        // Parent\n        if (parsedMesh.parentId !== undefined) {\n            mesh._waitingParentId = parsedMesh.parentId;\n        }\n        if (parsedMesh.parentInstanceIndex !== undefined) {\n            mesh._waitingParentInstanceIndex = parsedMesh.parentInstanceIndex;\n        }\n        // Actions\n        if (parsedMesh.actions !== undefined) {\n            mesh._waitingData.actions = parsedMesh.actions;\n        }\n        // Overlay\n        if (parsedMesh.overlayAlpha !== undefined) {\n            mesh.overlayAlpha = parsedMesh.overlayAlpha;\n        }\n        if (parsedMesh.overlayColor !== undefined) {\n            mesh.overlayColor = Color3.FromArray(parsedMesh.overlayColor);\n        }\n        if (parsedMesh.renderOverlay !== undefined) {\n            mesh.renderOverlay = parsedMesh.renderOverlay;\n        }\n        // Geometry\n        mesh.isUnIndexed = !!parsedMesh.isUnIndexed;\n        mesh.hasVertexAlpha = parsedMesh.hasVertexAlpha;\n        if (parsedMesh.delayLoadingFile) {\n            mesh.delayLoadState = 4;\n            mesh.delayLoadingFile = rootUrl + parsedMesh.delayLoadingFile;\n            mesh.buildBoundingInfo(Vector3.FromArray(parsedMesh.boundingBoxMinimum), Vector3.FromArray(parsedMesh.boundingBoxMaximum));\n            if (parsedMesh._binaryInfo) {\n                mesh._binaryInfo = parsedMesh._binaryInfo;\n            }\n            mesh._delayInfo = [];\n            if (parsedMesh.hasUVs) {\n                mesh._delayInfo.push(VertexBuffer.UVKind);\n            }\n            if (parsedMesh.hasUVs2) {\n                mesh._delayInfo.push(VertexBuffer.UV2Kind);\n            }\n            if (parsedMesh.hasUVs3) {\n                mesh._delayInfo.push(VertexBuffer.UV3Kind);\n            }\n            if (parsedMesh.hasUVs4) {\n                mesh._delayInfo.push(VertexBuffer.UV4Kind);\n            }\n            if (parsedMesh.hasUVs5) {\n                mesh._delayInfo.push(VertexBuffer.UV5Kind);\n            }\n            if (parsedMesh.hasUVs6) {\n                mesh._delayInfo.push(VertexBuffer.UV6Kind);\n            }\n            if (parsedMesh.hasColors) {\n                mesh._delayInfo.push(VertexBuffer.ColorKind);\n            }\n            if (parsedMesh.hasMatricesIndices) {\n                mesh._delayInfo.push(VertexBuffer.MatricesIndicesKind);\n            }\n            if (parsedMesh.hasMatricesWeights) {\n                mesh._delayInfo.push(VertexBuffer.MatricesWeightsKind);\n            }\n            mesh._delayLoadingFunction = Geometry._ImportGeometry;\n            if (SceneLoaderFlags.ForceFullSceneLoadingForIncremental) {\n                mesh._checkDelayState();\n            }\n        }\n        else {\n            Geometry._ImportGeometry(parsedMesh, mesh);\n        }\n        // Material\n        if (parsedMesh.materialUniqueId) {\n            mesh._waitingMaterialId = parsedMesh.materialUniqueId;\n        }\n        else if (parsedMesh.materialId) {\n            mesh._waitingMaterialId = parsedMesh.materialId;\n        }\n        // Morph targets\n        if (parsedMesh.morphTargetManagerId > -1) {\n            mesh.morphTargetManager = scene.getMorphTargetManagerById(parsedMesh.morphTargetManagerId);\n        }\n        // Skeleton\n        if (parsedMesh.skeletonId !== undefined && parsedMesh.skeletonId !== null) {\n            mesh.skeleton = scene.getLastSkeletonById(parsedMesh.skeletonId);\n            if (parsedMesh.numBoneInfluencers) {\n                mesh.numBoneInfluencers = parsedMesh.numBoneInfluencers;\n            }\n        }\n        // Animations\n        if (parsedMesh.animations) {\n            for (let animationIndex = 0; animationIndex < parsedMesh.animations.length; animationIndex++) {\n                const parsedAnimation = parsedMesh.animations[animationIndex];\n                const internalClass = GetClass(\"BABYLON.Animation\");\n                if (internalClass) {\n                    mesh.animations.push(internalClass.Parse(parsedAnimation));\n                }\n            }\n            Node.ParseAnimationRanges(mesh, parsedMesh, scene);\n        }\n        if (parsedMesh.autoAnimate) {\n            scene.beginAnimation(mesh, parsedMesh.autoAnimateFrom, parsedMesh.autoAnimateTo, parsedMesh.autoAnimateLoop, parsedMesh.autoAnimateSpeed || 1.0);\n        }\n        // Layer Mask\n        if (parsedMesh.layerMask && !isNaN(parsedMesh.layerMask)) {\n            mesh.layerMask = Math.abs(parseInt(parsedMesh.layerMask));\n        }\n        else {\n            mesh.layerMask = 0x0fffffff;\n        }\n        // Physics\n        if (parsedMesh.physicsImpostor) {\n            Mesh._PhysicsImpostorParser(scene, mesh, parsedMesh);\n        }\n        // Levels\n        if (parsedMesh.lodMeshIds) {\n            mesh._waitingData.lods = {\n                ids: parsedMesh.lodMeshIds,\n                distances: parsedMesh.lodDistances ? parsedMesh.lodDistances : null,\n                coverages: parsedMesh.lodCoverages ? parsedMesh.lodCoverages : null\n            };\n        }\n        // Instances\n        if (parsedMesh.instances) {\n            for (let index = 0; index < parsedMesh.instances.length; index++) {\n                const parsedInstance = parsedMesh.instances[index];\n                const instance = mesh.createInstance(parsedInstance.name);\n                if (parsedInstance.id) {\n                    instance.id = parsedInstance.id;\n                }\n                if (Tags) {\n                    if (parsedInstance.tags) {\n                        Tags.AddTagsTo(instance, parsedInstance.tags);\n                    }\n                    else {\n                        Tags.AddTagsTo(instance, parsedMesh.tags);\n                    }\n                }\n                instance.position = Vector3.FromArray(parsedInstance.position);\n                if (parsedInstance.metadata !== undefined) {\n                    instance.metadata = parsedInstance.metadata;\n                }\n                if (parsedInstance.parentId !== undefined) {\n                    instance._waitingParentId = parsedInstance.parentId;\n                }\n                if (parsedInstance.parentInstanceIndex !== undefined) {\n                    instance._waitingParentInstanceIndex = parsedInstance.parentInstanceIndex;\n                }\n                if (parsedInstance.isEnabled !== undefined && parsedInstance.isEnabled !== null) {\n                    instance.setEnabled(parsedInstance.isEnabled);\n                }\n                if (parsedInstance.isVisible !== undefined && parsedInstance.isVisible !== null) {\n                    instance.isVisible = parsedInstance.isVisible;\n                }\n                if (parsedInstance.isPickable !== undefined && parsedInstance.isPickable !== null) {\n                    instance.isPickable = parsedInstance.isPickable;\n                }\n                if (parsedInstance.rotationQuaternion) {\n                    instance.rotationQuaternion = Quaternion.FromArray(parsedInstance.rotationQuaternion);\n                }\n                else if (parsedInstance.rotation) {\n                    instance.rotation = Vector3.FromArray(parsedInstance.rotation);\n                }\n                instance.scaling = Vector3.FromArray(parsedInstance.scaling);\n                if (parsedInstance.checkCollisions != undefined && parsedInstance.checkCollisions != null) {\n                    instance.checkCollisions = parsedInstance.checkCollisions;\n                }\n                if (parsedInstance.pickable != undefined && parsedInstance.pickable != null) {\n                    instance.isPickable = parsedInstance.pickable;\n                }\n                if (parsedInstance.showBoundingBox != undefined && parsedInstance.showBoundingBox != null) {\n                    instance.showBoundingBox = parsedInstance.showBoundingBox;\n                }\n                if (parsedInstance.showSubMeshesBoundingBox != undefined && parsedInstance.showSubMeshesBoundingBox != null) {\n                    instance.showSubMeshesBoundingBox = parsedInstance.showSubMeshesBoundingBox;\n                }\n                if (parsedInstance.alphaIndex != undefined && parsedInstance.showSubMeshesBoundingBox != null) {\n                    instance.alphaIndex = parsedInstance.alphaIndex;\n                }\n                // Physics\n                if (parsedInstance.physicsImpostor) {\n                    Mesh._PhysicsImpostorParser(scene, instance, parsedInstance);\n                }\n                // Actions\n                if (parsedInstance.actions !== undefined) {\n                    instance._waitingData.actions = parsedInstance.actions;\n                }\n                // Animation\n                if (parsedInstance.animations) {\n                    for (let animationIndex = 0; animationIndex < parsedInstance.animations.length; animationIndex++) {\n                        const parsedAnimation = parsedInstance.animations[animationIndex];\n                        const internalClass = GetClass(\"BABYLON.Animation\");\n                        if (internalClass) {\n                            instance.animations.push(internalClass.Parse(parsedAnimation));\n                        }\n                    }\n                    Node.ParseAnimationRanges(instance, parsedInstance, scene);\n                    if (parsedInstance.autoAnimate) {\n                        scene.beginAnimation(instance, parsedInstance.autoAnimateFrom, parsedInstance.autoAnimateTo, parsedInstance.autoAnimateLoop, parsedInstance.autoAnimateSpeed || 1.0);\n                    }\n                }\n            }\n        }\n        // Thin instances\n        if (parsedMesh.thinInstances) {\n            const thinInstances = parsedMesh.thinInstances;\n            mesh.thinInstanceEnablePicking = !!thinInstances.enablePicking;\n            if (thinInstances.matrixData) {\n                mesh.thinInstanceSetBuffer(\"matrix\", new Float32Array(thinInstances.matrixData), 16, false);\n                mesh._thinInstanceDataStorage.matrixBufferSize = thinInstances.matrixBufferSize;\n                mesh._thinInstanceDataStorage.instancesCount = thinInstances.instancesCount;\n            }\n            else {\n                mesh._thinInstanceDataStorage.matrixBufferSize = thinInstances.matrixBufferSize;\n            }\n            if (parsedMesh.thinInstances.userThinInstance) {\n                const userThinInstance = parsedMesh.thinInstances.userThinInstance;\n                for (const kind in userThinInstance.data) {\n                    mesh.thinInstanceSetBuffer(kind, new Float32Array(userThinInstance.data[kind]), userThinInstance.strides[kind], false);\n                    mesh._userThinInstanceBuffersStorage.sizes[kind] = userThinInstance.sizes[kind];\n                }\n            }\n        }\n        return mesh;\n    }\n    // Skeletons\n    /**\n     * Prepare internal position array for software CPU skinning\n     * @returns original positions used for CPU skinning. Useful for integrating Morphing with skeletons in same mesh\n     */\n    setPositionsForCPUSkinning() {\n        const internalDataInfo = this._internalMeshDataInfo;\n        if (!internalDataInfo._sourcePositions) {\n            const source = this.getVerticesData(VertexBuffer.PositionKind);\n            if (!source) {\n                return internalDataInfo._sourcePositions;\n            }\n            internalDataInfo._sourcePositions = new Float32Array(source);\n            if (!this.isVertexBufferUpdatable(VertexBuffer.PositionKind)) {\n                this.setVerticesData(VertexBuffer.PositionKind, source, true);\n            }\n        }\n        return internalDataInfo._sourcePositions;\n    }\n    /**\n     * Prepare internal normal array for software CPU skinning\n     * @returns original normals used for CPU skinning. Useful for integrating Morphing with skeletons in same mesh.\n     */\n    setNormalsForCPUSkinning() {\n        const internalDataInfo = this._internalMeshDataInfo;\n        if (!internalDataInfo._sourceNormals) {\n            const source = this.getVerticesData(VertexBuffer.NormalKind);\n            if (!source) {\n                return internalDataInfo._sourceNormals;\n            }\n            internalDataInfo._sourceNormals = new Float32Array(source);\n            if (!this.isVertexBufferUpdatable(VertexBuffer.NormalKind)) {\n                this.setVerticesData(VertexBuffer.NormalKind, source, true);\n            }\n        }\n        return internalDataInfo._sourceNormals;\n    }\n    /**\n     * Updates the vertex buffer by applying transformation from the bones\n     * @param skeleton defines the skeleton to apply to current mesh\n     * @returns the current mesh\n     */\n    applySkeleton(skeleton) {\n        if (!this.geometry) {\n            return this;\n        }\n        if (this.geometry._softwareSkinningFrameId == this.getScene().getFrameId()) {\n            return this;\n        }\n        this.geometry._softwareSkinningFrameId = this.getScene().getFrameId();\n        if (!this.isVerticesDataPresent(VertexBuffer.PositionKind)) {\n            return this;\n        }\n        if (!this.isVerticesDataPresent(VertexBuffer.MatricesIndicesKind)) {\n            return this;\n        }\n        if (!this.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind)) {\n            return this;\n        }\n        const hasNormals = this.isVerticesDataPresent(VertexBuffer.NormalKind);\n        const internalDataInfo = this._internalMeshDataInfo;\n        if (!internalDataInfo._sourcePositions) {\n            const submeshes = this.subMeshes.slice();\n            this.setPositionsForCPUSkinning();\n            this.subMeshes = submeshes;\n        }\n        if (hasNormals && !internalDataInfo._sourceNormals) {\n            this.setNormalsForCPUSkinning();\n        }\n        // positionsData checks for not being Float32Array will only pass at most once\n        let positionsData = this.getVerticesData(VertexBuffer.PositionKind);\n        if (!positionsData) {\n            return this;\n        }\n        if (!(positionsData instanceof Float32Array)) {\n            positionsData = new Float32Array(positionsData);\n        }\n        // normalsData checks for not being Float32Array will only pass at most once\n        let normalsData = this.getVerticesData(VertexBuffer.NormalKind);\n        if (hasNormals) {\n            if (!normalsData) {\n                return this;\n            }\n            if (!(normalsData instanceof Float32Array)) {\n                normalsData = new Float32Array(normalsData);\n            }\n        }\n        const matricesIndicesData = this.getVerticesData(VertexBuffer.MatricesIndicesKind);\n        const matricesWeightsData = this.getVerticesData(VertexBuffer.MatricesWeightsKind);\n        if (!matricesWeightsData || !matricesIndicesData) {\n            return this;\n        }\n        const needExtras = this.numBoneInfluencers > 4;\n        const matricesIndicesExtraData = needExtras ? this.getVerticesData(VertexBuffer.MatricesIndicesExtraKind) : null;\n        const matricesWeightsExtraData = needExtras ? this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind) : null;\n        const skeletonMatrices = skeleton.getTransformMatrices(this);\n        const tempVector3 = Vector3.Zero();\n        const finalMatrix = new Matrix();\n        const tempMatrix = new Matrix();\n        let matWeightIdx = 0;\n        let inf;\n        for (let index = 0; index < positionsData.length; index += 3, matWeightIdx += 4) {\n            let weight;\n            for (inf = 0; inf < 4; inf++) {\n                weight = matricesWeightsData[matWeightIdx + inf];\n                if (weight > 0) {\n                    Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesData[matWeightIdx + inf] * 16), weight, tempMatrix);\n                    finalMatrix.addToSelf(tempMatrix);\n                }\n            }\n            if (needExtras) {\n                for (inf = 0; inf < 4; inf++) {\n                    weight = matricesWeightsExtraData[matWeightIdx + inf];\n                    if (weight > 0) {\n                        Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesExtraData[matWeightIdx + inf] * 16), weight, tempMatrix);\n                        finalMatrix.addToSelf(tempMatrix);\n                    }\n                }\n            }\n            Vector3.TransformCoordinatesFromFloatsToRef(internalDataInfo._sourcePositions[index], internalDataInfo._sourcePositions[index + 1], internalDataInfo._sourcePositions[index + 2], finalMatrix, tempVector3);\n            tempVector3.toArray(positionsData, index);\n            if (hasNormals) {\n                Vector3.TransformNormalFromFloatsToRef(internalDataInfo._sourceNormals[index], internalDataInfo._sourceNormals[index + 1], internalDataInfo._sourceNormals[index + 2], finalMatrix, tempVector3);\n                tempVector3.toArray(normalsData, index);\n            }\n            finalMatrix.reset();\n        }\n        this.updateVerticesData(VertexBuffer.PositionKind, positionsData);\n        if (hasNormals) {\n            this.updateVerticesData(VertexBuffer.NormalKind, normalsData);\n        }\n        return this;\n    }\n    // Tools\n    /**\n     * Returns an object containing a min and max Vector3 which are the minimum and maximum vectors of each mesh bounding box from the passed array, in the world coordinates\n     * @param meshes defines the list of meshes to scan\n     * @returns an object `{min:` Vector3`, max:` Vector3`}`\n     */\n    static MinMax(meshes) {\n        let minVector = null;\n        let maxVector = null;\n        meshes.forEach(function (mesh) {\n            const boundingInfo = mesh.getBoundingInfo();\n            const boundingBox = boundingInfo.boundingBox;\n            if (!minVector || !maxVector) {\n                minVector = boundingBox.minimumWorld;\n                maxVector = boundingBox.maximumWorld;\n            }\n            else {\n                minVector.minimizeInPlace(boundingBox.minimumWorld);\n                maxVector.maximizeInPlace(boundingBox.maximumWorld);\n            }\n        });\n        if (!minVector || !maxVector) {\n            return {\n                min: Vector3.Zero(),\n                max: Vector3.Zero()\n            };\n        }\n        return {\n            min: minVector,\n            max: maxVector\n        };\n    }\n    /**\n     * Returns the center of the `{min:` Vector3`, max:` Vector3`}` or the center of MinMax vector3 computed from a mesh array\n     * @param meshesOrMinMaxVector could be an array of meshes or a `{min:` Vector3`, max:` Vector3`}` object\n     * @returns a vector3\n     */\n    static Center(meshesOrMinMaxVector) {\n        const minMaxVector = meshesOrMinMaxVector instanceof Array ? Mesh.MinMax(meshesOrMinMaxVector) : meshesOrMinMaxVector;\n        return Vector3.Center(minMaxVector.min, minMaxVector.max);\n    }\n    /**\n     * Merge the array of meshes into a single mesh for performance reasons.\n     * @param meshes array of meshes with the vertices to merge. Entries cannot be empty meshes.\n     * @param disposeSource when true (default), dispose of the vertices from the source meshes.\n     * @param allow32BitsIndices when the sum of the vertices > 64k, this must be set to true.\n     * @param meshSubclass (optional) can be set to a Mesh where the merged vertices will be inserted.\n     * @param subdivideWithSubMeshes when true (false default), subdivide mesh into subMeshes.\n     * @param multiMultiMaterials when true (false default), subdivide mesh into subMeshes with multiple materials, ignores subdivideWithSubMeshes.\n     * @returns a new mesh\n     */\n    static MergeMeshes(meshes, disposeSource = true, allow32BitsIndices, meshSubclass, subdivideWithSubMeshes, multiMultiMaterials) {\n        return runCoroutineSync(Mesh._MergeMeshesCoroutine(meshes, disposeSource, allow32BitsIndices, meshSubclass, subdivideWithSubMeshes, multiMultiMaterials, false));\n    }\n    /**\n     * Merge the array of meshes into a single mesh for performance reasons.\n     * @param meshes array of meshes with the vertices to merge. Entries cannot be empty meshes.\n     * @param disposeSource when true (default), dispose of the vertices from the source meshes.\n     * @param allow32BitsIndices when the sum of the vertices > 64k, this must be set to true.\n     * @param meshSubclass (optional) can be set to a Mesh where the merged vertices will be inserted.\n     * @param subdivideWithSubMeshes when true (false default), subdivide mesh into subMeshes.\n     * @param multiMultiMaterials when true (false default), subdivide mesh into subMeshes with multiple materials, ignores subdivideWithSubMeshes.\n     * @returns a new mesh\n     */\n    static MergeMeshesAsync(meshes, disposeSource = true, allow32BitsIndices, meshSubclass, subdivideWithSubMeshes, multiMultiMaterials) {\n        return runCoroutineAsync(Mesh._MergeMeshesCoroutine(meshes, disposeSource, allow32BitsIndices, meshSubclass, subdivideWithSubMeshes, multiMultiMaterials, true), createYieldingScheduler());\n    }\n    static *_MergeMeshesCoroutine(meshes, disposeSource = true, allow32BitsIndices, meshSubclass, subdivideWithSubMeshes, multiMultiMaterials, isAsync) {\n        // Remove any null/undefined entries from the mesh array\n        meshes = meshes.filter(Boolean);\n        if (meshes.length === 0) {\n            return null;\n        }\n        let index;\n        if (!allow32BitsIndices) {\n            let totalVertices = 0;\n            // Counting vertices\n            for (index = 0; index < meshes.length; index++) {\n                totalVertices += meshes[index].getTotalVertices();\n                if (totalVertices >= 65536) {\n                    Logger.Warn(\"Cannot merge meshes because resulting mesh will have more than 65536 vertices. Please use allow32BitsIndices = true to use 32 bits indices\");\n                    return null;\n                }\n            }\n        }\n        if (multiMultiMaterials) {\n            subdivideWithSubMeshes = false;\n        }\n        const materialArray = new Array();\n        const materialIndexArray = new Array();\n        // Merge\n        const indiceArray = new Array();\n        const currentOverrideMaterialSideOrientation = meshes[0].overrideMaterialSideOrientation;\n        for (index = 0; index < meshes.length; index++) {\n            const mesh = meshes[index];\n            if (mesh.isAnInstance) {\n                Logger.Warn(\"Cannot merge instance meshes.\");\n                return null;\n            }\n            if (currentOverrideMaterialSideOrientation !== mesh.overrideMaterialSideOrientation) {\n                Logger.Warn(\"Cannot merge meshes with different overrideMaterialSideOrientation values.\");\n                return null;\n            }\n            if (subdivideWithSubMeshes) {\n                indiceArray.push(mesh.getTotalIndices());\n            }\n            if (multiMultiMaterials) {\n                if (mesh.material) {\n                    const material = mesh.material;\n                    if (material instanceof MultiMaterial) {\n                        for (let matIndex = 0; matIndex < material.subMaterials.length; matIndex++) {\n                            if (materialArray.indexOf(material.subMaterials[matIndex]) < 0) {\n                                materialArray.push(material.subMaterials[matIndex]);\n                            }\n                        }\n                        for (let subIndex = 0; subIndex < mesh.subMeshes.length; subIndex++) {\n                            materialIndexArray.push(materialArray.indexOf(material.subMaterials[mesh.subMeshes[subIndex].materialIndex]));\n                            indiceArray.push(mesh.subMeshes[subIndex].indexCount);\n                        }\n                    }\n                    else {\n                        if (materialArray.indexOf(material) < 0) {\n                            materialArray.push(material);\n                        }\n                        for (let subIndex = 0; subIndex < mesh.subMeshes.length; subIndex++) {\n                            materialIndexArray.push(materialArray.indexOf(material));\n                            indiceArray.push(mesh.subMeshes[subIndex].indexCount);\n                        }\n                    }\n                }\n                else {\n                    for (let subIndex = 0; subIndex < mesh.subMeshes.length; subIndex++) {\n                        materialIndexArray.push(0);\n                        indiceArray.push(mesh.subMeshes[subIndex].indexCount);\n                    }\n                }\n            }\n        }\n        const source = meshes[0];\n        const getVertexDataFromMesh = (mesh) => {\n            const wm = mesh.computeWorldMatrix(true);\n            const vertexData = VertexData.ExtractFromMesh(mesh, false, false);\n            return [vertexData, wm];\n        };\n        const [sourceVertexData, sourceTransform] = getVertexDataFromMesh(source);\n        if (isAsync) {\n            yield;\n        }\n        const meshVertexDatas = new Array(meshes.length - 1);\n        for (let i = 1; i < meshes.length; i++) {\n            meshVertexDatas[i - 1] = getVertexDataFromMesh(meshes[i]);\n            if (isAsync) {\n                yield;\n            }\n        }\n        const mergeCoroutine = sourceVertexData._mergeCoroutine(sourceTransform, meshVertexDatas, allow32BitsIndices, isAsync, !disposeSource);\n        let mergeCoroutineStep = mergeCoroutine.next();\n        while (!mergeCoroutineStep.done) {\n            if (isAsync) {\n                yield;\n            }\n            mergeCoroutineStep = mergeCoroutine.next();\n        }\n        const vertexData = mergeCoroutineStep.value;\n        if (!meshSubclass) {\n            meshSubclass = new Mesh(source.name + \"_merged\", source.getScene());\n        }\n        const applyToCoroutine = vertexData._applyToCoroutine(meshSubclass, undefined, isAsync);\n        let applyToCoroutineStep = applyToCoroutine.next();\n        while (!applyToCoroutineStep.done) {\n            if (isAsync) {\n                yield;\n            }\n            applyToCoroutineStep = applyToCoroutine.next();\n        }\n        // Setting properties\n        meshSubclass.checkCollisions = source.checkCollisions;\n        meshSubclass.overrideMaterialSideOrientation = source.overrideMaterialSideOrientation;\n        // Cleaning\n        if (disposeSource) {\n            for (index = 0; index < meshes.length; index++) {\n                meshes[index].dispose();\n            }\n        }\n        // Subdivide\n        if (subdivideWithSubMeshes || multiMultiMaterials) {\n            //-- removal of global submesh\n            meshSubclass.releaseSubMeshes();\n            index = 0;\n            let offset = 0;\n            //-- apply subdivision according to index table\n            while (index < indiceArray.length) {\n                SubMesh.CreateFromIndices(0, offset, indiceArray[index], meshSubclass, undefined, false);\n                offset += indiceArray[index];\n                index++;\n            }\n            for (const subMesh of meshSubclass.subMeshes) {\n                subMesh.refreshBoundingInfo();\n            }\n            meshSubclass.computeWorldMatrix(true);\n        }\n        if (multiMultiMaterials) {\n            const newMultiMaterial = new MultiMaterial(source.name + \"_merged\", source.getScene());\n            newMultiMaterial.subMaterials = materialArray;\n            for (let subIndex = 0; subIndex < meshSubclass.subMeshes.length; subIndex++) {\n                meshSubclass.subMeshes[subIndex].materialIndex = materialIndexArray[subIndex];\n            }\n            meshSubclass.material = newMultiMaterial;\n        }\n        else {\n            meshSubclass.material = source.material;\n        }\n        return meshSubclass;\n    }\n    /**\n     * @internal\n     */\n    addInstance(instance) {\n        instance._indexInSourceMeshInstanceArray = this.instances.length;\n        this.instances.push(instance);\n    }\n    /**\n     * @internal\n     */\n    removeInstance(instance) {\n        // Remove from mesh\n        const index = instance._indexInSourceMeshInstanceArray;\n        if (index != -1) {\n            if (index !== this.instances.length - 1) {\n                const last = this.instances[this.instances.length - 1];\n                this.instances[index] = last;\n                last._indexInSourceMeshInstanceArray = index;\n            }\n            instance._indexInSourceMeshInstanceArray = -1;\n            this.instances.pop();\n        }\n    }\n    /** @internal */\n    _shouldConvertRHS() {\n        return this.overrideMaterialSideOrientation === Material.CounterClockWiseSideOrientation;\n    }\n}\n// Consts\n/**\n * Mesh side orientation : usually the external or front surface\n */\nMesh.FRONTSIDE = VertexData.FRONTSIDE;\n/**\n * Mesh side orientation : usually the internal or back surface\n */\nMesh.BACKSIDE = VertexData.BACKSIDE;\n/**\n * Mesh side orientation : both internal and external or front and back surfaces\n */\nMesh.DOUBLESIDE = VertexData.DOUBLESIDE;\n/**\n * Mesh side orientation : by default, `FRONTSIDE`\n */\nMesh.DEFAULTSIDE = VertexData.DEFAULTSIDE;\n/**\n * Mesh cap setting : no cap\n */\nMesh.NO_CAP = 0;\n/**\n * Mesh cap setting : one cap at the beginning of the mesh\n */\nMesh.CAP_START = 1;\n/**\n * Mesh cap setting : one cap at the end of the mesh\n */\nMesh.CAP_END = 2;\n/**\n * Mesh cap setting : two caps, one at the beginning  and one at the end of the mesh\n */\nMesh.CAP_ALL = 3;\n/**\n * Mesh pattern setting : no flip or rotate\n */\nMesh.NO_FLIP = 0;\n/**\n * Mesh pattern setting : flip (reflect in y axis) alternate tiles on each row or column\n */\nMesh.FLIP_TILE = 1;\n/**\n * Mesh pattern setting : rotate (180degs) alternate tiles on each row or column\n */\nMesh.ROTATE_TILE = 2;\n/**\n * Mesh pattern setting : flip (reflect in y axis) all tiles on alternate rows\n */\nMesh.FLIP_ROW = 3;\n/**\n * Mesh pattern setting : rotate (180degs) all tiles on alternate rows\n */\nMesh.ROTATE_ROW = 4;\n/**\n * Mesh pattern setting : flip and rotate alternate tiles on each row or column\n */\nMesh.FLIP_N_ROTATE_TILE = 5;\n/**\n * Mesh pattern setting : rotate pattern and rotate\n */\nMesh.FLIP_N_ROTATE_ROW = 6;\n/**\n * Mesh tile positioning : part tiles same on left/right or top/bottom\n */\nMesh.CENTER = 0;\n/**\n * Mesh tile positioning : part tiles on left\n */\nMesh.LEFT = 1;\n/**\n * Mesh tile positioning : part tiles on right\n */\nMesh.RIGHT = 2;\n/**\n * Mesh tile positioning : part tiles on top\n */\nMesh.TOP = 3;\n/**\n * Mesh tile positioning : part tiles on bottom\n */\nMesh.BOTTOM = 4;\n/**\n * Indicates that the instanced meshes should be sorted from back to front before rendering if their material is transparent\n */\nMesh.INSTANCEDMESH_SORT_TRANSPARENT = false;\n// Statics\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nMesh._GroundMeshParser = (parsedMesh, scene) => {\n    throw _WarnImport(\"GroundMesh\");\n};\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nMesh._GoldbergMeshParser = (parsedMesh, scene) => {\n    throw _WarnImport(\"GoldbergMesh\");\n};\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nMesh._LinesMeshParser = (parsedMesh, scene) => {\n    throw _WarnImport(\"LinesMesh\");\n};\nRegisterClass(\"BABYLON.Mesh\", Mesh);\n/**\n * @internal\n */\nMesh.prototype.setMaterialByID = function (id) {\n    return this.setMaterialById(id);\n};\nMesh.CreateDisc =\n    Mesh.CreateDisc ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.CreateBox =\n    Mesh.CreateBox ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.CreateSphere =\n    Mesh.CreateSphere ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.CreateCylinder =\n    Mesh.CreateCylinder ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.CreateTorusKnot =\n    Mesh.CreateTorusKnot ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.CreateTorus =\n    Mesh.CreateTorus ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.CreatePlane =\n    Mesh.CreatePlane ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.CreateGround =\n    Mesh.CreateGround ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.CreateTiledGround =\n    Mesh.CreateTiledGround ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.CreateGroundFromHeightMap =\n    Mesh.CreateGroundFromHeightMap ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.CreateTube =\n    Mesh.CreateTube ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.CreatePolyhedron =\n    Mesh.CreatePolyhedron ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.CreateIcoSphere =\n    Mesh.CreateIcoSphere ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.CreateDecal =\n    Mesh.CreateDecal ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.CreateCapsule =\n    Mesh.CreateCapsule ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.ExtendToGoldberg =\n    Mesh.ExtendToGoldberg ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\n//# sourceMappingURL=mesh.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { Vector3, Vector4, TmpVectors } from \"../Maths/math.vector.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { _WarnImport } from \"../Misc/devTools.js\";\nimport { Color4 } from \"../Maths/math.color.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { nativeOverride } from \"../Misc/decorators.js\";\nimport { makeSyncFunction, runCoroutineSync } from \"../Misc/coroutine.js\";\nimport { RuntimeError, ErrorCodes } from \"../Misc/error.js\";\n/**\n * This class contains the various kinds of data on every vertex of a mesh used in determining its shape and appearance\n */\nexport class VertexData {\n    constructor() {\n        this._applyTo = makeSyncFunction(this._applyToCoroutine.bind(this));\n    }\n    /**\n     * Uses the passed data array to set the set the values for the specified kind of data\n     * @param data a linear array of floating numbers\n     * @param kind the type of data that is being set, eg positions, colors etc\n     */\n    set(data, kind) {\n        if (!data.length) {\n            Logger.Warn(`Setting vertex data kind '${kind}' with an empty array`);\n        }\n        switch (kind) {\n            case VertexBuffer.PositionKind:\n                this.positions = data;\n                break;\n            case VertexBuffer.NormalKind:\n                this.normals = data;\n                break;\n            case VertexBuffer.TangentKind:\n                this.tangents = data;\n                break;\n            case VertexBuffer.UVKind:\n                this.uvs = data;\n                break;\n            case VertexBuffer.UV2Kind:\n                this.uvs2 = data;\n                break;\n            case VertexBuffer.UV3Kind:\n                this.uvs3 = data;\n                break;\n            case VertexBuffer.UV4Kind:\n                this.uvs4 = data;\n                break;\n            case VertexBuffer.UV5Kind:\n                this.uvs5 = data;\n                break;\n            case VertexBuffer.UV6Kind:\n                this.uvs6 = data;\n                break;\n            case VertexBuffer.ColorKind:\n                this.colors = data;\n                break;\n            case VertexBuffer.MatricesIndicesKind:\n                this.matricesIndices = data;\n                break;\n            case VertexBuffer.MatricesWeightsKind:\n                this.matricesWeights = data;\n                break;\n            case VertexBuffer.MatricesIndicesExtraKind:\n                this.matricesIndicesExtra = data;\n                break;\n            case VertexBuffer.MatricesWeightsExtraKind:\n                this.matricesWeightsExtra = data;\n                break;\n        }\n    }\n    /**\n     * Associates the vertexData to the passed Mesh.\n     * Sets it as updatable or not (default `false`)\n     * @param mesh the mesh the vertexData is applied to\n     * @param updatable when used and having the value true allows new data to update the vertexData\n     * @returns the VertexData\n     */\n    applyToMesh(mesh, updatable) {\n        this._applyTo(mesh, updatable, false);\n        return this;\n    }\n    /**\n     * Associates the vertexData to the passed Geometry.\n     * Sets it as updatable or not (default `false`)\n     * @param geometry the geometry the vertexData is applied to\n     * @param updatable when used and having the value true allows new data to update the vertexData\n     * @returns VertexData\n     */\n    applyToGeometry(geometry, updatable) {\n        this._applyTo(geometry, updatable, false);\n        return this;\n    }\n    /**\n     * Updates the associated mesh\n     * @param mesh the mesh to be updated\n     * @returns VertexData\n     */\n    updateMesh(mesh) {\n        this._update(mesh);\n        return this;\n    }\n    /**\n     * Updates the associated geometry\n     * @param geometry the geometry to be updated\n     * @returns VertexData.\n     */\n    updateGeometry(geometry) {\n        this._update(geometry);\n        return this;\n    }\n    /**\n     * @internal\n     */\n    *_applyToCoroutine(meshOrGeometry, updatable = false, isAsync) {\n        if (this.positions) {\n            meshOrGeometry.setVerticesData(VertexBuffer.PositionKind, this.positions, updatable);\n            if (isAsync) {\n                yield;\n            }\n        }\n        if (this.normals) {\n            meshOrGeometry.setVerticesData(VertexBuffer.NormalKind, this.normals, updatable);\n            if (isAsync) {\n                yield;\n            }\n        }\n        if (this.tangents) {\n            meshOrGeometry.setVerticesData(VertexBuffer.TangentKind, this.tangents, updatable);\n            if (isAsync) {\n                yield;\n            }\n        }\n        if (this.uvs) {\n            meshOrGeometry.setVerticesData(VertexBuffer.UVKind, this.uvs, updatable);\n            if (isAsync) {\n                yield;\n            }\n        }\n        if (this.uvs2) {\n            meshOrGeometry.setVerticesData(VertexBuffer.UV2Kind, this.uvs2, updatable);\n            if (isAsync) {\n                yield;\n            }\n        }\n        if (this.uvs3) {\n            meshOrGeometry.setVerticesData(VertexBuffer.UV3Kind, this.uvs3, updatable);\n            if (isAsync) {\n                yield;\n            }\n        }\n        if (this.uvs4) {\n            meshOrGeometry.setVerticesData(VertexBuffer.UV4Kind, this.uvs4, updatable);\n            if (isAsync) {\n                yield;\n            }\n        }\n        if (this.uvs5) {\n            meshOrGeometry.setVerticesData(VertexBuffer.UV5Kind, this.uvs5, updatable);\n            if (isAsync) {\n                yield;\n            }\n        }\n        if (this.uvs6) {\n            meshOrGeometry.setVerticesData(VertexBuffer.UV6Kind, this.uvs6, updatable);\n            if (isAsync) {\n                yield;\n            }\n        }\n        if (this.colors) {\n            meshOrGeometry.setVerticesData(VertexBuffer.ColorKind, this.colors, updatable);\n            if (isAsync) {\n                yield;\n            }\n        }\n        if (this.matricesIndices) {\n            meshOrGeometry.setVerticesData(VertexBuffer.MatricesIndicesKind, this.matricesIndices, updatable);\n            if (isAsync) {\n                yield;\n            }\n        }\n        if (this.matricesWeights) {\n            meshOrGeometry.setVerticesData(VertexBuffer.MatricesWeightsKind, this.matricesWeights, updatable);\n            if (isAsync) {\n                yield;\n            }\n        }\n        if (this.matricesIndicesExtra) {\n            meshOrGeometry.setVerticesData(VertexBuffer.MatricesIndicesExtraKind, this.matricesIndicesExtra, updatable);\n            if (isAsync) {\n                yield;\n            }\n        }\n        if (this.matricesWeightsExtra) {\n            meshOrGeometry.setVerticesData(VertexBuffer.MatricesWeightsExtraKind, this.matricesWeightsExtra, updatable);\n            if (isAsync) {\n                yield;\n            }\n        }\n        if (this.indices) {\n            meshOrGeometry.setIndices(this.indices, null, updatable);\n            if (isAsync) {\n                yield;\n            }\n        }\n        else {\n            meshOrGeometry.setIndices([], null);\n        }\n        return this;\n    }\n    _update(meshOrGeometry, updateExtends, makeItUnique) {\n        if (this.positions) {\n            meshOrGeometry.updateVerticesData(VertexBuffer.PositionKind, this.positions, updateExtends, makeItUnique);\n        }\n        if (this.normals) {\n            meshOrGeometry.updateVerticesData(VertexBuffer.NormalKind, this.normals, updateExtends, makeItUnique);\n        }\n        if (this.tangents) {\n            meshOrGeometry.updateVerticesData(VertexBuffer.TangentKind, this.tangents, updateExtends, makeItUnique);\n        }\n        if (this.uvs) {\n            meshOrGeometry.updateVerticesData(VertexBuffer.UVKind, this.uvs, updateExtends, makeItUnique);\n        }\n        if (this.uvs2) {\n            meshOrGeometry.updateVerticesData(VertexBuffer.UV2Kind, this.uvs2, updateExtends, makeItUnique);\n        }\n        if (this.uvs3) {\n            meshOrGeometry.updateVerticesData(VertexBuffer.UV3Kind, this.uvs3, updateExtends, makeItUnique);\n        }\n        if (this.uvs4) {\n            meshOrGeometry.updateVerticesData(VertexBuffer.UV4Kind, this.uvs4, updateExtends, makeItUnique);\n        }\n        if (this.uvs5) {\n            meshOrGeometry.updateVerticesData(VertexBuffer.UV5Kind, this.uvs5, updateExtends, makeItUnique);\n        }\n        if (this.uvs6) {\n            meshOrGeometry.updateVerticesData(VertexBuffer.UV6Kind, this.uvs6, updateExtends, makeItUnique);\n        }\n        if (this.colors) {\n            meshOrGeometry.updateVerticesData(VertexBuffer.ColorKind, this.colors, updateExtends, makeItUnique);\n        }\n        if (this.matricesIndices) {\n            meshOrGeometry.updateVerticesData(VertexBuffer.MatricesIndicesKind, this.matricesIndices, updateExtends, makeItUnique);\n        }\n        if (this.matricesWeights) {\n            meshOrGeometry.updateVerticesData(VertexBuffer.MatricesWeightsKind, this.matricesWeights, updateExtends, makeItUnique);\n        }\n        if (this.matricesIndicesExtra) {\n            meshOrGeometry.updateVerticesData(VertexBuffer.MatricesIndicesExtraKind, this.matricesIndicesExtra, updateExtends, makeItUnique);\n        }\n        if (this.matricesWeightsExtra) {\n            meshOrGeometry.updateVerticesData(VertexBuffer.MatricesWeightsExtraKind, this.matricesWeightsExtra, updateExtends, makeItUnique);\n        }\n        if (this.indices) {\n            meshOrGeometry.setIndices(this.indices, null);\n        }\n        return this;\n    }\n    static _TransformVector3Coordinates(coordinates, transformation, offset = 0, length = coordinates.length) {\n        const coordinate = TmpVectors.Vector3[0];\n        const transformedCoordinate = TmpVectors.Vector3[1];\n        for (let index = offset; index < offset + length; index += 3) {\n            Vector3.FromArrayToRef(coordinates, index, coordinate);\n            Vector3.TransformCoordinatesToRef(coordinate, transformation, transformedCoordinate);\n            coordinates[index] = transformedCoordinate.x;\n            coordinates[index + 1] = transformedCoordinate.y;\n            coordinates[index + 2] = transformedCoordinate.z;\n        }\n    }\n    static _TransformVector3Normals(normals, transformation, offset = 0, length = normals.length) {\n        const normal = TmpVectors.Vector3[0];\n        const transformedNormal = TmpVectors.Vector3[1];\n        for (let index = offset; index < offset + length; index += 3) {\n            Vector3.FromArrayToRef(normals, index, normal);\n            Vector3.TransformNormalToRef(normal, transformation, transformedNormal);\n            normals[index] = transformedNormal.x;\n            normals[index + 1] = transformedNormal.y;\n            normals[index + 2] = transformedNormal.z;\n        }\n    }\n    static _TransformVector4Normals(normals, transformation, offset = 0, length = normals.length) {\n        const normal = TmpVectors.Vector4[0];\n        const transformedNormal = TmpVectors.Vector4[1];\n        for (let index = offset; index < offset + length; index += 4) {\n            Vector4.FromArrayToRef(normals, index, normal);\n            Vector4.TransformNormalToRef(normal, transformation, transformedNormal);\n            normals[index] = transformedNormal.x;\n            normals[index + 1] = transformedNormal.y;\n            normals[index + 2] = transformedNormal.z;\n            normals[index + 3] = transformedNormal.w;\n        }\n    }\n    static _FlipFaces(indices, offset = 0, length = indices.length) {\n        for (let index = offset; index < offset + length; index += 3) {\n            const tmp = indices[index + 1];\n            indices[index + 1] = indices[index + 2];\n            indices[index + 2] = tmp;\n        }\n    }\n    /**\n     * Transforms each position and each normal of the vertexData according to the passed Matrix\n     * @param matrix the transforming matrix\n     * @returns the VertexData\n     */\n    transform(matrix) {\n        const flip = matrix.determinant() < 0;\n        if (this.positions) {\n            VertexData._TransformVector3Coordinates(this.positions, matrix);\n        }\n        if (this.normals) {\n            VertexData._TransformVector3Normals(this.normals, matrix);\n        }\n        if (this.tangents) {\n            VertexData._TransformVector4Normals(this.tangents, matrix);\n        }\n        if (flip && this.indices) {\n            VertexData._FlipFaces(this.indices);\n        }\n        return this;\n    }\n    /**\n     * Merges the passed VertexData into the current one\n     * @param others the VertexData to be merged into the current one\n     * @param use32BitsIndices defines a boolean indicating if indices must be store in a 32 bits array\n     * @param forceCloneIndices defines a boolean indicating if indices are forced to be cloned\n     * @returns the modified VertexData\n     */\n    merge(others, use32BitsIndices = false, forceCloneIndices = false) {\n        const vertexDatas = Array.isArray(others) ? others.map((other) => [other, undefined]) : [[others, undefined]];\n        return runCoroutineSync(this._mergeCoroutine(undefined, vertexDatas, use32BitsIndices, false, forceCloneIndices));\n    }\n    /**\n     * @internal\n     */\n    *_mergeCoroutine(transform, vertexDatas, use32BitsIndices = false, isAsync, forceCloneIndices) {\n        var _a, _b, _c, _d;\n        this._validate();\n        const others = vertexDatas.map((vertexData) => vertexData[0]);\n        for (const other of others) {\n            other._validate();\n            if (!this.normals !== !other.normals ||\n                !this.tangents !== !other.tangents ||\n                !this.uvs !== !other.uvs ||\n                !this.uvs2 !== !other.uvs2 ||\n                !this.uvs3 !== !other.uvs3 ||\n                !this.uvs4 !== !other.uvs4 ||\n                !this.uvs5 !== !other.uvs5 ||\n                !this.uvs6 !== !other.uvs6 ||\n                !this.colors !== !other.colors ||\n                !this.matricesIndices !== !other.matricesIndices ||\n                !this.matricesWeights !== !other.matricesWeights ||\n                !this.matricesIndicesExtra !== !other.matricesIndicesExtra ||\n                !this.matricesWeightsExtra !== !other.matricesWeightsExtra) {\n                throw new Error(\"Cannot merge vertex data that do not have the same set of attributes\");\n            }\n        }\n        const totalIndices = others.reduce((indexSum, vertexData) => { var _a, _b; return indexSum + ((_b = (_a = vertexData.indices) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0); }, (_b = (_a = this.indices) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0);\n        const sliceIndices = forceCloneIndices || others.some((vertexData) => vertexData.indices === this.indices);\n        let indices = sliceIndices ? (_c = this.indices) === null || _c === void 0 ? void 0 : _c.slice() : this.indices;\n        if (totalIndices > 0) {\n            let indicesOffset = (_d = indices === null || indices === void 0 ? void 0 : indices.length) !== null && _d !== void 0 ? _d : 0;\n            if (!indices) {\n                indices = new Array(totalIndices);\n            }\n            if (indices.length !== totalIndices) {\n                if (Array.isArray(indices)) {\n                    indices.length = totalIndices;\n                }\n                else {\n                    const temp = use32BitsIndices || indices instanceof Uint32Array ? new Uint32Array(totalIndices) : new Uint16Array(totalIndices);\n                    temp.set(indices);\n                    indices = temp;\n                }\n                if (transform && transform.determinant() < 0) {\n                    VertexData._FlipFaces(indices, 0, indicesOffset);\n                }\n            }\n            let positionsOffset = this.positions ? this.positions.length / 3 : 0;\n            for (const [other, transform] of vertexDatas) {\n                if (other.indices) {\n                    for (let index = 0; index < other.indices.length; index++) {\n                        indices[indicesOffset + index] = other.indices[index] + positionsOffset;\n                    }\n                    if (transform && transform.determinant() < 0) {\n                        VertexData._FlipFaces(indices, indicesOffset, other.indices.length);\n                    }\n                    // The call to _validate already checked for positions\n                    positionsOffset += other.positions.length / 3;\n                    indicesOffset += other.indices.length;\n                    if (isAsync) {\n                        yield;\n                    }\n                }\n            }\n        }\n        this.indices = indices;\n        this.positions = VertexData._MergeElement(VertexBuffer.PositionKind, this.positions, transform, vertexDatas.map((other) => [other[0].positions, other[1]]));\n        if (isAsync) {\n            yield;\n        }\n        this.normals = VertexData._MergeElement(VertexBuffer.NormalKind, this.normals, transform, vertexDatas.map((other) => [other[0].normals, other[1]]));\n        if (isAsync) {\n            yield;\n        }\n        this.tangents = VertexData._MergeElement(VertexBuffer.TangentKind, this.tangents, transform, vertexDatas.map((other) => [other[0].tangents, other[1]]));\n        if (isAsync) {\n            yield;\n        }\n        this.uvs = VertexData._MergeElement(VertexBuffer.UVKind, this.uvs, transform, vertexDatas.map((other) => [other[0].uvs, other[1]]));\n        if (isAsync) {\n            yield;\n        }\n        this.uvs2 = VertexData._MergeElement(VertexBuffer.UV2Kind, this.uvs2, transform, vertexDatas.map((other) => [other[0].uvs2, other[1]]));\n        if (isAsync) {\n            yield;\n        }\n        this.uvs3 = VertexData._MergeElement(VertexBuffer.UV3Kind, this.uvs3, transform, vertexDatas.map((other) => [other[0].uvs3, other[1]]));\n        if (isAsync) {\n            yield;\n        }\n        this.uvs4 = VertexData._MergeElement(VertexBuffer.UV4Kind, this.uvs4, transform, vertexDatas.map((other) => [other[0].uvs4, other[1]]));\n        if (isAsync) {\n            yield;\n        }\n        this.uvs5 = VertexData._MergeElement(VertexBuffer.UV5Kind, this.uvs5, transform, vertexDatas.map((other) => [other[0].uvs5, other[1]]));\n        if (isAsync) {\n            yield;\n        }\n        this.uvs6 = VertexData._MergeElement(VertexBuffer.UV6Kind, this.uvs6, transform, vertexDatas.map((other) => [other[0].uvs6, other[1]]));\n        if (isAsync) {\n            yield;\n        }\n        this.colors = VertexData._MergeElement(VertexBuffer.ColorKind, this.colors, transform, vertexDatas.map((other) => [other[0].colors, other[1]]));\n        if (isAsync) {\n            yield;\n        }\n        this.matricesIndices = VertexData._MergeElement(VertexBuffer.MatricesIndicesKind, this.matricesIndices, transform, vertexDatas.map((other) => [other[0].matricesIndices, other[1]]));\n        if (isAsync) {\n            yield;\n        }\n        this.matricesWeights = VertexData._MergeElement(VertexBuffer.MatricesWeightsKind, this.matricesWeights, transform, vertexDatas.map((other) => [other[0].matricesWeights, other[1]]));\n        if (isAsync) {\n            yield;\n        }\n        this.matricesIndicesExtra = VertexData._MergeElement(VertexBuffer.MatricesIndicesExtraKind, this.matricesIndicesExtra, transform, vertexDatas.map((other) => [other[0].matricesIndicesExtra, other[1]]));\n        if (isAsync) {\n            yield;\n        }\n        this.matricesWeightsExtra = VertexData._MergeElement(VertexBuffer.MatricesWeightsExtraKind, this.matricesWeightsExtra, transform, vertexDatas.map((other) => [other[0].matricesWeightsExtra, other[1]]));\n        return this;\n    }\n    static _MergeElement(kind, source, transform, others) {\n        const nonNullOthers = others.filter((other) => other[0] !== null && other[0] !== undefined);\n        // If there is no source to copy and no other non-null sources then skip this element.\n        if (!source && nonNullOthers.length == 0) {\n            return source;\n        }\n        if (!source) {\n            return this._MergeElement(kind, nonNullOthers[0][0], nonNullOthers[0][1], nonNullOthers.slice(1));\n        }\n        const len = nonNullOthers.reduce((sumLen, elements) => sumLen + elements[0].length, source.length);\n        const transformRange = kind === VertexBuffer.PositionKind\n            ? VertexData._TransformVector3Coordinates\n            : kind === VertexBuffer.NormalKind\n                ? VertexData._TransformVector3Normals\n                : kind === VertexBuffer.TangentKind\n                    ? VertexData._TransformVector4Normals\n                    : () => { };\n        if (source instanceof Float32Array) {\n            // use non-loop method when the source is Float32Array\n            const ret32 = new Float32Array(len);\n            ret32.set(source);\n            transform && transformRange(ret32, transform, 0, source.length);\n            let offset = source.length;\n            for (const [vertexData, transform] of nonNullOthers) {\n                ret32.set(vertexData, offset);\n                transform && transformRange(ret32, transform, offset, vertexData.length);\n                offset += vertexData.length;\n            }\n            return ret32;\n        }\n        else {\n            // don't use concat as it is super slow, just loop for other cases\n            const ret = new Array(len);\n            for (let i = 0; i < source.length; i++) {\n                ret[i] = source[i];\n            }\n            transform && transformRange(ret, transform, 0, source.length);\n            let offset = source.length;\n            for (const [vertexData, transform] of nonNullOthers) {\n                for (let i = 0; i < vertexData.length; i++) {\n                    ret[offset + i] = vertexData[i];\n                }\n                transform && transformRange(ret, transform, offset, vertexData.length);\n                offset += vertexData.length;\n            }\n            return ret;\n        }\n    }\n    _validate() {\n        if (!this.positions) {\n            throw new RuntimeError(\"Positions are required\", ErrorCodes.MeshInvalidPositionsError);\n        }\n        const getElementCount = (kind, values) => {\n            const stride = VertexBuffer.DeduceStride(kind);\n            if (values.length % stride !== 0) {\n                throw new Error(\"The \" + kind + \"s array count must be a multiple of \" + stride);\n            }\n            return values.length / stride;\n        };\n        const positionsElementCount = getElementCount(VertexBuffer.PositionKind, this.positions);\n        const validateElementCount = (kind, values) => {\n            const elementCount = getElementCount(kind, values);\n            if (elementCount !== positionsElementCount) {\n                throw new Error(\"The \" + kind + \"s element count (\" + elementCount + \") does not match the positions count (\" + positionsElementCount + \")\");\n            }\n        };\n        if (this.normals) {\n            validateElementCount(VertexBuffer.NormalKind, this.normals);\n        }\n        if (this.tangents) {\n            validateElementCount(VertexBuffer.TangentKind, this.tangents);\n        }\n        if (this.uvs) {\n            validateElementCount(VertexBuffer.UVKind, this.uvs);\n        }\n        if (this.uvs2) {\n            validateElementCount(VertexBuffer.UV2Kind, this.uvs2);\n        }\n        if (this.uvs3) {\n            validateElementCount(VertexBuffer.UV3Kind, this.uvs3);\n        }\n        if (this.uvs4) {\n            validateElementCount(VertexBuffer.UV4Kind, this.uvs4);\n        }\n        if (this.uvs5) {\n            validateElementCount(VertexBuffer.UV5Kind, this.uvs5);\n        }\n        if (this.uvs6) {\n            validateElementCount(VertexBuffer.UV6Kind, this.uvs6);\n        }\n        if (this.colors) {\n            validateElementCount(VertexBuffer.ColorKind, this.colors);\n        }\n        if (this.matricesIndices) {\n            validateElementCount(VertexBuffer.MatricesIndicesKind, this.matricesIndices);\n        }\n        if (this.matricesWeights) {\n            validateElementCount(VertexBuffer.MatricesWeightsKind, this.matricesWeights);\n        }\n        if (this.matricesIndicesExtra) {\n            validateElementCount(VertexBuffer.MatricesIndicesExtraKind, this.matricesIndicesExtra);\n        }\n        if (this.matricesWeightsExtra) {\n            validateElementCount(VertexBuffer.MatricesWeightsExtraKind, this.matricesWeightsExtra);\n        }\n    }\n    /**\n     * Serializes the VertexData\n     * @returns a serialized object\n     */\n    serialize() {\n        const serializationObject = {};\n        if (this.positions) {\n            serializationObject.positions = this.positions;\n        }\n        if (this.normals) {\n            serializationObject.normals = this.normals;\n        }\n        if (this.tangents) {\n            serializationObject.tangents = this.tangents;\n        }\n        if (this.uvs) {\n            serializationObject.uvs = this.uvs;\n        }\n        if (this.uvs2) {\n            serializationObject.uvs2 = this.uvs2;\n        }\n        if (this.uvs3) {\n            serializationObject.uvs3 = this.uvs3;\n        }\n        if (this.uvs4) {\n            serializationObject.uvs4 = this.uvs4;\n        }\n        if (this.uvs5) {\n            serializationObject.uvs5 = this.uvs5;\n        }\n        if (this.uvs6) {\n            serializationObject.uvs6 = this.uvs6;\n        }\n        if (this.colors) {\n            serializationObject.colors = this.colors;\n        }\n        if (this.matricesIndices) {\n            serializationObject.matricesIndices = this.matricesIndices;\n            serializationObject.matricesIndices._isExpanded = true;\n        }\n        if (this.matricesWeights) {\n            serializationObject.matricesWeights = this.matricesWeights;\n        }\n        if (this.matricesIndicesExtra) {\n            serializationObject.matricesIndicesExtra = this.matricesIndicesExtra;\n            serializationObject.matricesIndicesExtra._isExpanded = true;\n        }\n        if (this.matricesWeightsExtra) {\n            serializationObject.matricesWeightsExtra = this.matricesWeightsExtra;\n        }\n        serializationObject.indices = this.indices;\n        return serializationObject;\n    }\n    // Statics\n    /**\n     * Extracts the vertexData from a mesh\n     * @param mesh the mesh from which to extract the VertexData\n     * @param copyWhenShared defines if the VertexData must be cloned when shared between multiple meshes, optional, default false\n     * @param forceCopy indicating that the VertexData must be cloned, optional, default false\n     * @returns the object VertexData associated to the passed mesh\n     */\n    static ExtractFromMesh(mesh, copyWhenShared, forceCopy) {\n        return VertexData._ExtractFrom(mesh, copyWhenShared, forceCopy);\n    }\n    /**\n     * Extracts the vertexData from the geometry\n     * @param geometry the geometry from which to extract the VertexData\n     * @param copyWhenShared defines if the VertexData must be cloned when the geometry is shared between multiple meshes, optional, default false\n     * @param forceCopy indicating that the VertexData must be cloned, optional, default false\n     * @returns the object VertexData associated to the passed mesh\n     */\n    static ExtractFromGeometry(geometry, copyWhenShared, forceCopy) {\n        return VertexData._ExtractFrom(geometry, copyWhenShared, forceCopy);\n    }\n    static _ExtractFrom(meshOrGeometry, copyWhenShared, forceCopy) {\n        const result = new VertexData();\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.PositionKind)) {\n            result.positions = meshOrGeometry.getVerticesData(VertexBuffer.PositionKind, copyWhenShared, forceCopy);\n        }\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.NormalKind)) {\n            result.normals = meshOrGeometry.getVerticesData(VertexBuffer.NormalKind, copyWhenShared, forceCopy);\n        }\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.TangentKind)) {\n            result.tangents = meshOrGeometry.getVerticesData(VertexBuffer.TangentKind, copyWhenShared, forceCopy);\n        }\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UVKind)) {\n            result.uvs = meshOrGeometry.getVerticesData(VertexBuffer.UVKind, copyWhenShared, forceCopy);\n        }\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UV2Kind)) {\n            result.uvs2 = meshOrGeometry.getVerticesData(VertexBuffer.UV2Kind, copyWhenShared, forceCopy);\n        }\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UV3Kind)) {\n            result.uvs3 = meshOrGeometry.getVerticesData(VertexBuffer.UV3Kind, copyWhenShared, forceCopy);\n        }\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UV4Kind)) {\n            result.uvs4 = meshOrGeometry.getVerticesData(VertexBuffer.UV4Kind, copyWhenShared, forceCopy);\n        }\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UV5Kind)) {\n            result.uvs5 = meshOrGeometry.getVerticesData(VertexBuffer.UV5Kind, copyWhenShared, forceCopy);\n        }\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UV6Kind)) {\n            result.uvs6 = meshOrGeometry.getVerticesData(VertexBuffer.UV6Kind, copyWhenShared, forceCopy);\n        }\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.ColorKind)) {\n            result.colors = meshOrGeometry.getVerticesData(VertexBuffer.ColorKind, copyWhenShared, forceCopy);\n        }\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.MatricesIndicesKind)) {\n            result.matricesIndices = meshOrGeometry.getVerticesData(VertexBuffer.MatricesIndicesKind, copyWhenShared, forceCopy);\n        }\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind)) {\n            result.matricesWeights = meshOrGeometry.getVerticesData(VertexBuffer.MatricesWeightsKind, copyWhenShared, forceCopy);\n        }\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.MatricesIndicesExtraKind)) {\n            result.matricesIndicesExtra = meshOrGeometry.getVerticesData(VertexBuffer.MatricesIndicesExtraKind, copyWhenShared, forceCopy);\n        }\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.MatricesWeightsExtraKind)) {\n            result.matricesWeightsExtra = meshOrGeometry.getVerticesData(VertexBuffer.MatricesWeightsExtraKind, copyWhenShared, forceCopy);\n        }\n        result.indices = meshOrGeometry.getIndices(copyWhenShared, forceCopy);\n        return result;\n    }\n    /**\n     * Creates the VertexData for a Ribbon\n     * @param options an object used to set the following optional parameters for the ribbon, required but can be empty\n     * * pathArray array of paths, each of which an array of successive Vector3\n     * * closeArray creates a seam between the first and the last paths of the pathArray, optional, default false\n     * * closePath creates a seam between the first and the last points of each path of the path array, optional, default false\n     * * offset a positive integer, only used when pathArray contains a single path (offset = 10 means the point 1 is joined to the point 11), default rounded half size of the pathArray length\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\n     * * invertUV swaps in the U and V coordinates when applying a texture, optional, default false\n     * * uvs a linear array, of length 2 * number of vertices, of custom UV values, optional\n     * * colors a linear array, of length 4 * number of vertices, of custom color values, optional\n     * @param options.pathArray\n     * @param options.closeArray\n     * @param options.closePath\n     * @param options.offset\n     * @param options.sideOrientation\n     * @param options.frontUVs\n     * @param options.backUVs\n     * @param options.invertUV\n     * @param options.uvs\n     * @param options.colors\n     * @returns the VertexData of the ribbon\n     * @deprecated use CreateRibbonVertexData instead\n     */\n    static CreateRibbon(options) {\n        throw _WarnImport(\"ribbonBuilder\");\n    }\n    /**\n     * Creates the VertexData for a box\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\n     * * size sets the width, height and depth of the box to the value of size, optional default 1\n     * * width sets the width (x direction) of the box, overwrites the width set by size, optional, default size\n     * * height sets the height (y direction) of the box, overwrites the height set by size, optional, default size\n     * * depth sets the depth (z direction) of the box, overwrites the depth set by size, optional, default size\n     * * faceUV an array of 6 Vector4 elements used to set different images to each box side\n     * * faceColors an array of 6 Color3 elements used to set different colors to each box side\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\n     * @param options.size\n     * @param options.width\n     * @param options.height\n     * @param options.depth\n     * @param options.faceUV\n     * @param options.faceColors\n     * @param options.sideOrientation\n     * @param options.frontUVs\n     * @param options.backUVs\n     * @returns the VertexData of the box\n     * @deprecated Please use CreateBoxVertexData from the BoxBuilder file instead\n     */\n    static CreateBox(options) {\n        throw _WarnImport(\"boxBuilder\");\n    }\n    /**\n     * Creates the VertexData for a tiled box\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\n     * * faceTiles sets the pattern, tile size and number of tiles for a face\n     * * faceUV an array of 6 Vector4 elements used to set different images to each box side\n     * * faceColors an array of 6 Color3 elements used to set different colors to each box side\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\n     * @param options.pattern\n     * @param options.width\n     * @param options.height\n     * @param options.depth\n     * @param options.tileSize\n     * @param options.tileWidth\n     * @param options.tileHeight\n     * @param options.alignHorizontal\n     * @param options.alignVertical\n     * @param options.faceUV\n     * @param options.faceColors\n     * @param options.sideOrientation\n     * @returns the VertexData of the box\n     * @deprecated Please use CreateTiledBoxVertexData instead\n     */\n    static CreateTiledBox(options) {\n        throw _WarnImport(\"tiledBoxBuilder\");\n    }\n    /**\n     * Creates the VertexData for a tiled plane\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\n     * * pattern a limited pattern arrangement depending on the number\n     * * tileSize sets the width, height and depth of the tile to the value of size, optional default 1\n     * * tileWidth sets the width (x direction) of the tile, overwrites the width set by size, optional, default size\n     * * tileHeight sets the height (y direction) of the tile, overwrites the height set by size, optional, default size\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\n     * @param options.pattern\n     * @param options.tileSize\n     * @param options.tileWidth\n     * @param options.tileHeight\n     * @param options.size\n     * @param options.width\n     * @param options.height\n     * @param options.alignHorizontal\n     * @param options.alignVertical\n     * @param options.sideOrientation\n     * @param options.frontUVs\n     * @param options.backUVs\n     * @returns the VertexData of the tiled plane\n     * @deprecated use CreateTiledPlaneVertexData instead\n     */\n    static CreateTiledPlane(options) {\n        throw _WarnImport(\"tiledPlaneBuilder\");\n    }\n    /**\n     * Creates the VertexData for an ellipsoid, defaults to a sphere\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\n     * * segments sets the number of horizontal strips optional, default 32\n     * * diameter sets the axes dimensions, diameterX, diameterY and diameterZ to the value of diameter, optional default 1\n     * * diameterX sets the diameterX (x direction) of the ellipsoid, overwrites the diameterX set by diameter, optional, default diameter\n     * * diameterY sets the diameterY (y direction) of the ellipsoid, overwrites the diameterY set by diameter, optional, default diameter\n     * * diameterZ sets the diameterZ (z direction) of the ellipsoid, overwrites the diameterZ set by diameter, optional, default diameter\n     * * arc a number from 0 to 1, to create an unclosed ellipsoid based on the fraction of the circumference (latitude) given by the arc value, optional, default 1\n     * * slice a number from 0 to 1, to create an unclosed ellipsoid based on the fraction of the height (latitude) given by the arc value, optional, default 1\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\n     * @param options.segments\n     * @param options.diameter\n     * @param options.diameterX\n     * @param options.diameterY\n     * @param options.diameterZ\n     * @param options.arc\n     * @param options.slice\n     * @param options.sideOrientation\n     * @param options.frontUVs\n     * @param options.backUVs\n     * @returns the VertexData of the ellipsoid\n     * @deprecated use CreateSphereVertexData instead\n     */\n    static CreateSphere(options) {\n        throw _WarnImport(\"sphereBuilder\");\n    }\n    /**\n     * Creates the VertexData for a cylinder, cone or prism\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\n     * * height sets the height (y direction) of the cylinder, optional, default 2\n     * * diameterTop sets the diameter of the top of the cone, overwrites diameter,  optional, default diameter\n     * * diameterBottom sets the diameter of the bottom of the cone, overwrites diameter,  optional, default diameter\n     * * diameter sets the diameter of the top and bottom of the cone, optional default 1\n     * * tessellation the number of prism sides, 3 for a triangular prism, optional, default 24\n     * * subdivisions` the number of rings along the cylinder height, optional, default 1\n     * * arc a number from 0 to 1, to create an unclosed cylinder based on the fraction of the circumference given by the arc value, optional, default 1\n     * * faceColors an array of Color3 elements used to set different colors to the top, rings and bottom respectively\n     * * faceUV an array of Vector4 elements used to set different images to the top, rings and bottom respectively\n     * * hasRings when true makes each subdivision independently treated as a face for faceUV and faceColors, optional, default false\n     * * enclose when true closes an open cylinder by adding extra flat faces between the height axis and vertical edges, think cut cake\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\n     * @param options.height\n     * @param options.diameterTop\n     * @param options.diameterBottom\n     * @param options.diameter\n     * @param options.tessellation\n     * @param options.subdivisions\n     * @param options.arc\n     * @param options.faceColors\n     * @param options.faceUV\n     * @param options.hasRings\n     * @param options.enclose\n     * @param options.sideOrientation\n     * @param options.frontUVs\n     * @param options.backUVs\n     * @returns the VertexData of the cylinder, cone or prism\n     * @deprecated please use CreateCylinderVertexData instead\n     */\n    static CreateCylinder(options) {\n        throw _WarnImport(\"cylinderBuilder\");\n    }\n    /**\n     * Creates the VertexData for a torus\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\n     * * diameter the diameter of the torus, optional default 1\n     * * thickness the diameter of the tube forming the torus, optional default 0.5\n     * * tessellation the number of prism sides, 3 for a triangular prism, optional, default 24\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\n     * @param options.diameter\n     * @param options.thickness\n     * @param options.tessellation\n     * @param options.sideOrientation\n     * @param options.frontUVs\n     * @param options.backUVs\n     * @returns the VertexData of the torus\n     * @deprecated use CreateTorusVertexData instead\n     */\n    static CreateTorus(options) {\n        throw _WarnImport(\"torusBuilder\");\n    }\n    /**\n     * Creates the VertexData of the LineSystem\n     * @param options an object used to set the following optional parameters for the LineSystem, required but can be empty\n     *  - lines an array of lines, each line being an array of successive Vector3\n     *  - colors an array of line colors, each of the line colors being an array of successive Color4, one per line point\n     * @param options.lines\n     * @param options.colors\n     * @returns the VertexData of the LineSystem\n     * @deprecated use CreateLineSystemVertexData instead\n     */\n    static CreateLineSystem(options) {\n        throw _WarnImport(\"linesBuilder\");\n    }\n    /**\n     * Create the VertexData for a DashedLines\n     * @param options an object used to set the following optional parameters for the DashedLines, required but can be empty\n     *  - points an array successive Vector3\n     *  - dashSize the size of the dashes relative to the dash number, optional, default 3\n     *  - gapSize the size of the gap between two successive dashes relative to the dash number, optional, default 1\n     *  - dashNb the intended total number of dashes, optional, default 200\n     * @param options.points\n     * @param options.dashSize\n     * @param options.gapSize\n     * @param options.dashNb\n     * @returns the VertexData for the DashedLines\n     * @deprecated use CreateDashedLinesVertexData instead\n     */\n    static CreateDashedLines(options) {\n        throw _WarnImport(\"linesBuilder\");\n    }\n    /**\n     * Creates the VertexData for a Ground\n     * @param options an object used to set the following optional parameters for the Ground, required but can be empty\n     *  - width the width (x direction) of the ground, optional, default 1\n     *  - height the height (z direction) of the ground, optional, default 1\n     *  - subdivisions the number of subdivisions per side, optional, default 1\n     * @param options.width\n     * @param options.height\n     * @param options.subdivisions\n     * @param options.subdivisionsX\n     * @param options.subdivisionsY\n     * @returns the VertexData of the Ground\n     * @deprecated Please use CreateGroundVertexData instead\n     */\n    static CreateGround(options) {\n        throw _WarnImport(\"groundBuilder\");\n    }\n    /**\n     * Creates the VertexData for a TiledGround by subdividing the ground into tiles\n     * @param options an object used to set the following optional parameters for the Ground, required but can be empty\n     * * xmin the ground minimum X coordinate, optional, default -1\n     * * zmin the ground minimum Z coordinate, optional, default -1\n     * * xmax the ground maximum X coordinate, optional, default 1\n     * * zmax the ground maximum Z coordinate, optional, default 1\n     * * subdivisions a javascript object {w: positive integer, h: positive integer}, `w` and `h` are the numbers of subdivisions on the ground width and height creating 'tiles', default {w: 6, h: 6}\n     * * precision a javascript object {w: positive integer, h: positive integer}, `w` and `h` are the numbers of subdivisions on the tile width and height, default {w: 2, h: 2}\n     * @param options.xmin\n     * @param options.zmin\n     * @param options.xmax\n     * @param options.zmax\n     * @param options.subdivisions\n     * @param options.subdivisions.w\n     * @param options.subdivisions.h\n     * @param options.precision\n     * @param options.precision.w\n     * @param options.precision.h\n     * @returns the VertexData of the TiledGround\n     * @deprecated use CreateTiledGroundVertexData instead\n     */\n    static CreateTiledGround(options) {\n        throw _WarnImport(\"groundBuilder\");\n    }\n    /**\n     * Creates the VertexData of the Ground designed from a heightmap\n     * @param options an object used to set the following parameters for the Ground, required and provided by CreateGroundFromHeightMap\n     * * width the width (x direction) of the ground\n     * * height the height (z direction) of the ground\n     * * subdivisions the number of subdivisions per side\n     * * minHeight the minimum altitude on the ground, optional, default 0\n     * * maxHeight the maximum altitude on the ground, optional default 1\n     * * colorFilter the filter to apply to the image pixel colors to compute the height, optional Color3, default (0.3, 0.59, 0.11)\n     * * buffer the array holding the image color data\n     * * bufferWidth the width of image\n     * * bufferHeight the height of image\n     * * alphaFilter Remove any data where the alpha channel is below this value, defaults 0 (all data visible)\n     * @param options.width\n     * @param options.height\n     * @param options.subdivisions\n     * @param options.minHeight\n     * @param options.maxHeight\n     * @param options.colorFilter\n     * @param options.buffer\n     * @param options.bufferWidth\n     * @param options.bufferHeight\n     * @param options.alphaFilter\n     * @returns the VertexData of the Ground designed from a heightmap\n     * @deprecated use CreateGroundFromHeightMapVertexData instead\n     */\n    static CreateGroundFromHeightMap(options) {\n        throw _WarnImport(\"groundBuilder\");\n    }\n    /**\n     * Creates the VertexData for a Plane\n     * @param options an object used to set the following optional parameters for the plane, required but can be empty\n     * * size sets the width and height of the plane to the value of size, optional default 1\n     * * width sets the width (x direction) of the plane, overwrites the width set by size, optional, default size\n     * * height sets the height (y direction) of the plane, overwrites the height set by size, optional, default size\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\n     * @param options.size\n     * @param options.width\n     * @param options.height\n     * @param options.sideOrientation\n     * @param options.frontUVs\n     * @param options.backUVs\n     * @returns the VertexData of the box\n     * @deprecated use CreatePlaneVertexData instead\n     */\n    static CreatePlane(options) {\n        throw _WarnImport(\"planeBuilder\");\n    }\n    /**\n     * Creates the VertexData of the Disc or regular Polygon\n     * @param options an object used to set the following optional parameters for the disc, required but can be empty\n     * * radius the radius of the disc, optional default 0.5\n     * * tessellation the number of polygon sides, optional, default 64\n     * * arc a number from 0 to 1, to create an unclosed polygon based on the fraction of the circumference given by the arc value, optional, default 1\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\n     * @param options.radius\n     * @param options.tessellation\n     * @param options.arc\n     * @param options.sideOrientation\n     * @param options.frontUVs\n     * @param options.backUVs\n     * @returns the VertexData of the box\n     * @deprecated use CreateDiscVertexData instead\n     */\n    static CreateDisc(options) {\n        throw _WarnImport(\"discBuilder\");\n    }\n    /**\n     * Creates the VertexData for an irregular Polygon in the XoZ plane using a mesh built by polygonTriangulation.build()\n     * All parameters are provided by CreatePolygon as needed\n     * @param polygon a mesh built from polygonTriangulation.build()\n     * @param sideOrientation takes the values Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\n     * @param fUV an array of Vector4 elements used to set different images to the top, rings and bottom respectively\n     * @param fColors an array of Color3 elements used to set different colors to the top, rings and bottom respectively\n     * @param frontUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\n     * @param backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\n     * @param wrap a boolean, default false, when true and fUVs used texture is wrapped around all sides, when false texture is applied side\n     * @returns the VertexData of the Polygon\n     * @deprecated use CreatePolygonVertexData instead\n     */\n    static CreatePolygon(polygon, sideOrientation, fUV, fColors, frontUVs, backUVs, wrap) {\n        throw _WarnImport(\"polygonBuilder\");\n    }\n    /**\n     * Creates the VertexData of the IcoSphere\n     * @param options an object used to set the following optional parameters for the IcoSphere, required but can be empty\n     * * radius the radius of the IcoSphere, optional default 1\n     * * radiusX allows stretching in the x direction, optional, default radius\n     * * radiusY allows stretching in the y direction, optional, default radius\n     * * radiusZ allows stretching in the z direction, optional, default radius\n     * * flat when true creates a flat shaded mesh, optional, default true\n     * * subdivisions increasing the subdivisions increases the number of faces, optional, default 4\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\n     * @param options.radius\n     * @param options.radiusX\n     * @param options.radiusY\n     * @param options.radiusZ\n     * @param options.flat\n     * @param options.subdivisions\n     * @param options.sideOrientation\n     * @param options.frontUVs\n     * @param options.backUVs\n     * @returns the VertexData of the IcoSphere\n     * @deprecated use CreateIcoSphereVertexData instead\n     */\n    static CreateIcoSphere(options) {\n        throw _WarnImport(\"icoSphereBuilder\");\n    }\n    // inspired from // http://stemkoski.github.io/Three.js/Polyhedra.html\n    /**\n     * Creates the VertexData for a Polyhedron\n     * @param options an object used to set the following optional parameters for the polyhedron, required but can be empty\n     * * type provided types are:\n     *  * 0 : Tetrahedron, 1 : Octahedron, 2 : Dodecahedron, 3 : Icosahedron, 4 : Rhombicuboctahedron, 5 : Triangular Prism, 6 : Pentagonal Prism, 7 : Hexagonal Prism, 8 : Square Pyramid (J1)\n     *  * 9 : Pentagonal Pyramid (J2), 10 : Triangular Dipyramid (J12), 11 : Pentagonal Dipyramid (J13), 12 : Elongated Square Dipyramid (J15), 13 : Elongated Pentagonal Dipyramid (J16), 14 : Elongated Pentagonal Cupola (J20)\n     * * size the size of the IcoSphere, optional default 1\n     * * sizeX allows stretching in the x direction, optional, default size\n     * * sizeY allows stretching in the y direction, optional, default size\n     * * sizeZ allows stretching in the z direction, optional, default size\n     * * custom a number that overwrites the type to create from an extended set of polyhedron from https://www.babylonjs-playground.com/#21QRSK#15 with minimised editor\n     * * faceUV an array of Vector4 elements used to set different images to the top, rings and bottom respectively\n     * * faceColors an array of Color3 elements used to set different colors to the top, rings and bottom respectively\n     * * flat when true creates a flat shaded mesh, optional, default true\n     * * subdivisions increasing the subdivisions increases the number of faces, optional, default 4\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\n     * @param options.type\n     * @param options.size\n     * @param options.sizeX\n     * @param options.sizeY\n     * @param options.sizeZ\n     * @param options.custom\n     * @param options.faceUV\n     * @param options.faceColors\n     * @param options.flat\n     * @param options.sideOrientation\n     * @param options.frontUVs\n     * @param options.backUVs\n     * @returns the VertexData of the Polyhedron\n     * @deprecated use CreatePolyhedronVertexData instead\n     */\n    static CreatePolyhedron(options) {\n        throw _WarnImport(\"polyhedronBuilder\");\n    }\n    /**\n     * Creates the VertexData for a Capsule, inspired from https://github.com/maximeq/three-js-capsule-geometry/blob/master/src/CapsuleBufferGeometry.js\n     * @param options an object used to set the following optional parameters for the capsule, required but can be empty\n     * @returns the VertexData of the Capsule\n     * @deprecated Please use CreateCapsuleVertexData from the capsuleBuilder file instead\n     */\n    static CreateCapsule(options = {\n        orientation: Vector3.Up(),\n        subdivisions: 2,\n        tessellation: 16,\n        height: 1,\n        radius: 0.25,\n        capSubdivisions: 6,\n    }) {\n        throw _WarnImport(\"capsuleBuilder\");\n    }\n    // based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3D/src/away3d/primitives/TorusKnot.as?spec=svn2473&r=2473\n    /**\n     * Creates the VertexData for a TorusKnot\n     * @param options an object used to set the following optional parameters for the TorusKnot, required but can be empty\n     * * radius the radius of the torus knot, optional, default 2\n     * * tube the thickness of the tube, optional, default 0.5\n     * * radialSegments the number of sides on each tube segments, optional, default 32\n     * * tubularSegments the number of tubes to decompose the knot into, optional, default 32\n     * * p the number of windings around the z axis, optional,  default 2\n     * * q the number of windings around the x axis, optional,  default 3\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\n     * @param options.radius\n     * @param options.tube\n     * @param options.radialSegments\n     * @param options.tubularSegments\n     * @param options.p\n     * @param options.q\n     * @param options.sideOrientation\n     * @param options.frontUVs\n     * @param options.backUVs\n     * @returns the VertexData of the Torus Knot\n     * @deprecated use CreateTorusKnotVertexData instead\n     */\n    static CreateTorusKnot(options) {\n        throw _WarnImport(\"torusKnotBuilder\");\n    }\n    // Tools\n    /**\n     * Compute normals for given positions and indices\n     * @param positions an array of vertex positions, [...., x, y, z, ......]\n     * @param indices an array of indices in groups of three for each triangular facet, [...., i, j, k, ......]\n     * @param normals an array of vertex normals, [...., x, y, z, ......]\n     * @param options an object used to set the following optional parameters for the TorusKnot, optional\n     * * facetNormals : optional array of facet normals (vector3)\n     * * facetPositions : optional array of facet positions (vector3)\n     * * facetPartitioning : optional partitioning array. facetPositions is required for facetPartitioning computation\n     * * ratio : optional partitioning ratio / bounding box, required for facetPartitioning computation\n     * * bInfo : optional bounding info, required for facetPartitioning computation\n     * * bbSize : optional bounding box size data, required for facetPartitioning computation\n     * * subDiv : optional partitioning data about subdivisions on  each axis (int), required for facetPartitioning computation\n     * * useRightHandedSystem: optional boolean to for right handed system computation\n     * * depthSort : optional boolean to enable the facet depth sort computation\n     * * distanceTo : optional Vector3 to compute the facet depth from this location\n     * * depthSortedFacets : optional array of depthSortedFacets to store the facet distances from the reference location\n     * @param options.facetNormals\n     * @param options.facetPositions\n     * @param options.facetPartitioning\n     * @param options.ratio\n     * @param options.bInfo\n     * @param options.bbSize\n     * @param options.subDiv\n     * @param options.useRightHandedSystem\n     * @param options.depthSort\n     * @param options.distanceTo\n     * @param options.depthSortedFacets\n     */\n    static ComputeNormals(positions, indices, normals, options) {\n        // temporary scalar variables\n        let index = 0; // facet index\n        let p1p2x = 0.0; // p1p2 vector x coordinate\n        let p1p2y = 0.0; // p1p2 vector y coordinate\n        let p1p2z = 0.0; // p1p2 vector z coordinate\n        let p3p2x = 0.0; // p3p2 vector x coordinate\n        let p3p2y = 0.0; // p3p2 vector y coordinate\n        let p3p2z = 0.0; // p3p2 vector z coordinate\n        let faceNormalx = 0.0; // facet normal x coordinate\n        let faceNormaly = 0.0; // facet normal y coordinate\n        let faceNormalz = 0.0; // facet normal z coordinate\n        let length = 0.0; // facet normal length before normalization\n        let v1x = 0; // vector1 x index in the positions array\n        let v1y = 0; // vector1 y index in the positions array\n        let v1z = 0; // vector1 z index in the positions array\n        let v2x = 0; // vector2 x index in the positions array\n        let v2y = 0; // vector2 y index in the positions array\n        let v2z = 0; // vector2 z index in the positions array\n        let v3x = 0; // vector3 x index in the positions array\n        let v3y = 0; // vector3 y index in the positions array\n        let v3z = 0; // vector3 z index in the positions array\n        let computeFacetNormals = false;\n        let computeFacetPositions = false;\n        let computeFacetPartitioning = false;\n        let computeDepthSort = false;\n        let faceNormalSign = 1;\n        let ratio = 0;\n        let distanceTo = null;\n        if (options) {\n            computeFacetNormals = options.facetNormals ? true : false;\n            computeFacetPositions = options.facetPositions ? true : false;\n            computeFacetPartitioning = options.facetPartitioning ? true : false;\n            faceNormalSign = options.useRightHandedSystem === true ? -1 : 1;\n            ratio = options.ratio || 0;\n            computeDepthSort = options.depthSort ? true : false;\n            distanceTo = options.distanceTo;\n            if (computeDepthSort) {\n                if (distanceTo === undefined) {\n                    distanceTo = Vector3.Zero();\n                }\n            }\n        }\n        // facetPartitioning reinit if needed\n        let xSubRatio = 0;\n        let ySubRatio = 0;\n        let zSubRatio = 0;\n        let subSq = 0;\n        if (computeFacetPartitioning && options && options.bbSize) {\n            //let bbSizeMax = options.bbSize.x > options.bbSize.y ? options.bbSize.x : options.bbSize.y;\n            //bbSizeMax = bbSizeMax > options.bbSize.z ? bbSizeMax : options.bbSize.z;\n            xSubRatio = (options.subDiv.X * ratio) / options.bbSize.x;\n            ySubRatio = (options.subDiv.Y * ratio) / options.bbSize.y;\n            zSubRatio = (options.subDiv.Z * ratio) / options.bbSize.z;\n            subSq = options.subDiv.max * options.subDiv.max;\n            options.facetPartitioning.length = 0;\n        }\n        // reset the normals\n        for (index = 0; index < positions.length; index++) {\n            normals[index] = 0.0;\n        }\n        // Loop : 1 indice triplet = 1 facet\n        const nbFaces = (indices.length / 3) | 0;\n        for (index = 0; index < nbFaces; index++) {\n            // get the indexes of the coordinates of each vertex of the facet\n            v1x = indices[index * 3] * 3;\n            v1y = v1x + 1;\n            v1z = v1x + 2;\n            v2x = indices[index * 3 + 1] * 3;\n            v2y = v2x + 1;\n            v2z = v2x + 2;\n            v3x = indices[index * 3 + 2] * 3;\n            v3y = v3x + 1;\n            v3z = v3x + 2;\n            p1p2x = positions[v1x] - positions[v2x]; // compute two vectors per facet : p1p2 and p3p2\n            p1p2y = positions[v1y] - positions[v2y];\n            p1p2z = positions[v1z] - positions[v2z];\n            p3p2x = positions[v3x] - positions[v2x];\n            p3p2y = positions[v3y] - positions[v2y];\n            p3p2z = positions[v3z] - positions[v2z];\n            // compute the face normal with the cross product\n            faceNormalx = faceNormalSign * (p1p2y * p3p2z - p1p2z * p3p2y);\n            faceNormaly = faceNormalSign * (p1p2z * p3p2x - p1p2x * p3p2z);\n            faceNormalz = faceNormalSign * (p1p2x * p3p2y - p1p2y * p3p2x);\n            // normalize this normal and store it in the array facetData\n            length = Math.sqrt(faceNormalx * faceNormalx + faceNormaly * faceNormaly + faceNormalz * faceNormalz);\n            length = length === 0 ? 1.0 : length;\n            faceNormalx /= length;\n            faceNormaly /= length;\n            faceNormalz /= length;\n            if (computeFacetNormals && options) {\n                options.facetNormals[index].x = faceNormalx;\n                options.facetNormals[index].y = faceNormaly;\n                options.facetNormals[index].z = faceNormalz;\n            }\n            if (computeFacetPositions && options) {\n                // compute and the facet barycenter coordinates in the array facetPositions\n                options.facetPositions[index].x = (positions[v1x] + positions[v2x] + positions[v3x]) / 3.0;\n                options.facetPositions[index].y = (positions[v1y] + positions[v2y] + positions[v3y]) / 3.0;\n                options.facetPositions[index].z = (positions[v1z] + positions[v2z] + positions[v3z]) / 3.0;\n            }\n            if (computeFacetPartitioning && options) {\n                // store the facet indexes in arrays in the main facetPartitioning array :\n                // compute each facet vertex (+ facet barycenter) index in the partiniong array\n                const ox = Math.floor((options.facetPositions[index].x - options.bInfo.minimum.x * ratio) * xSubRatio);\n                const oy = Math.floor((options.facetPositions[index].y - options.bInfo.minimum.y * ratio) * ySubRatio);\n                const oz = Math.floor((options.facetPositions[index].z - options.bInfo.minimum.z * ratio) * zSubRatio);\n                const b1x = Math.floor((positions[v1x] - options.bInfo.minimum.x * ratio) * xSubRatio);\n                const b1y = Math.floor((positions[v1y] - options.bInfo.minimum.y * ratio) * ySubRatio);\n                const b1z = Math.floor((positions[v1z] - options.bInfo.minimum.z * ratio) * zSubRatio);\n                const b2x = Math.floor((positions[v2x] - options.bInfo.minimum.x * ratio) * xSubRatio);\n                const b2y = Math.floor((positions[v2y] - options.bInfo.minimum.y * ratio) * ySubRatio);\n                const b2z = Math.floor((positions[v2z] - options.bInfo.minimum.z * ratio) * zSubRatio);\n                const b3x = Math.floor((positions[v3x] - options.bInfo.minimum.x * ratio) * xSubRatio);\n                const b3y = Math.floor((positions[v3y] - options.bInfo.minimum.y * ratio) * ySubRatio);\n                const b3z = Math.floor((positions[v3z] - options.bInfo.minimum.z * ratio) * zSubRatio);\n                const block_idx_v1 = b1x + options.subDiv.max * b1y + subSq * b1z;\n                const block_idx_v2 = b2x + options.subDiv.max * b2y + subSq * b2z;\n                const block_idx_v3 = b3x + options.subDiv.max * b3y + subSq * b3z;\n                const block_idx_o = ox + options.subDiv.max * oy + subSq * oz;\n                options.facetPartitioning[block_idx_o] = options.facetPartitioning[block_idx_o] ? options.facetPartitioning[block_idx_o] : new Array();\n                options.facetPartitioning[block_idx_v1] = options.facetPartitioning[block_idx_v1] ? options.facetPartitioning[block_idx_v1] : new Array();\n                options.facetPartitioning[block_idx_v2] = options.facetPartitioning[block_idx_v2] ? options.facetPartitioning[block_idx_v2] : new Array();\n                options.facetPartitioning[block_idx_v3] = options.facetPartitioning[block_idx_v3] ? options.facetPartitioning[block_idx_v3] : new Array();\n                // push each facet index in each block containing the vertex\n                options.facetPartitioning[block_idx_v1].push(index);\n                if (block_idx_v2 != block_idx_v1) {\n                    options.facetPartitioning[block_idx_v2].push(index);\n                }\n                if (!(block_idx_v3 == block_idx_v2 || block_idx_v3 == block_idx_v1)) {\n                    options.facetPartitioning[block_idx_v3].push(index);\n                }\n                if (!(block_idx_o == block_idx_v1 || block_idx_o == block_idx_v2 || block_idx_o == block_idx_v3)) {\n                    options.facetPartitioning[block_idx_o].push(index);\n                }\n            }\n            if (computeDepthSort && options && options.facetPositions) {\n                const dsf = options.depthSortedFacets[index];\n                dsf.ind = index * 3;\n                dsf.sqDistance = Vector3.DistanceSquared(options.facetPositions[index], distanceTo);\n            }\n            // compute the normals anyway\n            normals[v1x] += faceNormalx; // accumulate all the normals per face\n            normals[v1y] += faceNormaly;\n            normals[v1z] += faceNormalz;\n            normals[v2x] += faceNormalx;\n            normals[v2y] += faceNormaly;\n            normals[v2z] += faceNormalz;\n            normals[v3x] += faceNormalx;\n            normals[v3y] += faceNormaly;\n            normals[v3z] += faceNormalz;\n        }\n        // last normalization of each normal\n        for (index = 0; index < normals.length / 3; index++) {\n            faceNormalx = normals[index * 3];\n            faceNormaly = normals[index * 3 + 1];\n            faceNormalz = normals[index * 3 + 2];\n            length = Math.sqrt(faceNormalx * faceNormalx + faceNormaly * faceNormaly + faceNormalz * faceNormalz);\n            length = length === 0 ? 1.0 : length;\n            faceNormalx /= length;\n            faceNormaly /= length;\n            faceNormalz /= length;\n            normals[index * 3] = faceNormalx;\n            normals[index * 3 + 1] = faceNormaly;\n            normals[index * 3 + 2] = faceNormalz;\n        }\n    }\n    /**\n     * @internal\n     */\n    static _ComputeSides(sideOrientation, positions, indices, normals, uvs, frontUVs, backUVs) {\n        const li = indices.length;\n        const ln = normals.length;\n        let i;\n        let n;\n        sideOrientation = sideOrientation || VertexData.DEFAULTSIDE;\n        switch (sideOrientation) {\n            case VertexData.FRONTSIDE:\n                // nothing changed\n                break;\n            case VertexData.BACKSIDE:\n                // indices\n                for (i = 0; i < li; i += 3) {\n                    const tmp = indices[i];\n                    indices[i] = indices[i + 2];\n                    indices[i + 2] = tmp;\n                }\n                // normals\n                for (n = 0; n < ln; n++) {\n                    normals[n] = -normals[n];\n                }\n                break;\n            case VertexData.DOUBLESIDE: {\n                // positions\n                const lp = positions.length;\n                const l = lp / 3;\n                for (let p = 0; p < lp; p++) {\n                    positions[lp + p] = positions[p];\n                }\n                // indices\n                for (i = 0; i < li; i += 3) {\n                    indices[i + li] = indices[i + 2] + l;\n                    indices[i + 1 + li] = indices[i + 1] + l;\n                    indices[i + 2 + li] = indices[i] + l;\n                }\n                // normals\n                for (n = 0; n < ln; n++) {\n                    normals[ln + n] = -normals[n];\n                }\n                // uvs\n                const lu = uvs.length;\n                let u = 0;\n                for (u = 0; u < lu; u++) {\n                    uvs[u + lu] = uvs[u];\n                }\n                frontUVs = frontUVs ? frontUVs : new Vector4(0.0, 0.0, 1.0, 1.0);\n                backUVs = backUVs ? backUVs : new Vector4(0.0, 0.0, 1.0, 1.0);\n                u = 0;\n                for (i = 0; i < lu / 2; i++) {\n                    uvs[u] = frontUVs.x + (frontUVs.z - frontUVs.x) * uvs[u];\n                    uvs[u + 1] = frontUVs.y + (frontUVs.w - frontUVs.y) * uvs[u + 1];\n                    uvs[u + lu] = backUVs.x + (backUVs.z - backUVs.x) * uvs[u + lu];\n                    uvs[u + lu + 1] = backUVs.y + (backUVs.w - backUVs.y) * uvs[u + lu + 1];\n                    u += 2;\n                }\n                break;\n            }\n        }\n    }\n    /**\n     * Applies VertexData created from the imported parameters to the geometry\n     * @param parsedVertexData the parsed data from an imported file\n     * @param geometry the geometry to apply the VertexData to\n     */\n    static ImportVertexData(parsedVertexData, geometry) {\n        const vertexData = new VertexData();\n        // positions\n        const positions = parsedVertexData.positions;\n        if (positions) {\n            vertexData.set(positions, VertexBuffer.PositionKind);\n        }\n        // normals\n        const normals = parsedVertexData.normals;\n        if (normals) {\n            vertexData.set(normals, VertexBuffer.NormalKind);\n        }\n        // tangents\n        const tangents = parsedVertexData.tangents;\n        if (tangents) {\n            vertexData.set(tangents, VertexBuffer.TangentKind);\n        }\n        // uvs\n        const uvs = parsedVertexData.uvs;\n        if (uvs) {\n            vertexData.set(uvs, VertexBuffer.UVKind);\n        }\n        // uv2s\n        const uv2s = parsedVertexData.uv2s;\n        if (uv2s) {\n            vertexData.set(uv2s, VertexBuffer.UV2Kind);\n        }\n        // uv3s\n        const uv3s = parsedVertexData.uv3s;\n        if (uv3s) {\n            vertexData.set(uv3s, VertexBuffer.UV3Kind);\n        }\n        // uv4s\n        const uv4s = parsedVertexData.uv4s;\n        if (uv4s) {\n            vertexData.set(uv4s, VertexBuffer.UV4Kind);\n        }\n        // uv5s\n        const uv5s = parsedVertexData.uv5s;\n        if (uv5s) {\n            vertexData.set(uv5s, VertexBuffer.UV5Kind);\n        }\n        // uv6s\n        const uv6s = parsedVertexData.uv6s;\n        if (uv6s) {\n            vertexData.set(uv6s, VertexBuffer.UV6Kind);\n        }\n        // colors\n        const colors = parsedVertexData.colors;\n        if (colors) {\n            vertexData.set(Color4.CheckColors4(colors, positions.length / 3), VertexBuffer.ColorKind);\n        }\n        // matricesIndices\n        const matricesIndices = parsedVertexData.matricesIndices;\n        if (matricesIndices) {\n            vertexData.set(matricesIndices, VertexBuffer.MatricesIndicesKind);\n        }\n        // matricesWeights\n        const matricesWeights = parsedVertexData.matricesWeights;\n        if (matricesWeights) {\n            vertexData.set(matricesWeights, VertexBuffer.MatricesWeightsKind);\n        }\n        // indices\n        const indices = parsedVertexData.indices;\n        if (indices) {\n            vertexData.indices = indices;\n        }\n        geometry.setAllVerticesData(vertexData, parsedVertexData.updatable);\n    }\n}\n/**\n * Mesh side orientation : usually the external or front surface\n */\nVertexData.FRONTSIDE = 0;\n/**\n * Mesh side orientation : usually the internal or back surface\n */\nVertexData.BACKSIDE = 1;\n/**\n * Mesh side orientation : both internal and external or front and back surfaces\n */\nVertexData.DOUBLESIDE = 2;\n/**\n * Mesh side orientation : by default, `FRONTSIDE`\n */\nVertexData.DEFAULTSIDE = 0;\n__decorate([\n    nativeOverride.filter((...[coordinates]) => !Array.isArray(coordinates))\n], VertexData, \"_TransformVector3Coordinates\", null);\n__decorate([\n    nativeOverride.filter((...[normals]) => !Array.isArray(normals))\n], VertexData, \"_TransformVector3Normals\", null);\n__decorate([\n    nativeOverride.filter((...[normals]) => !Array.isArray(normals))\n], VertexData, \"_TransformVector4Normals\", null);\n__decorate([\n    nativeOverride.filter((...[indices]) => !Array.isArray(indices))\n], VertexData, \"_FlipFaces\", null);\n//# sourceMappingURL=mesh.vertexData.js.map","/* eslint-disable @typescript-eslint/naming-convention */\nimport { CreateRibbon } from \"./Builders/ribbonBuilder.js\";\nimport { CreateDisc } from \"./Builders/discBuilder.js\";\nimport { CreateBox } from \"./Builders/boxBuilder.js\";\nimport { CreateTiledBox } from \"./Builders/tiledBoxBuilder.js\";\nimport { CreateSphere } from \"./Builders/sphereBuilder.js\";\nimport { CreateCylinder } from \"./Builders/cylinderBuilder.js\";\nimport { CreateTorus } from \"./Builders/torusBuilder.js\";\nimport { CreateTorusKnot } from \"./Builders/torusKnotBuilder.js\";\nimport { CreateDashedLines, CreateLineSystem, CreateLines } from \"./Builders/linesBuilder.js\";\nimport { CreatePolygon, ExtrudePolygon } from \"./Builders/polygonBuilder.js\";\nimport { ExtrudeShape, ExtrudeShapeCustom } from \"./Builders/shapeBuilder.js\";\nimport { CreateLathe } from \"./Builders/latheBuilder.js\";\nimport { CreatePlane } from \"./Builders/planeBuilder.js\";\nimport { CreateTiledPlane } from \"./Builders/tiledPlaneBuilder.js\";\nimport { CreateGround, CreateGroundFromHeightMap, CreateTiledGround } from \"./Builders/groundBuilder.js\";\nimport { CreateTube } from \"./Builders/tubeBuilder.js\";\nimport { CreatePolyhedron } from \"./Builders/polyhedronBuilder.js\";\nimport { CreateIcoSphere } from \"./Builders/icoSphereBuilder.js\";\nimport { CreateDecal } from \"./Builders/decalBuilder.js\";\nimport { CreateCapsule } from \"./Builders/capsuleBuilder.js\";\nimport { CreateGeodesic } from \"./Builders/geodesicBuilder.js\";\nimport { CreateGoldberg } from \"./Builders/goldbergBuilder.js\";\n/**\n * Class containing static functions to help procedurally build meshes\n */\nexport const MeshBuilder = {\n    CreateBox,\n    CreateTiledBox,\n    CreateSphere,\n    CreateDisc,\n    CreateIcoSphere,\n    CreateRibbon,\n    CreateCylinder,\n    CreateTorus,\n    CreateTorusKnot,\n    CreateLineSystem,\n    CreateLines,\n    CreateDashedLines,\n    ExtrudeShape,\n    ExtrudeShapeCustom,\n    CreateLathe,\n    CreateTiledPlane,\n    CreatePlane,\n    CreateGround,\n    CreateTiledGround,\n    CreateGroundFromHeightMap,\n    CreatePolygon,\n    ExtrudePolygon,\n    CreateTube,\n    CreatePolyhedron,\n    CreateGeodesic,\n    CreateGoldberg,\n    CreateDecal,\n    CreateCapsule,\n};\n//# sourceMappingURL=meshBuilder.js.map","/**\n * Class used to represent a specific level of detail of a mesh\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\n */\nexport class MeshLODLevel {\n    /**\n     * Creates a new LOD level\n     * @param distanceOrScreenCoverage defines either the distance or the screen coverage where this level should start being displayed\n     * @param mesh defines the mesh to use to render this level\n     */\n    constructor(\n    /** Either distance from the center of the object to show this level or the screen coverage if `useLODScreenCoverage` is set to `true` on the mesh*/\n    distanceOrScreenCoverage, \n    /** Defines the mesh to use to render this level */\n    mesh) {\n        this.distanceOrScreenCoverage = distanceOrScreenCoverage;\n        this.mesh = mesh;\n    }\n}\n//# sourceMappingURL=meshLODLevel.js.map","import { Logger } from \"../Misc/logger.js\";\nimport { Vector3, Vector2 } from \"../Maths/math.vector.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { VertexData } from \"../Meshes/mesh.vertexData.js\";\nimport { Path2 } from \"../Maths/math.path.js\";\nimport { Epsilon } from \"../Maths/math.constants.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\n/**\n * Vector2 wth index property\n */\nclass IndexedVector2 extends Vector2 {\n    constructor(original, \n    /** Index of the vector2 */\n    index) {\n        super(original.x, original.y);\n        this.index = index;\n    }\n}\n/**\n * Defines points to create a polygon\n */\nclass PolygonPoints {\n    constructor() {\n        this.elements = new Array();\n    }\n    add(originalPoints) {\n        const result = new Array();\n        originalPoints.forEach((point) => {\n            const newPoint = new IndexedVector2(point, this.elements.length);\n            result.push(newPoint);\n            this.elements.push(newPoint);\n        });\n        return result;\n    }\n    computeBounds() {\n        const lmin = new Vector2(this.elements[0].x, this.elements[0].y);\n        const lmax = new Vector2(this.elements[0].x, this.elements[0].y);\n        this.elements.forEach((point) => {\n            // x\n            if (point.x < lmin.x) {\n                lmin.x = point.x;\n            }\n            else if (point.x > lmax.x) {\n                lmax.x = point.x;\n            }\n            // y\n            if (point.y < lmin.y) {\n                lmin.y = point.y;\n            }\n            else if (point.y > lmax.y) {\n                lmax.y = point.y;\n            }\n        });\n        return {\n            min: lmin,\n            max: lmax,\n            width: lmax.x - lmin.x,\n            height: lmax.y - lmin.y,\n        };\n    }\n}\n/**\n * Polygon\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param#non-regular-polygon\n */\nexport class Polygon {\n    /**\n     * Creates a rectangle\n     * @param xmin bottom X coord\n     * @param ymin bottom Y coord\n     * @param xmax top X coord\n     * @param ymax top Y coord\n     * @returns points that make the resulting rectangle\n     */\n    static Rectangle(xmin, ymin, xmax, ymax) {\n        return [new Vector2(xmin, ymin), new Vector2(xmax, ymin), new Vector2(xmax, ymax), new Vector2(xmin, ymax)];\n    }\n    /**\n     * Creates a circle\n     * @param radius radius of circle\n     * @param cx scale in x\n     * @param cy scale in y\n     * @param numberOfSides number of sides that make up the circle\n     * @returns points that make the resulting circle\n     */\n    static Circle(radius, cx = 0, cy = 0, numberOfSides = 32) {\n        const result = new Array();\n        let angle = 0;\n        const increment = (Math.PI * 2) / numberOfSides;\n        for (let i = 0; i < numberOfSides; i++) {\n            result.push(new Vector2(cx + Math.cos(angle) * radius, cy + Math.sin(angle) * radius));\n            angle -= increment;\n        }\n        return result;\n    }\n    /**\n     * Creates a polygon from input string\n     * @param input Input polygon data\n     * @returns the parsed points\n     */\n    static Parse(input) {\n        const floats = input\n            .split(/[^-+eE.\\d]+/)\n            .map(parseFloat)\n            .filter((val) => !isNaN(val));\n        let i;\n        const result = [];\n        for (i = 0; i < (floats.length & 0x7ffffffe); i += 2) {\n            result.push(new Vector2(floats[i], floats[i + 1]));\n        }\n        return result;\n    }\n    /**\n     * Starts building a polygon from x and y coordinates\n     * @param x x coordinate\n     * @param y y coordinate\n     * @returns the started path2\n     */\n    static StartingAt(x, y) {\n        return Path2.StartingAt(x, y);\n    }\n}\n/**\n * Builds a polygon\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param/polyMeshBuilder\n */\nexport class PolygonMeshBuilder {\n    _addToepoint(points) {\n        for (const p of points) {\n            this._epoints.push(p.x, p.y);\n        }\n    }\n    /**\n     * Creates a PolygonMeshBuilder\n     * @param name name of the builder\n     * @param contours Path of the polygon\n     * @param scene scene to add to when creating the mesh\n     * @param earcutInjection can be used to inject your own earcut reference\n     */\n    constructor(name, contours, scene, earcutInjection = earcut) {\n        this._points = new PolygonPoints();\n        this._outlinepoints = new PolygonPoints();\n        this._holes = new Array();\n        this._epoints = new Array();\n        this._eholes = new Array();\n        this.bjsEarcut = earcutInjection;\n        this._name = name;\n        this._scene = scene || EngineStore.LastCreatedScene;\n        let points;\n        if (contours instanceof Path2) {\n            points = contours.getPoints();\n        }\n        else {\n            points = contours;\n        }\n        this._addToepoint(points);\n        this._points.add(points);\n        this._outlinepoints.add(points);\n        if (typeof this.bjsEarcut === \"undefined\") {\n            Logger.Warn(\"Earcut was not found, the polygon will not be built.\");\n        }\n    }\n    /**\n     * Adds a hole within the polygon\n     * @param hole Array of points defining the hole\n     * @returns this\n     */\n    addHole(hole) {\n        this._points.add(hole);\n        const holepoints = new PolygonPoints();\n        holepoints.add(hole);\n        this._holes.push(holepoints);\n        this._eholes.push(this._epoints.length / 2);\n        this._addToepoint(hole);\n        return this;\n    }\n    /**\n     * Creates the polygon\n     * @param updatable If the mesh should be updatable\n     * @param depth The depth of the mesh created\n     * @param smoothingThreshold Dot product threshold for smoothed normals\n     * @returns the created mesh\n     */\n    build(updatable = false, depth = 0, smoothingThreshold = 2) {\n        const result = new Mesh(this._name, this._scene);\n        const vertexData = this.buildVertexData(depth, smoothingThreshold);\n        result.setVerticesData(VertexBuffer.PositionKind, vertexData.positions, updatable);\n        result.setVerticesData(VertexBuffer.NormalKind, vertexData.normals, updatable);\n        result.setVerticesData(VertexBuffer.UVKind, vertexData.uvs, updatable);\n        result.setIndices(vertexData.indices);\n        return result;\n    }\n    /**\n     * Creates the polygon\n     * @param depth The depth of the mesh created\n     * @param smoothingThreshold Dot product threshold for smoothed normals\n     * @returns the created VertexData\n     */\n    buildVertexData(depth = 0, smoothingThreshold = 2) {\n        const result = new VertexData();\n        const normals = new Array();\n        const positions = new Array();\n        const uvs = new Array();\n        const bounds = this._points.computeBounds();\n        this._points.elements.forEach((p) => {\n            normals.push(0, 1.0, 0);\n            positions.push(p.x, 0, p.y);\n            uvs.push((p.x - bounds.min.x) / bounds.width, (p.y - bounds.min.y) / bounds.height);\n        });\n        const indices = new Array();\n        const res = this.bjsEarcut(this._epoints, this._eholes, 2);\n        for (let i = 0; i < res.length; i++) {\n            indices.push(res[i]);\n        }\n        if (depth > 0) {\n            const positionscount = positions.length / 3; //get the current pointcount\n            this._points.elements.forEach((p) => {\n                //add the elements at the depth\n                normals.push(0, -1.0, 0);\n                positions.push(p.x, -depth, p.y);\n                uvs.push(1 - (p.x - bounds.min.x) / bounds.width, 1 - (p.y - bounds.min.y) / bounds.height);\n            });\n            const totalCount = indices.length;\n            for (let i = 0; i < totalCount; i += 3) {\n                const i0 = indices[i + 0];\n                const i1 = indices[i + 1];\n                const i2 = indices[i + 2];\n                indices.push(i2 + positionscount);\n                indices.push(i1 + positionscount);\n                indices.push(i0 + positionscount);\n            }\n            //Add the sides\n            this._addSide(positions, normals, uvs, indices, bounds, this._outlinepoints, depth, false, smoothingThreshold);\n            this._holes.forEach((hole) => {\n                this._addSide(positions, normals, uvs, indices, bounds, hole, depth, true, smoothingThreshold);\n            });\n        }\n        result.indices = indices;\n        result.positions = positions;\n        result.normals = normals;\n        result.uvs = uvs;\n        return result;\n    }\n    /**\n     * Adds a side to the polygon\n     * @param positions points that make the polygon\n     * @param normals normals of the polygon\n     * @param uvs uvs of the polygon\n     * @param indices indices of the polygon\n     * @param bounds bounds of the polygon\n     * @param points points of the polygon\n     * @param depth depth of the polygon\n     * @param flip flip of the polygon\n     * @param smoothingThreshold\n     */\n    _addSide(positions, normals, uvs, indices, bounds, points, depth, flip, smoothingThreshold) {\n        let startIndex = positions.length / 3;\n        let ulength = 0;\n        for (let i = 0; i < points.elements.length; i++) {\n            const p = points.elements[i];\n            const p1 = points.elements[(i + 1) % points.elements.length];\n            positions.push(p.x, 0, p.y);\n            positions.push(p.x, -depth, p.y);\n            positions.push(p1.x, 0, p1.y);\n            positions.push(p1.x, -depth, p1.y);\n            const p0 = points.elements[(i + points.elements.length - 1) % points.elements.length];\n            const p2 = points.elements[(i + 2) % points.elements.length];\n            let vc = new Vector3(-(p1.y - p.y), 0, p1.x - p.x);\n            let vp = new Vector3(-(p.y - p0.y), 0, p.x - p0.x);\n            let vn = new Vector3(-(p2.y - p1.y), 0, p2.x - p1.x);\n            if (!flip) {\n                vc = vc.scale(-1);\n                vp = vp.scale(-1);\n                vn = vn.scale(-1);\n            }\n            const vc_norm = vc.normalizeToNew();\n            let vp_norm = vp.normalizeToNew();\n            let vn_norm = vn.normalizeToNew();\n            const dotp = Vector3.Dot(vp_norm, vc_norm);\n            if (dotp > smoothingThreshold) {\n                if (dotp < Epsilon - 1) {\n                    vp_norm = new Vector3(p.x, 0, p.y).subtract(new Vector3(p1.x, 0, p1.y)).normalize();\n                }\n                else {\n                    // cheap average weighed by side length\n                    vp_norm = vp.add(vc).normalize();\n                }\n            }\n            else {\n                vp_norm = vc_norm;\n            }\n            const dotn = Vector3.Dot(vn, vc);\n            if (dotn > smoothingThreshold) {\n                if (dotn < Epsilon - 1) {\n                    // back to back\n                    vn_norm = new Vector3(p1.x, 0, p1.y).subtract(new Vector3(p.x, 0, p.y)).normalize();\n                }\n                else {\n                    // cheap average weighed by side length\n                    vn_norm = vn.add(vc).normalize();\n                }\n            }\n            else {\n                vn_norm = vc_norm;\n            }\n            uvs.push(ulength / bounds.width, 0);\n            uvs.push(ulength / bounds.width, 1);\n            ulength += vc.length();\n            uvs.push(ulength / bounds.width, 0);\n            uvs.push(ulength / bounds.width, 1);\n            normals.push(vp_norm.x, vp_norm.y, vp_norm.z);\n            normals.push(vp_norm.x, vp_norm.y, vp_norm.z);\n            normals.push(vn_norm.x, vn_norm.y, vn_norm.z);\n            normals.push(vn_norm.x, vn_norm.y, vn_norm.z);\n            if (!flip) {\n                indices.push(startIndex);\n                indices.push(startIndex + 1);\n                indices.push(startIndex + 2);\n                indices.push(startIndex + 1);\n                indices.push(startIndex + 3);\n                indices.push(startIndex + 2);\n            }\n            else {\n                indices.push(startIndex);\n                indices.push(startIndex + 2);\n                indices.push(startIndex + 1);\n                indices.push(startIndex + 1);\n                indices.push(startIndex + 2);\n                indices.push(startIndex + 3);\n            }\n            startIndex += 4;\n        }\n    }\n}\n//# sourceMappingURL=polygonMesh.js.map","import { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { IntersectionInfo } from \"../Collisions/intersectionInfo.js\";\nimport { BoundingInfo } from \"../Culling/boundingInfo.js\";\n\nimport { extractMinAndMaxIndexed } from \"../Maths/math.functions.js\";\nimport { DrawWrapper } from \"../Materials/drawWrapper.js\";\n/**\n * Defines a subdivision inside a mesh\n */\nexport class SubMesh {\n    /**\n     * Gets material defines used by the effect associated to the sub mesh\n     */\n    get materialDefines() {\n        var _a;\n        return this._mainDrawWrapperOverride ? this._mainDrawWrapperOverride.defines : (_a = this._getDrawWrapper()) === null || _a === void 0 ? void 0 : _a.defines;\n    }\n    /**\n     * Sets material defines used by the effect associated to the sub mesh\n     */\n    set materialDefines(defines) {\n        var _a;\n        const drawWrapper = (_a = this._mainDrawWrapperOverride) !== null && _a !== void 0 ? _a : this._getDrawWrapper(undefined, true);\n        drawWrapper.defines = defines;\n    }\n    /**\n     * @internal\n     */\n    _getDrawWrapper(passId, createIfNotExisting = false) {\n        passId = passId !== null && passId !== void 0 ? passId : this._engine.currentRenderPassId;\n        let drawWrapper = this._drawWrappers[passId];\n        if (!drawWrapper && createIfNotExisting) {\n            this._drawWrappers[passId] = drawWrapper = new DrawWrapper(this._mesh.getScene().getEngine());\n        }\n        return drawWrapper;\n    }\n    /**\n     * @internal\n     */\n    _removeDrawWrapper(passId, disposeWrapper = true) {\n        var _a;\n        if (disposeWrapper) {\n            (_a = this._drawWrappers[passId]) === null || _a === void 0 ? void 0 : _a.dispose();\n        }\n        this._drawWrappers[passId] = undefined;\n    }\n    /**\n     * Gets associated (main) effect (possibly the effect override if defined)\n     */\n    get effect() {\n        var _a, _b;\n        return this._mainDrawWrapperOverride ? this._mainDrawWrapperOverride.effect : (_b = (_a = this._getDrawWrapper()) === null || _a === void 0 ? void 0 : _a.effect) !== null && _b !== void 0 ? _b : null;\n    }\n    /** @internal */\n    get _drawWrapper() {\n        var _a;\n        return (_a = this._mainDrawWrapperOverride) !== null && _a !== void 0 ? _a : this._getDrawWrapper(undefined, true);\n    }\n    /** @internal */\n    get _drawWrapperOverride() {\n        return this._mainDrawWrapperOverride;\n    }\n    /**\n     * @internal\n     */\n    _setMainDrawWrapperOverride(wrapper) {\n        this._mainDrawWrapperOverride = wrapper;\n    }\n    /**\n     * Sets associated effect (effect used to render this submesh)\n     * @param effect defines the effect to associate with\n     * @param defines defines the set of defines used to compile this effect\n     * @param materialContext material context associated to the effect\n     * @param resetContext true to reset the draw context\n     */\n    setEffect(effect, defines = null, materialContext, resetContext = true) {\n        const drawWrapper = this._drawWrapper;\n        drawWrapper.setEffect(effect, defines, resetContext);\n        if (materialContext !== undefined) {\n            drawWrapper.materialContext = materialContext;\n        }\n        if (!effect) {\n            drawWrapper.defines = null;\n            drawWrapper.materialContext = undefined;\n        }\n    }\n    /**\n     * Resets the draw wrappers cache\n     * @param passId If provided, releases only the draw wrapper corresponding to this render pass id\n     */\n    resetDrawCache(passId) {\n        if (this._drawWrappers) {\n            if (passId !== undefined) {\n                this._removeDrawWrapper(passId);\n                return;\n            }\n            else {\n                for (const drawWrapper of this._drawWrappers) {\n                    drawWrapper === null || drawWrapper === void 0 ? void 0 : drawWrapper.dispose();\n                }\n            }\n        }\n        this._drawWrappers = [];\n    }\n    /**\n     * Add a new submesh to a mesh\n     * @param materialIndex defines the material index to use\n     * @param verticesStart defines vertex index start\n     * @param verticesCount defines vertices count\n     * @param indexStart defines index start\n     * @param indexCount defines indices count\n     * @param mesh defines the parent mesh\n     * @param renderingMesh defines an optional rendering mesh\n     * @param createBoundingBox defines if bounding box should be created for this submesh\n     * @returns the new submesh\n     */\n    static AddToMesh(materialIndex, verticesStart, verticesCount, indexStart, indexCount, mesh, renderingMesh, createBoundingBox = true) {\n        return new SubMesh(materialIndex, verticesStart, verticesCount, indexStart, indexCount, mesh, renderingMesh, createBoundingBox);\n    }\n    /**\n     * Creates a new submesh\n     * @param materialIndex defines the material index to use\n     * @param verticesStart defines vertex index start\n     * @param verticesCount defines vertices count\n     * @param indexStart defines index start\n     * @param indexCount defines indices count\n     * @param mesh defines the parent mesh\n     * @param renderingMesh defines an optional rendering mesh\n     * @param createBoundingBox defines if bounding box should be created for this submesh\n     * @param addToMesh defines a boolean indicating that the submesh must be added to the mesh.subMeshes array (true by default)\n     */\n    constructor(\n    /** the material index to use */\n    materialIndex, \n    /** vertex index start */\n    verticesStart, \n    /** vertices count */\n    verticesCount, \n    /** index start */\n    indexStart, \n    /** indices count */\n    indexCount, mesh, renderingMesh, createBoundingBox = true, addToMesh = true) {\n        this.materialIndex = materialIndex;\n        this.verticesStart = verticesStart;\n        this.verticesCount = verticesCount;\n        this.indexStart = indexStart;\n        this.indexCount = indexCount;\n        this._mainDrawWrapperOverride = null;\n        /** @internal */\n        this._linesIndexCount = 0;\n        this._linesIndexBuffer = null;\n        /** @internal */\n        this._lastColliderWorldVertices = null;\n        /** @internal */\n        this._lastColliderTransformMatrix = null;\n        /** @internal */\n        this._wasDispatched = false;\n        /** @internal */\n        this._renderId = 0;\n        /** @internal */\n        this._alphaIndex = 0;\n        /** @internal */\n        this._distanceToCamera = 0;\n        this._currentMaterial = null;\n        this._mesh = mesh;\n        this._renderingMesh = renderingMesh || mesh;\n        if (addToMesh) {\n            mesh.subMeshes.push(this);\n        }\n        this._engine = this._mesh.getScene().getEngine();\n        this.resetDrawCache();\n        this._trianglePlanes = [];\n        this._id = mesh.subMeshes.length - 1;\n        if (createBoundingBox) {\n            this.refreshBoundingInfo();\n            mesh.computeWorldMatrix(true);\n        }\n    }\n    /**\n     * Returns true if this submesh covers the entire parent mesh\n     * @ignorenaming\n     */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    get IsGlobal() {\n        return this.verticesStart === 0 && this.verticesCount === this._mesh.getTotalVertices() && this.indexStart === 0 && this.indexCount === this._mesh.getTotalIndices();\n    }\n    /**\n     * Returns the submesh BoundingInfo object\n     * @returns current bounding info (or mesh's one if the submesh is global)\n     */\n    getBoundingInfo() {\n        if (this.IsGlobal) {\n            return this._mesh.getBoundingInfo();\n        }\n        return this._boundingInfo;\n    }\n    /**\n     * Sets the submesh BoundingInfo\n     * @param boundingInfo defines the new bounding info to use\n     * @returns the SubMesh\n     */\n    setBoundingInfo(boundingInfo) {\n        this._boundingInfo = boundingInfo;\n        return this;\n    }\n    /**\n     * Returns the mesh of the current submesh\n     * @returns the parent mesh\n     */\n    getMesh() {\n        return this._mesh;\n    }\n    /**\n     * Returns the rendering mesh of the submesh\n     * @returns the rendering mesh (could be different from parent mesh)\n     */\n    getRenderingMesh() {\n        return this._renderingMesh;\n    }\n    /**\n     * Returns the replacement mesh of the submesh\n     * @returns the replacement mesh (could be different from parent mesh)\n     */\n    getReplacementMesh() {\n        return this._mesh._internalAbstractMeshDataInfo._actAsRegularMesh ? this._mesh : null;\n    }\n    /**\n     * Returns the effective mesh of the submesh\n     * @returns the effective mesh (could be different from parent mesh)\n     */\n    getEffectiveMesh() {\n        const replacementMesh = this._mesh._internalAbstractMeshDataInfo._actAsRegularMesh ? this._mesh : null;\n        return replacementMesh ? replacementMesh : this._renderingMesh;\n    }\n    /**\n     * Returns the submesh material\n     * @param getDefaultMaterial Defines whether or not to get the default material if nothing has been defined.\n     * @returns null or the current material\n     */\n    getMaterial(getDefaultMaterial = true) {\n        var _a;\n        const rootMaterial = (_a = this._renderingMesh.getMaterialForRenderPass(this._engine.currentRenderPassId)) !== null && _a !== void 0 ? _a : this._renderingMesh.material;\n        if (!rootMaterial) {\n            return getDefaultMaterial ? this._mesh.getScene().defaultMaterial : null;\n        }\n        else if (this._isMultiMaterial(rootMaterial)) {\n            const effectiveMaterial = rootMaterial.getSubMaterial(this.materialIndex);\n            if (this._currentMaterial !== effectiveMaterial) {\n                this._currentMaterial = effectiveMaterial;\n                this.resetDrawCache();\n            }\n            return effectiveMaterial;\n        }\n        return rootMaterial;\n    }\n    _isMultiMaterial(material) {\n        return material.getSubMaterial !== undefined;\n    }\n    // Methods\n    /**\n     * Sets a new updated BoundingInfo object to the submesh\n     * @param data defines an optional position array to use to determine the bounding info\n     * @returns the SubMesh\n     */\n    refreshBoundingInfo(data = null) {\n        this._lastColliderWorldVertices = null;\n        if (this.IsGlobal || !this._renderingMesh || !this._renderingMesh.geometry) {\n            return this;\n        }\n        if (!data) {\n            data = this._renderingMesh.getVerticesData(VertexBuffer.PositionKind);\n        }\n        if (!data) {\n            this._boundingInfo = this._mesh.getBoundingInfo();\n            return this;\n        }\n        const indices = this._renderingMesh.getIndices();\n        let extend;\n        //is this the only submesh?\n        if (this.indexStart === 0 && this.indexCount === indices.length) {\n            const boundingInfo = this._renderingMesh.getBoundingInfo();\n            //the rendering mesh's bounding info can be used, it is the standard submesh for all indices.\n            extend = { minimum: boundingInfo.minimum.clone(), maximum: boundingInfo.maximum.clone() };\n        }\n        else {\n            extend = extractMinAndMaxIndexed(data, indices, this.indexStart, this.indexCount, this._renderingMesh.geometry.boundingBias);\n        }\n        if (this._boundingInfo) {\n            this._boundingInfo.reConstruct(extend.minimum, extend.maximum);\n        }\n        else {\n            this._boundingInfo = new BoundingInfo(extend.minimum, extend.maximum);\n        }\n        return this;\n    }\n    /**\n     * @internal\n     */\n    _checkCollision(collider) {\n        const boundingInfo = this.getBoundingInfo();\n        return boundingInfo._checkCollision(collider);\n    }\n    /**\n     * Updates the submesh BoundingInfo\n     * @param world defines the world matrix to use to update the bounding info\n     * @returns the submesh\n     */\n    updateBoundingInfo(world) {\n        let boundingInfo = this.getBoundingInfo();\n        if (!boundingInfo) {\n            this.refreshBoundingInfo();\n            boundingInfo = this.getBoundingInfo();\n        }\n        if (boundingInfo) {\n            boundingInfo.update(world);\n        }\n        return this;\n    }\n    /**\n     * True is the submesh bounding box intersects the frustum defined by the passed array of planes.\n     * @param frustumPlanes defines the frustum planes\n     * @returns true if the submesh is intersecting with the frustum\n     */\n    isInFrustum(frustumPlanes) {\n        const boundingInfo = this.getBoundingInfo();\n        if (!boundingInfo) {\n            return false;\n        }\n        return boundingInfo.isInFrustum(frustumPlanes, this._mesh.cullingStrategy);\n    }\n    /**\n     * True is the submesh bounding box is completely inside the frustum defined by the passed array of planes\n     * @param frustumPlanes defines the frustum planes\n     * @returns true if the submesh is inside the frustum\n     */\n    isCompletelyInFrustum(frustumPlanes) {\n        const boundingInfo = this.getBoundingInfo();\n        if (!boundingInfo) {\n            return false;\n        }\n        return boundingInfo.isCompletelyInFrustum(frustumPlanes);\n    }\n    /**\n     * Renders the submesh\n     * @param enableAlphaMode defines if alpha needs to be used\n     * @returns the submesh\n     */\n    render(enableAlphaMode) {\n        this._renderingMesh.render(this, enableAlphaMode, this._mesh._internalAbstractMeshDataInfo._actAsRegularMesh ? this._mesh : undefined);\n        return this;\n    }\n    /**\n     * @internal\n     */\n    _getLinesIndexBuffer(indices, engine) {\n        if (!this._linesIndexBuffer) {\n            const linesIndices = [];\n            for (let index = this.indexStart; index < this.indexStart + this.indexCount; index += 3) {\n                linesIndices.push(indices[index], indices[index + 1], indices[index + 1], indices[index + 2], indices[index + 2], indices[index]);\n            }\n            this._linesIndexBuffer = engine.createIndexBuffer(linesIndices);\n            this._linesIndexCount = linesIndices.length;\n        }\n        return this._linesIndexBuffer;\n    }\n    /**\n     * Checks if the submesh intersects with a ray\n     * @param ray defines the ray to test\n     * @returns true is the passed ray intersects the submesh bounding box\n     */\n    canIntersects(ray) {\n        const boundingInfo = this.getBoundingInfo();\n        if (!boundingInfo) {\n            return false;\n        }\n        return ray.intersectsBox(boundingInfo.boundingBox);\n    }\n    /**\n     * Intersects current submesh with a ray\n     * @param ray defines the ray to test\n     * @param positions defines mesh's positions array\n     * @param indices defines mesh's indices array\n     * @param fastCheck defines if the first intersection will be used (and not the closest)\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\n     * @returns intersection info or null if no intersection\n     */\n    intersects(ray, positions, indices, fastCheck, trianglePredicate) {\n        const material = this.getMaterial();\n        if (!material) {\n            return null;\n        }\n        let step = 3;\n        let checkStopper = false;\n        switch (material.fillMode) {\n            case 3:\n            case 5:\n            case 6:\n            case 8:\n                return null;\n            case 7:\n                step = 1;\n                checkStopper = true;\n                break;\n            default:\n                break;\n        }\n        // LineMesh first as it's also a Mesh...\n        if (material.fillMode === 4) {\n            // Check if mesh is unindexed\n            if (!indices.length) {\n                return this._intersectUnIndexedLines(ray, positions, indices, this._mesh.intersectionThreshold, fastCheck);\n            }\n            return this._intersectLines(ray, positions, indices, this._mesh.intersectionThreshold, fastCheck);\n        }\n        else {\n            // Check if mesh is unindexed\n            if (!indices.length && this._mesh._unIndexed) {\n                return this._intersectUnIndexedTriangles(ray, positions, indices, fastCheck, trianglePredicate);\n            }\n            return this._intersectTriangles(ray, positions, indices, step, checkStopper, fastCheck, trianglePredicate);\n        }\n    }\n    /**\n     * @internal\n     */\n    _intersectLines(ray, positions, indices, intersectionThreshold, fastCheck) {\n        let intersectInfo = null;\n        // Line test\n        for (let index = this.indexStart; index < this.indexStart + this.indexCount; index += 2) {\n            const p0 = positions[indices[index]];\n            const p1 = positions[indices[index + 1]];\n            const length = ray.intersectionSegment(p0, p1, intersectionThreshold);\n            if (length < 0) {\n                continue;\n            }\n            if (fastCheck || !intersectInfo || length < intersectInfo.distance) {\n                intersectInfo = new IntersectionInfo(null, null, length);\n                intersectInfo.faceId = index / 2;\n                if (fastCheck) {\n                    break;\n                }\n            }\n        }\n        return intersectInfo;\n    }\n    /**\n     * @internal\n     */\n    _intersectUnIndexedLines(ray, positions, indices, intersectionThreshold, fastCheck) {\n        let intersectInfo = null;\n        // Line test\n        for (let index = this.verticesStart; index < this.verticesStart + this.verticesCount; index += 2) {\n            const p0 = positions[index];\n            const p1 = positions[index + 1];\n            const length = ray.intersectionSegment(p0, p1, intersectionThreshold);\n            if (length < 0) {\n                continue;\n            }\n            if (fastCheck || !intersectInfo || length < intersectInfo.distance) {\n                intersectInfo = new IntersectionInfo(null, null, length);\n                intersectInfo.faceId = index / 2;\n                if (fastCheck) {\n                    break;\n                }\n            }\n        }\n        return intersectInfo;\n    }\n    /**\n     * @internal\n     */\n    _intersectTriangles(ray, positions, indices, step, checkStopper, fastCheck, trianglePredicate) {\n        let intersectInfo = null;\n        // Triangles test\n        let faceId = -1;\n        for (let index = this.indexStart; index < this.indexStart + this.indexCount - (3 - step); index += step) {\n            faceId++;\n            const indexA = indices[index];\n            const indexB = indices[index + 1];\n            const indexC = indices[index + 2];\n            if (checkStopper && indexC === 0xffffffff) {\n                index += 2;\n                continue;\n            }\n            const p0 = positions[indexA];\n            const p1 = positions[indexB];\n            const p2 = positions[indexC];\n            // stay defensive and don't check against undefined positions.\n            if (!p0 || !p1 || !p2) {\n                continue;\n            }\n            if (trianglePredicate && !trianglePredicate(p0, p1, p2, ray, indexA, indexB, indexC)) {\n                continue;\n            }\n            const currentIntersectInfo = ray.intersectsTriangle(p0, p1, p2);\n            if (currentIntersectInfo) {\n                if (currentIntersectInfo.distance < 0) {\n                    continue;\n                }\n                if (fastCheck || !intersectInfo || currentIntersectInfo.distance < intersectInfo.distance) {\n                    intersectInfo = currentIntersectInfo;\n                    intersectInfo.faceId = faceId;\n                    if (fastCheck) {\n                        break;\n                    }\n                }\n            }\n        }\n        return intersectInfo;\n    }\n    /**\n     * @internal\n     */\n    _intersectUnIndexedTriangles(ray, positions, indices, fastCheck, trianglePredicate) {\n        let intersectInfo = null;\n        // Triangles test\n        for (let index = this.verticesStart; index < this.verticesStart + this.verticesCount; index += 3) {\n            const p0 = positions[index];\n            const p1 = positions[index + 1];\n            const p2 = positions[index + 2];\n            if (trianglePredicate && !trianglePredicate(p0, p1, p2, ray, -1, -1, -1)) {\n                continue;\n            }\n            const currentIntersectInfo = ray.intersectsTriangle(p0, p1, p2);\n            if (currentIntersectInfo) {\n                if (currentIntersectInfo.distance < 0) {\n                    continue;\n                }\n                if (fastCheck || !intersectInfo || currentIntersectInfo.distance < intersectInfo.distance) {\n                    intersectInfo = currentIntersectInfo;\n                    intersectInfo.faceId = index / 3;\n                    if (fastCheck) {\n                        break;\n                    }\n                }\n            }\n        }\n        return intersectInfo;\n    }\n    /** @internal */\n    _rebuild() {\n        if (this._linesIndexBuffer) {\n            this._linesIndexBuffer = null;\n        }\n    }\n    // Clone\n    /**\n     * Creates a new submesh from the passed mesh\n     * @param newMesh defines the new hosting mesh\n     * @param newRenderingMesh defines an optional rendering mesh\n     * @returns the new submesh\n     */\n    clone(newMesh, newRenderingMesh) {\n        const result = new SubMesh(this.materialIndex, this.verticesStart, this.verticesCount, this.indexStart, this.indexCount, newMesh, newRenderingMesh, false);\n        if (!this.IsGlobal) {\n            const boundingInfo = this.getBoundingInfo();\n            if (!boundingInfo) {\n                return result;\n            }\n            result._boundingInfo = new BoundingInfo(boundingInfo.minimum, boundingInfo.maximum);\n        }\n        return result;\n    }\n    // Dispose\n    /**\n     * Release associated resources\n     */\n    dispose() {\n        if (this._linesIndexBuffer) {\n            this._mesh.getScene().getEngine()._releaseBuffer(this._linesIndexBuffer);\n            this._linesIndexBuffer = null;\n        }\n        // Remove from mesh\n        const index = this._mesh.subMeshes.indexOf(this);\n        this._mesh.subMeshes.splice(index, 1);\n        this.resetDrawCache();\n    }\n    /**\n     * Gets the class name\n     * @returns the string \"SubMesh\".\n     */\n    getClassName() {\n        return \"SubMesh\";\n    }\n    // Statics\n    /**\n     * Creates a new submesh from indices data\n     * @param materialIndex the index of the main mesh material\n     * @param startIndex the index where to start the copy in the mesh indices array\n     * @param indexCount the number of indices to copy then from the startIndex\n     * @param mesh the main mesh to create the submesh from\n     * @param renderingMesh the optional rendering mesh\n     * @param createBoundingBox defines if bounding box should be created for this submesh\n     * @returns a new submesh\n     */\n    static CreateFromIndices(materialIndex, startIndex, indexCount, mesh, renderingMesh, createBoundingBox = true) {\n        let minVertexIndex = Number.MAX_VALUE;\n        let maxVertexIndex = -Number.MAX_VALUE;\n        const whatWillRender = renderingMesh || mesh;\n        const indices = whatWillRender.getIndices();\n        for (let index = startIndex; index < startIndex + indexCount; index++) {\n            const vertexIndex = indices[index];\n            if (vertexIndex < minVertexIndex) {\n                minVertexIndex = vertexIndex;\n            }\n            if (vertexIndex > maxVertexIndex) {\n                maxVertexIndex = vertexIndex;\n            }\n        }\n        return new SubMesh(materialIndex, minVertexIndex, maxVertexIndex - minVertexIndex + 1, startIndex, indexCount, mesh, renderingMesh, createBoundingBox);\n    }\n}\n//# sourceMappingURL=subMesh.js.map","\nimport { TmpVectors, Vector3 } from \"../Maths/math.vector.js\";\nimport { SubMesh } from \"./subMesh.js\";\n/**\n * @internal\n */\nSubMesh.prototype._projectOnTrianglesToRef = function (vector, positions, indices, step, checkStopper, ref) {\n    // Triangles test\n    const proj = TmpVectors.Vector3[0];\n    const tmp = TmpVectors.Vector3[1];\n    let distance = +Infinity;\n    for (let index = this.indexStart; index < this.indexStart + this.indexCount - (3 - step); index += step) {\n        const indexA = indices[index];\n        const indexB = indices[index + 1];\n        const indexC = indices[index + 2];\n        if (checkStopper && indexC === 0xffffffff) {\n            index += 2;\n            continue;\n        }\n        const p0 = positions[indexA];\n        const p1 = positions[indexB];\n        const p2 = positions[indexC];\n        // stay defensive and don't check against undefined positions.\n        if (!p0 || !p1 || !p2) {\n            continue;\n        }\n        const tmpDist = Vector3.ProjectOnTriangleToRef(vector, p0, p1, p2, tmp);\n        if (tmpDist < distance) {\n            proj.copyFrom(tmp);\n            distance = tmpDist;\n        }\n    }\n    ref.copyFrom(proj);\n    return distance;\n};\n/**\n * @internal\n */\nSubMesh.prototype._projectOnUnIndexedTrianglesToRef = function (vector, positions, indices, ref) {\n    // Triangles test\n    const proj = TmpVectors.Vector3[0];\n    const tmp = TmpVectors.Vector3[1];\n    let distance = +Infinity;\n    for (let index = this.verticesStart; index < this.verticesStart + this.verticesCount; index += 3) {\n        const p0 = positions[index];\n        const p1 = positions[index + 1];\n        const p2 = positions[index + 2];\n        const tmpDist = Vector3.ProjectOnTriangleToRef(vector, p0, p1, p2, tmp);\n        if (tmpDist < distance) {\n            proj.copyFrom(tmp);\n            distance = tmpDist;\n        }\n    }\n    ref.copyFrom(proj);\n    return distance;\n};\nSubMesh.prototype.projectToRef = function (vector, positions, indices, ref) {\n    const material = this.getMaterial();\n    if (!material) {\n        return -1;\n    }\n    let step = 3;\n    let checkStopper = false;\n    switch (material.fillMode) {\n        case 3:\n        case 5:\n        case 6:\n        case 8:\n            return -1;\n        case 7:\n            step = 1;\n            checkStopper = true;\n            break;\n        default:\n            break;\n    }\n    // LineMesh first as it's also a Mesh...\n    if (material.fillMode === 4) {\n        return -1;\n    }\n    else {\n        // Check if mesh is unindexed\n        if (!indices.length && this._mesh._unIndexed) {\n            return this._projectOnUnIndexedTrianglesToRef(vector, positions, indices, ref);\n        }\n        return this._projectOnTrianglesToRef(vector, positions, indices, step, checkStopper, ref);\n    }\n};\n//# sourceMappingURL=subMesh.project.js.map","import { Mesh } from \"../Meshes/mesh.js\";\nimport { VertexBuffer, Buffer } from \"../Buffers/buffer.js\";\nimport { Matrix, Vector3, TmpVectors } from \"../Maths/math.vector.js\";\nimport { Logger } from \"../Misc/logger.js\";\nMesh.prototype.thinInstanceAdd = function (matrix, refresh = true) {\n    if (!this.getScene().getEngine().getCaps().instancedArrays) {\n        Logger.Error(\"Thin Instances are not supported on this device as Instanced Array extension not supported\");\n        return -1;\n    }\n    this._thinInstanceUpdateBufferSize(\"matrix\", Array.isArray(matrix) ? matrix.length : 1);\n    const index = this._thinInstanceDataStorage.instancesCount;\n    if (Array.isArray(matrix)) {\n        for (let i = 0; i < matrix.length; ++i) {\n            this.thinInstanceSetMatrixAt(this._thinInstanceDataStorage.instancesCount++, matrix[i], i === matrix.length - 1 && refresh);\n        }\n    }\n    else {\n        this.thinInstanceSetMatrixAt(this._thinInstanceDataStorage.instancesCount++, matrix, refresh);\n    }\n    return index;\n};\nMesh.prototype.thinInstanceAddSelf = function (refresh = true) {\n    return this.thinInstanceAdd(Matrix.IdentityReadOnly, refresh);\n};\nMesh.prototype.thinInstanceRegisterAttribute = function (kind, stride) {\n    // preserve backward compatibility\n    if (kind === VertexBuffer.ColorKind) {\n        kind = VertexBuffer.ColorInstanceKind;\n    }\n    this.removeVerticesData(kind);\n    this._thinInstanceInitializeUserStorage();\n    this._userThinInstanceBuffersStorage.strides[kind] = stride;\n    this._userThinInstanceBuffersStorage.sizes[kind] = stride * Math.max(32, this._thinInstanceDataStorage.instancesCount); // Initial size\n    this._userThinInstanceBuffersStorage.data[kind] = new Float32Array(this._userThinInstanceBuffersStorage.sizes[kind]);\n    this._userThinInstanceBuffersStorage.vertexBuffers[kind] = new VertexBuffer(this.getEngine(), this._userThinInstanceBuffersStorage.data[kind], kind, true, false, stride, true);\n    this.setVerticesBuffer(this._userThinInstanceBuffersStorage.vertexBuffers[kind]);\n};\nMesh.prototype.thinInstanceSetMatrixAt = function (index, matrix, refresh = true) {\n    if (!this._thinInstanceDataStorage.matrixData || index >= this._thinInstanceDataStorage.instancesCount) {\n        return false;\n    }\n    const matrixData = this._thinInstanceDataStorage.matrixData;\n    matrix.copyToArray(matrixData, index * 16);\n    if (this._thinInstanceDataStorage.worldMatrices) {\n        this._thinInstanceDataStorage.worldMatrices[index] = matrix;\n    }\n    if (refresh) {\n        this.thinInstanceBufferUpdated(\"matrix\");\n        if (!this.doNotSyncBoundingInfo) {\n            this.thinInstanceRefreshBoundingInfo(false);\n        }\n    }\n    return true;\n};\nMesh.prototype.thinInstanceSetAttributeAt = function (kind, index, value, refresh = true) {\n    // preserve backward compatibility\n    if (kind === VertexBuffer.ColorKind) {\n        kind = VertexBuffer.ColorInstanceKind;\n    }\n    if (!this._userThinInstanceBuffersStorage || !this._userThinInstanceBuffersStorage.data[kind] || index >= this._thinInstanceDataStorage.instancesCount) {\n        return false;\n    }\n    this._thinInstanceUpdateBufferSize(kind, 0); // make sur the buffer for the kind attribute is big enough\n    this._userThinInstanceBuffersStorage.data[kind].set(value, index * this._userThinInstanceBuffersStorage.strides[kind]);\n    if (refresh) {\n        this.thinInstanceBufferUpdated(kind);\n    }\n    return true;\n};\nObject.defineProperty(Mesh.prototype, \"thinInstanceCount\", {\n    get: function () {\n        return this._thinInstanceDataStorage.instancesCount;\n    },\n    set: function (value) {\n        var _a, _b;\n        const matrixData = (_a = this._thinInstanceDataStorage.matrixData) !== null && _a !== void 0 ? _a : (_b = this.source) === null || _b === void 0 ? void 0 : _b._thinInstanceDataStorage.matrixData;\n        const numMaxInstances = matrixData ? matrixData.length / 16 : 0;\n        if (value <= numMaxInstances) {\n            this._thinInstanceDataStorage.instancesCount = value;\n        }\n    },\n    enumerable: true,\n    configurable: true,\n});\nMesh.prototype._thinInstanceCreateMatrixBuffer = function (kind, buffer, staticBuffer = false) {\n    // preserve backward compatibility\n    if (kind === VertexBuffer.ColorKind) {\n        kind = VertexBuffer.ColorInstanceKind;\n    }\n    const matrixBuffer = new Buffer(this.getEngine(), buffer, !staticBuffer, 16, false, true);\n    for (let i = 0; i < 4; i++) {\n        this.setVerticesBuffer(matrixBuffer.createVertexBuffer(kind + i, i * 4, 4));\n    }\n    return matrixBuffer;\n};\nMesh.prototype.thinInstanceSetBuffer = function (kind, buffer, stride = 0, staticBuffer = false) {\n    var _a, _b, _c;\n    stride = stride || 16;\n    if (kind === \"matrix\") {\n        (_a = this._thinInstanceDataStorage.matrixBuffer) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._thinInstanceDataStorage.matrixBuffer = null;\n        this._thinInstanceDataStorage.matrixBufferSize = buffer ? buffer.length : 32 * stride;\n        this._thinInstanceDataStorage.matrixData = buffer;\n        this._thinInstanceDataStorage.worldMatrices = null;\n        if (buffer !== null) {\n            this._thinInstanceDataStorage.instancesCount = buffer.length / stride;\n            this._thinInstanceDataStorage.matrixBuffer = this._thinInstanceCreateMatrixBuffer(\"world\", buffer, staticBuffer);\n            if (!this.doNotSyncBoundingInfo) {\n                this.thinInstanceRefreshBoundingInfo(false);\n            }\n        }\n        else {\n            this._thinInstanceDataStorage.instancesCount = 0;\n            if (!this.doNotSyncBoundingInfo) {\n                // mesh has no more thin instances, so need to recompute the bounding box because it's the regular mesh that will now be displayed\n                this.refreshBoundingInfo();\n            }\n        }\n    }\n    else if (kind === \"previousMatrix\") {\n        (_b = this._thinInstanceDataStorage.previousMatrixBuffer) === null || _b === void 0 ? void 0 : _b.dispose();\n        this._thinInstanceDataStorage.previousMatrixBuffer = null;\n        this._thinInstanceDataStorage.previousMatrixData = buffer;\n        if (buffer !== null) {\n            this._thinInstanceDataStorage.previousMatrixBuffer = this._thinInstanceCreateMatrixBuffer(\"previousWorld\", buffer, staticBuffer);\n        }\n    }\n    else {\n        // color for instanced mesh is ColorInstanceKind and not ColorKind because of native that needs to do the differenciation\n        // hot switching kind here to preserve backward compatibility\n        if (kind === VertexBuffer.ColorKind) {\n            kind = VertexBuffer.ColorInstanceKind;\n        }\n        if (buffer === null) {\n            if ((_c = this._userThinInstanceBuffersStorage) === null || _c === void 0 ? void 0 : _c.data[kind]) {\n                this.removeVerticesData(kind);\n                delete this._userThinInstanceBuffersStorage.data[kind];\n                delete this._userThinInstanceBuffersStorage.strides[kind];\n                delete this._userThinInstanceBuffersStorage.sizes[kind];\n                delete this._userThinInstanceBuffersStorage.vertexBuffers[kind];\n            }\n        }\n        else {\n            this._thinInstanceInitializeUserStorage();\n            this._userThinInstanceBuffersStorage.data[kind] = buffer;\n            this._userThinInstanceBuffersStorage.strides[kind] = stride;\n            this._userThinInstanceBuffersStorage.sizes[kind] = buffer.length;\n            this._userThinInstanceBuffersStorage.vertexBuffers[kind] = new VertexBuffer(this.getEngine(), buffer, kind, !staticBuffer, false, stride, true);\n            this.setVerticesBuffer(this._userThinInstanceBuffersStorage.vertexBuffers[kind]);\n        }\n    }\n};\nMesh.prototype.thinInstanceBufferUpdated = function (kind) {\n    var _a, _b, _c;\n    if (kind === \"matrix\") {\n        (_a = this._thinInstanceDataStorage.matrixBuffer) === null || _a === void 0 ? void 0 : _a.updateDirectly(this._thinInstanceDataStorage.matrixData, 0, this._thinInstanceDataStorage.instancesCount);\n    }\n    else if (kind === \"previousMatrix\") {\n        (_b = this._thinInstanceDataStorage.previousMatrixBuffer) === null || _b === void 0 ? void 0 : _b.updateDirectly(this._thinInstanceDataStorage.previousMatrixData, 0, this._thinInstanceDataStorage.instancesCount);\n    }\n    else {\n        // preserve backward compatibility\n        if (kind === VertexBuffer.ColorKind) {\n            kind = VertexBuffer.ColorInstanceKind;\n        }\n        if ((_c = this._userThinInstanceBuffersStorage) === null || _c === void 0 ? void 0 : _c.vertexBuffers[kind]) {\n            this._userThinInstanceBuffersStorage.vertexBuffers[kind].updateDirectly(this._userThinInstanceBuffersStorage.data[kind], 0);\n        }\n    }\n};\nMesh.prototype.thinInstancePartialBufferUpdate = function (kind, data, offset) {\n    var _a;\n    if (kind === \"matrix\") {\n        if (this._thinInstanceDataStorage.matrixBuffer) {\n            this._thinInstanceDataStorage.matrixBuffer.updateDirectly(data, offset);\n        }\n    }\n    else {\n        // preserve backward compatibility\n        if (kind === VertexBuffer.ColorKind) {\n            kind = VertexBuffer.ColorInstanceKind;\n        }\n        if ((_a = this._userThinInstanceBuffersStorage) === null || _a === void 0 ? void 0 : _a.vertexBuffers[kind]) {\n            this._userThinInstanceBuffersStorage.vertexBuffers[kind].updateDirectly(data, offset);\n        }\n    }\n};\nMesh.prototype.thinInstanceGetWorldMatrices = function () {\n    if (!this._thinInstanceDataStorage.matrixData || !this._thinInstanceDataStorage.matrixBuffer) {\n        return [];\n    }\n    const matrixData = this._thinInstanceDataStorage.matrixData;\n    if (!this._thinInstanceDataStorage.worldMatrices) {\n        this._thinInstanceDataStorage.worldMatrices = new Array();\n        for (let i = 0; i < this._thinInstanceDataStorage.instancesCount; ++i) {\n            this._thinInstanceDataStorage.worldMatrices[i] = Matrix.FromArray(matrixData, i * 16);\n        }\n    }\n    return this._thinInstanceDataStorage.worldMatrices;\n};\nMesh.prototype.thinInstanceRefreshBoundingInfo = function (forceRefreshParentInfo = false, applySkeleton = false, applyMorph = false) {\n    if (!this._thinInstanceDataStorage.matrixData || !this._thinInstanceDataStorage.matrixBuffer) {\n        return;\n    }\n    const vectors = this._thinInstanceDataStorage.boundingVectors;\n    if (forceRefreshParentInfo) {\n        vectors.length = 0;\n        this.refreshBoundingInfo(applySkeleton, applyMorph);\n    }\n    const boundingInfo = this.getBoundingInfo();\n    const matrixData = this._thinInstanceDataStorage.matrixData;\n    if (vectors.length === 0) {\n        for (let v = 0; v < boundingInfo.boundingBox.vectors.length; ++v) {\n            vectors.push(boundingInfo.boundingBox.vectors[v].clone());\n        }\n    }\n    TmpVectors.Vector3[0].setAll(Number.POSITIVE_INFINITY); // min\n    TmpVectors.Vector3[1].setAll(Number.NEGATIVE_INFINITY); // max\n    for (let i = 0; i < this._thinInstanceDataStorage.instancesCount; ++i) {\n        Matrix.FromArrayToRef(matrixData, i * 16, TmpVectors.Matrix[0]);\n        for (let v = 0; v < vectors.length; ++v) {\n            Vector3.TransformCoordinatesToRef(vectors[v], TmpVectors.Matrix[0], TmpVectors.Vector3[2]);\n            TmpVectors.Vector3[0].minimizeInPlace(TmpVectors.Vector3[2]);\n            TmpVectors.Vector3[1].maximizeInPlace(TmpVectors.Vector3[2]);\n        }\n    }\n    boundingInfo.reConstruct(TmpVectors.Vector3[0], TmpVectors.Vector3[1]);\n    this._updateBoundingInfo();\n};\nMesh.prototype._thinInstanceUpdateBufferSize = function (kind, numInstances = 1) {\n    var _a, _b, _c;\n    // preserve backward compatibility\n    if (kind === VertexBuffer.ColorKind) {\n        kind = VertexBuffer.ColorInstanceKind;\n    }\n    const kindIsMatrix = kind === \"matrix\";\n    if (!kindIsMatrix && (!this._userThinInstanceBuffersStorage || !this._userThinInstanceBuffersStorage.strides[kind])) {\n        return;\n    }\n    const stride = kindIsMatrix ? 16 : this._userThinInstanceBuffersStorage.strides[kind];\n    const currentSize = kindIsMatrix ? this._thinInstanceDataStorage.matrixBufferSize : this._userThinInstanceBuffersStorage.sizes[kind];\n    let data = kindIsMatrix ? this._thinInstanceDataStorage.matrixData : this._userThinInstanceBuffersStorage.data[kind];\n    const bufferSize = (this._thinInstanceDataStorage.instancesCount + numInstances) * stride;\n    let newSize = currentSize;\n    while (newSize < bufferSize) {\n        newSize *= 2;\n    }\n    if (!data || currentSize != newSize) {\n        if (!data) {\n            data = new Float32Array(newSize);\n        }\n        else {\n            const newData = new Float32Array(newSize);\n            newData.set(data, 0);\n            data = newData;\n        }\n        if (kindIsMatrix) {\n            (_a = this._thinInstanceDataStorage.matrixBuffer) === null || _a === void 0 ? void 0 : _a.dispose();\n            this._thinInstanceDataStorage.matrixBuffer = this._thinInstanceCreateMatrixBuffer(\"world\", data, false);\n            this._thinInstanceDataStorage.matrixData = data;\n            this._thinInstanceDataStorage.matrixBufferSize = newSize;\n            if (this._scene.needsPreviousWorldMatrices && !this._thinInstanceDataStorage.previousMatrixData) {\n                (_b = this._thinInstanceDataStorage.previousMatrixBuffer) === null || _b === void 0 ? void 0 : _b.dispose();\n                this._thinInstanceDataStorage.previousMatrixBuffer = this._thinInstanceCreateMatrixBuffer(\"previousWorld\", data, false);\n            }\n        }\n        else {\n            (_c = this._userThinInstanceBuffersStorage.vertexBuffers[kind]) === null || _c === void 0 ? void 0 : _c.dispose();\n            this._userThinInstanceBuffersStorage.data[kind] = data;\n            this._userThinInstanceBuffersStorage.sizes[kind] = newSize;\n            this._userThinInstanceBuffersStorage.vertexBuffers[kind] = new VertexBuffer(this.getEngine(), data, kind, true, false, stride, true);\n            this.setVerticesBuffer(this._userThinInstanceBuffersStorage.vertexBuffers[kind]);\n        }\n    }\n};\nMesh.prototype._thinInstanceInitializeUserStorage = function () {\n    if (!this._userThinInstanceBuffersStorage) {\n        this._userThinInstanceBuffersStorage = {\n            data: {},\n            sizes: {},\n            vertexBuffers: {},\n            strides: {},\n        };\n    }\n};\nMesh.prototype._disposeThinInstanceSpecificData = function () {\n    var _a;\n    if ((_a = this._thinInstanceDataStorage) === null || _a === void 0 ? void 0 : _a.matrixBuffer) {\n        this._thinInstanceDataStorage.matrixBuffer.dispose();\n        this._thinInstanceDataStorage.matrixBuffer = null;\n    }\n};\n//# sourceMappingURL=thinInstanceMesh.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { serialize, serializeAsVector3, serializeAsQuaternion, SerializationHelper } from \"../Misc/decorators.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Quaternion, Matrix, Vector3, TmpVectors } from \"../Maths/math.vector.js\";\nimport { Node } from \"../node.js\";\nimport { Space } from \"../Maths/math.axis.js\";\n/**\n * A TransformNode is an object that is not rendered but can be used as a center of transformation. This can decrease memory usage and increase rendering speed compared to using an empty mesh as a parent and is less complicated than using a pivot matrix.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/parent_pivot/transform_node\n */\nexport class TransformNode extends Node {\n    /**\n     * Gets or sets the billboard mode. Default is 0.\n     *\n     * | Value | Type | Description |\n     * | --- | --- | --- |\n     * | 0 | BILLBOARDMODE_NONE |  |\n     * | 1 | BILLBOARDMODE_X |  |\n     * | 2 | BILLBOARDMODE_Y |  |\n     * | 4 | BILLBOARDMODE_Z |  |\n     * | 7 | BILLBOARDMODE_ALL |  |\n     *\n     */\n    get billboardMode() {\n        return this._billboardMode;\n    }\n    set billboardMode(value) {\n        if (this._billboardMode === value) {\n            return;\n        }\n        this._billboardMode = value;\n        this._cache.useBillboardPosition = (this._billboardMode & TransformNode.BILLBOARDMODE_USE_POSITION) !== 0;\n        this._computeUseBillboardPath();\n    }\n    /**\n     * Gets or sets a boolean indicating that parent rotation should be preserved when using billboards.\n     * This could be useful for glTF objects where parent rotation helps converting from right handed to left handed\n     */\n    get preserveParentRotationForBillboard() {\n        return this._preserveParentRotationForBillboard;\n    }\n    set preserveParentRotationForBillboard(value) {\n        if (value === this._preserveParentRotationForBillboard) {\n            return;\n        }\n        this._preserveParentRotationForBillboard = value;\n        this._computeUseBillboardPath();\n    }\n    _computeUseBillboardPath() {\n        this._cache.useBillboardPath = this._billboardMode !== TransformNode.BILLBOARDMODE_NONE && !this.preserveParentRotationForBillboard;\n    }\n    /**\n     * Gets or sets the distance of the object to max, often used by skybox\n     */\n    get infiniteDistance() {\n        return this._infiniteDistance;\n    }\n    set infiniteDistance(value) {\n        if (this._infiniteDistance === value) {\n            return;\n        }\n        this._infiniteDistance = value;\n    }\n    constructor(name, scene = null, isPure = true) {\n        super(name, scene);\n        this._forward = new Vector3(0, 0, 1);\n        this._up = new Vector3(0, 1, 0);\n        this._right = new Vector3(1, 0, 0);\n        // Properties\n        this._position = Vector3.Zero();\n        this._rotation = Vector3.Zero();\n        this._rotationQuaternion = null;\n        this._scaling = Vector3.One();\n        this._transformToBoneReferal = null;\n        this._isAbsoluteSynced = false;\n        this._billboardMode = TransformNode.BILLBOARDMODE_NONE;\n        this._preserveParentRotationForBillboard = false;\n        /**\n         * Multiplication factor on scale x/y/z when computing the world matrix. Eg. for a 1x1x1 cube setting this to 2 will make it a 2x2x2 cube\n         */\n        this.scalingDeterminant = 1;\n        this._infiniteDistance = false;\n        /**\n         * Gets or sets a boolean indicating that non uniform scaling (when at least one component is different from others) should be ignored.\n         * By default the system will update normals to compensate\n         */\n        this.ignoreNonUniformScaling = false;\n        /**\n         * Gets or sets a boolean indicating that even if rotationQuaternion is defined, you can keep updating rotation property and Babylon.js will just mix both\n         */\n        this.reIntegrateRotationIntoRotationQuaternion = false;\n        // Cache\n        /** @internal */\n        this._poseMatrix = null;\n        /** @internal */\n        this._localMatrix = Matrix.Zero();\n        this._usePivotMatrix = false;\n        this._absolutePosition = Vector3.Zero();\n        this._absoluteScaling = Vector3.Zero();\n        this._absoluteRotationQuaternion = Quaternion.Identity();\n        this._pivotMatrix = Matrix.Identity();\n        /** @internal */\n        this._postMultiplyPivotMatrix = false;\n        this._isWorldMatrixFrozen = false;\n        /** @internal */\n        this._indexInSceneTransformNodesArray = -1;\n        /**\n         * An event triggered after the world matrix is updated\n         */\n        this.onAfterWorldMatrixUpdateObservable = new Observable();\n        this._nonUniformScaling = false;\n        if (isPure) {\n            this.getScene().addTransformNode(this);\n        }\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"TransformNode\" string\n     */\n    getClassName() {\n        return \"TransformNode\";\n    }\n    /**\n     * Gets or set the node position (default is (0.0, 0.0, 0.0))\n     */\n    get position() {\n        return this._position;\n    }\n    set position(newPosition) {\n        this._position = newPosition;\n        this._isDirty = true;\n    }\n    /**\n     * return true if a pivot has been set\n     * @returns true if a pivot matrix is used\n     */\n    isUsingPivotMatrix() {\n        return this._usePivotMatrix;\n    }\n    /**\n     * Gets or sets the rotation property : a Vector3 defining the rotation value in radians around each local axis X, Y, Z  (default is (0.0, 0.0, 0.0)).\n     * If rotation quaternion is set, this Vector3 will be ignored and copy from the quaternion\n     */\n    get rotation() {\n        return this._rotation;\n    }\n    set rotation(newRotation) {\n        this._rotation = newRotation;\n        this._rotationQuaternion = null;\n        this._isDirty = true;\n    }\n    /**\n     * Gets or sets the scaling property : a Vector3 defining the node scaling along each local axis X, Y, Z (default is (1.0, 1.0, 1.0)).\n     */\n    get scaling() {\n        return this._scaling;\n    }\n    set scaling(newScaling) {\n        this._scaling = newScaling;\n        this._isDirty = true;\n    }\n    /**\n     * Gets or sets the rotation Quaternion property : this a Quaternion object defining the node rotation by using a unit quaternion (undefined by default, but can be null).\n     * If set, only the rotationQuaternion is then used to compute the node rotation (ie. node.rotation will be ignored)\n     */\n    get rotationQuaternion() {\n        return this._rotationQuaternion;\n    }\n    set rotationQuaternion(quaternion) {\n        this._rotationQuaternion = quaternion;\n        //reset the rotation vector.\n        if (quaternion) {\n            this._rotation.setAll(0.0);\n        }\n        this._isDirty = true;\n    }\n    /**\n     * The forward direction of that transform in world space.\n     */\n    get forward() {\n        Vector3.TransformNormalFromFloatsToRef(0, 0, this.getScene().useRightHandedSystem ? -1.0 : 1.0, this.getWorldMatrix(), this._forward);\n        return this._forward.normalize();\n    }\n    /**\n     * The up direction of that transform in world space.\n     */\n    get up() {\n        Vector3.TransformNormalFromFloatsToRef(0, 1, 0, this.getWorldMatrix(), this._up);\n        return this._up.normalize();\n    }\n    /**\n     * The right direction of that transform in world space.\n     */\n    get right() {\n        Vector3.TransformNormalFromFloatsToRef(this.getScene().useRightHandedSystem ? -1.0 : 1.0, 0, 0, this.getWorldMatrix(), this._right);\n        return this._right.normalize();\n    }\n    /**\n     * Copies the parameter passed Matrix into the mesh Pose matrix.\n     * @param matrix the matrix to copy the pose from\n     * @returns this TransformNode.\n     */\n    updatePoseMatrix(matrix) {\n        if (!this._poseMatrix) {\n            this._poseMatrix = matrix.clone();\n            return this;\n        }\n        this._poseMatrix.copyFrom(matrix);\n        return this;\n    }\n    /**\n     * Returns the mesh Pose matrix.\n     * @returns the pose matrix\n     */\n    getPoseMatrix() {\n        if (!this._poseMatrix) {\n            this._poseMatrix = Matrix.Identity();\n        }\n        return this._poseMatrix;\n    }\n    /** @internal */\n    _isSynchronized() {\n        const cache = this._cache;\n        if (this._billboardMode !== cache.billboardMode || this._billboardMode !== TransformNode.BILLBOARDMODE_NONE) {\n            return false;\n        }\n        if (cache.pivotMatrixUpdated) {\n            return false;\n        }\n        if (this._infiniteDistance) {\n            return false;\n        }\n        if (this._position._isDirty) {\n            return false;\n        }\n        if (this._scaling._isDirty) {\n            return false;\n        }\n        if ((this._rotationQuaternion && this._rotationQuaternion._isDirty) || this._rotation._isDirty) {\n            return false;\n        }\n        return true;\n    }\n    /** @internal */\n    _initCache() {\n        super._initCache();\n        const cache = this._cache;\n        cache.localMatrixUpdated = false;\n        cache.billboardMode = -1;\n        cache.infiniteDistance = false;\n        cache.useBillboardPosition = false;\n        cache.useBillboardPath = false;\n    }\n    /**\n     * Returns the current mesh absolute position.\n     * Returns a Vector3.\n     */\n    get absolutePosition() {\n        return this.getAbsolutePosition();\n    }\n    /**\n     * Returns the current mesh absolute scaling.\n     * Returns a Vector3.\n     */\n    get absoluteScaling() {\n        this._syncAbsoluteScalingAndRotation();\n        return this._absoluteScaling;\n    }\n    /**\n     * Returns the current mesh absolute rotation.\n     * Returns a Quaternion.\n     */\n    get absoluteRotationQuaternion() {\n        this._syncAbsoluteScalingAndRotation();\n        return this._absoluteRotationQuaternion;\n    }\n    /**\n     * Sets a new matrix to apply before all other transformation\n     * @param matrix defines the transform matrix\n     * @returns the current TransformNode\n     */\n    setPreTransformMatrix(matrix) {\n        return this.setPivotMatrix(matrix, false);\n    }\n    /**\n     * Sets a new pivot matrix to the current node\n     * @param matrix defines the new pivot matrix to use\n     * @param postMultiplyPivotMatrix defines if the pivot matrix must be cancelled in the world matrix. When this parameter is set to true (default), the inverse of the pivot matrix is also applied at the end to cancel the transformation effect\n     * @returns the current TransformNode\n     */\n    setPivotMatrix(matrix, postMultiplyPivotMatrix = true) {\n        this._pivotMatrix.copyFrom(matrix);\n        this._usePivotMatrix = !this._pivotMatrix.isIdentity();\n        this._cache.pivotMatrixUpdated = true;\n        this._postMultiplyPivotMatrix = postMultiplyPivotMatrix;\n        if (this._postMultiplyPivotMatrix) {\n            if (!this._pivotMatrixInverse) {\n                this._pivotMatrixInverse = Matrix.Invert(this._pivotMatrix);\n            }\n            else {\n                this._pivotMatrix.invertToRef(this._pivotMatrixInverse);\n            }\n        }\n        return this;\n    }\n    /**\n     * Returns the mesh pivot matrix.\n     * Default : Identity.\n     * @returns the matrix\n     */\n    getPivotMatrix() {\n        return this._pivotMatrix;\n    }\n    /**\n     * Instantiate (when possible) or clone that node with its hierarchy\n     * @param newParent defines the new parent to use for the instance (or clone)\n     * @param options defines options to configure how copy is done\n     * @param options.doNotInstantiate defines if the model must be instantiated or just cloned\n     * @param onNewNodeCreated defines an option callback to call when a clone or an instance is created\n     * @returns an instance (or a clone) of the current node with its hierarchy\n     */\n    instantiateHierarchy(newParent = null, options, onNewNodeCreated) {\n        const clone = this.clone(\"Clone of \" + (this.name || this.id), newParent || this.parent, true);\n        if (clone) {\n            if (onNewNodeCreated) {\n                onNewNodeCreated(this, clone);\n            }\n        }\n        for (const child of this.getChildTransformNodes(true)) {\n            child.instantiateHierarchy(clone, options, onNewNodeCreated);\n        }\n        return clone;\n    }\n    /**\n     * Prevents the World matrix to be computed any longer\n     * @param newWorldMatrix defines an optional matrix to use as world matrix\n     * @param decompose defines whether to decompose the given newWorldMatrix or directly assign\n     * @returns the TransformNode.\n     */\n    freezeWorldMatrix(newWorldMatrix = null, decompose = false) {\n        if (newWorldMatrix) {\n            if (decompose) {\n                this._rotation.setAll(0);\n                this._rotationQuaternion = this._rotationQuaternion || Quaternion.Identity();\n                newWorldMatrix.decompose(this._scaling, this._rotationQuaternion, this._position);\n                this.computeWorldMatrix(true);\n            }\n            else {\n                this._worldMatrix = newWorldMatrix;\n                this._absolutePosition.copyFromFloats(this._worldMatrix.m[12], this._worldMatrix.m[13], this._worldMatrix.m[14]);\n                this._afterComputeWorldMatrix();\n            }\n        }\n        else {\n            this._isWorldMatrixFrozen = false; // no guarantee world is not already frozen, switch off temporarily\n            this.computeWorldMatrix(true);\n        }\n        this._isDirty = false;\n        this._isWorldMatrixFrozen = true;\n        return this;\n    }\n    /**\n     * Allows back the World matrix computation.\n     * @returns the TransformNode.\n     */\n    unfreezeWorldMatrix() {\n        this._isWorldMatrixFrozen = false;\n        this.computeWorldMatrix(true);\n        return this;\n    }\n    /**\n     * True if the World matrix has been frozen.\n     */\n    get isWorldMatrixFrozen() {\n        return this._isWorldMatrixFrozen;\n    }\n    /**\n     * Returns the mesh absolute position in the World.\n     * @returns a Vector3.\n     */\n    getAbsolutePosition() {\n        this.computeWorldMatrix();\n        return this._absolutePosition;\n    }\n    /**\n     * Sets the mesh absolute position in the World from a Vector3 or an Array(3).\n     * @param absolutePosition the absolute position to set\n     * @returns the TransformNode.\n     */\n    setAbsolutePosition(absolutePosition) {\n        if (!absolutePosition) {\n            return this;\n        }\n        let absolutePositionX;\n        let absolutePositionY;\n        let absolutePositionZ;\n        if (absolutePosition.x === undefined) {\n            if (arguments.length < 3) {\n                return this;\n            }\n            absolutePositionX = arguments[0];\n            absolutePositionY = arguments[1];\n            absolutePositionZ = arguments[2];\n        }\n        else {\n            absolutePositionX = absolutePosition.x;\n            absolutePositionY = absolutePosition.y;\n            absolutePositionZ = absolutePosition.z;\n        }\n        if (this.parent) {\n            const invertParentWorldMatrix = TmpVectors.Matrix[0];\n            this.parent.getWorldMatrix().invertToRef(invertParentWorldMatrix);\n            Vector3.TransformCoordinatesFromFloatsToRef(absolutePositionX, absolutePositionY, absolutePositionZ, invertParentWorldMatrix, this.position);\n        }\n        else {\n            this.position.x = absolutePositionX;\n            this.position.y = absolutePositionY;\n            this.position.z = absolutePositionZ;\n        }\n        this._absolutePosition.copyFrom(absolutePosition);\n        return this;\n    }\n    /**\n     * Sets the mesh position in its local space.\n     * @param vector3 the position to set in localspace\n     * @returns the TransformNode.\n     */\n    setPositionWithLocalVector(vector3) {\n        this.computeWorldMatrix();\n        this.position = Vector3.TransformNormal(vector3, this._localMatrix);\n        return this;\n    }\n    /**\n     * Returns the mesh position in the local space from the current World matrix values.\n     * @returns a new Vector3.\n     */\n    getPositionExpressedInLocalSpace() {\n        this.computeWorldMatrix();\n        const invLocalWorldMatrix = TmpVectors.Matrix[0];\n        this._localMatrix.invertToRef(invLocalWorldMatrix);\n        return Vector3.TransformNormal(this.position, invLocalWorldMatrix);\n    }\n    /**\n     * Translates the mesh along the passed Vector3 in its local space.\n     * @param vector3 the distance to translate in localspace\n     * @returns the TransformNode.\n     */\n    locallyTranslate(vector3) {\n        this.computeWorldMatrix(true);\n        this.position = Vector3.TransformCoordinates(vector3, this._localMatrix);\n        return this;\n    }\n    /**\n     * Orients a mesh towards a target point. Mesh must be drawn facing user.\n     * @param targetPoint the position (must be in same space as current mesh) to look at\n     * @param yawCor optional yaw (y-axis) correction in radians\n     * @param pitchCor optional pitch (x-axis) correction in radians\n     * @param rollCor optional roll (z-axis) correction in radians\n     * @param space the chosen space of the target\n     * @returns the TransformNode.\n     */\n    lookAt(targetPoint, yawCor = 0, pitchCor = 0, rollCor = 0, space = Space.LOCAL) {\n        const dv = TransformNode._LookAtVectorCache;\n        const pos = space === Space.LOCAL ? this.position : this.getAbsolutePosition();\n        targetPoint.subtractToRef(pos, dv);\n        this.setDirection(dv, yawCor, pitchCor, rollCor);\n        // Correct for parent's rotation offset\n        if (space === Space.WORLD && this.parent) {\n            if (this.rotationQuaternion) {\n                // Get local rotation matrix of the looking object\n                const rotationMatrix = TmpVectors.Matrix[0];\n                this.rotationQuaternion.toRotationMatrix(rotationMatrix);\n                // Offset rotation by parent's inverted rotation matrix to correct in world space\n                const parentRotationMatrix = TmpVectors.Matrix[1];\n                this.parent.getWorldMatrix().getRotationMatrixToRef(parentRotationMatrix);\n                parentRotationMatrix.invert();\n                rotationMatrix.multiplyToRef(parentRotationMatrix, rotationMatrix);\n                this.rotationQuaternion.fromRotationMatrix(rotationMatrix);\n            }\n            else {\n                // Get local rotation matrix of the looking object\n                const quaternionRotation = TmpVectors.Quaternion[0];\n                Quaternion.FromEulerVectorToRef(this.rotation, quaternionRotation);\n                const rotationMatrix = TmpVectors.Matrix[0];\n                quaternionRotation.toRotationMatrix(rotationMatrix);\n                // Offset rotation by parent's inverted rotation matrix to correct in world space\n                const parentRotationMatrix = TmpVectors.Matrix[1];\n                this.parent.getWorldMatrix().getRotationMatrixToRef(parentRotationMatrix);\n                parentRotationMatrix.invert();\n                rotationMatrix.multiplyToRef(parentRotationMatrix, rotationMatrix);\n                quaternionRotation.fromRotationMatrix(rotationMatrix);\n                quaternionRotation.toEulerAnglesToRef(this.rotation);\n            }\n        }\n        return this;\n    }\n    /**\n     * Returns a new Vector3 that is the localAxis, expressed in the mesh local space, rotated like the mesh.\n     * This Vector3 is expressed in the World space.\n     * @param localAxis axis to rotate\n     * @returns a new Vector3 that is the localAxis, expressed in the mesh local space, rotated like the mesh.\n     */\n    getDirection(localAxis) {\n        const result = Vector3.Zero();\n        this.getDirectionToRef(localAxis, result);\n        return result;\n    }\n    /**\n     * Sets the Vector3 \"result\" as the rotated Vector3 \"localAxis\" in the same rotation than the mesh.\n     * localAxis is expressed in the mesh local space.\n     * result is computed in the World space from the mesh World matrix.\n     * @param localAxis axis to rotate\n     * @param result the resulting transformnode\n     * @returns this TransformNode.\n     */\n    getDirectionToRef(localAxis, result) {\n        Vector3.TransformNormalToRef(localAxis, this.getWorldMatrix(), result);\n        return this;\n    }\n    /**\n     * Sets this transform node rotation to the given local axis.\n     * @param localAxis the axis in local space\n     * @param yawCor optional yaw (y-axis) correction in radians\n     * @param pitchCor optional pitch (x-axis) correction in radians\n     * @param rollCor optional roll (z-axis) correction in radians\n     * @returns this TransformNode\n     */\n    setDirection(localAxis, yawCor = 0, pitchCor = 0, rollCor = 0) {\n        const yaw = -Math.atan2(localAxis.z, localAxis.x) + Math.PI / 2;\n        const len = Math.sqrt(localAxis.x * localAxis.x + localAxis.z * localAxis.z);\n        const pitch = -Math.atan2(localAxis.y, len);\n        if (this.rotationQuaternion) {\n            Quaternion.RotationYawPitchRollToRef(yaw + yawCor, pitch + pitchCor, rollCor, this.rotationQuaternion);\n        }\n        else {\n            this.rotation.x = pitch + pitchCor;\n            this.rotation.y = yaw + yawCor;\n            this.rotation.z = rollCor;\n        }\n        return this;\n    }\n    /**\n     * Sets a new pivot point to the current node\n     * @param point defines the new pivot point to use\n     * @param space defines if the point is in world or local space (local by default)\n     * @returns the current TransformNode\n     */\n    setPivotPoint(point, space = Space.LOCAL) {\n        if (this.getScene().getRenderId() == 0) {\n            this.computeWorldMatrix(true);\n        }\n        const wm = this.getWorldMatrix();\n        if (space == Space.WORLD) {\n            const tmat = TmpVectors.Matrix[0];\n            wm.invertToRef(tmat);\n            point = Vector3.TransformCoordinates(point, tmat);\n        }\n        return this.setPivotMatrix(Matrix.Translation(-point.x, -point.y, -point.z), true);\n    }\n    /**\n     * Returns a new Vector3 set with the mesh pivot point coordinates in the local space.\n     * @returns the pivot point\n     */\n    getPivotPoint() {\n        const point = Vector3.Zero();\n        this.getPivotPointToRef(point);\n        return point;\n    }\n    /**\n     * Sets the passed Vector3 \"result\" with the coordinates of the mesh pivot point in the local space.\n     * @param result the vector3 to store the result\n     * @returns this TransformNode.\n     */\n    getPivotPointToRef(result) {\n        result.x = -this._pivotMatrix.m[12];\n        result.y = -this._pivotMatrix.m[13];\n        result.z = -this._pivotMatrix.m[14];\n        return this;\n    }\n    /**\n     * Returns a new Vector3 set with the mesh pivot point World coordinates.\n     * @returns a new Vector3 set with the mesh pivot point World coordinates.\n     */\n    getAbsolutePivotPoint() {\n        const point = Vector3.Zero();\n        this.getAbsolutePivotPointToRef(point);\n        return point;\n    }\n    /**\n     * Sets the Vector3 \"result\" coordinates with the mesh pivot point World coordinates.\n     * @param result vector3 to store the result\n     * @returns this TransformNode.\n     */\n    getAbsolutePivotPointToRef(result) {\n        this.getPivotPointToRef(result);\n        Vector3.TransformCoordinatesToRef(result, this.getWorldMatrix(), result);\n        return this;\n    }\n    /**\n     * Flag the transform node as dirty (Forcing it to update everything)\n     * @param property if set to \"rotation\" the objects rotationQuaternion will be set to null\n     * @returns this  node\n     */\n    markAsDirty(property) {\n        if (this._isDirty) {\n            return this;\n        }\n        // We need to explicitly update the children\n        // as the scene.evaluateActiveMeshes will not poll the transform nodes\n        if (this._children) {\n            for (const child of this._children) {\n                child.markAsDirty(property);\n            }\n        }\n        return super.markAsDirty(property);\n    }\n    /**\n     * Defines the passed node as the parent of the current node.\n     * The node will remain exactly where it is and its position / rotation will be updated accordingly.\n     * Note that if the mesh has a pivot matrix / point defined it will be applied after the parent was updated.\n     * In that case the node will not remain in the same space as it is, as the pivot will be applied.\n     * To avoid this, you can set updatePivot to true and the pivot will be updated to identity\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/parent_pivot/parent\n     * @param node the node ot set as the parent\n     * @param preserveScalingSign if true, keep scaling sign of child. Otherwise, scaling sign might change.\n     * @param updatePivot if true, update the pivot matrix to keep the node in the same space as before\n     * @returns this TransformNode.\n     */\n    setParent(node, preserveScalingSign = false, updatePivot = false) {\n        if (!node && !this.parent) {\n            return this;\n        }\n        const quatRotation = TmpVectors.Quaternion[0];\n        const position = TmpVectors.Vector3[0];\n        const scale = TmpVectors.Vector3[1];\n        const invParentMatrix = TmpVectors.Matrix[1];\n        Matrix.IdentityToRef(invParentMatrix);\n        const composedMatrix = TmpVectors.Matrix[0];\n        this.computeWorldMatrix(true);\n        let currentRotation = this.rotationQuaternion;\n        if (!currentRotation) {\n            currentRotation = TransformNode._TmpRotation;\n            Quaternion.RotationYawPitchRollToRef(this._rotation.y, this._rotation.x, this._rotation.z, currentRotation);\n        }\n        // current global transformation without pivot\n        Matrix.ComposeToRef(this.scaling, currentRotation, this.position, composedMatrix);\n        if (this.parent) {\n            composedMatrix.multiplyToRef(this.parent.computeWorldMatrix(true), composedMatrix);\n        }\n        // is a node was set, calculate the difference between this and the node\n        if (node) {\n            node.computeWorldMatrix(true).invertToRef(invParentMatrix);\n            composedMatrix.multiplyToRef(invParentMatrix, composedMatrix);\n        }\n        composedMatrix.decompose(scale, quatRotation, position, preserveScalingSign ? this : undefined);\n        if (this.rotationQuaternion) {\n            this.rotationQuaternion.copyFrom(quatRotation);\n        }\n        else {\n            quatRotation.toEulerAnglesToRef(this.rotation);\n        }\n        this.scaling.copyFrom(scale);\n        this.position.copyFrom(position);\n        this.parent = node;\n        if (updatePivot) {\n            this.setPivotMatrix(Matrix.Identity());\n        }\n        return this;\n    }\n    /**\n     * True if the scaling property of this object is non uniform eg. (1,2,1)\n     */\n    get nonUniformScaling() {\n        return this._nonUniformScaling;\n    }\n    /**\n     * @internal\n     */\n    _updateNonUniformScalingState(value) {\n        if (this._nonUniformScaling === value) {\n            return false;\n        }\n        this._nonUniformScaling = value;\n        return true;\n    }\n    /**\n     * Attach the current TransformNode to another TransformNode associated with a bone\n     * @param bone Bone affecting the TransformNode\n     * @param affectedTransformNode TransformNode associated with the bone\n     * @returns this object\n     */\n    attachToBone(bone, affectedTransformNode) {\n        this._currentParentWhenAttachingToBone = this.parent;\n        this._transformToBoneReferal = affectedTransformNode;\n        this.parent = bone;\n        bone.getSkeleton().prepare();\n        if (bone.getWorldMatrix().determinant() < 0) {\n            this.scalingDeterminant *= -1;\n        }\n        return this;\n    }\n    /**\n     * Detach the transform node if its associated with a bone\n     * @param resetToPreviousParent Indicates if the parent that was in effect when attachToBone was called should be set back or if we should set parent to null instead (defaults to the latter)\n     * @returns this object\n     */\n    detachFromBone(resetToPreviousParent = false) {\n        if (!this.parent) {\n            if (resetToPreviousParent) {\n                this.parent = this._currentParentWhenAttachingToBone;\n            }\n            return this;\n        }\n        if (this.parent.getWorldMatrix().determinant() < 0) {\n            this.scalingDeterminant *= -1;\n        }\n        this._transformToBoneReferal = null;\n        if (resetToPreviousParent) {\n            this.parent = this._currentParentWhenAttachingToBone;\n        }\n        else {\n            this.parent = null;\n        }\n        return this;\n    }\n    /**\n     * Rotates the mesh around the axis vector for the passed angle (amount) expressed in radians, in the given space.\n     * space (default LOCAL) can be either Space.LOCAL, either Space.WORLD.\n     * Note that the property `rotationQuaternion` is then automatically updated and the property `rotation` is set to (0,0,0) and no longer used.\n     * The passed axis is also normalized.\n     * @param axis the axis to rotate around\n     * @param amount the amount to rotate in radians\n     * @param space Space to rotate in (Default: local)\n     * @returns the TransformNode.\n     */\n    rotate(axis, amount, space) {\n        axis.normalize();\n        if (!this.rotationQuaternion) {\n            this.rotationQuaternion = this.rotation.toQuaternion();\n            this.rotation.setAll(0);\n        }\n        let rotationQuaternion;\n        if (!space || space === Space.LOCAL) {\n            rotationQuaternion = Quaternion.RotationAxisToRef(axis, amount, TransformNode._RotationAxisCache);\n            this.rotationQuaternion.multiplyToRef(rotationQuaternion, this.rotationQuaternion);\n        }\n        else {\n            if (this.parent) {\n                const invertParentWorldMatrix = TmpVectors.Matrix[0];\n                this.parent.getWorldMatrix().invertToRef(invertParentWorldMatrix);\n                axis = Vector3.TransformNormal(axis, invertParentWorldMatrix);\n            }\n            rotationQuaternion = Quaternion.RotationAxisToRef(axis, amount, TransformNode._RotationAxisCache);\n            rotationQuaternion.multiplyToRef(this.rotationQuaternion, this.rotationQuaternion);\n        }\n        return this;\n    }\n    /**\n     * Rotates the mesh around the axis vector for the passed angle (amount) expressed in radians, in world space.\n     * Note that the property `rotationQuaternion` is then automatically updated and the property `rotation` is set to (0,0,0) and no longer used.\n     * The passed axis is also normalized. .\n     * Method is based on http://www.euclideanspace.com/maths/geometry/affine/aroundPoint/index.htm\n     * @param point the point to rotate around\n     * @param axis the axis to rotate around\n     * @param amount the amount to rotate in radians\n     * @returns the TransformNode\n     */\n    rotateAround(point, axis, amount) {\n        axis.normalize();\n        if (!this.rotationQuaternion) {\n            this.rotationQuaternion = Quaternion.RotationYawPitchRoll(this.rotation.y, this.rotation.x, this.rotation.z);\n            this.rotation.setAll(0);\n        }\n        const tmpVector = TmpVectors.Vector3[0];\n        const finalScale = TmpVectors.Vector3[1];\n        const finalTranslation = TmpVectors.Vector3[2];\n        const finalRotation = TmpVectors.Quaternion[0];\n        const translationMatrix = TmpVectors.Matrix[0]; // T\n        const translationMatrixInv = TmpVectors.Matrix[1]; // T'\n        const rotationMatrix = TmpVectors.Matrix[2]; // R\n        const finalMatrix = TmpVectors.Matrix[3]; // T' x R x T\n        point.subtractToRef(this.position, tmpVector);\n        Matrix.TranslationToRef(tmpVector.x, tmpVector.y, tmpVector.z, translationMatrix); // T\n        Matrix.TranslationToRef(-tmpVector.x, -tmpVector.y, -tmpVector.z, translationMatrixInv); // T'\n        Matrix.RotationAxisToRef(axis, amount, rotationMatrix); // R\n        translationMatrixInv.multiplyToRef(rotationMatrix, finalMatrix); // T' x R\n        finalMatrix.multiplyToRef(translationMatrix, finalMatrix); // T' x R x T\n        finalMatrix.decompose(finalScale, finalRotation, finalTranslation);\n        this.position.addInPlace(finalTranslation);\n        finalRotation.multiplyToRef(this.rotationQuaternion, this.rotationQuaternion);\n        return this;\n    }\n    /**\n     * Translates the mesh along the axis vector for the passed distance in the given space.\n     * space (default LOCAL) can be either Space.LOCAL, either Space.WORLD.\n     * @param axis the axis to translate in\n     * @param distance the distance to translate\n     * @param space Space to rotate in (Default: local)\n     * @returns the TransformNode.\n     */\n    translate(axis, distance, space) {\n        const displacementVector = axis.scale(distance);\n        if (!space || space === Space.LOCAL) {\n            const tempV3 = this.getPositionExpressedInLocalSpace().add(displacementVector);\n            this.setPositionWithLocalVector(tempV3);\n        }\n        else {\n            this.setAbsolutePosition(this.getAbsolutePosition().add(displacementVector));\n        }\n        return this;\n    }\n    /**\n     * Adds a rotation step to the mesh current rotation.\n     * x, y, z are Euler angles expressed in radians.\n     * This methods updates the current mesh rotation, either mesh.rotation, either mesh.rotationQuaternion if it's set.\n     * This means this rotation is made in the mesh local space only.\n     * It's useful to set a custom rotation order different from the BJS standard one YXZ.\n     * Example : this rotates the mesh first around its local X axis, then around its local Z axis, finally around its local Y axis.\n     * ```javascript\n     * mesh.addRotation(x1, 0, 0).addRotation(0, 0, z2).addRotation(0, 0, y3);\n     * ```\n     * Note that `addRotation()` accumulates the passed rotation values to the current ones and computes the .rotation or .rotationQuaternion updated values.\n     * Under the hood, only quaternions are used. So it's a little faster is you use .rotationQuaternion because it doesn't need to translate them back to Euler angles.\n     * @param x Rotation to add\n     * @param y Rotation to add\n     * @param z Rotation to add\n     * @returns the TransformNode.\n     */\n    addRotation(x, y, z) {\n        let rotationQuaternion;\n        if (this.rotationQuaternion) {\n            rotationQuaternion = this.rotationQuaternion;\n        }\n        else {\n            rotationQuaternion = TmpVectors.Quaternion[1];\n            Quaternion.RotationYawPitchRollToRef(this.rotation.y, this.rotation.x, this.rotation.z, rotationQuaternion);\n        }\n        const accumulation = TmpVectors.Quaternion[0];\n        Quaternion.RotationYawPitchRollToRef(y, x, z, accumulation);\n        rotationQuaternion.multiplyInPlace(accumulation);\n        if (!this.rotationQuaternion) {\n            rotationQuaternion.toEulerAnglesToRef(this.rotation);\n        }\n        return this;\n    }\n    /**\n     * @internal\n     */\n    _getEffectiveParent() {\n        return this.parent;\n    }\n    /**\n     * Returns whether the transform node world matrix computation needs the camera information to be computed.\n     * This is the case when the node is a billboard or has an infinite distance for instance.\n     * @returns true if the world matrix computation needs the camera information to be computed\n     */\n    isWorldMatrixCameraDependent() {\n        return (this._infiniteDistance && !this.parent) || (this._billboardMode !== TransformNode.BILLBOARDMODE_NONE && !this.preserveParentRotationForBillboard);\n    }\n    /**\n     * Computes the world matrix of the node\n     * @param force defines if the cache version should be invalidated forcing the world matrix to be created from scratch\n     * @param camera defines the camera used if different from the scene active camera (This is used with modes like Billboard or infinite distance)\n     * @returns the world matrix\n     */\n    computeWorldMatrix(force = false, camera = null) {\n        if (this._isWorldMatrixFrozen && !this._isDirty) {\n            return this._worldMatrix;\n        }\n        const currentRenderId = this.getScene().getRenderId();\n        if (!this._isDirty && !force && (this._currentRenderId === currentRenderId || this.isSynchronized())) {\n            this._currentRenderId = currentRenderId;\n            return this._worldMatrix;\n        }\n        camera = camera || this.getScene().activeCamera;\n        this._updateCache();\n        const cache = this._cache;\n        cache.pivotMatrixUpdated = false;\n        cache.billboardMode = this.billboardMode;\n        cache.infiniteDistance = this.infiniteDistance;\n        cache.parent = this._parentNode;\n        this._currentRenderId = currentRenderId;\n        this._childUpdateId += 1;\n        this._isDirty = false;\n        this._position._isDirty = false;\n        this._rotation._isDirty = false;\n        this._scaling._isDirty = false;\n        const parent = this._getEffectiveParent();\n        // Scaling\n        const scaling = TransformNode._TmpScaling;\n        let translation = this._position;\n        // Translation\n        if (this._infiniteDistance) {\n            if (!this.parent && camera) {\n                const cameraWorldMatrix = camera.getWorldMatrix();\n                const cameraGlobalPosition = new Vector3(cameraWorldMatrix.m[12], cameraWorldMatrix.m[13], cameraWorldMatrix.m[14]);\n                translation = TransformNode._TmpTranslation;\n                translation.copyFromFloats(this._position.x + cameraGlobalPosition.x, this._position.y + cameraGlobalPosition.y, this._position.z + cameraGlobalPosition.z);\n            }\n        }\n        // Scaling\n        scaling.copyFromFloats(this._scaling.x * this.scalingDeterminant, this._scaling.y * this.scalingDeterminant, this._scaling.z * this.scalingDeterminant);\n        // Rotation\n        let rotation;\n        if (this._rotationQuaternion) {\n            this._rotationQuaternion._isDirty = false;\n            rotation = this._rotationQuaternion;\n            if (this.reIntegrateRotationIntoRotationQuaternion) {\n                const len = this.rotation.lengthSquared();\n                if (len) {\n                    this._rotationQuaternion.multiplyInPlace(Quaternion.RotationYawPitchRoll(this._rotation.y, this._rotation.x, this._rotation.z));\n                    this._rotation.copyFromFloats(0, 0, 0);\n                }\n            }\n        }\n        else {\n            rotation = TransformNode._TmpRotation;\n            Quaternion.RotationYawPitchRollToRef(this._rotation.y, this._rotation.x, this._rotation.z, rotation);\n        }\n        // Compose\n        if (this._usePivotMatrix) {\n            const scaleMatrix = TmpVectors.Matrix[1];\n            Matrix.ScalingToRef(scaling.x, scaling.y, scaling.z, scaleMatrix);\n            // Rotation\n            const rotationMatrix = TmpVectors.Matrix[0];\n            rotation.toRotationMatrix(rotationMatrix);\n            // Composing transformations\n            this._pivotMatrix.multiplyToRef(scaleMatrix, TmpVectors.Matrix[4]);\n            TmpVectors.Matrix[4].multiplyToRef(rotationMatrix, this._localMatrix);\n            // Post multiply inverse of pivotMatrix\n            if (this._postMultiplyPivotMatrix) {\n                this._localMatrix.multiplyToRef(this._pivotMatrixInverse, this._localMatrix);\n            }\n            this._localMatrix.addTranslationFromFloats(translation.x, translation.y, translation.z);\n        }\n        else {\n            Matrix.ComposeToRef(scaling, rotation, translation, this._localMatrix);\n        }\n        // Parent\n        if (parent && parent.getWorldMatrix) {\n            if (force) {\n                parent.computeWorldMatrix(force);\n            }\n            if (cache.useBillboardPath) {\n                if (this._transformToBoneReferal) {\n                    parent.getWorldMatrix().multiplyToRef(this._transformToBoneReferal.getWorldMatrix(), TmpVectors.Matrix[7]);\n                }\n                else {\n                    TmpVectors.Matrix[7].copyFrom(parent.getWorldMatrix());\n                }\n                // Extract scaling and translation from parent\n                const translation = TmpVectors.Vector3[5];\n                const scale = TmpVectors.Vector3[6];\n                const orientation = TmpVectors.Quaternion[0];\n                TmpVectors.Matrix[7].decompose(scale, orientation, translation);\n                Matrix.ScalingToRef(scale.x, scale.y, scale.z, TmpVectors.Matrix[7]);\n                TmpVectors.Matrix[7].setTranslation(translation);\n                if (TransformNode.BillboardUseParentOrientation) {\n                    // set localMatrix translation to be transformed against parent's orientation.\n                    this._position.applyRotationQuaternionToRef(orientation, translation);\n                    this._localMatrix.setTranslation(translation);\n                }\n                this._localMatrix.multiplyToRef(TmpVectors.Matrix[7], this._worldMatrix);\n            }\n            else {\n                if (this._transformToBoneReferal) {\n                    this._localMatrix.multiplyToRef(parent.getWorldMatrix(), TmpVectors.Matrix[6]);\n                    TmpVectors.Matrix[6].multiplyToRef(this._transformToBoneReferal.getWorldMatrix(), this._worldMatrix);\n                }\n                else {\n                    this._localMatrix.multiplyToRef(parent.getWorldMatrix(), this._worldMatrix);\n                }\n            }\n            this._markSyncedWithParent();\n        }\n        else {\n            this._worldMatrix.copyFrom(this._localMatrix);\n        }\n        // Billboarding based on camera orientation (testing PG:http://www.babylonjs-playground.com/#UJEIL#13)\n        if (cache.useBillboardPath && camera && this.billboardMode && !cache.useBillboardPosition) {\n            const storedTranslation = TmpVectors.Vector3[0];\n            this._worldMatrix.getTranslationToRef(storedTranslation); // Save translation\n            // Cancel camera rotation\n            TmpVectors.Matrix[1].copyFrom(camera.getViewMatrix());\n            TmpVectors.Matrix[1].setTranslationFromFloats(0, 0, 0);\n            TmpVectors.Matrix[1].invertToRef(TmpVectors.Matrix[0]);\n            if ((this.billboardMode & TransformNode.BILLBOARDMODE_ALL) !== TransformNode.BILLBOARDMODE_ALL) {\n                TmpVectors.Matrix[0].decompose(undefined, TmpVectors.Quaternion[0], undefined);\n                const eulerAngles = TmpVectors.Vector3[1];\n                TmpVectors.Quaternion[0].toEulerAnglesToRef(eulerAngles);\n                if ((this.billboardMode & TransformNode.BILLBOARDMODE_X) !== TransformNode.BILLBOARDMODE_X) {\n                    eulerAngles.x = 0;\n                }\n                if ((this.billboardMode & TransformNode.BILLBOARDMODE_Y) !== TransformNode.BILLBOARDMODE_Y) {\n                    eulerAngles.y = 0;\n                }\n                if ((this.billboardMode & TransformNode.BILLBOARDMODE_Z) !== TransformNode.BILLBOARDMODE_Z) {\n                    eulerAngles.z = 0;\n                }\n                Matrix.RotationYawPitchRollToRef(eulerAngles.y, eulerAngles.x, eulerAngles.z, TmpVectors.Matrix[0]);\n            }\n            this._worldMatrix.setTranslationFromFloats(0, 0, 0);\n            this._worldMatrix.multiplyToRef(TmpVectors.Matrix[0], this._worldMatrix);\n            // Restore translation\n            this._worldMatrix.setTranslation(TmpVectors.Vector3[0]);\n        }\n        // Billboarding based on camera position\n        else if (cache.useBillboardPath && camera && cache.useBillboardPosition) {\n            const storedTranslation = TmpVectors.Vector3[0];\n            // Save translation\n            this._worldMatrix.getTranslationToRef(storedTranslation);\n            // Compute camera position in local space\n            const cameraPosition = camera.globalPosition;\n            this._worldMatrix.invertToRef(TmpVectors.Matrix[1]);\n            const camInObjSpace = TmpVectors.Vector3[1];\n            Vector3.TransformCoordinatesToRef(cameraPosition, TmpVectors.Matrix[1], camInObjSpace);\n            camInObjSpace.normalize();\n            // Find the lookAt info in local space\n            const yaw = -Math.atan2(camInObjSpace.z, camInObjSpace.x) + Math.PI / 2;\n            const len = Math.sqrt(camInObjSpace.x * camInObjSpace.x + camInObjSpace.z * camInObjSpace.z);\n            const pitch = -Math.atan2(camInObjSpace.y, len);\n            Quaternion.RotationYawPitchRollToRef(yaw, pitch, 0, TmpVectors.Quaternion[0]);\n            if ((this.billboardMode & TransformNode.BILLBOARDMODE_ALL) !== TransformNode.BILLBOARDMODE_ALL) {\n                const eulerAngles = TmpVectors.Vector3[1];\n                TmpVectors.Quaternion[0].toEulerAnglesToRef(eulerAngles);\n                if ((this.billboardMode & TransformNode.BILLBOARDMODE_X) !== TransformNode.BILLBOARDMODE_X) {\n                    eulerAngles.x = 0;\n                }\n                if ((this.billboardMode & TransformNode.BILLBOARDMODE_Y) !== TransformNode.BILLBOARDMODE_Y) {\n                    eulerAngles.y = 0;\n                }\n                if ((this.billboardMode & TransformNode.BILLBOARDMODE_Z) !== TransformNode.BILLBOARDMODE_Z) {\n                    eulerAngles.z = 0;\n                }\n                Matrix.RotationYawPitchRollToRef(eulerAngles.y, eulerAngles.x, eulerAngles.z, TmpVectors.Matrix[0]);\n            }\n            else {\n                Matrix.FromQuaternionToRef(TmpVectors.Quaternion[0], TmpVectors.Matrix[0]);\n            }\n            // Cancel translation\n            this._worldMatrix.setTranslationFromFloats(0, 0, 0);\n            // Rotate according to lookat (diff from local to lookat)\n            this._worldMatrix.multiplyToRef(TmpVectors.Matrix[0], this._worldMatrix);\n            // Restore translation\n            this._worldMatrix.setTranslation(TmpVectors.Vector3[0]);\n        }\n        // Normal matrix\n        if (!this.ignoreNonUniformScaling) {\n            if (this._scaling.isNonUniformWithinEpsilon(0.000001)) {\n                this._updateNonUniformScalingState(true);\n            }\n            else if (parent && parent._nonUniformScaling) {\n                this._updateNonUniformScalingState(parent._nonUniformScaling);\n            }\n            else {\n                this._updateNonUniformScalingState(false);\n            }\n        }\n        else {\n            this._updateNonUniformScalingState(false);\n        }\n        this._afterComputeWorldMatrix();\n        // Absolute position\n        this._absolutePosition.copyFromFloats(this._worldMatrix.m[12], this._worldMatrix.m[13], this._worldMatrix.m[14]);\n        this._isAbsoluteSynced = false;\n        // Callbacks\n        this.onAfterWorldMatrixUpdateObservable.notifyObservers(this);\n        if (!this._poseMatrix) {\n            this._poseMatrix = Matrix.Invert(this._worldMatrix);\n        }\n        // Cache the determinant\n        this._worldMatrixDeterminantIsDirty = true;\n        return this._worldMatrix;\n    }\n    /**\n     * Resets this nodeTransform's local matrix to Matrix.Identity().\n     * @param independentOfChildren indicates if all child nodeTransform's world-space transform should be preserved.\n     */\n    resetLocalMatrix(independentOfChildren = true) {\n        this.computeWorldMatrix();\n        if (independentOfChildren) {\n            const children = this.getChildren();\n            for (let i = 0; i < children.length; ++i) {\n                const child = children[i];\n                if (child) {\n                    child.computeWorldMatrix();\n                    const bakedMatrix = TmpVectors.Matrix[0];\n                    child._localMatrix.multiplyToRef(this._localMatrix, bakedMatrix);\n                    const tmpRotationQuaternion = TmpVectors.Quaternion[0];\n                    bakedMatrix.decompose(child.scaling, tmpRotationQuaternion, child.position);\n                    if (child.rotationQuaternion) {\n                        child.rotationQuaternion.copyFrom(tmpRotationQuaternion);\n                    }\n                    else {\n                        tmpRotationQuaternion.toEulerAnglesToRef(child.rotation);\n                    }\n                }\n            }\n        }\n        this.scaling.copyFromFloats(1, 1, 1);\n        this.position.copyFromFloats(0, 0, 0);\n        this.rotation.copyFromFloats(0, 0, 0);\n        //only if quaternion is already set\n        if (this.rotationQuaternion) {\n            this.rotationQuaternion = Quaternion.Identity();\n        }\n        this._worldMatrix = Matrix.Identity();\n    }\n    _afterComputeWorldMatrix() { }\n    /**\n     * If you'd like to be called back after the mesh position, rotation or scaling has been updated.\n     * @param func callback function to add\n     *\n     * @returns the TransformNode.\n     */\n    registerAfterWorldMatrixUpdate(func) {\n        this.onAfterWorldMatrixUpdateObservable.add(func);\n        return this;\n    }\n    /**\n     * Removes a registered callback function.\n     * @param func callback function to remove\n     * @returns the TransformNode.\n     */\n    unregisterAfterWorldMatrixUpdate(func) {\n        this.onAfterWorldMatrixUpdateObservable.removeCallback(func);\n        return this;\n    }\n    /**\n     * Gets the position of the current mesh in camera space\n     * @param camera defines the camera to use\n     * @returns a position\n     */\n    getPositionInCameraSpace(camera = null) {\n        if (!camera) {\n            camera = this.getScene().activeCamera;\n        }\n        return Vector3.TransformCoordinates(this.getAbsolutePosition(), camera.getViewMatrix());\n    }\n    /**\n     * Returns the distance from the mesh to the active camera\n     * @param camera defines the camera to use\n     * @returns the distance\n     */\n    getDistanceToCamera(camera = null) {\n        if (!camera) {\n            camera = this.getScene().activeCamera;\n        }\n        return this.getAbsolutePosition().subtract(camera.globalPosition).length();\n    }\n    /**\n     * Clone the current transform node\n     * @param name Name of the new clone\n     * @param newParent New parent for the clone\n     * @param doNotCloneChildren Do not clone children hierarchy\n     * @returns the new transform node\n     */\n    clone(name, newParent, doNotCloneChildren) {\n        const result = SerializationHelper.Clone(() => new TransformNode(name, this.getScene()), this);\n        result.name = name;\n        result.id = name;\n        if (newParent) {\n            result.parent = newParent;\n        }\n        if (!doNotCloneChildren) {\n            // Children\n            const directDescendants = this.getDescendants(true);\n            for (let index = 0; index < directDescendants.length; index++) {\n                const child = directDescendants[index];\n                if (child.clone) {\n                    child.clone(name + \".\" + child.name, result);\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * Serializes the objects information.\n     * @param currentSerializationObject defines the object to serialize in\n     * @returns the serialized object\n     */\n    serialize(currentSerializationObject) {\n        const serializationObject = SerializationHelper.Serialize(this, currentSerializationObject);\n        serializationObject.type = this.getClassName();\n        serializationObject.uniqueId = this.uniqueId;\n        // Parent\n        if (this.parent) {\n            this.parent._serializeAsParent(serializationObject);\n        }\n        serializationObject.localMatrix = this.getPivotMatrix().asArray();\n        serializationObject.isEnabled = this.isEnabled();\n        return serializationObject;\n    }\n    // Statics\n    /**\n     * Returns a new TransformNode object parsed from the source provided.\n     * @param parsedTransformNode is the source.\n     * @param scene the scene the object belongs to\n     * @param rootUrl is a string, it's the root URL to prefix the `delayLoadingFile` property with\n     * @returns a new TransformNode object parsed from the source provided.\n     */\n    static Parse(parsedTransformNode, scene, rootUrl) {\n        const transformNode = SerializationHelper.Parse(() => new TransformNode(parsedTransformNode.name, scene), parsedTransformNode, scene, rootUrl);\n        if (parsedTransformNode.localMatrix) {\n            transformNode.setPreTransformMatrix(Matrix.FromArray(parsedTransformNode.localMatrix));\n        }\n        else if (parsedTransformNode.pivotMatrix) {\n            transformNode.setPivotMatrix(Matrix.FromArray(parsedTransformNode.pivotMatrix));\n        }\n        transformNode.setEnabled(parsedTransformNode.isEnabled);\n        transformNode._waitingParsedUniqueId = parsedTransformNode.uniqueId;\n        // Parent\n        if (parsedTransformNode.parentId !== undefined) {\n            transformNode._waitingParentId = parsedTransformNode.parentId;\n        }\n        if (parsedTransformNode.parentInstanceIndex !== undefined) {\n            transformNode._waitingParentInstanceIndex = parsedTransformNode.parentInstanceIndex;\n        }\n        return transformNode;\n    }\n    /**\n     * Get all child-transformNodes of this node\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\n     * @returns an array of TransformNode\n     */\n    getChildTransformNodes(directDescendantsOnly, predicate) {\n        const results = [];\n        this._getDescendants(results, directDescendantsOnly, (node) => {\n            return (!predicate || predicate(node)) && node instanceof TransformNode;\n        });\n        return results;\n    }\n    /**\n     * Releases resources associated with this transform node.\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\n     */\n    dispose(doNotRecurse, disposeMaterialAndTextures = false) {\n        // Animations\n        this.getScene().stopAnimation(this);\n        // Remove from scene\n        this.getScene().removeTransformNode(this);\n        if (this._parentContainer) {\n            const index = this._parentContainer.transformNodes.indexOf(this);\n            if (index > -1) {\n                this._parentContainer.transformNodes.splice(index, 1);\n            }\n            this._parentContainer = null;\n        }\n        this.onAfterWorldMatrixUpdateObservable.clear();\n        if (doNotRecurse) {\n            const transformNodes = this.getChildTransformNodes(true);\n            for (const transformNode of transformNodes) {\n                transformNode.parent = null;\n                transformNode.computeWorldMatrix(true);\n            }\n        }\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\n    }\n    /**\n     * Uniformly scales the mesh to fit inside of a unit cube (1 X 1 X 1 units)\n     * @param includeDescendants Use the hierarchy's bounding box instead of the mesh's bounding box. Default is false\n     * @param ignoreRotation ignore rotation when computing the scale (ie. object will be axis aligned). Default is false\n     * @param predicate predicate that is passed in to getHierarchyBoundingVectors when selecting which object should be included when scaling\n     * @returns the current mesh\n     */\n    normalizeToUnitCube(includeDescendants = true, ignoreRotation = false, predicate) {\n        let storedRotation = null;\n        let storedRotationQuaternion = null;\n        if (ignoreRotation) {\n            if (this.rotationQuaternion) {\n                storedRotationQuaternion = this.rotationQuaternion.clone();\n                this.rotationQuaternion.copyFromFloats(0, 0, 0, 1);\n            }\n            else if (this.rotation) {\n                storedRotation = this.rotation.clone();\n                this.rotation.copyFromFloats(0, 0, 0);\n            }\n        }\n        const boundingVectors = this.getHierarchyBoundingVectors(includeDescendants, predicate);\n        const sizeVec = boundingVectors.max.subtract(boundingVectors.min);\n        const maxDimension = Math.max(sizeVec.x, sizeVec.y, sizeVec.z);\n        if (maxDimension === 0) {\n            return this;\n        }\n        const scale = 1 / maxDimension;\n        this.scaling.scaleInPlace(scale);\n        if (ignoreRotation) {\n            if (this.rotationQuaternion && storedRotationQuaternion) {\n                this.rotationQuaternion.copyFrom(storedRotationQuaternion);\n            }\n            else if (this.rotation && storedRotation) {\n                this.rotation.copyFrom(storedRotation);\n            }\n        }\n        return this;\n    }\n    _syncAbsoluteScalingAndRotation() {\n        if (!this._isAbsoluteSynced) {\n            this._worldMatrix.decompose(this._absoluteScaling, this._absoluteRotationQuaternion);\n            this._isAbsoluteSynced = true;\n        }\n    }\n}\n// Statics\n/**\n * Object will not rotate to face the camera\n */\nTransformNode.BILLBOARDMODE_NONE = 0;\n/**\n * Object will rotate to face the camera but only on the x axis\n */\nTransformNode.BILLBOARDMODE_X = 1;\n/**\n * Object will rotate to face the camera but only on the y axis\n */\nTransformNode.BILLBOARDMODE_Y = 2;\n/**\n * Object will rotate to face the camera but only on the z axis\n */\nTransformNode.BILLBOARDMODE_Z = 4;\n/**\n * Object will rotate to face the camera\n */\nTransformNode.BILLBOARDMODE_ALL = 7;\n/**\n * Object will rotate to face the camera's position instead of orientation\n */\nTransformNode.BILLBOARDMODE_USE_POSITION = 128;\n/**\n * Child transform with Billboard flags should or should not apply parent rotation (default if off)\n */\nTransformNode.BillboardUseParentOrientation = false;\nTransformNode._TmpRotation = Quaternion.Zero();\nTransformNode._TmpScaling = Vector3.Zero();\nTransformNode._TmpTranslation = Vector3.Zero();\nTransformNode._LookAtVectorCache = new Vector3(0, 0, 0);\nTransformNode._RotationAxisCache = new Quaternion();\n__decorate([\n    serializeAsVector3(\"position\")\n], TransformNode.prototype, \"_position\", void 0);\n__decorate([\n    serializeAsVector3(\"rotation\")\n], TransformNode.prototype, \"_rotation\", void 0);\n__decorate([\n    serializeAsQuaternion(\"rotationQuaternion\")\n], TransformNode.prototype, \"_rotationQuaternion\", void 0);\n__decorate([\n    serializeAsVector3(\"scaling\")\n], TransformNode.prototype, \"_scaling\", void 0);\n__decorate([\n    serialize(\"billboardMode\")\n], TransformNode.prototype, \"_billboardMode\", void 0);\n__decorate([\n    serialize()\n], TransformNode.prototype, \"scalingDeterminant\", void 0);\n__decorate([\n    serialize(\"infiniteDistance\")\n], TransformNode.prototype, \"_infiniteDistance\", void 0);\n__decorate([\n    serialize()\n], TransformNode.prototype, \"ignoreNonUniformScaling\", void 0);\n__decorate([\n    serialize()\n], TransformNode.prototype, \"reIntegrateRotationIntoRotationQuaternion\", void 0);\n//# sourceMappingURL=transformNode.js.map"],"names":["_PrimaryIsoTriangle","constructor","this","cartesian","vertices","max","min","closestTo","innerFacets","isoVecsABOB","isoVecsOBOA","isoVecsBAOA","vertexTypes","IDATA","PolyhedronData","setIndices","indexCount","vecToidx","m","n","fr","rot","O","A","B","g","m1","n1","oVec","aVec","bVec","oaVec","abVec","obVec","idx","idxR","isoId","isoIdR","verts","vDist","vertByDist","matchIdx","f","edgematch","face","x","y","i","length","calcCoeffs","thirdR3","Math","sqrt","LSQD","coau","cobu","coav","cobv","createInnerFacets","push","edgeVecsABOB","point","prev","next","pointR","clone","prevR","nextR","rotate60About","maxPoint","maxPrev","maxLeftPrev","mapABOBtoOBOA","temp","j","rotateNeg120","mapABOBtoBAOA","rotate120","MapToFace","faceNb","geodesicData","F","oidx","aidx","bidx","vertex","OA","subtract","OB","scale","add","mapped","tempVec","z","build","Array","ratio","sort","a","b","Infinity","len","distFrom","vert","primVert","v","distFromO","distFromA","distFromB","vertData","closest","dist","toCartesianOrigin","name","category","GeodesicData","innerToData","primTri","map","el","mapABOBtoDATA","mapOBOAtoDATA","mapBAOAtoDATA","orderData","nearTo","close","near","nearIndex","pop","sharedNodes","poleNodes","setOrder","faces","adjVerts","dualFaces","index","indexOf","splice","adjacentFaces","toGoldbergPolyhedronData","goldbergPolyhedronData","verticesNb","cx","cy","cz","concat","forEach","static","c","d","Geometry","boundingBias","_boundingBias","value","copyFrom","_updateBoundingInfo","mesh","geometry","RandomId","getScene","applyToMesh","meshes","_meshes","id","scene","vertexData","updatable","delayLoadState","_totalVertices","_isDisposed","_indexBufferIsUpdatable","_positionsCache","_parentContainer","useBoundingInfoFromGeometry","_scene","uniqueId","getUniqueId","_engine","getEngine","_vertexBuffers","_indices","_updatable","setAllVerticesData","getCaps","vertexArrayObject","_vertexArrayObjects","computeWorldMatrix","extend","_extend","isReady","doNotSerialize","_rebuild","_indexBuffer","createIndexBuffer","key","applyToGeometry","_notifyUpdate","setVerticesData","kind","data","stride","isArray","Float32Array","buffer","setVerticesBuffer","removeVerticesData","dispose","_disposeVertexArrayObjects","totalVertices","disposeExistingBuffer","getKind","_buffer","_increaseReferences","numOfMeshes","getData","type","byteStride","_updateExtend","_resetPointsArrayCache","buildBoundingInfo","minimum","maximum","_createGlobalSubMesh","isUnIndexed","synchronizeInstances","updateVerticesDataDirectly","offset","useBytes","vertexBuffer","getVertexBuffer","updateDirectly","updateVerticesData","updateExtends","update","hasBoundingInfo","getBoundingInfo","reConstruct","subMeshes","subMesh","refreshBoundingInfo","_bind","effect","indexToBind","overrideVertexBuffers","overrideVertexArrayObjects","undefined","vbs","getVertexBuffers","bindBuffers","vaos","recordVertexArrayObject","bindVertexArrayObject","getTotalVertices","getVerticesData","copyWhenShared","forceCopy","getFloatData","isVertexBufferUpdatable","vb","isUpdatable","isVerticesDataPresent","_delayInfo","getVerticesDataKinds","result","updateIndices","indices","gpuMemoryOnly","needToUpdateSubMeshes","slice","updateDynamicIndexBuffer","_releaseBuffer","getTotalIndices","getIndices","orig","getIndexBuffer","_releaseVertexArrayObject","releaseVertexArrayObject","releaseForMesh","shouldDispose","_invalidateInstanceVertexArrayObject","_geometry","previousGeometry","_internalAbstractMeshDataInfo","_positions","pushGeometry","_applyToMesh","_boundingInfo","setBoundingInfo","create","_syncGeometryWithMorphTargetManager","onGeometryUpdated","_markSubMeshesAsAttributesDirty","load","onLoaded","_queueLoad","delayLoadingFile","addPendingData","_loadFile","_delayLoadingFunction","JSON","parse","removePendingData","toLeftHanded","tIndices","tTemp","tPositions","tNormals","_generatePointsArray","arrayIdx","set","isDisposed","removeGeometry","geometries","copy","stopChecking","serialize","serializationObject","tags","_toNumberArray","origin","prototype","call","clearCachedData","vbName","Object","hasOwnProperty","_data","serializeVerticeData","positions","normals","tangents","uvs","uv2s","uv3s","uv4s","uv5s","uv6s","colors","matricesIndices","_isExpanded","matricesWeights","_loadedUniqueId","parsedGeometry","geometryUniqueId","geometryId","_GetGeometryByLoadedUniqueId","getGeometryById","ArrayBuffer","binaryInfo","_binaryInfo","positionsAttrDesc","count","positionsData","normalsAttrDesc","normalsData","tangetsAttrDesc","tangentsData","uvsAttrDesc","uvsData","uvs2AttrDesc","uvs2Data","uvs3AttrDesc","uvs3Data","uvs4AttrDesc","uvs4Data","uvs5AttrDesc","uvs5Data","uvs6AttrDesc","uvs6Data","colorsAttrDesc","colorsData","matricesIndicesAttrDesc","matricesIndicesData","Int32Array","floatIndices","matricesIndicesExtraAttrDesc","matricesWeightsAttrDesc","matricesWeightsData","indicesAttrDesc","indicesData","subMeshesAttrDesc","subMeshesData","materialIndex","verticesStart","verticesCount","indexStart","uvs2","uvs3","uvs4","uvs5","uvs6","matricesIndex","matricesIndicesExtra","_CleanMatricesWeights","matricesWeightsExtra","subIndex","parsedSubMesh","_shouldGenerateFlatShading","convertToFlatShadedMesh","onMeshImportedObservable","notifyObservers","epsilon","noInfluenceBoneIndex","skeletonId","skeleton","getLastSkeletonById","bones","influencers","numBoneInfluencer","size","weight","firstZeroWeight","w","mweight","parsedVertexData","rootUrl","boundingBoxMinimum","boundingBoxMaximum","hasUVs","hasUVs2","hasUVs3","hasUVs4","hasUVs5","hasUVs6","hasColors","hasMatricesIndices","hasMatricesWeights","parsedMesh","GoldbergMesh","Parse","super","arguments","goldbergData","faceColors","faceCenters","faceZaxis","faceXaxis","faceYaxis","nbSharedFaces","nbUnsharedFaces","nbFaces","nbFacesAtPole","relatedGoldbergFace","poleOrShared","fromPole","_changeGoldbergFaceColors","colorRange","col","newCols","r","setGoldbergFaceColors","updateGoldbergFaceColors","_changeGoldbergFaceUVs","uvRange","center","radius","angle","points5","points6","u","p","cos","PI","sin","setGoldbergFaceUVs","newUVs","updateGoldbergFaceUVs","placeOnGoldbergFaceAt","position","orientation","rotation","color","asArray","vector","goldberg","GroundMesh","generateOctree","getClassName","subdivisions","_subdivisionsX","_subdivisionsY","subdivisionsX","subdivisionsY","optimize","chunksCount","octreeBlocksSize","subdivide","thisAsAny","createOrUpdateSubmeshesOctree","getHeightAtCoordinates","world","getWorldMatrix","invMat","invertToRef","tmpVect","_minX","_maxX","_minZ","_maxZ","_heightQuads","_initHeightQuads","_computeHeightQuads","facet","_getFacetAt","getNormalAtCoordinates","normal","getNormalAtCoordinatesToRef","ref","tmpMat","updateCoordinateHeights","floor","_width","row","_height","quad","slope","facet1","facet2","v1","v2","v3","v4","v1v2","v1v3","v1v4","norm1","norm2","k","cd","h","d1","d2","subtractToRef","normalize","copyFromFloats","minX","maxX","minZ","maxZ","width","height","Plane","v0","lengthSquared","flip","scaleInPlace","splitPolygon","polygon","coplanarFront","coplanarBack","front","back","polygonType","types","t","pos","EPSILON","plane","ti","tj","vi","vj","interpolate","poly","Polygon","shared","FromPoints","reverse","SimplificationType","SimplificationQueue","running","_simplificationArray","addTask","task","executeNext","runSimplification","parallelProcessing","settings","setting","_getSimplifier","simplify","newMesh","distance","addLODLevel","isVisible","quality","successCallback","simplifier","runDecimation","callback","loop","simplificationType","QUADRATIC","QuadraticErrorSimplification","DecimationTriangle","_vertices","error","deleted","isDirty","deletePending","borderFactor","DecimationVertex","isBorder","q","QuadraticMatrix","triangleCount","triangleStart","originalOffsets","updatePosition","newPosition","det","a11","a12","a13","a21","a22","a23","a31","a32","a33","addInPlace","matrix","addArrayInPlace","DataFromNumbers","Reference","vertexId","triangleId","_mesh","syncIterations","aggressiveness","decimationIterations","boundingBoxEpsilon","_initDecimatedMesh","_initWithMesh","_runDecimation","optimizeMesh","setTimeout","_reconstructedMesh","submeshIndex","targetCount","_triangles","deletedTriangles","iterationFunction","iteration","_updateMesh","threshold","pow","tIdx","deleted0","deleted1","_calculateError","delTr","_isFlipped","uniqueArray","deletedT","tStart","_references","_updateTriangles","tCount","breakLoop","_reconstructMesh","positionData","submesh","findInVertices","positionToSearch","ii","equalsWithEpsilon","vertexReferences","i0","i1","i2","triangle","originalOffset","_init","newTriangles","newPositionData","newNormalData","newUVsData","newColorsData","normalData","vertexCount","startingIndex","startingVertex","submeshesArray","newIndicesArray","originalIndices","originalSubmesh","getMesh","material","parent","renderingGroupId","vertex1","vertex2","deletedArray","s","abs","origVertex","newDeleted","_identifyBorder","vCount","vId","ofs","vv","identifyBorders","newTrianglesVector","newReferences","_vertexError","pointResult","border","qDet","p3","divide","error1","error2","error3","defineProperty","get","_simplificationQueue","component","_getComponent","SimplicationQueueSceneComponent","_addComponent","enumerable","configurable","simplificationQueue","register","_beforeCameraUpdateStage","registerStep","_beforeCameraUpdate","rebuild","instance","InstancedMesh","instancedBuffers","source","_indexInSourceMeshInstanceArray","_distanceToCamera","addInstance","_sourceMesh","_unIndexed","scaling","rotationQuaternion","animations","range","getAnimationRanges","createAnimationRange","from","to","infiniteDistance","setPivotMatrix","getPivotMatrix","_syncSubMeshes","lightSources","_lightSources","_resyncLightSources","_resyncLightSource","_removeLightSource","receiveShadows","visibility","sourceMesh","createInstance","completeCheck","makeItUnique","applySkeleton","applyMorph","isLocked","bias","_refreshBoundingInfo","_getPositionData","_preActivate","_currentLOD","_activate","renderId","intermediateRendering","_getWorldMatrixDeterminant","_actAsRegularMesh","_registerInstanceForRenderId","_isActiveIntermediate","_onlyForInstancesIntermediate","_isActive","_onlyForInstances","_postActivate","edgesShareWithInstances","_edgesRenderer","isEnabled","_renderingGroup","_edgesRenderers","pushNoDuplicate","customInstances","billboardMode","_masterMesh","_billboardWorldMatrix","tempMaster","isAnInstance","getLOD","camera","sourceMeshLODLevels","getLODLevels","boundingInfo","boundingSphere","_preActivateForIntermediateRendering","releaseSubMeshes","worldMatrixFromCache","absolutePosition","_updateSubMeshesBoundingInfo","newParent","doNotCloneChildren","newSourceMesh","onClonedObservable","doNotRecurse","disposeMaterialAndTextures","removeInstance","_serializeAsParent","parentId","parentInstanceIndex","instantiateHierarchy","options","onNewNodeCreated","newSourcedMesh","child","getChildTransformNodes","_a","_b","_userInstancedBuffersStorage","vertexBuffers","instances","strides","sizes","vertexArrayObjects","visibleInstances","renderSelf","instanceCount","expectedSize","toArray","copyToArray","instanceIndex","_instanceDataStorage","instancesBuffer","LinesMesh","_isShaderMaterial","shader","useVertexColor","useVertexAlpha","alpha","intersectionThreshold","attributes","uniforms","needAlphaBlending","defines","useClipPlane","_color4","_lineMaterial","fillMode","checkCollisions","_subMesh","colorEffect","setColor4","_draw","instancesCount","engine","drawArraysType","drawElementsType","doNotDisposeMaterial","InstancedLinesMesh","_CreationDataStorage","_InstanceDataStorage","batchCache","_InstancesBatch","batchCacheReplacementModeInFrozenMode","instancesBufferSize","mustReturn","hardwareInstancedRendering","_ThinInstanceDataStorage","matrixBuffer","previousMatrixBuffer","matrixBufferSize","matrixData","boundingVectors","worldMatrices","_InternalMeshDataInfo","_areNormalsFrozen","_source","meshMap","_preActivateId","_LODLevels","_useLODScreenCoverage","_effectiveMaterial","_forcedInstanceCount","Mesh","FRONTSIDE","useLODScreenCoverage","_internalMeshDataInfo","_sortLODLevels","computeBonesUsingShaders","_computeBonesUsingShaders","_sourcePositions","_sourceNormals","onBeforeRenderObservable","_onBeforeRenderObservable","onBeforeBindObservable","_onBeforeBindObservable","onAfterRenderObservable","_onAfterRenderObservable","onBetweenPassObservable","_onBetweenPassObservable","onBeforeDrawObservable","_onBeforeDrawObservable","onBeforeDraw","_onBeforeDrawObserver","remove","hasInstances","hasThinInstances","_thinInstanceDataStorage","forcedInstanceCount","cloneMeshMap","worldMatrixInstancedBuffer","instancesData","previousWorldMatrixInstancedBuffer","instancesPreviousData","manualUpdateOfWorldMatrixInstancedBuffer","manualUpdate","manualUpdateOfPreviousWorldMatrixInstancedBuffer","previousManualUpdate","forceWorldMatrixInstancedBufferUpdate","forceMatrixUpdates","clonePhysicsImpostor","_creationDataStorage","_originalBuilderSideOrientation","DEFAULTSIDE","overrideMaterialSideOrientation","ignoreCameraMaxZ","_onBeforeDraw","isInstance","effectiveMaterial","_uniformBuffer","transferToEffect","bindOnlyWorldMatrix","useClonedMeshMap","_ranges","ranges","metadata","_internalMetadata","setEnabled","directDescendants","getDescendants","morphTargetManager","getPhysicsEngine","physicsEngine","getPluginVersion","impostor","getImpostorForPhysicsObject","physicsImpostor","particleSystems","system","emitter","instancedArrays","_onMeshReadyObserverAdded","observer","unregisterOnNextCall","onMeshReadyObservable","_checkReadinessObserver","doNotInstantiate","_isMesh","toString","fullDetails","ret","_waitingParentId","ib","_unBindEffect","hasLODLevels","sortingOrderFactor","distanceOrScreenCoverage","level","getLODLevelAtDistance","internalDataInfo","removeLODLevel","bSphere","distanceToCamera","mode","centerWorld","globalPosition","compareValue","compareSign","screenArea","meshArea","radiusWorld","onLODLevelSelection","_checkDelayState","kinds","isBlocked","forceInstanceSupport","_c","_d","_e","_f","mat","defaultMaterial","_storeEffectOnSubMeshes","getMaterial","isReadyForSubMesh","currentRenderPassId","light","generators","getShadowGenerators","iterator","values","done","generator","getShadowMap","renderList","renderPassId","needAlphaBlendingForMesh","lod","areNormalsFrozen","freezeNormals","unfreezeNormals","overridenInstanceCount","sceneRenderId","getRenderId","intermediateDefaultRenderId","defaultRenderId","selfDefaultRenderId","_renderId","previousRenderId","isFrozen","_afterComputeWorldMatrix","doNotSyncBoundingInfo","thinInstanceRefreshBoundingInfo","edgesRenderer","force","totalIndices","needToRecreate","subdivisionSize","markVerticesDataAsUpdatable","makeGeometryUnique","updateMeshPositions","positionFunction","computeNormals","oldGeometry","isUsingTextureForTargets","_getLinesIndexBuffer","_linesIndexCount","registerBeforeRender","func","unregisterBeforeRender","removeCallback","registerAfterRender","unregisterAfterRender","_getInstancesRenderList","subMeshId","isReplacementMode","previousBatch","isInIntermediateRendering","_isInIntermediateRendering","onlyForInstances","currentRenderId","_renderWithInstances","batch","_id","visibleInstanceCount","instanceStorage","currentInstancesBufferSize","instancesPreviousBuffer","bufferSize","needsPreviousWorldMatrices","needUpdateBuffer","masterMeshPreviousWorldMatrix","INSTANCEDMESH_SORT_TRANSPARENT","activeCamera","getRenderingMesh","cameraPosition","instanceMesh","m2","_previousWorldMatrix","createVertexBuffer","_processInstancedBuffers","_activeIndices","addCount","_currentDrawContext","useInstancing","unbindInstanceAttributes","_renderWithThinInstances","previousMatrixData","_thinInstanceCreateMatrixBuffer","_processRendering","renderingMesh","visibleInstancesForSubMesh","_freeze","_unFreeze","render","enableAlphaMode","effectiveMeshReplacement","_checkOcclusionQuery","_occlusionDataStorage","forceRenderingWhenOccluded","oldCameraMaxZ","oldCamera","updateTransformMatrix","instanceDataStorage","_wasPreviouslyReady","getEffect","drawWrapper","setAlphaMode","alphaMode","_drawWrapper","_getDrawWrapper","step","_beforeRenderingMeshStage","action","effectiveMesh","sideOrientation","backFaceCulling","mainDeterminant","_preBind","forceDepthWrite","setDepthWrite","forcePointsCloud","forceWireframe","bindForSubMesh","bind","separateCullingPass","setState","zOffset","cullBackFaces","stencil","zOffsetUnits","unbind","_afterRenderingMeshStage","performancePriority","cleanMatrixWeights","_normalizeSkinWeightsAndExtra","_normalizeSkinFourWeights","numWeights","recip","validateSkinning","skinned","valid","report","numberNotSorted","missingWeights","maxUsedWeights","numberNotNormalized","numInfluences","usedWeightCounts","lastWeight","usedWeights","tolerance","numBones","numBadBoneIndices","getBinaryData","offlineProvider","isInFrustum","frustumPlanes","setMaterialById","materials","multiMaterials","getAnimatables","results","bakeTransformIntoVertices","transform","submeshes","determinant","flipFaces","bakeCurrentTransformIntoVertices","bakeIndependentlyOfChildren","resetLocalMatrix","clear","abstractMesh","_disposeInstanceSpecificData","_disposeThinInstanceSpecificData","applyDisplacementMap","url","minHeight","maxHeight","onSuccess","uvOffset","uvScale","forceUpdate","img","heightMapWidth","heightMapHeight","context","createCanvas","getContext","drawImage","getImageData","applyDisplacementMapFromBuffer","uv","gradient","newdata","kindIndex","updatableNormals","previousSubmeshes","vertexIndex","getStrideSize","flipNormalGeneration","useRightHandedSystem","p1","p2","p1p2","p3p2","localIndex","previousOne","convertToUnIndexedMesh","flipNormals","vertex_data","increaseVertices","numberPerEdge","currentIndices","segments","tempIndices","deltaPosition","deltaNormal","deltaUV","side","uvPtr","normalsPtr","positionPtr","forceSharedVertices","currentUVs","currentPositions","currentColors","currentMatrixIndices","currentMatrixWeights","currentMatrixIndicesExtra","currentMatrixWeightsExtra","matrixIndices","matrixWeights","matrixIndicesExtra","matrixWeightsExtra","pstring","indexPtr","uniquePositions","ptr","physicObject","jsonObject","_instancedMeshFactory","optimizeIndices","vectorPositions","dupes","realPos","testedPosition","againstPosition","equals","originalSubMeshes","_postMultiplyPivotMatrix","pivotMatrix","localMatrix","pickable","isPickable","isBlocker","materialUniqueId","materialId","morphTargetManagerId","numBoneInfluencers","getPhysicsImpostor","physicsMass","getParam","physicsFriction","physicsRestitution","serializationInstance","actionManager","actions","serializeAnimationRanges","thinInstances","enablePicking","thinInstanceEnablePicking","_userThinInstanceBuffersStorage","userThinInstance","layerMask","alphaIndex","hasVertexAlpha","overlayAlpha","overlayColor","renderOverlay","applyFog","_morphTargetManager","numInfluencers","morphTarget","getActiveTarget","getPositions","getNormals","getTangents","getUVs","_LinesMeshParser","_GroundMeshParser","_GoldbergMeshParser","_waitingParsedUniqueId","setPreTransformMatrix","showBoundingBox","showSubMeshesBoundingBox","useFlatShading","freezeWorldMatrix","_waitingData","_waitingParentInstanceIndex","_waitingMaterialId","getMorphTargetManagerById","animationIndex","parsedAnimation","internalClass","N","autoAnimate","beginAnimation","autoAnimateFrom","autoAnimateTo","autoAnimateLoop","autoAnimateSpeed","isNaN","parseInt","_PhysicsImpostorParser","lodMeshIds","lods","ids","distances","lodDistances","coverages","lodCoverages","parsedInstance","thinInstanceSetBuffer","setPositionsForCPUSkinning","setNormalsForCPUSkinning","_softwareSkinningFrameId","getFrameId","hasNormals","needExtras","matricesIndicesExtraData","matricesWeightsExtraData","skeletonMatrices","getTransformMatrices","tempVector3","finalMatrix","tempMatrix","inf","matWeightIdx","addToSelf","reset","minVector","maxVector","boundingBox","minimizeInPlace","minimumWorld","maximizeInPlace","maximumWorld","meshesOrMinMaxVector","minMaxVector","MinMax","disposeSource","allow32BitsIndices","meshSubclass","subdivideWithSubMeshes","multiMultiMaterials","_MergeMeshesCoroutine","isAsync","filter","Boolean","materialArray","materialIndexArray","indiceArray","currentOverrideMaterialSideOrientation","matIndex","subMaterials","getVertexDataFromMesh","wm","sourceVertexData","sourceTransform","meshVertexDatas","mergeCoroutine","_mergeCoroutine","mergeCoroutineStep","applyToCoroutine","_applyToCoroutine","applyToCoroutineStep","newMultiMaterial","last","_shouldConvertRHS","BACKSIDE","DOUBLESIDE","NO_CAP","CAP_START","CAP_END","CAP_ALL","NO_FLIP","FLIP_TILE","ROTATE_TILE","FLIP_ROW","ROTATE_ROW","FLIP_N_ROTATE_TILE","FLIP_N_ROTATE_ROW","CENTER","LEFT","RIGHT","TOP","BOTTOM","setMaterialByID","CreateDisc","Error","CreateBox","CreateSphere","CreateCylinder","CreateTorusKnot","CreateTorus","CreatePlane","CreateGround","CreateTiledGround","CreateGroundFromHeightMap","CreateTube","CreatePolyhedron","CreateIcoSphere","CreateDecal","CreateCapsule","ExtendToGoldberg","VertexData","_applyTo","updateMesh","_update","updateGeometry","meshOrGeometry","coordinates","transformation","coordinate","transformedCoordinate","transformedNormal","tmp","_TransformVector3Coordinates","_TransformVector3Normals","_TransformVector4Normals","_FlipFaces","merge","others","use32BitsIndices","forceCloneIndices","vertexDatas","other","_validate","reduce","indexSum","some","indicesOffset","Uint32Array","Uint16Array","positionsOffset","_MergeElement","nonNullOthers","sumLen","elements","transformRange","ret32","getElementCount","positionsElementCount","validateElementCount","elementCount","_ExtractFrom","fUV","fColors","frontUVs","backUVs","wrap","tessellation","capSubdivisions","p1p2x","p1p2y","p1p2z","p3p2x","p3p2y","p3p2z","faceNormalx","faceNormaly","faceNormalz","v1x","v1y","v1z","v2x","v2y","v2z","v3x","v3y","v3z","computeFacetNormals","computeFacetPositions","computeFacetPartitioning","computeDepthSort","faceNormalSign","distanceTo","facetNormals","facetPositions","facetPartitioning","depthSort","xSubRatio","ySubRatio","zSubRatio","subSq","bbSize","subDiv","X","Y","Z","ox","bInfo","oy","oz","b1x","b1y","b1z","b2x","b2y","b2z","b3x","b3y","b3z","block_idx_v1","block_idx_v2","block_idx_v3","block_idx_o","dsf","depthSortedFacets","ind","sqDistance","li","ln","lp","l","lu","MeshBuilder","CreateTiledBox","CreateRibbon","CreateLineSystem","CreateLines","CreateDashedLines","ExtrudeShape","ExtrudeShapeCustom","CreateLathe","CreateTiledPlane","CreatePolygon","ExtrudePolygon","CreateGeodesic","CreateGoldberg","MeshLODLevel","IndexedVector2","original","PolygonPoints","originalPoints","newPoint","computeBounds","lmin","lmax","PolygonMeshBuilder","_addToepoint","points","_epoints","contours","earcutInjection","earcut","_points","_outlinepoints","_holes","_eholes","bjsEarcut","_name","getPoints","addHole","hole","holepoints","depth","smoothingThreshold","buildVertexData","bounds","res","positionscount","totalCount","_addSide","startIndex","ulength","p0","vc","vp","vn","vc_norm","normalizeToNew","vp_norm","vn_norm","dotp","dotn","SubMesh","materialDefines","_mainDrawWrapperOverride","passId","createIfNotExisting","_drawWrappers","_removeDrawWrapper","disposeWrapper","_drawWrapperOverride","_setMainDrawWrapperOverride","wrapper","setEffect","materialContext","resetContext","resetDrawCache","createBoundingBox","addToMesh","_linesIndexBuffer","_lastColliderWorldVertices","_lastColliderTransformMatrix","_wasDispatched","_alphaIndex","_currentMaterial","_renderingMesh","_trianglePlanes","IsGlobal","getReplacementMesh","getEffectiveMesh","replacementMesh","getDefaultMaterial","rootMaterial","getMaterialForRenderPass","_isMultiMaterial","getSubMaterial","_checkCollision","collider","updateBoundingInfo","cullingStrategy","isCompletelyInFrustum","linesIndices","canIntersects","ray","intersectsBox","intersects","fastCheck","trianglePredicate","checkStopper","_intersectLines","_intersectUnIndexedLines","_intersectUnIndexedTriangles","_intersectTriangles","intersectInfo","intersectionSegment","faceId","indexA","indexB","indexC","currentIntersectInfo","intersectsTriangle","newRenderingMesh","minVertexIndex","Number","MAX_VALUE","maxVertexIndex","proj","tmpDist","_projectOnUnIndexedTrianglesToRef","_projectOnTrianglesToRef","refresh","_thinInstanceUpdateBufferSize","thinInstanceSetMatrixAt","thinInstanceAdd","_thinInstanceInitializeUserStorage","thinInstanceBufferUpdated","staticBuffer","forceRefreshParentInfo","vectors","POSITIVE_INFINITY","NEGATIVE_INFINITY","numInstances","kindIsMatrix","currentSize","newSize","newData","TransformNode","_billboardMode","_cache","useBillboardPosition","BILLBOARDMODE_USE_POSITION","_computeUseBillboardPath","preserveParentRotationForBillboard","_preserveParentRotationForBillboard","useBillboardPath","BILLBOARDMODE_NONE","_infiniteDistance","isPure","_forward","_up","_right","_position","_rotation","_rotationQuaternion","_scaling","_transformToBoneReferal","_isAbsoluteSynced","scalingDeterminant","ignoreNonUniformScaling","reIntegrateRotationIntoRotationQuaternion","_poseMatrix","_localMatrix","_usePivotMatrix","_absolutePosition","_absoluteScaling","_absoluteRotationQuaternion","_pivotMatrix","_isWorldMatrixFrozen","_indexInSceneTransformNodesArray","onAfterWorldMatrixUpdateObservable","_nonUniformScaling","addTransformNode","_isDirty","isUsingPivotMatrix","newRotation","newScaling","quaternion","setAll","forward","up","right","updatePoseMatrix","getPoseMatrix","_isSynchronized","cache","pivotMatrixUpdated","_initCache","localMatrixUpdated","getAbsolutePosition","absoluteScaling","_syncAbsoluteScalingAndRotation","absoluteRotationQuaternion","postMultiplyPivotMatrix","isIdentity","_pivotMatrixInverse","newWorldMatrix","decompose","_worldMatrix","unfreezeWorldMatrix","isWorldMatrixFrozen","setAbsolutePosition","absolutePositionX","absolutePositionY","absolutePositionZ","invertParentWorldMatrix","setPositionWithLocalVector","vector3","getPositionExpressedInLocalSpace","invLocalWorldMatrix","locallyTranslate","lookAt","targetPoint","yawCor","pitchCor","rollCor","space","dv","_LookAtVectorCache","setDirection","rotationMatrix","toRotationMatrix","parentRotationMatrix","getRotationMatrixToRef","invert","multiplyToRef","fromRotationMatrix","quaternionRotation","toEulerAnglesToRef","getDirection","localAxis","getDirectionToRef","yaw","atan2","pitch","setPivotPoint","tmat","getPivotPoint","getPivotPointToRef","getAbsolutePivotPoint","getAbsolutePivotPointToRef","markAsDirty","property","_children","setParent","node","preserveScalingSign","updatePivot","quatRotation","invParentMatrix","composedMatrix","currentRotation","_TmpRotation","nonUniformScaling","_updateNonUniformScalingState","attachToBone","bone","affectedTransformNode","_currentParentWhenAttachingToBone","getSkeleton","prepare","detachFromBone","resetToPreviousParent","rotate","axis","amount","toQuaternion","_RotationAxisCache","rotateAround","tmpVector","finalScale","finalTranslation","finalRotation","translationMatrix","translationMatrixInv","translate","displacementVector","tempV3","addRotation","accumulation","multiplyInPlace","_getEffectiveParent","isWorldMatrixCameraDependent","_currentRenderId","isSynchronized","_updateCache","_parentNode","_childUpdateId","_TmpScaling","translation","cameraWorldMatrix","cameraGlobalPosition","_TmpTranslation","scaleMatrix","addTranslationFromFloats","BillboardUseParentOrientation","applyRotationQuaternionToRef","setTranslation","_markSyncedWithParent","storedTranslation","getTranslationToRef","getViewMatrix","BILLBOARDMODE_ALL","eulerAngles","BILLBOARDMODE_X","BILLBOARDMODE_Y","BILLBOARDMODE_Z","setTranslationFromFloats","camInObjSpace","isNonUniformWithinEpsilon","_worldMatrixDeterminantIsDirty","independentOfChildren","children","getChildren","bakedMatrix","tmpRotationQuaternion","registerAfterWorldMatrixUpdate","unregisterAfterWorldMatrixUpdate","getPositionInCameraSpace","getDistanceToCamera","currentSerializationObject","parsedTransformNode","transformNode","directDescendantsOnly","predicate","_getDescendants","stopAnimation","removeTransformNode","transformNodes","normalizeToUnitCube","includeDescendants","ignoreRotation","storedRotation","storedRotationQuaternion","getHierarchyBoundingVectors","sizeVec","maxDimension"],"sourceRoot":""}