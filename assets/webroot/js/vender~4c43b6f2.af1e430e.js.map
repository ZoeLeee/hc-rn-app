{"version":3,"file":"js/vender~4c43b6f2.af1e430e.js","mappings":"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","sources":["webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/texture.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/thinTexture.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/videoTexture.js","webpack:///../../../node_modules/@babylonjs/core/Materials/clipPlaneMaterialHelper.js","webpack:///../../../node_modules/@babylonjs/core/Materials/colorCurves.js","webpack:///../../../node_modules/@babylonjs/core/Materials/drawWrapper.js","webpack:///../../../node_modules/@babylonjs/core/Materials/effect.js","webpack:///../../../node_modules/@babylonjs/core/Materials/effectFallbacks.js","webpack:///../../../node_modules/@babylonjs/core/Materials/effectRenderer.js","webpack:///../../../node_modules/@babylonjs/core/Materials/imageProcessingConfiguration.js","webpack:///../../../node_modules/@babylonjs/core/Materials/fresnelParameters.js","webpack:///../../../node_modules/@babylonjs/core/Materials/material.detailMapConfiguration.js","webpack:///../../../node_modules/@babylonjs/core/Materials/materialStencilState.js","webpack:///../../../node_modules/@babylonjs/core/Materials/material.js","webpack:///../../../node_modules/@babylonjs/core/Materials/materialDefines.js","webpack:///../../../node_modules/@babylonjs/core/Materials/materialFlags.js","webpack:///../../../node_modules/@babylonjs/core/Materials/materialHelper.js","webpack:///../../../node_modules/@babylonjs/core/Materials/materialPluginBase.js","webpack:///../../../node_modules/@babylonjs/core/Materials/materialPluginEvent.js","webpack:///../../../node_modules/@babylonjs/core/Materials/materialPluginManager.js","webpack:///../../../node_modules/@babylonjs/core/Materials/multiMaterial.js","webpack:///../../../node_modules/@babylonjs/core/Materials/prePassConfiguration.js","webpack:///../../../node_modules/@babylonjs/core/Materials/pushMaterial.js","webpack:///../../../node_modules/@babylonjs/core/Materials/shaderLanguage.js","webpack:///../../../node_modules/@babylonjs/core/Materials/shaderMaterial.js","webpack:///../../../node_modules/@babylonjs/core/Materials/standardMaterial.js","webpack:///../../../node_modules/@babylonjs/core/Materials/uniformBuffer.js","webpack:///../../../node_modules/@babylonjs/core/Materials/uniformBufferEffectCommonAccessor.js"],"sourcesContent":["import { __decorate } from \"../../tslib.es6.js\";\nimport { serialize, SerializationHelper } from \"../../Misc/decorators.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { Matrix, TmpVectors, Vector3 } from \"../../Maths/math.vector.js\";\nimport { BaseTexture } from \"../../Materials/Textures/baseTexture.js\";\n\nimport { GetClass, RegisterClass } from \"../../Misc/typeStore.js\";\nimport { _WarnImport } from \"../../Misc/devTools.js\";\nimport { TimingTools } from \"../../Misc/timingTools.js\";\nimport { InstantiationTools } from \"../../Misc/instantiationTools.js\";\nimport { Plane } from \"../../Maths/math.plane.js\";\nimport { EncodeArrayBufferToBase64 } from \"../../Misc/stringTools.js\";\nimport { GenerateBase64StringFromTexture, GenerateBase64StringFromTextureAsync } from \"../../Misc/copyTools.js\";\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions.js\";\n/**\n * This represents a texture in babylon. It can be easily loaded from a network, base64 or html input.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction#texture\n */\nexport class Texture extends BaseTexture {\n    /**\n     * Are mip maps generated for this texture or not.\n     */\n    get noMipmap() {\n        return this._noMipmap;\n    }\n    /** Returns the texture mime type if it was defined by a loader (undefined else) */\n    get mimeType() {\n        return this._mimeType;\n    }\n    /**\n     * Is the texture preventing material to render while loading.\n     * If false, a default texture will be used instead of the loading one during the preparation step.\n     */\n    set isBlocking(value) {\n        this._isBlocking = value;\n    }\n    get isBlocking() {\n        return this._isBlocking;\n    }\n    /**\n     * Gets a boolean indicating if the texture needs to be inverted on the y axis during loading\n     */\n    get invertY() {\n        return this._invertY;\n    }\n    /**\n     * Instantiates a new texture.\n     * This represents a texture in babylon. It can be easily loaded from a network, base64 or html input.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction#texture\n     * @param url defines the url of the picture to load as a texture\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\n     * @param noMipmapOrOptions defines if the texture will require mip maps or not or set of all options to create the texture\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading\n     * @param samplingMode defines the sampling mode we want for the texture while fetching from it (Texture.NEAREST_SAMPLINGMODE...)\n     * @param onLoad defines a callback triggered when the texture has been loaded\n     * @param onError defines a callback triggered when an error occurred during the loading session\n     * @param buffer defines the buffer to load the texture from in case the texture is loaded from a buffer representation\n     * @param deleteBuffer defines if the buffer we are loading the texture from should be deleted after load\n     * @param format defines the format of the texture we are trying to load (Engine.TEXTUREFORMAT_RGBA...)\n     * @param mimeType defines an optional mime type information\n     * @param loaderOptions options to be passed to the loader\n     * @param creationFlags specific flags to use when creating the texture (1 for storage textures, for eg)\n     * @param forcedExtension defines the extension to use to pick the right loader\n     */\n    constructor(url, sceneOrEngine, noMipmapOrOptions, invertY, samplingMode = Texture.TRILINEAR_SAMPLINGMODE, onLoad = null, onError = null, buffer = null, deleteBuffer = false, format, mimeType, loaderOptions, creationFlags, forcedExtension) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        super(sceneOrEngine);\n        /**\n         * Define the url of the texture.\n         */\n        this.url = null;\n        /**\n         * Define an offset on the texture to offset the u coordinates of the UVs\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/moreMaterials#offsetting\n         */\n        this.uOffset = 0;\n        /**\n         * Define an offset on the texture to offset the v coordinates of the UVs\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/moreMaterials#offsetting\n         */\n        this.vOffset = 0;\n        /**\n         * Define an offset on the texture to scale the u coordinates of the UVs\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/moreMaterials#tiling\n         */\n        this.uScale = 1.0;\n        /**\n         * Define an offset on the texture to scale the v coordinates of the UVs\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/moreMaterials#tiling\n         */\n        this.vScale = 1.0;\n        /**\n         * Define an offset on the texture to rotate around the u coordinates of the UVs\n         * The angle is defined in radians.\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/moreMaterials\n         */\n        this.uAng = 0;\n        /**\n         * Define an offset on the texture to rotate around the v coordinates of the UVs\n         * The angle is defined in radians.\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/moreMaterials\n         */\n        this.vAng = 0;\n        /**\n         * Define an offset on the texture to rotate around the w coordinates of the UVs (in case of 3d texture)\n         * The angle is defined in radians.\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/moreMaterials\n         */\n        this.wAng = 0;\n        /**\n         * Defines the center of rotation (U)\n         */\n        this.uRotationCenter = 0.5;\n        /**\n         * Defines the center of rotation (V)\n         */\n        this.vRotationCenter = 0.5;\n        /**\n         * Defines the center of rotation (W)\n         */\n        this.wRotationCenter = 0.5;\n        /**\n         * Sets this property to true to avoid deformations when rotating the texture with non-uniform scaling\n         */\n        this.homogeneousRotationInUVTransform = false;\n        /**\n         * List of inspectable custom properties (used by the Inspector)\n         * @see https://doc.babylonjs.com/toolsAndResources/inspector#extensibility\n         */\n        this.inspectableCustomProperties = null;\n        this._noMipmap = false;\n        /** @internal */\n        this._invertY = false;\n        this._rowGenerationMatrix = null;\n        this._cachedTextureMatrix = null;\n        this._projectionModeMatrix = null;\n        this._t0 = null;\n        this._t1 = null;\n        this._t2 = null;\n        this._cachedUOffset = -1;\n        this._cachedVOffset = -1;\n        this._cachedUScale = 0;\n        this._cachedVScale = 0;\n        this._cachedUAng = -1;\n        this._cachedVAng = -1;\n        this._cachedWAng = -1;\n        this._cachedReflectionProjectionMatrixId = -1;\n        this._cachedURotationCenter = -1;\n        this._cachedVRotationCenter = -1;\n        this._cachedWRotationCenter = -1;\n        this._cachedHomogeneousRotationInUVTransform = false;\n        this._cachedReflectionTextureMatrix = null;\n        this._cachedReflectionUOffset = -1;\n        this._cachedReflectionVOffset = -1;\n        this._cachedReflectionUScale = 0;\n        this._cachedReflectionVScale = 0;\n        this._cachedReflectionCoordinatesMode = -1;\n        /** @internal */\n        this._buffer = null;\n        this._deleteBuffer = false;\n        this._format = null;\n        this._delayedOnLoad = null;\n        this._delayedOnError = null;\n        /**\n         * Observable triggered once the texture has been loaded.\n         */\n        this.onLoadObservable = new Observable();\n        this._isBlocking = true;\n        this.name = url || \"\";\n        this.url = url;\n        let noMipmap;\n        let useSRGBBuffer = false;\n        let internalTexture = null;\n        if (typeof noMipmapOrOptions === \"object\" && noMipmapOrOptions !== null) {\n            noMipmap = (_a = noMipmapOrOptions.noMipmap) !== null && _a !== void 0 ? _a : false;\n            invertY = (_b = noMipmapOrOptions.invertY) !== null && _b !== void 0 ? _b : (CompatibilityOptions.UseOpenGLOrientationForUV ? false : true);\n            samplingMode = (_c = noMipmapOrOptions.samplingMode) !== null && _c !== void 0 ? _c : Texture.TRILINEAR_SAMPLINGMODE;\n            onLoad = (_d = noMipmapOrOptions.onLoad) !== null && _d !== void 0 ? _d : null;\n            onError = (_e = noMipmapOrOptions.onError) !== null && _e !== void 0 ? _e : null;\n            buffer = (_f = noMipmapOrOptions.buffer) !== null && _f !== void 0 ? _f : null;\n            deleteBuffer = (_g = noMipmapOrOptions.deleteBuffer) !== null && _g !== void 0 ? _g : false;\n            format = noMipmapOrOptions.format;\n            mimeType = noMipmapOrOptions.mimeType;\n            loaderOptions = noMipmapOrOptions.loaderOptions;\n            creationFlags = noMipmapOrOptions.creationFlags;\n            useSRGBBuffer = (_h = noMipmapOrOptions.useSRGBBuffer) !== null && _h !== void 0 ? _h : false;\n            internalTexture = (_j = noMipmapOrOptions.internalTexture) !== null && _j !== void 0 ? _j : null;\n        }\n        else {\n            noMipmap = !!noMipmapOrOptions;\n        }\n        this._noMipmap = noMipmap;\n        this._invertY = invertY === undefined ? (CompatibilityOptions.UseOpenGLOrientationForUV ? false : true) : invertY;\n        this._initialSamplingMode = samplingMode;\n        this._buffer = buffer;\n        this._deleteBuffer = deleteBuffer;\n        this._mimeType = mimeType;\n        this._loaderOptions = loaderOptions;\n        this._creationFlags = creationFlags;\n        this._useSRGBBuffer = useSRGBBuffer;\n        this._forcedExtension = forcedExtension;\n        if (format) {\n            this._format = format;\n        }\n        const scene = this.getScene();\n        const engine = this._getEngine();\n        if (!engine) {\n            return;\n        }\n        engine.onBeforeTextureInitObservable.notifyObservers(this);\n        const load = () => {\n            if (this._texture) {\n                if (this._texture._invertVScale) {\n                    this.vScale *= -1;\n                    this.vOffset += 1;\n                }\n                // Update texture to match internal texture's wrapping\n                if (this._texture._cachedWrapU !== null) {\n                    this.wrapU = this._texture._cachedWrapU;\n                    this._texture._cachedWrapU = null;\n                }\n                if (this._texture._cachedWrapV !== null) {\n                    this.wrapV = this._texture._cachedWrapV;\n                    this._texture._cachedWrapV = null;\n                }\n                if (this._texture._cachedWrapR !== null) {\n                    this.wrapR = this._texture._cachedWrapR;\n                    this._texture._cachedWrapR = null;\n                }\n            }\n            if (this.onLoadObservable.hasObservers()) {\n                this.onLoadObservable.notifyObservers(this);\n            }\n            if (onLoad) {\n                onLoad();\n            }\n            if (!this.isBlocking && scene) {\n                scene.resetCachedMaterial();\n            }\n        };\n        const errorHandler = (message, exception) => {\n            this._loadingError = true;\n            this._errorObject = { message, exception };\n            if (onError) {\n                onError(message, exception);\n            }\n            Texture.OnTextureLoadErrorObservable.notifyObservers(this);\n        };\n        if (!this.url && !internalTexture) {\n            this._delayedOnLoad = load;\n            this._delayedOnError = errorHandler;\n            return;\n        }\n        this._texture = internalTexture !== null && internalTexture !== void 0 ? internalTexture : this._getFromCache(this.url, noMipmap, samplingMode, this._invertY, useSRGBBuffer);\n        if (!this._texture) {\n            if (!scene || !scene.useDelayedTextureLoading) {\n                try {\n                    this._texture = engine.createTexture(this.url, noMipmap, this._invertY, scene, samplingMode, load, errorHandler, this._buffer, undefined, this._format, this._forcedExtension, mimeType, loaderOptions, creationFlags, useSRGBBuffer);\n                }\n                catch (e) {\n                    errorHandler(\"error loading\", e);\n                    throw e;\n                }\n                if (deleteBuffer) {\n                    this._buffer = null;\n                }\n            }\n            else {\n                this.delayLoadState = 4;\n                this._delayedOnLoad = load;\n                this._delayedOnError = errorHandler;\n            }\n        }\n        else {\n            if (this._texture.isReady) {\n                TimingTools.SetImmediate(() => load());\n            }\n            else {\n                const loadObserver = this._texture.onLoadedObservable.add(load);\n                this._texture.onErrorObservable.add((e) => {\n                    var _a;\n                    errorHandler(e.message, e.exception);\n                    (_a = this._texture) === null || _a === void 0 ? void 0 : _a.onLoadedObservable.remove(loadObserver);\n                });\n            }\n        }\n    }\n    /**\n     * Update the url (and optional buffer) of this texture if url was null during construction.\n     * @param url the url of the texture\n     * @param buffer the buffer of the texture (defaults to null)\n     * @param onLoad callback called when the texture is loaded  (defaults to null)\n     * @param forcedExtension defines the extension to use to pick the right loader\n     */\n    updateURL(url, buffer = null, onLoad, forcedExtension) {\n        if (this.url) {\n            this.releaseInternalTexture();\n            this.getScene().markAllMaterialsAsDirty(1);\n        }\n        if (!this.name || this.name.startsWith(\"data:\")) {\n            this.name = url;\n        }\n        this.url = url;\n        this._buffer = buffer;\n        this._forcedExtension = forcedExtension;\n        this.delayLoadState = 4;\n        if (onLoad) {\n            this._delayedOnLoad = onLoad;\n        }\n        this.delayLoad();\n    }\n    /**\n     * Finish the loading sequence of a texture flagged as delayed load.\n     * @internal\n     */\n    delayLoad() {\n        if (this.delayLoadState !== 4) {\n            return;\n        }\n        const scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        this.delayLoadState = 1;\n        this._texture = this._getFromCache(this.url, this._noMipmap, this.samplingMode, this._invertY, this._useSRGBBuffer);\n        if (!this._texture) {\n            this._texture = scene\n                .getEngine()\n                .createTexture(this.url, this._noMipmap, this._invertY, scene, this.samplingMode, this._delayedOnLoad, this._delayedOnError, this._buffer, null, this._format, this._forcedExtension, this._mimeType, this._loaderOptions, this._creationFlags, this._useSRGBBuffer);\n            if (this._deleteBuffer) {\n                this._buffer = null;\n            }\n        }\n        else {\n            if (this._delayedOnLoad) {\n                if (this._texture.isReady) {\n                    TimingTools.SetImmediate(this._delayedOnLoad);\n                }\n                else {\n                    this._texture.onLoadedObservable.add(this._delayedOnLoad);\n                }\n            }\n        }\n        this._delayedOnLoad = null;\n        this._delayedOnError = null;\n    }\n    _prepareRowForTextureGeneration(x, y, z, t) {\n        x *= this._cachedUScale;\n        y *= this._cachedVScale;\n        x -= this.uRotationCenter * this._cachedUScale;\n        y -= this.vRotationCenter * this._cachedVScale;\n        z -= this.wRotationCenter;\n        Vector3.TransformCoordinatesFromFloatsToRef(x, y, z, this._rowGenerationMatrix, t);\n        t.x += this.uRotationCenter * this._cachedUScale + this._cachedUOffset;\n        t.y += this.vRotationCenter * this._cachedVScale + this._cachedVOffset;\n        t.z += this.wRotationCenter;\n    }\n    /**\n     * Checks if the texture has the same transform matrix than another texture\n     * @param texture texture to check against\n     * @returns true if the transforms are the same, else false\n     */\n    checkTransformsAreIdentical(texture) {\n        return (texture !== null &&\n            this.uOffset === texture.uOffset &&\n            this.vOffset === texture.vOffset &&\n            this.uScale === texture.uScale &&\n            this.vScale === texture.vScale &&\n            this.uAng === texture.uAng &&\n            this.vAng === texture.vAng &&\n            this.wAng === texture.wAng);\n    }\n    /**\n     * Get the current texture matrix which includes the requested offsetting, tiling and rotation components.\n     * @param uBase\n     * @returns the transform matrix of the texture.\n     */\n    getTextureMatrix(uBase = 1) {\n        if (this.uOffset === this._cachedUOffset &&\n            this.vOffset === this._cachedVOffset &&\n            this.uScale * uBase === this._cachedUScale &&\n            this.vScale === this._cachedVScale &&\n            this.uAng === this._cachedUAng &&\n            this.vAng === this._cachedVAng &&\n            this.wAng === this._cachedWAng &&\n            this.uRotationCenter === this._cachedURotationCenter &&\n            this.vRotationCenter === this._cachedVRotationCenter &&\n            this.wRotationCenter === this._cachedWRotationCenter &&\n            this.homogeneousRotationInUVTransform === this._cachedHomogeneousRotationInUVTransform) {\n            return this._cachedTextureMatrix;\n        }\n        this._cachedUOffset = this.uOffset;\n        this._cachedVOffset = this.vOffset;\n        this._cachedUScale = this.uScale * uBase;\n        this._cachedVScale = this.vScale;\n        this._cachedUAng = this.uAng;\n        this._cachedVAng = this.vAng;\n        this._cachedWAng = this.wAng;\n        this._cachedURotationCenter = this.uRotationCenter;\n        this._cachedVRotationCenter = this.vRotationCenter;\n        this._cachedWRotationCenter = this.wRotationCenter;\n        this._cachedHomogeneousRotationInUVTransform = this.homogeneousRotationInUVTransform;\n        if (!this._cachedTextureMatrix || !this._rowGenerationMatrix) {\n            this._cachedTextureMatrix = Matrix.Zero();\n            this._rowGenerationMatrix = new Matrix();\n            this._t0 = Vector3.Zero();\n            this._t1 = Vector3.Zero();\n            this._t2 = Vector3.Zero();\n        }\n        Matrix.RotationYawPitchRollToRef(this.vAng, this.uAng, this.wAng, this._rowGenerationMatrix);\n        if (this.homogeneousRotationInUVTransform) {\n            Matrix.TranslationToRef(-this._cachedURotationCenter, -this._cachedVRotationCenter, -this._cachedWRotationCenter, TmpVectors.Matrix[0]);\n            Matrix.TranslationToRef(this._cachedURotationCenter, this._cachedVRotationCenter, this._cachedWRotationCenter, TmpVectors.Matrix[1]);\n            Matrix.ScalingToRef(this._cachedUScale, this._cachedVScale, 0, TmpVectors.Matrix[2]);\n            Matrix.TranslationToRef(this._cachedUOffset, this._cachedVOffset, 0, TmpVectors.Matrix[3]);\n            TmpVectors.Matrix[0].multiplyToRef(this._rowGenerationMatrix, this._cachedTextureMatrix);\n            this._cachedTextureMatrix.multiplyToRef(TmpVectors.Matrix[1], this._cachedTextureMatrix);\n            this._cachedTextureMatrix.multiplyToRef(TmpVectors.Matrix[2], this._cachedTextureMatrix);\n            this._cachedTextureMatrix.multiplyToRef(TmpVectors.Matrix[3], this._cachedTextureMatrix);\n            // copy the translation row to the 3rd row of the matrix so that we don't need to update the shaders (which expects the translation to be on the 3rd row)\n            this._cachedTextureMatrix.setRowFromFloats(2, this._cachedTextureMatrix.m[12], this._cachedTextureMatrix.m[13], this._cachedTextureMatrix.m[14], 1);\n        }\n        else {\n            this._prepareRowForTextureGeneration(0, 0, 0, this._t0);\n            this._prepareRowForTextureGeneration(1.0, 0, 0, this._t1);\n            this._prepareRowForTextureGeneration(0, 1.0, 0, this._t2);\n            this._t1.subtractInPlace(this._t0);\n            this._t2.subtractInPlace(this._t0);\n            Matrix.FromValuesToRef(this._t1.x, this._t1.y, this._t1.z, 0.0, this._t2.x, this._t2.y, this._t2.z, 0.0, this._t0.x, this._t0.y, this._t0.z, 0.0, 0.0, 0.0, 0.0, 1.0, this._cachedTextureMatrix);\n        }\n        const scene = this.getScene();\n        if (!scene) {\n            return this._cachedTextureMatrix;\n        }\n        if (this.optimizeUVAllocation) {\n            // We flag the materials that are using this texture as \"texture dirty\" because depending on the fact that the matrix is the identity or not, some defines\n            // will get different values (see MaterialHelper.PrepareDefinesForMergedUV), meaning we should regenerate the effect accordingly\n            scene.markAllMaterialsAsDirty(1, (mat) => {\n                return mat.hasTexture(this);\n            });\n        }\n        return this._cachedTextureMatrix;\n    }\n    /**\n     * Get the current matrix used to apply reflection. This is useful to rotate an environment texture for instance.\n     * @returns The reflection texture transform\n     */\n    getReflectionTextureMatrix() {\n        const scene = this.getScene();\n        if (!scene) {\n            return this._cachedReflectionTextureMatrix;\n        }\n        if (this.uOffset === this._cachedReflectionUOffset &&\n            this.vOffset === this._cachedReflectionVOffset &&\n            this.uScale === this._cachedReflectionUScale &&\n            this.vScale === this._cachedReflectionVScale &&\n            this.coordinatesMode === this._cachedReflectionCoordinatesMode) {\n            if (this.coordinatesMode === Texture.PROJECTION_MODE) {\n                if (this._cachedReflectionProjectionMatrixId === scene.getProjectionMatrix().updateFlag) {\n                    return this._cachedReflectionTextureMatrix;\n                }\n            }\n            else {\n                return this._cachedReflectionTextureMatrix;\n            }\n        }\n        if (!this._cachedReflectionTextureMatrix) {\n            this._cachedReflectionTextureMatrix = Matrix.Zero();\n        }\n        if (!this._projectionModeMatrix) {\n            this._projectionModeMatrix = Matrix.Zero();\n        }\n        const flagMaterialsAsTextureDirty = this._cachedReflectionCoordinatesMode !== this.coordinatesMode;\n        this._cachedReflectionUOffset = this.uOffset;\n        this._cachedReflectionVOffset = this.vOffset;\n        this._cachedReflectionUScale = this.uScale;\n        this._cachedReflectionVScale = this.vScale;\n        this._cachedReflectionCoordinatesMode = this.coordinatesMode;\n        switch (this.coordinatesMode) {\n            case Texture.PLANAR_MODE: {\n                Matrix.IdentityToRef(this._cachedReflectionTextureMatrix);\n                this._cachedReflectionTextureMatrix[0] = this.uScale;\n                this._cachedReflectionTextureMatrix[5] = this.vScale;\n                this._cachedReflectionTextureMatrix[12] = this.uOffset;\n                this._cachedReflectionTextureMatrix[13] = this.vOffset;\n                break;\n            }\n            case Texture.PROJECTION_MODE: {\n                Matrix.FromValuesToRef(0.5, 0.0, 0.0, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 1.0, 1.0, this._projectionModeMatrix);\n                const projectionMatrix = scene.getProjectionMatrix();\n                this._cachedReflectionProjectionMatrixId = projectionMatrix.updateFlag;\n                projectionMatrix.multiplyToRef(this._projectionModeMatrix, this._cachedReflectionTextureMatrix);\n                break;\n            }\n            default:\n                Matrix.IdentityToRef(this._cachedReflectionTextureMatrix);\n                break;\n        }\n        if (flagMaterialsAsTextureDirty) {\n            // We flag the materials that are using this texture as \"texture dirty\" if the coordinatesMode has changed.\n            // Indeed, this property is used to set the value of some defines used to generate the effect (in material.isReadyForSubMesh), so we must make sure this code will be re-executed and the effect recreated if necessary\n            scene.markAllMaterialsAsDirty(1, (mat) => {\n                return mat.getActiveTextures().indexOf(this) !== -1;\n            });\n        }\n        return this._cachedReflectionTextureMatrix;\n    }\n    /**\n     * Clones the texture.\n     * @returns the cloned texture\n     */\n    clone() {\n        const options = {\n            noMipmap: this._noMipmap,\n            invertY: this._invertY,\n            samplingMode: this.samplingMode,\n            onLoad: undefined,\n            onError: undefined,\n            buffer: this._texture ? this._texture._buffer : undefined,\n            deleteBuffer: this._deleteBuffer,\n            format: this.textureFormat,\n            mimeType: this.mimeType,\n            loaderOptions: this._loaderOptions,\n            creationFlags: this._creationFlags,\n            useSRGBBuffer: this._useSRGBBuffer,\n        };\n        return SerializationHelper.Clone(() => {\n            return new Texture(this._texture ? this._texture.url : null, this.getScene(), options);\n        }, this);\n    }\n    /**\n     * Serialize the texture to a JSON representation we can easily use in the respective Parse function.\n     * @returns The JSON representation of the texture\n     */\n    serialize() {\n        var _a, _b;\n        const savedName = this.name;\n        if (!Texture.SerializeBuffers) {\n            if (this.name.startsWith(\"data:\")) {\n                this.name = \"\";\n            }\n        }\n        if (this.name.startsWith(\"data:\") && this.url === this.name) {\n            this.url = \"\";\n        }\n        const serializationObject = super.serialize(Texture._SerializeInternalTextureUniqueId);\n        if (!serializationObject) {\n            return null;\n        }\n        if (Texture.SerializeBuffers || Texture.ForceSerializeBuffers) {\n            if (typeof this._buffer === \"string\" && this._buffer.substr(0, 5) === \"data:\") {\n                serializationObject.base64String = this._buffer;\n                serializationObject.name = serializationObject.name.replace(\"data:\", \"\");\n            }\n            else if (this.url && this.url.startsWith(\"data:\") && this._buffer instanceof Uint8Array) {\n                serializationObject.base64String = \"data:image/png;base64,\" + EncodeArrayBufferToBase64(this._buffer);\n            }\n            else if (Texture.ForceSerializeBuffers || (this.url && this.url.startsWith(\"blob:\")) || this._forceSerialize) {\n                serializationObject.base64String =\n                    !this._engine || this._engine._features.supportSyncTextureRead ? GenerateBase64StringFromTexture(this) : GenerateBase64StringFromTextureAsync(this);\n            }\n        }\n        serializationObject.invertY = this._invertY;\n        serializationObject.samplingMode = this.samplingMode;\n        serializationObject._creationFlags = this._creationFlags;\n        serializationObject._useSRGBBuffer = this._useSRGBBuffer;\n        if (Texture._SerializeInternalTextureUniqueId) {\n            serializationObject.internalTextureUniqueId = (_b = (_a = this._texture) === null || _a === void 0 ? void 0 : _a.uniqueId) !== null && _b !== void 0 ? _b : undefined;\n        }\n        this.name = savedName;\n        return serializationObject;\n    }\n    /**\n     * Get the current class name of the texture useful for serialization or dynamic coding.\n     * @returns \"Texture\"\n     */\n    getClassName() {\n        return \"Texture\";\n    }\n    /**\n     * Dispose the texture and release its associated resources.\n     */\n    dispose() {\n        super.dispose();\n        this.onLoadObservable.clear();\n        this._delayedOnLoad = null;\n        this._delayedOnError = null;\n        this._buffer = null;\n    }\n    /**\n     * Parse the JSON representation of a texture in order to recreate the texture in the given scene.\n     * @param parsedTexture Define the JSON representation of the texture\n     * @param scene Define the scene the parsed texture should be instantiated in\n     * @param rootUrl Define the root url of the parsing sequence in the case of relative dependencies\n     * @returns The parsed texture if successful\n     */\n    static Parse(parsedTexture, scene, rootUrl) {\n        if (parsedTexture.customType) {\n            const customTexture = InstantiationTools.Instantiate(parsedTexture.customType);\n            // Update Sampling Mode\n            const parsedCustomTexture = customTexture.Parse(parsedTexture, scene, rootUrl);\n            if (parsedTexture.samplingMode && parsedCustomTexture.updateSamplingMode && parsedCustomTexture._samplingMode) {\n                if (parsedCustomTexture._samplingMode !== parsedTexture.samplingMode) {\n                    parsedCustomTexture.updateSamplingMode(parsedTexture.samplingMode);\n                }\n            }\n            return parsedCustomTexture;\n        }\n        if (parsedTexture.isCube && !parsedTexture.isRenderTarget) {\n            return Texture._CubeTextureParser(parsedTexture, scene, rootUrl);\n        }\n        const hasInternalTextureUniqueId = parsedTexture.internalTextureUniqueId !== undefined;\n        if (!parsedTexture.name && !parsedTexture.isRenderTarget && !hasInternalTextureUniqueId) {\n            return null;\n        }\n        let internalTexture;\n        if (hasInternalTextureUniqueId) {\n            const cache = scene.getEngine().getLoadedTexturesCache();\n            for (const texture of cache) {\n                if (texture.uniqueId === parsedTexture.internalTextureUniqueId) {\n                    internalTexture = texture;\n                    break;\n                }\n            }\n        }\n        const onLoaded = (texture) => {\n            var _a;\n            // Clear cache\n            if (texture && texture._texture) {\n                texture._texture._cachedWrapU = null;\n                texture._texture._cachedWrapV = null;\n                texture._texture._cachedWrapR = null;\n            }\n            // Update Sampling Mode\n            if (parsedTexture.samplingMode) {\n                const sampling = parsedTexture.samplingMode;\n                if (texture && texture.samplingMode !== sampling) {\n                    texture.updateSamplingMode(sampling);\n                }\n            }\n            // Animations\n            if (texture && parsedTexture.animations) {\n                for (let animationIndex = 0; animationIndex < parsedTexture.animations.length; animationIndex++) {\n                    const parsedAnimation = parsedTexture.animations[animationIndex];\n                    const internalClass = GetClass(\"BABYLON.Animation\");\n                    if (internalClass) {\n                        texture.animations.push(internalClass.Parse(parsedAnimation));\n                    }\n                }\n            }\n            if (hasInternalTextureUniqueId && !internalTexture) {\n                (_a = texture === null || texture === void 0 ? void 0 : texture._texture) === null || _a === void 0 ? void 0 : _a._setUniqueId(parsedTexture.internalTextureUniqueId);\n            }\n        };\n        const texture = SerializationHelper.Parse(() => {\n            var _a, _b, _c;\n            let generateMipMaps = true;\n            if (parsedTexture.noMipmap) {\n                generateMipMaps = false;\n            }\n            if (parsedTexture.mirrorPlane) {\n                const mirrorTexture = Texture._CreateMirror(parsedTexture.name, parsedTexture.renderTargetSize, scene, generateMipMaps);\n                mirrorTexture._waitingRenderList = parsedTexture.renderList;\n                mirrorTexture.mirrorPlane = Plane.FromArray(parsedTexture.mirrorPlane);\n                onLoaded(mirrorTexture);\n                return mirrorTexture;\n            }\n            else if (parsedTexture.isRenderTarget) {\n                let renderTargetTexture = null;\n                if (parsedTexture.isCube) {\n                    // Search for an existing reflection probe (which contains a cube render target texture)\n                    if (scene.reflectionProbes) {\n                        for (let index = 0; index < scene.reflectionProbes.length; index++) {\n                            const probe = scene.reflectionProbes[index];\n                            if (probe.name === parsedTexture.name) {\n                                return probe.cubeTexture;\n                            }\n                        }\n                    }\n                }\n                else {\n                    renderTargetTexture = Texture._CreateRenderTargetTexture(parsedTexture.name, parsedTexture.renderTargetSize, scene, generateMipMaps, (_a = parsedTexture._creationFlags) !== null && _a !== void 0 ? _a : 0);\n                    renderTargetTexture._waitingRenderList = parsedTexture.renderList;\n                }\n                onLoaded(renderTargetTexture);\n                return renderTargetTexture;\n            }\n            else {\n                let texture;\n                if (parsedTexture.base64String && !internalTexture) {\n                    // name and url are the same to ensure caching happens from the actual base64 string\n                    texture = Texture.CreateFromBase64String(parsedTexture.base64String, parsedTexture.base64String, scene, !generateMipMaps, parsedTexture.invertY, parsedTexture.samplingMode, () => {\n                        onLoaded(texture);\n                    }, (_b = parsedTexture._creationFlags) !== null && _b !== void 0 ? _b : 0, (_c = parsedTexture._useSRGBBuffer) !== null && _c !== void 0 ? _c : false);\n                    // prettier name to fit with the loaded data\n                    texture.name = parsedTexture.name;\n                }\n                else {\n                    let url;\n                    if (parsedTexture.name && parsedTexture.name.indexOf(\"://\") > 0) {\n                        url = parsedTexture.name;\n                    }\n                    else {\n                        url = rootUrl + parsedTexture.name;\n                    }\n                    if (parsedTexture.url && (parsedTexture.url.startsWith(\"data:\") || Texture.UseSerializedUrlIfAny)) {\n                        url = parsedTexture.url;\n                    }\n                    const options = {\n                        noMipmap: !generateMipMaps,\n                        invertY: parsedTexture.invertY,\n                        samplingMode: parsedTexture.samplingMode,\n                        onLoad: () => {\n                            onLoaded(texture);\n                        },\n                        internalTexture,\n                    };\n                    texture = new Texture(url, scene, options);\n                }\n                return texture;\n            }\n        }, parsedTexture, scene);\n        return texture;\n    }\n    /**\n     * Creates a texture from its base 64 representation.\n     * @param data Define the base64 payload without the data: prefix\n     * @param name Define the name of the texture in the scene useful fo caching purpose for instance\n     * @param scene Define the scene the texture should belong to\n     * @param noMipmapOrOptions defines if the texture will require mip maps or not or set of all options to create the texture\n     * @param invertY define if the texture needs to be inverted on the y axis during loading\n     * @param samplingMode define the sampling mode we want for the texture while fetching from it (Texture.NEAREST_SAMPLINGMODE...)\n     * @param onLoad define a callback triggered when the texture has been loaded\n     * @param onError define a callback triggered when an error occurred during the loading session\n     * @param format define the format of the texture we are trying to load (Engine.TEXTUREFORMAT_RGBA...)\n     * @param creationFlags specific flags to use when creating the texture (1 for storage textures, for eg)\n     * @returns the created texture\n     */\n    static CreateFromBase64String(data, name, scene, noMipmapOrOptions, invertY, samplingMode = Texture.TRILINEAR_SAMPLINGMODE, onLoad = null, onError = null, format = 5, creationFlags) {\n        return new Texture(\"data:\" + name, scene, noMipmapOrOptions, invertY, samplingMode, onLoad, onError, data, false, format, undefined, undefined, creationFlags);\n    }\n    /**\n     * Creates a texture from its data: representation. (data: will be added in case only the payload has been passed in)\n     * @param name Define the name of the texture in the scene useful fo caching purpose for instance\n     * @param buffer define the buffer to load the texture from in case the texture is loaded from a buffer representation\n     * @param scene Define the scene the texture should belong to\n     * @param deleteBuffer define if the buffer we are loading the texture from should be deleted after load\n     * @param noMipmapOrOptions defines if the texture will require mip maps or not or set of all options to create the texture\n     * @param invertY define if the texture needs to be inverted on the y axis during loading\n     * @param samplingMode define the sampling mode we want for the texture while fetching from it (Texture.NEAREST_SAMPLINGMODE...)\n     * @param onLoad define a callback triggered when the texture has been loaded\n     * @param onError define a callback triggered when an error occurred during the loading session\n     * @param format define the format of the texture we are trying to load (Engine.TEXTUREFORMAT_RGBA...)\n     * @param creationFlags specific flags to use when creating the texture (1 for storage textures, for eg)\n     * @returns the created texture\n     */\n    static LoadFromDataString(name, buffer, scene, deleteBuffer = false, noMipmapOrOptions, invertY = true, samplingMode = Texture.TRILINEAR_SAMPLINGMODE, onLoad = null, onError = null, format = 5, creationFlags) {\n        if (name.substr(0, 5) !== \"data:\") {\n            name = \"data:\" + name;\n        }\n        return new Texture(name, scene, noMipmapOrOptions, invertY, samplingMode, onLoad, onError, buffer, deleteBuffer, format, undefined, undefined, creationFlags);\n    }\n}\n/**\n * Gets or sets a general boolean used to indicate that textures containing direct data (buffers) must be saved as part of the serialization process\n */\nTexture.SerializeBuffers = true;\n/**\n * Gets or sets a general boolean used to indicate that texture buffers must be saved as part of the serialization process.\n * If no buffer exists, one will be created as base64 string from the internal webgl data.\n */\nTexture.ForceSerializeBuffers = false;\n/**\n * This observable will notify when any texture had a loading error\n */\nTexture.OnTextureLoadErrorObservable = new Observable();\n/** @internal */\nTexture._SerializeInternalTextureUniqueId = false;\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nTexture._CubeTextureParser = (jsonTexture, scene, rootUrl) => {\n    throw _WarnImport(\"CubeTexture\");\n};\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nTexture._CreateMirror = (name, renderTargetSize, scene, generateMipMaps) => {\n    throw _WarnImport(\"MirrorTexture\");\n};\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nTexture._CreateRenderTargetTexture = (name, renderTargetSize, scene, generateMipMaps, creationFlags) => {\n    throw _WarnImport(\"RenderTargetTexture\");\n};\n/** nearest is mag = nearest and min = nearest and no mip */\nTexture.NEAREST_SAMPLINGMODE = 1;\n/** nearest is mag = nearest and min = nearest and mip = linear */\nTexture.NEAREST_NEAREST_MIPLINEAR = 8; // nearest is mag = nearest and min = nearest and mip = linear\n/** Bilinear is mag = linear and min = linear and no mip */\nTexture.BILINEAR_SAMPLINGMODE = 2;\n/** Bilinear is mag = linear and min = linear and mip = nearest */\nTexture.LINEAR_LINEAR_MIPNEAREST = 11; // Bilinear is mag = linear and min = linear and mip = nearest\n/** Trilinear is mag = linear and min = linear and mip = linear */\nTexture.TRILINEAR_SAMPLINGMODE = 3;\n/** Trilinear is mag = linear and min = linear and mip = linear */\nTexture.LINEAR_LINEAR_MIPLINEAR = 3; // Trilinear is mag = linear and min = linear and mip = linear\n/** mag = nearest and min = nearest and mip = nearest */\nTexture.NEAREST_NEAREST_MIPNEAREST = 4;\n/** mag = nearest and min = linear and mip = nearest */\nTexture.NEAREST_LINEAR_MIPNEAREST = 5;\n/** mag = nearest and min = linear and mip = linear */\nTexture.NEAREST_LINEAR_MIPLINEAR = 6;\n/** mag = nearest and min = linear and mip = none */\nTexture.NEAREST_LINEAR = 7;\n/** mag = nearest and min = nearest and mip = none */\nTexture.NEAREST_NEAREST = 1;\n/** mag = linear and min = nearest and mip = nearest */\nTexture.LINEAR_NEAREST_MIPNEAREST = 9;\n/** mag = linear and min = nearest and mip = linear */\nTexture.LINEAR_NEAREST_MIPLINEAR = 10;\n/** mag = linear and min = linear and mip = none */\nTexture.LINEAR_LINEAR = 2;\n/** mag = linear and min = nearest and mip = none */\nTexture.LINEAR_NEAREST = 12;\n/** Explicit coordinates mode */\nTexture.EXPLICIT_MODE = 0;\n/** Spherical coordinates mode */\nTexture.SPHERICAL_MODE = 1;\n/** Planar coordinates mode */\nTexture.PLANAR_MODE = 2;\n/** Cubic coordinates mode */\nTexture.CUBIC_MODE = 3;\n/** Projection coordinates mode */\nTexture.PROJECTION_MODE = 4;\n/** Inverse Cubic coordinates mode */\nTexture.SKYBOX_MODE = 5;\n/** Inverse Cubic coordinates mode */\nTexture.INVCUBIC_MODE = 6;\n/** Equirectangular coordinates mode */\nTexture.EQUIRECTANGULAR_MODE = 7;\n/** Equirectangular Fixed coordinates mode */\nTexture.FIXED_EQUIRECTANGULAR_MODE = 8;\n/** Equirectangular Fixed Mirrored coordinates mode */\nTexture.FIXED_EQUIRECTANGULAR_MIRRORED_MODE = 9;\n/** Texture is not repeating outside of 0..1 UVs */\nTexture.CLAMP_ADDRESSMODE = 0;\n/** Texture is repeating outside of 0..1 UVs */\nTexture.WRAP_ADDRESSMODE = 1;\n/** Texture is repeating and mirrored */\nTexture.MIRROR_ADDRESSMODE = 2;\n/**\n * Gets or sets a boolean which defines if the texture url must be build from the serialized URL instead of just using the name and loading them side by side with the scene file\n */\nTexture.UseSerializedUrlIfAny = false;\n__decorate([\n    serialize()\n], Texture.prototype, \"url\", void 0);\n__decorate([\n    serialize()\n], Texture.prototype, \"uOffset\", void 0);\n__decorate([\n    serialize()\n], Texture.prototype, \"vOffset\", void 0);\n__decorate([\n    serialize()\n], Texture.prototype, \"uScale\", void 0);\n__decorate([\n    serialize()\n], Texture.prototype, \"vScale\", void 0);\n__decorate([\n    serialize()\n], Texture.prototype, \"uAng\", void 0);\n__decorate([\n    serialize()\n], Texture.prototype, \"vAng\", void 0);\n__decorate([\n    serialize()\n], Texture.prototype, \"wAng\", void 0);\n__decorate([\n    serialize()\n], Texture.prototype, \"uRotationCenter\", void 0);\n__decorate([\n    serialize()\n], Texture.prototype, \"vRotationCenter\", void 0);\n__decorate([\n    serialize()\n], Texture.prototype, \"wRotationCenter\", void 0);\n__decorate([\n    serialize()\n], Texture.prototype, \"homogeneousRotationInUVTransform\", void 0);\n__decorate([\n    serialize()\n], Texture.prototype, \"isBlocking\", null);\n// References the dependencies.\nRegisterClass(\"BABYLON.Texture\", Texture);\nSerializationHelper._TextureParser = Texture.Parse;\n//# sourceMappingURL=texture.js.map","\nimport { Size } from \"../../Maths/math.size.js\";\n/**\n * Base class of all the textures in babylon.\n * It groups all the common properties required to work with Thin Engine.\n */\nexport class ThinTexture {\n    /**\n     * | Value | Type               | Description |\n     * | ----- | ------------------ | ----------- |\n     * | 0     | CLAMP_ADDRESSMODE  |             |\n     * | 1     | WRAP_ADDRESSMODE   |             |\n     * | 2     | MIRROR_ADDRESSMODE |             |\n     */\n    get wrapU() {\n        return this._wrapU;\n    }\n    set wrapU(value) {\n        this._wrapU = value;\n    }\n    /**\n     * | Value | Type               | Description |\n     * | ----- | ------------------ | ----------- |\n     * | 0     | CLAMP_ADDRESSMODE  |             |\n     * | 1     | WRAP_ADDRESSMODE   |             |\n     * | 2     | MIRROR_ADDRESSMODE |             |\n     */\n    get wrapV() {\n        return this._wrapV;\n    }\n    set wrapV(value) {\n        this._wrapV = value;\n    }\n    /**\n     * How a texture is mapped.\n     * Unused in thin texture mode.\n     */\n    get coordinatesMode() {\n        return 0;\n    }\n    /**\n     * Define if the texture is a cube texture or if false a 2d texture.\n     */\n    get isCube() {\n        if (!this._texture) {\n            return false;\n        }\n        return this._texture.isCube;\n    }\n    set isCube(value) {\n        if (!this._texture) {\n            return;\n        }\n        this._texture.isCube = value;\n    }\n    /**\n     * Define if the texture is a 3d texture (webgl 2) or if false a 2d texture.\n     */\n    get is3D() {\n        if (!this._texture) {\n            return false;\n        }\n        return this._texture.is3D;\n    }\n    set is3D(value) {\n        if (!this._texture) {\n            return;\n        }\n        this._texture.is3D = value;\n    }\n    /**\n     * Define if the texture is a 2d array texture (webgl 2) or if false a 2d texture.\n     */\n    get is2DArray() {\n        if (!this._texture) {\n            return false;\n        }\n        return this._texture.is2DArray;\n    }\n    set is2DArray(value) {\n        if (!this._texture) {\n            return;\n        }\n        this._texture.is2DArray = value;\n    }\n    /**\n     * Get the class name of the texture.\n     * @returns \"ThinTexture\"\n     */\n    getClassName() {\n        return \"ThinTexture\";\n    }\n    /**\n     * Instantiates a new ThinTexture.\n     * Base class of all the textures in babylon.\n     * This can be used as an internal texture wrapper in ThinEngine to benefit from the cache\n     * @param internalTexture Define the internalTexture to wrap\n     */\n    constructor(internalTexture) {\n        this._wrapU = 1;\n        this._wrapV = 1;\n        /**\n         * | Value | Type               | Description |\n         * | ----- | ------------------ | ----------- |\n         * | 0     | CLAMP_ADDRESSMODE  |             |\n         * | 1     | WRAP_ADDRESSMODE   |             |\n         * | 2     | MIRROR_ADDRESSMODE |             |\n         */\n        this.wrapR = 1;\n        /**\n         * With compliant hardware and browser (supporting anisotropic filtering)\n         * this defines the level of anisotropic filtering in the texture.\n         * The higher the better but the slower. This defaults to 4 as it seems to be the best tradeoff.\n         */\n        this.anisotropicFilteringLevel = 4;\n        /**\n         * Define the current state of the loading sequence when in delayed load mode.\n         */\n        this.delayLoadState = 0;\n        /** @internal */\n        this._texture = null;\n        this._engine = null;\n        this._cachedSize = Size.Zero();\n        this._cachedBaseSize = Size.Zero();\n        /** @internal */\n        this._initialSamplingMode = 2;\n        this._texture = internalTexture;\n        if (this._texture) {\n            this._engine = this._texture.getEngine();\n        }\n    }\n    /**\n     * Get if the texture is ready to be used (downloaded, converted, mip mapped...).\n     * @returns true if fully ready\n     */\n    isReady() {\n        if (this.delayLoadState === 4) {\n            this.delayLoad();\n            return false;\n        }\n        if (this._texture) {\n            return this._texture.isReady;\n        }\n        return false;\n    }\n    /**\n     * Triggers the load sequence in delayed load mode.\n     */\n    delayLoad() { }\n    /**\n     * Get the underlying lower level texture from Babylon.\n     * @returns the internal texture\n     */\n    getInternalTexture() {\n        return this._texture;\n    }\n    /**\n     * Get the size of the texture.\n     * @returns the texture size.\n     */\n    getSize() {\n        if (this._texture) {\n            if (this._texture.width) {\n                this._cachedSize.width = this._texture.width;\n                this._cachedSize.height = this._texture.height;\n                return this._cachedSize;\n            }\n            if (this._texture._size) {\n                this._cachedSize.width = this._texture._size;\n                this._cachedSize.height = this._texture._size;\n                return this._cachedSize;\n            }\n        }\n        return this._cachedSize;\n    }\n    /**\n     * Get the base size of the texture.\n     * It can be different from the size if the texture has been resized for POT for instance\n     * @returns the base size\n     */\n    getBaseSize() {\n        if (!this.isReady() || !this._texture) {\n            this._cachedBaseSize.width = 0;\n            this._cachedBaseSize.height = 0;\n            return this._cachedBaseSize;\n        }\n        if (this._texture._size) {\n            this._cachedBaseSize.width = this._texture._size;\n            this._cachedBaseSize.height = this._texture._size;\n            return this._cachedBaseSize;\n        }\n        this._cachedBaseSize.width = this._texture.baseWidth;\n        this._cachedBaseSize.height = this._texture.baseHeight;\n        return this._cachedBaseSize;\n    }\n    /**\n     * Get the current sampling mode associated with the texture.\n     */\n    get samplingMode() {\n        if (!this._texture) {\n            return this._initialSamplingMode;\n        }\n        return this._texture.samplingMode;\n    }\n    /**\n     * Update the sampling mode of the texture.\n     * Default is Trilinear mode.\n     *\n     * | Value | Type               | Description |\n     * | ----- | ------------------ | ----------- |\n     * | 1     | NEAREST_SAMPLINGMODE or NEAREST_NEAREST_MIPLINEAR  | Nearest is: mag = nearest, min = nearest, mip = linear |\n     * | 2     | BILINEAR_SAMPLINGMODE or LINEAR_LINEAR_MIPNEAREST | Bilinear is: mag = linear, min = linear, mip = nearest |\n     * | 3     | TRILINEAR_SAMPLINGMODE or LINEAR_LINEAR_MIPLINEAR | Trilinear is: mag = linear, min = linear, mip = linear |\n     * | 4     | NEAREST_NEAREST_MIPNEAREST |             |\n     * | 5    | NEAREST_LINEAR_MIPNEAREST |             |\n     * | 6    | NEAREST_LINEAR_MIPLINEAR |             |\n     * | 7    | NEAREST_LINEAR |             |\n     * | 8    | NEAREST_NEAREST |             |\n     * | 9   | LINEAR_NEAREST_MIPNEAREST |             |\n     * | 10   | LINEAR_NEAREST_MIPLINEAR |             |\n     * | 11   | LINEAR_LINEAR |             |\n     * | 12   | LINEAR_NEAREST |             |\n     *\n     *    > _mag_: magnification filter (close to the viewer)\n     *    > _min_: minification filter (far from the viewer)\n     *    > _mip_: filter used between mip map levels\n     *@param samplingMode Define the new sampling mode of the texture\n     */\n    updateSamplingMode(samplingMode) {\n        if (this._texture && this._engine) {\n            this._engine.updateTextureSamplingMode(samplingMode, this._texture);\n        }\n    }\n    /**\n     * Release and destroy the underlying lower level texture aka internalTexture.\n     */\n    releaseInternalTexture() {\n        if (this._texture) {\n            this._texture.dispose();\n            this._texture = null;\n        }\n    }\n    /**\n     * Dispose the texture and release its associated resources.\n     */\n    dispose() {\n        if (this._texture) {\n            this.releaseInternalTexture();\n            this._engine = null;\n        }\n    }\n}\n//# sourceMappingURL=thinTexture.js.map","import { Observable } from \"../../Misc/observable.js\";\nimport { Tools } from \"../../Misc/tools.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { Texture } from \"../../Materials/Textures/texture.js\";\n\nimport \"../../Engines/Extensions/engine.videoTexture.js\";\nimport \"../../Engines/Extensions/engine.dynamicTexture.js\";\nfunction removeSource(video) {\n    // Remove any <source> elements, etc.\n    while (video.firstChild) {\n        video.removeChild(video.firstChild);\n    }\n    // detach srcObject\n    video.srcObject = null;\n    // Set a blank src (https://html.spec.whatwg.org/multipage/media.html#best-practices-for-authors-using-media-elements)\n    video.src = \"\";\n    // Prevent non-important errors maybe (https://twitter.com/beraliv/status/1205214277956775936)\n    video.removeAttribute(\"src\");\n}\n/**\n * If you want to display a video in your scene, this is the special texture for that.\n * This special texture works similar to other textures, with the exception of a few parameters.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/videoTexture\n */\nexport class VideoTexture extends Texture {\n    /**\n     * Event triggered when a dom action is required by the user to play the video.\n     * This happens due to recent changes in browser policies preventing video to auto start.\n     */\n    get onUserActionRequestedObservable() {\n        if (!this._onUserActionRequestedObservable) {\n            this._onUserActionRequestedObservable = new Observable();\n        }\n        return this._onUserActionRequestedObservable;\n    }\n    _processError(reason) {\n        this._errorFound = true;\n        if (this._onError) {\n            this._onError(reason === null || reason === void 0 ? void 0 : reason.message);\n        }\n        else {\n            Logger.Error(reason === null || reason === void 0 ? void 0 : reason.message);\n        }\n    }\n    _handlePlay() {\n        this._errorFound = false;\n        this.video.play().catch((reason) => {\n            if ((reason === null || reason === void 0 ? void 0 : reason.name) === \"NotAllowedError\") {\n                if (this._onUserActionRequestedObservable && this._onUserActionRequestedObservable.hasObservers()) {\n                    this._onUserActionRequestedObservable.notifyObservers(this);\n                    return;\n                }\n                else if (!this.video.muted) {\n                    Logger.Warn(\"Unable to autoplay a video with sound. Trying again with muted turned true\");\n                    this.video.muted = true;\n                    this._errorFound = false;\n                    this.video.play().catch((otherReason) => {\n                        this._processError(otherReason);\n                    });\n                    return;\n                }\n            }\n            this._processError(reason);\n        });\n    }\n    /**\n     * Creates a video texture.\n     * If you want to display a video in your scene, this is the special texture for that.\n     * This special texture works similar to other textures, with the exception of a few parameters.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/videoTexture\n     * @param name optional name, will detect from video source, if not defined\n     * @param src can be used to provide an url, array of urls or an already setup HTML video element.\n     * @param scene is obviously the current scene.\n     * @param generateMipMaps can be used to turn on mipmaps (Can be expensive for videoTextures because they are often updated).\n     * @param invertY is false by default but can be used to invert video on Y axis\n     * @param samplingMode controls the sampling method and is set to TRILINEAR_SAMPLINGMODE by default\n     * @param settings allows finer control over video usage\n     * @param onError defines a callback triggered when an error occurred during the loading session\n     * @param format defines the texture format to use (Engine.TEXTUREFORMAT_RGBA by default)\n     */\n    constructor(name, src, scene, generateMipMaps = false, invertY = false, samplingMode = Texture.TRILINEAR_SAMPLINGMODE, settings = {}, onError, format = 5) {\n        var _a, _b;\n        super(null, scene, !generateMipMaps, invertY);\n        this._onUserActionRequestedObservable = null;\n        this._stillImageCaptured = false;\n        this._displayingPosterTexture = false;\n        this._frameId = -1;\n        this._currentSrc = null;\n        this._errorFound = false;\n        this._resizeInternalTexture = () => {\n            var _a;\n            // Cleanup the old texture before replacing it\n            if (this._texture != null) {\n                this._texture.dispose();\n            }\n            if (!this._getEngine().needPOTTextures || (Tools.IsExponentOfTwo(this.video.videoWidth) && Tools.IsExponentOfTwo(this.video.videoHeight))) {\n                this.wrapU = Texture.WRAP_ADDRESSMODE;\n                this.wrapV = Texture.WRAP_ADDRESSMODE;\n            }\n            else {\n                this.wrapU = Texture.CLAMP_ADDRESSMODE;\n                this.wrapV = Texture.CLAMP_ADDRESSMODE;\n                this._generateMipMaps = false;\n            }\n            this._texture = this._getEngine().createDynamicTexture(this.video.videoWidth, this.video.videoHeight, this._generateMipMaps, this.samplingMode);\n            this._texture.format = (_a = this._format) !== null && _a !== void 0 ? _a : 5;\n            // Reset the frame ID and update the new texture to ensure it pulls in the current video frame\n            this._frameId = -1;\n            this._updateInternalTexture();\n        };\n        this._createInternalTexture = () => {\n            if (this._texture != null) {\n                if (this._displayingPosterTexture) {\n                    this._displayingPosterTexture = false;\n                }\n                else {\n                    return;\n                }\n            }\n            this.video.addEventListener(\"resize\", this._resizeInternalTexture);\n            this._resizeInternalTexture();\n            if (!this.video.autoplay && !this._settings.poster && !this._settings.independentVideoSource) {\n                const oldHandler = this.video.onplaying;\n                const oldMuted = this.video.muted;\n                this.video.muted = true;\n                this.video.onplaying = () => {\n                    this.video.muted = oldMuted;\n                    this.video.onplaying = oldHandler;\n                    this._updateInternalTexture();\n                    if (!this._errorFound) {\n                        this.video.pause();\n                    }\n                    if (this.onLoadObservable.hasObservers()) {\n                        this.onLoadObservable.notifyObservers(this);\n                    }\n                };\n                this._handlePlay();\n            }\n            else {\n                this._updateInternalTexture();\n                if (this.onLoadObservable.hasObservers()) {\n                    this.onLoadObservable.notifyObservers(this);\n                }\n            }\n        };\n        this._reset = () => {\n            if (this._texture == null) {\n                return;\n            }\n            if (!this._displayingPosterTexture) {\n                this._texture.dispose();\n                this._texture = null;\n            }\n        };\n        this._updateInternalTexture = () => {\n            if (this._texture == null) {\n                return;\n            }\n            if (this.video.readyState < this.video.HAVE_CURRENT_DATA) {\n                return;\n            }\n            if (this._displayingPosterTexture) {\n                return;\n            }\n            const frameId = this.getScene().getFrameId();\n            if (this._frameId === frameId) {\n                return;\n            }\n            this._frameId = frameId;\n            this._getEngine().updateVideoTexture(this._texture, this._externalTexture ? this._externalTexture : this.video, this._invertY);\n        };\n        this._settings = {\n            autoPlay: true,\n            loop: true,\n            autoUpdateTexture: true,\n            ...settings,\n        };\n        this._onError = onError;\n        this._generateMipMaps = generateMipMaps;\n        this._initialSamplingMode = samplingMode;\n        this.autoUpdateTexture = this._settings.autoUpdateTexture;\n        this._currentSrc = src;\n        this.name = name || this._getName(src);\n        this.video = this._getVideo(src);\n        this._externalTexture = (_b = (_a = this._engine) === null || _a === void 0 ? void 0 : _a.createExternalTexture(this.video)) !== null && _b !== void 0 ? _b : null;\n        if (!this._settings.independentVideoSource) {\n            if (this._settings.poster) {\n                this.video.poster = this._settings.poster;\n            }\n            if (this._settings.autoPlay !== undefined) {\n                this.video.autoplay = this._settings.autoPlay;\n            }\n            if (this._settings.loop !== undefined) {\n                this.video.loop = this._settings.loop;\n            }\n            if (this._settings.muted !== undefined) {\n                this.video.muted = this._settings.muted;\n            }\n            this.video.setAttribute(\"playsinline\", \"\");\n            this.video.addEventListener(\"paused\", this._updateInternalTexture);\n            this.video.addEventListener(\"seeked\", this._updateInternalTexture);\n            this.video.addEventListener(\"emptied\", this._reset);\n            if (this._settings.autoPlay) {\n                this._handlePlay();\n            }\n        }\n        this._createInternalTextureOnEvent = this._settings.poster && !this._settings.autoPlay ? \"play\" : \"canplay\";\n        this.video.addEventListener(this._createInternalTextureOnEvent, this._createInternalTexture);\n        this._format = format;\n        const videoHasEnoughData = this.video.readyState >= this.video.HAVE_CURRENT_DATA;\n        if (this._settings.poster && (!this._settings.autoPlay || !videoHasEnoughData)) {\n            this._texture = this._getEngine().createTexture(this._settings.poster, false, !this.invertY, scene);\n            this._displayingPosterTexture = true;\n        }\n        else if (videoHasEnoughData) {\n            this._createInternalTexture();\n        }\n    }\n    /**\n     * Get the current class name of the video texture useful for serialization or dynamic coding.\n     * @returns \"VideoTexture\"\n     */\n    getClassName() {\n        return \"VideoTexture\";\n    }\n    _getName(src) {\n        if (src instanceof HTMLVideoElement) {\n            return src.currentSrc;\n        }\n        if (typeof src === \"object\") {\n            return src.toString();\n        }\n        return src;\n    }\n    _getVideo(src) {\n        if (src.isNative) {\n            return src;\n        }\n        if (src instanceof HTMLVideoElement) {\n            Tools.SetCorsBehavior(src.currentSrc, src);\n            return src;\n        }\n        const video = document.createElement(\"video\");\n        if (typeof src === \"string\") {\n            Tools.SetCorsBehavior(src, video);\n            video.src = src;\n        }\n        else {\n            Tools.SetCorsBehavior(src[0], video);\n            src.forEach((url) => {\n                const source = document.createElement(\"source\");\n                source.src = url;\n                video.appendChild(source);\n            });\n        }\n        this.onDisposeObservable.addOnce(() => {\n            removeSource(video);\n        });\n        return video;\n    }\n    /**\n     * @internal Internal method to initiate `update`.\n     */\n    _rebuild() {\n        this.update();\n    }\n    /**\n     * Update Texture in the `auto` mode. Does not do anything if `settings.autoUpdateTexture` is false.\n     */\n    update() {\n        if (!this.autoUpdateTexture) {\n            // Expecting user to call `updateTexture` manually\n            return;\n        }\n        this.updateTexture(true);\n    }\n    /**\n     * Update Texture in `manual` mode. Does not do anything if not visible or paused.\n     * @param isVisible Visibility state, detected by user using `scene.getActiveMeshes()` or otherwise.\n     */\n    updateTexture(isVisible) {\n        if (!isVisible) {\n            return;\n        }\n        if (this.video.paused && this._stillImageCaptured) {\n            return;\n        }\n        this._stillImageCaptured = true;\n        this._updateInternalTexture();\n    }\n    /**\n     * Change video content. Changing video instance or setting multiple urls (as in constructor) is not supported.\n     * @param url New url.\n     */\n    updateURL(url) {\n        this.video.src = url;\n        this._currentSrc = url;\n    }\n    /**\n     * Clones the texture.\n     * @returns the cloned texture\n     */\n    clone() {\n        return new VideoTexture(this.name, this._currentSrc, this.getScene(), this._generateMipMaps, this.invertY, this.samplingMode, this._settings);\n    }\n    /**\n     * Dispose the texture and release its associated resources.\n     */\n    dispose() {\n        var _a;\n        super.dispose();\n        this._currentSrc = null;\n        if (this._onUserActionRequestedObservable) {\n            this._onUserActionRequestedObservable.clear();\n            this._onUserActionRequestedObservable = null;\n        }\n        this.video.removeEventListener(this._createInternalTextureOnEvent, this._createInternalTexture);\n        if (!this._settings.independentVideoSource) {\n            this.video.removeEventListener(\"paused\", this._updateInternalTexture);\n            this.video.removeEventListener(\"seeked\", this._updateInternalTexture);\n            this.video.removeEventListener(\"emptied\", this._reset);\n            this.video.removeEventListener(\"resize\", this._resizeInternalTexture);\n            this.video.pause();\n        }\n        (_a = this._externalTexture) === null || _a === void 0 ? void 0 : _a.dispose();\n    }\n    /**\n     * Creates a video texture straight from a stream.\n     * @param scene Define the scene the texture should be created in\n     * @param stream Define the stream the texture should be created from\n     * @param constraints video constraints\n     * @param invertY Defines if the video should be stored with invert Y set to true (true by default)\n     * @returns The created video texture as a promise\n     */\n    static CreateFromStreamAsync(scene, stream, constraints, invertY = true) {\n        const video = scene.getEngine().createVideoElement(constraints);\n        if (scene.getEngine()._badOS) {\n            // Yes... I know and I hope to remove it soon...\n            document.body.appendChild(video);\n            video.style.transform = \"scale(0.0001, 0.0001)\";\n            video.style.opacity = \"0\";\n            video.style.position = \"fixed\";\n            video.style.bottom = \"0px\";\n            video.style.right = \"0px\";\n        }\n        video.setAttribute(\"autoplay\", \"\");\n        video.setAttribute(\"muted\", \"true\");\n        video.setAttribute(\"playsinline\", \"\");\n        video.muted = true;\n        if (video.isNative) {\n            // No additional configuration needed for native\n        }\n        else if (video.mozSrcObject !== undefined) {\n            // hack for Firefox < 19\n            video.mozSrcObject = stream;\n        }\n        else {\n            if (typeof video.srcObject == \"object\") {\n                video.srcObject = stream;\n            }\n            else {\n                // older API. See https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL#using_object_urls_for_media_streams\n                video.src = window.URL && window.URL.createObjectURL(stream);\n            }\n        }\n        return new Promise((resolve) => {\n            const onPlaying = () => {\n                const videoTexture = new VideoTexture(\"video\", video, scene, true, invertY, undefined, undefined, undefined, 4);\n                if (scene.getEngine()._badOS) {\n                    videoTexture.onDisposeObservable.addOnce(() => {\n                        video.remove();\n                    });\n                }\n                videoTexture.onDisposeObservable.addOnce(() => {\n                    removeSource(video);\n                });\n                resolve(videoTexture);\n                video.removeEventListener(\"playing\", onPlaying);\n            };\n            video.addEventListener(\"playing\", onPlaying);\n            video.play();\n        });\n    }\n    /**\n     * Creates a video texture straight from your WebCam video feed.\n     * @param scene Define the scene the texture should be created in\n     * @param constraints Define the constraints to use to create the web cam feed from WebRTC\n     * @param audioConstaints Define the audio constraints to use to create the web cam feed from WebRTC\n     * @param invertY Defines if the video should be stored with invert Y set to true (true by default)\n     * @returns The created video texture as a promise\n     */\n    static async CreateFromWebCamAsync(scene, constraints, audioConstaints = false, invertY = true) {\n        if (navigator.mediaDevices) {\n            const stream = await navigator.mediaDevices.getUserMedia({\n                video: constraints,\n                audio: audioConstaints,\n            });\n            const videoTexture = await this.CreateFromStreamAsync(scene, stream, constraints, invertY);\n            videoTexture.onDisposeObservable.addOnce(() => {\n                stream.getTracks().forEach((track) => {\n                    track.stop();\n                });\n            });\n            return videoTexture;\n        }\n        return Promise.reject(\"No support for userMedia on this device\");\n    }\n    /**\n     * Creates a video texture straight from your WebCam video feed.\n     * @param scene Defines the scene the texture should be created in\n     * @param onReady Defines a callback to triggered once the texture will be ready\n     * @param constraints Defines the constraints to use to create the web cam feed from WebRTC\n     * @param audioConstaints Defines the audio constraints to use to create the web cam feed from WebRTC\n     * @param invertY Defines if the video should be stored with invert Y set to true (true by default)\n     */\n    static CreateFromWebCam(scene, onReady, constraints, audioConstaints = false, invertY = true) {\n        this.CreateFromWebCamAsync(scene, constraints, audioConstaints, invertY)\n            .then(function (videoTexture) {\n            if (onReady) {\n                onReady(videoTexture);\n            }\n        })\n            .catch(function (err) {\n            Logger.Error(err.name);\n        });\n    }\n}\n//# sourceMappingURL=videoTexture.js.map","/** @internal */\nexport function addClipPlaneUniforms(uniforms) {\n    if (uniforms.indexOf(\"vClipPlane\") === -1) {\n        uniforms.push(\"vClipPlane\");\n    }\n    if (uniforms.indexOf(\"vClipPlane2\") === -1) {\n        uniforms.push(\"vClipPlane2\");\n    }\n    if (uniforms.indexOf(\"vClipPlane3\") === -1) {\n        uniforms.push(\"vClipPlane3\");\n    }\n    if (uniforms.indexOf(\"vClipPlane4\") === -1) {\n        uniforms.push(\"vClipPlane4\");\n    }\n    if (uniforms.indexOf(\"vClipPlane5\") === -1) {\n        uniforms.push(\"vClipPlane5\");\n    }\n    if (uniforms.indexOf(\"vClipPlane6\") === -1) {\n        uniforms.push(\"vClipPlane6\");\n    }\n}\n/** @internal */\nexport function prepareDefinesForClipPlanes(primaryHolder, secondaryHolder, defines) {\n    var _a, _b, _c, _d, _e, _f;\n    let changed = false;\n    let clipPlane = (_a = primaryHolder.clipPlane) !== null && _a !== void 0 ? _a : secondaryHolder.clipPlane;\n    changed = addDefine(clipPlane, defines, \"CLIPPLANE\", \"#define CLIPPLANE\") || changed;\n    clipPlane = (_b = primaryHolder.clipPlane2) !== null && _b !== void 0 ? _b : secondaryHolder.clipPlane2;\n    changed = addDefine(clipPlane, defines, \"CLIPPLANE2\", \"#define CLIPPLANE2\") || changed;\n    clipPlane = (_c = primaryHolder.clipPlane3) !== null && _c !== void 0 ? _c : secondaryHolder.clipPlane3;\n    changed = addDefine(clipPlane, defines, \"CLIPPLANE3\", \"#define CLIPPLANE3\") || changed;\n    clipPlane = (_d = primaryHolder.clipPlane4) !== null && _d !== void 0 ? _d : secondaryHolder.clipPlane4;\n    changed = addDefine(clipPlane, defines, \"CLIPPLANE4\", \"#define CLIPPLANE4\") || changed;\n    clipPlane = (_e = primaryHolder.clipPlane5) !== null && _e !== void 0 ? _e : secondaryHolder.clipPlane5;\n    changed = addDefine(clipPlane, defines, \"CLIPPLANE5\", \"#define CLIPPLANE5\") || changed;\n    clipPlane = (_f = primaryHolder.clipPlane6) !== null && _f !== void 0 ? _f : secondaryHolder.clipPlane6;\n    changed = addDefine(clipPlane, defines, \"CLIPPLANE6\", \"#define CLIPPLANE6\") || changed;\n    return changed;\n}\n/** @internal */\nexport function bindClipPlane(effect, primaryHolder, secondaryHolder) {\n    var _a, _b, _c, _d, _e, _f;\n    let clipPlane = (_a = primaryHolder.clipPlane) !== null && _a !== void 0 ? _a : secondaryHolder.clipPlane;\n    setClipPlane(effect, \"vClipPlane\", clipPlane);\n    clipPlane = (_b = primaryHolder.clipPlane2) !== null && _b !== void 0 ? _b : secondaryHolder.clipPlane2;\n    setClipPlane(effect, \"vClipPlane2\", clipPlane);\n    clipPlane = (_c = primaryHolder.clipPlane3) !== null && _c !== void 0 ? _c : secondaryHolder.clipPlane3;\n    setClipPlane(effect, \"vClipPlane3\", clipPlane);\n    clipPlane = (_d = primaryHolder.clipPlane4) !== null && _d !== void 0 ? _d : secondaryHolder.clipPlane4;\n    setClipPlane(effect, \"vClipPlane4\", clipPlane);\n    clipPlane = (_e = primaryHolder.clipPlane5) !== null && _e !== void 0 ? _e : secondaryHolder.clipPlane5;\n    setClipPlane(effect, \"vClipPlane5\", clipPlane);\n    clipPlane = (_f = primaryHolder.clipPlane6) !== null && _f !== void 0 ? _f : secondaryHolder.clipPlane6;\n    setClipPlane(effect, \"vClipPlane6\", clipPlane);\n}\nfunction setClipPlane(effect, uniformName, clipPlane) {\n    if (clipPlane) {\n        effect.setFloat4(uniformName, clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z, clipPlane.d);\n    }\n}\nfunction addDefine(clipPlane, defines, defineName, defineString) {\n    const defineClipPlane = clipPlane ? true : false;\n    let alreadySet;\n    if (Array.isArray(defines)) {\n        const defineIndex = defines.indexOf(defineString);\n        alreadySet = defineIndex !== -1;\n        if (!alreadySet && clipPlane) {\n            defines.push(defineString);\n        }\n        else if (alreadySet && !clipPlane) {\n            defines.splice(defineIndex, 1);\n        }\n    }\n    else {\n        alreadySet = defines[defineName];\n        defines[defineName] = defineClipPlane;\n    }\n    const changed = alreadySet !== defineClipPlane;\n    return changed;\n}\n//# sourceMappingURL=clipPlaneMaterialHelper.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { SerializationHelper, serialize } from \"../Misc/decorators.js\";\nimport { Color4 } from \"../Maths/math.color.js\";\n/**\n * The color grading curves provide additional color adjustment that is applied after any color grading transform (3D LUT).\n * They allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\n * These are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\n * corresponding to low luminance, medium luminance, and high luminance areas respectively.\n */\nexport class ColorCurves {\n    constructor() {\n        this._dirty = true;\n        this._tempColor = new Color4(0, 0, 0, 0);\n        this._globalCurve = new Color4(0, 0, 0, 0);\n        this._highlightsCurve = new Color4(0, 0, 0, 0);\n        this._midtonesCurve = new Color4(0, 0, 0, 0);\n        this._shadowsCurve = new Color4(0, 0, 0, 0);\n        this._positiveCurve = new Color4(0, 0, 0, 0);\n        this._negativeCurve = new Color4(0, 0, 0, 0);\n        this._globalHue = 30;\n        this._globalDensity = 0;\n        this._globalSaturation = 0;\n        this._globalExposure = 0;\n        this._highlightsHue = 30;\n        this._highlightsDensity = 0;\n        this._highlightsSaturation = 0;\n        this._highlightsExposure = 0;\n        this._midtonesHue = 30;\n        this._midtonesDensity = 0;\n        this._midtonesSaturation = 0;\n        this._midtonesExposure = 0;\n        this._shadowsHue = 30;\n        this._shadowsDensity = 0;\n        this._shadowsSaturation = 0;\n        this._shadowsExposure = 0;\n    }\n    /**\n     * Gets the global Hue value.\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\n     */\n    get globalHue() {\n        return this._globalHue;\n    }\n    /**\n     * Sets the global Hue value.\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\n     */\n    set globalHue(value) {\n        this._globalHue = value;\n        this._dirty = true;\n    }\n    /**\n     * Gets the global Density value.\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\n     * Values less than zero provide a filter of opposite hue.\n     */\n    get globalDensity() {\n        return this._globalDensity;\n    }\n    /**\n     * Sets the global Density value.\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\n     * Values less than zero provide a filter of opposite hue.\n     */\n    set globalDensity(value) {\n        this._globalDensity = value;\n        this._dirty = true;\n    }\n    /**\n     * Gets the global Saturation value.\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\n     */\n    get globalSaturation() {\n        return this._globalSaturation;\n    }\n    /**\n     * Sets the global Saturation value.\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\n     */\n    set globalSaturation(value) {\n        this._globalSaturation = value;\n        this._dirty = true;\n    }\n    /**\n     * Gets the global Exposure value.\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\n     */\n    get globalExposure() {\n        return this._globalExposure;\n    }\n    /**\n     * Sets the global Exposure value.\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\n     */\n    set globalExposure(value) {\n        this._globalExposure = value;\n        this._dirty = true;\n    }\n    /**\n     * Gets the highlights Hue value.\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\n     */\n    get highlightsHue() {\n        return this._highlightsHue;\n    }\n    /**\n     * Sets the highlights Hue value.\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\n     */\n    set highlightsHue(value) {\n        this._highlightsHue = value;\n        this._dirty = true;\n    }\n    /**\n     * Gets the highlights Density value.\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\n     * Values less than zero provide a filter of opposite hue.\n     */\n    get highlightsDensity() {\n        return this._highlightsDensity;\n    }\n    /**\n     * Sets the highlights Density value.\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\n     * Values less than zero provide a filter of opposite hue.\n     */\n    set highlightsDensity(value) {\n        this._highlightsDensity = value;\n        this._dirty = true;\n    }\n    /**\n     * Gets the highlights Saturation value.\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\n     */\n    get highlightsSaturation() {\n        return this._highlightsSaturation;\n    }\n    /**\n     * Sets the highlights Saturation value.\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\n     */\n    set highlightsSaturation(value) {\n        this._highlightsSaturation = value;\n        this._dirty = true;\n    }\n    /**\n     * Gets the highlights Exposure value.\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\n     */\n    get highlightsExposure() {\n        return this._highlightsExposure;\n    }\n    /**\n     * Sets the highlights Exposure value.\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\n     */\n    set highlightsExposure(value) {\n        this._highlightsExposure = value;\n        this._dirty = true;\n    }\n    /**\n     * Gets the midtones Hue value.\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\n     */\n    get midtonesHue() {\n        return this._midtonesHue;\n    }\n    /**\n     * Sets the midtones Hue value.\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\n     */\n    set midtonesHue(value) {\n        this._midtonesHue = value;\n        this._dirty = true;\n    }\n    /**\n     * Gets the midtones Density value.\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\n     * Values less than zero provide a filter of opposite hue.\n     */\n    get midtonesDensity() {\n        return this._midtonesDensity;\n    }\n    /**\n     * Sets the midtones Density value.\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\n     * Values less than zero provide a filter of opposite hue.\n     */\n    set midtonesDensity(value) {\n        this._midtonesDensity = value;\n        this._dirty = true;\n    }\n    /**\n     * Gets the midtones Saturation value.\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\n     */\n    get midtonesSaturation() {\n        return this._midtonesSaturation;\n    }\n    /**\n     * Sets the midtones Saturation value.\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\n     */\n    set midtonesSaturation(value) {\n        this._midtonesSaturation = value;\n        this._dirty = true;\n    }\n    /**\n     * Gets the midtones Exposure value.\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\n     */\n    get midtonesExposure() {\n        return this._midtonesExposure;\n    }\n    /**\n     * Sets the midtones Exposure value.\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\n     */\n    set midtonesExposure(value) {\n        this._midtonesExposure = value;\n        this._dirty = true;\n    }\n    /**\n     * Gets the shadows Hue value.\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\n     */\n    get shadowsHue() {\n        return this._shadowsHue;\n    }\n    /**\n     * Sets the shadows Hue value.\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\n     */\n    set shadowsHue(value) {\n        this._shadowsHue = value;\n        this._dirty = true;\n    }\n    /**\n     * Gets the shadows Density value.\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\n     * Values less than zero provide a filter of opposite hue.\n     */\n    get shadowsDensity() {\n        return this._shadowsDensity;\n    }\n    /**\n     * Sets the shadows Density value.\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\n     * Values less than zero provide a filter of opposite hue.\n     */\n    set shadowsDensity(value) {\n        this._shadowsDensity = value;\n        this._dirty = true;\n    }\n    /**\n     * Gets the shadows Saturation value.\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\n     */\n    get shadowsSaturation() {\n        return this._shadowsSaturation;\n    }\n    /**\n     * Sets the shadows Saturation value.\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\n     */\n    set shadowsSaturation(value) {\n        this._shadowsSaturation = value;\n        this._dirty = true;\n    }\n    /**\n     * Gets the shadows Exposure value.\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\n     */\n    get shadowsExposure() {\n        return this._shadowsExposure;\n    }\n    /**\n     * Sets the shadows Exposure value.\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\n     */\n    set shadowsExposure(value) {\n        this._shadowsExposure = value;\n        this._dirty = true;\n    }\n    /**\n     * Returns the class name\n     * @returns The class name\n     */\n    getClassName() {\n        return \"ColorCurves\";\n    }\n    /**\n     * Binds the color curves to the shader.\n     * @param colorCurves The color curve to bind\n     * @param effect The effect to bind to\n     * @param positiveUniform The positive uniform shader parameter\n     * @param neutralUniform The neutral uniform shader parameter\n     * @param negativeUniform The negative uniform shader parameter\n     */\n    static Bind(colorCurves, effect, positiveUniform = \"vCameraColorCurvePositive\", neutralUniform = \"vCameraColorCurveNeutral\", negativeUniform = \"vCameraColorCurveNegative\") {\n        if (colorCurves._dirty) {\n            colorCurves._dirty = false;\n            // Fill in global info.\n            colorCurves._getColorGradingDataToRef(colorCurves._globalHue, colorCurves._globalDensity, colorCurves._globalSaturation, colorCurves._globalExposure, colorCurves._globalCurve);\n            // Compute highlights info.\n            colorCurves._getColorGradingDataToRef(colorCurves._highlightsHue, colorCurves._highlightsDensity, colorCurves._highlightsSaturation, colorCurves._highlightsExposure, colorCurves._tempColor);\n            colorCurves._tempColor.multiplyToRef(colorCurves._globalCurve, colorCurves._highlightsCurve);\n            // Compute midtones info.\n            colorCurves._getColorGradingDataToRef(colorCurves._midtonesHue, colorCurves._midtonesDensity, colorCurves._midtonesSaturation, colorCurves._midtonesExposure, colorCurves._tempColor);\n            colorCurves._tempColor.multiplyToRef(colorCurves._globalCurve, colorCurves._midtonesCurve);\n            // Compute shadows info.\n            colorCurves._getColorGradingDataToRef(colorCurves._shadowsHue, colorCurves._shadowsDensity, colorCurves._shadowsSaturation, colorCurves._shadowsExposure, colorCurves._tempColor);\n            colorCurves._tempColor.multiplyToRef(colorCurves._globalCurve, colorCurves._shadowsCurve);\n            // Compute deltas (neutral is midtones).\n            colorCurves._highlightsCurve.subtractToRef(colorCurves._midtonesCurve, colorCurves._positiveCurve);\n            colorCurves._midtonesCurve.subtractToRef(colorCurves._shadowsCurve, colorCurves._negativeCurve);\n        }\n        if (effect) {\n            effect.setFloat4(positiveUniform, colorCurves._positiveCurve.r, colorCurves._positiveCurve.g, colorCurves._positiveCurve.b, colorCurves._positiveCurve.a);\n            effect.setFloat4(neutralUniform, colorCurves._midtonesCurve.r, colorCurves._midtonesCurve.g, colorCurves._midtonesCurve.b, colorCurves._midtonesCurve.a);\n            effect.setFloat4(negativeUniform, colorCurves._negativeCurve.r, colorCurves._negativeCurve.g, colorCurves._negativeCurve.b, colorCurves._negativeCurve.a);\n        }\n    }\n    /**\n     * Prepare the list of uniforms associated with the ColorCurves effects.\n     * @param uniformsList The list of uniforms used in the effect\n     */\n    static PrepareUniforms(uniformsList) {\n        uniformsList.push(\"vCameraColorCurveNeutral\", \"vCameraColorCurvePositive\", \"vCameraColorCurveNegative\");\n    }\n    /**\n     * Returns color grading data based on a hue, density, saturation and exposure value.\n     * @param hue\n     * @param density\n     * @param saturation The saturation.\n     * @param exposure The exposure.\n     * @param result The result data container.\n     */\n    _getColorGradingDataToRef(hue, density, saturation, exposure, result) {\n        if (hue == null) {\n            return;\n        }\n        hue = ColorCurves._Clamp(hue, 0, 360);\n        density = ColorCurves._Clamp(density, -100, 100);\n        saturation = ColorCurves._Clamp(saturation, -100, 100);\n        exposure = ColorCurves._Clamp(exposure, -100, 100);\n        // Remap the slider/config filter density with non-linear mapping and also scale by half\n        // so that the maximum filter density is only 50% control. This provides fine control\n        // for small values and reasonable range.\n        density = ColorCurves._ApplyColorGradingSliderNonlinear(density);\n        density *= 0.5;\n        exposure = ColorCurves._ApplyColorGradingSliderNonlinear(exposure);\n        if (density < 0) {\n            density *= -1;\n            hue = (hue + 180) % 360;\n        }\n        ColorCurves._FromHSBToRef(hue, density, 50 + 0.25 * exposure, result);\n        result.scaleToRef(2, result);\n        result.a = 1 + 0.01 * saturation;\n    }\n    /**\n     * Takes an input slider value and returns an adjusted value that provides extra control near the centre.\n     * @param value The input slider value in range [-100,100].\n     * @returns Adjusted value.\n     */\n    static _ApplyColorGradingSliderNonlinear(value) {\n        value /= 100;\n        let x = Math.abs(value);\n        x = Math.pow(x, 2);\n        if (value < 0) {\n            x *= -1;\n        }\n        x *= 100;\n        return x;\n    }\n    /**\n     * Returns an RGBA Color4 based on Hue, Saturation and Brightness (also referred to as value, HSV).\n     * @param hue The hue (H) input.\n     * @param saturation The saturation (S) input.\n     * @param brightness The brightness (B) input.\n     * @param result\n     * @result An RGBA color represented as Vector4.\n     */\n    static _FromHSBToRef(hue, saturation, brightness, result) {\n        let h = ColorCurves._Clamp(hue, 0, 360);\n        const s = ColorCurves._Clamp(saturation / 100, 0, 1);\n        const v = ColorCurves._Clamp(brightness / 100, 0, 1);\n        if (s === 0) {\n            result.r = v;\n            result.g = v;\n            result.b = v;\n        }\n        else {\n            // sector 0 to 5\n            h /= 60;\n            const i = Math.floor(h);\n            // fractional part of h\n            const f = h - i;\n            const p = v * (1 - s);\n            const q = v * (1 - s * f);\n            const t = v * (1 - s * (1 - f));\n            switch (i) {\n                case 0:\n                    result.r = v;\n                    result.g = t;\n                    result.b = p;\n                    break;\n                case 1:\n                    result.r = q;\n                    result.g = v;\n                    result.b = p;\n                    break;\n                case 2:\n                    result.r = p;\n                    result.g = v;\n                    result.b = t;\n                    break;\n                case 3:\n                    result.r = p;\n                    result.g = q;\n                    result.b = v;\n                    break;\n                case 4:\n                    result.r = t;\n                    result.g = p;\n                    result.b = v;\n                    break;\n                default:\n                    // case 5:\n                    result.r = v;\n                    result.g = p;\n                    result.b = q;\n                    break;\n            }\n        }\n        result.a = 1;\n    }\n    /**\n     * Returns a value clamped between min and max\n     * @param value The value to clamp\n     * @param min The minimum of value\n     * @param max The maximum of value\n     * @returns The clamped value.\n     */\n    static _Clamp(value, min, max) {\n        return Math.min(Math.max(value, min), max);\n    }\n    /**\n     * Clones the current color curve instance.\n     * @returns The cloned curves\n     */\n    clone() {\n        return SerializationHelper.Clone(() => new ColorCurves(), this);\n    }\n    /**\n     * Serializes the current color curve instance to a json representation.\n     * @returns a JSON representation\n     */\n    serialize() {\n        return SerializationHelper.Serialize(this);\n    }\n    /**\n     * Parses the color curve from a json representation.\n     * @param source the JSON source to parse\n     * @returns The parsed curves\n     */\n    static Parse(source) {\n        return SerializationHelper.Parse(() => new ColorCurves(), source, null, null);\n    }\n}\n__decorate([\n    serialize()\n], ColorCurves.prototype, \"_globalHue\", void 0);\n__decorate([\n    serialize()\n], ColorCurves.prototype, \"_globalDensity\", void 0);\n__decorate([\n    serialize()\n], ColorCurves.prototype, \"_globalSaturation\", void 0);\n__decorate([\n    serialize()\n], ColorCurves.prototype, \"_globalExposure\", void 0);\n__decorate([\n    serialize()\n], ColorCurves.prototype, \"_highlightsHue\", void 0);\n__decorate([\n    serialize()\n], ColorCurves.prototype, \"_highlightsDensity\", void 0);\n__decorate([\n    serialize()\n], ColorCurves.prototype, \"_highlightsSaturation\", void 0);\n__decorate([\n    serialize()\n], ColorCurves.prototype, \"_highlightsExposure\", void 0);\n__decorate([\n    serialize()\n], ColorCurves.prototype, \"_midtonesHue\", void 0);\n__decorate([\n    serialize()\n], ColorCurves.prototype, \"_midtonesDensity\", void 0);\n__decorate([\n    serialize()\n], ColorCurves.prototype, \"_midtonesSaturation\", void 0);\n__decorate([\n    serialize()\n], ColorCurves.prototype, \"_midtonesExposure\", void 0);\n// References the dependencies.\nSerializationHelper._ColorCurvesParser = ColorCurves.Parse;\n//# sourceMappingURL=colorCurves.js.map","/** @internal */\nexport class DrawWrapper {\n    static IsWrapper(effect) {\n        return effect.getPipelineContext === undefined;\n    }\n    static GetEffect(effect) {\n        return effect.getPipelineContext === undefined ? effect.effect : effect;\n    }\n    constructor(engine, createMaterialContext = true) {\n        this.effect = null;\n        this.defines = null;\n        this.drawContext = engine.createDrawContext();\n        if (createMaterialContext) {\n            this.materialContext = engine.createMaterialContext();\n        }\n    }\n    setEffect(effect, defines, resetContext = true) {\n        var _a;\n        this.effect = effect;\n        if (defines !== undefined) {\n            this.defines = defines;\n        }\n        if (resetContext) {\n            (_a = this.drawContext) === null || _a === void 0 ? void 0 : _a.reset();\n        }\n    }\n    dispose() {\n        var _a;\n        (_a = this.drawContext) === null || _a === void 0 ? void 0 : _a.dispose();\n    }\n}\n//# sourceMappingURL=drawWrapper.js.map","import { Observable } from \"../Misc/observable.js\";\n\nimport { GetDOMTextContent, IsWindowObjectExist } from \"../Misc/domManagement.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { ShaderProcessor } from \"../Engines/Processors/shaderProcessor.js\";\nimport { ShaderStore as EngineShaderStore } from \"../Engines/shaderStore.js\";\nimport { ShaderLanguage } from \"./shaderLanguage.js\";\n/**\n * Effect containing vertex and fragment shader that can be executed on an object.\n */\nexport class Effect {\n    /**\n     * Gets or sets the relative url used to load shaders if using the engine in non-minified mode\n     */\n    static get ShadersRepository() {\n        return EngineShaderStore.ShadersRepository;\n    }\n    static set ShadersRepository(repo) {\n        EngineShaderStore.ShadersRepository = repo;\n    }\n    /**\n     * Observable that will be called when effect is bound.\n     */\n    get onBindObservable() {\n        if (!this._onBindObservable) {\n            this._onBindObservable = new Observable();\n        }\n        return this._onBindObservable;\n    }\n    /**\n     * Instantiates an effect.\n     * An effect can be used to create/manage/execute vertex and fragment shaders.\n     * @param baseName Name of the effect.\n     * @param attributesNamesOrOptions List of attribute names that will be passed to the shader or set of all options to create the effect.\n     * @param uniformsNamesOrEngine List of uniform variable names that will be passed to the shader or the engine that will be used to render effect.\n     * @param samplers List of sampler variables that will be passed to the shader.\n     * @param engine Engine to be used to render the effect\n     * @param defines Define statements to be added to the shader.\n     * @param fallbacks Possible fallbacks for this effect to improve performance when needed.\n     * @param onCompiled Callback that will be called when the shader is compiled.\n     * @param onError Callback that will be called if an error occurs during shader compilation.\n     * @param indexParameters Parameters to be used with Babylons include syntax to iterate over an array (eg. {lights: 10})\n     * @param key Effect Key identifying uniquely compiled shader variants\n     * @param shaderLanguage the language the shader is written in (default: GLSL)\n     */\n    constructor(baseName, attributesNamesOrOptions, uniformsNamesOrEngine, samplers = null, engine, defines = null, fallbacks = null, onCompiled = null, onError = null, indexParameters, key = \"\", shaderLanguage = ShaderLanguage.GLSL) {\n        var _a, _b, _c;\n        /**\n         * Name of the effect.\n         */\n        this.name = null;\n        /**\n         * String container all the define statements that should be set on the shader.\n         */\n        this.defines = \"\";\n        /**\n         * Callback that will be called when the shader is compiled.\n         */\n        this.onCompiled = null;\n        /**\n         * Callback that will be called if an error occurs during shader compilation.\n         */\n        this.onError = null;\n        /**\n         * Callback that will be called when effect is bound.\n         */\n        this.onBind = null;\n        /**\n         * Unique ID of the effect.\n         */\n        this.uniqueId = 0;\n        /**\n         * Observable that will be called when the shader is compiled.\n         * It is recommended to use executeWhenCompile() or to make sure that scene.isReady() is called to get this observable raised.\n         */\n        this.onCompileObservable = new Observable();\n        /**\n         * Observable that will be called if an error occurs during shader compilation.\n         */\n        this.onErrorObservable = new Observable();\n        /** @internal */\n        this._onBindObservable = null;\n        /**\n         * @internal\n         * Specifies if the effect was previously ready\n         */\n        this._wasPreviouslyReady = false;\n        /**\n         * @internal\n         * Forces the code from bindForSubMesh to be fully run the next time it is called\n         * It is used in frozen mode to make sure the effect is properly rebound when a new effect is created\n         */\n        this._forceRebindOnNextCall = false;\n        /**\n         * @internal\n         * Specifies if the effect was previously using instances\n         */\n        this._wasPreviouslyUsingInstances = null;\n        this._isDisposed = false;\n        /** @internal */\n        this._bonesComputationForcedToCPU = false;\n        /** @internal */\n        this._uniformBuffersNames = {};\n        /** @internal */\n        this._multiTarget = false;\n        this._samplers = {};\n        this._isReady = false;\n        this._compilationError = \"\";\n        this._allFallbacksProcessed = false;\n        this._uniforms = {};\n        /**\n         * Key for the effect.\n         * @internal\n         */\n        this._key = \"\";\n        this._fallbacks = null;\n        this._vertexSourceCodeOverride = \"\";\n        this._fragmentSourceCodeOverride = \"\";\n        this._transformFeedbackVaryings = null;\n        /**\n         * Compiled shader to webGL program.\n         * @internal\n         */\n        this._pipelineContext = null;\n        /** @internal */\n        this._vertexSourceCode = \"\";\n        /** @internal */\n        this._fragmentSourceCode = \"\";\n        /** @internal */\n        this._vertexSourceCodeBeforeMigration = \"\";\n        /** @internal */\n        this._fragmentSourceCodeBeforeMigration = \"\";\n        /** @internal */\n        this._rawVertexSourceCode = \"\";\n        /** @internal */\n        this._rawFragmentSourceCode = \"\";\n        this.name = baseName;\n        this._key = key;\n        let processCodeAfterIncludes = undefined;\n        let processFinalCode = null;\n        if (attributesNamesOrOptions.attributes) {\n            const options = attributesNamesOrOptions;\n            this._engine = uniformsNamesOrEngine;\n            this._attributesNames = options.attributes;\n            this._uniformsNames = options.uniformsNames.concat(options.samplers);\n            this._samplerList = options.samplers.slice();\n            this.defines = options.defines;\n            this.onError = options.onError;\n            this.onCompiled = options.onCompiled;\n            this._fallbacks = options.fallbacks;\n            this._indexParameters = options.indexParameters;\n            this._transformFeedbackVaryings = options.transformFeedbackVaryings || null;\n            this._multiTarget = !!options.multiTarget;\n            this._shaderLanguage = (_a = options.shaderLanguage) !== null && _a !== void 0 ? _a : ShaderLanguage.GLSL;\n            if (options.uniformBuffersNames) {\n                this._uniformBuffersNamesList = options.uniformBuffersNames.slice();\n                for (let i = 0; i < options.uniformBuffersNames.length; i++) {\n                    this._uniformBuffersNames[options.uniformBuffersNames[i]] = i;\n                }\n            }\n            processFinalCode = (_b = options.processFinalCode) !== null && _b !== void 0 ? _b : null;\n            processCodeAfterIncludes = (_c = options.processCodeAfterIncludes) !== null && _c !== void 0 ? _c : undefined;\n        }\n        else {\n            this._engine = engine;\n            this.defines = defines == null ? \"\" : defines;\n            this._uniformsNames = uniformsNamesOrEngine.concat(samplers);\n            this._samplerList = samplers ? samplers.slice() : [];\n            this._attributesNames = attributesNamesOrOptions;\n            this._uniformBuffersNamesList = [];\n            this._shaderLanguage = shaderLanguage;\n            this.onError = onError;\n            this.onCompiled = onCompiled;\n            this._indexParameters = indexParameters;\n            this._fallbacks = fallbacks;\n        }\n        this._attributeLocationByName = {};\n        this.uniqueId = Effect._UniqueIdSeed++;\n        let vertexSource;\n        let fragmentSource;\n        const hostDocument = IsWindowObjectExist() ? this._engine.getHostDocument() : null;\n        if (baseName.vertexSource) {\n            vertexSource = \"source:\" + baseName.vertexSource;\n        }\n        else if (baseName.vertexElement) {\n            vertexSource = hostDocument ? hostDocument.getElementById(baseName.vertexElement) : null;\n            if (!vertexSource) {\n                vertexSource = baseName.vertexElement;\n            }\n        }\n        else {\n            vertexSource = baseName.vertex || baseName;\n        }\n        if (baseName.fragmentSource) {\n            fragmentSource = \"source:\" + baseName.fragmentSource;\n        }\n        else if (baseName.fragmentElement) {\n            fragmentSource = hostDocument ? hostDocument.getElementById(baseName.fragmentElement) : null;\n            if (!fragmentSource) {\n                fragmentSource = baseName.fragmentElement;\n            }\n        }\n        else {\n            fragmentSource = baseName.fragment || baseName;\n        }\n        this._processingContext = this._engine._getShaderProcessingContext(this._shaderLanguage);\n        let processorOptions = {\n            defines: this.defines.split(\"\\n\"),\n            indexParameters: this._indexParameters,\n            isFragment: false,\n            shouldUseHighPrecisionShader: this._engine._shouldUseHighPrecisionShader,\n            processor: this._engine._getShaderProcessor(this._shaderLanguage),\n            supportsUniformBuffers: this._engine.supportsUniformBuffers,\n            shadersRepository: EngineShaderStore.GetShadersRepository(this._shaderLanguage),\n            includesShadersStore: EngineShaderStore.GetIncludesShadersStore(this._shaderLanguage),\n            version: (this._engine.version * 100).toString(),\n            platformName: this._engine.shaderPlatformName,\n            processingContext: this._processingContext,\n            isNDCHalfZRange: this._engine.isNDCHalfZRange,\n            useReverseDepthBuffer: this._engine.useReverseDepthBuffer,\n            processCodeAfterIncludes,\n        };\n        const shaderCodes = [undefined, undefined];\n        const shadersLoaded = () => {\n            if (shaderCodes[0] && shaderCodes[1]) {\n                processorOptions.isFragment = true;\n                const [migratedVertexCode, fragmentCode] = shaderCodes;\n                ShaderProcessor.Process(fragmentCode, processorOptions, (migratedFragmentCode, codeBeforeMigration) => {\n                    this._fragmentSourceCodeBeforeMigration = codeBeforeMigration;\n                    if (processFinalCode) {\n                        migratedFragmentCode = processFinalCode(\"fragment\", migratedFragmentCode);\n                    }\n                    const finalShaders = ShaderProcessor.Finalize(migratedVertexCode, migratedFragmentCode, processorOptions);\n                    processorOptions = null; // avoid some GC leaks because of code below (related to proxyFunction(name).bind(this))\n                    this._useFinalCode(finalShaders.vertexCode, finalShaders.fragmentCode, baseName);\n                }, this._engine);\n            }\n        };\n        this._loadShader(vertexSource, \"Vertex\", \"\", (vertexCode) => {\n            ShaderProcessor.Initialize(processorOptions);\n            ShaderProcessor.Process(vertexCode, processorOptions, (migratedVertexCode, codeBeforeMigration) => {\n                this._rawVertexSourceCode = vertexCode;\n                this._vertexSourceCodeBeforeMigration = codeBeforeMigration;\n                if (processFinalCode) {\n                    migratedVertexCode = processFinalCode(\"vertex\", migratedVertexCode);\n                }\n                shaderCodes[0] = migratedVertexCode;\n                shadersLoaded();\n            }, this._engine);\n        });\n        this._loadShader(fragmentSource, \"Fragment\", \"Pixel\", (fragmentCode) => {\n            this._rawFragmentSourceCode = fragmentCode;\n            shaderCodes[1] = fragmentCode;\n            shadersLoaded();\n        });\n        const proxyFunction = function (functionName) {\n            // check if the function exists in the pipelineContext\n            return function () {\n                if (this._pipelineContext) {\n                    const func = this._pipelineContext[functionName];\n                    func.apply(this._pipelineContext, arguments);\n                }\n                return this;\n            };\n        };\n        [\"Int?\", \"UInt?\", \"IntArray?\", \"UIntArray?\", \"Array?\", \"Color?\", \"Vector?\", \"Float?\", \"Matrices\", \"Matrix\", \"Matrix3x3\", \"Matrix2x2\", \"Quaternion\", \"DirectColor4\"].forEach((functionName) => {\n            const name = `set${functionName}`;\n            if (name.endsWith(\"?\")) {\n                [\"\", 2, 3, 4].forEach((n) => {\n                    this[(name.slice(0, -1) + n)] = this[(name.slice(0, -1) + n)] || proxyFunction(name.slice(0, -1) + n).bind(this);\n                });\n            }\n            else {\n                this[name] = this[name] || proxyFunction(name).bind(this);\n            }\n        });\n    }\n    _useFinalCode(migratedVertexCode, migratedFragmentCode, baseName) {\n        if (baseName) {\n            const vertex = baseName.vertexElement || baseName.vertex || baseName.spectorName || baseName;\n            const fragment = baseName.fragmentElement || baseName.fragment || baseName.spectorName || baseName;\n            this._vertexSourceCode = (this._shaderLanguage === ShaderLanguage.WGSL ? \"//\" : \"\") + \"#define SHADER_NAME vertex:\" + vertex + \"\\n\" + migratedVertexCode;\n            this._fragmentSourceCode = (this._shaderLanguage === ShaderLanguage.WGSL ? \"//\" : \"\") + \"#define SHADER_NAME fragment:\" + fragment + \"\\n\" + migratedFragmentCode;\n        }\n        else {\n            this._vertexSourceCode = migratedVertexCode;\n            this._fragmentSourceCode = migratedFragmentCode;\n        }\n        this._prepareEffect();\n    }\n    /**\n     * Unique key for this effect\n     */\n    get key() {\n        return this._key;\n    }\n    /**\n     * If the effect has been compiled and prepared.\n     * @returns if the effect is compiled and prepared.\n     */\n    isReady() {\n        try {\n            return this._isReadyInternal();\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n    _isReadyInternal() {\n        if (this._isReady) {\n            return true;\n        }\n        if (this._pipelineContext) {\n            return this._pipelineContext.isReady;\n        }\n        return false;\n    }\n    /**\n     * The engine the effect was initialized with.\n     * @returns the engine.\n     */\n    getEngine() {\n        return this._engine;\n    }\n    /**\n     * The pipeline context for this effect\n     * @returns the associated pipeline context\n     */\n    getPipelineContext() {\n        return this._pipelineContext;\n    }\n    /**\n     * The set of names of attribute variables for the shader.\n     * @returns An array of attribute names.\n     */\n    getAttributesNames() {\n        return this._attributesNames;\n    }\n    /**\n     * Returns the attribute at the given index.\n     * @param index The index of the attribute.\n     * @returns The location of the attribute.\n     */\n    getAttributeLocation(index) {\n        return this._attributes[index];\n    }\n    /**\n     * Returns the attribute based on the name of the variable.\n     * @param name of the attribute to look up.\n     * @returns the attribute location.\n     */\n    getAttributeLocationByName(name) {\n        return this._attributeLocationByName[name];\n    }\n    /**\n     * The number of attributes.\n     * @returns the number of attributes.\n     */\n    getAttributesCount() {\n        return this._attributes.length;\n    }\n    /**\n     * Gets the index of a uniform variable.\n     * @param uniformName of the uniform to look up.\n     * @returns the index.\n     */\n    getUniformIndex(uniformName) {\n        return this._uniformsNames.indexOf(uniformName);\n    }\n    /**\n     * Returns the attribute based on the name of the variable.\n     * @param uniformName of the uniform to look up.\n     * @returns the location of the uniform.\n     */\n    getUniform(uniformName) {\n        return this._uniforms[uniformName];\n    }\n    /**\n     * Returns an array of sampler variable names\n     * @returns The array of sampler variable names.\n     */\n    getSamplers() {\n        return this._samplerList;\n    }\n    /**\n     * Returns an array of uniform variable names\n     * @returns The array of uniform variable names.\n     */\n    getUniformNames() {\n        return this._uniformsNames;\n    }\n    /**\n     * Returns an array of uniform buffer variable names\n     * @returns The array of uniform buffer variable names.\n     */\n    getUniformBuffersNames() {\n        return this._uniformBuffersNamesList;\n    }\n    /**\n     * Returns the index parameters used to create the effect\n     * @returns The index parameters object\n     */\n    getIndexParameters() {\n        return this._indexParameters;\n    }\n    /**\n     * The error from the last compilation.\n     * @returns the error string.\n     */\n    getCompilationError() {\n        return this._compilationError;\n    }\n    /**\n     * Gets a boolean indicating that all fallbacks were used during compilation\n     * @returns true if all fallbacks were used\n     */\n    allFallbacksProcessed() {\n        return this._allFallbacksProcessed;\n    }\n    /**\n     * Adds a callback to the onCompiled observable and call the callback immediately if already ready.\n     * @param func The callback to be used.\n     */\n    executeWhenCompiled(func) {\n        if (this.isReady()) {\n            func(this);\n            return;\n        }\n        this.onCompileObservable.add((effect) => {\n            func(effect);\n        });\n        if (!this._pipelineContext || this._pipelineContext.isAsync) {\n            setTimeout(() => {\n                this._checkIsReady(null);\n            }, 16);\n        }\n    }\n    _checkIsReady(previousPipelineContext) {\n        try {\n            if (this._isReadyInternal()) {\n                return;\n            }\n        }\n        catch (e) {\n            this._processCompilationErrors(e, previousPipelineContext);\n            return;\n        }\n        if (this._isDisposed) {\n            return;\n        }\n        setTimeout(() => {\n            this._checkIsReady(previousPipelineContext);\n        }, 16);\n    }\n    _loadShader(shader, key, optionalKey, callback) {\n        if (typeof HTMLElement !== \"undefined\") {\n            // DOM element ?\n            if (shader instanceof HTMLElement) {\n                const shaderCode = GetDOMTextContent(shader);\n                callback(shaderCode);\n                return;\n            }\n        }\n        // Direct source ?\n        if (shader.substr(0, 7) === \"source:\") {\n            callback(shader.substr(7));\n            return;\n        }\n        // Base64 encoded ?\n        if (shader.substr(0, 7) === \"base64:\") {\n            const shaderBinary = window.atob(shader.substr(7));\n            callback(shaderBinary);\n            return;\n        }\n        const shaderStore = EngineShaderStore.GetShadersStore(this._shaderLanguage);\n        // Is in local store ?\n        if (shaderStore[shader + key + \"Shader\"]) {\n            callback(shaderStore[shader + key + \"Shader\"]);\n            return;\n        }\n        if (optionalKey && shaderStore[shader + optionalKey + \"Shader\"]) {\n            callback(shaderStore[shader + optionalKey + \"Shader\"]);\n            return;\n        }\n        let shaderUrl;\n        if (shader[0] === \".\" || shader[0] === \"/\" || shader.indexOf(\"http\") > -1) {\n            shaderUrl = shader;\n        }\n        else {\n            shaderUrl = EngineShaderStore.GetShadersRepository(this._shaderLanguage) + shader;\n        }\n        // Vertex shader\n        this._engine._loadFile(shaderUrl + \".\" + key.toLowerCase() + \".fx\", callback);\n    }\n    /**\n     * Gets the vertex shader source code of this effect\n     * This is the final source code that will be compiled, after all the processing has been done (pre-processing applied, code injection/replacement, etc)\n     */\n    get vertexSourceCode() {\n        var _a, _b;\n        return this._vertexSourceCodeOverride && this._fragmentSourceCodeOverride\n            ? this._vertexSourceCodeOverride\n            : (_b = (_a = this._pipelineContext) === null || _a === void 0 ? void 0 : _a._getVertexShaderCode()) !== null && _b !== void 0 ? _b : this._vertexSourceCode;\n    }\n    /**\n     * Gets the fragment shader source code of this effect\n     * This is the final source code that will be compiled, after all the processing has been done (pre-processing applied, code injection/replacement, etc)\n     */\n    get fragmentSourceCode() {\n        var _a, _b;\n        return this._vertexSourceCodeOverride && this._fragmentSourceCodeOverride\n            ? this._fragmentSourceCodeOverride\n            : (_b = (_a = this._pipelineContext) === null || _a === void 0 ? void 0 : _a._getFragmentShaderCode()) !== null && _b !== void 0 ? _b : this._fragmentSourceCode;\n    }\n    /**\n     * Gets the vertex shader source code before migration.\n     * This is the source code after the include directives have been replaced by their contents but before the code is migrated, i.e. before ShaderProcess._ProcessShaderConversion is executed.\n     * This method is, among other things, responsible for parsing #if/#define directives as well as converting GLES2 syntax to GLES3 (in the case of WebGL).\n     */\n    get vertexSourceCodeBeforeMigration() {\n        return this._vertexSourceCodeBeforeMigration;\n    }\n    /**\n     * Gets the fragment shader source code before migration.\n     * This is the source code after the include directives have been replaced by their contents but before the code is migrated, i.e. before ShaderProcess._ProcessShaderConversion is executed.\n     * This method is, among other things, responsible for parsing #if/#define directives as well as converting GLES2 syntax to GLES3 (in the case of WebGL).\n     */\n    get fragmentSourceCodeBeforeMigration() {\n        return this._fragmentSourceCodeBeforeMigration;\n    }\n    /**\n     * Gets the vertex shader source code before it has been modified by any processing\n     */\n    get rawVertexSourceCode() {\n        return this._rawVertexSourceCode;\n    }\n    /**\n     * Gets the fragment shader source code before it has been modified by any processing\n     */\n    get rawFragmentSourceCode() {\n        return this._rawFragmentSourceCode;\n    }\n    /**\n     * Recompiles the webGL program\n     * @param vertexSourceCode The source code for the vertex shader.\n     * @param fragmentSourceCode The source code for the fragment shader.\n     * @param onCompiled Callback called when completed.\n     * @param onError Callback called on error.\n     * @internal\n     */\n    _rebuildProgram(vertexSourceCode, fragmentSourceCode, onCompiled, onError) {\n        this._isReady = false;\n        this._vertexSourceCodeOverride = vertexSourceCode;\n        this._fragmentSourceCodeOverride = fragmentSourceCode;\n        this.onError = (effect, error) => {\n            if (onError) {\n                onError(error);\n            }\n        };\n        this.onCompiled = () => {\n            const scenes = this.getEngine().scenes;\n            if (scenes) {\n                for (let i = 0; i < scenes.length; i++) {\n                    scenes[i].markAllMaterialsAsDirty(63);\n                }\n            }\n            this._pipelineContext._handlesSpectorRebuildCallback(onCompiled);\n        };\n        this._fallbacks = null;\n        this._prepareEffect();\n    }\n    /**\n     * Prepares the effect\n     * @internal\n     */\n    _prepareEffect() {\n        const attributesNames = this._attributesNames;\n        const defines = this.defines;\n        const previousPipelineContext = this._pipelineContext;\n        this._isReady = false;\n        try {\n            const engine = this._engine;\n            this._pipelineContext = engine.createPipelineContext(this._processingContext);\n            this._pipelineContext._name = this._key;\n            const rebuildRebind = this._rebuildProgram.bind(this);\n            if (this._vertexSourceCodeOverride && this._fragmentSourceCodeOverride) {\n                engine._preparePipelineContext(this._pipelineContext, this._vertexSourceCodeOverride, this._fragmentSourceCodeOverride, true, this._rawVertexSourceCode, this._rawFragmentSourceCode, rebuildRebind, null, this._transformFeedbackVaryings, this._key);\n            }\n            else {\n                engine._preparePipelineContext(this._pipelineContext, this._vertexSourceCode, this._fragmentSourceCode, false, this._rawVertexSourceCode, this._rawFragmentSourceCode, rebuildRebind, defines, this._transformFeedbackVaryings, this._key);\n            }\n            engine._executeWhenRenderingStateIsCompiled(this._pipelineContext, () => {\n                this._attributes = [];\n                this._pipelineContext._fillEffectInformation(this, this._uniformBuffersNames, this._uniformsNames, this._uniforms, this._samplerList, this._samplers, attributesNames, this._attributes);\n                // Caches attribute locations.\n                if (attributesNames) {\n                    for (let i = 0; i < attributesNames.length; i++) {\n                        const name = attributesNames[i];\n                        this._attributeLocationByName[name] = this._attributes[i];\n                    }\n                }\n                engine.bindSamplers(this);\n                this._compilationError = \"\";\n                this._isReady = true;\n                if (this.onCompiled) {\n                    this.onCompiled(this);\n                }\n                this.onCompileObservable.notifyObservers(this);\n                this.onCompileObservable.clear();\n                // Unbind mesh reference in fallbacks\n                if (this._fallbacks) {\n                    this._fallbacks.unBindMesh();\n                }\n                if (previousPipelineContext) {\n                    this.getEngine()._deletePipelineContext(previousPipelineContext);\n                }\n            });\n            if (this._pipelineContext.isAsync) {\n                this._checkIsReady(previousPipelineContext);\n            }\n        }\n        catch (e) {\n            this._processCompilationErrors(e, previousPipelineContext);\n        }\n    }\n    _getShaderCodeAndErrorLine(code, error, isFragment) {\n        const regexp = isFragment ? /FRAGMENT SHADER ERROR: 0:(\\d+?):/ : /VERTEX SHADER ERROR: 0:(\\d+?):/;\n        let errorLine = null;\n        if (error && code) {\n            const res = error.match(regexp);\n            if (res && res.length === 2) {\n                const lineNumber = parseInt(res[1]);\n                const lines = code.split(\"\\n\", -1);\n                if (lines.length >= lineNumber) {\n                    errorLine = `Offending line [${lineNumber}] in ${isFragment ? \"fragment\" : \"vertex\"} code: ${lines[lineNumber - 1]}`;\n                }\n            }\n        }\n        return [code, errorLine];\n    }\n    _processCompilationErrors(e, previousPipelineContext = null) {\n        var _a, _b, _c;\n        this._compilationError = e.message;\n        const attributesNames = this._attributesNames;\n        const fallbacks = this._fallbacks;\n        // Let's go through fallbacks then\n        Logger.Error(\"Unable to compile effect:\");\n        Logger.Error(\"Uniforms: \" +\n            this._uniformsNames.map(function (uniform) {\n                return \" \" + uniform;\n            }));\n        Logger.Error(\"Attributes: \" +\n            attributesNames.map(function (attribute) {\n                return \" \" + attribute;\n            }));\n        Logger.Error(\"Defines:\\r\\n\" + this.defines);\n        if (Effect.LogShaderCodeOnCompilationError) {\n            let lineErrorVertex = null, lineErrorFragment = null, code = null;\n            if ((_a = this._pipelineContext) === null || _a === void 0 ? void 0 : _a._getVertexShaderCode()) {\n                [code, lineErrorVertex] = this._getShaderCodeAndErrorLine(this._pipelineContext._getVertexShaderCode(), this._compilationError, false);\n                if (code) {\n                    Logger.Error(\"Vertex code:\");\n                    Logger.Error(code);\n                }\n            }\n            if ((_b = this._pipelineContext) === null || _b === void 0 ? void 0 : _b._getFragmentShaderCode()) {\n                [code, lineErrorFragment] = this._getShaderCodeAndErrorLine((_c = this._pipelineContext) === null || _c === void 0 ? void 0 : _c._getFragmentShaderCode(), this._compilationError, true);\n                if (code) {\n                    Logger.Error(\"Fragment code:\");\n                    Logger.Error(code);\n                }\n            }\n            if (lineErrorVertex) {\n                Logger.Error(lineErrorVertex);\n            }\n            if (lineErrorFragment) {\n                Logger.Error(lineErrorFragment);\n            }\n        }\n        Logger.Error(\"Error: \" + this._compilationError);\n        const notifyErrors = () => {\n            if (this.onError) {\n                this.onError(this, this._compilationError);\n            }\n            this.onErrorObservable.notifyObservers(this);\n        };\n        // In case a previous compilation was successful, we need to restore the previous pipeline context\n        if (previousPipelineContext) {\n            this._pipelineContext = previousPipelineContext;\n            this._isReady = true;\n            notifyErrors();\n        }\n        // Lets try to compile fallbacks as long as we have some.\n        if (fallbacks) {\n            this._pipelineContext = null;\n            if (fallbacks.hasMoreFallbacks) {\n                this._allFallbacksProcessed = false;\n                Logger.Error(\"Trying next fallback.\");\n                this.defines = fallbacks.reduce(this.defines, this);\n                this._prepareEffect();\n            }\n            else {\n                // Sorry we did everything we can\n                this._allFallbacksProcessed = true;\n                notifyErrors();\n                this.onErrorObservable.clear();\n                // Unbind mesh reference in fallbacks\n                if (this._fallbacks) {\n                    this._fallbacks.unBindMesh();\n                }\n            }\n        }\n        else {\n            this._allFallbacksProcessed = true;\n            // In case of error, without any prior successful compilation, let s notify observers\n            if (!previousPipelineContext) {\n                notifyErrors();\n            }\n        }\n    }\n    /**\n     * Checks if the effect is supported. (Must be called after compilation)\n     */\n    get isSupported() {\n        return this._compilationError === \"\";\n    }\n    /**\n     * Binds a texture to the engine to be used as output of the shader.\n     * @param channel Name of the output variable.\n     * @param texture Texture to bind.\n     * @internal\n     */\n    _bindTexture(channel, texture) {\n        this._engine._bindTexture(this._samplers[channel], texture, channel);\n    }\n    /**\n     * Sets a texture on the engine to be used in the shader.\n     * @param channel Name of the sampler variable.\n     * @param texture Texture to set.\n     */\n    setTexture(channel, texture) {\n        this._engine.setTexture(this._samplers[channel], this._uniforms[channel], texture, channel);\n    }\n    /**\n     * Sets a depth stencil texture from a render target on the engine to be used in the shader.\n     * @param channel Name of the sampler variable.\n     * @param texture Texture to set.\n     */\n    setDepthStencilTexture(channel, texture) {\n        this._engine.setDepthStencilTexture(this._samplers[channel], this._uniforms[channel], texture, channel);\n    }\n    /**\n     * Sets an array of textures on the engine to be used in the shader.\n     * @param channel Name of the variable.\n     * @param textures Textures to set.\n     */\n    setTextureArray(channel, textures) {\n        const exName = channel + \"Ex\";\n        if (this._samplerList.indexOf(exName + \"0\") === -1) {\n            const initialPos = this._samplerList.indexOf(channel);\n            for (let index = 1; index < textures.length; index++) {\n                const currentExName = exName + (index - 1).toString();\n                this._samplerList.splice(initialPos + index, 0, currentExName);\n            }\n            // Reset every channels\n            let channelIndex = 0;\n            for (const key of this._samplerList) {\n                this._samplers[key] = channelIndex;\n                channelIndex += 1;\n            }\n        }\n        this._engine.setTextureArray(this._samplers[channel], this._uniforms[channel], textures, channel);\n    }\n    /**\n     * Sets a texture to be the input of the specified post process. (To use the output, pass in the next post process in the pipeline)\n     * @param channel Name of the sampler variable.\n     * @param postProcess Post process to get the input texture from.\n     */\n    setTextureFromPostProcess(channel, postProcess) {\n        this._engine.setTextureFromPostProcess(this._samplers[channel], postProcess, channel);\n    }\n    /**\n     * (Warning! setTextureFromPostProcessOutput may be desired instead)\n     * Sets the input texture of the passed in post process to be input of this effect. (To use the output of the passed in post process use setTextureFromPostProcessOutput)\n     * @param channel Name of the sampler variable.\n     * @param postProcess Post process to get the output texture from.\n     */\n    setTextureFromPostProcessOutput(channel, postProcess) {\n        this._engine.setTextureFromPostProcessOutput(this._samplers[channel], postProcess, channel);\n    }\n    /**\n     * Binds a buffer to a uniform.\n     * @param buffer Buffer to bind.\n     * @param name Name of the uniform variable to bind to.\n     */\n    bindUniformBuffer(buffer, name) {\n        const bufferName = this._uniformBuffersNames[name];\n        if (bufferName === undefined || (Effect._BaseCache[bufferName] === buffer && this._engine._features.useUBOBindingCache)) {\n            return;\n        }\n        Effect._BaseCache[bufferName] = buffer;\n        this._engine.bindUniformBufferBase(buffer, bufferName, name);\n    }\n    /**\n     * Binds block to a uniform.\n     * @param blockName Name of the block to bind.\n     * @param index Index to bind.\n     */\n    bindUniformBlock(blockName, index) {\n        this._engine.bindUniformBlock(this._pipelineContext, blockName, index);\n    }\n    /**\n     * Sets an float array on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     * @returns this effect.\n     */\n    setFloatArray(uniformName, array) {\n        this._pipelineContext.setArray(uniformName, array);\n        return this;\n    }\n    /**\n     * Sets an float array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     * @returns this effect.\n     */\n    setFloatArray2(uniformName, array) {\n        this._pipelineContext.setArray2(uniformName, array);\n        return this;\n    }\n    /**\n     * Sets an float array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     * @returns this effect.\n     */\n    setFloatArray3(uniformName, array) {\n        this._pipelineContext.setArray3(uniformName, array);\n        return this;\n    }\n    /**\n     * Sets an float array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     * @returns this effect.\n     */\n    setFloatArray4(uniformName, array) {\n        this._pipelineContext.setArray4(uniformName, array);\n        return this;\n    }\n    /**\n     * Sets a boolean on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param bool value to be set.\n     * @returns this effect.\n     */\n    setBool(uniformName, bool) {\n        this._pipelineContext.setInt(uniformName, bool ? 1 : 0);\n        return this;\n    }\n    /**\n     * Release all associated resources.\n     **/\n    dispose() {\n        var _a;\n        (_a = this._pipelineContext) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._engine._releaseEffect(this);\n        this._isDisposed = true;\n    }\n    /**\n     * This function will add a new shader to the shader store\n     * @param name the name of the shader\n     * @param pixelShader optional pixel shader content\n     * @param vertexShader optional vertex shader content\n     * @param shaderLanguage the language the shader is written in (default: GLSL)\n     */\n    static RegisterShader(name, pixelShader, vertexShader, shaderLanguage = ShaderLanguage.GLSL) {\n        if (pixelShader) {\n            EngineShaderStore.GetShadersStore(shaderLanguage)[`${name}PixelShader`] = pixelShader;\n        }\n        if (vertexShader) {\n            EngineShaderStore.GetShadersStore(shaderLanguage)[`${name}VertexShader`] = vertexShader;\n        }\n    }\n    /**\n     * Resets the cache of effects.\n     */\n    static ResetCache() {\n        Effect._BaseCache = {};\n    }\n}\n/**\n * Enable logging of the shader code when a compilation error occurs\n */\nEffect.LogShaderCodeOnCompilationError = true;\nEffect._UniqueIdSeed = 0;\nEffect._BaseCache = {};\n/**\n * Store of each shader (The can be looked up using effect.key)\n */\nEffect.ShadersStore = EngineShaderStore.ShadersStore;\n/**\n * Store of each included file for a shader (The can be looked up using effect.key)\n */\nEffect.IncludesShadersStore = EngineShaderStore.IncludesShadersStore;\n//# sourceMappingURL=effect.js.map","/**\n * EffectFallbacks can be used to add fallbacks (properties to disable) to certain properties when desired to improve performance.\n * (Eg. Start at high quality with reflection and fog, if fps is low, remove reflection, if still low remove fog)\n */\nexport class EffectFallbacks {\n    constructor() {\n        this._defines = {};\n        this._currentRank = 32;\n        this._maxRank = -1;\n        this._mesh = null;\n    }\n    /**\n     * Removes the fallback from the bound mesh.\n     */\n    unBindMesh() {\n        this._mesh = null;\n    }\n    /**\n     * Adds a fallback on the specified property.\n     * @param rank The rank of the fallback (Lower ranks will be fallbacked to first)\n     * @param define The name of the define in the shader\n     */\n    addFallback(rank, define) {\n        if (!this._defines[rank]) {\n            if (rank < this._currentRank) {\n                this._currentRank = rank;\n            }\n            if (rank > this._maxRank) {\n                this._maxRank = rank;\n            }\n            this._defines[rank] = new Array();\n        }\n        this._defines[rank].push(define);\n    }\n    /**\n     * Sets the mesh to use CPU skinning when needing to fallback.\n     * @param rank The rank of the fallback (Lower ranks will be fallbacked to first)\n     * @param mesh The mesh to use the fallbacks.\n     */\n    addCPUSkinningFallback(rank, mesh) {\n        this._mesh = mesh;\n        if (rank < this._currentRank) {\n            this._currentRank = rank;\n        }\n        if (rank > this._maxRank) {\n            this._maxRank = rank;\n        }\n    }\n    /**\n     * Checks to see if more fallbacks are still available.\n     */\n    get hasMoreFallbacks() {\n        return this._currentRank <= this._maxRank;\n    }\n    /**\n     * Removes the defines that should be removed when falling back.\n     * @param currentDefines defines the current define statements for the shader.\n     * @param effect defines the current effect we try to compile\n     * @returns The resulting defines with defines of the current rank removed.\n     */\n    reduce(currentDefines, effect) {\n        // First we try to switch to CPU skinning\n        if (this._mesh && this._mesh.computeBonesUsingShaders && this._mesh.numBoneInfluencers > 0) {\n            this._mesh.computeBonesUsingShaders = false;\n            currentDefines = currentDefines.replace(\"#define NUM_BONE_INFLUENCERS \" + this._mesh.numBoneInfluencers, \"#define NUM_BONE_INFLUENCERS 0\");\n            effect._bonesComputationForcedToCPU = true;\n            const scene = this._mesh.getScene();\n            for (let index = 0; index < scene.meshes.length; index++) {\n                const otherMesh = scene.meshes[index];\n                if (!otherMesh.material) {\n                    if (!this._mesh.material && otherMesh.computeBonesUsingShaders && otherMesh.numBoneInfluencers > 0) {\n                        otherMesh.computeBonesUsingShaders = false;\n                    }\n                    continue;\n                }\n                if (!otherMesh.computeBonesUsingShaders || otherMesh.numBoneInfluencers === 0) {\n                    continue;\n                }\n                if (otherMesh.material.getEffect() === effect) {\n                    otherMesh.computeBonesUsingShaders = false;\n                }\n                else if (otherMesh.subMeshes) {\n                    for (const subMesh of otherMesh.subMeshes) {\n                        const subMeshEffect = subMesh.effect;\n                        if (subMeshEffect === effect) {\n                            otherMesh.computeBonesUsingShaders = false;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            const currentFallbacks = this._defines[this._currentRank];\n            if (currentFallbacks) {\n                for (let index = 0; index < currentFallbacks.length; index++) {\n                    currentDefines = currentDefines.replace(\"#define \" + currentFallbacks[index], \"\");\n                }\n            }\n            this._currentRank++;\n        }\n        return currentDefines;\n    }\n}\n//# sourceMappingURL=effectFallbacks.js.map","import { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { Viewport } from \"../Maths/math.viewport.js\";\n\nimport { Observable } from \"../Misc/observable.js\";\nimport { Effect } from \"./effect.js\";\nimport { DrawWrapper } from \"./drawWrapper.js\";\n// Prevents ES6 Crash if not imported.\nimport \"../Shaders/postprocess.vertex.js\";\n// Fullscreen quad buffers by default.\nconst defaultOptions = {\n    positions: [1, 1, -1, 1, -1, -1, 1, -1],\n    indices: [0, 1, 2, 0, 2, 3],\n};\n/**\n * Helper class to render one or more effects.\n * You can access the previous rendering in your shader by declaring a sampler named textureSampler\n */\nexport class EffectRenderer {\n    /**\n     * Creates an effect renderer\n     * @param engine the engine to use for rendering\n     * @param options defines the options of the effect renderer\n     */\n    constructor(engine, options = defaultOptions) {\n        var _a, _b;\n        this._fullscreenViewport = new Viewport(0, 0, 1, 1);\n        const positions = (_a = options.positions) !== null && _a !== void 0 ? _a : defaultOptions.positions;\n        const indices = (_b = options.indices) !== null && _b !== void 0 ? _b : defaultOptions.indices;\n        this.engine = engine;\n        this._vertexBuffers = {\n            [VertexBuffer.PositionKind]: new VertexBuffer(engine, positions, VertexBuffer.PositionKind, false, false, 2),\n        };\n        this._indexBuffer = engine.createIndexBuffer(indices);\n        this._onContextRestoredObserver = engine.onContextRestoredObservable.add(() => {\n            this._indexBuffer = engine.createIndexBuffer(indices);\n            for (const key in this._vertexBuffers) {\n                const vertexBuffer = this._vertexBuffers[key];\n                vertexBuffer._rebuild();\n            }\n        });\n    }\n    /**\n     * Sets the current viewport in normalized coordinates 0-1\n     * @param viewport Defines the viewport to set (defaults to 0 0 1 1)\n     */\n    setViewport(viewport = this._fullscreenViewport) {\n        this.engine.setViewport(viewport);\n    }\n    /**\n     * Binds the embedded attributes buffer to the effect.\n     * @param effect Defines the effect to bind the attributes for\n     */\n    bindBuffers(effect) {\n        this.engine.bindBuffers(this._vertexBuffers, this._indexBuffer, effect);\n    }\n    /**\n     * Sets the current effect wrapper to use during draw.\n     * The effect needs to be ready before calling this api.\n     * This also sets the default full screen position attribute.\n     * @param effectWrapper Defines the effect to draw with\n     */\n    applyEffectWrapper(effectWrapper) {\n        this.engine.setState(true);\n        this.engine.depthCullingState.depthTest = false;\n        this.engine.stencilState.stencilTest = false;\n        this.engine.enableEffect(effectWrapper._drawWrapper);\n        this.bindBuffers(effectWrapper.effect);\n        effectWrapper.onApplyObservable.notifyObservers({});\n    }\n    /**\n     * Restores engine states\n     */\n    restoreStates() {\n        this.engine.depthCullingState.depthTest = true;\n        this.engine.stencilState.stencilTest = true;\n    }\n    /**\n     * Draws a full screen quad.\n     */\n    draw() {\n        this.engine.drawElementsType(0, 0, 6);\n    }\n    _isRenderTargetTexture(texture) {\n        return texture.renderTarget !== undefined;\n    }\n    /**\n     * renders one or more effects to a specified texture\n     * @param effectWrapper the effect to renderer\n     * @param outputTexture texture to draw to, if null it will render to the screen.\n     */\n    render(effectWrapper, outputTexture = null) {\n        // Ensure effect is ready\n        if (!effectWrapper.effect.isReady()) {\n            return;\n        }\n        // Reset state\n        this.setViewport();\n        const out = outputTexture === null ? null : this._isRenderTargetTexture(outputTexture) ? outputTexture.renderTarget : outputTexture;\n        if (out) {\n            this.engine.bindFramebuffer(out);\n        }\n        this.applyEffectWrapper(effectWrapper);\n        this.draw();\n        if (out) {\n            this.engine.unBindFramebuffer(out);\n        }\n        this.restoreStates();\n    }\n    /**\n     * Disposes of the effect renderer\n     */\n    dispose() {\n        const vertexBuffer = this._vertexBuffers[VertexBuffer.PositionKind];\n        if (vertexBuffer) {\n            vertexBuffer.dispose();\n            delete this._vertexBuffers[VertexBuffer.PositionKind];\n        }\n        if (this._indexBuffer) {\n            this.engine._releaseBuffer(this._indexBuffer);\n        }\n        if (this._onContextRestoredObserver) {\n            this.engine.onContextRestoredObservable.remove(this._onContextRestoredObserver);\n            this._onContextRestoredObserver = null;\n        }\n    }\n}\n/**\n * Wraps an effect to be used for rendering\n */\nexport class EffectWrapper {\n    /**\n     * The underlying effect\n     */\n    get effect() {\n        return this._drawWrapper.effect;\n    }\n    set effect(effect) {\n        this._drawWrapper.effect = effect;\n    }\n    /**\n     * Creates an effect to be renderer\n     * @param creationOptions options to create the effect\n     */\n    constructor(creationOptions) {\n        /**\n         * Event that is fired right before the effect is drawn (should be used to update uniforms)\n         */\n        this.onApplyObservable = new Observable();\n        let effectCreationOptions;\n        const uniformNames = creationOptions.uniformNames || [];\n        if (creationOptions.vertexShader) {\n            effectCreationOptions = {\n                fragmentSource: creationOptions.fragmentShader,\n                vertexSource: creationOptions.vertexShader,\n                spectorName: creationOptions.name || \"effectWrapper\",\n            };\n        }\n        else {\n            // Default scale to use in post process vertex shader.\n            uniformNames.push(\"scale\");\n            effectCreationOptions = {\n                fragmentSource: creationOptions.fragmentShader,\n                vertex: \"postprocess\",\n                spectorName: creationOptions.name || \"effectWrapper\",\n            };\n            // Sets the default scale to identity for the post process vertex shader.\n            this.onApplyObservable.add(() => {\n                this.effect.setFloat2(\"scale\", 1, 1);\n            });\n        }\n        const defines = creationOptions.defines ? creationOptions.defines.join(\"\\n\") : \"\";\n        this._drawWrapper = new DrawWrapper(creationOptions.engine);\n        if (creationOptions.useShaderStore) {\n            effectCreationOptions.fragment = effectCreationOptions.fragmentSource;\n            if (!effectCreationOptions.vertex) {\n                effectCreationOptions.vertex = effectCreationOptions.vertexSource;\n            }\n            delete effectCreationOptions.fragmentSource;\n            delete effectCreationOptions.vertexSource;\n            this.effect = creationOptions.engine.createEffect(effectCreationOptions, creationOptions.attributeNames || [\"position\"], uniformNames, creationOptions.samplerNames, defines, undefined, creationOptions.onCompiled, undefined, undefined, creationOptions.shaderLanguage);\n        }\n        else {\n            this.effect = new Effect(effectCreationOptions, creationOptions.attributeNames || [\"position\"], uniformNames, creationOptions.samplerNames, creationOptions.engine, defines, undefined, creationOptions.onCompiled, undefined, undefined, undefined, creationOptions.shaderLanguage);\n            this._onContextRestoredObserver = creationOptions.engine.onContextRestoredObservable.add(() => {\n                this.effect._pipelineContext = null; // because _prepareEffect will try to dispose this pipeline before recreating it and that would lead to webgl errors\n                this.effect._wasPreviouslyReady = false;\n                this.effect._prepareEffect();\n            });\n        }\n    }\n    /**\n     * Disposes of the effect wrapper\n     */\n    dispose() {\n        if (this._onContextRestoredObserver) {\n            this.effect.getEngine().onContextRestoredObservable.remove(this._onContextRestoredObserver);\n            this._onContextRestoredObserver = null;\n        }\n        this.effect.dispose();\n    }\n}\n//# sourceMappingURL=effectRenderer.js.map","import { __decorate } from \"../tslib.es6.js\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { serialize, SerializationHelper, serializeAsTexture, serializeAsColorCurves, serializeAsColor4 } from \"../Misc/decorators.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Tools } from \"../Misc/tools.js\";\nimport { Color4 } from \"../Maths/math.color.js\";\nimport { MaterialDefines } from \"../Materials/materialDefines.js\";\nimport { ColorCurves } from \"../Materials/colorCurves.js\";\n/**\n * @internal\n */\nexport class ImageProcessingConfigurationDefines extends MaterialDefines {\n    constructor() {\n        super();\n        this.IMAGEPROCESSING = false;\n        this.VIGNETTE = false;\n        this.VIGNETTEBLENDMODEMULTIPLY = false;\n        this.VIGNETTEBLENDMODEOPAQUE = false;\n        this.TONEMAPPING = false;\n        this.TONEMAPPING_ACES = false;\n        this.CONTRAST = false;\n        this.COLORCURVES = false;\n        this.COLORGRADING = false;\n        this.COLORGRADING3D = false;\n        this.SAMPLER3DGREENDEPTH = false;\n        this.SAMPLER3DBGRMAP = false;\n        this.DITHER = false;\n        this.IMAGEPROCESSINGPOSTPROCESS = false;\n        this.EXPOSURE = false;\n        this.SKIPFINALCOLORCLAMP = false;\n        this.rebuild();\n    }\n}\n/**\n * This groups together the common properties used for image processing either in direct forward pass\n * or through post processing effect depending on the use of the image processing pipeline in your scene\n * or not.\n */\nexport class ImageProcessingConfiguration {\n    constructor() {\n        /**\n         * Color curves setup used in the effect if colorCurvesEnabled is set to true\n         */\n        this.colorCurves = new ColorCurves();\n        this._colorCurvesEnabled = false;\n        this._colorGradingEnabled = false;\n        this._colorGradingWithGreenDepth = true;\n        this._colorGradingBGR = true;\n        /** @internal */\n        this._exposure = 1.0;\n        this._toneMappingEnabled = false;\n        this._toneMappingType = ImageProcessingConfiguration.TONEMAPPING_STANDARD;\n        this._contrast = 1.0;\n        /**\n         * Vignette stretch size.\n         */\n        this.vignetteStretch = 0;\n        /**\n         * Vignette center X Offset.\n         */\n        this.vignetteCenterX = 0;\n        /**\n         * Vignette center Y Offset.\n         */\n        this.vignetteCenterY = 0;\n        /**\n         * Vignette weight or intensity of the vignette effect.\n         */\n        this.vignetteWeight = 1.5;\n        /**\n         * Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\n         * if vignetteEnabled is set to true.\n         */\n        this.vignetteColor = new Color4(0, 0, 0, 0);\n        /**\n         * Camera field of view used by the Vignette effect.\n         */\n        this.vignetteCameraFov = 0.5;\n        this._vignetteBlendMode = ImageProcessingConfiguration.VIGNETTEMODE_MULTIPLY;\n        this._vignetteEnabled = false;\n        this._ditheringEnabled = false;\n        this._ditheringIntensity = 1.0 / 255.0;\n        /** @internal */\n        this._skipFinalColorClamp = false;\n        /** @internal */\n        this._applyByPostProcess = false;\n        this._isEnabled = true;\n        /**\n         * An event triggered when the configuration changes and requires Shader to Update some parameters.\n         */\n        this.onUpdateParameters = new Observable();\n    }\n    /**\n     * Gets whether the color curves effect is enabled.\n     */\n    get colorCurvesEnabled() {\n        return this._colorCurvesEnabled;\n    }\n    /**\n     * Sets whether the color curves effect is enabled.\n     */\n    set colorCurvesEnabled(value) {\n        if (this._colorCurvesEnabled === value) {\n            return;\n        }\n        this._colorCurvesEnabled = value;\n        this._updateParameters();\n    }\n    /**\n     * Color grading LUT texture used in the effect if colorGradingEnabled is set to true\n     */\n    get colorGradingTexture() {\n        return this._colorGradingTexture;\n    }\n    /**\n     * Color grading LUT texture used in the effect if colorGradingEnabled is set to true\n     */\n    set colorGradingTexture(value) {\n        if (this._colorGradingTexture === value) {\n            return;\n        }\n        this._colorGradingTexture = value;\n        this._updateParameters();\n    }\n    /**\n     * Gets whether the color grading effect is enabled.\n     */\n    get colorGradingEnabled() {\n        return this._colorGradingEnabled;\n    }\n    /**\n     * Sets whether the color grading effect is enabled.\n     */\n    set colorGradingEnabled(value) {\n        if (this._colorGradingEnabled === value) {\n            return;\n        }\n        this._colorGradingEnabled = value;\n        this._updateParameters();\n    }\n    /**\n     * Gets whether the color grading effect is using a green depth for the 3d Texture.\n     */\n    get colorGradingWithGreenDepth() {\n        return this._colorGradingWithGreenDepth;\n    }\n    /**\n     * Sets whether the color grading effect is using a green depth for the 3d Texture.\n     */\n    set colorGradingWithGreenDepth(value) {\n        if (this._colorGradingWithGreenDepth === value) {\n            return;\n        }\n        this._colorGradingWithGreenDepth = value;\n        this._updateParameters();\n    }\n    /**\n     * Gets whether the color grading texture contains BGR values.\n     */\n    get colorGradingBGR() {\n        return this._colorGradingBGR;\n    }\n    /**\n     * Sets whether the color grading texture contains BGR values.\n     */\n    set colorGradingBGR(value) {\n        if (this._colorGradingBGR === value) {\n            return;\n        }\n        this._colorGradingBGR = value;\n        this._updateParameters();\n    }\n    /**\n     * Gets the Exposure used in the effect.\n     */\n    get exposure() {\n        return this._exposure;\n    }\n    /**\n     * Sets the Exposure used in the effect.\n     */\n    set exposure(value) {\n        if (this._exposure === value) {\n            return;\n        }\n        this._exposure = value;\n        this._updateParameters();\n    }\n    /**\n     * Gets whether the tone mapping effect is enabled.\n     */\n    get toneMappingEnabled() {\n        return this._toneMappingEnabled;\n    }\n    /**\n     * Sets whether the tone mapping effect is enabled.\n     */\n    set toneMappingEnabled(value) {\n        if (this._toneMappingEnabled === value) {\n            return;\n        }\n        this._toneMappingEnabled = value;\n        this._updateParameters();\n    }\n    /**\n     * Gets the type of tone mapping effect.\n     */\n    get toneMappingType() {\n        return this._toneMappingType;\n    }\n    /**\n     * Sets the type of tone mapping effect used in BabylonJS.\n     */\n    set toneMappingType(value) {\n        if (this._toneMappingType === value) {\n            return;\n        }\n        this._toneMappingType = value;\n        this._updateParameters();\n    }\n    /**\n     * Gets the contrast used in the effect.\n     */\n    get contrast() {\n        return this._contrast;\n    }\n    /**\n     * Sets the contrast used in the effect.\n     */\n    set contrast(value) {\n        if (this._contrast === value) {\n            return;\n        }\n        this._contrast = value;\n        this._updateParameters();\n    }\n    /**\n     * Back Compat: Vignette center Y Offset.\n     * @deprecated use vignetteCenterY instead\n     */\n    get vignetteCentreY() {\n        return this.vignetteCenterY;\n    }\n    set vignetteCentreY(value) {\n        this.vignetteCenterY = value;\n    }\n    /**\n     * Back Compat: Vignette center X Offset.\n     * @deprecated use vignetteCenterX instead\n     */\n    get vignetteCentreX() {\n        return this.vignetteCenterX;\n    }\n    set vignetteCentreX(value) {\n        this.vignetteCenterX = value;\n    }\n    /**\n     * Gets the vignette blend mode allowing different kind of effect.\n     */\n    get vignetteBlendMode() {\n        return this._vignetteBlendMode;\n    }\n    /**\n     * Sets the vignette blend mode allowing different kind of effect.\n     */\n    set vignetteBlendMode(value) {\n        if (this._vignetteBlendMode === value) {\n            return;\n        }\n        this._vignetteBlendMode = value;\n        this._updateParameters();\n    }\n    /**\n     * Gets whether the vignette effect is enabled.\n     */\n    get vignetteEnabled() {\n        return this._vignetteEnabled;\n    }\n    /**\n     * Sets whether the vignette effect is enabled.\n     */\n    set vignetteEnabled(value) {\n        if (this._vignetteEnabled === value) {\n            return;\n        }\n        this._vignetteEnabled = value;\n        this._updateParameters();\n    }\n    /**\n     * Gets whether the dithering effect is enabled.\n     * The dithering effect can be used to reduce banding.\n     */\n    get ditheringEnabled() {\n        return this._ditheringEnabled;\n    }\n    /**\n     * Sets whether the dithering effect is enabled.\n     * The dithering effect can be used to reduce banding.\n     */\n    set ditheringEnabled(value) {\n        if (this._ditheringEnabled === value) {\n            return;\n        }\n        this._ditheringEnabled = value;\n        this._updateParameters();\n    }\n    /**\n     * Gets the dithering intensity. 0 is no dithering. Default is 1.0 / 255.0.\n     */\n    get ditheringIntensity() {\n        return this._ditheringIntensity;\n    }\n    /**\n     * Sets the dithering intensity. 0 is no dithering. Default is 1.0 / 255.0.\n     */\n    set ditheringIntensity(value) {\n        if (this._ditheringIntensity === value) {\n            return;\n        }\n        this._ditheringIntensity = value;\n        this._updateParameters();\n    }\n    /**\n     * If apply by post process is set to true, setting this to true will skip the the final color clamp step in the fragment shader\n     * Applies to PBR materials.\n     */\n    get skipFinalColorClamp() {\n        return this._skipFinalColorClamp;\n    }\n    /**\n     * If apply by post process is set to true, setting this to true will skip the the final color clamp step in the fragment shader\n     * Applies to PBR materials.\n     */\n    set skipFinalColorClamp(value) {\n        if (this._skipFinalColorClamp === value) {\n            return;\n        }\n        this._skipFinalColorClamp = value;\n        this._updateParameters();\n    }\n    /**\n     * Gets whether the image processing is applied through a post process or not.\n     */\n    get applyByPostProcess() {\n        return this._applyByPostProcess;\n    }\n    /**\n     * Sets whether the image processing is applied through a post process or not.\n     */\n    set applyByPostProcess(value) {\n        if (this._applyByPostProcess === value) {\n            return;\n        }\n        this._applyByPostProcess = value;\n        this._updateParameters();\n    }\n    /**\n     * Gets whether the image processing is enabled or not.\n     */\n    get isEnabled() {\n        return this._isEnabled;\n    }\n    /**\n     * Sets whether the image processing is enabled or not.\n     */\n    set isEnabled(value) {\n        if (this._isEnabled === value) {\n            return;\n        }\n        this._isEnabled = value;\n        this._updateParameters();\n    }\n    /**\n     * Method called each time the image processing information changes requires to recompile the effect.\n     */\n    _updateParameters() {\n        this.onUpdateParameters.notifyObservers(this);\n    }\n    /**\n     * Gets the current class name.\n     * @returns \"ImageProcessingConfiguration\"\n     */\n    getClassName() {\n        return \"ImageProcessingConfiguration\";\n    }\n    /**\n     * Prepare the list of uniforms associated with the Image Processing effects.\n     * @param uniforms The list of uniforms used in the effect\n     * @param defines the list of defines currently in use\n     */\n    static PrepareUniforms(uniforms, defines) {\n        if (defines.EXPOSURE) {\n            uniforms.push(\"exposureLinear\");\n        }\n        if (defines.CONTRAST) {\n            uniforms.push(\"contrast\");\n        }\n        if (defines.COLORGRADING) {\n            uniforms.push(\"colorTransformSettings\");\n        }\n        if (defines.VIGNETTE || defines.DITHER) {\n            uniforms.push(\"vInverseScreenSize\");\n        }\n        if (defines.VIGNETTE) {\n            uniforms.push(\"vignetteSettings1\");\n            uniforms.push(\"vignetteSettings2\");\n        }\n        if (defines.COLORCURVES) {\n            ColorCurves.PrepareUniforms(uniforms);\n        }\n        if (defines.DITHER) {\n            uniforms.push(\"ditherIntensity\");\n        }\n    }\n    /**\n     * Prepare the list of samplers associated with the Image Processing effects.\n     * @param samplersList The list of uniforms used in the effect\n     * @param defines the list of defines currently in use\n     */\n    static PrepareSamplers(samplersList, defines) {\n        if (defines.COLORGRADING) {\n            samplersList.push(\"txColorTransform\");\n        }\n    }\n    /**\n     * Prepare the list of defines associated to the shader.\n     * @param defines the list of defines to complete\n     * @param forPostProcess Define if we are currently in post process mode or not\n     */\n    prepareDefines(defines, forPostProcess = false) {\n        if (forPostProcess !== this.applyByPostProcess || !this._isEnabled) {\n            defines.VIGNETTE = false;\n            defines.TONEMAPPING = false;\n            defines.TONEMAPPING_ACES = false;\n            defines.CONTRAST = false;\n            defines.EXPOSURE = false;\n            defines.COLORCURVES = false;\n            defines.COLORGRADING = false;\n            defines.COLORGRADING3D = false;\n            defines.DITHER = false;\n            defines.IMAGEPROCESSING = false;\n            defines.SKIPFINALCOLORCLAMP = this.skipFinalColorClamp;\n            defines.IMAGEPROCESSINGPOSTPROCESS = this.applyByPostProcess && this._isEnabled;\n            return;\n        }\n        defines.VIGNETTE = this.vignetteEnabled;\n        defines.VIGNETTEBLENDMODEMULTIPLY = this.vignetteBlendMode === ImageProcessingConfiguration._VIGNETTEMODE_MULTIPLY;\n        defines.VIGNETTEBLENDMODEOPAQUE = !defines.VIGNETTEBLENDMODEMULTIPLY;\n        defines.TONEMAPPING = this.toneMappingEnabled;\n        switch (this._toneMappingType) {\n            case ImageProcessingConfiguration.TONEMAPPING_ACES:\n                defines.TONEMAPPING_ACES = true;\n                break;\n            default:\n                defines.TONEMAPPING_ACES = false;\n                break;\n        }\n        defines.CONTRAST = this.contrast !== 1.0;\n        defines.EXPOSURE = this.exposure !== 1.0;\n        defines.COLORCURVES = this.colorCurvesEnabled && !!this.colorCurves;\n        defines.COLORGRADING = this.colorGradingEnabled && !!this.colorGradingTexture;\n        if (defines.COLORGRADING) {\n            defines.COLORGRADING3D = this.colorGradingTexture.is3D;\n        }\n        else {\n            defines.COLORGRADING3D = false;\n        }\n        defines.SAMPLER3DGREENDEPTH = this.colorGradingWithGreenDepth;\n        defines.SAMPLER3DBGRMAP = this.colorGradingBGR;\n        defines.DITHER = this._ditheringEnabled;\n        defines.IMAGEPROCESSINGPOSTPROCESS = this.applyByPostProcess;\n        defines.SKIPFINALCOLORCLAMP = this.skipFinalColorClamp;\n        defines.IMAGEPROCESSING = defines.VIGNETTE || defines.TONEMAPPING || defines.CONTRAST || defines.EXPOSURE || defines.COLORCURVES || defines.COLORGRADING || defines.DITHER;\n    }\n    /**\n     * Returns true if all the image processing information are ready.\n     * @returns True if ready, otherwise, false\n     */\n    isReady() {\n        // Color Grading texture can not be none blocking.\n        return !this.colorGradingEnabled || !this.colorGradingTexture || this.colorGradingTexture.isReady();\n    }\n    /**\n     * Binds the image processing to the shader.\n     * @param effect The effect to bind to\n     * @param overrideAspectRatio Override the aspect ratio of the effect\n     */\n    bind(effect, overrideAspectRatio) {\n        // Color Curves\n        if (this._colorCurvesEnabled && this.colorCurves) {\n            ColorCurves.Bind(this.colorCurves, effect);\n        }\n        // Vignette and dither handled together due to common uniform.\n        if (this._vignetteEnabled || this._ditheringEnabled) {\n            const inverseWidth = 1 / effect.getEngine().getRenderWidth();\n            const inverseHeight = 1 / effect.getEngine().getRenderHeight();\n            effect.setFloat2(\"vInverseScreenSize\", inverseWidth, inverseHeight);\n            if (this._ditheringEnabled) {\n                effect.setFloat(\"ditherIntensity\", 0.5 * this._ditheringIntensity);\n            }\n            if (this._vignetteEnabled) {\n                const aspectRatio = overrideAspectRatio != null ? overrideAspectRatio : inverseHeight / inverseWidth;\n                let vignetteScaleY = Math.tan(this.vignetteCameraFov * 0.5);\n                let vignetteScaleX = vignetteScaleY * aspectRatio;\n                const vignetteScaleGeometricMean = Math.sqrt(vignetteScaleX * vignetteScaleY);\n                vignetteScaleX = Tools.Mix(vignetteScaleX, vignetteScaleGeometricMean, this.vignetteStretch);\n                vignetteScaleY = Tools.Mix(vignetteScaleY, vignetteScaleGeometricMean, this.vignetteStretch);\n                effect.setFloat4(\"vignetteSettings1\", vignetteScaleX, vignetteScaleY, -vignetteScaleX * this.vignetteCenterX, -vignetteScaleY * this.vignetteCenterY);\n                const vignettePower = -2.0 * this.vignetteWeight;\n                effect.setFloat4(\"vignetteSettings2\", this.vignetteColor.r, this.vignetteColor.g, this.vignetteColor.b, vignettePower);\n            }\n        }\n        // Exposure\n        effect.setFloat(\"exposureLinear\", this.exposure);\n        // Contrast\n        effect.setFloat(\"contrast\", this.contrast);\n        // Color transform settings\n        if (this.colorGradingTexture) {\n            effect.setTexture(\"txColorTransform\", this.colorGradingTexture);\n            const textureSize = this.colorGradingTexture.getSize().height;\n            effect.setFloat4(\"colorTransformSettings\", (textureSize - 1) / textureSize, // textureScale\n            0.5 / textureSize, // textureOffset\n            textureSize, // textureSize\n            this.colorGradingTexture.level // weight\n            );\n        }\n    }\n    /**\n     * Clones the current image processing instance.\n     * @returns The cloned image processing\n     */\n    clone() {\n        return SerializationHelper.Clone(() => new ImageProcessingConfiguration(), this);\n    }\n    /**\n     * Serializes the current image processing instance to a json representation.\n     * @returns a JSON representation\n     */\n    serialize() {\n        return SerializationHelper.Serialize(this);\n    }\n    /**\n     * Parses the image processing from a json representation.\n     * @param source the JSON source to parse\n     * @returns The parsed image processing\n     */\n    static Parse(source) {\n        const parsed = SerializationHelper.Parse(() => new ImageProcessingConfiguration(), source, null, null);\n        // Backward compatibility\n        if (source.vignetteCentreX !== undefined) {\n            parsed.vignetteCenterX = source.vignetteCentreX;\n        }\n        if (source.vignetteCentreY !== undefined) {\n            parsed.vignetteCenterY = source.vignetteCentreY;\n        }\n        return parsed;\n    }\n    /**\n     * Used to apply the vignette as a mix with the pixel color.\n     */\n    static get VIGNETTEMODE_MULTIPLY() {\n        return this._VIGNETTEMODE_MULTIPLY;\n    }\n    /**\n     * Used to apply the vignette as a replacement of the pixel color.\n     */\n    static get VIGNETTEMODE_OPAQUE() {\n        return this._VIGNETTEMODE_OPAQUE;\n    }\n}\n/**\n * Default tone mapping applied in BabylonJS.\n */\nImageProcessingConfiguration.TONEMAPPING_STANDARD = 0;\n/**\n * ACES Tone mapping (used by default in unreal and unity). This can help getting closer\n * to other engines rendering to increase portability.\n */\nImageProcessingConfiguration.TONEMAPPING_ACES = 1;\n// Static constants associated to the image processing.\nImageProcessingConfiguration._VIGNETTEMODE_MULTIPLY = 0;\nImageProcessingConfiguration._VIGNETTEMODE_OPAQUE = 1;\n__decorate([\n    serializeAsColorCurves()\n], ImageProcessingConfiguration.prototype, \"colorCurves\", void 0);\n__decorate([\n    serialize()\n], ImageProcessingConfiguration.prototype, \"_colorCurvesEnabled\", void 0);\n__decorate([\n    serializeAsTexture(\"colorGradingTexture\")\n], ImageProcessingConfiguration.prototype, \"_colorGradingTexture\", void 0);\n__decorate([\n    serialize()\n], ImageProcessingConfiguration.prototype, \"_colorGradingEnabled\", void 0);\n__decorate([\n    serialize()\n], ImageProcessingConfiguration.prototype, \"_colorGradingWithGreenDepth\", void 0);\n__decorate([\n    serialize()\n], ImageProcessingConfiguration.prototype, \"_colorGradingBGR\", void 0);\n__decorate([\n    serialize()\n], ImageProcessingConfiguration.prototype, \"_exposure\", void 0);\n__decorate([\n    serialize()\n], ImageProcessingConfiguration.prototype, \"_toneMappingEnabled\", void 0);\n__decorate([\n    serialize()\n], ImageProcessingConfiguration.prototype, \"_toneMappingType\", void 0);\n__decorate([\n    serialize()\n], ImageProcessingConfiguration.prototype, \"_contrast\", void 0);\n__decorate([\n    serialize()\n], ImageProcessingConfiguration.prototype, \"vignetteStretch\", void 0);\n__decorate([\n    serialize()\n], ImageProcessingConfiguration.prototype, \"vignetteCenterX\", void 0);\n__decorate([\n    serialize()\n], ImageProcessingConfiguration.prototype, \"vignetteCenterY\", void 0);\n__decorate([\n    serialize()\n], ImageProcessingConfiguration.prototype, \"vignetteWeight\", void 0);\n__decorate([\n    serializeAsColor4()\n], ImageProcessingConfiguration.prototype, \"vignetteColor\", void 0);\n__decorate([\n    serialize()\n], ImageProcessingConfiguration.prototype, \"vignetteCameraFov\", void 0);\n__decorate([\n    serialize()\n], ImageProcessingConfiguration.prototype, \"_vignetteBlendMode\", void 0);\n__decorate([\n    serialize()\n], ImageProcessingConfiguration.prototype, \"_vignetteEnabled\", void 0);\n__decorate([\n    serialize()\n], ImageProcessingConfiguration.prototype, \"_ditheringEnabled\", void 0);\n__decorate([\n    serialize()\n], ImageProcessingConfiguration.prototype, \"_ditheringIntensity\", void 0);\n__decorate([\n    serialize()\n], ImageProcessingConfiguration.prototype, \"_skipFinalColorClamp\", void 0);\n__decorate([\n    serialize()\n], ImageProcessingConfiguration.prototype, \"_applyByPostProcess\", void 0);\n__decorate([\n    serialize()\n], ImageProcessingConfiguration.prototype, \"_isEnabled\", void 0);\n// References the dependencies.\nSerializationHelper._ImageProcessingConfigurationParser = ImageProcessingConfiguration.Parse;\n//# sourceMappingURL=imageProcessingConfiguration.js.map","import { DeepCopier } from \"../Misc/deepCopier.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport { SerializationHelper } from \"../Misc/decorators.js\";\n\n/**\n * This represents all the required information to add a fresnel effect on a material:\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters\n */\nexport class FresnelParameters {\n    /**\n     * Define if the fresnel effect is enable or not.\n     */\n    get isEnabled() {\n        return this._isEnabled;\n    }\n    set isEnabled(value) {\n        if (this._isEnabled === value) {\n            return;\n        }\n        this._isEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(4 | 16);\n    }\n    /**\n     * Creates a new FresnelParameters object.\n     *\n     * @param options provide your own settings to optionally to override defaults\n     */\n    constructor(options = {}) {\n        this._isEnabled = true;\n        this.bias = options.bias === undefined ? 0 : options.bias;\n        this.power = options.power === undefined ? 1 : options.power;\n        this.leftColor = options.leftColor || Color3.White();\n        this.rightColor = options.rightColor || Color3.Black();\n        if (options.isEnabled === false) {\n            this.isEnabled = false;\n        }\n    }\n    /**\n     * Clones the current fresnel and its values\n     * @returns a clone fresnel configuration\n     */\n    clone() {\n        const newFresnelParameters = new FresnelParameters();\n        DeepCopier.DeepCopy(this, newFresnelParameters);\n        return newFresnelParameters;\n    }\n    /**\n     * Determines equality between FresnelParameters objects\n     * @param otherFresnelParameters defines the second operand\n     * @returns true if the power, bias, leftColor, rightColor and isEnabled values are equal to the given ones\n     */\n    equals(otherFresnelParameters) {\n        return (otherFresnelParameters &&\n            this.bias === otherFresnelParameters.bias &&\n            this.power === otherFresnelParameters.power &&\n            this.leftColor.equals(otherFresnelParameters.leftColor) &&\n            this.rightColor.equals(otherFresnelParameters.rightColor) &&\n            this.isEnabled === otherFresnelParameters.isEnabled);\n    }\n    /**\n     * Serializes the current fresnel parameters to a JSON representation.\n     * @returns the JSON serialization\n     */\n    serialize() {\n        return {\n            isEnabled: this.isEnabled,\n            leftColor: this.leftColor.asArray(),\n            rightColor: this.rightColor.asArray(),\n            bias: this.bias,\n            power: this.power,\n        };\n    }\n    /**\n     * Parse a JSON object and deserialize it to a new Fresnel parameter object.\n     * @param parsedFresnelParameters Define the JSON representation\n     * @returns the parsed parameters\n     */\n    static Parse(parsedFresnelParameters) {\n        return new FresnelParameters({\n            isEnabled: parsedFresnelParameters.isEnabled,\n            leftColor: Color3.FromArray(parsedFresnelParameters.leftColor),\n            rightColor: Color3.FromArray(parsedFresnelParameters.rightColor),\n            bias: parsedFresnelParameters.bias,\n            power: parsedFresnelParameters.power || 1.0,\n        });\n    }\n}\n// References the dependencies.\nSerializationHelper._FresnelParametersParser = FresnelParameters.Parse;\n//# sourceMappingURL=fresnelParameters.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { Material } from \"./material.js\";\nimport { serialize, expandToProperty, serializeAsTexture } from \"../Misc/decorators.js\";\nimport { MaterialFlags } from \"./materialFlags.js\";\nimport { MaterialHelper } from \"./materialHelper.js\";\nimport { MaterialDefines } from \"./materialDefines.js\";\nimport { MaterialPluginBase } from \"./materialPluginBase.js\";\n\n/**\n * @internal\n */\nexport class MaterialDetailMapDefines extends MaterialDefines {\n    constructor() {\n        super(...arguments);\n        this.DETAIL = false;\n        this.DETAILDIRECTUV = 0;\n        this.DETAIL_NORMALBLENDMETHOD = 0;\n    }\n}\n/**\n * Plugin that implements the detail map component of a material\n *\n * Inspired from:\n *   Unity: https://docs.unity3d.com/Packages/com.unity.render-pipelines.high-definition@9.0/manual/Mask-Map-and-Detail-Map.html and https://docs.unity3d.com/Manual/StandardShaderMaterialParameterDetail.html\n *   Unreal: https://docs.unrealengine.com/en-US/Engine/Rendering/Materials/HowTo/DetailTexturing/index.html\n *   Cryengine: https://docs.cryengine.com/display/SDKDOC2/Detail+Maps\n */\nexport class DetailMapConfiguration extends MaterialPluginBase {\n    /** @internal */\n    _markAllSubMeshesAsTexturesDirty() {\n        this._enable(this._isEnabled);\n        this._internalMarkAllSubMeshesAsTexturesDirty();\n    }\n    constructor(material, addToPluginList = true) {\n        super(material, \"DetailMap\", 140, new MaterialDetailMapDefines(), addToPluginList);\n        this._texture = null;\n        /**\n         * Defines how strongly the detail diffuse/albedo channel is blended with the regular diffuse/albedo texture\n         * Bigger values mean stronger blending\n         */\n        this.diffuseBlendLevel = 1;\n        /**\n         * Defines how strongly the detail roughness channel is blended with the regular roughness value\n         * Bigger values mean stronger blending. Only used with PBR materials\n         */\n        this.roughnessBlendLevel = 1;\n        /**\n         * Defines how strong the bump effect from the detail map is\n         * Bigger values mean stronger effect\n         */\n        this.bumpLevel = 1;\n        this._normalBlendMethod = Material.MATERIAL_NORMALBLENDMETHOD_WHITEOUT;\n        this._isEnabled = false;\n        /**\n         * Enable or disable the detail map on this material\n         */\n        this.isEnabled = false;\n        this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[1];\n    }\n    isReadyForSubMesh(defines, scene, engine) {\n        if (!this._isEnabled) {\n            return true;\n        }\n        if (defines._areTexturesDirty && scene.texturesEnabled) {\n            if (engine.getCaps().standardDerivatives && this._texture && MaterialFlags.DetailTextureEnabled) {\n                // Detail texture cannot be not blocking.\n                if (!this._texture.isReady()) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    prepareDefines(defines, scene) {\n        if (this._isEnabled) {\n            defines.DETAIL_NORMALBLENDMETHOD = this._normalBlendMethod;\n            const engine = scene.getEngine();\n            if (defines._areTexturesDirty) {\n                if (engine.getCaps().standardDerivatives && this._texture && MaterialFlags.DetailTextureEnabled && this._isEnabled) {\n                    MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"DETAIL\");\n                    defines.DETAIL_NORMALBLENDMETHOD = this._normalBlendMethod;\n                }\n                else {\n                    defines.DETAIL = false;\n                }\n            }\n        }\n        else {\n            defines.DETAIL = false;\n        }\n    }\n    bindForSubMesh(uniformBuffer, scene) {\n        if (!this._isEnabled) {\n            return;\n        }\n        const isFrozen = this._material.isFrozen;\n        if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\n            if (this._texture && MaterialFlags.DetailTextureEnabled) {\n                uniformBuffer.updateFloat4(\"vDetailInfos\", this._texture.coordinatesIndex, this.diffuseBlendLevel, this.bumpLevel, this.roughnessBlendLevel);\n                MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"detail\");\n            }\n        }\n        // Textures\n        if (scene.texturesEnabled) {\n            if (this._texture && MaterialFlags.DetailTextureEnabled) {\n                uniformBuffer.setTexture(\"detailSampler\", this._texture);\n            }\n        }\n    }\n    hasTexture(texture) {\n        if (this._texture === texture) {\n            return true;\n        }\n        return false;\n    }\n    getActiveTextures(activeTextures) {\n        if (this._texture) {\n            activeTextures.push(this._texture);\n        }\n    }\n    getAnimatables(animatables) {\n        if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\n            animatables.push(this._texture);\n        }\n    }\n    dispose(forceDisposeTextures) {\n        var _a;\n        if (forceDisposeTextures) {\n            (_a = this._texture) === null || _a === void 0 ? void 0 : _a.dispose();\n        }\n    }\n    getClassName() {\n        return \"DetailMapConfiguration\";\n    }\n    getSamplers(samplers) {\n        samplers.push(\"detailSampler\");\n    }\n    getUniforms() {\n        return {\n            ubo: [\n                { name: \"vDetailInfos\", size: 4, type: \"vec4\" },\n                { name: \"detailMatrix\", size: 16, type: \"mat4\" },\n            ],\n        };\n    }\n}\n__decorate([\n    serializeAsTexture(\"detailTexture\"),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], DetailMapConfiguration.prototype, \"texture\", void 0);\n__decorate([\n    serialize()\n], DetailMapConfiguration.prototype, \"diffuseBlendLevel\", void 0);\n__decorate([\n    serialize()\n], DetailMapConfiguration.prototype, \"roughnessBlendLevel\", void 0);\n__decorate([\n    serialize()\n], DetailMapConfiguration.prototype, \"bumpLevel\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], DetailMapConfiguration.prototype, \"normalBlendMethod\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], DetailMapConfiguration.prototype, \"isEnabled\", void 0);\n//# sourceMappingURL=material.detailMapConfiguration.js.map","import { __decorate } from \"../tslib.es6.js\";\n\nimport { SerializationHelper, serialize } from \"../Misc/decorators.js\";\n/**\n * Class that holds the different stencil states of a material\n * Usage example: https://playground.babylonjs.com/#CW5PRI#10\n */\nexport class MaterialStencilState {\n    /**\n     * Creates a material stencil state instance\n     */\n    constructor() {\n        this.reset();\n    }\n    /**\n     * Resets all the stencil states to default values\n     */\n    reset() {\n        this.enabled = false;\n        this.mask = 0xff;\n        this.func = 519;\n        this.funcRef = 1;\n        this.funcMask = 0xff;\n        this.opStencilFail = 7680;\n        this.opDepthFail = 7680;\n        this.opStencilDepthPass = 7681;\n    }\n    /**\n     * Gets or sets the stencil function\n     */\n    get func() {\n        return this._func;\n    }\n    set func(value) {\n        this._func = value;\n    }\n    /**\n     * Gets or sets the stencil function reference\n     */\n    get funcRef() {\n        return this._funcRef;\n    }\n    set funcRef(value) {\n        this._funcRef = value;\n    }\n    /**\n     * Gets or sets the stencil function mask\n     */\n    get funcMask() {\n        return this._funcMask;\n    }\n    set funcMask(value) {\n        this._funcMask = value;\n    }\n    /**\n     * Gets or sets the operation when the stencil test fails\n     */\n    get opStencilFail() {\n        return this._opStencilFail;\n    }\n    set opStencilFail(value) {\n        this._opStencilFail = value;\n    }\n    /**\n     * Gets or sets the operation when the depth test fails\n     */\n    get opDepthFail() {\n        return this._opDepthFail;\n    }\n    set opDepthFail(value) {\n        this._opDepthFail = value;\n    }\n    /**\n     * Gets or sets the operation when the stencil+depth test succeeds\n     */\n    get opStencilDepthPass() {\n        return this._opStencilDepthPass;\n    }\n    set opStencilDepthPass(value) {\n        this._opStencilDepthPass = value;\n    }\n    /**\n     * Gets or sets the stencil mask\n     */\n    get mask() {\n        return this._mask;\n    }\n    set mask(value) {\n        this._mask = value;\n    }\n    /**\n     * Enables or disables the stencil test\n     */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        this._enabled = value;\n    }\n    /**\n     * Get the current class name, useful for serialization or dynamic coding.\n     * @returns \"MaterialStencilState\"\n     */\n    getClassName() {\n        return \"MaterialStencilState\";\n    }\n    /**\n     * Makes a duplicate of the current configuration into another one.\n     * @param stencilState defines stencil state where to copy the info\n     */\n    copyTo(stencilState) {\n        SerializationHelper.Clone(() => stencilState, this);\n    }\n    /**\n     * Serializes this stencil configuration.\n     * @returns - An object with the serialized config.\n     */\n    serialize() {\n        return SerializationHelper.Serialize(this);\n    }\n    /**\n     * Parses a stencil state configuration from a serialized object.\n     * @param source - Serialized object.\n     * @param scene Defines the scene we are parsing for\n     * @param rootUrl Defines the rootUrl to load from\n     */\n    parse(source, scene, rootUrl) {\n        SerializationHelper.Parse(() => this, source, scene, rootUrl);\n    }\n}\n__decorate([\n    serialize()\n], MaterialStencilState.prototype, \"func\", null);\n__decorate([\n    serialize()\n], MaterialStencilState.prototype, \"funcRef\", null);\n__decorate([\n    serialize()\n], MaterialStencilState.prototype, \"funcMask\", null);\n__decorate([\n    serialize()\n], MaterialStencilState.prototype, \"opStencilFail\", null);\n__decorate([\n    serialize()\n], MaterialStencilState.prototype, \"opDepthFail\", null);\n__decorate([\n    serialize()\n], MaterialStencilState.prototype, \"opStencilDepthPass\", null);\n__decorate([\n    serialize()\n], MaterialStencilState.prototype, \"mask\", null);\n__decorate([\n    serialize()\n], MaterialStencilState.prototype, \"enabled\", null);\n//# sourceMappingURL=materialStencilState.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\nimport { Tools } from \"../Misc/tools.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nimport { SubMesh } from \"../Meshes/subMesh.js\";\nimport { UniformBuffer } from \"./uniformBuffer.js\";\n\nimport { Logger } from \"../Misc/logger.js\";\nimport { Plane } from \"../Maths/math.plane.js\";\nimport { MaterialHelper } from \"./materialHelper.js\";\nimport { DrawWrapper } from \"./drawWrapper.js\";\nimport { MaterialStencilState } from \"./materialStencilState.js\";\nimport { MaterialPluginEvent } from \"./materialPluginEvent.js\";\n/**\n * Base class for the main features of a material in Babylon.js\n */\nexport class Material {\n    /**\n     * If the material can be rendered to several textures with MRT extension\n     */\n    get canRenderToMRT() {\n        // By default, shaders are not compatible with MRTs\n        // Base classes should override that if their shader supports MRT\n        return false;\n    }\n    /**\n     * Sets the alpha value of the material\n     */\n    set alpha(value) {\n        if (this._alpha === value) {\n            return;\n        }\n        const oldValue = this._alpha;\n        this._alpha = value;\n        // Only call dirty when there is a state change (no alpha / alpha)\n        if (oldValue === 1 || value === 1) {\n            this.markAsDirty(Material.MiscDirtyFlag);\n        }\n    }\n    /**\n     * Gets the alpha value of the material\n     */\n    get alpha() {\n        return this._alpha;\n    }\n    /**\n     * Sets the culling state (true to enable culling, false to disable)\n     */\n    set backFaceCulling(value) {\n        if (this._backFaceCulling === value) {\n            return;\n        }\n        this._backFaceCulling = value;\n        this.markAsDirty(Material.TextureDirtyFlag);\n    }\n    /**\n     * Gets the culling state\n     */\n    get backFaceCulling() {\n        return this._backFaceCulling;\n    }\n    /**\n     * Sets the type of faces that should be culled (true for back faces, false for front faces)\n     */\n    set cullBackFaces(value) {\n        if (this._cullBackFaces === value) {\n            return;\n        }\n        this._cullBackFaces = value;\n        this.markAsDirty(Material.TextureDirtyFlag);\n    }\n    /**\n     * Gets the type of faces that should be culled\n     */\n    get cullBackFaces() {\n        return this._cullBackFaces;\n    }\n    /**\n     * Block the dirty-mechanism for this specific material\n     * When set to false after being true the material will be marked as dirty.\n     */\n    get blockDirtyMechanism() {\n        return this._blockDirtyMechanism;\n    }\n    set blockDirtyMechanism(value) {\n        if (this._blockDirtyMechanism === value) {\n            return;\n        }\n        this._blockDirtyMechanism = value;\n        if (!value) {\n            this.markDirty();\n        }\n    }\n    /**\n     * This allows you to modify the material without marking it as dirty after every change.\n     * This function should be used if you need to make more than one dirty-enabling change to the material - adding a texture, setting a new fill mode and so on.\n     * The callback will pass the material as an argument, so you can make your changes to it.\n     * @param callback the callback to be executed that will update the material\n     */\n    atomicMaterialsUpdate(callback) {\n        this.blockDirtyMechanism = true;\n        try {\n            callback(this);\n        }\n        finally {\n            this.blockDirtyMechanism = false;\n        }\n    }\n    /**\n     * Gets a boolean indicating that current material needs to register RTT\n     */\n    get hasRenderTargetTextures() {\n        this._eventInfo.hasRenderTargetTextures = false;\n        this._callbackPluginEventHasRenderTargetTextures(this._eventInfo);\n        return this._eventInfo.hasRenderTargetTextures;\n    }\n    /**\n     * Called during a dispose event\n     */\n    set onDispose(callback) {\n        if (this._onDisposeObserver) {\n            this.onDisposeObservable.remove(this._onDisposeObserver);\n        }\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\n    }\n    /**\n     * An event triggered when the material is bound\n     */\n    get onBindObservable() {\n        if (!this._onBindObservable) {\n            this._onBindObservable = new Observable();\n        }\n        return this._onBindObservable;\n    }\n    /**\n     * Called during a bind event\n     */\n    set onBind(callback) {\n        if (this._onBindObserver) {\n            this.onBindObservable.remove(this._onBindObserver);\n        }\n        this._onBindObserver = this.onBindObservable.add(callback);\n    }\n    /**\n     * An event triggered when the material is unbound\n     */\n    get onUnBindObservable() {\n        if (!this._onUnBindObservable) {\n            this._onUnBindObservable = new Observable();\n        }\n        return this._onUnBindObservable;\n    }\n    /**\n     * An event triggered when the effect is (re)created\n     */\n    get onEffectCreatedObservable() {\n        if (!this._onEffectCreatedObservable) {\n            this._onEffectCreatedObservable = new Observable();\n        }\n        return this._onEffectCreatedObservable;\n    }\n    /**\n     * Sets the value of the alpha mode.\n     *\n     * | Value | Type | Description |\n     * | --- | --- | --- |\n     * | 0 | ALPHA_DISABLE |   |\n     * | 1 | ALPHA_ADD |   |\n     * | 2 | ALPHA_COMBINE |   |\n     * | 3 | ALPHA_SUBTRACT |   |\n     * | 4 | ALPHA_MULTIPLY |   |\n     * | 5 | ALPHA_MAXIMIZED |   |\n     * | 6 | ALPHA_ONEONE |   |\n     * | 7 | ALPHA_PREMULTIPLIED |   |\n     * | 8 | ALPHA_PREMULTIPLIED_PORTERDUFF |   |\n     * | 9 | ALPHA_INTERPOLATE |   |\n     * | 10 | ALPHA_SCREENMODE |   |\n     *\n     */\n    set alphaMode(value) {\n        if (this._alphaMode === value) {\n            return;\n        }\n        this._alphaMode = value;\n        this.markAsDirty(Material.TextureDirtyFlag);\n    }\n    /**\n     * Gets the value of the alpha mode\n     */\n    get alphaMode() {\n        return this._alphaMode;\n    }\n    /**\n     * Sets the need depth pre-pass value\n     */\n    set needDepthPrePass(value) {\n        if (this._needDepthPrePass === value) {\n            return;\n        }\n        this._needDepthPrePass = value;\n        if (this._needDepthPrePass) {\n            this.checkReadyOnEveryCall = true;\n        }\n    }\n    /**\n     * Gets the depth pre-pass value\n     */\n    get needDepthPrePass() {\n        return this._needDepthPrePass;\n    }\n    /**\n     * Can this material render to prepass\n     */\n    get isPrePassCapable() {\n        return false;\n    }\n    /**\n     * Sets the state for enabling fog\n     */\n    set fogEnabled(value) {\n        if (this._fogEnabled === value) {\n            return;\n        }\n        this._fogEnabled = value;\n        this.markAsDirty(Material.MiscDirtyFlag);\n    }\n    /**\n     * Gets the value of the fog enabled state\n     */\n    get fogEnabled() {\n        return this._fogEnabled;\n    }\n    get wireframe() {\n        switch (this._fillMode) {\n            case Material.WireFrameFillMode:\n            case Material.LineListDrawMode:\n            case Material.LineLoopDrawMode:\n            case Material.LineStripDrawMode:\n                return true;\n        }\n        return this._scene.forceWireframe;\n    }\n    /**\n     * Sets the state of wireframe mode\n     */\n    set wireframe(value) {\n        this.fillMode = value ? Material.WireFrameFillMode : Material.TriangleFillMode;\n    }\n    /**\n     * Gets the value specifying if point clouds are enabled\n     */\n    get pointsCloud() {\n        switch (this._fillMode) {\n            case Material.PointFillMode:\n            case Material.PointListDrawMode:\n                return true;\n        }\n        return this._scene.forcePointsCloud;\n    }\n    /**\n     * Sets the state of point cloud mode\n     */\n    set pointsCloud(value) {\n        this.fillMode = value ? Material.PointFillMode : Material.TriangleFillMode;\n    }\n    /**\n     * Gets the material fill mode\n     */\n    get fillMode() {\n        return this._fillMode;\n    }\n    /**\n     * Sets the material fill mode\n     */\n    set fillMode(value) {\n        if (this._fillMode === value) {\n            return;\n        }\n        this._fillMode = value;\n        this.markAsDirty(Material.MiscDirtyFlag);\n    }\n    /** @internal */\n    _getDrawWrapper() {\n        return this._drawWrapper;\n    }\n    /**\n     * @internal\n     */\n    _setDrawWrapper(drawWrapper) {\n        this._drawWrapper = drawWrapper;\n    }\n    /**\n     * Creates a material instance\n     * @param name defines the name of the material\n     * @param scene defines the scene to reference\n     * @param doNotAdd specifies if the material should be added to the scene\n     */\n    constructor(name, scene, doNotAdd) {\n        /**\n         * Custom shadow depth material to use for shadow rendering instead of the in-built one\n         */\n        this.shadowDepthWrapper = null;\n        /**\n         * Gets or sets a boolean indicating that the material is allowed (if supported) to do shader hot swapping.\n         * This means that the material can keep using a previous shader while a new one is being compiled.\n         * This is mostly used when shader parallel compilation is supported (true by default)\n         */\n        this.allowShaderHotSwapping = true;\n        /**\n         * Gets or sets user defined metadata\n         */\n        this.metadata = null;\n        /**\n         * For internal use only. Please do not use.\n         */\n        this.reservedDataStore = null;\n        /**\n         * Specifies if the ready state should be checked on each call\n         */\n        this.checkReadyOnEveryCall = false;\n        /**\n         * Specifies if the ready state should be checked once\n         */\n        this.checkReadyOnlyOnce = false;\n        /**\n         * The state of the material\n         */\n        this.state = \"\";\n        /**\n         * The alpha value of the material\n         */\n        this._alpha = 1.0;\n        /**\n         * Specifies if back face culling is enabled\n         */\n        this._backFaceCulling = true;\n        /**\n         * Specifies if back or front faces should be culled (when culling is enabled)\n         */\n        this._cullBackFaces = true;\n        this._blockDirtyMechanism = false;\n        /**\n         * Callback triggered when the material is compiled\n         */\n        this.onCompiled = null;\n        /**\n         * Callback triggered when an error occurs\n         */\n        this.onError = null;\n        /**\n         * Callback triggered to get the render target textures\n         */\n        this.getRenderTargetTextures = null;\n        /**\n         * Specifies if the material should be serialized\n         */\n        this.doNotSerialize = false;\n        /**\n         * @internal\n         */\n        this._storeEffectOnSubMeshes = false;\n        /**\n         * Stores the animations for the material\n         */\n        this.animations = null;\n        /**\n         * An event triggered when the material is disposed\n         */\n        this.onDisposeObservable = new Observable();\n        /**\n         * An observer which watches for dispose events\n         */\n        this._onDisposeObserver = null;\n        this._onUnBindObservable = null;\n        /**\n         * An observer which watches for bind events\n         */\n        this._onBindObserver = null;\n        /**\n         * Stores the value of the alpha mode\n         */\n        this._alphaMode = 2;\n        /**\n         * Stores the state of the need depth pre-pass value\n         */\n        this._needDepthPrePass = false;\n        /**\n         * Specifies if depth writing should be disabled\n         */\n        this.disableDepthWrite = false;\n        /**\n         * Specifies if color writing should be disabled\n         */\n        this.disableColorWrite = false;\n        /**\n         * Specifies if depth writing should be forced\n         */\n        this.forceDepthWrite = false;\n        /**\n         * Specifies the depth function that should be used. 0 means the default engine function\n         */\n        this.depthFunction = 0;\n        /**\n         * Specifies if there should be a separate pass for culling\n         */\n        this.separateCullingPass = false;\n        /**\n         * Stores the state specifying if fog should be enabled\n         */\n        this._fogEnabled = true;\n        /**\n         * Stores the size of points\n         */\n        this.pointSize = 1.0;\n        /**\n         * Stores the z offset Factor value\n         */\n        this.zOffset = 0;\n        /**\n         * Stores the z offset Units value\n         */\n        this.zOffsetUnits = 0;\n        /**\n         * Gives access to the stencil properties of the material\n         */\n        this.stencil = new MaterialStencilState();\n        /**\n         * Specifies if uniform buffers should be used\n         */\n        this._useUBO = false;\n        /**\n         * Stores the fill mode state\n         */\n        this._fillMode = Material.TriangleFillMode;\n        /**\n         * Specifies if the depth write state should be cached\n         */\n        this._cachedDepthWriteState = false;\n        /**\n         * Specifies if the color write state should be cached\n         */\n        this._cachedColorWriteState = false;\n        /**\n         * Specifies if the depth function state should be cached\n         */\n        this._cachedDepthFunctionState = 0;\n        /** @internal */\n        this._indexInSceneMaterialArray = -1;\n        /** @internal */\n        this.meshMap = null;\n        /** @internal */\n        this._parentContainer = null;\n        /** @internal */\n        this._uniformBufferLayoutBuilt = false;\n        this._eventInfo = {}; // will be initialized before each event notification\n        /** @internal */\n        this._callbackPluginEventGeneric = () => void 0;\n        /** @internal */\n        this._callbackPluginEventIsReadyForSubMesh = () => void 0;\n        /** @internal */\n        this._callbackPluginEventPrepareDefines = () => void 0;\n        /** @internal */\n        this._callbackPluginEventPrepareDefinesBeforeAttributes = () => void 0;\n        /** @internal */\n        this._callbackPluginEventHardBindForSubMesh = () => void 0;\n        /** @internal */\n        this._callbackPluginEventBindForSubMesh = () => void 0;\n        /** @internal */\n        this._callbackPluginEventHasRenderTargetTextures = () => void 0;\n        /** @internal */\n        this._callbackPluginEventFillRenderTargetTextures = () => void 0;\n        /**\n         * Enforces alpha test in opaque or blend mode in order to improve the performances of some situations.\n         */\n        this._forceAlphaTest = false;\n        /**\n         * The transparency mode of the material.\n         */\n        this._transparencyMode = null;\n        this.name = name;\n        const setScene = scene || EngineStore.LastCreatedScene;\n        if (!setScene) {\n            return;\n        }\n        this._scene = setScene;\n        this._dirtyCallbacks = {};\n        this._dirtyCallbacks[1] = this._markAllSubMeshesAsTexturesDirty.bind(this);\n        this._dirtyCallbacks[2] = this._markAllSubMeshesAsLightsDirty.bind(this);\n        this._dirtyCallbacks[4] = this._markAllSubMeshesAsFresnelDirty.bind(this);\n        this._dirtyCallbacks[8] = this._markAllSubMeshesAsAttributesDirty.bind(this);\n        this._dirtyCallbacks[16] = this._markAllSubMeshesAsMiscDirty.bind(this);\n        this._dirtyCallbacks[32] = this._markAllSubMeshesAsPrePassDirty.bind(this);\n        this._dirtyCallbacks[63] = this._markAllSubMeshesAsAllDirty.bind(this);\n        this.id = name || Tools.RandomId();\n        this.uniqueId = this._scene.getUniqueId();\n        this._materialContext = this._scene.getEngine().createMaterialContext();\n        this._drawWrapper = new DrawWrapper(this._scene.getEngine(), false);\n        this._drawWrapper.materialContext = this._materialContext;\n        if (this._scene.useRightHandedSystem) {\n            this.sideOrientation = Material.ClockWiseSideOrientation;\n        }\n        else {\n            this.sideOrientation = Material.CounterClockWiseSideOrientation;\n        }\n        this._uniformBuffer = new UniformBuffer(this._scene.getEngine(), undefined, undefined, name);\n        this._useUBO = this.getScene().getEngine().supportsUniformBuffers;\n        if (!doNotAdd) {\n            this._scene.addMaterial(this);\n        }\n        if (this._scene.useMaterialMeshMap) {\n            this.meshMap = {};\n        }\n        Material.OnEventObservable.notifyObservers(this, MaterialPluginEvent.Created);\n    }\n    /**\n     * Returns a string representation of the current material\n     * @param fullDetails defines a boolean indicating which levels of logging is desired\n     * @returns a string with material information\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    toString(fullDetails) {\n        const ret = \"Name: \" + this.name;\n        return ret;\n    }\n    /**\n     * Gets the class name of the material\n     * @returns a string with the class name of the material\n     */\n    getClassName() {\n        return \"Material\";\n    }\n    /** @internal */\n    get _isMaterial() {\n        return true;\n    }\n    /**\n     * Specifies if updates for the material been locked\n     */\n    get isFrozen() {\n        return this.checkReadyOnlyOnce;\n    }\n    /**\n     * Locks updates for the material\n     */\n    freeze() {\n        this.markDirty();\n        this.checkReadyOnlyOnce = true;\n    }\n    /**\n     * Unlocks updates for the material\n     */\n    unfreeze() {\n        this.markDirty();\n        this.checkReadyOnlyOnce = false;\n    }\n    /**\n     * Specifies if the material is ready to be used\n     * @param mesh defines the mesh to check\n     * @param useInstances specifies if instances should be used\n     * @returns a boolean indicating if the material is ready to be used\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isReady(mesh, useInstances) {\n        return true;\n    }\n    /**\n     * Specifies that the submesh is ready to be used\n     * @param mesh defines the mesh to check\n     * @param subMesh defines which submesh to check\n     * @param useInstances specifies that instances should be used\n     * @returns a boolean indicating that the submesh is ready or not\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isReadyForSubMesh(mesh, subMesh, useInstances) {\n        const defines = subMesh.materialDefines;\n        if (!defines) {\n            return false;\n        }\n        this._eventInfo.isReadyForSubMesh = true;\n        this._eventInfo.defines = defines;\n        this._callbackPluginEventIsReadyForSubMesh(this._eventInfo);\n        return this._eventInfo.isReadyForSubMesh;\n    }\n    /**\n     * Returns the material effect\n     * @returns the effect associated with the material\n     */\n    getEffect() {\n        return this._drawWrapper.effect;\n    }\n    /**\n     * Returns the current scene\n     * @returns a Scene\n     */\n    getScene() {\n        return this._scene;\n    }\n    /**\n     * Gets the current transparency mode.\n     */\n    get transparencyMode() {\n        return this._transparencyMode;\n    }\n    /**\n     * Sets the transparency mode of the material.\n     *\n     * | Value | Type                                | Description |\n     * | ----- | ----------------------------------- | ----------- |\n     * | 0     | OPAQUE                              |             |\n     * | 1     | ALPHATEST                           |             |\n     * | 2     | ALPHABLEND                          |             |\n     * | 3     | ALPHATESTANDBLEND                   |             |\n     *\n     */\n    set transparencyMode(value) {\n        if (this._transparencyMode === value) {\n            return;\n        }\n        this._transparencyMode = value;\n        this._forceAlphaTest = value === Material.MATERIAL_ALPHATESTANDBLEND;\n        this._markAllSubMeshesAsTexturesAndMiscDirty();\n    }\n    /**\n     * Returns true if alpha blending should be disabled.\n     */\n    get _disableAlphaBlending() {\n        return this._transparencyMode === Material.MATERIAL_OPAQUE || this._transparencyMode === Material.MATERIAL_ALPHATEST;\n    }\n    /**\n     * Specifies whether or not this material should be rendered in alpha blend mode.\n     * @returns a boolean specifying if alpha blending is needed\n     */\n    needAlphaBlending() {\n        if (this._disableAlphaBlending) {\n            return false;\n        }\n        return this.alpha < 1.0;\n    }\n    /**\n     * Specifies if the mesh will require alpha blending\n     * @param mesh defines the mesh to check\n     * @returns a boolean specifying if alpha blending is needed for the mesh\n     */\n    needAlphaBlendingForMesh(mesh) {\n        if (mesh.visibility < 1.0) {\n            return true;\n        }\n        if (this._disableAlphaBlending) {\n            return false;\n        }\n        return mesh.hasVertexAlpha || this.needAlphaBlending();\n    }\n    /**\n     * Specifies whether or not this material should be rendered in alpha test mode.\n     * @returns a boolean specifying if an alpha test is needed.\n     */\n    needAlphaTesting() {\n        if (this._forceAlphaTest) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Specifies if material alpha testing should be turned on for the mesh\n     * @param mesh defines the mesh to check\n     */\n    _shouldTurnAlphaTestOn(mesh) {\n        return !this.needAlphaBlendingForMesh(mesh) && this.needAlphaTesting();\n    }\n    /**\n     * Gets the texture used for the alpha test\n     * @returns the texture to use for alpha testing\n     */\n    getAlphaTestTexture() {\n        return null;\n    }\n    /**\n     * Marks the material to indicate that it needs to be re-calculated\n     * @param forceMaterialDirty - Forces the material to be marked as dirty for all components (same as this.markAsDirty(Material.AllDirtyFlag)). You should use this flag if the material is frozen and you want to force a recompilation.\n     */\n    markDirty(forceMaterialDirty = false) {\n        const meshes = this.getScene().meshes;\n        for (const mesh of meshes) {\n            if (!mesh.subMeshes) {\n                continue;\n            }\n            for (const subMesh of mesh.subMeshes) {\n                if (subMesh.getMaterial() !== this) {\n                    continue;\n                }\n                if (!subMesh.effect) {\n                    continue;\n                }\n                subMesh.effect._wasPreviouslyReady = false;\n                subMesh.effect._wasPreviouslyUsingInstances = null;\n                subMesh.effect._forceRebindOnNextCall = forceMaterialDirty;\n            }\n        }\n        if (forceMaterialDirty) {\n            this.markAsDirty(Material.AllDirtyFlag);\n        }\n    }\n    /**\n     * @internal\n     */\n    _preBind(effect, overrideOrientation = null) {\n        const engine = this._scene.getEngine();\n        const orientation = overrideOrientation == null ? this.sideOrientation : overrideOrientation;\n        const reverse = orientation === Material.ClockWiseSideOrientation;\n        engine.enableEffect(effect ? effect : this._getDrawWrapper());\n        engine.setState(this.backFaceCulling, this.zOffset, false, reverse, this._scene._mirroredCameraPosition ? !this.cullBackFaces : this.cullBackFaces, this.stencil, this.zOffsetUnits);\n        return reverse;\n    }\n    /**\n     * Binds the material to the mesh\n     * @param world defines the world transformation matrix\n     * @param mesh defines the mesh to bind the material to\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    bind(world, mesh) { }\n    /**\n     * Initializes the uniform buffer layout for the shader.\n     */\n    buildUniformLayout() {\n        const ubo = this._uniformBuffer;\n        this._eventInfo.ubo = ubo;\n        this._callbackPluginEventGeneric(MaterialPluginEvent.PrepareUniformBuffer, this._eventInfo);\n        ubo.create();\n        this._uniformBufferLayoutBuilt = true;\n    }\n    /**\n     * Binds the submesh to the material\n     * @param world defines the world transformation matrix\n     * @param mesh defines the mesh containing the submesh\n     * @param subMesh defines the submesh to bind the material to\n     */\n    bindForSubMesh(world, mesh, subMesh) {\n        const effect = subMesh.effect;\n        if (!effect) {\n            return;\n        }\n        this._eventInfo.subMesh = subMesh;\n        this._callbackPluginEventBindForSubMesh(this._eventInfo);\n        effect._forceRebindOnNextCall = false;\n    }\n    /**\n     * Binds the world matrix to the material\n     * @param world defines the world transformation matrix\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    bindOnlyWorldMatrix(world) { }\n    /**\n     * Binds the view matrix to the effect\n     * @param effect defines the effect to bind the view matrix to\n     */\n    bindView(effect) {\n        if (!this._useUBO) {\n            effect.setMatrix(\"view\", this.getScene().getViewMatrix());\n        }\n        else {\n            this._needToBindSceneUbo = true;\n        }\n    }\n    /**\n     * Binds the view projection and projection matrices to the effect\n     * @param effect defines the effect to bind the view projection and projection matrices to\n     */\n    bindViewProjection(effect) {\n        if (!this._useUBO) {\n            effect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\n            effect.setMatrix(\"projection\", this.getScene().getProjectionMatrix());\n        }\n        else {\n            this._needToBindSceneUbo = true;\n        }\n    }\n    /**\n     * Binds the view matrix to the effect\n     * @param effect defines the effect to bind the view matrix to\n     * @param variableName name of the shader variable that will hold the eye position\n     */\n    bindEyePosition(effect, variableName) {\n        if (!this._useUBO) {\n            this._scene.bindEyePosition(effect, variableName);\n        }\n        else {\n            this._needToBindSceneUbo = true;\n        }\n    }\n    /**\n     * Processes to execute after binding the material to a mesh\n     * @param mesh defines the rendered mesh\n     * @param effect\n     */\n    _afterBind(mesh, effect = null) {\n        this._scene._cachedMaterial = this;\n        if (this._needToBindSceneUbo) {\n            if (effect) {\n                this._needToBindSceneUbo = false;\n                MaterialHelper.BindSceneUniformBuffer(effect, this.getScene().getSceneUniformBuffer());\n                this._scene.finalizeSceneUbo();\n            }\n        }\n        if (mesh) {\n            this._scene._cachedVisibility = mesh.visibility;\n        }\n        else {\n            this._scene._cachedVisibility = 1;\n        }\n        if (this._onBindObservable && mesh) {\n            this._onBindObservable.notifyObservers(mesh);\n        }\n        if (this.disableDepthWrite) {\n            const engine = this._scene.getEngine();\n            this._cachedDepthWriteState = engine.getDepthWrite();\n            engine.setDepthWrite(false);\n        }\n        if (this.disableColorWrite) {\n            const engine = this._scene.getEngine();\n            this._cachedColorWriteState = engine.getColorWrite();\n            engine.setColorWrite(false);\n        }\n        if (this.depthFunction !== 0) {\n            const engine = this._scene.getEngine();\n            this._cachedDepthFunctionState = engine.getDepthFunction() || 0;\n            engine.setDepthFunction(this.depthFunction);\n        }\n    }\n    /**\n     * Unbinds the material from the mesh\n     */\n    unbind() {\n        if (this._onUnBindObservable) {\n            this._onUnBindObservable.notifyObservers(this);\n        }\n        if (this.depthFunction !== 0) {\n            const engine = this._scene.getEngine();\n            engine.setDepthFunction(this._cachedDepthFunctionState);\n        }\n        if (this.disableDepthWrite) {\n            const engine = this._scene.getEngine();\n            engine.setDepthWrite(this._cachedDepthWriteState);\n        }\n        if (this.disableColorWrite) {\n            const engine = this._scene.getEngine();\n            engine.setColorWrite(this._cachedColorWriteState);\n        }\n    }\n    /**\n     * Returns the animatable textures.\n     * @returns - Array of animatable textures.\n     */\n    getAnimatables() {\n        this._eventInfo.animatables = [];\n        this._callbackPluginEventGeneric(MaterialPluginEvent.GetAnimatables, this._eventInfo);\n        return this._eventInfo.animatables;\n    }\n    /**\n     * Gets the active textures from the material\n     * @returns an array of textures\n     */\n    getActiveTextures() {\n        this._eventInfo.activeTextures = [];\n        this._callbackPluginEventGeneric(MaterialPluginEvent.GetActiveTextures, this._eventInfo);\n        return this._eventInfo.activeTextures;\n    }\n    /**\n     * Specifies if the material uses a texture\n     * @param texture defines the texture to check against the material\n     * @returns a boolean specifying if the material uses the texture\n     */\n    hasTexture(texture) {\n        this._eventInfo.hasTexture = false;\n        this._eventInfo.texture = texture;\n        this._callbackPluginEventGeneric(MaterialPluginEvent.HasTexture, this._eventInfo);\n        return this._eventInfo.hasTexture;\n    }\n    /**\n     * Makes a duplicate of the material, and gives it a new name\n     * @param name defines the new name for the duplicated material\n     * @returns the cloned material\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    clone(name) {\n        return null;\n    }\n    /**\n     * Gets the meshes bound to the material\n     * @returns an array of meshes bound to the material\n     */\n    getBindedMeshes() {\n        if (this.meshMap) {\n            const result = new Array();\n            for (const meshId in this.meshMap) {\n                const mesh = this.meshMap[meshId];\n                if (mesh) {\n                    result.push(mesh);\n                }\n            }\n            return result;\n        }\n        else {\n            const meshes = this._scene.meshes;\n            return meshes.filter((mesh) => mesh.material === this);\n        }\n    }\n    /**\n     * Force shader compilation\n     * @param mesh defines the mesh associated with this material\n     * @param onCompiled defines a function to execute once the material is compiled\n     * @param options defines the options to configure the compilation\n     * @param onError defines a function to execute if the material fails compiling\n     */\n    forceCompilation(mesh, onCompiled, options, onError) {\n        const localOptions = {\n            clipPlane: false,\n            useInstances: false,\n            ...options,\n        };\n        const scene = this.getScene();\n        const currentHotSwapingState = this.allowShaderHotSwapping;\n        this.allowShaderHotSwapping = false; // Turned off to let us evaluate the real compilation state\n        const checkReady = () => {\n            if (!this._scene || !this._scene.getEngine()) {\n                return;\n            }\n            const clipPlaneState = scene.clipPlane;\n            if (localOptions.clipPlane) {\n                scene.clipPlane = new Plane(0, 0, 0, 1);\n            }\n            if (this._storeEffectOnSubMeshes) {\n                let allDone = true, lastError = null;\n                if (mesh.subMeshes) {\n                    const tempSubMesh = new SubMesh(0, 0, 0, 0, 0, mesh, undefined, false, false);\n                    if (tempSubMesh.materialDefines) {\n                        tempSubMesh.materialDefines._renderId = -1;\n                    }\n                    if (!this.isReadyForSubMesh(mesh, tempSubMesh, localOptions.useInstances)) {\n                        if (tempSubMesh.effect && tempSubMesh.effect.getCompilationError() && tempSubMesh.effect.allFallbacksProcessed()) {\n                            lastError = tempSubMesh.effect.getCompilationError();\n                        }\n                        else {\n                            allDone = false;\n                            setTimeout(checkReady, 16);\n                        }\n                    }\n                }\n                if (allDone) {\n                    this.allowShaderHotSwapping = currentHotSwapingState;\n                    if (lastError) {\n                        if (onError) {\n                            onError(lastError);\n                        }\n                    }\n                    if (onCompiled) {\n                        onCompiled(this);\n                    }\n                }\n            }\n            else {\n                if (this.isReady()) {\n                    this.allowShaderHotSwapping = currentHotSwapingState;\n                    if (onCompiled) {\n                        onCompiled(this);\n                    }\n                }\n                else {\n                    setTimeout(checkReady, 16);\n                }\n            }\n            if (localOptions.clipPlane) {\n                scene.clipPlane = clipPlaneState;\n            }\n        };\n        checkReady();\n    }\n    /**\n     * Force shader compilation\n     * @param mesh defines the mesh that will use this material\n     * @param options defines additional options for compiling the shaders\n     * @returns a promise that resolves when the compilation completes\n     */\n    forceCompilationAsync(mesh, options) {\n        return new Promise((resolve, reject) => {\n            this.forceCompilation(mesh, () => {\n                resolve();\n            }, options, (reason) => {\n                reject(reason);\n            });\n        });\n    }\n    /**\n     * Marks a define in the material to indicate that it needs to be re-computed\n     * @param flag defines a flag used to determine which parts of the material have to be marked as dirty\n     */\n    markAsDirty(flag) {\n        if (this.getScene().blockMaterialDirtyMechanism || this._blockDirtyMechanism) {\n            return;\n        }\n        Material._DirtyCallbackArray.length = 0;\n        if (flag & Material.TextureDirtyFlag) {\n            Material._DirtyCallbackArray.push(Material._TextureDirtyCallBack);\n        }\n        if (flag & Material.LightDirtyFlag) {\n            Material._DirtyCallbackArray.push(Material._LightsDirtyCallBack);\n        }\n        if (flag & Material.FresnelDirtyFlag) {\n            Material._DirtyCallbackArray.push(Material._FresnelDirtyCallBack);\n        }\n        if (flag & Material.AttributesDirtyFlag) {\n            Material._DirtyCallbackArray.push(Material._AttributeDirtyCallBack);\n        }\n        if (flag & Material.MiscDirtyFlag) {\n            Material._DirtyCallbackArray.push(Material._MiscDirtyCallBack);\n        }\n        if (flag & Material.PrePassDirtyFlag) {\n            Material._DirtyCallbackArray.push(Material._PrePassDirtyCallBack);\n        }\n        if (Material._DirtyCallbackArray.length) {\n            this._markAllSubMeshesAsDirty(Material._RunDirtyCallBacks);\n        }\n        this.getScene().resetCachedMaterial();\n    }\n    /**\n     * Resets the draw wrappers cache for all submeshes that are using this material\n     */\n    resetDrawCache() {\n        const meshes = this.getScene().meshes;\n        for (const mesh of meshes) {\n            if (!mesh.subMeshes) {\n                continue;\n            }\n            for (const subMesh of mesh.subMeshes) {\n                if (subMesh.getMaterial() !== this) {\n                    continue;\n                }\n                subMesh.resetDrawCache();\n            }\n        }\n    }\n    /**\n     * Marks all submeshes of a material to indicate that their material defines need to be re-calculated\n     * @param func defines a function which checks material defines against the submeshes\n     */\n    _markAllSubMeshesAsDirty(func) {\n        if (this.getScene().blockMaterialDirtyMechanism || this._blockDirtyMechanism) {\n            return;\n        }\n        const meshes = this.getScene().meshes;\n        for (const mesh of meshes) {\n            if (!mesh.subMeshes) {\n                continue;\n            }\n            for (const subMesh of mesh.subMeshes) {\n                // We want to skip the submeshes which are not using this material or which have not yet rendered at least once\n                if (subMesh.getMaterial(false) !== this) {\n                    continue;\n                }\n                for (const drawWrapper of subMesh._drawWrappers) {\n                    if (!drawWrapper || !drawWrapper.defines || !drawWrapper.defines.markAllAsDirty) {\n                        continue;\n                    }\n                    if (this._materialContext === drawWrapper.materialContext) {\n                        func(drawWrapper.defines);\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Indicates that the scene should check if the rendering now needs a prepass\n     */\n    _markScenePrePassDirty() {\n        if (this.getScene().blockMaterialDirtyMechanism || this._blockDirtyMechanism) {\n            return;\n        }\n        const prePassRenderer = this.getScene().enablePrePassRenderer();\n        if (prePassRenderer) {\n            prePassRenderer.markAsDirty();\n        }\n    }\n    /**\n     * Indicates that we need to re-calculated for all submeshes\n     */\n    _markAllSubMeshesAsAllDirty() {\n        this._markAllSubMeshesAsDirty(Material._AllDirtyCallBack);\n    }\n    /**\n     * Indicates that image processing needs to be re-calculated for all submeshes\n     */\n    _markAllSubMeshesAsImageProcessingDirty() {\n        this._markAllSubMeshesAsDirty(Material._ImageProcessingDirtyCallBack);\n    }\n    /**\n     * Indicates that textures need to be re-calculated for all submeshes\n     */\n    _markAllSubMeshesAsTexturesDirty() {\n        this._markAllSubMeshesAsDirty(Material._TextureDirtyCallBack);\n    }\n    /**\n     * Indicates that fresnel needs to be re-calculated for all submeshes\n     */\n    _markAllSubMeshesAsFresnelDirty() {\n        this._markAllSubMeshesAsDirty(Material._FresnelDirtyCallBack);\n    }\n    /**\n     * Indicates that fresnel and misc need to be re-calculated for all submeshes\n     */\n    _markAllSubMeshesAsFresnelAndMiscDirty() {\n        this._markAllSubMeshesAsDirty(Material._FresnelAndMiscDirtyCallBack);\n    }\n    /**\n     * Indicates that lights need to be re-calculated for all submeshes\n     */\n    _markAllSubMeshesAsLightsDirty() {\n        this._markAllSubMeshesAsDirty(Material._LightsDirtyCallBack);\n    }\n    /**\n     * Indicates that attributes need to be re-calculated for all submeshes\n     */\n    _markAllSubMeshesAsAttributesDirty() {\n        this._markAllSubMeshesAsDirty(Material._AttributeDirtyCallBack);\n    }\n    /**\n     * Indicates that misc needs to be re-calculated for all submeshes\n     */\n    _markAllSubMeshesAsMiscDirty() {\n        this._markAllSubMeshesAsDirty(Material._MiscDirtyCallBack);\n    }\n    /**\n     * Indicates that prepass needs to be re-calculated for all submeshes\n     */\n    _markAllSubMeshesAsPrePassDirty() {\n        this._markAllSubMeshesAsDirty(Material._MiscDirtyCallBack);\n    }\n    /**\n     * Indicates that textures and misc need to be re-calculated for all submeshes\n     */\n    _markAllSubMeshesAsTexturesAndMiscDirty() {\n        this._markAllSubMeshesAsDirty(Material._TextureAndMiscDirtyCallBack);\n    }\n    /**\n     * Sets the required values to the prepass renderer.\n     * @param prePassRenderer defines the prepass renderer to setup.\n     * @returns true if the pre pass is needed.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setPrePassRenderer(prePassRenderer) {\n        // Do Nothing by default\n        return false;\n    }\n    /**\n     * Disposes the material\n     * @param forceDisposeEffect specifies if effects should be forcefully disposed\n     * @param forceDisposeTextures specifies if textures should be forcefully disposed\n     * @param notBoundToMesh specifies if the material that is being disposed is known to be not bound to any mesh\n     */\n    dispose(forceDisposeEffect, forceDisposeTextures, notBoundToMesh) {\n        const scene = this.getScene();\n        // Animations\n        scene.stopAnimation(this);\n        scene.freeProcessedMaterials();\n        // Remove from scene\n        scene.removeMaterial(this);\n        this._eventInfo.forceDisposeTextures = forceDisposeTextures;\n        this._callbackPluginEventGeneric(MaterialPluginEvent.Disposed, this._eventInfo);\n        if (this._parentContainer) {\n            const index = this._parentContainer.materials.indexOf(this);\n            if (index > -1) {\n                this._parentContainer.materials.splice(index, 1);\n            }\n            this._parentContainer = null;\n        }\n        if (notBoundToMesh !== true) {\n            // Remove from meshes\n            if (this.meshMap) {\n                for (const meshId in this.meshMap) {\n                    const mesh = this.meshMap[meshId];\n                    if (mesh) {\n                        mesh.material = null; // will set the entry in the map to undefined\n                        this.releaseVertexArrayObject(mesh, forceDisposeEffect);\n                    }\n                }\n            }\n            else {\n                const meshes = scene.meshes;\n                for (const mesh of meshes) {\n                    if (mesh.material === this && !mesh.sourceMesh) {\n                        mesh.material = null;\n                        this.releaseVertexArrayObject(mesh, forceDisposeEffect);\n                    }\n                }\n            }\n        }\n        this._uniformBuffer.dispose();\n        // Shader are kept in cache for further use but we can get rid of this by using forceDisposeEffect\n        if (forceDisposeEffect && this._drawWrapper.effect) {\n            if (!this._storeEffectOnSubMeshes) {\n                this._drawWrapper.effect.dispose();\n            }\n            this._drawWrapper.effect = null;\n        }\n        this.metadata = null;\n        // Callback\n        this.onDisposeObservable.notifyObservers(this);\n        this.onDisposeObservable.clear();\n        if (this._onBindObservable) {\n            this._onBindObservable.clear();\n        }\n        if (this._onUnBindObservable) {\n            this._onUnBindObservable.clear();\n        }\n        if (this._onEffectCreatedObservable) {\n            this._onEffectCreatedObservable.clear();\n        }\n        if (this._eventInfo) {\n            this._eventInfo = {};\n        }\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    releaseVertexArrayObject(mesh, forceDisposeEffect) {\n        if (mesh.geometry) {\n            const geometry = mesh.geometry;\n            if (this._storeEffectOnSubMeshes) {\n                for (const subMesh of mesh.subMeshes) {\n                    geometry._releaseVertexArrayObject(subMesh.effect);\n                    if (forceDisposeEffect && subMesh.effect) {\n                        subMesh.effect.dispose();\n                    }\n                }\n            }\n            else {\n                geometry._releaseVertexArrayObject(this._drawWrapper.effect);\n            }\n        }\n    }\n    /**\n     * Serializes this material\n     * @returns the serialized material object\n     */\n    serialize() {\n        const serializationObject = SerializationHelper.Serialize(this);\n        serializationObject.stencil = this.stencil.serialize();\n        serializationObject.uniqueId = this.uniqueId;\n        return serializationObject;\n    }\n    /**\n     * Creates a material from parsed material data\n     * @param parsedMaterial defines parsed material data\n     * @param scene defines the hosting scene\n     * @param rootUrl defines the root URL to use to load textures\n     * @returns a new material\n     */\n    static Parse(parsedMaterial, scene, rootUrl) {\n        if (!parsedMaterial.customType) {\n            parsedMaterial.customType = \"BABYLON.StandardMaterial\";\n        }\n        else if (parsedMaterial.customType === \"BABYLON.PBRMaterial\" && parsedMaterial.overloadedAlbedo) {\n            parsedMaterial.customType = \"BABYLON.LegacyPBRMaterial\";\n            if (!BABYLON.LegacyPBRMaterial) {\n                Logger.Error(\"Your scene is trying to load a legacy version of the PBRMaterial, please, include it from the materials library.\");\n                return null;\n            }\n        }\n        const materialType = Tools.Instantiate(parsedMaterial.customType);\n        const material = materialType.Parse(parsedMaterial, scene, rootUrl);\n        material._loadedUniqueId = parsedMaterial.uniqueId;\n        return material;\n    }\n}\n/**\n * Returns the triangle fill mode\n */\nMaterial.TriangleFillMode = 0;\n/**\n * Returns the wireframe mode\n */\nMaterial.WireFrameFillMode = 1;\n/**\n * Returns the point fill mode\n */\nMaterial.PointFillMode = 2;\n/**\n * Returns the point list draw mode\n */\nMaterial.PointListDrawMode = 3;\n/**\n * Returns the line list draw mode\n */\nMaterial.LineListDrawMode = 4;\n/**\n * Returns the line loop draw mode\n */\nMaterial.LineLoopDrawMode = 5;\n/**\n * Returns the line strip draw mode\n */\nMaterial.LineStripDrawMode = 6;\n/**\n * Returns the triangle strip draw mode\n */\nMaterial.TriangleStripDrawMode = 7;\n/**\n * Returns the triangle fan draw mode\n */\nMaterial.TriangleFanDrawMode = 8;\n/**\n * Stores the clock-wise side orientation\n */\nMaterial.ClockWiseSideOrientation = 0;\n/**\n * Stores the counter clock-wise side orientation\n */\nMaterial.CounterClockWiseSideOrientation = 1;\n/**\n * The dirty texture flag value\n */\nMaterial.TextureDirtyFlag = 1;\n/**\n * The dirty light flag value\n */\nMaterial.LightDirtyFlag = 2;\n/**\n * The dirty fresnel flag value\n */\nMaterial.FresnelDirtyFlag = 4;\n/**\n * The dirty attribute flag value\n */\nMaterial.AttributesDirtyFlag = 8;\n/**\n * The dirty misc flag value\n */\nMaterial.MiscDirtyFlag = 16;\n/**\n * The dirty prepass flag value\n */\nMaterial.PrePassDirtyFlag = 32;\n/**\n * The all dirty flag value\n */\nMaterial.AllDirtyFlag = 63;\n/**\n * MaterialTransparencyMode: No transparency mode, Alpha channel is not use.\n */\nMaterial.MATERIAL_OPAQUE = 0;\n/**\n * MaterialTransparencyMode: Alpha Test mode, pixel are discarded below a certain threshold defined by the alpha cutoff value.\n */\nMaterial.MATERIAL_ALPHATEST = 1;\n/**\n * MaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\n */\nMaterial.MATERIAL_ALPHABLEND = 2;\n/**\n * MaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\n * They are also discarded below the alpha cutoff threshold to improve performances.\n */\nMaterial.MATERIAL_ALPHATESTANDBLEND = 3;\n/**\n * The Whiteout method is used to blend normals.\n * Details of the algorithm can be found here: https://blog.selfshadow.com/publications/blending-in-detail/\n */\nMaterial.MATERIAL_NORMALBLENDMETHOD_WHITEOUT = 0;\n/**\n * The Reoriented Normal Mapping method is used to blend normals.\n * Details of the algorithm can be found here: https://blog.selfshadow.com/publications/blending-in-detail/\n */\nMaterial.MATERIAL_NORMALBLENDMETHOD_RNM = 1;\n/**\n * Event observable which raises global events common to all materials (like MaterialPluginEvent.Created)\n */\nMaterial.OnEventObservable = new Observable();\nMaterial._AllDirtyCallBack = (defines) => defines.markAllAsDirty();\nMaterial._ImageProcessingDirtyCallBack = (defines) => defines.markAsImageProcessingDirty();\nMaterial._TextureDirtyCallBack = (defines) => defines.markAsTexturesDirty();\nMaterial._FresnelDirtyCallBack = (defines) => defines.markAsFresnelDirty();\nMaterial._MiscDirtyCallBack = (defines) => defines.markAsMiscDirty();\nMaterial._PrePassDirtyCallBack = (defines) => defines.markAsPrePassDirty();\nMaterial._LightsDirtyCallBack = (defines) => defines.markAsLightDirty();\nMaterial._AttributeDirtyCallBack = (defines) => defines.markAsAttributesDirty();\nMaterial._FresnelAndMiscDirtyCallBack = (defines) => {\n    Material._FresnelDirtyCallBack(defines);\n    Material._MiscDirtyCallBack(defines);\n};\nMaterial._TextureAndMiscDirtyCallBack = (defines) => {\n    Material._TextureDirtyCallBack(defines);\n    Material._MiscDirtyCallBack(defines);\n};\nMaterial._DirtyCallbackArray = [];\nMaterial._RunDirtyCallBacks = (defines) => {\n    for (const cb of Material._DirtyCallbackArray) {\n        cb(defines);\n    }\n};\n__decorate([\n    serialize()\n], Material.prototype, \"id\", void 0);\n__decorate([\n    serialize()\n], Material.prototype, \"uniqueId\", void 0);\n__decorate([\n    serialize()\n], Material.prototype, \"name\", void 0);\n__decorate([\n    serialize()\n], Material.prototype, \"metadata\", void 0);\n__decorate([\n    serialize()\n], Material.prototype, \"checkReadyOnEveryCall\", void 0);\n__decorate([\n    serialize()\n], Material.prototype, \"checkReadyOnlyOnce\", void 0);\n__decorate([\n    serialize()\n], Material.prototype, \"state\", void 0);\n__decorate([\n    serialize(\"alpha\")\n], Material.prototype, \"_alpha\", void 0);\n__decorate([\n    serialize(\"backFaceCulling\")\n], Material.prototype, \"_backFaceCulling\", void 0);\n__decorate([\n    serialize(\"cullBackFaces\")\n], Material.prototype, \"_cullBackFaces\", void 0);\n__decorate([\n    serialize()\n], Material.prototype, \"sideOrientation\", void 0);\n__decorate([\n    serialize(\"alphaMode\")\n], Material.prototype, \"_alphaMode\", void 0);\n__decorate([\n    serialize()\n], Material.prototype, \"_needDepthPrePass\", void 0);\n__decorate([\n    serialize()\n], Material.prototype, \"disableDepthWrite\", void 0);\n__decorate([\n    serialize()\n], Material.prototype, \"disableColorWrite\", void 0);\n__decorate([\n    serialize()\n], Material.prototype, \"forceDepthWrite\", void 0);\n__decorate([\n    serialize()\n], Material.prototype, \"depthFunction\", void 0);\n__decorate([\n    serialize()\n], Material.prototype, \"separateCullingPass\", void 0);\n__decorate([\n    serialize(\"fogEnabled\")\n], Material.prototype, \"_fogEnabled\", void 0);\n__decorate([\n    serialize()\n], Material.prototype, \"pointSize\", void 0);\n__decorate([\n    serialize()\n], Material.prototype, \"zOffset\", void 0);\n__decorate([\n    serialize()\n], Material.prototype, \"zOffsetUnits\", void 0);\n__decorate([\n    serialize()\n], Material.prototype, \"pointsCloud\", null);\n__decorate([\n    serialize()\n], Material.prototype, \"fillMode\", null);\n__decorate([\n    serialize()\n], Material.prototype, \"transparencyMode\", null);\n//# sourceMappingURL=material.js.map","/**\n * Manages the defines for the Material\n */\nexport class MaterialDefines {\n    /**\n     * Creates a new instance\n     * @param externalProperties list of external properties to inject into the object\n     */\n    constructor(externalProperties) {\n        /** @internal */\n        this._keys = [];\n        this._isDirty = true;\n        /** @internal */\n        this._areLightsDirty = true;\n        /** @internal */\n        this._areLightsDisposed = false;\n        /** @internal */\n        this._areAttributesDirty = true;\n        /** @internal */\n        this._areTexturesDirty = true;\n        /** @internal */\n        this._areFresnelDirty = true;\n        /** @internal */\n        this._areMiscDirty = true;\n        /** @internal */\n        this._arePrePassDirty = true;\n        /** @internal */\n        this._areImageProcessingDirty = true;\n        /** @internal */\n        this._normals = false;\n        /** @internal */\n        this._uvs = false;\n        /** @internal */\n        this._needNormals = false;\n        /** @internal */\n        this._needUVs = false;\n        this._externalProperties = externalProperties;\n        // Initialize External Properties\n        if (externalProperties) {\n            for (const prop in externalProperties) {\n                if (Object.prototype.hasOwnProperty.call(externalProperties, prop)) {\n                    this._setDefaultValue(prop);\n                }\n            }\n        }\n    }\n    /**\n     * Specifies if the material needs to be re-calculated\n     */\n    get isDirty() {\n        return this._isDirty;\n    }\n    /**\n     * Marks the material to indicate that it has been re-calculated\n     */\n    markAsProcessed() {\n        this._isDirty = false;\n        this._areAttributesDirty = false;\n        this._areTexturesDirty = false;\n        this._areFresnelDirty = false;\n        this._areLightsDirty = false;\n        this._areLightsDisposed = false;\n        this._areMiscDirty = false;\n        this._arePrePassDirty = false;\n        this._areImageProcessingDirty = false;\n    }\n    /**\n     * Marks the material to indicate that it needs to be re-calculated\n     */\n    markAsUnprocessed() {\n        this._isDirty = true;\n    }\n    /**\n     * Marks the material to indicate all of its defines need to be re-calculated\n     */\n    markAllAsDirty() {\n        this._areTexturesDirty = true;\n        this._areAttributesDirty = true;\n        this._areLightsDirty = true;\n        this._areFresnelDirty = true;\n        this._areMiscDirty = true;\n        this._areImageProcessingDirty = true;\n        this._isDirty = true;\n    }\n    /**\n     * Marks the material to indicate that image processing needs to be re-calculated\n     */\n    markAsImageProcessingDirty() {\n        this._areImageProcessingDirty = true;\n        this._isDirty = true;\n    }\n    /**\n     * Marks the material to indicate the lights need to be re-calculated\n     * @param disposed Defines whether the light is dirty due to dispose or not\n     */\n    markAsLightDirty(disposed = false) {\n        this._areLightsDirty = true;\n        this._areLightsDisposed = this._areLightsDisposed || disposed;\n        this._isDirty = true;\n    }\n    /**\n     * Marks the attribute state as changed\n     */\n    markAsAttributesDirty() {\n        this._areAttributesDirty = true;\n        this._isDirty = true;\n    }\n    /**\n     * Marks the texture state as changed\n     */\n    markAsTexturesDirty() {\n        this._areTexturesDirty = true;\n        this._isDirty = true;\n    }\n    /**\n     * Marks the fresnel state as changed\n     */\n    markAsFresnelDirty() {\n        this._areFresnelDirty = true;\n        this._isDirty = true;\n    }\n    /**\n     * Marks the misc state as changed\n     */\n    markAsMiscDirty() {\n        this._areMiscDirty = true;\n        this._isDirty = true;\n    }\n    /**\n     * Marks the prepass state as changed\n     */\n    markAsPrePassDirty() {\n        this._arePrePassDirty = true;\n        this._isDirty = true;\n    }\n    /**\n     * Rebuilds the material defines\n     */\n    rebuild() {\n        this._keys.length = 0;\n        for (const key of Object.keys(this)) {\n            if (key[0] === \"_\") {\n                continue;\n            }\n            this._keys.push(key);\n        }\n        if (this._externalProperties) {\n            for (const name in this._externalProperties) {\n                if (this._keys.indexOf(name) === -1) {\n                    this._keys.push(name);\n                }\n            }\n        }\n    }\n    /**\n     * Specifies if two material defines are equal\n     * @param other - A material define instance to compare to\n     * @returns - Boolean indicating if the material defines are equal (true) or not (false)\n     */\n    isEqual(other) {\n        if (this._keys.length !== other._keys.length) {\n            return false;\n        }\n        for (let index = 0; index < this._keys.length; index++) {\n            const prop = this._keys[index];\n            if (this[prop] !== other[prop]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Clones this instance's defines to another instance\n     * @param other - material defines to clone values to\n     */\n    cloneTo(other) {\n        if (this._keys.length !== other._keys.length) {\n            other._keys = this._keys.slice(0);\n        }\n        for (let index = 0; index < this._keys.length; index++) {\n            const prop = this._keys[index];\n            other[prop] = this[prop];\n        }\n    }\n    /**\n     * Resets the material define values\n     */\n    reset() {\n        this._keys.forEach((prop) => this._setDefaultValue(prop));\n    }\n    _setDefaultValue(prop) {\n        var _a, _b, _c, _d, _e;\n        const type = (_c = (_b = (_a = this._externalProperties) === null || _a === void 0 ? void 0 : _a[prop]) === null || _b === void 0 ? void 0 : _b.type) !== null && _c !== void 0 ? _c : typeof this[prop];\n        const defValue = (_e = (_d = this._externalProperties) === null || _d === void 0 ? void 0 : _d[prop]) === null || _e === void 0 ? void 0 : _e.default;\n        switch (type) {\n            case \"number\":\n                this[prop] = defValue !== null && defValue !== void 0 ? defValue : 0;\n                break;\n            case \"string\":\n                this[prop] = defValue !== null && defValue !== void 0 ? defValue : \"\";\n                break;\n            default:\n                this[prop] = defValue !== null && defValue !== void 0 ? defValue : false;\n                break;\n        }\n    }\n    /**\n     * Converts the material define values to a string\n     * @returns - String of material define information\n     */\n    toString() {\n        let result = \"\";\n        for (let index = 0; index < this._keys.length; index++) {\n            const prop = this._keys[index];\n            const value = this[prop];\n            const type = typeof value;\n            switch (type) {\n                case \"number\":\n                case \"string\":\n                    result += \"#define \" + prop + \" \" + value + \"\\n\";\n                    break;\n                default:\n                    if (value) {\n                        result += \"#define \" + prop + \"\\n\";\n                    }\n                    break;\n            }\n        }\n        return result;\n    }\n}\n//# sourceMappingURL=materialDefines.js.map","import { Engine } from \"../Engines/engine.js\";\n\n/**\n * This groups all the flags used to control the materials channel.\n */\nexport class MaterialFlags {\n    /**\n     * Are diffuse textures enabled in the application.\n     */\n    static get DiffuseTextureEnabled() {\n        return this._DiffuseTextureEnabled;\n    }\n    static set DiffuseTextureEnabled(value) {\n        if (this._DiffuseTextureEnabled === value) {\n            return;\n        }\n        this._DiffuseTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are detail textures enabled in the application.\n     */\n    static get DetailTextureEnabled() {\n        return this._DetailTextureEnabled;\n    }\n    static set DetailTextureEnabled(value) {\n        if (this._DetailTextureEnabled === value) {\n            return;\n        }\n        this._DetailTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are ambient textures enabled in the application.\n     */\n    static get AmbientTextureEnabled() {\n        return this._AmbientTextureEnabled;\n    }\n    static set AmbientTextureEnabled(value) {\n        if (this._AmbientTextureEnabled === value) {\n            return;\n        }\n        this._AmbientTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are opacity textures enabled in the application.\n     */\n    static get OpacityTextureEnabled() {\n        return this._OpacityTextureEnabled;\n    }\n    static set OpacityTextureEnabled(value) {\n        if (this._OpacityTextureEnabled === value) {\n            return;\n        }\n        this._OpacityTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are reflection textures enabled in the application.\n     */\n    static get ReflectionTextureEnabled() {\n        return this._ReflectionTextureEnabled;\n    }\n    static set ReflectionTextureEnabled(value) {\n        if (this._ReflectionTextureEnabled === value) {\n            return;\n        }\n        this._ReflectionTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are emissive textures enabled in the application.\n     */\n    static get EmissiveTextureEnabled() {\n        return this._EmissiveTextureEnabled;\n    }\n    static set EmissiveTextureEnabled(value) {\n        if (this._EmissiveTextureEnabled === value) {\n            return;\n        }\n        this._EmissiveTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are specular textures enabled in the application.\n     */\n    static get SpecularTextureEnabled() {\n        return this._SpecularTextureEnabled;\n    }\n    static set SpecularTextureEnabled(value) {\n        if (this._SpecularTextureEnabled === value) {\n            return;\n        }\n        this._SpecularTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are bump textures enabled in the application.\n     */\n    static get BumpTextureEnabled() {\n        return this._BumpTextureEnabled;\n    }\n    static set BumpTextureEnabled(value) {\n        if (this._BumpTextureEnabled === value) {\n            return;\n        }\n        this._BumpTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are lightmap textures enabled in the application.\n     */\n    static get LightmapTextureEnabled() {\n        return this._LightmapTextureEnabled;\n    }\n    static set LightmapTextureEnabled(value) {\n        if (this._LightmapTextureEnabled === value) {\n            return;\n        }\n        this._LightmapTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are refraction textures enabled in the application.\n     */\n    static get RefractionTextureEnabled() {\n        return this._RefractionTextureEnabled;\n    }\n    static set RefractionTextureEnabled(value) {\n        if (this._RefractionTextureEnabled === value) {\n            return;\n        }\n        this._RefractionTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are color grading textures enabled in the application.\n     */\n    static get ColorGradingTextureEnabled() {\n        return this._ColorGradingTextureEnabled;\n    }\n    static set ColorGradingTextureEnabled(value) {\n        if (this._ColorGradingTextureEnabled === value) {\n            return;\n        }\n        this._ColorGradingTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are fresnels enabled in the application.\n     */\n    static get FresnelEnabled() {\n        return this._FresnelEnabled;\n    }\n    static set FresnelEnabled(value) {\n        if (this._FresnelEnabled === value) {\n            return;\n        }\n        this._FresnelEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(4);\n    }\n    /**\n     * Are clear coat textures enabled in the application.\n     */\n    static get ClearCoatTextureEnabled() {\n        return this._ClearCoatTextureEnabled;\n    }\n    static set ClearCoatTextureEnabled(value) {\n        if (this._ClearCoatTextureEnabled === value) {\n            return;\n        }\n        this._ClearCoatTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are clear coat bump textures enabled in the application.\n     */\n    static get ClearCoatBumpTextureEnabled() {\n        return this._ClearCoatBumpTextureEnabled;\n    }\n    static set ClearCoatBumpTextureEnabled(value) {\n        if (this._ClearCoatBumpTextureEnabled === value) {\n            return;\n        }\n        this._ClearCoatBumpTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are clear coat tint textures enabled in the application.\n     */\n    static get ClearCoatTintTextureEnabled() {\n        return this._ClearCoatTintTextureEnabled;\n    }\n    static set ClearCoatTintTextureEnabled(value) {\n        if (this._ClearCoatTintTextureEnabled === value) {\n            return;\n        }\n        this._ClearCoatTintTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are sheen textures enabled in the application.\n     */\n    static get SheenTextureEnabled() {\n        return this._SheenTextureEnabled;\n    }\n    static set SheenTextureEnabled(value) {\n        if (this._SheenTextureEnabled === value) {\n            return;\n        }\n        this._SheenTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are anisotropic textures enabled in the application.\n     */\n    static get AnisotropicTextureEnabled() {\n        return this._AnisotropicTextureEnabled;\n    }\n    static set AnisotropicTextureEnabled(value) {\n        if (this._AnisotropicTextureEnabled === value) {\n            return;\n        }\n        this._AnisotropicTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are thickness textures enabled in the application.\n     */\n    static get ThicknessTextureEnabled() {\n        return this._ThicknessTextureEnabled;\n    }\n    static set ThicknessTextureEnabled(value) {\n        if (this._ThicknessTextureEnabled === value) {\n            return;\n        }\n        this._ThicknessTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are refraction intensity textures enabled in the application.\n     */\n    static get RefractionIntensityTextureEnabled() {\n        return this._ThicknessTextureEnabled;\n    }\n    static set RefractionIntensityTextureEnabled(value) {\n        if (this._RefractionIntensityTextureEnabled === value) {\n            return;\n        }\n        this._RefractionIntensityTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are translucency intensity textures enabled in the application.\n     */\n    static get TranslucencyIntensityTextureEnabled() {\n        return this._ThicknessTextureEnabled;\n    }\n    static set TranslucencyIntensityTextureEnabled(value) {\n        if (this._TranslucencyIntensityTextureEnabled === value) {\n            return;\n        }\n        this._TranslucencyIntensityTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are translucency intensity textures enabled in the application.\n     */\n    static get IridescenceTextureEnabled() {\n        return this._IridescenceTextureEnabled;\n    }\n    static set IridescenceTextureEnabled(value) {\n        if (this._IridescenceTextureEnabled === value) {\n            return;\n        }\n        this._IridescenceTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n}\n// Flags used to enable or disable a type of texture for all Standard Materials\nMaterialFlags._DiffuseTextureEnabled = true;\nMaterialFlags._DetailTextureEnabled = true;\nMaterialFlags._AmbientTextureEnabled = true;\nMaterialFlags._OpacityTextureEnabled = true;\nMaterialFlags._ReflectionTextureEnabled = true;\nMaterialFlags._EmissiveTextureEnabled = true;\nMaterialFlags._SpecularTextureEnabled = true;\nMaterialFlags._BumpTextureEnabled = true;\nMaterialFlags._LightmapTextureEnabled = true;\nMaterialFlags._RefractionTextureEnabled = true;\nMaterialFlags._ColorGradingTextureEnabled = true;\nMaterialFlags._FresnelEnabled = true;\nMaterialFlags._ClearCoatTextureEnabled = true;\nMaterialFlags._ClearCoatBumpTextureEnabled = true;\nMaterialFlags._ClearCoatTintTextureEnabled = true;\nMaterialFlags._SheenTextureEnabled = true;\nMaterialFlags._AnisotropicTextureEnabled = true;\nMaterialFlags._ThicknessTextureEnabled = true;\nMaterialFlags._RefractionIntensityTextureEnabled = true;\nMaterialFlags._TranslucencyIntensityTextureEnabled = true;\nMaterialFlags._IridescenceTextureEnabled = true;\n//# sourceMappingURL=materialFlags.js.map","import { Logger } from \"../Misc/logger.js\";\nimport { Camera } from \"../Cameras/camera.js\";\nimport { Scene } from \"../scene.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { LightConstants } from \"../Lights/lightConstants.js\";\n\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { prepareDefinesForClipPlanes } from \"./clipPlaneMaterialHelper.js\";\n/**\n * \"Static Class\" containing the most commonly used helper while dealing with material for rendering purpose.\n *\n * It contains the basic tools to help defining defines, binding uniform for the common part of the materials.\n *\n * This works by convention in BabylonJS but is meant to be use only with shader following the in place naming rules and conventions.\n */\nexport class MaterialHelper {\n    /**\n     * Binds the scene's uniform buffer to the effect.\n     * @param effect defines the effect to bind to the scene uniform buffer\n     * @param sceneUbo defines the uniform buffer storing scene data\n     */\n    static BindSceneUniformBuffer(effect, sceneUbo) {\n        sceneUbo.bindToEffect(effect, \"Scene\");\n    }\n    /**\n     * Helps preparing the defines values about the UVs in used in the effect.\n     * UVs are shared as much as we can across channels in the shaders.\n     * @param texture The texture we are preparing the UVs for\n     * @param defines The defines to update\n     * @param key The channel key \"diffuse\", \"specular\"... used in the shader\n     */\n    static PrepareDefinesForMergedUV(texture, defines, key) {\n        defines._needUVs = true;\n        defines[key] = true;\n        if (texture.optimizeUVAllocation && texture.getTextureMatrix().isIdentityAs3x2()) {\n            defines[key + \"DIRECTUV\"] = texture.coordinatesIndex + 1;\n            defines[\"MAINUV\" + (texture.coordinatesIndex + 1)] = true;\n        }\n        else {\n            defines[key + \"DIRECTUV\"] = 0;\n        }\n    }\n    /**\n     * Binds a texture matrix value to its corresponding uniform\n     * @param texture The texture to bind the matrix for\n     * @param uniformBuffer The uniform buffer receiving the data\n     * @param key The channel key \"diffuse\", \"specular\"... used in the shader\n     */\n    static BindTextureMatrix(texture, uniformBuffer, key) {\n        const matrix = texture.getTextureMatrix();\n        uniformBuffer.updateMatrix(key + \"Matrix\", matrix);\n    }\n    /**\n     * Gets the current status of the fog (should it be enabled?)\n     * @param mesh defines the mesh to evaluate for fog support\n     * @param scene defines the hosting scene\n     * @returns true if fog must be enabled\n     */\n    static GetFogState(mesh, scene) {\n        return scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE;\n    }\n    /**\n     * Helper used to prepare the list of defines associated with misc. values for shader compilation\n     * @param mesh defines the current mesh\n     * @param scene defines the current scene\n     * @param useLogarithmicDepth defines if logarithmic depth has to be turned on\n     * @param pointsCloud defines if point cloud rendering has to be turned on\n     * @param fogEnabled defines if fog has to be turned on\n     * @param alphaTest defines if alpha testing has to be turned on\n     * @param defines defines the current list of defines\n     */\n    static PrepareDefinesForMisc(mesh, scene, useLogarithmicDepth, pointsCloud, fogEnabled, alphaTest, defines) {\n        if (defines._areMiscDirty) {\n            defines[\"LOGARITHMICDEPTH\"] = useLogarithmicDepth;\n            defines[\"POINTSIZE\"] = pointsCloud;\n            defines[\"FOG\"] = fogEnabled && this.GetFogState(mesh, scene);\n            defines[\"NONUNIFORMSCALING\"] = mesh.nonUniformScaling;\n            defines[\"ALPHATEST\"] = alphaTest;\n        }\n    }\n    /**\n     * Helper used to prepare the defines relative to the active camera\n     * @param scene defines the current scene\n     * @param defines specifies the list of active defines\n     * @returns true if the defines have been updated, else false\n     */\n    static PrepareDefinesForCamera(scene, defines) {\n        let changed = false;\n        if (scene.activeCamera) {\n            const wasOrtho = defines[\"CAMERA_ORTHOGRAPHIC\"] ? 1 : 0;\n            const wasPersp = defines[\"CAMERA_PERSPECTIVE\"] ? 1 : 0;\n            const isOrtho = scene.activeCamera.mode === Camera.ORTHOGRAPHIC_CAMERA ? 1 : 0;\n            const isPersp = scene.activeCamera.mode === Camera.PERSPECTIVE_CAMERA ? 1 : 0;\n            if (wasOrtho ^ isOrtho || wasPersp ^ isPersp) {\n                defines[\"CAMERA_ORTHOGRAPHIC\"] = isOrtho === 1;\n                defines[\"CAMERA_PERSPECTIVE\"] = isPersp === 1;\n                changed = true;\n            }\n        }\n        return changed;\n    }\n    /**\n     * Helper used to prepare the list of defines associated with frame values for shader compilation\n     * @param scene defines the current scene\n     * @param engine defines the current engine\n     * @param material defines the material we are compiling the shader for\n     * @param defines specifies the list of active defines\n     * @param useInstances defines if instances have to be turned on\n     * @param useClipPlane defines if clip plane have to be turned on\n     * @param useThinInstances defines if thin instances have to be turned on\n     */\n    static PrepareDefinesForFrameBoundValues(scene, engine, material, defines, useInstances, useClipPlane = null, useThinInstances = false) {\n        let changed = MaterialHelper.PrepareDefinesForCamera(scene, defines);\n        if (useClipPlane !== false) {\n            changed = prepareDefinesForClipPlanes(material, scene, defines);\n        }\n        if (defines[\"DEPTHPREPASS\"] !== !engine.getColorWrite()) {\n            defines[\"DEPTHPREPASS\"] = !defines[\"DEPTHPREPASS\"];\n            changed = true;\n        }\n        if (defines[\"INSTANCES\"] !== useInstances) {\n            defines[\"INSTANCES\"] = useInstances;\n            changed = true;\n        }\n        if (defines[\"THIN_INSTANCES\"] !== useThinInstances) {\n            defines[\"THIN_INSTANCES\"] = useThinInstances;\n            changed = true;\n        }\n        if (changed) {\n            defines.markAsUnprocessed();\n        }\n    }\n    /**\n     * Prepares the defines for bones\n     * @param mesh The mesh containing the geometry data we will draw\n     * @param defines The defines to update\n     */\n    static PrepareDefinesForBones(mesh, defines) {\n        if (mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\n            defines[\"NUM_BONE_INFLUENCERS\"] = mesh.numBoneInfluencers;\n            const materialSupportsBoneTexture = defines[\"BONETEXTURE\"] !== undefined;\n            if (mesh.skeleton.isUsingTextureForMatrices && materialSupportsBoneTexture) {\n                defines[\"BONETEXTURE\"] = true;\n            }\n            else {\n                defines[\"BonesPerMesh\"] = mesh.skeleton.bones.length + 1;\n                defines[\"BONETEXTURE\"] = materialSupportsBoneTexture ? false : undefined;\n                const prePassRenderer = mesh.getScene().prePassRenderer;\n                if (prePassRenderer && prePassRenderer.enabled) {\n                    const nonExcluded = prePassRenderer.excludedSkinnedMesh.indexOf(mesh) === -1;\n                    defines[\"BONES_VELOCITY_ENABLED\"] = nonExcluded;\n                }\n            }\n        }\n        else {\n            defines[\"NUM_BONE_INFLUENCERS\"] = 0;\n            defines[\"BonesPerMesh\"] = 0;\n            if (defines[\"BONETEXTURE\"] !== undefined) {\n                defines[\"BONETEXTURE\"] = false;\n            }\n        }\n    }\n    /**\n     * Prepares the defines for morph targets\n     * @param mesh The mesh containing the geometry data we will draw\n     * @param defines The defines to update\n     */\n    static PrepareDefinesForMorphTargets(mesh, defines) {\n        const manager = mesh.morphTargetManager;\n        if (manager) {\n            defines[\"MORPHTARGETS_UV\"] = manager.supportsUVs && defines[\"UV1\"];\n            defines[\"MORPHTARGETS_TANGENT\"] = manager.supportsTangents && defines[\"TANGENT\"];\n            defines[\"MORPHTARGETS_NORMAL\"] = manager.supportsNormals && defines[\"NORMAL\"];\n            defines[\"MORPHTARGETS\"] = manager.numInfluencers > 0;\n            defines[\"NUM_MORPH_INFLUENCERS\"] = manager.numInfluencers;\n            defines[\"MORPHTARGETS_TEXTURE\"] = manager.isUsingTextureForTargets;\n        }\n        else {\n            defines[\"MORPHTARGETS_UV\"] = false;\n            defines[\"MORPHTARGETS_TANGENT\"] = false;\n            defines[\"MORPHTARGETS_NORMAL\"] = false;\n            defines[\"MORPHTARGETS\"] = false;\n            defines[\"NUM_MORPH_INFLUENCERS\"] = 0;\n        }\n    }\n    /**\n     * Prepares the defines for baked vertex animation\n     * @param mesh The mesh containing the geometry data we will draw\n     * @param defines The defines to update\n     */\n    static PrepareDefinesForBakedVertexAnimation(mesh, defines) {\n        const manager = mesh.bakedVertexAnimationManager;\n        defines[\"BAKED_VERTEX_ANIMATION_TEXTURE\"] = manager && manager.isEnabled ? true : false;\n    }\n    /**\n     * Prepares the defines used in the shader depending on the attributes data available in the mesh\n     * @param mesh The mesh containing the geometry data we will draw\n     * @param defines The defines to update\n     * @param useVertexColor Precise whether vertex colors should be used or not (override mesh info)\n     * @param useBones Precise whether bones should be used or not (override mesh info)\n     * @param useMorphTargets Precise whether morph targets should be used or not (override mesh info)\n     * @param useVertexAlpha Precise whether vertex alpha should be used or not (override mesh info)\n     * @param useBakedVertexAnimation Precise whether baked vertex animation should be used or not (override mesh info)\n     * @returns false if defines are considered not dirty and have not been checked\n     */\n    static PrepareDefinesForAttributes(mesh, defines, useVertexColor, useBones, useMorphTargets = false, useVertexAlpha = true, useBakedVertexAnimation = true) {\n        if (!defines._areAttributesDirty && defines._needNormals === defines._normals && defines._needUVs === defines._uvs) {\n            return false;\n        }\n        defines._normals = defines._needNormals;\n        defines._uvs = defines._needUVs;\n        defines[\"NORMAL\"] = defines._needNormals && mesh.isVerticesDataPresent(VertexBuffer.NormalKind);\n        if (defines._needNormals && mesh.isVerticesDataPresent(VertexBuffer.TangentKind)) {\n            defines[\"TANGENT\"] = true;\n        }\n        for (let i = 1; i <= 6; ++i) {\n            defines[\"UV\" + i] = defines._needUVs ? mesh.isVerticesDataPresent(`uv${i === 1 ? \"\" : i}`) : false;\n        }\n        if (useVertexColor) {\n            const hasVertexColors = mesh.useVertexColors && mesh.isVerticesDataPresent(VertexBuffer.ColorKind);\n            defines[\"VERTEXCOLOR\"] = hasVertexColors;\n            defines[\"VERTEXALPHA\"] = mesh.hasVertexAlpha && hasVertexColors && useVertexAlpha;\n        }\n        if (mesh.isVerticesDataPresent(VertexBuffer.ColorInstanceKind) && (mesh.hasInstances || mesh.hasThinInstances)) {\n            defines[\"INSTANCESCOLOR\"] = true;\n        }\n        if (useBones) {\n            this.PrepareDefinesForBones(mesh, defines);\n        }\n        if (useMorphTargets) {\n            this.PrepareDefinesForMorphTargets(mesh, defines);\n        }\n        if (useBakedVertexAnimation) {\n            this.PrepareDefinesForBakedVertexAnimation(mesh, defines);\n        }\n        return true;\n    }\n    /**\n     * Prepares the defines related to multiview\n     * @param scene The scene we are intending to draw\n     * @param defines The defines to update\n     */\n    static PrepareDefinesForMultiview(scene, defines) {\n        if (scene.activeCamera) {\n            const previousMultiview = defines.MULTIVIEW;\n            defines.MULTIVIEW = scene.activeCamera.outputRenderTarget !== null && scene.activeCamera.outputRenderTarget.getViewCount() > 1;\n            if (defines.MULTIVIEW != previousMultiview) {\n                defines.markAsUnprocessed();\n            }\n        }\n    }\n    /**\n     * Prepares the defines related to order independant transparency\n     * @param scene The scene we are intending to draw\n     * @param defines The defines to update\n     * @param needAlphaBlending Determines if the material needs alpha blending\n     */\n    static PrepareDefinesForOIT(scene, defines, needAlphaBlending) {\n        const previousDefine = defines.ORDER_INDEPENDENT_TRANSPARENCY;\n        const previousDefine16Bits = defines.ORDER_INDEPENDENT_TRANSPARENCY_16BITS;\n        defines.ORDER_INDEPENDENT_TRANSPARENCY = scene.useOrderIndependentTransparency && needAlphaBlending;\n        defines.ORDER_INDEPENDENT_TRANSPARENCY_16BITS = !scene.getEngine().getCaps().textureFloatLinearFiltering;\n        if (previousDefine !== defines.ORDER_INDEPENDENT_TRANSPARENCY || previousDefine16Bits !== defines.ORDER_INDEPENDENT_TRANSPARENCY_16BITS) {\n            defines.markAsUnprocessed();\n        }\n    }\n    /**\n     * Prepares the defines related to the prepass\n     * @param scene The scene we are intending to draw\n     * @param defines The defines to update\n     * @param canRenderToMRT Indicates if this material renders to several textures in the prepass\n     */\n    static PrepareDefinesForPrePass(scene, defines, canRenderToMRT) {\n        const previousPrePass = defines.PREPASS;\n        if (!defines._arePrePassDirty) {\n            return;\n        }\n        const texturesList = [\n            {\n                type: 1,\n                define: \"PREPASS_POSITION\",\n                index: \"PREPASS_POSITION_INDEX\",\n            },\n            {\n                type: 2,\n                define: \"PREPASS_VELOCITY\",\n                index: \"PREPASS_VELOCITY_INDEX\",\n            },\n            {\n                type: 3,\n                define: \"PREPASS_REFLECTIVITY\",\n                index: \"PREPASS_REFLECTIVITY_INDEX\",\n            },\n            {\n                type: 0,\n                define: \"PREPASS_IRRADIANCE\",\n                index: \"PREPASS_IRRADIANCE_INDEX\",\n            },\n            {\n                type: 7,\n                define: \"PREPASS_ALBEDO_SQRT\",\n                index: \"PREPASS_ALBEDO_SQRT_INDEX\",\n            },\n            {\n                type: 5,\n                define: \"PREPASS_DEPTH\",\n                index: \"PREPASS_DEPTH_INDEX\",\n            },\n            {\n                type: 6,\n                define: \"PREPASS_NORMAL\",\n                index: \"PREPASS_NORMAL_INDEX\",\n            },\n        ];\n        if (scene.prePassRenderer && scene.prePassRenderer.enabled && canRenderToMRT) {\n            defines.PREPASS = true;\n            defines.SCENE_MRT_COUNT = scene.prePassRenderer.mrtCount;\n            for (let i = 0; i < texturesList.length; i++) {\n                const index = scene.prePassRenderer.getIndex(texturesList[i].type);\n                if (index !== -1) {\n                    defines[texturesList[i].define] = true;\n                    defines[texturesList[i].index] = index;\n                }\n                else {\n                    defines[texturesList[i].define] = false;\n                }\n            }\n        }\n        else {\n            defines.PREPASS = false;\n            for (let i = 0; i < texturesList.length; i++) {\n                defines[texturesList[i].define] = false;\n            }\n        }\n        if (defines.PREPASS != previousPrePass) {\n            defines.markAsUnprocessed();\n            defines.markAsImageProcessingDirty();\n        }\n    }\n    /**\n     * Prepares the defines related to the light information passed in parameter\n     * @param scene The scene we are intending to draw\n     * @param mesh The mesh the effect is compiling for\n     * @param light The light the effect is compiling for\n     * @param lightIndex The index of the light\n     * @param defines The defines to update\n     * @param specularSupported Specifies whether specular is supported or not (override lights data)\n     * @param state Defines the current state regarding what is needed (normals, etc...)\n     * @param state.needNormals\n     * @param state.needRebuild\n     * @param state.shadowEnabled\n     * @param state.specularEnabled\n     * @param state.lightmapMode\n     */\n    static PrepareDefinesForLight(scene, mesh, light, lightIndex, defines, specularSupported, state) {\n        var _a;\n        state.needNormals = true;\n        if (defines[\"LIGHT\" + lightIndex] === undefined) {\n            state.needRebuild = true;\n        }\n        defines[\"LIGHT\" + lightIndex] = true;\n        defines[\"SPOTLIGHT\" + lightIndex] = false;\n        defines[\"HEMILIGHT\" + lightIndex] = false;\n        defines[\"POINTLIGHT\" + lightIndex] = false;\n        defines[\"DIRLIGHT\" + lightIndex] = false;\n        light.prepareLightSpecificDefines(defines, lightIndex);\n        // FallOff.\n        defines[\"LIGHT_FALLOFF_PHYSICAL\" + lightIndex] = false;\n        defines[\"LIGHT_FALLOFF_GLTF\" + lightIndex] = false;\n        defines[\"LIGHT_FALLOFF_STANDARD\" + lightIndex] = false;\n        switch (light.falloffType) {\n            case LightConstants.FALLOFF_GLTF:\n                defines[\"LIGHT_FALLOFF_GLTF\" + lightIndex] = true;\n                break;\n            case LightConstants.FALLOFF_PHYSICAL:\n                defines[\"LIGHT_FALLOFF_PHYSICAL\" + lightIndex] = true;\n                break;\n            case LightConstants.FALLOFF_STANDARD:\n                defines[\"LIGHT_FALLOFF_STANDARD\" + lightIndex] = true;\n                break;\n        }\n        // Specular\n        if (specularSupported && !light.specular.equalsFloats(0, 0, 0)) {\n            state.specularEnabled = true;\n        }\n        // Shadows\n        defines[\"SHADOW\" + lightIndex] = false;\n        defines[\"SHADOWCSM\" + lightIndex] = false;\n        defines[\"SHADOWCSMDEBUG\" + lightIndex] = false;\n        defines[\"SHADOWCSMNUM_CASCADES\" + lightIndex] = false;\n        defines[\"SHADOWCSMUSESHADOWMAXZ\" + lightIndex] = false;\n        defines[\"SHADOWCSMNOBLEND\" + lightIndex] = false;\n        defines[\"SHADOWCSM_RIGHTHANDED\" + lightIndex] = false;\n        defines[\"SHADOWPCF\" + lightIndex] = false;\n        defines[\"SHADOWPCSS\" + lightIndex] = false;\n        defines[\"SHADOWPOISSON\" + lightIndex] = false;\n        defines[\"SHADOWESM\" + lightIndex] = false;\n        defines[\"SHADOWCLOSEESM\" + lightIndex] = false;\n        defines[\"SHADOWCUBE\" + lightIndex] = false;\n        defines[\"SHADOWLOWQUALITY\" + lightIndex] = false;\n        defines[\"SHADOWMEDIUMQUALITY\" + lightIndex] = false;\n        if (mesh && mesh.receiveShadows && scene.shadowsEnabled && light.shadowEnabled) {\n            const shadowGenerator = (_a = light.getShadowGenerator(scene.activeCamera)) !== null && _a !== void 0 ? _a : light.getShadowGenerator();\n            if (shadowGenerator) {\n                const shadowMap = shadowGenerator.getShadowMap();\n                if (shadowMap) {\n                    if (shadowMap.renderList && shadowMap.renderList.length > 0) {\n                        state.shadowEnabled = true;\n                        shadowGenerator.prepareDefines(defines, lightIndex);\n                    }\n                }\n            }\n        }\n        if (light.lightmapMode != LightConstants.LIGHTMAP_DEFAULT) {\n            state.lightmapMode = true;\n            defines[\"LIGHTMAPEXCLUDED\" + lightIndex] = true;\n            defines[\"LIGHTMAPNOSPECULAR\" + lightIndex] = light.lightmapMode == LightConstants.LIGHTMAP_SHADOWSONLY;\n        }\n        else {\n            defines[\"LIGHTMAPEXCLUDED\" + lightIndex] = false;\n            defines[\"LIGHTMAPNOSPECULAR\" + lightIndex] = false;\n        }\n    }\n    /**\n     * Prepares the defines related to the light information passed in parameter\n     * @param scene The scene we are intending to draw\n     * @param mesh The mesh the effect is compiling for\n     * @param defines The defines to update\n     * @param specularSupported Specifies whether specular is supported or not (override lights data)\n     * @param maxSimultaneousLights Specifies how manuy lights can be added to the effect at max\n     * @param disableLighting Specifies whether the lighting is disabled (override scene and light)\n     * @returns true if normals will be required for the rest of the effect\n     */\n    static PrepareDefinesForLights(scene, mesh, defines, specularSupported, maxSimultaneousLights = 4, disableLighting = false) {\n        if (!defines._areLightsDirty) {\n            return defines._needNormals;\n        }\n        let lightIndex = 0;\n        const state = {\n            needNormals: defines._needNormals,\n            needRebuild: false,\n            lightmapMode: false,\n            shadowEnabled: false,\n            specularEnabled: false,\n        };\n        if (scene.lightsEnabled && !disableLighting) {\n            for (const light of mesh.lightSources) {\n                this.PrepareDefinesForLight(scene, mesh, light, lightIndex, defines, specularSupported, state);\n                lightIndex++;\n                if (lightIndex === maxSimultaneousLights) {\n                    break;\n                }\n            }\n        }\n        defines[\"SPECULARTERM\"] = state.specularEnabled;\n        defines[\"SHADOWS\"] = state.shadowEnabled;\n        // Resetting all other lights if any\n        for (let index = lightIndex; index < maxSimultaneousLights; index++) {\n            if (defines[\"LIGHT\" + index] !== undefined) {\n                defines[\"LIGHT\" + index] = false;\n                defines[\"HEMILIGHT\" + index] = false;\n                defines[\"POINTLIGHT\" + index] = false;\n                defines[\"DIRLIGHT\" + index] = false;\n                defines[\"SPOTLIGHT\" + index] = false;\n                defines[\"SHADOW\" + index] = false;\n                defines[\"SHADOWCSM\" + index] = false;\n                defines[\"SHADOWCSMDEBUG\" + index] = false;\n                defines[\"SHADOWCSMNUM_CASCADES\" + index] = false;\n                defines[\"SHADOWCSMUSESHADOWMAXZ\" + index] = false;\n                defines[\"SHADOWCSMNOBLEND\" + index] = false;\n                defines[\"SHADOWCSM_RIGHTHANDED\" + index] = false;\n                defines[\"SHADOWPCF\" + index] = false;\n                defines[\"SHADOWPCSS\" + index] = false;\n                defines[\"SHADOWPOISSON\" + index] = false;\n                defines[\"SHADOWESM\" + index] = false;\n                defines[\"SHADOWCLOSEESM\" + index] = false;\n                defines[\"SHADOWCUBE\" + index] = false;\n                defines[\"SHADOWLOWQUALITY\" + index] = false;\n                defines[\"SHADOWMEDIUMQUALITY\" + index] = false;\n            }\n        }\n        const caps = scene.getEngine().getCaps();\n        if (defines[\"SHADOWFLOAT\"] === undefined) {\n            state.needRebuild = true;\n        }\n        defines[\"SHADOWFLOAT\"] =\n            state.shadowEnabled && ((caps.textureFloatRender && caps.textureFloatLinearFiltering) || (caps.textureHalfFloatRender && caps.textureHalfFloatLinearFiltering));\n        defines[\"LIGHTMAPEXCLUDED\"] = state.lightmapMode;\n        if (state.needRebuild) {\n            defines.rebuild();\n        }\n        return state.needNormals;\n    }\n    /**\n     * Prepares the uniforms and samplers list to be used in the effect (for a specific light)\n     * @param lightIndex defines the light index\n     * @param uniformsList The uniform list\n     * @param samplersList The sampler list\n     * @param projectedLightTexture defines if projected texture must be used\n     * @param uniformBuffersList defines an optional list of uniform buffers\n     * @param updateOnlyBuffersList True to only update the uniformBuffersList array\n     */\n    static PrepareUniformsAndSamplersForLight(lightIndex, uniformsList, samplersList, projectedLightTexture, uniformBuffersList = null, updateOnlyBuffersList = false) {\n        if (uniformBuffersList) {\n            uniformBuffersList.push(\"Light\" + lightIndex);\n        }\n        if (updateOnlyBuffersList) {\n            return;\n        }\n        uniformsList.push(\"vLightData\" + lightIndex, \"vLightDiffuse\" + lightIndex, \"vLightSpecular\" + lightIndex, \"vLightDirection\" + lightIndex, \"vLightFalloff\" + lightIndex, \"vLightGround\" + lightIndex, \"lightMatrix\" + lightIndex, \"shadowsInfo\" + lightIndex, \"depthValues\" + lightIndex);\n        samplersList.push(\"shadowSampler\" + lightIndex);\n        samplersList.push(\"depthSampler\" + lightIndex);\n        uniformsList.push(\"viewFrustumZ\" + lightIndex, \"cascadeBlendFactor\" + lightIndex, \"lightSizeUVCorrection\" + lightIndex, \"depthCorrection\" + lightIndex, \"penumbraDarkness\" + lightIndex, \"frustumLengths\" + lightIndex);\n        if (projectedLightTexture) {\n            samplersList.push(\"projectionLightSampler\" + lightIndex);\n            uniformsList.push(\"textureProjectionMatrix\" + lightIndex);\n        }\n    }\n    /**\n     * Prepares the uniforms and samplers list to be used in the effect\n     * @param uniformsListOrOptions The uniform names to prepare or an EffectCreationOptions containing the list and extra information\n     * @param samplersList The sampler list\n     * @param defines The defines helping in the list generation\n     * @param maxSimultaneousLights The maximum number of simultaneous light allowed in the effect\n     */\n    static PrepareUniformsAndSamplersList(uniformsListOrOptions, samplersList, defines, maxSimultaneousLights = 4) {\n        let uniformsList;\n        let uniformBuffersList = null;\n        if (uniformsListOrOptions.uniformsNames) {\n            const options = uniformsListOrOptions;\n            uniformsList = options.uniformsNames;\n            uniformBuffersList = options.uniformBuffersNames;\n            samplersList = options.samplers;\n            defines = options.defines;\n            maxSimultaneousLights = options.maxSimultaneousLights || 0;\n        }\n        else {\n            uniformsList = uniformsListOrOptions;\n            if (!samplersList) {\n                samplersList = [];\n            }\n        }\n        for (let lightIndex = 0; lightIndex < maxSimultaneousLights; lightIndex++) {\n            if (!defines[\"LIGHT\" + lightIndex]) {\n                break;\n            }\n            this.PrepareUniformsAndSamplersForLight(lightIndex, uniformsList, samplersList, defines[\"PROJECTEDLIGHTTEXTURE\" + lightIndex], uniformBuffersList);\n        }\n        if (defines[\"NUM_MORPH_INFLUENCERS\"]) {\n            uniformsList.push(\"morphTargetInfluences\");\n        }\n        if (defines[\"BAKED_VERTEX_ANIMATION_TEXTURE\"]) {\n            uniformsList.push(\"bakedVertexAnimationSettings\");\n            uniformsList.push(\"bakedVertexAnimationTextureSizeInverted\");\n            uniformsList.push(\"bakedVertexAnimationTime\");\n            samplersList.push(\"bakedVertexAnimationTexture\");\n        }\n    }\n    /**\n     * This helps decreasing rank by rank the shadow quality (0 being the highest rank and quality)\n     * @param defines The defines to update while falling back\n     * @param fallbacks The authorized effect fallbacks\n     * @param maxSimultaneousLights The maximum number of lights allowed\n     * @param rank the current rank of the Effect\n     * @returns The newly affected rank\n     */\n    static HandleFallbacksForShadows(defines, fallbacks, maxSimultaneousLights = 4, rank = 0) {\n        let lightFallbackRank = 0;\n        for (let lightIndex = 0; lightIndex < maxSimultaneousLights; lightIndex++) {\n            if (!defines[\"LIGHT\" + lightIndex]) {\n                break;\n            }\n            if (lightIndex > 0) {\n                lightFallbackRank = rank + lightIndex;\n                fallbacks.addFallback(lightFallbackRank, \"LIGHT\" + lightIndex);\n            }\n            if (!defines[\"SHADOWS\"]) {\n                if (defines[\"SHADOW\" + lightIndex]) {\n                    fallbacks.addFallback(rank, \"SHADOW\" + lightIndex);\n                }\n                if (defines[\"SHADOWPCF\" + lightIndex]) {\n                    fallbacks.addFallback(rank, \"SHADOWPCF\" + lightIndex);\n                }\n                if (defines[\"SHADOWPCSS\" + lightIndex]) {\n                    fallbacks.addFallback(rank, \"SHADOWPCSS\" + lightIndex);\n                }\n                if (defines[\"SHADOWPOISSON\" + lightIndex]) {\n                    fallbacks.addFallback(rank, \"SHADOWPOISSON\" + lightIndex);\n                }\n                if (defines[\"SHADOWESM\" + lightIndex]) {\n                    fallbacks.addFallback(rank, \"SHADOWESM\" + lightIndex);\n                }\n                if (defines[\"SHADOWCLOSEESM\" + lightIndex]) {\n                    fallbacks.addFallback(rank, \"SHADOWCLOSEESM\" + lightIndex);\n                }\n            }\n        }\n        return lightFallbackRank++;\n    }\n    /**\n     * Prepares the list of attributes required for morph targets according to the effect defines.\n     * @param attribs The current list of supported attribs\n     * @param mesh The mesh to prepare the morph targets attributes for\n     * @param influencers The number of influencers\n     */\n    static PrepareAttributesForMorphTargetsInfluencers(attribs, mesh, influencers) {\n        this._TmpMorphInfluencers.NUM_MORPH_INFLUENCERS = influencers;\n        this.PrepareAttributesForMorphTargets(attribs, mesh, this._TmpMorphInfluencers);\n    }\n    /**\n     * Prepares the list of attributes required for morph targets according to the effect defines.\n     * @param attribs The current list of supported attribs\n     * @param mesh The mesh to prepare the morph targets attributes for\n     * @param defines The current Defines of the effect\n     */\n    static PrepareAttributesForMorphTargets(attribs, mesh, defines) {\n        const influencers = defines[\"NUM_MORPH_INFLUENCERS\"];\n        if (influencers > 0 && EngineStore.LastCreatedEngine) {\n            const maxAttributesCount = EngineStore.LastCreatedEngine.getCaps().maxVertexAttribs;\n            const manager = mesh.morphTargetManager;\n            if (manager === null || manager === void 0 ? void 0 : manager.isUsingTextureForTargets) {\n                return;\n            }\n            const normal = manager && manager.supportsNormals && defines[\"NORMAL\"];\n            const tangent = manager && manager.supportsTangents && defines[\"TANGENT\"];\n            const uv = manager && manager.supportsUVs && defines[\"UV1\"];\n            for (let index = 0; index < influencers; index++) {\n                attribs.push(VertexBuffer.PositionKind + index);\n                if (normal) {\n                    attribs.push(VertexBuffer.NormalKind + index);\n                }\n                if (tangent) {\n                    attribs.push(VertexBuffer.TangentKind + index);\n                }\n                if (uv) {\n                    attribs.push(VertexBuffer.UVKind + \"_\" + index);\n                }\n                if (attribs.length > maxAttributesCount) {\n                    Logger.Error(\"Cannot add more vertex attributes for mesh \" + mesh.name);\n                }\n            }\n        }\n    }\n    /**\n     * Prepares the list of attributes required for baked vertex animations according to the effect defines.\n     * @param attribs The current list of supported attribs\n     * @param mesh The mesh to prepare the morph targets attributes for\n     * @param defines The current Defines of the effect\n     */\n    static PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines) {\n        const enabled = defines[\"BAKED_VERTEX_ANIMATION_TEXTURE\"] && defines[\"INSTANCES\"];\n        if (enabled) {\n            attribs.push(\"bakedVertexAnimationSettingsInstanced\");\n        }\n    }\n    /**\n     * Prepares the list of attributes required for bones according to the effect defines.\n     * @param attribs The current list of supported attribs\n     * @param mesh The mesh to prepare the bones attributes for\n     * @param defines The current Defines of the effect\n     * @param fallbacks The current effect fallback strategy\n     */\n    static PrepareAttributesForBones(attribs, mesh, defines, fallbacks) {\n        if (defines[\"NUM_BONE_INFLUENCERS\"] > 0) {\n            fallbacks.addCPUSkinningFallback(0, mesh);\n            attribs.push(VertexBuffer.MatricesIndicesKind);\n            attribs.push(VertexBuffer.MatricesWeightsKind);\n            if (defines[\"NUM_BONE_INFLUENCERS\"] > 4) {\n                attribs.push(VertexBuffer.MatricesIndicesExtraKind);\n                attribs.push(VertexBuffer.MatricesWeightsExtraKind);\n            }\n        }\n    }\n    /**\n     * Check and prepare the list of attributes required for instances according to the effect defines.\n     * @param attribs The current list of supported attribs\n     * @param defines The current MaterialDefines of the effect\n     */\n    static PrepareAttributesForInstances(attribs, defines) {\n        if (defines[\"INSTANCES\"] || defines[\"THIN_INSTANCES\"]) {\n            this.PushAttributesForInstances(attribs, !!defines[\"PREPASS_VELOCITY\"]);\n        }\n        if (defines.INSTANCESCOLOR) {\n            attribs.push(VertexBuffer.ColorInstanceKind);\n        }\n    }\n    /**\n     * Add the list of attributes required for instances to the attribs array.\n     * @param attribs The current list of supported attribs\n     * @param needsPreviousMatrices If the shader needs previous matrices\n     */\n    static PushAttributesForInstances(attribs, needsPreviousMatrices = false) {\n        attribs.push(\"world0\");\n        attribs.push(\"world1\");\n        attribs.push(\"world2\");\n        attribs.push(\"world3\");\n        if (needsPreviousMatrices) {\n            attribs.push(\"previousWorld0\");\n            attribs.push(\"previousWorld1\");\n            attribs.push(\"previousWorld2\");\n            attribs.push(\"previousWorld3\");\n        }\n    }\n    /**\n     * Binds the light information to the effect.\n     * @param light The light containing the generator\n     * @param effect The effect we are binding the data to\n     * @param lightIndex The light index in the effect used to render\n     */\n    static BindLightProperties(light, effect, lightIndex) {\n        light.transferToEffect(effect, lightIndex + \"\");\n    }\n    /**\n     * Binds the lights information from the scene to the effect for the given mesh.\n     * @param light Light to bind\n     * @param lightIndex Light index\n     * @param scene The scene where the light belongs to\n     * @param effect The effect we are binding the data to\n     * @param useSpecular Defines if specular is supported\n     * @param receiveShadows Defines if the effect (mesh) we bind the light for receives shadows\n     */\n    static BindLight(light, lightIndex, scene, effect, useSpecular, receiveShadows = true) {\n        light._bindLight(lightIndex, scene, effect, useSpecular, receiveShadows);\n    }\n    /**\n     * Binds the lights information from the scene to the effect for the given mesh.\n     * @param scene The scene the lights belongs to\n     * @param mesh The mesh we are binding the information to render\n     * @param effect The effect we are binding the data to\n     * @param defines The generated defines for the effect\n     * @param maxSimultaneousLights The maximum number of light that can be bound to the effect\n     */\n    static BindLights(scene, mesh, effect, defines, maxSimultaneousLights = 4) {\n        const len = Math.min(mesh.lightSources.length, maxSimultaneousLights);\n        for (let i = 0; i < len; i++) {\n            const light = mesh.lightSources[i];\n            this.BindLight(light, i, scene, effect, typeof defines === \"boolean\" ? defines : defines[\"SPECULARTERM\"], mesh.receiveShadows);\n        }\n    }\n    /**\n     * Binds the fog information from the scene to the effect for the given mesh.\n     * @param scene The scene the lights belongs to\n     * @param mesh The mesh we are binding the information to render\n     * @param effect The effect we are binding the data to\n     * @param linearSpace Defines if the fog effect is applied in linear space\n     */\n    static BindFogParameters(scene, mesh, effect, linearSpace = false) {\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\n            effect.setFloat4(\"vFogInfos\", scene.fogMode, scene.fogStart, scene.fogEnd, scene.fogDensity);\n            // Convert fog color to linear space if used in a linear space computed shader.\n            if (linearSpace) {\n                scene.fogColor.toLinearSpaceToRef(this._TempFogColor);\n                effect.setColor3(\"vFogColor\", this._TempFogColor);\n            }\n            else {\n                effect.setColor3(\"vFogColor\", scene.fogColor);\n            }\n        }\n    }\n    /**\n     * Binds the bones information from the mesh to the effect.\n     * @param mesh The mesh we are binding the information to render\n     * @param effect The effect we are binding the data to\n     * @param prePassConfiguration Configuration for the prepass, in case prepass is activated\n     */\n    static BindBonesParameters(mesh, effect, prePassConfiguration) {\n        if (!effect || !mesh) {\n            return;\n        }\n        if (mesh.computeBonesUsingShaders && effect._bonesComputationForcedToCPU) {\n            mesh.computeBonesUsingShaders = false;\n        }\n        if (mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\n            const skeleton = mesh.skeleton;\n            if (skeleton.isUsingTextureForMatrices && effect.getUniformIndex(\"boneTextureWidth\") > -1) {\n                const boneTexture = skeleton.getTransformMatrixTexture(mesh);\n                effect.setTexture(\"boneSampler\", boneTexture);\n                effect.setFloat(\"boneTextureWidth\", 4.0 * (skeleton.bones.length + 1));\n            }\n            else {\n                const matrices = skeleton.getTransformMatrices(mesh);\n                if (matrices) {\n                    effect.setMatrices(\"mBones\", matrices);\n                    if (prePassConfiguration && mesh.getScene().prePassRenderer && mesh.getScene().prePassRenderer.getIndex(2)) {\n                        if (!prePassConfiguration.previousBones[mesh.uniqueId]) {\n                            prePassConfiguration.previousBones[mesh.uniqueId] = matrices.slice();\n                        }\n                        effect.setMatrices(\"mPreviousBones\", prePassConfiguration.previousBones[mesh.uniqueId]);\n                        MaterialHelper._CopyBonesTransformationMatrices(matrices, prePassConfiguration.previousBones[mesh.uniqueId]);\n                    }\n                }\n            }\n        }\n    }\n    // Copies the bones transformation matrices into the target array and returns the target's reference\n    static _CopyBonesTransformationMatrices(source, target) {\n        target.set(source);\n        return target;\n    }\n    /**\n     * Binds the morph targets information from the mesh to the effect.\n     * @param abstractMesh The mesh we are binding the information to render\n     * @param effect The effect we are binding the data to\n     */\n    static BindMorphTargetParameters(abstractMesh, effect) {\n        const manager = abstractMesh.morphTargetManager;\n        if (!abstractMesh || !manager) {\n            return;\n        }\n        effect.setFloatArray(\"morphTargetInfluences\", manager.influences);\n    }\n    /**\n     * Binds the logarithmic depth information from the scene to the effect for the given defines.\n     * @param defines The generated defines used in the effect\n     * @param effect The effect we are binding the data to\n     * @param scene The scene we are willing to render with logarithmic scale for\n     */\n    static BindLogDepth(defines, effect, scene) {\n        if (!defines || defines[\"LOGARITHMICDEPTH\"] || (defines.indexOf && defines.indexOf(\"LOGARITHMICDEPTH\") >= 0)) {\n            const camera = scene.activeCamera;\n            if (camera.mode === Camera.ORTHOGRAPHIC_CAMERA) {\n                Logger.Error(\"Logarithmic depth is not compatible with orthographic cameras!\", 20);\n            }\n            effect.setFloat(\"logarithmicDepthConstant\", 2.0 / (Math.log(camera.maxZ + 1.0) / Math.LN2));\n        }\n    }\n}\n// eslint-disable-next-line @typescript-eslint/naming-convention\nMaterialHelper._TmpMorphInfluencers = { NUM_MORPH_INFLUENCERS: 0 };\nMaterialHelper._TempFogColor = Color3.Black();\n//# sourceMappingURL=materialHelper.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { SerializationHelper, serialize } from \"../Misc/decorators.js\";\nimport { MaterialPluginManager } from \"./materialPluginManager.js\";\n\n/**\n * Base class for material plugins.\n * @since 5.0\n */\nexport class MaterialPluginBase {\n    _enable(enable) {\n        if (enable) {\n            this._pluginManager._activatePlugin(this);\n        }\n    }\n    /**\n     * Creates a new material plugin\n     * @param material parent material of the plugin\n     * @param name name of the plugin\n     * @param priority priority of the plugin\n     * @param defines list of defines used by the plugin. The value of the property is the default value for this property\n     * @param addToPluginList true to add the plugin to the list of plugins managed by the material plugin manager of the material (default: true)\n     * @param enable true to enable the plugin (it is handy if the plugin does not handle properties to switch its current activation)\n     */\n    constructor(material, name, priority, defines, addToPluginList = true, enable = false) {\n        /**\n         * Defines the priority of the plugin. Lower numbers run first.\n         */\n        this.priority = 500;\n        /**\n         * Indicates that this plugin should be notified for the extra events (HasRenderTargetTextures / FillRenderTargetTextures / HardBindForSubMesh)\n         */\n        this.registerForExtraEvents = false;\n        this._material = material;\n        this.name = name;\n        this.priority = priority;\n        if (!material.pluginManager) {\n            material.pluginManager = new MaterialPluginManager(material);\n        }\n        this._pluginDefineNames = defines;\n        this._pluginManager = material.pluginManager;\n        if (addToPluginList) {\n            this._pluginManager._addPlugin(this);\n        }\n        if (enable) {\n            this._enable(true);\n        }\n        this.markAllDefinesAsDirty = material._dirtyCallbacks[63];\n    }\n    /**\n     * Gets the current class name useful for serialization or dynamic coding.\n     * @returns The class name.\n     */\n    getClassName() {\n        return \"MaterialPluginBase\";\n    }\n    /**\n     * Specifies that the submesh is ready to be used.\n     * @param defines the list of \"defines\" to update.\n     * @param scene defines the scene the material belongs to.\n     * @param engine the engine this scene belongs to.\n     * @param subMesh the submesh to check for readiness\n     * @returns - boolean indicating that the submesh is ready or not.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isReadyForSubMesh(defines, scene, engine, subMesh) {\n        return true;\n    }\n    /**\n     * Binds the material data (this function is called even if mustRebind() returns false)\n     * @param uniformBuffer defines the Uniform buffer to fill in.\n     * @param scene defines the scene the material belongs to.\n     * @param engine defines the engine the material belongs to.\n     * @param subMesh the submesh to bind data for\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    hardBindForSubMesh(uniformBuffer, scene, engine, subMesh) { }\n    /**\n     * Binds the material data.\n     * @param uniformBuffer defines the Uniform buffer to fill in.\n     * @param scene defines the scene the material belongs to.\n     * @param engine the engine this scene belongs to.\n     * @param subMesh the submesh to bind data for\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    bindForSubMesh(uniformBuffer, scene, engine, subMesh) { }\n    /**\n     * Disposes the resources of the material.\n     * @param forceDisposeTextures - Forces the disposal of all textures.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    dispose(forceDisposeTextures) { }\n    /**\n     * Returns a list of custom shader code fragments to customize the shader.\n     * @param shaderType \"vertex\" or \"fragment\"\n     * @returns null if no code to be added, or a list of pointName => code.\n     * Note that `pointName` can also be a regular expression if it starts with a `!`.\n     * In that case, the string found by the regular expression (if any) will be\n     * replaced by the code provided.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getCustomCode(shaderType) {\n        return null;\n    }\n    /**\n     * Collects all defines.\n     * @param defines The object to append to.\n     */\n    collectDefines(defines) {\n        if (!this._pluginDefineNames) {\n            return;\n        }\n        for (const key of Object.keys(this._pluginDefineNames)) {\n            if (key[0] === \"_\") {\n                continue;\n            }\n            const type = typeof this._pluginDefineNames[key];\n            defines[key] = {\n                type: type === \"number\" ? \"number\" : type === \"string\" ? \"string\" : type === \"boolean\" ? \"boolean\" : \"object\",\n                default: this._pluginDefineNames[key],\n            };\n        }\n    }\n    /**\n     * Sets the defines for the next rendering. Called before MaterialHelper.PrepareDefinesForAttributes is called.\n     * @param defines the list of \"defines\" to update.\n     * @param scene defines the scene to the material belongs to.\n     * @param mesh the mesh being rendered\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prepareDefinesBeforeAttributes(defines, scene, mesh) { }\n    /**\n     * Sets the defines for the next rendering\n     * @param defines the list of \"defines\" to update.\n     * @param scene defines the scene to the material belongs to.\n     * @param mesh the mesh being rendered\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prepareDefines(defines, scene, mesh) { }\n    /**\n     * Checks to see if a texture is used in the material.\n     * @param texture - Base texture to use.\n     * @returns - Boolean specifying if a texture is used in the material.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    hasTexture(texture) {\n        return false;\n    }\n    /**\n     * Gets a boolean indicating that current material needs to register RTT\n     * @returns true if this uses a render target otherwise false.\n     */\n    hasRenderTargetTextures() {\n        return false;\n    }\n    /**\n     * Fills the list of render target textures.\n     * @param renderTargets the list of render targets to update\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    fillRenderTargetTextures(renderTargets) { }\n    /**\n     * Returns an array of the actively used textures.\n     * @param activeTextures Array of BaseTextures\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getActiveTextures(activeTextures) { }\n    /**\n     * Returns the animatable textures.\n     * @param animatables Array of animatable textures.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getAnimatables(animatables) { }\n    /**\n     * Add fallbacks to the effect fallbacks list.\n     * @param defines defines the Base texture to use.\n     * @param fallbacks defines the current fallback list.\n     * @param currentRank defines the current fallback rank.\n     * @returns the new fallback rank.\n     */\n    addFallbacks(defines, fallbacks, currentRank) {\n        return currentRank;\n    }\n    /**\n     * Gets the samplers used by the plugin.\n     * @param samplers list that the sampler names should be added to.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getSamplers(samplers) { }\n    /**\n     * Gets the attributes used by the plugin.\n     * @param attributes list that the attribute names should be added to.\n     * @param scene the scene that the material belongs to.\n     * @param mesh the mesh being rendered.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getAttributes(attributes, scene, mesh) { }\n    /**\n     * Gets the uniform buffers names added by the plugin.\n     * @param ubos list that the ubo names should be added to.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getUniformBuffersNames(ubos) { }\n    /**\n     * Gets the description of the uniforms to add to the ubo (if engine supports ubos) or to inject directly in the vertex/fragment shaders (if engine does not support ubos)\n     * @returns the description of the uniforms\n     */\n    getUniforms() {\n        return {};\n    }\n    /**\n     * Makes a duplicate of the current configuration into another one.\n     * @param plugin define the config where to copy the info\n     */\n    copyTo(plugin) {\n        SerializationHelper.Clone(() => plugin, this);\n    }\n    /**\n     * Serializes this clear coat configuration.\n     * @returns - An object with the serialized config.\n     */\n    serialize() {\n        return SerializationHelper.Serialize(this);\n    }\n    /**\n     * Parses a anisotropy Configuration from a serialized object.\n     * @param source - Serialized object.\n     * @param scene Defines the scene we are parsing for\n     * @param rootUrl Defines the rootUrl to load from\n     */\n    parse(source, scene, rootUrl) {\n        SerializationHelper.Parse(() => this, source, scene, rootUrl);\n    }\n}\n__decorate([\n    serialize()\n], MaterialPluginBase.prototype, \"name\", void 0);\n__decorate([\n    serialize()\n], MaterialPluginBase.prototype, \"priority\", void 0);\n__decorate([\n    serialize()\n], MaterialPluginBase.prototype, \"registerForExtraEvents\", void 0);\n//# sourceMappingURL=materialPluginBase.js.map","/**\n * @internal\n */\nexport var MaterialPluginEvent;\n(function (MaterialPluginEvent) {\n    MaterialPluginEvent[MaterialPluginEvent[\"Created\"] = 1] = \"Created\";\n    MaterialPluginEvent[MaterialPluginEvent[\"Disposed\"] = 2] = \"Disposed\";\n    MaterialPluginEvent[MaterialPluginEvent[\"GetDefineNames\"] = 4] = \"GetDefineNames\";\n    MaterialPluginEvent[MaterialPluginEvent[\"PrepareUniformBuffer\"] = 8] = \"PrepareUniformBuffer\";\n    MaterialPluginEvent[MaterialPluginEvent[\"IsReadyForSubMesh\"] = 16] = \"IsReadyForSubMesh\";\n    MaterialPluginEvent[MaterialPluginEvent[\"PrepareDefines\"] = 32] = \"PrepareDefines\";\n    MaterialPluginEvent[MaterialPluginEvent[\"BindForSubMesh\"] = 64] = \"BindForSubMesh\";\n    MaterialPluginEvent[MaterialPluginEvent[\"PrepareEffect\"] = 128] = \"PrepareEffect\";\n    MaterialPluginEvent[MaterialPluginEvent[\"GetAnimatables\"] = 256] = \"GetAnimatables\";\n    MaterialPluginEvent[MaterialPluginEvent[\"GetActiveTextures\"] = 512] = \"GetActiveTextures\";\n    MaterialPluginEvent[MaterialPluginEvent[\"HasTexture\"] = 1024] = \"HasTexture\";\n    MaterialPluginEvent[MaterialPluginEvent[\"FillRenderTargetTextures\"] = 2048] = \"FillRenderTargetTextures\";\n    MaterialPluginEvent[MaterialPluginEvent[\"HasRenderTargetTextures\"] = 4096] = \"HasRenderTargetTextures\";\n    MaterialPluginEvent[MaterialPluginEvent[\"HardBindForSubMesh\"] = 8192] = \"HardBindForSubMesh\";\n})(MaterialPluginEvent || (MaterialPluginEvent = {}));\n//# sourceMappingURL=materialPluginEvent.js.map","import { Material } from \"./material.js\";\nimport { MaterialPluginEvent } from \"./materialPluginEvent.js\";\nconst rxOption = new RegExp(\"^([gimus]+)!\");\n/**\n * Class that manages the plugins of a material\n * @since 5.0\n */\nexport class MaterialPluginManager {\n    /**\n     * Creates a new instance of the plugin manager\n     * @param material material that this manager will manage the plugins for\n     */\n    constructor(material) {\n        this._plugins = [];\n        this._activePlugins = [];\n        this._activePluginsForExtraEvents = [];\n        this._material = material;\n        this._scene = material.getScene();\n        this._engine = this._scene.getEngine();\n    }\n    /**\n     * @internal\n     */\n    _addPlugin(plugin) {\n        for (let i = 0; i < this._plugins.length; ++i) {\n            if (this._plugins[i].name === plugin.name) {\n                throw `Plugin \"${plugin.name}\" already added to the material \"${this._material.name}\"!`;\n            }\n        }\n        if (this._material._uniformBufferLayoutBuilt) {\n            throw `The plugin \"${plugin.name}\" can't be added to the material \"${this._material.name}\" because this material has already been used for rendering! Please add plugins to materials before any rendering with this material occurs.`;\n        }\n        const pluginClassName = plugin.getClassName();\n        if (!MaterialPluginManager._MaterialPluginClassToMainDefine[pluginClassName]) {\n            MaterialPluginManager._MaterialPluginClassToMainDefine[pluginClassName] = \"MATERIALPLUGIN_\" + ++MaterialPluginManager._MaterialPluginCounter;\n        }\n        this._material._callbackPluginEventGeneric = this._handlePluginEvent.bind(this);\n        this._plugins.push(plugin);\n        this._plugins.sort((a, b) => a.priority - b.priority);\n        this._codeInjectionPoints = {};\n        const defineNamesFromPlugins = {};\n        defineNamesFromPlugins[MaterialPluginManager._MaterialPluginClassToMainDefine[pluginClassName]] = {\n            type: \"boolean\",\n            default: true,\n        };\n        for (const plugin of this._plugins) {\n            plugin.collectDefines(defineNamesFromPlugins);\n            this._collectPointNames(\"vertex\", plugin.getCustomCode(\"vertex\"));\n            this._collectPointNames(\"fragment\", plugin.getCustomCode(\"fragment\"));\n        }\n        this._defineNamesFromPlugins = defineNamesFromPlugins;\n    }\n    /**\n     * @internal\n     */\n    _activatePlugin(plugin) {\n        if (this._activePlugins.indexOf(plugin) === -1) {\n            this._activePlugins.push(plugin);\n            this._activePlugins.sort((a, b) => a.priority - b.priority);\n            this._material._callbackPluginEventIsReadyForSubMesh = this._handlePluginEventIsReadyForSubMesh.bind(this);\n            this._material._callbackPluginEventPrepareDefinesBeforeAttributes = this._handlePluginEventPrepareDefinesBeforeAttributes.bind(this);\n            this._material._callbackPluginEventPrepareDefines = this._handlePluginEventPrepareDefines.bind(this);\n            this._material._callbackPluginEventBindForSubMesh = this._handlePluginEventBindForSubMesh.bind(this);\n            if (plugin.registerForExtraEvents) {\n                this._activePluginsForExtraEvents.push(plugin);\n                this._activePluginsForExtraEvents.sort((a, b) => a.priority - b.priority);\n                this._material._callbackPluginEventHasRenderTargetTextures = this._handlePluginEventHasRenderTargetTextures.bind(this);\n                this._material._callbackPluginEventFillRenderTargetTextures = this._handlePluginEventFillRenderTargetTextures.bind(this);\n                this._material._callbackPluginEventHardBindForSubMesh = this._handlePluginEventHardBindForSubMesh.bind(this);\n            }\n        }\n    }\n    /**\n     * Gets a plugin from the list of plugins managed by this manager\n     * @param name name of the plugin\n     * @returns the plugin if found, else null\n     */\n    getPlugin(name) {\n        for (let i = 0; i < this._plugins.length; ++i) {\n            if (this._plugins[i].name === name) {\n                return this._plugins[i];\n            }\n        }\n        return null;\n    }\n    _handlePluginEventIsReadyForSubMesh(eventData) {\n        let isReady = true;\n        for (const plugin of this._activePlugins) {\n            isReady = isReady && plugin.isReadyForSubMesh(eventData.defines, this._scene, this._engine, eventData.subMesh);\n        }\n        eventData.isReadyForSubMesh = isReady;\n    }\n    _handlePluginEventPrepareDefinesBeforeAttributes(eventData) {\n        for (const plugin of this._activePlugins) {\n            plugin.prepareDefinesBeforeAttributes(eventData.defines, this._scene, eventData.mesh);\n        }\n    }\n    _handlePluginEventPrepareDefines(eventData) {\n        for (const plugin of this._activePlugins) {\n            plugin.prepareDefines(eventData.defines, this._scene, eventData.mesh);\n        }\n    }\n    _handlePluginEventHardBindForSubMesh(eventData) {\n        for (const plugin of this._activePluginsForExtraEvents) {\n            plugin.hardBindForSubMesh(this._material._uniformBuffer, this._scene, this._engine, eventData.subMesh);\n        }\n    }\n    _handlePluginEventBindForSubMesh(eventData) {\n        for (const plugin of this._activePlugins) {\n            plugin.bindForSubMesh(this._material._uniformBuffer, this._scene, this._engine, eventData.subMesh);\n        }\n    }\n    _handlePluginEventHasRenderTargetTextures(eventData) {\n        let hasRenderTargetTextures = false;\n        for (const plugin of this._activePluginsForExtraEvents) {\n            hasRenderTargetTextures = plugin.hasRenderTargetTextures();\n            if (hasRenderTargetTextures) {\n                break;\n            }\n        }\n        eventData.hasRenderTargetTextures = hasRenderTargetTextures;\n    }\n    _handlePluginEventFillRenderTargetTextures(eventData) {\n        for (const plugin of this._activePluginsForExtraEvents) {\n            plugin.fillRenderTargetTextures(eventData.renderTargets);\n        }\n    }\n    _handlePluginEvent(id, info) {\n        switch (id) {\n            case MaterialPluginEvent.GetActiveTextures: {\n                const eventData = info;\n                for (const plugin of this._activePlugins) {\n                    plugin.getActiveTextures(eventData.activeTextures);\n                }\n                break;\n            }\n            case MaterialPluginEvent.GetAnimatables: {\n                const eventData = info;\n                for (const plugin of this._activePlugins) {\n                    plugin.getAnimatables(eventData.animatables);\n                }\n                break;\n            }\n            case MaterialPluginEvent.HasTexture: {\n                const eventData = info;\n                let hasTexture = false;\n                for (const plugin of this._activePlugins) {\n                    hasTexture = plugin.hasTexture(eventData.texture);\n                    if (hasTexture) {\n                        break;\n                    }\n                }\n                eventData.hasTexture = hasTexture;\n                break;\n            }\n            case MaterialPluginEvent.Disposed: {\n                const eventData = info;\n                for (const plugin of this._plugins) {\n                    plugin.dispose(eventData.forceDisposeTextures);\n                }\n                break;\n            }\n            case MaterialPluginEvent.GetDefineNames: {\n                const eventData = info;\n                eventData.defineNames = this._defineNamesFromPlugins;\n                break;\n            }\n            case MaterialPluginEvent.PrepareEffect: {\n                const eventData = info;\n                for (const plugin of this._activePlugins) {\n                    eventData.fallbackRank = plugin.addFallbacks(eventData.defines, eventData.fallbacks, eventData.fallbackRank);\n                    plugin.getAttributes(eventData.attributes, this._scene, eventData.mesh);\n                }\n                if (this._uniformList.length > 0) {\n                    eventData.uniforms.push(...this._uniformList);\n                }\n                if (this._samplerList.length > 0) {\n                    eventData.samplers.push(...this._samplerList);\n                }\n                if (this._uboList.length > 0) {\n                    eventData.uniformBuffersNames.push(...this._uboList);\n                }\n                eventData.customCode = this._injectCustomCode(eventData.customCode);\n                break;\n            }\n            case MaterialPluginEvent.PrepareUniformBuffer: {\n                const eventData = info;\n                this._uboDeclaration = \"\";\n                this._vertexDeclaration = \"\";\n                this._fragmentDeclaration = \"\";\n                this._uniformList = [];\n                this._samplerList = [];\n                this._uboList = [];\n                for (const plugin of this._plugins) {\n                    const uniforms = plugin.getUniforms();\n                    if (uniforms) {\n                        if (uniforms.ubo) {\n                            for (const uniform of uniforms.ubo) {\n                                eventData.ubo.addUniform(uniform.name, uniform.size);\n                                this._uboDeclaration += `${uniform.type} ${uniform.name};\\r\\n`;\n                                this._uniformList.push(uniform.name);\n                            }\n                        }\n                        if (uniforms.vertex) {\n                            this._vertexDeclaration += uniforms.vertex + \"\\r\\n\";\n                        }\n                        if (uniforms.fragment) {\n                            this._fragmentDeclaration += uniforms.fragment + \"\\r\\n\";\n                        }\n                    }\n                    plugin.getSamplers(this._samplerList);\n                    plugin.getUniformBuffersNames(this._uboList);\n                }\n                break;\n            }\n        }\n    }\n    _collectPointNames(shaderType, customCode) {\n        if (!customCode) {\n            return;\n        }\n        for (const pointName in customCode) {\n            if (!this._codeInjectionPoints[shaderType]) {\n                this._codeInjectionPoints[shaderType] = {};\n            }\n            this._codeInjectionPoints[shaderType][pointName] = true;\n        }\n    }\n    _injectCustomCode(existingCallback) {\n        return (shaderType, code) => {\n            var _a;\n            if (existingCallback) {\n                code = existingCallback(shaderType, code);\n            }\n            if (this._uboDeclaration) {\n                code = code.replace(\"#define ADDITIONAL_UBO_DECLARATION\", this._uboDeclaration);\n            }\n            if (this._vertexDeclaration) {\n                code = code.replace(\"#define ADDITIONAL_VERTEX_DECLARATION\", this._vertexDeclaration);\n            }\n            if (this._fragmentDeclaration) {\n                code = code.replace(\"#define ADDITIONAL_FRAGMENT_DECLARATION\", this._fragmentDeclaration);\n            }\n            const points = (_a = this._codeInjectionPoints) === null || _a === void 0 ? void 0 : _a[shaderType];\n            if (!points) {\n                return code;\n            }\n            for (let pointName in points) {\n                let injectedCode = \"\";\n                for (const plugin of this._activePlugins) {\n                    const customCode = plugin.getCustomCode(shaderType);\n                    if (customCode === null || customCode === void 0 ? void 0 : customCode[pointName]) {\n                        injectedCode += customCode[pointName] + \"\\r\\n\";\n                    }\n                }\n                if (injectedCode.length > 0) {\n                    if (pointName.charAt(0) === \"!\") {\n                        // pointName is a regular expression\n                        pointName = pointName.substring(1);\n                        let regexFlags = \"g\";\n                        if (pointName.charAt(0) === \"!\") {\n                            // no flags\n                            regexFlags = \"\";\n                            pointName = pointName.substring(1);\n                        }\n                        else {\n                            // get the flag(s)\n                            const matchOption = rxOption.exec(pointName);\n                            if (matchOption && matchOption.length >= 2) {\n                                regexFlags = matchOption[1];\n                                pointName = pointName.substring(regexFlags.length + 1);\n                            }\n                        }\n                        if (regexFlags.indexOf(\"g\") < 0) {\n                            // we force the \"g\" flag so that the regexp object is stateful!\n                            regexFlags += \"g\";\n                        }\n                        const sourceCode = code;\n                        const rx = new RegExp(pointName, regexFlags);\n                        let match = rx.exec(sourceCode);\n                        while (match !== null) {\n                            let newCode = injectedCode;\n                            for (let i = 0; i < match.length; ++i) {\n                                newCode = newCode.replace(\"$\" + i, match[i]);\n                            }\n                            code = code.replace(match[0], newCode);\n                            match = rx.exec(sourceCode);\n                        }\n                    }\n                    else {\n                        const fullPointName = \"#define \" + pointName;\n                        code = code.replace(fullPointName, \"\\r\\n\" + injectedCode + \"\\r\\n\" + fullPointName);\n                    }\n                }\n            }\n            return code;\n        };\n    }\n}\n/** Map a plugin class name to a #define name (used in the vertex/fragment shaders as a marker of the plugin usage) */\nMaterialPluginManager._MaterialPluginClassToMainDefine = {};\nMaterialPluginManager._MaterialPluginCounter = 0;\nconst plugins = [];\nlet inited = false;\n/**\n * Registers a new material plugin through a factory, or updates it. This makes the plugin available to all materials instantiated after its registration.\n * @param pluginName The plugin name\n * @param factory The factory function which allows to create the plugin\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function RegisterMaterialPlugin(pluginName, factory) {\n    if (!inited) {\n        Material.OnEventObservable.add((material) => {\n            for (const [, factory] of plugins) {\n                factory(material);\n            }\n        }, MaterialPluginEvent.Created);\n        inited = true;\n    }\n    const existing = plugins.filter(([name, _factory]) => name === pluginName);\n    if (existing.length > 0) {\n        existing[0][1] = factory;\n    }\n    else {\n        plugins.push([pluginName, factory]);\n    }\n}\n/**\n * Removes a material plugin from the list of global plugins.\n * @param pluginName The plugin name\n * @returns true if the plugin has been removed, else false\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function UnregisterMaterialPlugin(pluginName) {\n    for (let i = 0; i < plugins.length; ++i) {\n        if (plugins[i][0] === pluginName) {\n            plugins.splice(i, 1);\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Clear the list of global material plugins\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function UnregisterAllMaterialPlugins() {\n    plugins.length = 0;\n}\n//# sourceMappingURL=materialPluginManager.js.map","import { Material } from \"../Materials/material.js\";\nimport { Tags } from \"../Misc/tags.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\n/**\n * A multi-material is used to apply different materials to different parts of the same object without the need of\n * separate meshes. This can be use to improve performances.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/multiMaterials\n */\nexport class MultiMaterial extends Material {\n    /**\n     * Gets or Sets the list of Materials used within the multi material.\n     * They need to be ordered according to the submeshes order in the associated mesh\n     */\n    get subMaterials() {\n        return this._subMaterials;\n    }\n    set subMaterials(value) {\n        this._subMaterials = value;\n        this._hookArray(value);\n    }\n    /**\n     * Function used to align with Node.getChildren()\n     * @returns the list of Materials used within the multi material\n     */\n    getChildren() {\n        return this.subMaterials;\n    }\n    /**\n     * Instantiates a new Multi Material\n     * A multi-material is used to apply different materials to different parts of the same object without the need of\n     * separate meshes. This can be use to improve performances.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/multiMaterials\n     * @param name Define the name in the scene\n     * @param scene Define the scene the material belongs to\n     */\n    constructor(name, scene) {\n        super(name, scene, true);\n        /** @internal */\n        this._waitingSubMaterialsUniqueIds = [];\n        this.getScene().multiMaterials.push(this);\n        this.subMaterials = new Array();\n        this._storeEffectOnSubMeshes = true; // multimaterial is considered like a push material\n    }\n    _hookArray(array) {\n        const oldPush = array.push;\n        array.push = (...items) => {\n            const result = oldPush.apply(array, items);\n            this._markAllSubMeshesAsTexturesDirty();\n            return result;\n        };\n        const oldSplice = array.splice;\n        array.splice = (index, deleteCount) => {\n            const deleted = oldSplice.apply(array, [index, deleteCount]);\n            this._markAllSubMeshesAsTexturesDirty();\n            return deleted;\n        };\n    }\n    /**\n     * Get one of the submaterial by its index in the submaterials array\n     * @param index The index to look the sub material at\n     * @returns The Material if the index has been defined\n     */\n    getSubMaterial(index) {\n        if (index < 0 || index >= this.subMaterials.length) {\n            return this.getScene().defaultMaterial;\n        }\n        return this.subMaterials[index];\n    }\n    /**\n     * Get the list of active textures for the whole sub materials list.\n     * @returns All the textures that will be used during the rendering\n     */\n    getActiveTextures() {\n        return super.getActiveTextures().concat(...this.subMaterials.map((subMaterial) => {\n            if (subMaterial) {\n                return subMaterial.getActiveTextures();\n            }\n            else {\n                return [];\n            }\n        }));\n    }\n    /**\n     * Specifies if any sub-materials of this multi-material use a given texture.\n     * @param texture Defines the texture to check against this multi-material's sub-materials.\n     * @returns A boolean specifying if any sub-material of this multi-material uses the texture.\n     */\n    hasTexture(texture) {\n        var _a;\n        if (super.hasTexture(texture)) {\n            return true;\n        }\n        for (let i = 0; i < this.subMaterials.length; i++) {\n            if ((_a = this.subMaterials[i]) === null || _a === void 0 ? void 0 : _a.hasTexture(texture)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Gets the current class name of the material e.g. \"MultiMaterial\"\n     * Mainly use in serialization.\n     * @returns the class name\n     */\n    getClassName() {\n        return \"MultiMaterial\";\n    }\n    /**\n     * Checks if the material is ready to render the requested sub mesh\n     * @param mesh Define the mesh the submesh belongs to\n     * @param subMesh Define the sub mesh to look readiness for\n     * @param useInstances Define whether or not the material is used with instances\n     * @returns true if ready, otherwise false\n     */\n    isReadyForSubMesh(mesh, subMesh, useInstances) {\n        for (let index = 0; index < this.subMaterials.length; index++) {\n            const subMaterial = this.subMaterials[index];\n            if (subMaterial) {\n                if (subMaterial._storeEffectOnSubMeshes) {\n                    if (!subMaterial.isReadyForSubMesh(mesh, subMesh, useInstances)) {\n                        return false;\n                    }\n                    continue;\n                }\n                if (!subMaterial.isReady(mesh)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    /**\n     * Clones the current material and its related sub materials\n     * @param name Define the name of the newly cloned material\n     * @param cloneChildren Define if submaterial will be cloned or shared with the parent instance\n     * @returns the cloned material\n     */\n    clone(name, cloneChildren) {\n        const newMultiMaterial = new MultiMaterial(name, this.getScene());\n        for (let index = 0; index < this.subMaterials.length; index++) {\n            let subMaterial = null;\n            const current = this.subMaterials[index];\n            if (cloneChildren && current) {\n                subMaterial = current.clone(name + \"-\" + current.name);\n            }\n            else {\n                subMaterial = this.subMaterials[index];\n            }\n            newMultiMaterial.subMaterials.push(subMaterial);\n        }\n        return newMultiMaterial;\n    }\n    /**\n     * Serializes the materials into a JSON representation.\n     * @returns the JSON representation\n     */\n    serialize() {\n        const serializationObject = {};\n        serializationObject.name = this.name;\n        serializationObject.id = this.id;\n        serializationObject.uniqueId = this.uniqueId;\n        if (Tags) {\n            serializationObject.tags = Tags.GetTags(this);\n        }\n        serializationObject.materialsUniqueIds = [];\n        serializationObject.materials = [];\n        for (let matIndex = 0; matIndex < this.subMaterials.length; matIndex++) {\n            const subMat = this.subMaterials[matIndex];\n            if (subMat) {\n                serializationObject.materialsUniqueIds.push(subMat.uniqueId);\n                serializationObject.materials.push(subMat.id);\n            }\n            else {\n                serializationObject.materialsUniqueIds.push(null);\n                serializationObject.materials.push(null);\n            }\n        }\n        return serializationObject;\n    }\n    /**\n     * Dispose the material and release its associated resources\n     * @param forceDisposeEffect Define if we want to force disposing the associated effect (if false the shader is not released and could be reuse later on)\n     * @param forceDisposeTextures Define if we want to force disposing the associated textures (if false, they will not be disposed and can still be use elsewhere in the app)\n     * @param forceDisposeChildren Define if we want to force disposing the associated submaterials (if false, they will not be disposed and can still be use elsewhere in the app)\n     */\n    dispose(forceDisposeEffect, forceDisposeTextures, forceDisposeChildren) {\n        const scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        if (forceDisposeChildren) {\n            for (let index = 0; index < this.subMaterials.length; index++) {\n                const subMaterial = this.subMaterials[index];\n                if (subMaterial) {\n                    subMaterial.dispose(forceDisposeEffect, forceDisposeTextures);\n                }\n            }\n        }\n        const index = scene.multiMaterials.indexOf(this);\n        if (index >= 0) {\n            scene.multiMaterials.splice(index, 1);\n        }\n        super.dispose(forceDisposeEffect, forceDisposeTextures);\n    }\n    /**\n     * Creates a MultiMaterial from parsed MultiMaterial data.\n     * @param parsedMultiMaterial defines parsed MultiMaterial data.\n     * @param scene defines the hosting scene\n     * @returns a new MultiMaterial\n     */\n    static ParseMultiMaterial(parsedMultiMaterial, scene) {\n        const multiMaterial = new MultiMaterial(parsedMultiMaterial.name, scene);\n        multiMaterial.id = parsedMultiMaterial.id;\n        multiMaterial._loadedUniqueId = parsedMultiMaterial.uniqueId;\n        if (Tags) {\n            Tags.AddTagsTo(multiMaterial, parsedMultiMaterial.tags);\n        }\n        if (parsedMultiMaterial.materialsUniqueIds) {\n            multiMaterial._waitingSubMaterialsUniqueIds = parsedMultiMaterial.materialsUniqueIds;\n        }\n        else {\n            parsedMultiMaterial.materials.forEach((subMatId) => multiMaterial.subMaterials.push(scene.getLastMaterialById(subMatId)));\n        }\n        return multiMaterial;\n    }\n}\nRegisterClass(\"BABYLON.MultiMaterial\", MultiMaterial);\n//# sourceMappingURL=multiMaterial.js.map","\n/**\n * Configuration needed for prepass-capable materials\n */\nexport class PrePassConfiguration {\n    constructor() {\n        /**\n         * Previous world matrices of meshes carrying this material\n         * Used for computing velocity\n         */\n        this.previousWorldMatrices = {};\n        /**\n         * Previous bones of meshes carrying this material\n         * Used for computing velocity\n         */\n        this.previousBones = {};\n    }\n    /**\n     * Add the required uniforms to the current list.\n     * @param uniforms defines the current uniform list.\n     */\n    static AddUniforms(uniforms) {\n        uniforms.push(\"previousWorld\", \"previousViewProjection\", \"mPreviousBones\");\n    }\n    /**\n     * Add the required samplers to the current list.\n     * @param samplers defines the current sampler list.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    static AddSamplers(samplers) {\n        // pass\n    }\n    /**\n     * Binds the material data.\n     * @param effect defines the effect to update\n     * @param scene defines the scene the material belongs to.\n     * @param mesh The mesh\n     * @param world World matrix of this mesh\n     * @param isFrozen Is the material frozen\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    bindForSubMesh(effect, scene, mesh, world, isFrozen) {\n        if (scene.prePassRenderer && scene.prePassRenderer.enabled && scene.prePassRenderer.currentRTisSceneRT) {\n            if (scene.prePassRenderer.getIndex(2) !== -1) {\n                if (!this.previousWorldMatrices[mesh.uniqueId]) {\n                    this.previousWorldMatrices[mesh.uniqueId] = world.clone();\n                }\n                if (!this.previousViewProjection) {\n                    this.previousViewProjection = scene.getTransformMatrix().clone();\n                    this.currentViewProjection = scene.getTransformMatrix().clone();\n                }\n                const engine = scene.getEngine();\n                if (this.currentViewProjection.updateFlag !== scene.getTransformMatrix().updateFlag) {\n                    // First update of the prepass configuration for this rendering pass\n                    this._lastUpdateFrameId = engine.frameId;\n                    this.previousViewProjection.copyFrom(this.currentViewProjection);\n                    this.currentViewProjection.copyFrom(scene.getTransformMatrix());\n                }\n                else if (this._lastUpdateFrameId !== engine.frameId) {\n                    // The scene transformation did not change from the previous frame (so no camera motion), we must update previousViewProjection accordingly\n                    this._lastUpdateFrameId = engine.frameId;\n                    this.previousViewProjection.copyFrom(this.currentViewProjection);\n                }\n                effect.setMatrix(\"previousWorld\", this.previousWorldMatrices[mesh.uniqueId]);\n                effect.setMatrix(\"previousViewProjection\", this.previousViewProjection);\n                this.previousWorldMatrices[mesh.uniqueId] = world.clone();\n            }\n        }\n    }\n}\n//# sourceMappingURL=prePassConfiguration.js.map","import { Matrix } from \"../Maths/math.vector.js\";\nimport { Material } from \"../Materials/material.js\";\n/**\n * Base class of materials working in push mode in babylon JS\n * @internal\n */\nexport class PushMaterial extends Material {\n    constructor(name, scene, storeEffectOnSubMeshes = true) {\n        super(name, scene);\n        this._normalMatrix = new Matrix();\n        this._storeEffectOnSubMeshes = storeEffectOnSubMeshes;\n    }\n    getEffect() {\n        return this._storeEffectOnSubMeshes ? this._activeEffect : super.getEffect();\n    }\n    isReady(mesh, useInstances) {\n        if (!mesh) {\n            return false;\n        }\n        if (!this._storeEffectOnSubMeshes) {\n            return true;\n        }\n        if (!mesh.subMeshes || mesh.subMeshes.length === 0) {\n            return true;\n        }\n        return this.isReadyForSubMesh(mesh, mesh.subMeshes[0], useInstances);\n    }\n    _isReadyForSubMesh(subMesh) {\n        const defines = subMesh.materialDefines;\n        if (!this.checkReadyOnEveryCall && subMesh.effect && defines) {\n            if (defines._renderId === this.getScene().getRenderId()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Binds the given world matrix to the active effect\n     *\n     * @param world the matrix to bind\n     */\n    bindOnlyWorldMatrix(world) {\n        this._activeEffect.setMatrix(\"world\", world);\n    }\n    /**\n     * Binds the given normal matrix to the active effect\n     *\n     * @param normalMatrix the matrix to bind\n     */\n    bindOnlyNormalMatrix(normalMatrix) {\n        this._activeEffect.setMatrix(\"normalMatrix\", normalMatrix);\n    }\n    bind(world, mesh) {\n        if (!mesh) {\n            return;\n        }\n        this.bindForSubMesh(world, mesh, mesh.subMeshes[0]);\n    }\n    _afterBind(mesh, effect = null) {\n        super._afterBind(mesh, effect);\n        this.getScene()._cachedEffect = effect;\n        if (effect) {\n            effect._forceRebindOnNextCall = false;\n        }\n    }\n    _mustRebind(scene, effect, visibility = 1) {\n        return scene.isCachedMaterialInvalid(this, effect, visibility);\n    }\n}\n//# sourceMappingURL=pushMaterial.js.map","/**\n * Language of the shader code\n */\nexport var ShaderLanguage;\n(function (ShaderLanguage) {\n    /** language is GLSL (used by WebGL) */\n    ShaderLanguage[ShaderLanguage[\"GLSL\"] = 0] = \"GLSL\";\n    /** language is WGSL (used by WebGPU) */\n    ShaderLanguage[ShaderLanguage[\"WGSL\"] = 1] = \"WGSL\";\n})(ShaderLanguage || (ShaderLanguage = {}));\n//# sourceMappingURL=shaderLanguage.js.map","import { SerializationHelper } from \"../Misc/decorators.js\";\nimport { Matrix, Vector3, Vector2, Vector4, Quaternion } from \"../Maths/math.vector.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { MaterialHelper } from \"./materialHelper.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { Color3, Color4 } from \"../Maths/math.color.js\";\nimport { EffectFallbacks } from \"./effectFallbacks.js\";\nimport { WebRequest } from \"../Misc/webRequest.js\";\nimport { PushMaterial } from \"./pushMaterial.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\n\nimport { addClipPlaneUniforms, bindClipPlane, prepareDefinesForClipPlanes } from \"./clipPlaneMaterialHelper.js\";\nconst onCreatedEffectParameters = { effect: null, subMesh: null };\n/**\n * The ShaderMaterial object has the necessary methods to pass data from your scene to the Vertex and Fragment Shaders and returns a material that can be applied to any mesh.\n *\n * This returned material effects how the mesh will look based on the code in the shaders.\n *\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/shaders/shaderMaterial\n */\nexport class ShaderMaterial extends PushMaterial {\n    /**\n     * Instantiate a new shader material.\n     * The ShaderMaterial object has the necessary methods to pass data from your scene to the Vertex and Fragment Shaders and returns a material that can be applied to any mesh.\n     * This returned material effects how the mesh will look based on the code in the shaders.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/shaders/shaderMaterial\n     * @param name Define the name of the material in the scene\n     * @param scene Define the scene the material belongs to\n     * @param shaderPath Defines  the route to the shader code in one of three ways:\n     *  * object: { vertex: \"custom\", fragment: \"custom\" }, used with Effect.ShadersStore[\"customVertexShader\"] and Effect.ShadersStore[\"customFragmentShader\"]\n     *  * object: { vertexElement: \"vertexShaderCode\", fragmentElement: \"fragmentShaderCode\" }, used with shader code in script tags\n     *  * object: { vertexSource: \"vertex shader code string\", fragmentSource: \"fragment shader code string\" } using with strings containing the shaders code\n     *  * string: \"./COMMON_NAME\", used with external files COMMON_NAME.vertex.fx and COMMON_NAME.fragment.fx in index.html folder.\n     * @param options Define the options used to create the shader\n     * @param storeEffectOnSubMeshes true to store effect on submeshes, false to store the effect directly in the material class.\n     */\n    constructor(name, scene, shaderPath, options = {}, storeEffectOnSubMeshes = true) {\n        super(name, scene, storeEffectOnSubMeshes);\n        this._textures = {};\n        this._textureArrays = {};\n        this._externalTextures = {};\n        this._floats = {};\n        this._ints = {};\n        this._uints = {};\n        this._floatsArrays = {};\n        this._colors3 = {};\n        this._colors3Arrays = {};\n        this._colors4 = {};\n        this._colors4Arrays = {};\n        this._vectors2 = {};\n        this._vectors3 = {};\n        this._vectors4 = {};\n        this._quaternions = {};\n        this._quaternionsArrays = {};\n        this._matrices = {};\n        this._matrixArrays = {};\n        this._matrices3x3 = {};\n        this._matrices2x2 = {};\n        this._vectors2Arrays = {};\n        this._vectors3Arrays = {};\n        this._vectors4Arrays = {};\n        this._uniformBuffers = {};\n        this._textureSamplers = {};\n        this._storageBuffers = {};\n        this._cachedWorldViewMatrix = new Matrix();\n        this._cachedWorldViewProjectionMatrix = new Matrix();\n        this._multiview = false;\n        this._shaderPath = shaderPath;\n        this._options = {\n            needAlphaBlending: false,\n            needAlphaTesting: false,\n            attributes: [\"position\", \"normal\", \"uv\"],\n            uniforms: [\"worldViewProjection\"],\n            uniformBuffers: [],\n            samplers: [],\n            externalTextures: [],\n            samplerObjects: [],\n            storageBuffers: [],\n            defines: [],\n            useClipPlane: false,\n            ...options,\n        };\n    }\n    /**\n     * Gets the shader path used to define the shader code\n     * It can be modified to trigger a new compilation\n     */\n    get shaderPath() {\n        return this._shaderPath;\n    }\n    /**\n     * Sets the shader path used to define the shader code\n     * It can be modified to trigger a new compilation\n     */\n    set shaderPath(shaderPath) {\n        this._shaderPath = shaderPath;\n    }\n    /**\n     * Gets the options used to compile the shader.\n     * They can be modified to trigger a new compilation\n     */\n    get options() {\n        return this._options;\n    }\n    /**\n     * Gets the current class name of the material e.g. \"ShaderMaterial\"\n     * Mainly use in serialization.\n     * @returns the class name\n     */\n    getClassName() {\n        return \"ShaderMaterial\";\n    }\n    /**\n     * Specifies if the material will require alpha blending\n     * @returns a boolean specifying if alpha blending is needed\n     */\n    needAlphaBlending() {\n        return this.alpha < 1.0 || this._options.needAlphaBlending;\n    }\n    /**\n     * Specifies if this material should be rendered in alpha test mode\n     * @returns a boolean specifying if an alpha test is needed.\n     */\n    needAlphaTesting() {\n        return this._options.needAlphaTesting;\n    }\n    _checkUniform(uniformName) {\n        if (this._options.uniforms.indexOf(uniformName) === -1) {\n            this._options.uniforms.push(uniformName);\n        }\n    }\n    /**\n     * Set a texture in the shader.\n     * @param name Define the name of the uniform samplers as defined in the shader\n     * @param texture Define the texture to bind to this sampler\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setTexture(name, texture) {\n        if (this._options.samplers.indexOf(name) === -1) {\n            this._options.samplers.push(name);\n        }\n        this._textures[name] = texture;\n        return this;\n    }\n    /**\n     * Set a texture array in the shader.\n     * @param name Define the name of the uniform sampler array as defined in the shader\n     * @param textures Define the list of textures to bind to this sampler\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setTextureArray(name, textures) {\n        if (this._options.samplers.indexOf(name) === -1) {\n            this._options.samplers.push(name);\n        }\n        this._checkUniform(name);\n        this._textureArrays[name] = textures;\n        return this;\n    }\n    /**\n     * Set an internal texture in the shader.\n     * @param name Define the name of the uniform samplers as defined in the shader\n     * @param texture Define the texture to bind to this sampler\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setExternalTexture(name, texture) {\n        if (this._options.externalTextures.indexOf(name) === -1) {\n            this._options.externalTextures.push(name);\n        }\n        this._externalTextures[name] = texture;\n        return this;\n    }\n    /**\n     * Set a float in the shader.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setFloat(name, value) {\n        this._checkUniform(name);\n        this._floats[name] = value;\n        return this;\n    }\n    /**\n     * Set a int in the shader.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setInt(name, value) {\n        this._checkUniform(name);\n        this._ints[name] = value;\n        return this;\n    }\n    /**\n     * Set a unsigned int in the shader.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @return the material itself allowing \"fluent\" like uniform updates\n     */\n    setUInt(name, value) {\n        this._checkUniform(name);\n        this._uints[name] = value;\n        return this;\n    }\n    /**\n     * Set an array of floats in the shader.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setFloats(name, value) {\n        this._checkUniform(name);\n        this._floatsArrays[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec3 in the shader from a Color3.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setColor3(name, value) {\n        this._checkUniform(name);\n        this._colors3[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec3 array in the shader from a Color3 array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setColor3Array(name, value) {\n        this._checkUniform(name);\n        this._colors3Arrays[name] = value.reduce((arr, color) => {\n            color.toArray(arr, arr.length);\n            return arr;\n        }, []);\n        return this;\n    }\n    /**\n     * Set a vec4 in the shader from a Color4.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setColor4(name, value) {\n        this._checkUniform(name);\n        this._colors4[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec4 array in the shader from a Color4 array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setColor4Array(name, value) {\n        this._checkUniform(name);\n        this._colors4Arrays[name] = value.reduce((arr, color) => {\n            color.toArray(arr, arr.length);\n            return arr;\n        }, []);\n        return this;\n    }\n    /**\n     * Set a vec2 in the shader from a Vector2.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setVector2(name, value) {\n        this._checkUniform(name);\n        this._vectors2[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec3 in the shader from a Vector3.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setVector3(name, value) {\n        this._checkUniform(name);\n        this._vectors3[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec4 in the shader from a Vector4.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setVector4(name, value) {\n        this._checkUniform(name);\n        this._vectors4[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec4 in the shader from a Quaternion.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setQuaternion(name, value) {\n        this._checkUniform(name);\n        this._quaternions[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec4 array in the shader from a Quaternion array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setQuaternionArray(name, value) {\n        this._checkUniform(name);\n        this._quaternionsArrays[name] = value.reduce((arr, quaternion) => {\n            quaternion.toArray(arr, arr.length);\n            return arr;\n        }, []);\n        return this;\n    }\n    /**\n     * Set a mat4 in the shader from a Matrix.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setMatrix(name, value) {\n        this._checkUniform(name);\n        this._matrices[name] = value;\n        return this;\n    }\n    /**\n     * Set a float32Array in the shader from a matrix array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setMatrices(name, value) {\n        this._checkUniform(name);\n        const float32Array = new Float32Array(value.length * 16);\n        for (let index = 0; index < value.length; index++) {\n            const matrix = value[index];\n            matrix.copyToArray(float32Array, index * 16);\n        }\n        this._matrixArrays[name] = float32Array;\n        return this;\n    }\n    /**\n     * Set a mat3 in the shader from a Float32Array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setMatrix3x3(name, value) {\n        this._checkUniform(name);\n        this._matrices3x3[name] = value;\n        return this;\n    }\n    /**\n     * Set a mat2 in the shader from a Float32Array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setMatrix2x2(name, value) {\n        this._checkUniform(name);\n        this._matrices2x2[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec2 array in the shader from a number array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setArray2(name, value) {\n        this._checkUniform(name);\n        this._vectors2Arrays[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec3 array in the shader from a number array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setArray3(name, value) {\n        this._checkUniform(name);\n        this._vectors3Arrays[name] = value;\n        return this;\n    }\n    /**\n     * Set a vec4 array in the shader from a number array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setArray4(name, value) {\n        this._checkUniform(name);\n        this._vectors4Arrays[name] = value;\n        return this;\n    }\n    /**\n     * Set a uniform buffer in the shader\n     * @param name Define the name of the uniform as defined in the shader\n     * @param buffer Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setUniformBuffer(name, buffer) {\n        if (this._options.uniformBuffers.indexOf(name) === -1) {\n            this._options.uniformBuffers.push(name);\n        }\n        this._uniformBuffers[name] = buffer;\n        return this;\n    }\n    /**\n     * Set a texture sampler in the shader\n     * @param name Define the name of the uniform as defined in the shader\n     * @param sampler Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setTextureSampler(name, sampler) {\n        if (this._options.samplerObjects.indexOf(name) === -1) {\n            this._options.samplerObjects.push(name);\n        }\n        this._textureSamplers[name] = sampler;\n        return this;\n    }\n    /**\n     * Set a storage buffer in the shader\n     * @param name Define the name of the storage buffer as defined in the shader\n     * @param buffer Define the value to give to the uniform\n     * @returns the material itself allowing \"fluent\" like uniform updates\n     */\n    setStorageBuffer(name, buffer) {\n        if (this._options.storageBuffers.indexOf(name) === -1) {\n            this._options.storageBuffers.push(name);\n        }\n        this._storageBuffers[name] = buffer;\n        return this;\n    }\n    /**\n     * Specifies that the submesh is ready to be used\n     * @param mesh defines the mesh to check\n     * @param subMesh defines which submesh to check\n     * @param useInstances specifies that instances should be used\n     * @returns a boolean indicating that the submesh is ready or not\n     */\n    isReadyForSubMesh(mesh, subMesh, useInstances) {\n        return this.isReady(mesh, useInstances, subMesh);\n    }\n    /**\n     * Checks if the material is ready to render the requested mesh\n     * @param mesh Define the mesh to render\n     * @param useInstances Define whether or not the material is used with instances\n     * @param subMesh defines which submesh to render\n     * @returns true if ready, otherwise false\n     */\n    isReady(mesh, useInstances, subMesh) {\n        var _a, _b, _c, _d;\n        const storeEffectOnSubMeshes = subMesh && this._storeEffectOnSubMeshes;\n        if (this.isFrozen) {\n            if (storeEffectOnSubMeshes) {\n                if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\n                    return true;\n                }\n            }\n            else {\n                const effect = this._drawWrapper.effect;\n                if (effect && effect._wasPreviouslyReady && effect._wasPreviouslyUsingInstances === useInstances) {\n                    return true;\n                }\n            }\n        }\n        const scene = this.getScene();\n        const engine = scene.getEngine();\n        // Instances\n        const defines = [];\n        const attribs = [];\n        const fallbacks = new EffectFallbacks();\n        let shaderName = this._shaderPath, uniforms = this._options.uniforms, uniformBuffers = this._options.uniformBuffers, samplers = this._options.samplers;\n        // global multiview\n        if (engine.getCaps().multiview && scene.activeCamera && scene.activeCamera.outputRenderTarget && scene.activeCamera.outputRenderTarget.getViewCount() > 1) {\n            this._multiview = true;\n            defines.push(\"#define MULTIVIEW\");\n            if (this._options.uniforms.indexOf(\"viewProjection\") !== -1 && this._options.uniforms.indexOf(\"viewProjectionR\") === -1) {\n                this._options.uniforms.push(\"viewProjectionR\");\n            }\n        }\n        for (let index = 0; index < this._options.defines.length; index++) {\n            const defineToAdd = this._options.defines[index].indexOf(\"#define\") === 0 ? this._options.defines[index] : `#define ${this._options.defines[index]}`;\n            defines.push(defineToAdd);\n        }\n        for (let index = 0; index < this._options.attributes.length; index++) {\n            attribs.push(this._options.attributes[index]);\n        }\n        if (mesh && mesh.isVerticesDataPresent(VertexBuffer.ColorKind)) {\n            attribs.push(VertexBuffer.ColorKind);\n            defines.push(\"#define VERTEXCOLOR\");\n        }\n        if (useInstances) {\n            defines.push(\"#define INSTANCES\");\n            MaterialHelper.PushAttributesForInstances(attribs);\n            if (mesh === null || mesh === void 0 ? void 0 : mesh.hasThinInstances) {\n                defines.push(\"#define THIN_INSTANCES\");\n                if (mesh && mesh.isVerticesDataPresent(VertexBuffer.ColorInstanceKind)) {\n                    attribs.push(VertexBuffer.ColorInstanceKind);\n                    defines.push(\"#define INSTANCESCOLOR\");\n                }\n            }\n        }\n        // Bones\n        if (mesh && mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\n            attribs.push(VertexBuffer.MatricesIndicesKind);\n            attribs.push(VertexBuffer.MatricesWeightsKind);\n            if (mesh.numBoneInfluencers > 4) {\n                attribs.push(VertexBuffer.MatricesIndicesExtraKind);\n                attribs.push(VertexBuffer.MatricesWeightsExtraKind);\n            }\n            const skeleton = mesh.skeleton;\n            defines.push(\"#define NUM_BONE_INFLUENCERS \" + mesh.numBoneInfluencers);\n            fallbacks.addCPUSkinningFallback(0, mesh);\n            if (skeleton.isUsingTextureForMatrices) {\n                defines.push(\"#define BONETEXTURE\");\n                if (this._options.uniforms.indexOf(\"boneTextureWidth\") === -1) {\n                    this._options.uniforms.push(\"boneTextureWidth\");\n                }\n                if (this._options.samplers.indexOf(\"boneSampler\") === -1) {\n                    this._options.samplers.push(\"boneSampler\");\n                }\n            }\n            else {\n                defines.push(\"#define BonesPerMesh \" + (skeleton.bones.length + 1));\n                if (this._options.uniforms.indexOf(\"mBones\") === -1) {\n                    this._options.uniforms.push(\"mBones\");\n                }\n            }\n        }\n        else {\n            defines.push(\"#define NUM_BONE_INFLUENCERS 0\");\n        }\n        // Morph\n        let numInfluencers = 0;\n        const manager = mesh ? mesh.morphTargetManager : null;\n        if (manager) {\n            const uv = manager.supportsUVs && defines.indexOf(\"#define UV1\") !== -1;\n            const tangent = manager.supportsTangents && defines.indexOf(\"#define TANGENT\") !== -1;\n            const normal = manager.supportsNormals && defines.indexOf(\"#define NORMAL\") !== -1;\n            numInfluencers = manager.numInfluencers;\n            if (uv) {\n                defines.push(\"#define MORPHTARGETS_UV\");\n            }\n            if (tangent) {\n                defines.push(\"#define MORPHTARGETS_TANGENT\");\n            }\n            if (normal) {\n                defines.push(\"#define MORPHTARGETS_NORMAL\");\n            }\n            if (numInfluencers > 0) {\n                defines.push(\"#define MORPHTARGETS\");\n            }\n            if (manager.isUsingTextureForTargets) {\n                defines.push(\"#define MORPHTARGETS_TEXTURE\");\n                if (this._options.uniforms.indexOf(\"morphTargetTextureIndices\") === -1) {\n                    this._options.uniforms.push(\"morphTargetTextureIndices\");\n                }\n                if (this._options.samplers.indexOf(\"morphTargets\") === -1) {\n                    this._options.samplers.push(\"morphTargets\");\n                }\n            }\n            defines.push(\"#define NUM_MORPH_INFLUENCERS \" + numInfluencers);\n            for (let index = 0; index < numInfluencers; index++) {\n                attribs.push(VertexBuffer.PositionKind + index);\n                if (normal) {\n                    attribs.push(VertexBuffer.NormalKind + index);\n                }\n                if (tangent) {\n                    attribs.push(VertexBuffer.TangentKind + index);\n                }\n                if (uv) {\n                    attribs.push(VertexBuffer.UVKind + \"_\" + index);\n                }\n            }\n            if (numInfluencers > 0) {\n                uniforms = uniforms.slice();\n                uniforms.push(\"morphTargetInfluences\");\n                uniforms.push(\"morphTargetTextureInfo\");\n                uniforms.push(\"morphTargetTextureIndices\");\n            }\n        }\n        else {\n            defines.push(\"#define NUM_MORPH_INFLUENCERS 0\");\n        }\n        // Baked Vertex Animation\n        if (mesh) {\n            const bvaManager = mesh.bakedVertexAnimationManager;\n            if (bvaManager && bvaManager.isEnabled) {\n                defines.push(\"#define BAKED_VERTEX_ANIMATION_TEXTURE\");\n                if (this._options.uniforms.indexOf(\"bakedVertexAnimationSettings\") === -1) {\n                    this._options.uniforms.push(\"bakedVertexAnimationSettings\");\n                }\n                if (this._options.uniforms.indexOf(\"bakedVertexAnimationTextureSizeInverted\") === -1) {\n                    this._options.uniforms.push(\"bakedVertexAnimationTextureSizeInverted\");\n                }\n                if (this._options.uniforms.indexOf(\"bakedVertexAnimationTime\") === -1) {\n                    this._options.uniforms.push(\"bakedVertexAnimationTime\");\n                }\n                if (this._options.samplers.indexOf(\"bakedVertexAnimationTexture\") === -1) {\n                    this._options.samplers.push(\"bakedVertexAnimationTexture\");\n                }\n            }\n            MaterialHelper.PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\n        }\n        // Textures\n        for (const name in this._textures) {\n            if (!this._textures[name].isReady()) {\n                return false;\n            }\n        }\n        // Alpha test\n        if (mesh && this._shouldTurnAlphaTestOn(mesh)) {\n            defines.push(\"#define ALPHATEST\");\n        }\n        // Clip planes\n        if (this._options.useClipPlane !== false) {\n            addClipPlaneUniforms(uniforms);\n            prepareDefinesForClipPlanes(this, scene, defines);\n        }\n        if (this.customShaderNameResolve) {\n            uniforms = uniforms.slice();\n            uniformBuffers = uniformBuffers.slice();\n            samplers = samplers.slice();\n            shaderName = this.customShaderNameResolve(shaderName, uniforms, uniformBuffers, samplers, defines, attribs);\n        }\n        const drawWrapper = storeEffectOnSubMeshes ? subMesh._getDrawWrapper() : this._drawWrapper;\n        const previousEffect = (_a = drawWrapper === null || drawWrapper === void 0 ? void 0 : drawWrapper.effect) !== null && _a !== void 0 ? _a : null;\n        const previousDefines = (_b = drawWrapper === null || drawWrapper === void 0 ? void 0 : drawWrapper.defines) !== null && _b !== void 0 ? _b : null;\n        const join = defines.join(\"\\n\");\n        let effect = previousEffect;\n        if (previousDefines !== join) {\n            effect = engine.createEffect(shaderName, {\n                attributes: attribs,\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: join,\n                fallbacks: fallbacks,\n                onCompiled: this.onCompiled,\n                onError: this.onError,\n                indexParameters: { maxSimultaneousMorphTargets: numInfluencers },\n                shaderLanguage: this._options.shaderLanguage,\n            }, engine);\n            if (storeEffectOnSubMeshes) {\n                subMesh.setEffect(effect, join, this._materialContext);\n            }\n            else if (drawWrapper) {\n                drawWrapper.setEffect(effect, join);\n            }\n            if (this._onEffectCreatedObservable) {\n                onCreatedEffectParameters.effect = effect;\n                onCreatedEffectParameters.subMesh = (_c = subMesh !== null && subMesh !== void 0 ? subMesh : mesh === null || mesh === void 0 ? void 0 : mesh.subMeshes[0]) !== null && _c !== void 0 ? _c : null;\n                this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\n            }\n        }\n        effect._wasPreviouslyUsingInstances = !!useInstances;\n        if ((_d = !(effect === null || effect === void 0 ? void 0 : effect.isReady())) !== null && _d !== void 0 ? _d : true) {\n            return false;\n        }\n        if (previousEffect !== effect) {\n            scene.resetCachedMaterial();\n        }\n        effect._wasPreviouslyReady = true;\n        return true;\n    }\n    /**\n     * Binds the world matrix to the material\n     * @param world defines the world transformation matrix\n     * @param effectOverride - If provided, use this effect instead of internal effect\n     */\n    bindOnlyWorldMatrix(world, effectOverride) {\n        const scene = this.getScene();\n        const effect = effectOverride !== null && effectOverride !== void 0 ? effectOverride : this.getEffect();\n        if (!effect) {\n            return;\n        }\n        if (this._options.uniforms.indexOf(\"world\") !== -1) {\n            effect.setMatrix(\"world\", world);\n        }\n        if (this._options.uniforms.indexOf(\"worldView\") !== -1) {\n            world.multiplyToRef(scene.getViewMatrix(), this._cachedWorldViewMatrix);\n            effect.setMatrix(\"worldView\", this._cachedWorldViewMatrix);\n        }\n        if (this._options.uniforms.indexOf(\"worldViewProjection\") !== -1) {\n            world.multiplyToRef(scene.getTransformMatrix(), this._cachedWorldViewProjectionMatrix);\n            effect.setMatrix(\"worldViewProjection\", this._cachedWorldViewProjectionMatrix);\n        }\n    }\n    /**\n     * Binds the submesh to this material by preparing the effect and shader to draw\n     * @param world defines the world transformation matrix\n     * @param mesh defines the mesh containing the submesh\n     * @param subMesh defines the submesh to bind the material to\n     */\n    bindForSubMesh(world, mesh, subMesh) {\n        var _a;\n        this.bind(world, mesh, (_a = subMesh._drawWrapperOverride) === null || _a === void 0 ? void 0 : _a.effect, subMesh);\n    }\n    /**\n     * Binds the material to the mesh\n     * @param world defines the world transformation matrix\n     * @param mesh defines the mesh to bind the material to\n     * @param effectOverride - If provided, use this effect instead of internal effect\n     * @param subMesh defines the submesh to bind the material to\n     */\n    bind(world, mesh, effectOverride, subMesh) {\n        var _a;\n        // Std values\n        const storeEffectOnSubMeshes = subMesh && this._storeEffectOnSubMeshes;\n        const effect = effectOverride !== null && effectOverride !== void 0 ? effectOverride : (storeEffectOnSubMeshes ? subMesh.effect : this.getEffect());\n        if (!effect) {\n            return;\n        }\n        this._activeEffect = effect;\n        this.bindOnlyWorldMatrix(world, effectOverride);\n        const uniformBuffers = this._options.uniformBuffers;\n        let useSceneUBO = false;\n        if (effect && uniformBuffers && uniformBuffers.length > 0 && this.getScene().getEngine().supportsUniformBuffers) {\n            for (let i = 0; i < uniformBuffers.length; ++i) {\n                const bufferName = uniformBuffers[i];\n                switch (bufferName) {\n                    case \"Mesh\":\n                        if (mesh) {\n                            mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\n                            mesh.transferToEffect(world);\n                        }\n                        break;\n                    case \"Scene\":\n                        MaterialHelper.BindSceneUniformBuffer(effect, this.getScene().getSceneUniformBuffer());\n                        this.getScene().finalizeSceneUbo();\n                        useSceneUBO = true;\n                        break;\n                }\n            }\n        }\n        const mustRebind = mesh && storeEffectOnSubMeshes ? this._mustRebind(this.getScene(), effect, mesh.visibility) : this.getScene().getCachedMaterial() !== this;\n        if (effect && mustRebind) {\n            if (!useSceneUBO && this._options.uniforms.indexOf(\"view\") !== -1) {\n                effect.setMatrix(\"view\", this.getScene().getViewMatrix());\n            }\n            if (!useSceneUBO && this._options.uniforms.indexOf(\"projection\") !== -1) {\n                effect.setMatrix(\"projection\", this.getScene().getProjectionMatrix());\n            }\n            if (!useSceneUBO && this._options.uniforms.indexOf(\"viewProjection\") !== -1) {\n                effect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\n                if (this._multiview) {\n                    effect.setMatrix(\"viewProjectionR\", this.getScene()._transformMatrixR);\n                }\n            }\n            if (this.getScene().activeCamera && this._options.uniforms.indexOf(\"cameraPosition\") !== -1) {\n                effect.setVector3(\"cameraPosition\", this.getScene().activeCamera.globalPosition);\n            }\n            // Bones\n            MaterialHelper.BindBonesParameters(mesh, effect);\n            // Clip plane\n            bindClipPlane(effect, this, this.getScene());\n            let name;\n            // Texture\n            for (name in this._textures) {\n                effect.setTexture(name, this._textures[name]);\n            }\n            // Texture arrays\n            for (name in this._textureArrays) {\n                effect.setTextureArray(name, this._textureArrays[name]);\n            }\n            // External texture\n            for (name in this._externalTextures) {\n                effect.setExternalTexture(name, this._externalTextures[name]);\n            }\n            // Int\n            for (name in this._ints) {\n                effect.setInt(name, this._ints[name]);\n            }\n            // UInt\n            for (name in this._uints) {\n                effect.setUInt(name, this._uints[name]);\n            }\n            // Float\n            for (name in this._floats) {\n                effect.setFloat(name, this._floats[name]);\n            }\n            // Floats\n            for (name in this._floatsArrays) {\n                effect.setArray(name, this._floatsArrays[name]);\n            }\n            // Color3\n            for (name in this._colors3) {\n                effect.setColor3(name, this._colors3[name]);\n            }\n            // Color3Array\n            for (name in this._colors3Arrays) {\n                effect.setArray3(name, this._colors3Arrays[name]);\n            }\n            // Color4\n            for (name in this._colors4) {\n                const color = this._colors4[name];\n                effect.setFloat4(name, color.r, color.g, color.b, color.a);\n            }\n            // Color4Array\n            for (name in this._colors4Arrays) {\n                effect.setArray4(name, this._colors4Arrays[name]);\n            }\n            // Vector2\n            for (name in this._vectors2) {\n                effect.setVector2(name, this._vectors2[name]);\n            }\n            // Vector3\n            for (name in this._vectors3) {\n                effect.setVector3(name, this._vectors3[name]);\n            }\n            // Vector4\n            for (name in this._vectors4) {\n                effect.setVector4(name, this._vectors4[name]);\n            }\n            // Quaternion\n            for (name in this._quaternions) {\n                effect.setQuaternion(name, this._quaternions[name]);\n            }\n            // Matrix\n            for (name in this._matrices) {\n                effect.setMatrix(name, this._matrices[name]);\n            }\n            // MatrixArray\n            for (name in this._matrixArrays) {\n                effect.setMatrices(name, this._matrixArrays[name]);\n            }\n            // Matrix 3x3\n            for (name in this._matrices3x3) {\n                effect.setMatrix3x3(name, this._matrices3x3[name]);\n            }\n            // Matrix 2x2\n            for (name in this._matrices2x2) {\n                effect.setMatrix2x2(name, this._matrices2x2[name]);\n            }\n            // Vector2Array\n            for (name in this._vectors2Arrays) {\n                effect.setArray2(name, this._vectors2Arrays[name]);\n            }\n            // Vector3Array\n            for (name in this._vectors3Arrays) {\n                effect.setArray3(name, this._vectors3Arrays[name]);\n            }\n            // Vector4Array\n            for (name in this._vectors4Arrays) {\n                effect.setArray4(name, this._vectors4Arrays[name]);\n            }\n            // QuaternionArray\n            for (name in this._quaternionsArrays) {\n                effect.setArray4(name, this._quaternionsArrays[name]);\n            }\n            // Uniform buffers\n            for (name in this._uniformBuffers) {\n                const buffer = this._uniformBuffers[name].getBuffer();\n                if (buffer) {\n                    effect.bindUniformBuffer(buffer, name);\n                }\n            }\n            // Samplers\n            for (name in this._textureSamplers) {\n                effect.setTextureSampler(name, this._textureSamplers[name]);\n            }\n            // Storage buffers\n            for (name in this._storageBuffers) {\n                effect.setStorageBuffer(name, this._storageBuffers[name]);\n            }\n        }\n        if (effect && mesh && (mustRebind || !this.isFrozen)) {\n            // Morph targets\n            const manager = mesh.morphTargetManager;\n            if (manager && manager.numInfluencers > 0) {\n                MaterialHelper.BindMorphTargetParameters(mesh, effect);\n            }\n            const bvaManager = mesh.bakedVertexAnimationManager;\n            if (bvaManager && bvaManager.isEnabled) {\n                (_a = mesh.bakedVertexAnimationManager) === null || _a === void 0 ? void 0 : _a.bind(effect, !!effect._wasPreviouslyUsingInstances);\n            }\n        }\n        this._afterBind(mesh, effect);\n    }\n    /**\n     * Gets the active textures from the material\n     * @returns an array of textures\n     */\n    getActiveTextures() {\n        const activeTextures = super.getActiveTextures();\n        for (const name in this._textures) {\n            activeTextures.push(this._textures[name]);\n        }\n        for (const name in this._textureArrays) {\n            const array = this._textureArrays[name];\n            for (let index = 0; index < array.length; index++) {\n                activeTextures.push(array[index]);\n            }\n        }\n        return activeTextures;\n    }\n    /**\n     * Specifies if the material uses a texture\n     * @param texture defines the texture to check against the material\n     * @returns a boolean specifying if the material uses the texture\n     */\n    hasTexture(texture) {\n        if (super.hasTexture(texture)) {\n            return true;\n        }\n        for (const name in this._textures) {\n            if (this._textures[name] === texture) {\n                return true;\n            }\n        }\n        for (const name in this._textureArrays) {\n            const array = this._textureArrays[name];\n            for (let index = 0; index < array.length; index++) {\n                if (array[index] === texture) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /**\n     * Makes a duplicate of the material, and gives it a new name\n     * @param name defines the new name for the duplicated material\n     * @returns the cloned material\n     */\n    clone(name) {\n        const result = SerializationHelper.Clone(() => new ShaderMaterial(name, this.getScene(), this._shaderPath, this._options, this._storeEffectOnSubMeshes), this);\n        result.name = name;\n        result.id = name;\n        // Shader code path\n        if (typeof result._shaderPath === \"object\") {\n            result._shaderPath = { ...result._shaderPath };\n        }\n        // Options\n        this._options = { ...this._options };\n        Object.keys(this._options).forEach((propName) => {\n            const propValue = this._options[propName];\n            if (Array.isArray(propValue)) {\n                this._options[propName] = propValue.slice(0);\n            }\n        });\n        // Stencil\n        this.stencil.copyTo(result.stencil);\n        // Texture\n        for (const key in this._textures) {\n            result.setTexture(key, this._textures[key]);\n        }\n        // TextureArray\n        for (const key in this._textureArrays) {\n            result.setTextureArray(key, this._textureArrays[key]);\n        }\n        // External texture\n        for (const key in this._externalTextures) {\n            result.setExternalTexture(key, this._externalTextures[key]);\n        }\n        // Int\n        for (const key in this._ints) {\n            result.setInt(key, this._ints[key]);\n        }\n        // UInt\n        for (const key in this._uints) {\n            result.setUInt(key, this._uints[key]);\n        }\n        // Float\n        for (const key in this._floats) {\n            result.setFloat(key, this._floats[key]);\n        }\n        // Floats\n        for (const key in this._floatsArrays) {\n            result.setFloats(key, this._floatsArrays[key]);\n        }\n        // Color3\n        for (const key in this._colors3) {\n            result.setColor3(key, this._colors3[key]);\n        }\n        // Color3Array\n        for (const key in this._colors3Arrays) {\n            result._colors3Arrays[key] = this._colors3Arrays[key];\n        }\n        // Color4\n        for (const key in this._colors4) {\n            result.setColor4(key, this._colors4[key]);\n        }\n        // Color4Array\n        for (const key in this._colors4Arrays) {\n            result._colors4Arrays[key] = this._colors4Arrays[key];\n        }\n        // Vector2\n        for (const key in this._vectors2) {\n            result.setVector2(key, this._vectors2[key]);\n        }\n        // Vector3\n        for (const key in this._vectors3) {\n            result.setVector3(key, this._vectors3[key]);\n        }\n        // Vector4\n        for (const key in this._vectors4) {\n            result.setVector4(key, this._vectors4[key]);\n        }\n        // Quaternion\n        for (const key in this._quaternions) {\n            result.setQuaternion(key, this._quaternions[key]);\n        }\n        // QuaternionArray\n        for (const key in this._quaternionsArrays) {\n            result._quaternionsArrays[key] = this._quaternionsArrays[key];\n        }\n        // Matrix\n        for (const key in this._matrices) {\n            result.setMatrix(key, this._matrices[key]);\n        }\n        // MatrixArray\n        for (const key in this._matrixArrays) {\n            result._matrixArrays[key] = this._matrixArrays[key].slice();\n        }\n        // Matrix 3x3\n        for (const key in this._matrices3x3) {\n            result.setMatrix3x3(key, this._matrices3x3[key]);\n        }\n        // Matrix 2x2\n        for (const key in this._matrices2x2) {\n            result.setMatrix2x2(key, this._matrices2x2[key]);\n        }\n        // Vector2Array\n        for (const key in this._vectors2Arrays) {\n            result.setArray2(key, this._vectors2Arrays[key]);\n        }\n        // Vector3Array\n        for (const key in this._vectors3Arrays) {\n            result.setArray3(key, this._vectors3Arrays[key]);\n        }\n        // Vector4Array\n        for (const key in this._vectors4Arrays) {\n            result.setArray4(key, this._vectors4Arrays[key]);\n        }\n        // Uniform buffers\n        for (const key in this._uniformBuffers) {\n            result.setUniformBuffer(key, this._uniformBuffers[key]);\n        }\n        // Samplers\n        for (const key in this._textureSamplers) {\n            result.setTextureSampler(key, this._textureSamplers[key]);\n        }\n        // Storag buffers\n        for (const key in this._storageBuffers) {\n            result.setStorageBuffer(key, this._storageBuffers[key]);\n        }\n        return result;\n    }\n    /**\n     * Disposes the material\n     * @param forceDisposeEffect specifies if effects should be forcefully disposed\n     * @param forceDisposeTextures specifies if textures should be forcefully disposed\n     * @param notBoundToMesh specifies if the material that is being disposed is known to be not bound to any mesh\n     */\n    dispose(forceDisposeEffect, forceDisposeTextures, notBoundToMesh) {\n        if (forceDisposeTextures) {\n            let name;\n            for (name in this._textures) {\n                this._textures[name].dispose();\n            }\n            for (name in this._textureArrays) {\n                const array = this._textureArrays[name];\n                for (let index = 0; index < array.length; index++) {\n                    array[index].dispose();\n                }\n            }\n        }\n        this._textures = {};\n        super.dispose(forceDisposeEffect, forceDisposeTextures, notBoundToMesh);\n    }\n    /**\n     * Serializes this material in a JSON representation\n     * @returns the serialized material object\n     */\n    serialize() {\n        const serializationObject = SerializationHelper.Serialize(this);\n        serializationObject.customType = \"BABYLON.ShaderMaterial\";\n        serializationObject.uniqueId = this.uniqueId;\n        serializationObject.options = this._options;\n        serializationObject.shaderPath = this._shaderPath;\n        serializationObject.storeEffectOnSubMeshes = this._storeEffectOnSubMeshes;\n        let name;\n        // Stencil\n        serializationObject.stencil = this.stencil.serialize();\n        // Texture\n        serializationObject.textures = {};\n        for (name in this._textures) {\n            serializationObject.textures[name] = this._textures[name].serialize();\n        }\n        // Texture arrays\n        serializationObject.textureArrays = {};\n        for (name in this._textureArrays) {\n            serializationObject.textureArrays[name] = [];\n            const array = this._textureArrays[name];\n            for (let index = 0; index < array.length; index++) {\n                serializationObject.textureArrays[name].push(array[index].serialize());\n            }\n        }\n        // Int\n        serializationObject.ints = {};\n        for (name in this._ints) {\n            serializationObject.ints[name] = this._ints[name];\n        }\n        // UInt\n        serializationObject.uints = {};\n        for (name in this._uints) {\n            serializationObject.uints[name] = this._uints[name];\n        }\n        // Float\n        serializationObject.floats = {};\n        for (name in this._floats) {\n            serializationObject.floats[name] = this._floats[name];\n        }\n        // Floats\n        serializationObject.FloatArrays = {};\n        for (name in this._floatsArrays) {\n            serializationObject.FloatArrays[name] = this._floatsArrays[name];\n        }\n        // Color3\n        serializationObject.colors3 = {};\n        for (name in this._colors3) {\n            serializationObject.colors3[name] = this._colors3[name].asArray();\n        }\n        // Color3 array\n        serializationObject.colors3Arrays = {};\n        for (name in this._colors3Arrays) {\n            serializationObject.colors3Arrays[name] = this._colors3Arrays[name];\n        }\n        // Color4\n        serializationObject.colors4 = {};\n        for (name in this._colors4) {\n            serializationObject.colors4[name] = this._colors4[name].asArray();\n        }\n        // Color4 array\n        serializationObject.colors4Arrays = {};\n        for (name in this._colors4Arrays) {\n            serializationObject.colors4Arrays[name] = this._colors4Arrays[name];\n        }\n        // Vector2\n        serializationObject.vectors2 = {};\n        for (name in this._vectors2) {\n            serializationObject.vectors2[name] = this._vectors2[name].asArray();\n        }\n        // Vector3\n        serializationObject.vectors3 = {};\n        for (name in this._vectors3) {\n            serializationObject.vectors3[name] = this._vectors3[name].asArray();\n        }\n        // Vector4\n        serializationObject.vectors4 = {};\n        for (name in this._vectors4) {\n            serializationObject.vectors4[name] = this._vectors4[name].asArray();\n        }\n        // Quaternion\n        serializationObject.quaternions = {};\n        for (name in this._quaternions) {\n            serializationObject.quaternions[name] = this._quaternions[name].asArray();\n        }\n        // Matrix\n        serializationObject.matrices = {};\n        for (name in this._matrices) {\n            serializationObject.matrices[name] = this._matrices[name].asArray();\n        }\n        // MatrixArray\n        serializationObject.matrixArray = {};\n        for (name in this._matrixArrays) {\n            serializationObject.matrixArray[name] = this._matrixArrays[name];\n        }\n        // Matrix 3x3\n        serializationObject.matrices3x3 = {};\n        for (name in this._matrices3x3) {\n            serializationObject.matrices3x3[name] = this._matrices3x3[name];\n        }\n        // Matrix 2x2\n        serializationObject.matrices2x2 = {};\n        for (name in this._matrices2x2) {\n            serializationObject.matrices2x2[name] = this._matrices2x2[name];\n        }\n        // Vector2Array\n        serializationObject.vectors2Arrays = {};\n        for (name in this._vectors2Arrays) {\n            serializationObject.vectors2Arrays[name] = this._vectors2Arrays[name];\n        }\n        // Vector3Array\n        serializationObject.vectors3Arrays = {};\n        for (name in this._vectors3Arrays) {\n            serializationObject.vectors3Arrays[name] = this._vectors3Arrays[name];\n        }\n        // Vector4Array\n        serializationObject.vectors4Arrays = {};\n        for (name in this._vectors4Arrays) {\n            serializationObject.vectors4Arrays[name] = this._vectors4Arrays[name];\n        }\n        // QuaternionArray\n        serializationObject.quaternionsArrays = {};\n        for (name in this._quaternionsArrays) {\n            serializationObject.quaternionsArrays[name] = this._quaternionsArrays[name];\n        }\n        return serializationObject;\n    }\n    /**\n     * Creates a shader material from parsed shader material data\n     * @param source defines the JSON representation of the material\n     * @param scene defines the hosting scene\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\n     * @returns a new material\n     */\n    static Parse(source, scene, rootUrl) {\n        const material = SerializationHelper.Parse(() => new ShaderMaterial(source.name, scene, source.shaderPath, source.options, source.storeEffectOnSubMeshes), source, scene, rootUrl);\n        let name;\n        // Stencil\n        if (source.stencil) {\n            material.stencil.parse(source.stencil, scene, rootUrl);\n        }\n        // Texture\n        for (name in source.textures) {\n            material.setTexture(name, Texture.Parse(source.textures[name], scene, rootUrl));\n        }\n        // Texture arrays\n        for (name in source.textureArrays) {\n            const array = source.textureArrays[name];\n            const textureArray = new Array();\n            for (let index = 0; index < array.length; index++) {\n                textureArray.push(Texture.Parse(array[index], scene, rootUrl));\n            }\n            material.setTextureArray(name, textureArray);\n        }\n        // Int\n        for (name in source.ints) {\n            material.setInt(name, source.ints[name]);\n        }\n        // UInt\n        for (name in source.uints) {\n            material.setUInt(name, source.uints[name]);\n        }\n        // Float\n        for (name in source.floats) {\n            material.setFloat(name, source.floats[name]);\n        }\n        // Floats\n        for (name in source.floatsArrays) {\n            material.setFloats(name, source.floatsArrays[name]);\n        }\n        // Color3\n        for (name in source.colors3) {\n            material.setColor3(name, Color3.FromArray(source.colors3[name]));\n        }\n        // Color3 arrays\n        for (name in source.colors3Arrays) {\n            const colors = source.colors3Arrays[name]\n                .reduce((arr, num, i) => {\n                if (i % 3 === 0) {\n                    arr.push([num]);\n                }\n                else {\n                    arr[arr.length - 1].push(num);\n                }\n                return arr;\n            }, [])\n                .map((color) => Color3.FromArray(color));\n            material.setColor3Array(name, colors);\n        }\n        // Color4\n        for (name in source.colors4) {\n            material.setColor4(name, Color4.FromArray(source.colors4[name]));\n        }\n        // Color4 arrays\n        for (name in source.colors4Arrays) {\n            const colors = source.colors4Arrays[name]\n                .reduce((arr, num, i) => {\n                if (i % 4 === 0) {\n                    arr.push([num]);\n                }\n                else {\n                    arr[arr.length - 1].push(num);\n                }\n                return arr;\n            }, [])\n                .map((color) => Color4.FromArray(color));\n            material.setColor4Array(name, colors);\n        }\n        // Vector2\n        for (name in source.vectors2) {\n            material.setVector2(name, Vector2.FromArray(source.vectors2[name]));\n        }\n        // Vector3\n        for (name in source.vectors3) {\n            material.setVector3(name, Vector3.FromArray(source.vectors3[name]));\n        }\n        // Vector4\n        for (name in source.vectors4) {\n            material.setVector4(name, Vector4.FromArray(source.vectors4[name]));\n        }\n        // Quaternion\n        for (name in source.quaternions) {\n            material.setQuaternion(name, Quaternion.FromArray(source.quaternions[name]));\n        }\n        // Matrix\n        for (name in source.matrices) {\n            material.setMatrix(name, Matrix.FromArray(source.matrices[name]));\n        }\n        // MatrixArray\n        for (name in source.matrixArray) {\n            material._matrixArrays[name] = new Float32Array(source.matrixArray[name]);\n        }\n        // Matrix 3x3\n        for (name in source.matrices3x3) {\n            material.setMatrix3x3(name, source.matrices3x3[name]);\n        }\n        // Matrix 2x2\n        for (name in source.matrices2x2) {\n            material.setMatrix2x2(name, source.matrices2x2[name]);\n        }\n        // Vector2Array\n        for (name in source.vectors2Arrays) {\n            material.setArray2(name, source.vectors2Arrays[name]);\n        }\n        // Vector3Array\n        for (name in source.vectors3Arrays) {\n            material.setArray3(name, source.vectors3Arrays[name]);\n        }\n        // Vector4Array\n        for (name in source.vectors4Arrays) {\n            material.setArray4(name, source.vectors4Arrays[name]);\n        }\n        // QuaternionArray\n        for (name in source.quaternionsArrays) {\n            material.setArray4(name, source.quaternionsArrays[name]);\n        }\n        return material;\n    }\n    /**\n     * Creates a new ShaderMaterial from a snippet saved in a remote file\n     * @param name defines the name of the ShaderMaterial to create (can be null or empty to use the one from the json data)\n     * @param url defines the url to load from\n     * @param scene defines the hosting scene\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\n     * @returns a promise that will resolve to the new ShaderMaterial\n     */\n    static ParseFromFileAsync(name, url, scene, rootUrl = \"\") {\n        return new Promise((resolve, reject) => {\n            const request = new WebRequest();\n            request.addEventListener(\"readystatechange\", () => {\n                if (request.readyState == 4) {\n                    if (request.status == 200) {\n                        const serializationObject = JSON.parse(request.responseText);\n                        const output = this.Parse(serializationObject, scene || EngineStore.LastCreatedScene, rootUrl);\n                        if (name) {\n                            output.name = name;\n                        }\n                        resolve(output);\n                    }\n                    else {\n                        reject(\"Unable to load the ShaderMaterial\");\n                    }\n                }\n            });\n            request.open(\"GET\", url);\n            request.send();\n        });\n    }\n    /**\n     * Creates a ShaderMaterial from a snippet saved by the Inspector\n     * @param snippetId defines the snippet to load\n     * @param scene defines the hosting scene\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\n     * @returns a promise that will resolve to the new ShaderMaterial\n     */\n    static ParseFromSnippetAsync(snippetId, scene, rootUrl = \"\") {\n        return new Promise((resolve, reject) => {\n            const request = new WebRequest();\n            request.addEventListener(\"readystatechange\", () => {\n                if (request.readyState == 4) {\n                    if (request.status == 200) {\n                        const snippet = JSON.parse(JSON.parse(request.responseText).jsonPayload);\n                        const serializationObject = JSON.parse(snippet.shaderMaterial);\n                        const output = this.Parse(serializationObject, scene || EngineStore.LastCreatedScene, rootUrl);\n                        output.snippetId = snippetId;\n                        resolve(output);\n                    }\n                    else {\n                        reject(\"Unable to load the snippet \" + snippetId);\n                    }\n                }\n            });\n            request.open(\"GET\", this.SnippetUrl + \"/\" + snippetId.replace(/#/g, \"/\"));\n            request.send();\n        });\n    }\n}\n/** Define the Url to load snippets */\nShaderMaterial.SnippetUrl = `https://snippet.babylonjs.com`;\n/**\n * Creates a ShaderMaterial from a snippet saved by the Inspector\n * @deprecated Please use ParseFromSnippetAsync instead\n * @param snippetId defines the snippet to load\n * @param scene defines the hosting scene\n * @param rootUrl defines the root URL to use to load textures and relative dependencies\n * @returns a promise that will resolve to the new ShaderMaterial\n */\nShaderMaterial.CreateFromSnippetAsync = ShaderMaterial.ParseFromSnippetAsync;\nRegisterClass(\"BABYLON.ShaderMaterial\", ShaderMaterial);\n//# sourceMappingURL=shaderMaterial.js.map","import { __decorate } from \"../tslib.es6.js\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { serialize, SerializationHelper, serializeAsColor3, expandToProperty, serializeAsFresnelParameters, serializeAsTexture } from \"../Misc/decorators.js\";\nimport { SmartArray } from \"../Misc/smartArray.js\";\nimport { Scene, ScenePerformancePriority } from \"../scene.js\";\nimport { Matrix } from \"../Maths/math.vector.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { PrePassConfiguration } from \"./prePassConfiguration.js\";\nimport { ImageProcessingConfiguration } from \"./imageProcessingConfiguration.js\";\nimport { Material } from \"../Materials/material.js\";\nimport { MaterialPluginEvent } from \"./materialPluginEvent.js\";\nimport { MaterialDefines } from \"../Materials/materialDefines.js\";\nimport { PushMaterial } from \"./pushMaterial.js\";\nimport { MaterialHelper } from \"./materialHelper.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { MaterialFlags } from \"./materialFlags.js\";\nimport \"../Shaders/default.fragment.js\";\nimport \"../Shaders/default.vertex.js\";\n\nimport { EffectFallbacks } from \"./effectFallbacks.js\";\nimport { DetailMapConfiguration } from \"./material.detailMapConfiguration.js\";\nimport { addClipPlaneUniforms, bindClipPlane } from \"./clipPlaneMaterialHelper.js\";\nconst onCreatedEffectParameters = { effect: null, subMesh: null };\n/** @internal */\nexport class StandardMaterialDefines extends MaterialDefines {\n    /**\n     * Initializes the Standard Material defines.\n     * @param externalProperties The external properties\n     */\n    constructor(externalProperties) {\n        super(externalProperties);\n        this.MAINUV1 = false;\n        this.MAINUV2 = false;\n        this.MAINUV3 = false;\n        this.MAINUV4 = false;\n        this.MAINUV5 = false;\n        this.MAINUV6 = false;\n        this.DIFFUSE = false;\n        this.DIFFUSEDIRECTUV = 0;\n        this.BAKED_VERTEX_ANIMATION_TEXTURE = false;\n        this.AMBIENT = false;\n        this.AMBIENTDIRECTUV = 0;\n        this.OPACITY = false;\n        this.OPACITYDIRECTUV = 0;\n        this.OPACITYRGB = false;\n        this.REFLECTION = false;\n        this.EMISSIVE = false;\n        this.EMISSIVEDIRECTUV = 0;\n        this.SPECULAR = false;\n        this.SPECULARDIRECTUV = 0;\n        this.BUMP = false;\n        this.BUMPDIRECTUV = 0;\n        this.PARALLAX = false;\n        this.PARALLAXOCCLUSION = false;\n        this.SPECULAROVERALPHA = false;\n        this.CLIPPLANE = false;\n        this.CLIPPLANE2 = false;\n        this.CLIPPLANE3 = false;\n        this.CLIPPLANE4 = false;\n        this.CLIPPLANE5 = false;\n        this.CLIPPLANE6 = false;\n        this.ALPHATEST = false;\n        this.DEPTHPREPASS = false;\n        this.ALPHAFROMDIFFUSE = false;\n        this.POINTSIZE = false;\n        this.FOG = false;\n        this.SPECULARTERM = false;\n        this.DIFFUSEFRESNEL = false;\n        this.OPACITYFRESNEL = false;\n        this.REFLECTIONFRESNEL = false;\n        this.REFRACTIONFRESNEL = false;\n        this.EMISSIVEFRESNEL = false;\n        this.FRESNEL = false;\n        this.NORMAL = false;\n        this.TANGENT = false;\n        this.UV1 = false;\n        this.UV2 = false;\n        this.UV3 = false;\n        this.UV4 = false;\n        this.UV5 = false;\n        this.UV6 = false;\n        this.VERTEXCOLOR = false;\n        this.VERTEXALPHA = false;\n        this.NUM_BONE_INFLUENCERS = 0;\n        this.BonesPerMesh = 0;\n        this.BONETEXTURE = false;\n        this.BONES_VELOCITY_ENABLED = false;\n        this.INSTANCES = false;\n        this.THIN_INSTANCES = false;\n        this.INSTANCESCOLOR = false;\n        this.GLOSSINESS = false;\n        this.ROUGHNESS = false;\n        this.EMISSIVEASILLUMINATION = false;\n        this.LINKEMISSIVEWITHDIFFUSE = false;\n        this.REFLECTIONFRESNELFROMSPECULAR = false;\n        this.LIGHTMAP = false;\n        this.LIGHTMAPDIRECTUV = 0;\n        this.OBJECTSPACE_NORMALMAP = false;\n        this.USELIGHTMAPASSHADOWMAP = false;\n        this.REFLECTIONMAP_3D = false;\n        this.REFLECTIONMAP_SPHERICAL = false;\n        this.REFLECTIONMAP_PLANAR = false;\n        this.REFLECTIONMAP_CUBIC = false;\n        this.USE_LOCAL_REFLECTIONMAP_CUBIC = false;\n        this.USE_LOCAL_REFRACTIONMAP_CUBIC = false;\n        this.REFLECTIONMAP_PROJECTION = false;\n        this.REFLECTIONMAP_SKYBOX = false;\n        this.REFLECTIONMAP_EXPLICIT = false;\n        this.REFLECTIONMAP_EQUIRECTANGULAR = false;\n        this.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\n        this.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\n        this.REFLECTIONMAP_OPPOSITEZ = false;\n        this.INVERTCUBICMAP = false;\n        this.LOGARITHMICDEPTH = false;\n        this.REFRACTION = false;\n        this.REFRACTIONMAP_3D = false;\n        this.REFLECTIONOVERALPHA = false;\n        this.TWOSIDEDLIGHTING = false;\n        this.SHADOWFLOAT = false;\n        this.MORPHTARGETS = false;\n        this.MORPHTARGETS_NORMAL = false;\n        this.MORPHTARGETS_TANGENT = false;\n        this.MORPHTARGETS_UV = false;\n        this.NUM_MORPH_INFLUENCERS = 0;\n        this.MORPHTARGETS_TEXTURE = false;\n        this.NONUNIFORMSCALING = false; // https://playground.babylonjs.com#V6DWIH\n        this.PREMULTIPLYALPHA = false; // https://playground.babylonjs.com#LNVJJ7\n        this.ALPHATEST_AFTERALLALPHACOMPUTATIONS = false;\n        this.ALPHABLEND = true;\n        this.PREPASS = false;\n        this.PREPASS_IRRADIANCE = false;\n        this.PREPASS_IRRADIANCE_INDEX = -1;\n        this.PREPASS_ALBEDO_SQRT = false;\n        this.PREPASS_ALBEDO_SQRT_INDEX = -1;\n        this.PREPASS_DEPTH = false;\n        this.PREPASS_DEPTH_INDEX = -1;\n        this.PREPASS_NORMAL = false;\n        this.PREPASS_NORMAL_INDEX = -1;\n        this.PREPASS_POSITION = false;\n        this.PREPASS_POSITION_INDEX = -1;\n        this.PREPASS_VELOCITY = false;\n        this.PREPASS_VELOCITY_INDEX = -1;\n        this.PREPASS_REFLECTIVITY = false;\n        this.PREPASS_REFLECTIVITY_INDEX = -1;\n        this.SCENE_MRT_COUNT = 0;\n        this.RGBDLIGHTMAP = false;\n        this.RGBDREFLECTION = false;\n        this.RGBDREFRACTION = false;\n        this.IMAGEPROCESSING = false;\n        this.VIGNETTE = false;\n        this.VIGNETTEBLENDMODEMULTIPLY = false;\n        this.VIGNETTEBLENDMODEOPAQUE = false;\n        this.TONEMAPPING = false;\n        this.TONEMAPPING_ACES = false;\n        this.CONTRAST = false;\n        this.COLORCURVES = false;\n        this.COLORGRADING = false;\n        this.COLORGRADING3D = false;\n        this.SAMPLER3DGREENDEPTH = false;\n        this.SAMPLER3DBGRMAP = false;\n        this.DITHER = false;\n        this.IMAGEPROCESSINGPOSTPROCESS = false;\n        this.SKIPFINALCOLORCLAMP = false;\n        this.MULTIVIEW = false;\n        this.ORDER_INDEPENDENT_TRANSPARENCY = false;\n        this.ORDER_INDEPENDENT_TRANSPARENCY_16BITS = false;\n        this.CAMERA_ORTHOGRAPHIC = false;\n        this.CAMERA_PERSPECTIVE = false;\n        /**\n         * If the reflection texture on this material is in linear color space\n         * @internal\n         */\n        this.IS_REFLECTION_LINEAR = false;\n        /**\n         * If the refraction texture on this material is in linear color space\n         * @internal\n         */\n        this.IS_REFRACTION_LINEAR = false;\n        this.EXPOSURE = false;\n        this.rebuild();\n    }\n    setReflectionMode(modeToEnable) {\n        const modes = [\n            \"REFLECTIONMAP_CUBIC\",\n            \"REFLECTIONMAP_EXPLICIT\",\n            \"REFLECTIONMAP_PLANAR\",\n            \"REFLECTIONMAP_PROJECTION\",\n            \"REFLECTIONMAP_PROJECTION\",\n            \"REFLECTIONMAP_SKYBOX\",\n            \"REFLECTIONMAP_SPHERICAL\",\n            \"REFLECTIONMAP_EQUIRECTANGULAR\",\n            \"REFLECTIONMAP_EQUIRECTANGULAR_FIXED\",\n            \"REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED\",\n        ];\n        for (const mode of modes) {\n            this[mode] = mode === modeToEnable;\n        }\n    }\n}\n/**\n * This is the default material used in Babylon. It is the best trade off between quality\n * and performances.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction\n */\nexport class StandardMaterial extends PushMaterial {\n    /**\n     * Gets the image processing configuration used either in this material.\n     */\n    get imageProcessingConfiguration() {\n        return this._imageProcessingConfiguration;\n    }\n    /**\n     * Sets the Default image processing configuration used either in the this material.\n     *\n     * If sets to null, the scene one is in use.\n     */\n    set imageProcessingConfiguration(value) {\n        this._attachImageProcessingConfiguration(value);\n        // Ensure the effect will be rebuilt.\n        this._markAllSubMeshesAsTexturesDirty();\n    }\n    /**\n     * Attaches a new image processing configuration to the Standard Material.\n     * @param configuration\n     */\n    _attachImageProcessingConfiguration(configuration) {\n        if (configuration === this._imageProcessingConfiguration) {\n            return;\n        }\n        // Detaches observer\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n        }\n        // Pick the scene configuration if needed\n        if (!configuration) {\n            this._imageProcessingConfiguration = this.getScene().imageProcessingConfiguration;\n        }\n        else {\n            this._imageProcessingConfiguration = configuration;\n        }\n        // Attaches observer\n        if (this._imageProcessingConfiguration) {\n            this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(() => {\n                this._markAllSubMeshesAsImageProcessingDirty();\n            });\n        }\n    }\n    /**\n     * Can this material render to prepass\n     */\n    get isPrePassCapable() {\n        return !this.disableDepthWrite;\n    }\n    /**\n     * Gets whether the color curves effect is enabled.\n     */\n    get cameraColorCurvesEnabled() {\n        return this.imageProcessingConfiguration.colorCurvesEnabled;\n    }\n    /**\n     * Sets whether the color curves effect is enabled.\n     */\n    set cameraColorCurvesEnabled(value) {\n        this.imageProcessingConfiguration.colorCurvesEnabled = value;\n    }\n    /**\n     * Gets whether the color grading effect is enabled.\n     */\n    get cameraColorGradingEnabled() {\n        return this.imageProcessingConfiguration.colorGradingEnabled;\n    }\n    /**\n     * Gets whether the color grading effect is enabled.\n     */\n    set cameraColorGradingEnabled(value) {\n        this.imageProcessingConfiguration.colorGradingEnabled = value;\n    }\n    /**\n     * Gets whether tonemapping is enabled or not.\n     */\n    get cameraToneMappingEnabled() {\n        return this._imageProcessingConfiguration.toneMappingEnabled;\n    }\n    /**\n     * Sets whether tonemapping is enabled or not\n     */\n    set cameraToneMappingEnabled(value) {\n        this._imageProcessingConfiguration.toneMappingEnabled = value;\n    }\n    /**\n     * The camera exposure used on this material.\n     * This property is here and not in the camera to allow controlling exposure without full screen post process.\n     * This corresponds to a photographic exposure.\n     */\n    get cameraExposure() {\n        return this._imageProcessingConfiguration.exposure;\n    }\n    /**\n     * The camera exposure used on this material.\n     * This property is here and not in the camera to allow controlling exposure without full screen post process.\n     * This corresponds to a photographic exposure.\n     */\n    set cameraExposure(value) {\n        this._imageProcessingConfiguration.exposure = value;\n    }\n    /**\n     * Gets The camera contrast used on this material.\n     */\n    get cameraContrast() {\n        return this._imageProcessingConfiguration.contrast;\n    }\n    /**\n     * Sets The camera contrast used on this material.\n     */\n    set cameraContrast(value) {\n        this._imageProcessingConfiguration.contrast = value;\n    }\n    /**\n     * Gets the Color Grading 2D Lookup Texture.\n     */\n    get cameraColorGradingTexture() {\n        return this._imageProcessingConfiguration.colorGradingTexture;\n    }\n    /**\n     * Sets the Color Grading 2D Lookup Texture.\n     */\n    set cameraColorGradingTexture(value) {\n        this._imageProcessingConfiguration.colorGradingTexture = value;\n    }\n    /**\n     * The color grading curves provide additional color adjustmnent that is applied after any color grading transform (3D LUT).\n     * They allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\n     * These are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\n     * corresponding to low luminance, medium luminance, and high luminance areas respectively.\n     */\n    get cameraColorCurves() {\n        return this._imageProcessingConfiguration.colorCurves;\n    }\n    /**\n     * The color grading curves provide additional color adjustment that is applied after any color grading transform (3D LUT).\n     * They allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\n     * These are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\n     * corresponding to low luminance, medium luminance, and high luminance areas respectively.\n     */\n    set cameraColorCurves(value) {\n        this._imageProcessingConfiguration.colorCurves = value;\n    }\n    /**\n     * Can this material render to several textures at once\n     */\n    get canRenderToMRT() {\n        return true;\n    }\n    /**\n     * Instantiates a new standard material.\n     * This is the default material used in Babylon. It is the best trade off between quality\n     * and performances.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction\n     * @param name Define the name of the material in the scene\n     * @param scene Define the scene the material belong to\n     */\n    constructor(name, scene) {\n        super(name, scene);\n        this._diffuseTexture = null;\n        this._ambientTexture = null;\n        this._opacityTexture = null;\n        this._reflectionTexture = null;\n        this._emissiveTexture = null;\n        this._specularTexture = null;\n        this._bumpTexture = null;\n        this._lightmapTexture = null;\n        this._refractionTexture = null;\n        /**\n         * The color of the material lit by the environmental background lighting.\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction#ambient-color-example\n         */\n        this.ambientColor = new Color3(0, 0, 0);\n        /**\n         * The basic color of the material as viewed under a light.\n         */\n        this.diffuseColor = new Color3(1, 1, 1);\n        /**\n         * Define how the color and intensity of the highlight given by the light in the material.\n         */\n        this.specularColor = new Color3(1, 1, 1);\n        /**\n         * Define the color of the material as if self lit.\n         * This will be mixed in the final result even in the absence of light.\n         */\n        this.emissiveColor = new Color3(0, 0, 0);\n        /**\n         * Defines how sharp are the highlights in the material.\n         * The bigger the value the sharper giving a more glossy feeling to the result.\n         * Reversely, the smaller the value the blurrier giving a more rough feeling to the result.\n         */\n        this.specularPower = 64;\n        this._useAlphaFromDiffuseTexture = false;\n        this._useEmissiveAsIllumination = false;\n        this._linkEmissiveWithDiffuse = false;\n        this._useSpecularOverAlpha = false;\n        this._useReflectionOverAlpha = false;\n        this._disableLighting = false;\n        this._useObjectSpaceNormalMap = false;\n        this._useParallax = false;\n        this._useParallaxOcclusion = false;\n        /**\n         * Apply a scaling factor that determine which \"depth\" the height map should reprensent. A value between 0.05 and 0.1 is reasonnable in Parallax, you can reach 0.2 using Parallax Occlusion.\n         */\n        this.parallaxScaleBias = 0.05;\n        this._roughness = 0;\n        /**\n         * In case of refraction, define the value of the index of refraction.\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#how-to-obtain-reflections-and-refractions\n         */\n        this.indexOfRefraction = 0.98;\n        /**\n         * Invert the refraction texture alongside the y axis.\n         * It can be useful with procedural textures or probe for instance.\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#how-to-obtain-reflections-and-refractions\n         */\n        this.invertRefractionY = true;\n        /**\n         * Defines the alpha limits in alpha test mode.\n         */\n        this.alphaCutOff = 0.4;\n        this._useLightmapAsShadowmap = false;\n        this._useReflectionFresnelFromSpecular = false;\n        this._useGlossinessFromSpecularMapAlpha = false;\n        this._maxSimultaneousLights = 4;\n        this._invertNormalMapX = false;\n        this._invertNormalMapY = false;\n        this._twoSidedLighting = false;\n        this._renderTargets = new SmartArray(16);\n        this._worldViewProjectionMatrix = Matrix.Zero();\n        this._globalAmbientColor = new Color3(0, 0, 0);\n        this._cacheHasRenderTargetTextures = false;\n        this.detailMap = new DetailMapConfiguration(this);\n        // Setup the default processing configuration to the scene.\n        this._attachImageProcessingConfiguration(null);\n        this.prePassConfiguration = new PrePassConfiguration();\n        this.getRenderTargetTextures = () => {\n            this._renderTargets.reset();\n            if (StandardMaterial.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\n                this._renderTargets.push(this._reflectionTexture);\n            }\n            if (StandardMaterial.RefractionTextureEnabled && this._refractionTexture && this._refractionTexture.isRenderTarget) {\n                this._renderTargets.push(this._refractionTexture);\n            }\n            this._eventInfo.renderTargets = this._renderTargets;\n            this._callbackPluginEventFillRenderTargetTextures(this._eventInfo);\n            return this._renderTargets;\n        };\n    }\n    /**\n     * Gets a boolean indicating that current material needs to register RTT\n     */\n    get hasRenderTargetTextures() {\n        if (StandardMaterial.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\n            return true;\n        }\n        if (StandardMaterial.RefractionTextureEnabled && this._refractionTexture && this._refractionTexture.isRenderTarget) {\n            return true;\n        }\n        return this._cacheHasRenderTargetTextures;\n    }\n    /**\n     * Gets the current class name of the material e.g. \"StandardMaterial\"\n     * Mainly use in serialization.\n     * @returns the class name\n     */\n    getClassName() {\n        return \"StandardMaterial\";\n    }\n    /**\n     * In case the depth buffer does not allow enough depth precision for your scene (might be the case in large scenes)\n     * You can try switching to logarithmic depth.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/advanced/logarithmicDepthBuffer\n     */\n    get useLogarithmicDepth() {\n        return this._useLogarithmicDepth;\n    }\n    set useLogarithmicDepth(value) {\n        this._useLogarithmicDepth = value && this.getScene().getEngine().getCaps().fragmentDepthSupported;\n        this._markAllSubMeshesAsMiscDirty();\n    }\n    /**\n     * Specifies if the material will require alpha blending\n     * @returns a boolean specifying if alpha blending is needed\n     */\n    needAlphaBlending() {\n        if (this._disableAlphaBlending) {\n            return false;\n        }\n        return (this.alpha < 1.0 ||\n            this._opacityTexture != null ||\n            this._shouldUseAlphaFromDiffuseTexture() ||\n            (this._opacityFresnelParameters && this._opacityFresnelParameters.isEnabled));\n    }\n    /**\n     * Specifies if this material should be rendered in alpha test mode\n     * @returns a boolean specifying if an alpha test is needed.\n     */\n    needAlphaTesting() {\n        if (this._forceAlphaTest) {\n            return true;\n        }\n        return this._hasAlphaChannel() && (this._transparencyMode == null || this._transparencyMode === Material.MATERIAL_ALPHATEST);\n    }\n    /**\n     * Specifies whether or not the alpha value of the diffuse texture should be used for alpha blending.\n     */\n    _shouldUseAlphaFromDiffuseTexture() {\n        return this._diffuseTexture != null && this._diffuseTexture.hasAlpha && this._useAlphaFromDiffuseTexture && this._transparencyMode !== Material.MATERIAL_OPAQUE;\n    }\n    /**\n     * Specifies whether or not there is a usable alpha channel for transparency.\n     */\n    _hasAlphaChannel() {\n        return (this._diffuseTexture != null && this._diffuseTexture.hasAlpha) || this._opacityTexture != null;\n    }\n    /**\n     * Get the texture used for alpha test purpose.\n     * @returns the diffuse texture in case of the standard material.\n     */\n    getAlphaTestTexture() {\n        return this._diffuseTexture;\n    }\n    /**\n     * Get if the submesh is ready to be used and all its information available.\n     * Child classes can use it to update shaders\n     * @param mesh defines the mesh to check\n     * @param subMesh defines which submesh to check\n     * @param useInstances specifies that instances should be used\n     * @returns a boolean indicating that the submesh is ready or not\n     */\n    isReadyForSubMesh(mesh, subMesh, useInstances = false) {\n        if (!this._uniformBufferLayoutBuilt) {\n            this.buildUniformLayout();\n        }\n        if (subMesh.effect && this.isFrozen) {\n            if (subMesh.effect._wasPreviouslyReady && subMesh.effect._wasPreviouslyUsingInstances === useInstances) {\n                return true;\n            }\n        }\n        if (!subMesh.materialDefines) {\n            this._callbackPluginEventGeneric(MaterialPluginEvent.GetDefineNames, this._eventInfo);\n            subMesh.materialDefines = new StandardMaterialDefines(this._eventInfo.defineNames);\n        }\n        const scene = this.getScene();\n        const defines = subMesh.materialDefines;\n        if (this._isReadyForSubMesh(subMesh)) {\n            return true;\n        }\n        const engine = scene.getEngine();\n        // Lights\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, true, this._maxSimultaneousLights, this._disableLighting);\n        // Multiview\n        MaterialHelper.PrepareDefinesForMultiview(scene, defines);\n        // PrePass\n        const oit = this.needAlphaBlendingForMesh(mesh) && this.getScene().useOrderIndependentTransparency;\n        MaterialHelper.PrepareDefinesForPrePass(scene, defines, this.canRenderToMRT && !oit);\n        // Order independant transparency\n        MaterialHelper.PrepareDefinesForOIT(scene, defines, oit);\n        // Textures\n        if (defines._areTexturesDirty) {\n            this._eventInfo.hasRenderTargetTextures = false;\n            this._callbackPluginEventHasRenderTargetTextures(this._eventInfo);\n            this._cacheHasRenderTargetTextures = this._eventInfo.hasRenderTargetTextures;\n            defines._needUVs = false;\n            for (let i = 1; i <= 6; ++i) {\n                defines[\"MAINUV\" + i] = false;\n            }\n            if (scene.texturesEnabled) {\n                defines.DIFFUSEDIRECTUV = 0;\n                defines.BUMPDIRECTUV = 0;\n                defines.AMBIENTDIRECTUV = 0;\n                defines.OPACITYDIRECTUV = 0;\n                defines.EMISSIVEDIRECTUV = 0;\n                defines.SPECULARDIRECTUV = 0;\n                defines.LIGHTMAPDIRECTUV = 0;\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\n                    if (!this._diffuseTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._diffuseTexture, defines, \"DIFFUSE\");\n                    }\n                }\n                else {\n                    defines.DIFFUSE = false;\n                }\n                if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\n                    if (!this._ambientTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._ambientTexture, defines, \"AMBIENT\");\n                    }\n                }\n                else {\n                    defines.AMBIENT = false;\n                }\n                if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\n                    if (!this._opacityTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._opacityTexture, defines, \"OPACITY\");\n                        defines.OPACITYRGB = this._opacityTexture.getAlphaFromRGB;\n                    }\n                }\n                else {\n                    defines.OPACITY = false;\n                }\n                if (this._reflectionTexture && StandardMaterial.ReflectionTextureEnabled) {\n                    if (!this._reflectionTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        defines._needNormals = true;\n                        defines.REFLECTION = true;\n                        defines.ROUGHNESS = this._roughness > 0;\n                        defines.REFLECTIONOVERALPHA = this._useReflectionOverAlpha;\n                        defines.INVERTCUBICMAP = this._reflectionTexture.coordinatesMode === Texture.INVCUBIC_MODE;\n                        defines.REFLECTIONMAP_3D = this._reflectionTexture.isCube;\n                        defines.REFLECTIONMAP_OPPOSITEZ =\n                            defines.REFLECTIONMAP_3D && this.getScene().useRightHandedSystem ? !this._reflectionTexture.invertZ : this._reflectionTexture.invertZ;\n                        defines.RGBDREFLECTION = this._reflectionTexture.isRGBD;\n                        switch (this._reflectionTexture.coordinatesMode) {\n                            case Texture.EXPLICIT_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_EXPLICIT\");\n                                break;\n                            case Texture.PLANAR_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_PLANAR\");\n                                break;\n                            case Texture.PROJECTION_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_PROJECTION\");\n                                break;\n                            case Texture.SKYBOX_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_SKYBOX\");\n                                break;\n                            case Texture.SPHERICAL_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_SPHERICAL\");\n                                break;\n                            case Texture.EQUIRECTANGULAR_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_EQUIRECTANGULAR\");\n                                break;\n                            case Texture.FIXED_EQUIRECTANGULAR_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_EQUIRECTANGULAR_FIXED\");\n                                break;\n                            case Texture.FIXED_EQUIRECTANGULAR_MIRRORED_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED\");\n                                break;\n                            case Texture.CUBIC_MODE:\n                            case Texture.INVCUBIC_MODE:\n                            default:\n                                defines.setReflectionMode(\"REFLECTIONMAP_CUBIC\");\n                                break;\n                        }\n                        defines.USE_LOCAL_REFLECTIONMAP_CUBIC = this._reflectionTexture.boundingBoxSize ? true : false;\n                    }\n                }\n                else {\n                    defines.REFLECTION = false;\n                    defines.REFLECTIONMAP_OPPOSITEZ = false;\n                }\n                if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\n                    if (!this._emissiveTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._emissiveTexture, defines, \"EMISSIVE\");\n                    }\n                }\n                else {\n                    defines.EMISSIVE = false;\n                }\n                if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\n                    if (!this._lightmapTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._lightmapTexture, defines, \"LIGHTMAP\");\n                        defines.USELIGHTMAPASSHADOWMAP = this._useLightmapAsShadowmap;\n                        defines.RGBDLIGHTMAP = this._lightmapTexture.isRGBD;\n                    }\n                }\n                else {\n                    defines.LIGHTMAP = false;\n                }\n                if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\n                    if (!this._specularTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._specularTexture, defines, \"SPECULAR\");\n                        defines.GLOSSINESS = this._useGlossinessFromSpecularMapAlpha;\n                    }\n                }\n                else {\n                    defines.SPECULAR = false;\n                }\n                if (scene.getEngine().getCaps().standardDerivatives && this._bumpTexture && StandardMaterial.BumpTextureEnabled) {\n                    // Bump texture can not be not blocking.\n                    if (!this._bumpTexture.isReady()) {\n                        return false;\n                    }\n                    else {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._bumpTexture, defines, \"BUMP\");\n                        defines.PARALLAX = this._useParallax;\n                        defines.PARALLAXOCCLUSION = this._useParallaxOcclusion;\n                    }\n                    defines.OBJECTSPACE_NORMALMAP = this._useObjectSpaceNormalMap;\n                }\n                else {\n                    defines.BUMP = false;\n                    defines.PARALLAX = false;\n                    defines.PARALLAXOCCLUSION = false;\n                }\n                if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\n                    if (!this._refractionTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        defines._needUVs = true;\n                        defines.REFRACTION = true;\n                        defines.REFRACTIONMAP_3D = this._refractionTexture.isCube;\n                        defines.RGBDREFRACTION = this._refractionTexture.isRGBD;\n                        defines.USE_LOCAL_REFRACTIONMAP_CUBIC = this._refractionTexture.boundingBoxSize ? true : false;\n                    }\n                }\n                else {\n                    defines.REFRACTION = false;\n                }\n                defines.TWOSIDEDLIGHTING = !this._backFaceCulling && this._twoSidedLighting;\n            }\n            else {\n                defines.DIFFUSE = false;\n                defines.AMBIENT = false;\n                defines.OPACITY = false;\n                defines.REFLECTION = false;\n                defines.EMISSIVE = false;\n                defines.LIGHTMAP = false;\n                defines.BUMP = false;\n                defines.REFRACTION = false;\n            }\n            defines.ALPHAFROMDIFFUSE = this._shouldUseAlphaFromDiffuseTexture();\n            defines.EMISSIVEASILLUMINATION = this._useEmissiveAsIllumination;\n            defines.LINKEMISSIVEWITHDIFFUSE = this._linkEmissiveWithDiffuse;\n            defines.SPECULAROVERALPHA = this._useSpecularOverAlpha;\n            defines.PREMULTIPLYALPHA = this.alphaMode === 7 || this.alphaMode === 8;\n            defines.ALPHATEST_AFTERALLALPHACOMPUTATIONS = this.transparencyMode !== null;\n            defines.ALPHABLEND = this.transparencyMode === null || this.needAlphaBlendingForMesh(mesh); // check on null for backward compatibility\n        }\n        this._eventInfo.isReadyForSubMesh = true;\n        this._eventInfo.defines = defines;\n        this._callbackPluginEventIsReadyForSubMesh(this._eventInfo);\n        if (!this._eventInfo.isReadyForSubMesh) {\n            return false;\n        }\n        if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\n            if (!this._imageProcessingConfiguration.isReady()) {\n                return false;\n            }\n            this._imageProcessingConfiguration.prepareDefines(defines);\n            defines.IS_REFLECTION_LINEAR = this.reflectionTexture != null && !this.reflectionTexture.gammaSpace;\n            defines.IS_REFRACTION_LINEAR = this.refractionTexture != null && !this.refractionTexture.gammaSpace;\n        }\n        if (defines._areFresnelDirty) {\n            if (StandardMaterial.FresnelEnabled) {\n                // Fresnel\n                if (this._diffuseFresnelParameters ||\n                    this._opacityFresnelParameters ||\n                    this._emissiveFresnelParameters ||\n                    this._refractionFresnelParameters ||\n                    this._reflectionFresnelParameters) {\n                    defines.DIFFUSEFRESNEL = this._diffuseFresnelParameters && this._diffuseFresnelParameters.isEnabled;\n                    defines.OPACITYFRESNEL = this._opacityFresnelParameters && this._opacityFresnelParameters.isEnabled;\n                    defines.REFLECTIONFRESNEL = this._reflectionFresnelParameters && this._reflectionFresnelParameters.isEnabled;\n                    defines.REFLECTIONFRESNELFROMSPECULAR = this._useReflectionFresnelFromSpecular;\n                    defines.REFRACTIONFRESNEL = this._refractionFresnelParameters && this._refractionFresnelParameters.isEnabled;\n                    defines.EMISSIVEFRESNEL = this._emissiveFresnelParameters && this._emissiveFresnelParameters.isEnabled;\n                    defines._needNormals = true;\n                    defines.FRESNEL = true;\n                }\n            }\n            else {\n                defines.FRESNEL = false;\n            }\n        }\n        // Misc.\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, this._useLogarithmicDepth, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh) || this._forceAlphaTest, defines);\n        // Values that need to be evaluated on every frame\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances, null, subMesh.getRenderingMesh().hasThinInstances);\n        // External config\n        this._eventInfo.defines = defines;\n        this._eventInfo.mesh = mesh;\n        this._callbackPluginEventPrepareDefinesBeforeAttributes(this._eventInfo);\n        // Attribs\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true, true);\n        // External config\n        this._callbackPluginEventPrepareDefines(this._eventInfo);\n        // Get correct effect\n        let forceWasNotReadyPreviously = false;\n        if (defines.isDirty) {\n            const lightDisposed = defines._areLightsDisposed;\n            defines.markAsProcessed();\n            // Fallbacks\n            const fallbacks = new EffectFallbacks();\n            if (defines.REFLECTION) {\n                fallbacks.addFallback(0, \"REFLECTION\");\n            }\n            if (defines.SPECULAR) {\n                fallbacks.addFallback(0, \"SPECULAR\");\n            }\n            if (defines.BUMP) {\n                fallbacks.addFallback(0, \"BUMP\");\n            }\n            if (defines.PARALLAX) {\n                fallbacks.addFallback(1, \"PARALLAX\");\n            }\n            if (defines.PARALLAXOCCLUSION) {\n                fallbacks.addFallback(0, \"PARALLAXOCCLUSION\");\n            }\n            if (defines.SPECULAROVERALPHA) {\n                fallbacks.addFallback(0, \"SPECULAROVERALPHA\");\n            }\n            if (defines.FOG) {\n                fallbacks.addFallback(1, \"FOG\");\n            }\n            if (defines.POINTSIZE) {\n                fallbacks.addFallback(0, \"POINTSIZE\");\n            }\n            if (defines.LOGARITHMICDEPTH) {\n                fallbacks.addFallback(0, \"LOGARITHMICDEPTH\");\n            }\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this._maxSimultaneousLights);\n            if (defines.SPECULARTERM) {\n                fallbacks.addFallback(0, \"SPECULARTERM\");\n            }\n            if (defines.DIFFUSEFRESNEL) {\n                fallbacks.addFallback(1, \"DIFFUSEFRESNEL\");\n            }\n            if (defines.OPACITYFRESNEL) {\n                fallbacks.addFallback(2, \"OPACITYFRESNEL\");\n            }\n            if (defines.REFLECTIONFRESNEL) {\n                fallbacks.addFallback(3, \"REFLECTIONFRESNEL\");\n            }\n            if (defines.EMISSIVEFRESNEL) {\n                fallbacks.addFallback(4, \"EMISSIVEFRESNEL\");\n            }\n            if (defines.FRESNEL) {\n                fallbacks.addFallback(4, \"FRESNEL\");\n            }\n            if (defines.MULTIVIEW) {\n                fallbacks.addFallback(0, \"MULTIVIEW\");\n            }\n            //Attributes\n            const attribs = [VertexBuffer.PositionKind];\n            if (defines.NORMAL) {\n                attribs.push(VertexBuffer.NormalKind);\n            }\n            if (defines.TANGENT) {\n                attribs.push(VertexBuffer.TangentKind);\n            }\n            for (let i = 1; i <= 6; ++i) {\n                if (defines[\"UV\" + i]) {\n                    attribs.push(`uv${i === 1 ? \"\" : i}`);\n                }\n            }\n            if (defines.VERTEXCOLOR) {\n                attribs.push(VertexBuffer.ColorKind);\n            }\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\n            MaterialHelper.PrepareAttributesForMorphTargets(attribs, mesh, defines);\n            MaterialHelper.PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\n            let shaderName = \"default\";\n            const uniforms = [\n                \"world\",\n                \"view\",\n                \"viewProjection\",\n                \"vEyePosition\",\n                \"vLightsType\",\n                \"vAmbientColor\",\n                \"vDiffuseColor\",\n                \"vSpecularColor\",\n                \"vEmissiveColor\",\n                \"visibility\",\n                \"vFogInfos\",\n                \"vFogColor\",\n                \"pointSize\",\n                \"vDiffuseInfos\",\n                \"vAmbientInfos\",\n                \"vOpacityInfos\",\n                \"vReflectionInfos\",\n                \"vEmissiveInfos\",\n                \"vSpecularInfos\",\n                \"vBumpInfos\",\n                \"vLightmapInfos\",\n                \"vRefractionInfos\",\n                \"mBones\",\n                \"diffuseMatrix\",\n                \"ambientMatrix\",\n                \"opacityMatrix\",\n                \"reflectionMatrix\",\n                \"emissiveMatrix\",\n                \"specularMatrix\",\n                \"bumpMatrix\",\n                \"normalMatrix\",\n                \"lightmapMatrix\",\n                \"refractionMatrix\",\n                \"diffuseLeftColor\",\n                \"diffuseRightColor\",\n                \"opacityParts\",\n                \"reflectionLeftColor\",\n                \"reflectionRightColor\",\n                \"emissiveLeftColor\",\n                \"emissiveRightColor\",\n                \"refractionLeftColor\",\n                \"refractionRightColor\",\n                \"vReflectionPosition\",\n                \"vReflectionSize\",\n                \"vRefractionPosition\",\n                \"vRefractionSize\",\n                \"logarithmicDepthConstant\",\n                \"vTangentSpaceParams\",\n                \"alphaCutOff\",\n                \"boneTextureWidth\",\n                \"morphTargetTextureInfo\",\n                \"morphTargetTextureIndices\",\n            ];\n            const samplers = [\n                \"diffuseSampler\",\n                \"ambientSampler\",\n                \"opacitySampler\",\n                \"reflectionCubeSampler\",\n                \"reflection2DSampler\",\n                \"emissiveSampler\",\n                \"specularSampler\",\n                \"bumpSampler\",\n                \"lightmapSampler\",\n                \"refractionCubeSampler\",\n                \"refraction2DSampler\",\n                \"boneSampler\",\n                \"morphTargets\",\n                \"oitDepthSampler\",\n                \"oitFrontColorSampler\",\n            ];\n            const uniformBuffers = [\"Material\", \"Scene\", \"Mesh\"];\n            this._eventInfo.fallbacks = fallbacks;\n            this._eventInfo.fallbackRank = 0;\n            this._eventInfo.defines = defines;\n            this._eventInfo.uniforms = uniforms;\n            this._eventInfo.attributes = attribs;\n            this._eventInfo.samplers = samplers;\n            this._eventInfo.uniformBuffersNames = uniformBuffers;\n            this._eventInfo.customCode = undefined;\n            this._eventInfo.mesh = mesh;\n            this._callbackPluginEventGeneric(MaterialPluginEvent.PrepareEffect, this._eventInfo);\n            PrePassConfiguration.AddUniforms(uniforms);\n            PrePassConfiguration.AddSamplers(samplers);\n            if (ImageProcessingConfiguration) {\n                ImageProcessingConfiguration.PrepareUniforms(uniforms, defines);\n                ImageProcessingConfiguration.PrepareSamplers(samplers, defines);\n            }\n            MaterialHelper.PrepareUniformsAndSamplersList({\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: defines,\n                maxSimultaneousLights: this._maxSimultaneousLights,\n            });\n            addClipPlaneUniforms(uniforms);\n            const csnrOptions = {};\n            if (this.customShaderNameResolve) {\n                shaderName = this.customShaderNameResolve(shaderName, uniforms, uniformBuffers, samplers, defines, attribs, csnrOptions);\n            }\n            const join = defines.toString();\n            const previousEffect = subMesh.effect;\n            let effect = scene.getEngine().createEffect(shaderName, {\n                attributes: attribs,\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: join,\n                fallbacks: fallbacks,\n                onCompiled: this.onCompiled,\n                onError: this.onError,\n                indexParameters: { maxSimultaneousLights: this._maxSimultaneousLights, maxSimultaneousMorphTargets: defines.NUM_MORPH_INFLUENCERS },\n                processFinalCode: csnrOptions.processFinalCode,\n                processCodeAfterIncludes: this._eventInfo.customCode,\n                multiTarget: defines.PREPASS,\n            }, engine);\n            this._eventInfo.customCode = undefined;\n            if (effect) {\n                if (this._onEffectCreatedObservable) {\n                    onCreatedEffectParameters.effect = effect;\n                    onCreatedEffectParameters.subMesh = subMesh;\n                    this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\n                }\n                // Use previous effect while new one is compiling\n                if (this.allowShaderHotSwapping && previousEffect && !effect.isReady()) {\n                    effect = previousEffect;\n                    defines.markAsUnprocessed();\n                    forceWasNotReadyPreviously = this.isFrozen;\n                    if (lightDisposed) {\n                        // re register in case it takes more than one frame.\n                        defines._areLightsDisposed = true;\n                        return false;\n                    }\n                }\n                else {\n                    scene.resetCachedMaterial();\n                    subMesh.setEffect(effect, defines, this._materialContext);\n                }\n            }\n        }\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false;\n        }\n        defines._renderId = scene.getRenderId();\n        subMesh.effect._wasPreviouslyReady = forceWasNotReadyPreviously ? false : true;\n        subMesh.effect._wasPreviouslyUsingInstances = useInstances;\n        if (scene.performancePriority !== ScenePerformancePriority.BackwardCompatible) {\n            this.checkReadyOnlyOnce = true;\n        }\n        return true;\n    }\n    /**\n     * Builds the material UBO layouts.\n     * Used internally during the effect preparation.\n     */\n    buildUniformLayout() {\n        // Order is important !\n        const ubo = this._uniformBuffer;\n        ubo.addUniform(\"diffuseLeftColor\", 4);\n        ubo.addUniform(\"diffuseRightColor\", 4);\n        ubo.addUniform(\"opacityParts\", 4);\n        ubo.addUniform(\"reflectionLeftColor\", 4);\n        ubo.addUniform(\"reflectionRightColor\", 4);\n        ubo.addUniform(\"refractionLeftColor\", 4);\n        ubo.addUniform(\"refractionRightColor\", 4);\n        ubo.addUniform(\"emissiveLeftColor\", 4);\n        ubo.addUniform(\"emissiveRightColor\", 4);\n        ubo.addUniform(\"vDiffuseInfos\", 2);\n        ubo.addUniform(\"vAmbientInfos\", 2);\n        ubo.addUniform(\"vOpacityInfos\", 2);\n        ubo.addUniform(\"vReflectionInfos\", 2);\n        ubo.addUniform(\"vReflectionPosition\", 3);\n        ubo.addUniform(\"vReflectionSize\", 3);\n        ubo.addUniform(\"vEmissiveInfos\", 2);\n        ubo.addUniform(\"vLightmapInfos\", 2);\n        ubo.addUniform(\"vSpecularInfos\", 2);\n        ubo.addUniform(\"vBumpInfos\", 3);\n        ubo.addUniform(\"diffuseMatrix\", 16);\n        ubo.addUniform(\"ambientMatrix\", 16);\n        ubo.addUniform(\"opacityMatrix\", 16);\n        ubo.addUniform(\"reflectionMatrix\", 16);\n        ubo.addUniform(\"emissiveMatrix\", 16);\n        ubo.addUniform(\"lightmapMatrix\", 16);\n        ubo.addUniform(\"specularMatrix\", 16);\n        ubo.addUniform(\"bumpMatrix\", 16);\n        ubo.addUniform(\"vTangentSpaceParams\", 2);\n        ubo.addUniform(\"pointSize\", 1);\n        ubo.addUniform(\"alphaCutOff\", 1);\n        ubo.addUniform(\"refractionMatrix\", 16);\n        ubo.addUniform(\"vRefractionInfos\", 4);\n        ubo.addUniform(\"vRefractionPosition\", 3);\n        ubo.addUniform(\"vRefractionSize\", 3);\n        ubo.addUniform(\"vSpecularColor\", 4);\n        ubo.addUniform(\"vEmissiveColor\", 3);\n        ubo.addUniform(\"vDiffuseColor\", 4);\n        ubo.addUniform(\"vAmbientColor\", 3);\n        super.buildUniformLayout();\n    }\n    /**\n     * Binds the submesh to this material by preparing the effect and shader to draw\n     * @param world defines the world transformation matrix\n     * @param mesh defines the mesh containing the submesh\n     * @param subMesh defines the submesh to bind the material to\n     */\n    bindForSubMesh(world, mesh, subMesh) {\n        var _a;\n        const scene = this.getScene();\n        const defines = subMesh.materialDefines;\n        if (!defines) {\n            return;\n        }\n        const effect = subMesh.effect;\n        if (!effect) {\n            return;\n        }\n        this._activeEffect = effect;\n        // Matrices Mesh.\n        mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\n        mesh.transferToEffect(world);\n        // Binding unconditionally\n        this._uniformBuffer.bindToEffect(effect, \"Material\");\n        this.prePassConfiguration.bindForSubMesh(this._activeEffect, scene, mesh, world, this.isFrozen);\n        this._eventInfo.subMesh = subMesh;\n        this._callbackPluginEventHardBindForSubMesh(this._eventInfo);\n        // Normal Matrix\n        if (defines.OBJECTSPACE_NORMALMAP) {\n            world.toNormalMatrix(this._normalMatrix);\n            this.bindOnlyNormalMatrix(this._normalMatrix);\n        }\n        const mustRebind = effect._forceRebindOnNextCall || this._mustRebind(scene, effect, mesh.visibility);\n        // Bones\n        MaterialHelper.BindBonesParameters(mesh, effect);\n        const ubo = this._uniformBuffer;\n        if (mustRebind) {\n            this.bindViewProjection(effect);\n            if (!ubo.useUbo || !this.isFrozen || !ubo.isSync || effect._forceRebindOnNextCall) {\n                if (StandardMaterial.FresnelEnabled && defines.FRESNEL) {\n                    // Fresnel\n                    if (this.diffuseFresnelParameters && this.diffuseFresnelParameters.isEnabled) {\n                        ubo.updateColor4(\"diffuseLeftColor\", this.diffuseFresnelParameters.leftColor, this.diffuseFresnelParameters.power);\n                        ubo.updateColor4(\"diffuseRightColor\", this.diffuseFresnelParameters.rightColor, this.diffuseFresnelParameters.bias);\n                    }\n                    if (this.opacityFresnelParameters && this.opacityFresnelParameters.isEnabled) {\n                        ubo.updateColor4(\"opacityParts\", new Color3(this.opacityFresnelParameters.leftColor.toLuminance(), this.opacityFresnelParameters.rightColor.toLuminance(), this.opacityFresnelParameters.bias), this.opacityFresnelParameters.power);\n                    }\n                    if (this.reflectionFresnelParameters && this.reflectionFresnelParameters.isEnabled) {\n                        ubo.updateColor4(\"reflectionLeftColor\", this.reflectionFresnelParameters.leftColor, this.reflectionFresnelParameters.power);\n                        ubo.updateColor4(\"reflectionRightColor\", this.reflectionFresnelParameters.rightColor, this.reflectionFresnelParameters.bias);\n                    }\n                    if (this.refractionFresnelParameters && this.refractionFresnelParameters.isEnabled) {\n                        ubo.updateColor4(\"refractionLeftColor\", this.refractionFresnelParameters.leftColor, this.refractionFresnelParameters.power);\n                        ubo.updateColor4(\"refractionRightColor\", this.refractionFresnelParameters.rightColor, this.refractionFresnelParameters.bias);\n                    }\n                    if (this.emissiveFresnelParameters && this.emissiveFresnelParameters.isEnabled) {\n                        ubo.updateColor4(\"emissiveLeftColor\", this.emissiveFresnelParameters.leftColor, this.emissiveFresnelParameters.power);\n                        ubo.updateColor4(\"emissiveRightColor\", this.emissiveFresnelParameters.rightColor, this.emissiveFresnelParameters.bias);\n                    }\n                }\n                // Textures\n                if (scene.texturesEnabled) {\n                    if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\n                        ubo.updateFloat2(\"vDiffuseInfos\", this._diffuseTexture.coordinatesIndex, this._diffuseTexture.level);\n                        MaterialHelper.BindTextureMatrix(this._diffuseTexture, ubo, \"diffuse\");\n                    }\n                    if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\n                        ubo.updateFloat2(\"vAmbientInfos\", this._ambientTexture.coordinatesIndex, this._ambientTexture.level);\n                        MaterialHelper.BindTextureMatrix(this._ambientTexture, ubo, \"ambient\");\n                    }\n                    if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\n                        ubo.updateFloat2(\"vOpacityInfos\", this._opacityTexture.coordinatesIndex, this._opacityTexture.level);\n                        MaterialHelper.BindTextureMatrix(this._opacityTexture, ubo, \"opacity\");\n                    }\n                    if (this._hasAlphaChannel()) {\n                        ubo.updateFloat(\"alphaCutOff\", this.alphaCutOff);\n                    }\n                    if (this._reflectionTexture && StandardMaterial.ReflectionTextureEnabled) {\n                        ubo.updateFloat2(\"vReflectionInfos\", this._reflectionTexture.level, this.roughness);\n                        ubo.updateMatrix(\"reflectionMatrix\", this._reflectionTexture.getReflectionTextureMatrix());\n                        if (this._reflectionTexture.boundingBoxSize) {\n                            const cubeTexture = this._reflectionTexture;\n                            ubo.updateVector3(\"vReflectionPosition\", cubeTexture.boundingBoxPosition);\n                            ubo.updateVector3(\"vReflectionSize\", cubeTexture.boundingBoxSize);\n                        }\n                    }\n                    if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\n                        ubo.updateFloat2(\"vEmissiveInfos\", this._emissiveTexture.coordinatesIndex, this._emissiveTexture.level);\n                        MaterialHelper.BindTextureMatrix(this._emissiveTexture, ubo, \"emissive\");\n                    }\n                    if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\n                        ubo.updateFloat2(\"vLightmapInfos\", this._lightmapTexture.coordinatesIndex, this._lightmapTexture.level);\n                        MaterialHelper.BindTextureMatrix(this._lightmapTexture, ubo, \"lightmap\");\n                    }\n                    if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\n                        ubo.updateFloat2(\"vSpecularInfos\", this._specularTexture.coordinatesIndex, this._specularTexture.level);\n                        MaterialHelper.BindTextureMatrix(this._specularTexture, ubo, \"specular\");\n                    }\n                    if (this._bumpTexture && scene.getEngine().getCaps().standardDerivatives && StandardMaterial.BumpTextureEnabled) {\n                        ubo.updateFloat3(\"vBumpInfos\", this._bumpTexture.coordinatesIndex, 1.0 / this._bumpTexture.level, this.parallaxScaleBias);\n                        MaterialHelper.BindTextureMatrix(this._bumpTexture, ubo, \"bump\");\n                        if (scene._mirroredCameraPosition) {\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? 1.0 : -1.0, this._invertNormalMapY ? 1.0 : -1.0);\n                        }\n                        else {\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? -1.0 : 1.0, this._invertNormalMapY ? -1.0 : 1.0);\n                        }\n                    }\n                    if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\n                        let depth = 1.0;\n                        if (!this._refractionTexture.isCube) {\n                            ubo.updateMatrix(\"refractionMatrix\", this._refractionTexture.getReflectionTextureMatrix());\n                            if (this._refractionTexture.depth) {\n                                depth = this._refractionTexture.depth;\n                            }\n                        }\n                        ubo.updateFloat4(\"vRefractionInfos\", this._refractionTexture.level, this.indexOfRefraction, depth, this.invertRefractionY ? -1 : 1);\n                        if (this._refractionTexture.boundingBoxSize) {\n                            const cubeTexture = this._refractionTexture;\n                            ubo.updateVector3(\"vRefractionPosition\", cubeTexture.boundingBoxPosition);\n                            ubo.updateVector3(\"vRefractionSize\", cubeTexture.boundingBoxSize);\n                        }\n                    }\n                }\n                // Point size\n                if (this.pointsCloud) {\n                    ubo.updateFloat(\"pointSize\", this.pointSize);\n                }\n                if (defines.SPECULARTERM) {\n                    ubo.updateColor4(\"vSpecularColor\", this.specularColor, this.specularPower);\n                }\n                ubo.updateColor3(\"vEmissiveColor\", StandardMaterial.EmissiveTextureEnabled ? this.emissiveColor : Color3.BlackReadOnly);\n                ubo.updateColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha);\n                scene.ambientColor.multiplyToRef(this.ambientColor, this._globalAmbientColor);\n                ubo.updateColor3(\"vAmbientColor\", this._globalAmbientColor);\n            }\n            // Textures\n            if (scene.texturesEnabled) {\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\n                    effect.setTexture(\"diffuseSampler\", this._diffuseTexture);\n                }\n                if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\n                    effect.setTexture(\"ambientSampler\", this._ambientTexture);\n                }\n                if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\n                    effect.setTexture(\"opacitySampler\", this._opacityTexture);\n                }\n                if (this._reflectionTexture && StandardMaterial.ReflectionTextureEnabled) {\n                    if (this._reflectionTexture.isCube) {\n                        effect.setTexture(\"reflectionCubeSampler\", this._reflectionTexture);\n                    }\n                    else {\n                        effect.setTexture(\"reflection2DSampler\", this._reflectionTexture);\n                    }\n                }\n                if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\n                    effect.setTexture(\"emissiveSampler\", this._emissiveTexture);\n                }\n                if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\n                    effect.setTexture(\"lightmapSampler\", this._lightmapTexture);\n                }\n                if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\n                    effect.setTexture(\"specularSampler\", this._specularTexture);\n                }\n                if (this._bumpTexture && scene.getEngine().getCaps().standardDerivatives && StandardMaterial.BumpTextureEnabled) {\n                    effect.setTexture(\"bumpSampler\", this._bumpTexture);\n                }\n                if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\n                    if (this._refractionTexture.isCube) {\n                        effect.setTexture(\"refractionCubeSampler\", this._refractionTexture);\n                    }\n                    else {\n                        effect.setTexture(\"refraction2DSampler\", this._refractionTexture);\n                    }\n                }\n            }\n            // OIT with depth peeling\n            if (this.getScene().useOrderIndependentTransparency && this.needAlphaBlendingForMesh(mesh)) {\n                this.getScene().depthPeelingRenderer.bind(effect);\n            }\n            this._eventInfo.subMesh = subMesh;\n            this._callbackPluginEventBindForSubMesh(this._eventInfo);\n            // Clip plane\n            bindClipPlane(effect, this, scene);\n            // Colors\n            this.bindEyePosition(effect);\n        }\n        else if (scene.getEngine()._features.needToAlwaysBindUniformBuffers) {\n            this._needToBindSceneUbo = true;\n        }\n        if (mustRebind || !this.isFrozen) {\n            // Lights\n            if (scene.lightsEnabled && !this._disableLighting) {\n                MaterialHelper.BindLights(scene, mesh, effect, defines, this._maxSimultaneousLights);\n            }\n            // View\n            if ((scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) ||\n                this._reflectionTexture ||\n                this._refractionTexture ||\n                mesh.receiveShadows ||\n                defines.PREPASS) {\n                this.bindView(effect);\n            }\n            // Fog\n            MaterialHelper.BindFogParameters(scene, mesh, effect);\n            // Morph targets\n            if (defines.NUM_MORPH_INFLUENCERS) {\n                MaterialHelper.BindMorphTargetParameters(mesh, effect);\n            }\n            if (defines.BAKED_VERTEX_ANIMATION_TEXTURE) {\n                (_a = mesh.bakedVertexAnimationManager) === null || _a === void 0 ? void 0 : _a.bind(effect, defines.INSTANCES);\n            }\n            // Log. depth\n            if (this.useLogarithmicDepth) {\n                MaterialHelper.BindLogDepth(defines, effect, scene);\n            }\n            // image processing\n            if (this._imageProcessingConfiguration && !this._imageProcessingConfiguration.applyByPostProcess) {\n                this._imageProcessingConfiguration.bind(this._activeEffect);\n            }\n        }\n        this._afterBind(mesh, this._activeEffect);\n        ubo.update();\n    }\n    /**\n     * Get the list of animatables in the material.\n     * @returns the list of animatables object used in the material\n     */\n    getAnimatables() {\n        const results = super.getAnimatables();\n        if (this._diffuseTexture && this._diffuseTexture.animations && this._diffuseTexture.animations.length > 0) {\n            results.push(this._diffuseTexture);\n        }\n        if (this._ambientTexture && this._ambientTexture.animations && this._ambientTexture.animations.length > 0) {\n            results.push(this._ambientTexture);\n        }\n        if (this._opacityTexture && this._opacityTexture.animations && this._opacityTexture.animations.length > 0) {\n            results.push(this._opacityTexture);\n        }\n        if (this._reflectionTexture && this._reflectionTexture.animations && this._reflectionTexture.animations.length > 0) {\n            results.push(this._reflectionTexture);\n        }\n        if (this._emissiveTexture && this._emissiveTexture.animations && this._emissiveTexture.animations.length > 0) {\n            results.push(this._emissiveTexture);\n        }\n        if (this._specularTexture && this._specularTexture.animations && this._specularTexture.animations.length > 0) {\n            results.push(this._specularTexture);\n        }\n        if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\n            results.push(this._bumpTexture);\n        }\n        if (this._lightmapTexture && this._lightmapTexture.animations && this._lightmapTexture.animations.length > 0) {\n            results.push(this._lightmapTexture);\n        }\n        if (this._refractionTexture && this._refractionTexture.animations && this._refractionTexture.animations.length > 0) {\n            results.push(this._refractionTexture);\n        }\n        return results;\n    }\n    /**\n     * Gets the active textures from the material\n     * @returns an array of textures\n     */\n    getActiveTextures() {\n        const activeTextures = super.getActiveTextures();\n        if (this._diffuseTexture) {\n            activeTextures.push(this._diffuseTexture);\n        }\n        if (this._ambientTexture) {\n            activeTextures.push(this._ambientTexture);\n        }\n        if (this._opacityTexture) {\n            activeTextures.push(this._opacityTexture);\n        }\n        if (this._reflectionTexture) {\n            activeTextures.push(this._reflectionTexture);\n        }\n        if (this._emissiveTexture) {\n            activeTextures.push(this._emissiveTexture);\n        }\n        if (this._specularTexture) {\n            activeTextures.push(this._specularTexture);\n        }\n        if (this._bumpTexture) {\n            activeTextures.push(this._bumpTexture);\n        }\n        if (this._lightmapTexture) {\n            activeTextures.push(this._lightmapTexture);\n        }\n        if (this._refractionTexture) {\n            activeTextures.push(this._refractionTexture);\n        }\n        return activeTextures;\n    }\n    /**\n     * Specifies if the material uses a texture\n     * @param texture defines the texture to check against the material\n     * @returns a boolean specifying if the material uses the texture\n     */\n    hasTexture(texture) {\n        if (super.hasTexture(texture)) {\n            return true;\n        }\n        if (this._diffuseTexture === texture) {\n            return true;\n        }\n        if (this._ambientTexture === texture) {\n            return true;\n        }\n        if (this._opacityTexture === texture) {\n            return true;\n        }\n        if (this._reflectionTexture === texture) {\n            return true;\n        }\n        if (this._emissiveTexture === texture) {\n            return true;\n        }\n        if (this._specularTexture === texture) {\n            return true;\n        }\n        if (this._bumpTexture === texture) {\n            return true;\n        }\n        if (this._lightmapTexture === texture) {\n            return true;\n        }\n        if (this._refractionTexture === texture) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Disposes the material\n     * @param forceDisposeEffect specifies if effects should be forcefully disposed\n     * @param forceDisposeTextures specifies if textures should be forcefully disposed\n     */\n    dispose(forceDisposeEffect, forceDisposeTextures) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        if (forceDisposeTextures) {\n            (_a = this._diffuseTexture) === null || _a === void 0 ? void 0 : _a.dispose();\n            (_b = this._ambientTexture) === null || _b === void 0 ? void 0 : _b.dispose();\n            (_c = this._opacityTexture) === null || _c === void 0 ? void 0 : _c.dispose();\n            (_d = this._reflectionTexture) === null || _d === void 0 ? void 0 : _d.dispose();\n            (_e = this._emissiveTexture) === null || _e === void 0 ? void 0 : _e.dispose();\n            (_f = this._specularTexture) === null || _f === void 0 ? void 0 : _f.dispose();\n            (_g = this._bumpTexture) === null || _g === void 0 ? void 0 : _g.dispose();\n            (_h = this._lightmapTexture) === null || _h === void 0 ? void 0 : _h.dispose();\n            (_j = this._refractionTexture) === null || _j === void 0 ? void 0 : _j.dispose();\n        }\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n        }\n        super.dispose(forceDisposeEffect, forceDisposeTextures);\n    }\n    /**\n     * Makes a duplicate of the material, and gives it a new name\n     * @param name defines the new name for the duplicated material\n     * @returns the cloned material\n     */\n    clone(name) {\n        const result = SerializationHelper.Clone(() => new StandardMaterial(name, this.getScene()), this);\n        result.name = name;\n        result.id = name;\n        this.stencil.copyTo(result.stencil);\n        return result;\n    }\n    /**\n     * Creates a standard material from parsed material data\n     * @param source defines the JSON representation of the material\n     * @param scene defines the hosting scene\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\n     * @returns a new standard material\n     */\n    static Parse(source, scene, rootUrl) {\n        const material = SerializationHelper.Parse(() => new StandardMaterial(source.name, scene), source, scene, rootUrl);\n        if (source.stencil) {\n            material.stencil.parse(source.stencil, scene, rootUrl);\n        }\n        return material;\n    }\n    // Flags used to enable or disable a type of texture for all Standard Materials\n    /**\n     * Are diffuse textures enabled in the application.\n     */\n    static get DiffuseTextureEnabled() {\n        return MaterialFlags.DiffuseTextureEnabled;\n    }\n    static set DiffuseTextureEnabled(value) {\n        MaterialFlags.DiffuseTextureEnabled = value;\n    }\n    /**\n     * Are detail textures enabled in the application.\n     */\n    static get DetailTextureEnabled() {\n        return MaterialFlags.DetailTextureEnabled;\n    }\n    static set DetailTextureEnabled(value) {\n        MaterialFlags.DetailTextureEnabled = value;\n    }\n    /**\n     * Are ambient textures enabled in the application.\n     */\n    static get AmbientTextureEnabled() {\n        return MaterialFlags.AmbientTextureEnabled;\n    }\n    static set AmbientTextureEnabled(value) {\n        MaterialFlags.AmbientTextureEnabled = value;\n    }\n    /**\n     * Are opacity textures enabled in the application.\n     */\n    static get OpacityTextureEnabled() {\n        return MaterialFlags.OpacityTextureEnabled;\n    }\n    static set OpacityTextureEnabled(value) {\n        MaterialFlags.OpacityTextureEnabled = value;\n    }\n    /**\n     * Are reflection textures enabled in the application.\n     */\n    static get ReflectionTextureEnabled() {\n        return MaterialFlags.ReflectionTextureEnabled;\n    }\n    static set ReflectionTextureEnabled(value) {\n        MaterialFlags.ReflectionTextureEnabled = value;\n    }\n    /**\n     * Are emissive textures enabled in the application.\n     */\n    static get EmissiveTextureEnabled() {\n        return MaterialFlags.EmissiveTextureEnabled;\n    }\n    static set EmissiveTextureEnabled(value) {\n        MaterialFlags.EmissiveTextureEnabled = value;\n    }\n    /**\n     * Are specular textures enabled in the application.\n     */\n    static get SpecularTextureEnabled() {\n        return MaterialFlags.SpecularTextureEnabled;\n    }\n    static set SpecularTextureEnabled(value) {\n        MaterialFlags.SpecularTextureEnabled = value;\n    }\n    /**\n     * Are bump textures enabled in the application.\n     */\n    static get BumpTextureEnabled() {\n        return MaterialFlags.BumpTextureEnabled;\n    }\n    static set BumpTextureEnabled(value) {\n        MaterialFlags.BumpTextureEnabled = value;\n    }\n    /**\n     * Are lightmap textures enabled in the application.\n     */\n    static get LightmapTextureEnabled() {\n        return MaterialFlags.LightmapTextureEnabled;\n    }\n    static set LightmapTextureEnabled(value) {\n        MaterialFlags.LightmapTextureEnabled = value;\n    }\n    /**\n     * Are refraction textures enabled in the application.\n     */\n    static get RefractionTextureEnabled() {\n        return MaterialFlags.RefractionTextureEnabled;\n    }\n    static set RefractionTextureEnabled(value) {\n        MaterialFlags.RefractionTextureEnabled = value;\n    }\n    /**\n     * Are color grading textures enabled in the application.\n     */\n    static get ColorGradingTextureEnabled() {\n        return MaterialFlags.ColorGradingTextureEnabled;\n    }\n    static set ColorGradingTextureEnabled(value) {\n        MaterialFlags.ColorGradingTextureEnabled = value;\n    }\n    /**\n     * Are fresnels enabled in the application.\n     */\n    static get FresnelEnabled() {\n        return MaterialFlags.FresnelEnabled;\n    }\n    static set FresnelEnabled(value) {\n        MaterialFlags.FresnelEnabled = value;\n    }\n}\n__decorate([\n    serializeAsTexture(\"diffuseTexture\")\n], StandardMaterial.prototype, \"_diffuseTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\n], StandardMaterial.prototype, \"diffuseTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"ambientTexture\")\n], StandardMaterial.prototype, \"_ambientTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"ambientTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"opacityTexture\")\n], StandardMaterial.prototype, \"_opacityTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\n], StandardMaterial.prototype, \"opacityTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"reflectionTexture\")\n], StandardMaterial.prototype, \"_reflectionTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"reflectionTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"emissiveTexture\")\n], StandardMaterial.prototype, \"_emissiveTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"emissiveTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"specularTexture\")\n], StandardMaterial.prototype, \"_specularTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"specularTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"bumpTexture\")\n], StandardMaterial.prototype, \"_bumpTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"bumpTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"lightmapTexture\")\n], StandardMaterial.prototype, \"_lightmapTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"lightmapTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"refractionTexture\")\n], StandardMaterial.prototype, \"_refractionTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"refractionTexture\", void 0);\n__decorate([\n    serializeAsColor3(\"ambient\")\n], StandardMaterial.prototype, \"ambientColor\", void 0);\n__decorate([\n    serializeAsColor3(\"diffuse\")\n], StandardMaterial.prototype, \"diffuseColor\", void 0);\n__decorate([\n    serializeAsColor3(\"specular\")\n], StandardMaterial.prototype, \"specularColor\", void 0);\n__decorate([\n    serializeAsColor3(\"emissive\")\n], StandardMaterial.prototype, \"emissiveColor\", void 0);\n__decorate([\n    serialize()\n], StandardMaterial.prototype, \"specularPower\", void 0);\n__decorate([\n    serialize(\"useAlphaFromDiffuseTexture\")\n], StandardMaterial.prototype, \"_useAlphaFromDiffuseTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\n], StandardMaterial.prototype, \"useAlphaFromDiffuseTexture\", void 0);\n__decorate([\n    serialize(\"useEmissiveAsIllumination\")\n], StandardMaterial.prototype, \"_useEmissiveAsIllumination\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useEmissiveAsIllumination\", void 0);\n__decorate([\n    serialize(\"linkEmissiveWithDiffuse\")\n], StandardMaterial.prototype, \"_linkEmissiveWithDiffuse\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"linkEmissiveWithDiffuse\", void 0);\n__decorate([\n    serialize(\"useSpecularOverAlpha\")\n], StandardMaterial.prototype, \"_useSpecularOverAlpha\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useSpecularOverAlpha\", void 0);\n__decorate([\n    serialize(\"useReflectionOverAlpha\")\n], StandardMaterial.prototype, \"_useReflectionOverAlpha\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useReflectionOverAlpha\", void 0);\n__decorate([\n    serialize(\"disableLighting\")\n], StandardMaterial.prototype, \"_disableLighting\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n], StandardMaterial.prototype, \"disableLighting\", void 0);\n__decorate([\n    serialize(\"useObjectSpaceNormalMap\")\n], StandardMaterial.prototype, \"_useObjectSpaceNormalMap\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useObjectSpaceNormalMap\", void 0);\n__decorate([\n    serialize(\"useParallax\")\n], StandardMaterial.prototype, \"_useParallax\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useParallax\", void 0);\n__decorate([\n    serialize(\"useParallaxOcclusion\")\n], StandardMaterial.prototype, \"_useParallaxOcclusion\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useParallaxOcclusion\", void 0);\n__decorate([\n    serialize()\n], StandardMaterial.prototype, \"parallaxScaleBias\", void 0);\n__decorate([\n    serialize(\"roughness\")\n], StandardMaterial.prototype, \"_roughness\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"roughness\", void 0);\n__decorate([\n    serialize()\n], StandardMaterial.prototype, \"indexOfRefraction\", void 0);\n__decorate([\n    serialize()\n], StandardMaterial.prototype, \"invertRefractionY\", void 0);\n__decorate([\n    serialize()\n], StandardMaterial.prototype, \"alphaCutOff\", void 0);\n__decorate([\n    serialize(\"useLightmapAsShadowmap\")\n], StandardMaterial.prototype, \"_useLightmapAsShadowmap\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useLightmapAsShadowmap\", void 0);\n__decorate([\n    serializeAsFresnelParameters(\"diffuseFresnelParameters\")\n], StandardMaterial.prototype, \"_diffuseFresnelParameters\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\n], StandardMaterial.prototype, \"diffuseFresnelParameters\", void 0);\n__decorate([\n    serializeAsFresnelParameters(\"opacityFresnelParameters\")\n], StandardMaterial.prototype, \"_opacityFresnelParameters\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsFresnelAndMiscDirty\")\n], StandardMaterial.prototype, \"opacityFresnelParameters\", void 0);\n__decorate([\n    serializeAsFresnelParameters(\"reflectionFresnelParameters\")\n], StandardMaterial.prototype, \"_reflectionFresnelParameters\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\n], StandardMaterial.prototype, \"reflectionFresnelParameters\", void 0);\n__decorate([\n    serializeAsFresnelParameters(\"refractionFresnelParameters\")\n], StandardMaterial.prototype, \"_refractionFresnelParameters\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\n], StandardMaterial.prototype, \"refractionFresnelParameters\", void 0);\n__decorate([\n    serializeAsFresnelParameters(\"emissiveFresnelParameters\")\n], StandardMaterial.prototype, \"_emissiveFresnelParameters\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\n], StandardMaterial.prototype, \"emissiveFresnelParameters\", void 0);\n__decorate([\n    serialize(\"useReflectionFresnelFromSpecular\")\n], StandardMaterial.prototype, \"_useReflectionFresnelFromSpecular\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\n], StandardMaterial.prototype, \"useReflectionFresnelFromSpecular\", void 0);\n__decorate([\n    serialize(\"useGlossinessFromSpecularMapAlpha\")\n], StandardMaterial.prototype, \"_useGlossinessFromSpecularMapAlpha\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useGlossinessFromSpecularMapAlpha\", void 0);\n__decorate([\n    serialize(\"maxSimultaneousLights\")\n], StandardMaterial.prototype, \"_maxSimultaneousLights\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n], StandardMaterial.prototype, \"maxSimultaneousLights\", void 0);\n__decorate([\n    serialize(\"invertNormalMapX\")\n], StandardMaterial.prototype, \"_invertNormalMapX\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"invertNormalMapX\", void 0);\n__decorate([\n    serialize(\"invertNormalMapY\")\n], StandardMaterial.prototype, \"_invertNormalMapY\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"invertNormalMapY\", void 0);\n__decorate([\n    serialize(\"twoSidedLighting\")\n], StandardMaterial.prototype, \"_twoSidedLighting\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"twoSidedLighting\", void 0);\n__decorate([\n    serialize()\n], StandardMaterial.prototype, \"useLogarithmicDepth\", null);\nRegisterClass(\"BABYLON.StandardMaterial\", StandardMaterial);\nScene.DefaultMaterialFactory = (scene) => {\n    return new StandardMaterial(\"default material\", scene);\n};\n//# sourceMappingURL=standardMaterial.js.map","import { Logger } from \"../Misc/logger.js\";\nimport { Tools } from \"../Misc/tools.js\";\nimport \"../Engines/Extensions/engine.uniformBuffer.js\";\n/**\n * Uniform buffer objects.\n *\n * Handles blocks of uniform on the GPU.\n *\n * If WebGL 2 is not available, this class falls back on traditional setUniformXXX calls.\n *\n * For more information, please refer to :\n * https://www.khronos.org/opengl/wiki/Uniform_Buffer_Object\n */\nexport class UniformBuffer {\n    /**\n     * Instantiates a new Uniform buffer objects.\n     *\n     * Handles blocks of uniform on the GPU.\n     *\n     * If WebGL 2 is not available, this class falls back on traditional setUniformXXX calls.\n     *\n     * For more information, please refer to :\n     * @see https://www.khronos.org/opengl/wiki/Uniform_Buffer_Object\n     * @param engine Define the engine the buffer is associated with\n     * @param data Define the data contained in the buffer\n     * @param dynamic Define if the buffer is updatable\n     * @param name to assign to the buffer (debugging purpose)\n     * @param forceNoUniformBuffer define that this object must not rely on UBO objects\n     */\n    constructor(engine, data, dynamic, name, forceNoUniformBuffer = false) {\n        // Matrix cache\n        this._valueCache = {};\n        this._engine = engine;\n        this._noUBO = !engine.supportsUniformBuffers || forceNoUniformBuffer;\n        this._dynamic = dynamic;\n        this._name = name !== null && name !== void 0 ? name : \"no-name\";\n        this._data = data || [];\n        this._uniformLocations = {};\n        this._uniformSizes = {};\n        this._uniformArraySizes = {};\n        this._uniformLocationPointer = 0;\n        this._needSync = false;\n        if (this._engine._features.trackUbosInFrame) {\n            this._buffers = [];\n            this._bufferIndex = -1;\n            this._createBufferOnWrite = false;\n            this._currentFrameId = 0;\n        }\n        if (this._noUBO) {\n            this.updateMatrix3x3 = this._updateMatrix3x3ForEffect;\n            this.updateMatrix2x2 = this._updateMatrix2x2ForEffect;\n            this.updateFloat = this._updateFloatForEffect;\n            this.updateFloat2 = this._updateFloat2ForEffect;\n            this.updateFloat3 = this._updateFloat3ForEffect;\n            this.updateFloat4 = this._updateFloat4ForEffect;\n            this.updateFloatArray = this._updateFloatArrayForEffect;\n            this.updateArray = this._updateArrayForEffect;\n            this.updateIntArray = this._updateIntArrayForEffect;\n            this.updateUIntArray = this._updateUIntArrayForEffect;\n            this.updateMatrix = this._updateMatrixForEffect;\n            this.updateMatrices = this._updateMatricesForEffect;\n            this.updateVector3 = this._updateVector3ForEffect;\n            this.updateVector4 = this._updateVector4ForEffect;\n            this.updateColor3 = this._updateColor3ForEffect;\n            this.updateColor4 = this._updateColor4ForEffect;\n            this.updateDirectColor4 = this._updateDirectColor4ForEffect;\n            this.updateInt = this._updateIntForEffect;\n            this.updateInt2 = this._updateInt2ForEffect;\n            this.updateInt3 = this._updateInt3ForEffect;\n            this.updateInt4 = this._updateInt4ForEffect;\n            this.updateUInt = this._updateUIntForEffect;\n            this.updateUInt2 = this._updateUInt2ForEffect;\n            this.updateUInt3 = this._updateUInt3ForEffect;\n            this.updateUInt4 = this._updateUInt4ForEffect;\n        }\n        else {\n            this._engine._uniformBuffers.push(this);\n            this.updateMatrix3x3 = this._updateMatrix3x3ForUniform;\n            this.updateMatrix2x2 = this._updateMatrix2x2ForUniform;\n            this.updateFloat = this._updateFloatForUniform;\n            this.updateFloat2 = this._updateFloat2ForUniform;\n            this.updateFloat3 = this._updateFloat3ForUniform;\n            this.updateFloat4 = this._updateFloat4ForUniform;\n            this.updateFloatArray = this._updateFloatArrayForUniform;\n            this.updateArray = this._updateArrayForUniform;\n            this.updateIntArray = this._updateIntArrayForUniform;\n            this.updateUIntArray = this._updateUIntArrayForUniform;\n            this.updateMatrix = this._updateMatrixForUniform;\n            this.updateMatrices = this._updateMatricesForUniform;\n            this.updateVector3 = this._updateVector3ForUniform;\n            this.updateVector4 = this._updateVector4ForUniform;\n            this.updateColor3 = this._updateColor3ForUniform;\n            this.updateColor4 = this._updateColor4ForUniform;\n            this.updateDirectColor4 = this._updateDirectColor4ForUniform;\n            this.updateInt = this._updateIntForUniform;\n            this.updateInt2 = this._updateInt2ForUniform;\n            this.updateInt3 = this._updateInt3ForUniform;\n            this.updateInt4 = this._updateInt4ForUniform;\n            this.updateUInt = this._updateUIntForUniform;\n            this.updateUInt2 = this._updateUInt2ForUniform;\n            this.updateUInt3 = this._updateUInt3ForUniform;\n            this.updateUInt4 = this._updateUInt4ForUniform;\n        }\n    }\n    /**\n     * Indicates if the buffer is using the WebGL2 UBO implementation,\n     * or just falling back on setUniformXXX calls.\n     */\n    get useUbo() {\n        return !this._noUBO;\n    }\n    /**\n     * Indicates if the WebGL underlying uniform buffer is in sync\n     * with the javascript cache data.\n     */\n    get isSync() {\n        return !this._needSync;\n    }\n    /**\n     * Indicates if the WebGL underlying uniform buffer is dynamic.\n     * Also, a dynamic UniformBuffer will disable cache verification and always\n     * update the underlying WebGL uniform buffer to the GPU.\n     * @returns if Dynamic, otherwise false\n     */\n    isDynamic() {\n        return this._dynamic !== undefined;\n    }\n    /**\n     * The data cache on JS side.\n     * @returns the underlying data as a float array\n     */\n    getData() {\n        return this._bufferData;\n    }\n    /**\n     * The underlying WebGL Uniform buffer.\n     * @returns the webgl buffer\n     */\n    getBuffer() {\n        return this._buffer;\n    }\n    /**\n     * std140 layout specifies how to align data within an UBO structure.\n     * See https://khronos.org/registry/OpenGL/specs/gl/glspec45.core.pdf#page=159\n     * for specs.\n     * @param size\n     */\n    _fillAlignment(size) {\n        // This code has been simplified because we only use floats, vectors of 1, 2, 3, 4 components\n        // and 4x4 matrices\n        // TODO : change if other types are used\n        let alignment;\n        if (size <= 2) {\n            alignment = size;\n        }\n        else {\n            alignment = 4;\n        }\n        if (this._uniformLocationPointer % alignment !== 0) {\n            const oldPointer = this._uniformLocationPointer;\n            this._uniformLocationPointer += alignment - (this._uniformLocationPointer % alignment);\n            const diff = this._uniformLocationPointer - oldPointer;\n            for (let i = 0; i < diff; i++) {\n                this._data.push(0);\n            }\n        }\n    }\n    /**\n     * Adds an uniform in the buffer.\n     * Warning : the subsequents calls of this function must be in the same order as declared in the shader\n     * for the layout to be correct ! The addUniform function only handles types like float, vec2, vec3, vec4, mat4,\n     * meaning size=1,2,3,4 or 16. It does not handle struct types.\n     * @param name Name of the uniform, as used in the uniform block in the shader.\n     * @param size Data size, or data directly.\n     * @param arraySize The number of elements in the array, 0 if not an array.\n     */\n    addUniform(name, size, arraySize = 0) {\n        if (this._noUBO) {\n            return;\n        }\n        if (this._uniformLocations[name] !== undefined) {\n            // Already existing uniform\n            return;\n        }\n        // This function must be called in the order of the shader layout !\n        // size can be the size of the uniform, or data directly\n        let data;\n        // std140 FTW...\n        if (arraySize > 0) {\n            if (size instanceof Array) {\n                throw \"addUniform should not be use with Array in UBO: \" + name;\n            }\n            this._fillAlignment(4);\n            this._uniformArraySizes[name] = { strideSize: size, arraySize };\n            if (size == 16) {\n                size = size * arraySize;\n            }\n            else {\n                const perElementPadding = 4 - size;\n                const totalPadding = perElementPadding * arraySize;\n                size = size * arraySize + totalPadding;\n            }\n            data = [];\n            // Fill with zeros\n            for (let i = 0; i < size; i++) {\n                data.push(0);\n            }\n        }\n        else {\n            if (size instanceof Array) {\n                data = size;\n                size = data.length;\n            }\n            else {\n                size = size;\n                data = [];\n                // Fill with zeros\n                for (let i = 0; i < size; i++) {\n                    data.push(0);\n                }\n            }\n            this._fillAlignment(size);\n        }\n        this._uniformSizes[name] = size;\n        this._uniformLocations[name] = this._uniformLocationPointer;\n        this._uniformLocationPointer += size;\n        for (let i = 0; i < size; i++) {\n            this._data.push(data[i]);\n        }\n        this._needSync = true;\n    }\n    /**\n     * Adds a Matrix 4x4 to the uniform buffer.\n     * @param name Name of the uniform, as used in the uniform block in the shader.\n     * @param mat A 4x4 matrix.\n     */\n    addMatrix(name, mat) {\n        this.addUniform(name, Array.prototype.slice.call(mat.toArray()));\n    }\n    /**\n     * Adds a vec2 to the uniform buffer.\n     * @param name Name of the uniform, as used in the uniform block in the shader.\n     * @param x Define the x component value of the vec2\n     * @param y Define the y component value of the vec2\n     */\n    addFloat2(name, x, y) {\n        const temp = [x, y];\n        this.addUniform(name, temp);\n    }\n    /**\n     * Adds a vec3 to the uniform buffer.\n     * @param name Name of the uniform, as used in the uniform block in the shader.\n     * @param x Define the x component value of the vec3\n     * @param y Define the y component value of the vec3\n     * @param z Define the z component value of the vec3\n     */\n    addFloat3(name, x, y, z) {\n        const temp = [x, y, z];\n        this.addUniform(name, temp);\n    }\n    /**\n     * Adds a vec3 to the uniform buffer.\n     * @param name Name of the uniform, as used in the uniform block in the shader.\n     * @param color Define the vec3 from a Color\n     */\n    addColor3(name, color) {\n        const temp = [color.r, color.g, color.b];\n        this.addUniform(name, temp);\n    }\n    /**\n     * Adds a vec4 to the uniform buffer.\n     * @param name Name of the uniform, as used in the uniform block in the shader.\n     * @param color Define the rgb components from a Color\n     * @param alpha Define the a component of the vec4\n     */\n    addColor4(name, color, alpha) {\n        const temp = [color.r, color.g, color.b, alpha];\n        this.addUniform(name, temp);\n    }\n    /**\n     * Adds a vec3 to the uniform buffer.\n     * @param name Name of the uniform, as used in the uniform block in the shader.\n     * @param vector Define the vec3 components from a Vector\n     */\n    addVector3(name, vector) {\n        const temp = [vector.x, vector.y, vector.z];\n        this.addUniform(name, temp);\n    }\n    /**\n     * Adds a Matrix 3x3 to the uniform buffer.\n     * @param name Name of the uniform, as used in the uniform block in the shader.\n     */\n    addMatrix3x3(name) {\n        this.addUniform(name, 12);\n    }\n    /**\n     * Adds a Matrix 2x2 to the uniform buffer.\n     * @param name Name of the uniform, as used in the uniform block in the shader.\n     */\n    addMatrix2x2(name) {\n        this.addUniform(name, 8);\n    }\n    /**\n     * Effectively creates the WebGL Uniform Buffer, once layout is completed with `addUniform`.\n     */\n    create() {\n        if (this._noUBO) {\n            return;\n        }\n        if (this._buffer) {\n            return; // nothing to do\n        }\n        // See spec, alignment must be filled as a vec4\n        this._fillAlignment(4);\n        this._bufferData = new Float32Array(this._data);\n        this._rebuild();\n        this._needSync = true;\n    }\n    /** @internal */\n    _rebuild() {\n        if (this._noUBO || !this._bufferData) {\n            return;\n        }\n        if (this._dynamic) {\n            this._buffer = this._engine.createDynamicUniformBuffer(this._bufferData);\n        }\n        else {\n            this._buffer = this._engine.createUniformBuffer(this._bufferData);\n        }\n        if (this._engine._features.trackUbosInFrame) {\n            this._buffers.push([this._buffer, this._engine._features.checkUbosContentBeforeUpload ? this._bufferData.slice() : undefined]);\n            this._bufferIndex = this._buffers.length - 1;\n            this._createBufferOnWrite = false;\n        }\n    }\n    /** @internal */\n    get _numBuffers() {\n        return this._buffers.length;\n    }\n    /** @internal */\n    get _indexBuffer() {\n        return this._bufferIndex;\n    }\n    /** Gets the name of this buffer */\n    get name() {\n        return this._name;\n    }\n    _buffersEqual(buf1, buf2) {\n        for (let i = 0; i < buf1.length; ++i) {\n            if (buf1[i] !== buf2[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    _copyBuffer(src, dst) {\n        for (let i = 0; i < src.length; ++i) {\n            dst[i] = src[i];\n        }\n    }\n    /**\n     * Updates the WebGL Uniform Buffer on the GPU.\n     * If the `dynamic` flag is set to true, no cache comparison is done.\n     * Otherwise, the buffer will be updated only if the cache differs.\n     */\n    update() {\n        if (this._noUBO) {\n            return;\n        }\n        this.bindUniformBuffer();\n        if (!this._buffer) {\n            this.create();\n            return;\n        }\n        if (!this._dynamic && !this._needSync) {\n            this._createBufferOnWrite = this._engine._features.trackUbosInFrame;\n            return;\n        }\n        if (this._buffers && this._buffers.length > 1 && this._buffers[this._bufferIndex][1]) {\n            if (this._buffersEqual(this._bufferData, this._buffers[this._bufferIndex][1])) {\n                this._needSync = false;\n                this._createBufferOnWrite = this._engine._features.trackUbosInFrame;\n                return;\n            }\n            else {\n                this._copyBuffer(this._bufferData, this._buffers[this._bufferIndex][1]);\n            }\n        }\n        this._engine.updateUniformBuffer(this._buffer, this._bufferData);\n        if (this._engine._features._collectUbosUpdatedInFrame) {\n            if (!UniformBuffer._UpdatedUbosInFrame[this._name]) {\n                UniformBuffer._UpdatedUbosInFrame[this._name] = 0;\n            }\n            UniformBuffer._UpdatedUbosInFrame[this._name]++;\n        }\n        this._needSync = false;\n        this._createBufferOnWrite = this._engine._features.trackUbosInFrame;\n    }\n    _createNewBuffer() {\n        if (this._bufferIndex + 1 < this._buffers.length) {\n            this._bufferIndex++;\n            this._buffer = this._buffers[this._bufferIndex][0];\n            this._createBufferOnWrite = false;\n            this._needSync = true;\n        }\n        else {\n            this._rebuild();\n        }\n    }\n    _checkNewFrame() {\n        if (this._engine._features.trackUbosInFrame && this._currentFrameId !== this._engine.frameId) {\n            this._currentFrameId = this._engine.frameId;\n            this._createBufferOnWrite = false;\n            if (this._buffers && this._buffers.length > 0) {\n                this._needSync = this._bufferIndex !== 0;\n                this._bufferIndex = 0;\n                this._buffer = this._buffers[this._bufferIndex][0];\n            }\n            else {\n                this._bufferIndex = -1;\n            }\n        }\n    }\n    /**\n     * Updates the value of an uniform. The `update` method must be called afterwards to make it effective in the GPU.\n     * @param uniformName Define the name of the uniform, as used in the uniform block in the shader.\n     * @param data Define the flattened data\n     * @param size Define the size of the data.\n     */\n    updateUniform(uniformName, data, size) {\n        this._checkNewFrame();\n        let location = this._uniformLocations[uniformName];\n        if (location === undefined) {\n            if (this._buffer) {\n                // Cannot add an uniform if the buffer is already created\n                Logger.Error(\"Cannot add an uniform after UBO has been created.\");\n                return;\n            }\n            this.addUniform(uniformName, size);\n            location = this._uniformLocations[uniformName];\n        }\n        if (!this._buffer) {\n            this.create();\n        }\n        if (!this._dynamic) {\n            // Cache for static uniform buffers\n            let changed = false;\n            for (let i = 0; i < size; i++) {\n                // We are checking the matrix cache before calling updateUniform so we do not need to check it here\n                // Hence the test for size === 16 to simply commit the matrix values\n                if ((size === 16 && !this._engine._features.uniformBufferHardCheckMatrix) || this._bufferData[location + i] !== Tools.FloatRound(data[i])) {\n                    changed = true;\n                    if (this._createBufferOnWrite) {\n                        this._createNewBuffer();\n                    }\n                    this._bufferData[location + i] = data[i];\n                }\n            }\n            this._needSync = this._needSync || changed;\n        }\n        else {\n            // No cache for dynamic\n            for (let i = 0; i < size; i++) {\n                this._bufferData[location + i] = data[i];\n            }\n        }\n    }\n    /**\n     * Updates the value of an uniform. The `update` method must be called afterwards to make it effective in the GPU.\n     * @param uniformName Define the name of the uniform, as used in the uniform block in the shader.\n     * @param data Define the flattened data\n     * @param size Define the size of the data.\n     */\n    updateUniformArray(uniformName, data, size) {\n        this._checkNewFrame();\n        const location = this._uniformLocations[uniformName];\n        if (location === undefined) {\n            Logger.Error(\"Cannot add an uniform Array dynamically. Please, add it using addUniform and make sure that uniform buffers are supported by the current engine.\");\n            return;\n        }\n        if (!this._buffer) {\n            this.create();\n        }\n        const arraySizes = this._uniformArraySizes[uniformName];\n        if (!this._dynamic) {\n            // Cache for static uniform buffers\n            let changed = false;\n            let countToFour = 0;\n            let baseStride = 0;\n            for (let i = 0; i < size; i++) {\n                if (this._bufferData[location + baseStride * 4 + countToFour] !== Tools.FloatRound(data[i])) {\n                    changed = true;\n                    if (this._createBufferOnWrite) {\n                        this._createNewBuffer();\n                    }\n                    this._bufferData[location + baseStride * 4 + countToFour] = data[i];\n                }\n                countToFour++;\n                if (countToFour === arraySizes.strideSize) {\n                    for (; countToFour < 4; countToFour++) {\n                        this._bufferData[location + baseStride * 4 + countToFour] = 0;\n                    }\n                    countToFour = 0;\n                    baseStride++;\n                }\n            }\n            this._needSync = this._needSync || changed;\n        }\n        else {\n            // No cache for dynamic\n            for (let i = 0; i < size; i++) {\n                this._bufferData[location + i] = data[i];\n            }\n        }\n    }\n    _cacheMatrix(name, matrix) {\n        this._checkNewFrame();\n        const cache = this._valueCache[name];\n        const flag = matrix.updateFlag;\n        if (cache !== undefined && cache === flag) {\n            return false;\n        }\n        this._valueCache[name] = flag;\n        return true;\n    }\n    // Update methods\n    _updateMatrix3x3ForUniform(name, matrix) {\n        // To match std140, matrix must be realigned\n        for (let i = 0; i < 3; i++) {\n            UniformBuffer._TempBuffer[i * 4] = matrix[i * 3];\n            UniformBuffer._TempBuffer[i * 4 + 1] = matrix[i * 3 + 1];\n            UniformBuffer._TempBuffer[i * 4 + 2] = matrix[i * 3 + 2];\n            UniformBuffer._TempBuffer[i * 4 + 3] = 0.0;\n        }\n        this.updateUniform(name, UniformBuffer._TempBuffer, 12);\n    }\n    _updateMatrix3x3ForEffect(name, matrix) {\n        this._currentEffect.setMatrix3x3(name, matrix);\n    }\n    _updateMatrix2x2ForEffect(name, matrix) {\n        this._currentEffect.setMatrix2x2(name, matrix);\n    }\n    _updateMatrix2x2ForUniform(name, matrix) {\n        // To match std140, matrix must be realigned\n        for (let i = 0; i < 2; i++) {\n            UniformBuffer._TempBuffer[i * 4] = matrix[i * 2];\n            UniformBuffer._TempBuffer[i * 4 + 1] = matrix[i * 2 + 1];\n            UniformBuffer._TempBuffer[i * 4 + 2] = 0.0;\n            UniformBuffer._TempBuffer[i * 4 + 3] = 0.0;\n        }\n        this.updateUniform(name, UniformBuffer._TempBuffer, 8);\n    }\n    _updateFloatForEffect(name, x) {\n        this._currentEffect.setFloat(name, x);\n    }\n    _updateFloatForUniform(name, x) {\n        UniformBuffer._TempBuffer[0] = x;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 1);\n    }\n    _updateFloat2ForEffect(name, x, y, suffix = \"\") {\n        this._currentEffect.setFloat2(name + suffix, x, y);\n    }\n    _updateFloat2ForUniform(name, x, y) {\n        UniformBuffer._TempBuffer[0] = x;\n        UniformBuffer._TempBuffer[1] = y;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 2);\n    }\n    _updateFloat3ForEffect(name, x, y, z, suffix = \"\") {\n        this._currentEffect.setFloat3(name + suffix, x, y, z);\n    }\n    _updateFloat3ForUniform(name, x, y, z) {\n        UniformBuffer._TempBuffer[0] = x;\n        UniformBuffer._TempBuffer[1] = y;\n        UniformBuffer._TempBuffer[2] = z;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 3);\n    }\n    _updateFloat4ForEffect(name, x, y, z, w, suffix = \"\") {\n        this._currentEffect.setFloat4(name + suffix, x, y, z, w);\n    }\n    _updateFloat4ForUniform(name, x, y, z, w) {\n        UniformBuffer._TempBuffer[0] = x;\n        UniformBuffer._TempBuffer[1] = y;\n        UniformBuffer._TempBuffer[2] = z;\n        UniformBuffer._TempBuffer[3] = w;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 4);\n    }\n    _updateFloatArrayForEffect(name, array) {\n        this._currentEffect.setFloatArray(name, array);\n    }\n    _updateFloatArrayForUniform(name, array) {\n        this.updateUniformArray(name, array, array.length);\n    }\n    _updateArrayForEffect(name, array) {\n        this._currentEffect.setArray(name, array);\n    }\n    _updateArrayForUniform(name, array) {\n        this.updateUniformArray(name, array, array.length);\n    }\n    _updateIntArrayForEffect(name, array) {\n        this._currentEffect.setIntArray(name, array);\n    }\n    _updateIntArrayForUniform(name, array) {\n        UniformBuffer._TempBufferInt32View.set(array);\n        this.updateUniformArray(name, UniformBuffer._TempBuffer, array.length);\n    }\n    _updateUIntArrayForEffect(name, array) {\n        this._currentEffect.setUIntArray(name, array);\n    }\n    _updateUIntArrayForUniform(name, array) {\n        UniformBuffer._TempBufferUInt32View.set(array);\n        this.updateUniformArray(name, UniformBuffer._TempBuffer, array.length);\n    }\n    _updateMatrixForEffect(name, mat) {\n        this._currentEffect.setMatrix(name, mat);\n    }\n    _updateMatrixForUniform(name, mat) {\n        if (this._cacheMatrix(name, mat)) {\n            this.updateUniform(name, mat.toArray(), 16);\n        }\n    }\n    _updateMatricesForEffect(name, mat) {\n        this._currentEffect.setMatrices(name, mat);\n    }\n    _updateMatricesForUniform(name, mat) {\n        this.updateUniform(name, mat, mat.length);\n    }\n    _updateVector3ForEffect(name, vector) {\n        this._currentEffect.setVector3(name, vector);\n    }\n    _updateVector3ForUniform(name, vector) {\n        UniformBuffer._TempBuffer[0] = vector.x;\n        UniformBuffer._TempBuffer[1] = vector.y;\n        UniformBuffer._TempBuffer[2] = vector.z;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 3);\n    }\n    _updateVector4ForEffect(name, vector) {\n        this._currentEffect.setVector4(name, vector);\n    }\n    _updateVector4ForUniform(name, vector) {\n        UniformBuffer._TempBuffer[0] = vector.x;\n        UniformBuffer._TempBuffer[1] = vector.y;\n        UniformBuffer._TempBuffer[2] = vector.z;\n        UniformBuffer._TempBuffer[3] = vector.w;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 4);\n    }\n    _updateColor3ForEffect(name, color, suffix = \"\") {\n        this._currentEffect.setColor3(name + suffix, color);\n    }\n    _updateColor3ForUniform(name, color) {\n        UniformBuffer._TempBuffer[0] = color.r;\n        UniformBuffer._TempBuffer[1] = color.g;\n        UniformBuffer._TempBuffer[2] = color.b;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 3);\n    }\n    _updateColor4ForEffect(name, color, alpha, suffix = \"\") {\n        this._currentEffect.setColor4(name + suffix, color, alpha);\n    }\n    _updateDirectColor4ForEffect(name, color, suffix = \"\") {\n        this._currentEffect.setDirectColor4(name + suffix, color);\n    }\n    _updateColor4ForUniform(name, color, alpha) {\n        UniformBuffer._TempBuffer[0] = color.r;\n        UniformBuffer._TempBuffer[1] = color.g;\n        UniformBuffer._TempBuffer[2] = color.b;\n        UniformBuffer._TempBuffer[3] = alpha;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 4);\n    }\n    _updateDirectColor4ForUniform(name, color) {\n        UniformBuffer._TempBuffer[0] = color.r;\n        UniformBuffer._TempBuffer[1] = color.g;\n        UniformBuffer._TempBuffer[2] = color.b;\n        UniformBuffer._TempBuffer[3] = color.a;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 4);\n    }\n    _updateIntForEffect(name, x, suffix = \"\") {\n        this._currentEffect.setInt(name + suffix, x);\n    }\n    _updateIntForUniform(name, x) {\n        UniformBuffer._TempBufferInt32View[0] = x;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 1);\n    }\n    _updateInt2ForEffect(name, x, y, suffix = \"\") {\n        this._currentEffect.setInt2(name + suffix, x, y);\n    }\n    _updateInt2ForUniform(name, x, y) {\n        UniformBuffer._TempBufferInt32View[0] = x;\n        UniformBuffer._TempBufferInt32View[1] = y;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 2);\n    }\n    _updateInt3ForEffect(name, x, y, z, suffix = \"\") {\n        this._currentEffect.setInt3(name + suffix, x, y, z);\n    }\n    _updateInt3ForUniform(name, x, y, z) {\n        UniformBuffer._TempBufferInt32View[0] = x;\n        UniformBuffer._TempBufferInt32View[1] = y;\n        UniformBuffer._TempBufferInt32View[2] = z;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 3);\n    }\n    _updateInt4ForEffect(name, x, y, z, w, suffix = \"\") {\n        this._currentEffect.setInt4(name + suffix, x, y, z, w);\n    }\n    _updateInt4ForUniform(name, x, y, z, w) {\n        UniformBuffer._TempBufferInt32View[0] = x;\n        UniformBuffer._TempBufferInt32View[1] = y;\n        UniformBuffer._TempBufferInt32View[2] = z;\n        UniformBuffer._TempBufferInt32View[3] = w;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 4);\n    }\n    _updateUIntForEffect(name, x, suffix = \"\") {\n        this._currentEffect.setUInt(name + suffix, x);\n    }\n    _updateUIntForUniform(name, x) {\n        UniformBuffer._TempBufferUInt32View[0] = x;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 1);\n    }\n    _updateUInt2ForEffect(name, x, y, suffix = \"\") {\n        this._currentEffect.setUInt2(name + suffix, x, y);\n    }\n    _updateUInt2ForUniform(name, x, y) {\n        UniformBuffer._TempBufferUInt32View[0] = x;\n        UniformBuffer._TempBufferUInt32View[1] = y;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 2);\n    }\n    _updateUInt3ForEffect(name, x, y, z, suffix = \"\") {\n        this._currentEffect.setUInt3(name + suffix, x, y, z);\n    }\n    _updateUInt3ForUniform(name, x, y, z) {\n        UniformBuffer._TempBufferUInt32View[0] = x;\n        UniformBuffer._TempBufferUInt32View[1] = y;\n        UniformBuffer._TempBufferUInt32View[2] = z;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 3);\n    }\n    _updateUInt4ForEffect(name, x, y, z, w, suffix = \"\") {\n        this._currentEffect.setUInt4(name + suffix, x, y, z, w);\n    }\n    _updateUInt4ForUniform(name, x, y, z, w) {\n        UniformBuffer._TempBufferUInt32View[0] = x;\n        UniformBuffer._TempBufferUInt32View[1] = y;\n        UniformBuffer._TempBufferUInt32View[2] = z;\n        UniformBuffer._TempBufferUInt32View[3] = w;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 4);\n    }\n    /**\n     * Sets a sampler uniform on the effect.\n     * @param name Define the name of the sampler.\n     * @param texture Define the texture to set in the sampler\n     */\n    setTexture(name, texture) {\n        this._currentEffect.setTexture(name, texture);\n    }\n    /**\n     * Directly updates the value of the uniform in the cache AND on the GPU.\n     * @param uniformName Define the name of the uniform, as used in the uniform block in the shader.\n     * @param data Define the flattened data\n     */\n    updateUniformDirectly(uniformName, data) {\n        this.updateUniform(uniformName, data, data.length);\n        this.update();\n    }\n    /**\n     * Associates an effect to this uniform buffer\n     * @param effect Define the effect to associate the buffer to\n     * @param name Name of the uniform block in the shader.\n     */\n    bindToEffect(effect, name) {\n        this._currentEffect = effect;\n        this._currentEffectName = name;\n    }\n    /**\n     * Binds the current (GPU) buffer to the effect\n     */\n    bindUniformBuffer() {\n        if (!this._noUBO && this._buffer && this._currentEffect) {\n            this._currentEffect.bindUniformBuffer(this._buffer, this._currentEffectName);\n        }\n    }\n    /**\n     * Dissociates the current effect from this uniform buffer\n     */\n    unbindEffect() {\n        this._currentEffect = undefined;\n        this._currentEffectName = undefined;\n    }\n    /**\n     * Sets the current state of the class (_bufferIndex, _buffer) to point to the data buffer passed in parameter if this buffer is one of the buffers handled by the class (meaning if it can be found in the _buffers array)\n     * This method is meant to be able to update a buffer at any time: just call setDataBuffer to set the class in the right state, call some updateXXX methods and then call udpate() => that will update the GPU buffer on the graphic card\n     * @param dataBuffer buffer to look for\n     * @returns true if the buffer has been found and the class internal state points to it, else false\n     */\n    setDataBuffer(dataBuffer) {\n        if (!this._buffers) {\n            return this._buffer === dataBuffer;\n        }\n        for (let b = 0; b < this._buffers.length; ++b) {\n            const buffer = this._buffers[b];\n            if (buffer[0] === dataBuffer) {\n                this._bufferIndex = b;\n                this._buffer = dataBuffer;\n                this._createBufferOnWrite = false;\n                this._currentEffect = undefined;\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Disposes the uniform buffer.\n     */\n    dispose() {\n        if (this._noUBO) {\n            return;\n        }\n        const uniformBuffers = this._engine._uniformBuffers;\n        const index = uniformBuffers.indexOf(this);\n        if (index !== -1) {\n            uniformBuffers[index] = uniformBuffers[uniformBuffers.length - 1];\n            uniformBuffers.pop();\n        }\n        if (this._engine._features.trackUbosInFrame && this._buffers) {\n            for (let i = 0; i < this._buffers.length; ++i) {\n                const buffer = this._buffers[i][0];\n                this._engine._releaseBuffer(buffer);\n            }\n        }\n        else if (this._buffer && this._engine._releaseBuffer(this._buffer)) {\n            this._buffer = null;\n        }\n    }\n}\n/** @internal */\nUniformBuffer._UpdatedUbosInFrame = {};\n// Pool for avoiding memory leaks\nUniformBuffer._MAX_UNIFORM_SIZE = 256;\nUniformBuffer._TempBuffer = new Float32Array(UniformBuffer._MAX_UNIFORM_SIZE);\nUniformBuffer._TempBufferInt32View = new Int32Array(UniformBuffer._TempBuffer.buffer);\nUniformBuffer._TempBufferUInt32View = new Uint32Array(UniformBuffer._TempBuffer.buffer);\n//# sourceMappingURL=uniformBuffer.js.map","/** @internal */\nexport class UniformBufferEffectCommonAccessor {\n    _isUbo(uboOrEffect) {\n        return uboOrEffect.addUniform !== undefined;\n    }\n    constructor(uboOrEffect) {\n        if (this._isUbo(uboOrEffect)) {\n            this.setMatrix3x3 = uboOrEffect.updateMatrix3x3.bind(uboOrEffect);\n            this.setMatrix2x2 = uboOrEffect.updateMatrix2x2.bind(uboOrEffect);\n            this.setFloat = uboOrEffect.updateFloat.bind(uboOrEffect);\n            this.setFloat2 = uboOrEffect.updateFloat2.bind(uboOrEffect);\n            this.setFloat3 = uboOrEffect.updateFloat3.bind(uboOrEffect);\n            this.setFloat4 = uboOrEffect.updateFloat4.bind(uboOrEffect);\n            this.setFloatArray = uboOrEffect.updateFloatArray.bind(uboOrEffect);\n            this.setArray = uboOrEffect.updateArray.bind(uboOrEffect);\n            this.setIntArray = uboOrEffect.updateIntArray.bind(uboOrEffect);\n            this.setMatrix = uboOrEffect.updateMatrix.bind(uboOrEffect);\n            this.setMatrices = uboOrEffect.updateMatrices.bind(uboOrEffect);\n            this.setVector3 = uboOrEffect.updateVector3.bind(uboOrEffect);\n            this.setVector4 = uboOrEffect.updateVector4.bind(uboOrEffect);\n            this.setColor3 = uboOrEffect.updateColor3.bind(uboOrEffect);\n            this.setColor4 = uboOrEffect.updateColor4.bind(uboOrEffect);\n            this.setDirectColor4 = uboOrEffect.updateDirectColor4.bind(uboOrEffect);\n            this.setInt = uboOrEffect.updateInt.bind(uboOrEffect);\n            this.setInt2 = uboOrEffect.updateInt2.bind(uboOrEffect);\n            this.setInt3 = uboOrEffect.updateInt3.bind(uboOrEffect);\n            this.setInt4 = uboOrEffect.updateInt4.bind(uboOrEffect);\n        }\n        else {\n            this.setMatrix3x3 = uboOrEffect.setMatrix3x3.bind(uboOrEffect);\n            this.setMatrix2x2 = uboOrEffect.setMatrix2x2.bind(uboOrEffect);\n            this.setFloat = uboOrEffect.setFloat.bind(uboOrEffect);\n            this.setFloat2 = uboOrEffect.setFloat2.bind(uboOrEffect);\n            this.setFloat3 = uboOrEffect.setFloat3.bind(uboOrEffect);\n            this.setFloat4 = uboOrEffect.setFloat4.bind(uboOrEffect);\n            this.setFloatArray = uboOrEffect.setFloatArray.bind(uboOrEffect);\n            this.setArray = uboOrEffect.setArray.bind(uboOrEffect);\n            this.setIntArray = uboOrEffect.setIntArray.bind(uboOrEffect);\n            this.setMatrix = uboOrEffect.setMatrix.bind(uboOrEffect);\n            this.setMatrices = uboOrEffect.setMatrices.bind(uboOrEffect);\n            this.setVector3 = uboOrEffect.setVector3.bind(uboOrEffect);\n            this.setVector4 = uboOrEffect.setVector4.bind(uboOrEffect);\n            this.setColor3 = uboOrEffect.setColor3.bind(uboOrEffect);\n            this.setColor4 = uboOrEffect.setColor4.bind(uboOrEffect);\n            this.setDirectColor4 = uboOrEffect.setDirectColor4.bind(uboOrEffect);\n            this.setInt = uboOrEffect.setInt.bind(uboOrEffect);\n            this.setInt2 = uboOrEffect.setInt2.bind(uboOrEffect);\n            this.setInt3 = uboOrEffect.setInt3.bind(uboOrEffect);\n            this.setInt4 = uboOrEffect.setInt4.bind(uboOrEffect);\n        }\n    }\n}\n//# sourceMappingURL=uniformBufferEffectCommonAccessor.js.map"],"names":["Texture","noMipmap","this","_noMipmap","mimeType","_mimeType","isBlocking","value","_isBlocking","invertY","_invertY","constructor","url","sceneOrEngine","noMipmapOrOptions","samplingMode","TRILINEAR_SAMPLINGMODE","onLoad","onError","buffer","deleteBuffer","format","loaderOptions","creationFlags","forcedExtension","_a","_b","_c","_d","_e","_f","_g","_h","_j","super","uOffset","vOffset","uScale","vScale","uAng","vAng","wAng","uRotationCenter","vRotationCenter","wRotationCenter","homogeneousRotationInUVTransform","inspectableCustomProperties","_rowGenerationMatrix","_cachedTextureMatrix","_projectionModeMatrix","_t0","_t1","_t2","_cachedUOffset","_cachedVOffset","_cachedUScale","_cachedVScale","_cachedUAng","_cachedVAng","_cachedWAng","_cachedReflectionProjectionMatrixId","_cachedURotationCenter","_cachedVRotationCenter","_cachedWRotationCenter","_cachedHomogeneousRotationInUVTransform","_cachedReflectionTextureMatrix","_cachedReflectionUOffset","_cachedReflectionVOffset","_cachedReflectionUScale","_cachedReflectionVScale","_cachedReflectionCoordinatesMode","_buffer","_deleteBuffer","_format","_delayedOnLoad","_delayedOnError","onLoadObservable","name","useSRGBBuffer","internalTexture","undefined","_initialSamplingMode","_loaderOptions","_creationFlags","_useSRGBBuffer","_forcedExtension","scene","getScene","engine","_getEngine","onBeforeTextureInitObservable","notifyObservers","load","_texture","_invertVScale","_cachedWrapU","wrapU","_cachedWrapV","wrapV","_cachedWrapR","wrapR","hasObservers","resetCachedMaterial","errorHandler","message","exception","_loadingError","_errorObject","OnTextureLoadErrorObservable","_getFromCache","isReady","loadObserver","onLoadedObservable","add","onErrorObservable","e","remove","useDelayedTextureLoading","delayLoadState","createTexture","updateURL","releaseInternalTexture","markAllMaterialsAsDirty","startsWith","delayLoad","getEngine","_prepareRowForTextureGeneration","x","y","z","t","checkTransformsAreIdentical","texture","getTextureMatrix","uBase","multiplyToRef","setRowFromFloats","m","subtractInPlace","optimizeUVAllocation","mat","hasTexture","getReflectionTextureMatrix","coordinatesMode","PROJECTION_MODE","getProjectionMatrix","updateFlag","flagMaterialsAsTextureDirty","PLANAR_MODE","projectionMatrix","getActiveTextures","indexOf","clone","options","textureFormat","serialize","savedName","SerializeBuffers","serializationObject","_SerializeInternalTextureUniqueId","ForceSerializeBuffers","substr","base64String","replace","Uint8Array","_forceSerialize","_engine","_features","supportSyncTextureRead","internalTextureUniqueId","uniqueId","getClassName","dispose","clear","static","parsedTexture","rootUrl","customType","parsedCustomTexture","Parse","updateSamplingMode","_samplingMode","isCube","isRenderTarget","_CubeTextureParser","hasInternalTextureUniqueId","cache","getLoadedTexturesCache","onLoaded","sampling","animations","animationIndex","length","parsedAnimation","internalClass","push","_setUniqueId","generateMipMaps","mirrorPlane","mirrorTexture","_CreateMirror","renderTargetSize","_waitingRenderList","renderList","renderTargetTexture","reflectionProbes","index","probe","cubeTexture","_CreateRenderTargetTexture","CreateFromBase64String","UseSerializedUrlIfAny","data","jsonTexture","NEAREST_SAMPLINGMODE","NEAREST_NEAREST_MIPLINEAR","BILINEAR_SAMPLINGMODE","LINEAR_LINEAR_MIPNEAREST","LINEAR_LINEAR_MIPLINEAR","NEAREST_NEAREST_MIPNEAREST","NEAREST_LINEAR_MIPNEAREST","NEAREST_LINEAR_MIPLINEAR","NEAREST_LINEAR","NEAREST_NEAREST","LINEAR_NEAREST_MIPNEAREST","LINEAR_NEAREST_MIPLINEAR","LINEAR_LINEAR","LINEAR_NEAREST","EXPLICIT_MODE","SPHERICAL_MODE","CUBIC_MODE","SKYBOX_MODE","INVCUBIC_MODE","EQUIRECTANGULAR_MODE","FIXED_EQUIRECTANGULAR_MODE","FIXED_EQUIRECTANGULAR_MIRRORED_MODE","CLAMP_ADDRESSMODE","WRAP_ADDRESSMODE","MIRROR_ADDRESSMODE","prototype","ThinTexture","_wrapU","_wrapV","is3D","is2DArray","anisotropicFilteringLevel","_cachedSize","_cachedBaseSize","getInternalTexture","getSize","width","height","_size","getBaseSize","baseWidth","baseHeight","updateTextureSamplingMode","removeSource","video","firstChild","removeChild","srcObject","src","removeAttribute","VideoTexture","onUserActionRequestedObservable","_onUserActionRequestedObservable","_processError","reason","_errorFound","_onError","_handlePlay","play","catch","muted","otherReason","settings","_stillImageCaptured","_displayingPosterTexture","_frameId","_currentSrc","_resizeInternalTexture","needPOTTextures","videoWidth","videoHeight","_generateMipMaps","createDynamicTexture","_updateInternalTexture","_createInternalTexture","addEventListener","autoplay","_settings","poster","independentVideoSource","oldHandler","onplaying","oldMuted","pause","_reset","readyState","HAVE_CURRENT_DATA","frameId","getFrameId","updateVideoTexture","_externalTexture","autoPlay","loop","autoUpdateTexture","_getName","_getVideo","createExternalTexture","setAttribute","_createInternalTextureOnEvent","videoHasEnoughData","HTMLVideoElement","currentSrc","toString","isNative","document","createElement","forEach","source","appendChild","onDisposeObservable","addOnce","_rebuild","update","updateTexture","isVisible","paused","removeEventListener","stream","constraints","createVideoElement","_badOS","body","style","transform","opacity","position","bottom","right","mozSrcObject","window","URL","createObjectURL","Promise","resolve","onPlaying","videoTexture","audioConstaints","navigator","mediaDevices","getUserMedia","audio","CreateFromStreamAsync","getTracks","track","stop","reject","onReady","CreateFromWebCamAsync","then","err","addClipPlaneUniforms","uniforms","prepareDefinesForClipPlanes","primaryHolder","secondaryHolder","defines","changed","clipPlane","addDefine","clipPlane2","clipPlane3","clipPlane4","clipPlane5","clipPlane6","bindClipPlane","effect","setClipPlane","uniformName","setFloat4","normal","d","defineName","defineString","defineClipPlane","alreadySet","Array","isArray","defineIndex","splice","ColorCurves","_dirty","_tempColor","_globalCurve","_highlightsCurve","_midtonesCurve","_shadowsCurve","_positiveCurve","_negativeCurve","_globalHue","_globalDensity","_globalSaturation","_globalExposure","_highlightsHue","_highlightsDensity","_highlightsSaturation","_highlightsExposure","_midtonesHue","_midtonesDensity","_midtonesSaturation","_midtonesExposure","_shadowsHue","_shadowsDensity","_shadowsSaturation","_shadowsExposure","globalHue","globalDensity","globalSaturation","globalExposure","highlightsHue","highlightsDensity","highlightsSaturation","highlightsExposure","midtonesHue","midtonesDensity","midtonesSaturation","midtonesExposure","shadowsHue","shadowsDensity","shadowsSaturation","shadowsExposure","colorCurves","positiveUniform","neutralUniform","negativeUniform","_getColorGradingDataToRef","subtractToRef","r","g","b","a","uniformsList","hue","density","saturation","exposure","result","_Clamp","_ApplyColorGradingSliderNonlinear","_FromHSBToRef","scaleToRef","Math","abs","pow","brightness","h","s","v","i","floor","f","p","q","min","max","DrawWrapper","getPipelineContext","createMaterialContext","drawContext","createDrawContext","materialContext","setEffect","resetContext","reset","Effect","ShadersRepository","repo","onBindObservable","_onBindObservable","baseName","attributesNamesOrOptions","uniformsNamesOrEngine","samplers","fallbacks","onCompiled","indexParameters","key","shaderLanguage","processCodeAfterIncludes","onBind","onCompileObservable","_wasPreviouslyReady","_forceRebindOnNextCall","_wasPreviouslyUsingInstances","_isDisposed","_bonesComputationForcedToCPU","_uniformBuffersNames","_multiTarget","_samplers","_isReady","_compilationError","_allFallbacksProcessed","_uniforms","_key","_fallbacks","_vertexSourceCodeOverride","_fragmentSourceCodeOverride","_transformFeedbackVaryings","_pipelineContext","_vertexSourceCode","_fragmentSourceCode","_vertexSourceCodeBeforeMigration","_fragmentSourceCodeBeforeMigration","_rawVertexSourceCode","_rawFragmentSourceCode","vertexSource","fragmentSource","processFinalCode","attributes","_attributesNames","_uniformsNames","uniformsNames","concat","_samplerList","slice","_indexParameters","transformFeedbackVaryings","multiTarget","_shaderLanguage","uniformBuffersNames","_uniformBuffersNamesList","_attributeLocationByName","_UniqueIdSeed","hostDocument","getHostDocument","vertexElement","getElementById","vertex","fragmentElement","fragment","_processingContext","_getShaderProcessingContext","processorOptions","split","isFragment","shouldUseHighPrecisionShader","_shouldUseHighPrecisionShader","processor","_getShaderProcessor","supportsUniformBuffers","shadersRepository","includesShadersStore","version","platformName","shaderPlatformName","processingContext","isNDCHalfZRange","useReverseDepthBuffer","shaderCodes","shadersLoaded","migratedVertexCode","fragmentCode","migratedFragmentCode","codeBeforeMigration","finalShaders","_useFinalCode","vertexCode","_loadShader","proxyFunction","functionName","apply","arguments","endsWith","n","bind","spectorName","_prepareEffect","_isReadyInternal","getAttributesNames","getAttributeLocation","_attributes","getAttributeLocationByName","getAttributesCount","getUniformIndex","getUniform","getSamplers","getUniformNames","getUniformBuffersNames","getIndexParameters","getCompilationError","allFallbacksProcessed","executeWhenCompiled","func","isAsync","setTimeout","_checkIsReady","previousPipelineContext","_processCompilationErrors","shader","optionalKey","callback","HTMLElement","atob","shaderStore","shaderUrl","_loadFile","toLowerCase","vertexSourceCode","_getVertexShaderCode","fragmentSourceCode","_getFragmentShaderCode","vertexSourceCodeBeforeMigration","fragmentSourceCodeBeforeMigration","rawVertexSourceCode","rawFragmentSourceCode","_rebuildProgram","error","scenes","_handlesSpectorRebuildCallback","attributesNames","createPipelineContext","_name","rebuildRebind","_preparePipelineContext","_executeWhenRenderingStateIsCompiled","_fillEffectInformation","bindSamplers","unBindMesh","_deletePipelineContext","_getShaderCodeAndErrorLine","code","regexp","errorLine","res","match","lineNumber","parseInt","lines","map","uniform","attribute","LogShaderCodeOnCompilationError","lineErrorVertex","lineErrorFragment","notifyErrors","hasMoreFallbacks","reduce","isSupported","_bindTexture","channel","setTexture","setDepthStencilTexture","setTextureArray","textures","exName","initialPos","currentExName","channelIndex","setTextureFromPostProcess","postProcess","setTextureFromPostProcessOutput","bindUniformBuffer","bufferName","_BaseCache","useUBOBindingCache","bindUniformBufferBase","bindUniformBlock","blockName","setFloatArray","array","setArray","setFloatArray2","setArray2","setFloatArray3","setArray3","setFloatArray4","setArray4","setBool","bool","setInt","_releaseEffect","pixelShader","vertexShader","ShadersStore","IncludesShadersStore","EffectFallbacks","_defines","_currentRank","_maxRank","_mesh","addFallback","rank","define","addCPUSkinningFallback","mesh","currentDefines","computeBonesUsingShaders","numBoneInfluencers","meshes","otherMesh","material","getEffect","subMeshes","subMesh","currentFallbacks","defaultOptions","positions","indices","EffectRenderer","_fullscreenViewport","_vertexBuffers","_indexBuffer","createIndexBuffer","_onContextRestoredObserver","onContextRestoredObservable","setViewport","viewport","bindBuffers","applyEffectWrapper","effectWrapper","setState","depthCullingState","depthTest","stencilState","stencilTest","enableEffect","_drawWrapper","onApplyObservable","restoreStates","draw","drawElementsType","_isRenderTargetTexture","renderTarget","render","outputTexture","out","bindFramebuffer","unBindFramebuffer","vertexBuffer","_releaseBuffer","EffectWrapper","creationOptions","effectCreationOptions","uniformNames","fragmentShader","setFloat2","join","useShaderStore","createEffect","attributeNames","samplerNames","ImageProcessingConfigurationDefines","IMAGEPROCESSING","VIGNETTE","VIGNETTEBLENDMODEMULTIPLY","VIGNETTEBLENDMODEOPAQUE","TONEMAPPING","TONEMAPPING_ACES","CONTRAST","COLORCURVES","COLORGRADING","COLORGRADING3D","SAMPLER3DGREENDEPTH","SAMPLER3DBGRMAP","DITHER","IMAGEPROCESSINGPOSTPROCESS","EXPOSURE","SKIPFINALCOLORCLAMP","rebuild","ImageProcessingConfiguration","_colorCurvesEnabled","_colorGradingEnabled","_colorGradingWithGreenDepth","_colorGradingBGR","_exposure","_toneMappingEnabled","_toneMappingType","TONEMAPPING_STANDARD","_contrast","vignetteStretch","vignetteCenterX","vignetteCenterY","vignetteWeight","vignetteColor","vignetteCameraFov","_vignetteBlendMode","VIGNETTEMODE_MULTIPLY","_vignetteEnabled","_ditheringEnabled","_ditheringIntensity","_skipFinalColorClamp","_applyByPostProcess","_isEnabled","onUpdateParameters","colorCurvesEnabled","_updateParameters","colorGradingTexture","_colorGradingTexture","colorGradingEnabled","colorGradingWithGreenDepth","colorGradingBGR","toneMappingEnabled","toneMappingType","contrast","vignetteCentreY","vignetteCentreX","vignetteBlendMode","vignetteEnabled","ditheringEnabled","ditheringIntensity","skipFinalColorClamp","applyByPostProcess","isEnabled","samplersList","prepareDefines","forPostProcess","_VIGNETTEMODE_MULTIPLY","overrideAspectRatio","inverseWidth","getRenderWidth","inverseHeight","getRenderHeight","setFloat","aspectRatio","vignetteScaleY","tan","vignetteScaleX","vignetteScaleGeometricMean","sqrt","vignettePower","textureSize","level","parsed","VIGNETTEMODE_OPAQUE","_VIGNETTEMODE_OPAQUE","FresnelParameters","bias","power","leftColor","rightColor","newFresnelParameters","equals","otherFresnelParameters","asArray","parsedFresnelParameters","MaterialDetailMapDefines","DETAIL","DETAILDIRECTUV","DETAIL_NORMALBLENDMETHOD","DetailMapConfiguration","_markAllSubMeshesAsTexturesDirty","_enable","_internalMarkAllSubMeshesAsTexturesDirty","addToPluginList","diffuseBlendLevel","roughnessBlendLevel","bumpLevel","_normalBlendMethod","_dirtyCallbacks","isReadyForSubMesh","_areTexturesDirty","texturesEnabled","getCaps","standardDerivatives","bindForSubMesh","uniformBuffer","isFrozen","_material","useUbo","isSync","updateFloat4","coordinatesIndex","activeTextures","getAnimatables","animatables","forceDisposeTextures","getUniforms","ubo","size","type","MaterialStencilState","enabled","mask","funcRef","funcMask","opStencilFail","opDepthFail","opStencilDepthPass","_func","_funcRef","_funcMask","_opStencilFail","_opDepthFail","_opStencilDepthPass","_mask","_enabled","copyTo","parse","Material","canRenderToMRT","alpha","_alpha","oldValue","markAsDirty","MiscDirtyFlag","backFaceCulling","_backFaceCulling","TextureDirtyFlag","cullBackFaces","_cullBackFaces","blockDirtyMechanism","_blockDirtyMechanism","markDirty","atomicMaterialsUpdate","hasRenderTargetTextures","_eventInfo","_callbackPluginEventHasRenderTargetTextures","onDispose","_onDisposeObserver","_onBindObserver","onUnBindObservable","_onUnBindObservable","onEffectCreatedObservable","_onEffectCreatedObservable","alphaMode","_alphaMode","needDepthPrePass","_needDepthPrePass","checkReadyOnEveryCall","isPrePassCapable","fogEnabled","_fogEnabled","wireframe","_fillMode","WireFrameFillMode","LineListDrawMode","LineLoopDrawMode","LineStripDrawMode","_scene","forceWireframe","fillMode","TriangleFillMode","pointsCloud","PointFillMode","PointListDrawMode","forcePointsCloud","_getDrawWrapper","_setDrawWrapper","drawWrapper","doNotAdd","shadowDepthWrapper","allowShaderHotSwapping","metadata","reservedDataStore","checkReadyOnlyOnce","state","getRenderTargetTextures","doNotSerialize","_storeEffectOnSubMeshes","disableDepthWrite","disableColorWrite","forceDepthWrite","depthFunction","separateCullingPass","pointSize","zOffset","zOffsetUnits","stencil","_useUBO","_cachedDepthWriteState","_cachedColorWriteState","_cachedDepthFunctionState","_indexInSceneMaterialArray","meshMap","_parentContainer","_uniformBufferLayoutBuilt","_callbackPluginEventGeneric","_callbackPluginEventIsReadyForSubMesh","_callbackPluginEventPrepareDefines","_callbackPluginEventPrepareDefinesBeforeAttributes","_callbackPluginEventHardBindForSubMesh","_callbackPluginEventBindForSubMesh","_callbackPluginEventFillRenderTargetTextures","_forceAlphaTest","_transparencyMode","setScene","_markAllSubMeshesAsLightsDirty","_markAllSubMeshesAsFresnelDirty","_markAllSubMeshesAsAttributesDirty","_markAllSubMeshesAsMiscDirty","_markAllSubMeshesAsPrePassDirty","_markAllSubMeshesAsAllDirty","id","getUniqueId","_materialContext","useRightHandedSystem","sideOrientation","ClockWiseSideOrientation","CounterClockWiseSideOrientation","_uniformBuffer","addMaterial","useMaterialMeshMap","OnEventObservable","fullDetails","_isMaterial","freeze","unfreeze","useInstances","materialDefines","transparencyMode","MATERIAL_ALPHATESTANDBLEND","_markAllSubMeshesAsTexturesAndMiscDirty","_disableAlphaBlending","MATERIAL_OPAQUE","MATERIAL_ALPHATEST","needAlphaBlending","needAlphaBlendingForMesh","visibility","hasVertexAlpha","needAlphaTesting","_shouldTurnAlphaTestOn","getAlphaTestTexture","forceMaterialDirty","getMaterial","AllDirtyFlag","_preBind","overrideOrientation","reverse","_mirroredCameraPosition","world","buildUniformLayout","create","bindOnlyWorldMatrix","bindView","_needToBindSceneUbo","setMatrix","getViewMatrix","bindViewProjection","getTransformMatrix","bindEyePosition","variableName","_afterBind","_cachedMaterial","getSceneUniformBuffer","finalizeSceneUbo","_cachedVisibility","getDepthWrite","setDepthWrite","getColorWrite","setColorWrite","getDepthFunction","setDepthFunction","unbind","getBindedMeshes","meshId","filter","forceCompilation","localOptions","currentHotSwapingState","checkReady","clipPlaneState","allDone","lastError","tempSubMesh","_renderId","forceCompilationAsync","flag","blockMaterialDirtyMechanism","_DirtyCallbackArray","_TextureDirtyCallBack","LightDirtyFlag","_LightsDirtyCallBack","FresnelDirtyFlag","_FresnelDirtyCallBack","AttributesDirtyFlag","_AttributeDirtyCallBack","_MiscDirtyCallBack","PrePassDirtyFlag","_PrePassDirtyCallBack","_markAllSubMeshesAsDirty","_RunDirtyCallBacks","resetDrawCache","_drawWrappers","markAllAsDirty","_markScenePrePassDirty","prePassRenderer","enablePrePassRenderer","_AllDirtyCallBack","_markAllSubMeshesAsImageProcessingDirty","_ImageProcessingDirtyCallBack","_markAllSubMeshesAsFresnelAndMiscDirty","_FresnelAndMiscDirtyCallBack","_TextureAndMiscDirtyCallBack","setPrePassRenderer","forceDisposeEffect","notBoundToMesh","stopAnimation","freeProcessedMaterials","removeMaterial","materials","releaseVertexArrayObject","sourceMesh","geometry","_releaseVertexArrayObject","parsedMaterial","overloadedAlbedo","BABYLON","LegacyPBRMaterial","_loadedUniqueId","TriangleStripDrawMode","TriangleFanDrawMode","MATERIAL_ALPHABLEND","MATERIAL_NORMALBLENDMETHOD_WHITEOUT","MATERIAL_NORMALBLENDMETHOD_RNM","markAsImageProcessingDirty","markAsTexturesDirty","markAsFresnelDirty","markAsMiscDirty","markAsPrePassDirty","markAsLightDirty","markAsAttributesDirty","cb","MaterialDefines","externalProperties","_keys","_isDirty","_areLightsDirty","_areLightsDisposed","_areAttributesDirty","_areFresnelDirty","_areMiscDirty","_arePrePassDirty","_areImageProcessingDirty","_normals","_uvs","_needNormals","_needUVs","_externalProperties","prop","Object","hasOwnProperty","call","_setDefaultValue","isDirty","markAsProcessed","markAsUnprocessed","disposed","keys","isEqual","other","cloneTo","defValue","default","MaterialFlags","DiffuseTextureEnabled","_DiffuseTextureEnabled","DetailTextureEnabled","_DetailTextureEnabled","AmbientTextureEnabled","_AmbientTextureEnabled","OpacityTextureEnabled","_OpacityTextureEnabled","ReflectionTextureEnabled","_ReflectionTextureEnabled","EmissiveTextureEnabled","_EmissiveTextureEnabled","SpecularTextureEnabled","_SpecularTextureEnabled","BumpTextureEnabled","_BumpTextureEnabled","LightmapTextureEnabled","_LightmapTextureEnabled","RefractionTextureEnabled","_RefractionTextureEnabled","ColorGradingTextureEnabled","_ColorGradingTextureEnabled","FresnelEnabled","_FresnelEnabled","ClearCoatTextureEnabled","_ClearCoatTextureEnabled","ClearCoatBumpTextureEnabled","_ClearCoatBumpTextureEnabled","ClearCoatTintTextureEnabled","_ClearCoatTintTextureEnabled","SheenTextureEnabled","_SheenTextureEnabled","AnisotropicTextureEnabled","_AnisotropicTextureEnabled","ThicknessTextureEnabled","_ThicknessTextureEnabled","RefractionIntensityTextureEnabled","_RefractionIntensityTextureEnabled","TranslucencyIntensityTextureEnabled","_TranslucencyIntensityTextureEnabled","IridescenceTextureEnabled","_IridescenceTextureEnabled","MaterialHelper","sceneUbo","bindToEffect","isIdentityAs3x2","matrix","updateMatrix","applyFog","fogMode","useLogarithmicDepth","alphaTest","GetFogState","nonUniformScaling","activeCamera","wasOrtho","wasPersp","isOrtho","mode","isPersp","useClipPlane","useThinInstances","PrepareDefinesForCamera","useBones","skeleton","materialSupportsBoneTexture","isUsingTextureForMatrices","bones","nonExcluded","excludedSkinnedMesh","manager","morphTargetManager","supportsUVs","supportsTangents","supportsNormals","numInfluencers","isUsingTextureForTargets","bakedVertexAnimationManager","useVertexColor","useMorphTargets","useVertexAlpha","useBakedVertexAnimation","isVerticesDataPresent","hasVertexColors","useVertexColors","hasInstances","hasThinInstances","PrepareDefinesForBones","PrepareDefinesForMorphTargets","PrepareDefinesForBakedVertexAnimation","previousMultiview","MULTIVIEW","outputRenderTarget","getViewCount","previousDefine","ORDER_INDEPENDENT_TRANSPARENCY","previousDefine16Bits","ORDER_INDEPENDENT_TRANSPARENCY_16BITS","useOrderIndependentTransparency","textureFloatLinearFiltering","previousPrePass","PREPASS","texturesList","SCENE_MRT_COUNT","mrtCount","getIndex","light","lightIndex","specularSupported","needNormals","needRebuild","prepareLightSpecificDefines","falloffType","specular","equalsFloats","specularEnabled","receiveShadows","shadowsEnabled","shadowEnabled","shadowGenerator","getShadowGenerator","shadowMap","getShadowMap","lightmapMode","maxSimultaneousLights","disableLighting","lightsEnabled","lightSources","PrepareDefinesForLight","caps","textureFloatRender","textureHalfFloatRender","textureHalfFloatLinearFiltering","projectedLightTexture","uniformBuffersList","updateOnlyBuffersList","uniformsListOrOptions","PrepareUniformsAndSamplersForLight","lightFallbackRank","attribs","influencers","_TmpMorphInfluencers","NUM_MORPH_INFLUENCERS","PrepareAttributesForMorphTargets","maxAttributesCount","maxVertexAttribs","tangent","uv","PushAttributesForInstances","INSTANCESCOLOR","needsPreviousMatrices","transferToEffect","useSpecular","_bindLight","len","BindLight","linearSpace","fogStart","fogEnd","fogDensity","fogColor","toLinearSpaceToRef","_TempFogColor","setColor3","prePassConfiguration","boneTexture","getTransformMatrixTexture","matrices","getTransformMatrices","setMatrices","previousBones","_CopyBonesTransformationMatrices","target","set","abstractMesh","influences","camera","log","maxZ","LN2","MaterialPluginBase","enable","_pluginManager","_activatePlugin","priority","registerForExtraEvents","pluginManager","_pluginDefineNames","_addPlugin","markAllDefinesAsDirty","hardBindForSubMesh","getCustomCode","shaderType","collectDefines","prepareDefinesBeforeAttributes","fillRenderTargetTextures","renderTargets","addFallbacks","currentRank","getAttributes","ubos","plugin","MaterialPluginEvent","rxOption","RegExp","MaterialPluginManager","_plugins","_activePlugins","_activePluginsForExtraEvents","pluginClassName","_MaterialPluginClassToMainDefine","_MaterialPluginCounter","_handlePluginEvent","sort","_codeInjectionPoints","defineNamesFromPlugins","_collectPointNames","_defineNamesFromPlugins","_handlePluginEventIsReadyForSubMesh","_handlePluginEventPrepareDefinesBeforeAttributes","_handlePluginEventPrepareDefines","_handlePluginEventBindForSubMesh","_handlePluginEventHasRenderTargetTextures","_handlePluginEventFillRenderTargetTextures","_handlePluginEventHardBindForSubMesh","getPlugin","eventData","info","defineNames","fallbackRank","_uniformList","_uboList","customCode","_injectCustomCode","_uboDeclaration","_vertexDeclaration","_fragmentDeclaration","addUniform","pointName","existingCallback","points","injectedCode","charAt","substring","regexFlags","matchOption","exec","sourceCode","rx","newCode","fullPointName","MultiMaterial","subMaterials","_subMaterials","_hookArray","getChildren","_waitingSubMaterialsUniqueIds","multiMaterials","oldPush","items","oldSplice","deleteCount","deleted","getSubMaterial","defaultMaterial","subMaterial","cloneChildren","newMultiMaterial","current","tags","materialsUniqueIds","matIndex","subMat","forceDisposeChildren","parsedMultiMaterial","multiMaterial","subMatId","getLastMaterialById","PrePassConfiguration","previousWorldMatrices","currentRTisSceneRT","previousViewProjection","currentViewProjection","_lastUpdateFrameId","copyFrom","PushMaterial","storeEffectOnSubMeshes","_normalMatrix","_activeEffect","_isReadyForSubMesh","getRenderId","bindOnlyNormalMatrix","normalMatrix","_cachedEffect","_mustRebind","isCachedMaterialInvalid","ShaderLanguage","onCreatedEffectParameters","ShaderMaterial","shaderPath","_textures","_textureArrays","_externalTextures","_floats","_ints","_uints","_floatsArrays","_colors3","_colors3Arrays","_colors4","_colors4Arrays","_vectors2","_vectors3","_vectors4","_quaternions","_quaternionsArrays","_matrices","_matrixArrays","_matrices3x3","_matrices2x2","_vectors2Arrays","_vectors3Arrays","_vectors4Arrays","_uniformBuffers","_textureSamplers","_storageBuffers","_cachedWorldViewMatrix","_cachedWorldViewProjectionMatrix","_multiview","_shaderPath","_options","uniformBuffers","externalTextures","samplerObjects","storageBuffers","_checkUniform","setExternalTexture","setUInt","setFloats","setColor3Array","arr","color","toArray","setColor4","setColor4Array","setVector2","setVector3","setVector4","setQuaternion","setQuaternionArray","quaternion","float32Array","Float32Array","copyToArray","setMatrix3x3","setMatrix2x2","setUniformBuffer","setTextureSampler","sampler","setStorageBuffer","shaderName","multiview","defineToAdd","bvaManager","customShaderNameResolve","previousEffect","previousDefines","maxSimultaneousMorphTargets","effectOverride","_drawWrapperOverride","useSceneUBO","getMeshUniformBuffer","mustRebind","getCachedMaterial","_transformMatrixR","globalPosition","getBuffer","propName","propValue","textureArrays","ints","uints","floats","FloatArrays","colors3","colors3Arrays","colors4","colors4Arrays","vectors2","vectors3","vectors4","quaternions","matrixArray","matrices3x3","matrices2x2","vectors2Arrays","vectors3Arrays","vectors4Arrays","quaternionsArrays","textureArray","floatsArrays","colors","num","request","status","JSON","responseText","output","open","send","snippetId","snippet","jsonPayload","shaderMaterial","SnippetUrl","CreateFromSnippetAsync","ParseFromSnippetAsync","StandardMaterialDefines","MAINUV1","MAINUV2","MAINUV3","MAINUV4","MAINUV5","MAINUV6","DIFFUSE","DIFFUSEDIRECTUV","BAKED_VERTEX_ANIMATION_TEXTURE","AMBIENT","AMBIENTDIRECTUV","OPACITY","OPACITYDIRECTUV","OPACITYRGB","REFLECTION","EMISSIVE","EMISSIVEDIRECTUV","SPECULAR","SPECULARDIRECTUV","BUMP","BUMPDIRECTUV","PARALLAX","PARALLAXOCCLUSION","SPECULAROVERALPHA","CLIPPLANE","CLIPPLANE2","CLIPPLANE3","CLIPPLANE4","CLIPPLANE5","CLIPPLANE6","ALPHATEST","DEPTHPREPASS","ALPHAFROMDIFFUSE","POINTSIZE","FOG","SPECULARTERM","DIFFUSEFRESNEL","OPACITYFRESNEL","REFLECTIONFRESNEL","REFRACTIONFRESNEL","EMISSIVEFRESNEL","FRESNEL","NORMAL","TANGENT","UV1","UV2","UV3","UV4","UV5","UV6","VERTEXCOLOR","VERTEXALPHA","NUM_BONE_INFLUENCERS","BonesPerMesh","BONETEXTURE","BONES_VELOCITY_ENABLED","INSTANCES","THIN_INSTANCES","GLOSSINESS","ROUGHNESS","EMISSIVEASILLUMINATION","LINKEMISSIVEWITHDIFFUSE","REFLECTIONFRESNELFROMSPECULAR","LIGHTMAP","LIGHTMAPDIRECTUV","OBJECTSPACE_NORMALMAP","USELIGHTMAPASSHADOWMAP","REFLECTIONMAP_3D","REFLECTIONMAP_SPHERICAL","REFLECTIONMAP_PLANAR","REFLECTIONMAP_CUBIC","USE_LOCAL_REFLECTIONMAP_CUBIC","USE_LOCAL_REFRACTIONMAP_CUBIC","REFLECTIONMAP_PROJECTION","REFLECTIONMAP_SKYBOX","REFLECTIONMAP_EXPLICIT","REFLECTIONMAP_EQUIRECTANGULAR","REFLECTIONMAP_EQUIRECTANGULAR_FIXED","REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED","REFLECTIONMAP_OPPOSITEZ","INVERTCUBICMAP","LOGARITHMICDEPTH","REFRACTION","REFRACTIONMAP_3D","REFLECTIONOVERALPHA","TWOSIDEDLIGHTING","SHADOWFLOAT","MORPHTARGETS","MORPHTARGETS_NORMAL","MORPHTARGETS_TANGENT","MORPHTARGETS_UV","MORPHTARGETS_TEXTURE","NONUNIFORMSCALING","PREMULTIPLYALPHA","ALPHATEST_AFTERALLALPHACOMPUTATIONS","ALPHABLEND","PREPASS_IRRADIANCE","PREPASS_IRRADIANCE_INDEX","PREPASS_ALBEDO_SQRT","PREPASS_ALBEDO_SQRT_INDEX","PREPASS_DEPTH","PREPASS_DEPTH_INDEX","PREPASS_NORMAL","PREPASS_NORMAL_INDEX","PREPASS_POSITION","PREPASS_POSITION_INDEX","PREPASS_VELOCITY","PREPASS_VELOCITY_INDEX","PREPASS_REFLECTIVITY","PREPASS_REFLECTIVITY_INDEX","RGBDLIGHTMAP","RGBDREFLECTION","RGBDREFRACTION","CAMERA_ORTHOGRAPHIC","CAMERA_PERSPECTIVE","IS_REFLECTION_LINEAR","IS_REFRACTION_LINEAR","setReflectionMode","modeToEnable","modes","StandardMaterial","imageProcessingConfiguration","_imageProcessingConfiguration","_attachImageProcessingConfiguration","configuration","_imageProcessingObserver","cameraColorCurvesEnabled","cameraColorGradingEnabled","cameraToneMappingEnabled","cameraExposure","cameraContrast","cameraColorGradingTexture","cameraColorCurves","_diffuseTexture","_ambientTexture","_opacityTexture","_reflectionTexture","_emissiveTexture","_specularTexture","_bumpTexture","_lightmapTexture","_refractionTexture","ambientColor","diffuseColor","specularColor","emissiveColor","specularPower","_useAlphaFromDiffuseTexture","_useEmissiveAsIllumination","_linkEmissiveWithDiffuse","_useSpecularOverAlpha","_useReflectionOverAlpha","_disableLighting","_useObjectSpaceNormalMap","_useParallax","_useParallaxOcclusion","parallaxScaleBias","_roughness","indexOfRefraction","invertRefractionY","alphaCutOff","_useLightmapAsShadowmap","_useReflectionFresnelFromSpecular","_useGlossinessFromSpecularMapAlpha","_maxSimultaneousLights","_invertNormalMapX","_invertNormalMapY","_twoSidedLighting","_renderTargets","_worldViewProjectionMatrix","_globalAmbientColor","_cacheHasRenderTargetTextures","detailMap","_useLogarithmicDepth","fragmentDepthSupported","_shouldUseAlphaFromDiffuseTexture","_opacityFresnelParameters","_hasAlphaChannel","hasAlpha","oit","isReadyOrNotBlocking","getAlphaFromRGB","invertZ","isRGBD","boundingBoxSize","reflectionTexture","gammaSpace","refractionTexture","_diffuseFresnelParameters","_emissiveFresnelParameters","_refractionFresnelParameters","_reflectionFresnelParameters","getRenderingMesh","forceWasNotReadyPreviously","lightDisposed","csnrOptions","performancePriority","toNormalMatrix","diffuseFresnelParameters","updateColor4","opacityFresnelParameters","toLuminance","reflectionFresnelParameters","refractionFresnelParameters","emissiveFresnelParameters","updateFloat2","updateFloat","roughness","updateVector3","boundingBoxPosition","updateFloat3","depth","updateColor3","depthPeelingRenderer","needToAlwaysBindUniformBuffers","results","UniformBuffer","dynamic","forceNoUniformBuffer","_valueCache","_noUBO","_dynamic","_data","_uniformLocations","_uniformSizes","_uniformArraySizes","_uniformLocationPointer","_needSync","trackUbosInFrame","_buffers","_bufferIndex","_createBufferOnWrite","_currentFrameId","updateMatrix3x3","_updateMatrix3x3ForEffect","updateMatrix2x2","_updateMatrix2x2ForEffect","_updateFloatForEffect","_updateFloat2ForEffect","_updateFloat3ForEffect","_updateFloat4ForEffect","updateFloatArray","_updateFloatArrayForEffect","updateArray","_updateArrayForEffect","updateIntArray","_updateIntArrayForEffect","updateUIntArray","_updateUIntArrayForEffect","_updateMatrixForEffect","updateMatrices","_updateMatricesForEffect","_updateVector3ForEffect","updateVector4","_updateVector4ForEffect","_updateColor3ForEffect","_updateColor4ForEffect","updateDirectColor4","_updateDirectColor4ForEffect","updateInt","_updateIntForEffect","updateInt2","_updateInt2ForEffect","updateInt3","_updateInt3ForEffect","updateInt4","_updateInt4ForEffect","updateUInt","_updateUIntForEffect","updateUInt2","_updateUInt2ForEffect","updateUInt3","_updateUInt3ForEffect","updateUInt4","_updateUInt4ForEffect","_updateMatrix3x3ForUniform","_updateMatrix2x2ForUniform","_updateFloatForUniform","_updateFloat2ForUniform","_updateFloat3ForUniform","_updateFloat4ForUniform","_updateFloatArrayForUniform","_updateArrayForUniform","_updateIntArrayForUniform","_updateUIntArrayForUniform","_updateMatrixForUniform","_updateMatricesForUniform","_updateVector3ForUniform","_updateVector4ForUniform","_updateColor3ForUniform","_updateColor4ForUniform","_updateDirectColor4ForUniform","_updateIntForUniform","_updateInt2ForUniform","_updateInt3ForUniform","_updateInt4ForUniform","_updateUIntForUniform","_updateUInt2ForUniform","_updateUInt3ForUniform","_updateUInt4ForUniform","isDynamic","getData","_bufferData","_fillAlignment","alignment","oldPointer","diff","arraySize","strideSize","addMatrix","addFloat2","temp","addFloat3","addColor3","addColor4","addVector3","vector","addMatrix3x3","addMatrix2x2","createDynamicUniformBuffer","createUniformBuffer","checkUbosContentBeforeUpload","_numBuffers","_buffersEqual","buf1","buf2","_copyBuffer","dst","updateUniformBuffer","_collectUbosUpdatedInFrame","_UpdatedUbosInFrame","_createNewBuffer","_checkNewFrame","updateUniform","location","uniformBufferHardCheckMatrix","updateUniformArray","arraySizes","countToFour","baseStride","_cacheMatrix","_TempBuffer","_currentEffect","suffix","setFloat3","w","setIntArray","_TempBufferInt32View","setUIntArray","_TempBufferUInt32View","setDirectColor4","setInt2","setInt3","setInt4","setUInt2","setUInt3","setUInt4","updateUniformDirectly","_currentEffectName","unbindEffect","setDataBuffer","dataBuffer","pop","_MAX_UNIFORM_SIZE","Int32Array","Uint32Array","UniformBufferEffectCommonAccessor","_isUbo","uboOrEffect"],"sourceRoot":""}