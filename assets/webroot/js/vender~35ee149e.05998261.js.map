{"version":3,"file":"js/vender~35ee149e.05998261.js","mappings":"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","sources":["webpack:///../../../node_modules/@babylonjs/core/Debug/axesViewer.js","webpack:///../../../node_modules/@babylonjs/core/Debug/debugLayer.js","webpack:///../../../node_modules/@babylonjs/core/Debug/skeletonViewer.js","webpack:///../../../node_modules/@babylonjs/core/DeviceInput/InputDevices/deviceEnums.js","webpack:///../../../node_modules/@babylonjs/core/DeviceInput/InputDevices/deviceSource.js","webpack:///../../../node_modules/@babylonjs/core/DeviceInput/eventFactory.js","webpack:///../../../node_modules/@babylonjs/core/DeviceInput/nativeDeviceInputSystem.js","webpack:///../../../node_modules/@babylonjs/core/DeviceInput/webDeviceInputSystem.js","webpack:///../../../node_modules/@babylonjs/core/DeviceInput/internalDeviceSourceManager.js","webpack:///../../../node_modules/@babylonjs/core/DeviceInput/InputDevices/deviceSourceManager.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Extensions/engine.alpha.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Extensions/engine.computeShader.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Extensions/engine.cubeTexture.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Extensions/engine.dynamicBuffer.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Extensions/engine.dynamicTexture.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Extensions/engine.externalTexture.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Extensions/engine.multiRender.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Extensions/engine.multiview.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Extensions/engine.rawTexture.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Extensions/engine.readTexture.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGL/webGLRenderTargetWrapper.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Extensions/engine.renderTarget.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Extensions/engine.renderTargetCube.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Extensions/engine.uniformBuffer.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Extensions/engine.videoTexture.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Extensions/engine.webVR.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Native/nativeDataStream.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Native/nativeHardwareTexture.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Native/nativePipelineContext.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Native/nativeRenderTargetWrapper.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Processors/shaderCodeInliner.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Processors/shaderCodeNode.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Processors/shaderCodeCursor.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Processors/shaderCodeConditionNode.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Processors/shaderCodeTestNode.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Processors/Expressions/shaderDefineExpression.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Processors/Expressions/Operators/shaderDefineIsDefinedOperator.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Processors/Expressions/Operators/shaderDefineOrOperator.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Processors/Expressions/Operators/shaderDefineAndOperator.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Processors/Expressions/Operators/shaderDefineArithmeticOperator.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Processors/shaderProcessor.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGL/webGL2ShaderProcessors.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGL/webGLHardwareTexture.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGL/webGLPipelineContext.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGL/webGLShaderProcessors.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/webgpuBufferManager.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/webgpuBundleList.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/webgpuCacheBindGroups.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/webgpuCacheRenderPipeline.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/webgpuCacheRenderPipelineTree.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/webgpuCacheSampler.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/webgpuClearQuad.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/webgpuConstants.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/webgpuDepthCullingState.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/webgpuDrawContext.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/webgpuHardwareTexture.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/webgpuMaterialContext.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/webgpuOcclusionQuery.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/webgpuPipelineContext.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/webgpuQuerySet.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/webgpuRenderPassWrapper.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/webgpuShaderProcessingContext.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/webgpuShaderProcessor.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/webgpuShaderProcessorsGLSL.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/webgpuShaderProcessorsWGSL.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/webgpuSnapshotRendering.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/webgpuStencilStateComposer.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/webgpuTextureHelper.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/webgpuTimestampQuery.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/webgpuTintWASM.js","webpack:///../../../node_modules/@babylonjs/core/Engines/constants.js","webpack:///../../../node_modules/@babylonjs/core/Engines/engine.js","webpack:///../../../node_modules/@babylonjs/core/Engines/engineStore.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Extensions/engine.debugging.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Extensions/engine.query.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Extensions/engine.transformFeedback.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Extensions/engine.textureSampler.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Extensions/engine.views.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Extensions/engine.textureSelector.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Extensions/engine.storageBuffer.js","webpack:///../../../node_modules/@babylonjs/core/Engines/Native/validatedNativeDataStream.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/Extensions/engine.alpha.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/webgpuComputeContext.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/webgpuComputePipelineContext.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/Extensions/engine.computeShader.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/Extensions/engine.cubeTexture.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/Extensions/engine.debugging.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/Extensions/engine.dynamicBuffer.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/Extensions/engine.dynamicTexture.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/webgpuExternalTexture.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/Extensions/engine.externalTexture.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/Extensions/engine.multiRender.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/Extensions/engine.rawTexture.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/Extensions/engine.query.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/Extensions/engine.readTexture.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/webgpuRenderTargetWrapper.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/Extensions/engine.renderTarget.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/Extensions/engine.renderTargetCube.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/Extensions/engine.textureSampler.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/Extensions/engine.storageBuffer.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/Extensions/engine.uniformBuffer.js","webpack:///../../../node_modules/@babylonjs/core/Engines/WebGPU/Extensions/engine.videoTexture.js"],"sourcesContent":["import { Vector3 } from \"../Maths/math.vector.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\nimport { AxisDragGizmo } from \"../Gizmos/axisDragGizmo.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\n/**\n * The Axes viewer will show 3 axes in a specific point in space\n * @see https://doc.babylonjs.com/toolsAndResources/utilities/World_Axes\n */\nexport class AxesViewer {\n    /** Gets the node hierarchy used to render x-axis */\n    get xAxis() {\n        return this._xAxis;\n    }\n    /** Gets the node hierarchy used to render y-axis */\n    get yAxis() {\n        return this._yAxis;\n    }\n    /** Gets the node hierarchy used to render z-axis */\n    get zAxis() {\n        return this._zAxis;\n    }\n    /**\n     * Creates a new AxesViewer\n     * @param scene defines the hosting scene\n     * @param scaleLines defines a number used to scale line length (1 by default)\n     * @param renderingGroupId defines a number used to set the renderingGroupId of the meshes (2 by default)\n     * @param xAxis defines the node hierarchy used to render the x-axis\n     * @param yAxis defines the node hierarchy used to render the y-axis\n     * @param zAxis defines the node hierarchy used to render the z-axis\n     * @param lineThickness The line thickness to use when creating the arrow. defaults to 1.\n     */\n    constructor(scene, scaleLines = 1, renderingGroupId = 2, xAxis, yAxis, zAxis, lineThickness = 1) {\n        this._scaleLinesFactor = 4;\n        this._instanced = false;\n        /**\n         * Gets the hosting scene\n         */\n        this.scene = null;\n        /**\n         * Gets or sets a number used to scale line length\n         */\n        this.scaleLines = 1;\n        scene = scene || EngineStore.LastCreatedScene;\n        if (!scene) {\n            return;\n        }\n        this.scaleLines = scaleLines;\n        if (!xAxis) {\n            const redColoredMaterial = new StandardMaterial(\"\", scene);\n            redColoredMaterial.disableLighting = true;\n            redColoredMaterial.emissiveColor = Color3.Red().scale(0.5);\n            xAxis = AxisDragGizmo._CreateArrow(scene, redColoredMaterial, lineThickness);\n        }\n        if (!yAxis) {\n            const greenColoredMaterial = new StandardMaterial(\"\", scene);\n            greenColoredMaterial.disableLighting = true;\n            greenColoredMaterial.emissiveColor = Color3.Green().scale(0.5);\n            yAxis = AxisDragGizmo._CreateArrow(scene, greenColoredMaterial, lineThickness);\n        }\n        if (!zAxis) {\n            const blueColoredMaterial = new StandardMaterial(\"\", scene);\n            blueColoredMaterial.disableLighting = true;\n            blueColoredMaterial.emissiveColor = Color3.Blue().scale(0.5);\n            zAxis = AxisDragGizmo._CreateArrow(scene, blueColoredMaterial, lineThickness);\n        }\n        this._xAxis = xAxis;\n        this._xAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n        this._yAxis = yAxis;\n        this._yAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n        this._zAxis = zAxis;\n        this._zAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n        if (renderingGroupId != null) {\n            AxesViewer._SetRenderingGroupId(this._xAxis, renderingGroupId);\n            AxesViewer._SetRenderingGroupId(this._yAxis, renderingGroupId);\n            AxesViewer._SetRenderingGroupId(this._zAxis, renderingGroupId);\n        }\n        this.scene = scene;\n        this.update(new Vector3(), Vector3.Right(), Vector3.Up(), Vector3.Forward());\n    }\n    /**\n     * Force the viewer to update\n     * @param position defines the position of the viewer\n     * @param xaxis defines the x axis of the viewer\n     * @param yaxis defines the y axis of the viewer\n     * @param zaxis defines the z axis of the viewer\n     */\n    update(position, xaxis, yaxis, zaxis) {\n        this._xAxis.position.copyFrom(position);\n        this._xAxis.setDirection(xaxis);\n        this._xAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n        this._yAxis.position.copyFrom(position);\n        this._yAxis.setDirection(yaxis);\n        this._yAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n        this._zAxis.position.copyFrom(position);\n        this._zAxis.setDirection(zaxis);\n        this._zAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n    }\n    /**\n     * Creates an instance of this axes viewer.\n     * @returns a new axes viewer with instanced meshes\n     */\n    createInstance() {\n        const xAxis = AxisDragGizmo._CreateArrowInstance(this.scene, this._xAxis);\n        const yAxis = AxisDragGizmo._CreateArrowInstance(this.scene, this._yAxis);\n        const zAxis = AxisDragGizmo._CreateArrowInstance(this.scene, this._zAxis);\n        const axesViewer = new AxesViewer(this.scene, this.scaleLines, null, xAxis, yAxis, zAxis);\n        axesViewer._instanced = true;\n        return axesViewer;\n    }\n    /** Releases resources */\n    dispose() {\n        if (this._xAxis) {\n            this._xAxis.dispose(false, !this._instanced);\n        }\n        if (this._yAxis) {\n            this._yAxis.dispose(false, !this._instanced);\n        }\n        if (this._zAxis) {\n            this._zAxis.dispose(false, !this._instanced);\n        }\n        this.scene = null;\n    }\n    static _SetRenderingGroupId(node, id) {\n        node.getChildMeshes().forEach((mesh) => {\n            mesh.renderingGroupId = id;\n        });\n    }\n}\n//# sourceMappingURL=axesViewer.js.map","import { Tools } from \"../Misc/tools.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Scene } from \"../scene.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nObject.defineProperty(Scene.prototype, \"debugLayer\", {\n    get: function () {\n        if (!this._debugLayer) {\n            this._debugLayer = new DebugLayer(this);\n        }\n        return this._debugLayer;\n    },\n    enumerable: true,\n    configurable: true,\n});\n/**\n * Enum of inspector action tab\n */\nexport var DebugLayerTab;\n(function (DebugLayerTab) {\n    /**\n     * Properties tag (default)\n     */\n    DebugLayerTab[DebugLayerTab[\"Properties\"] = 0] = \"Properties\";\n    /**\n     * Debug tab\n     */\n    DebugLayerTab[DebugLayerTab[\"Debug\"] = 1] = \"Debug\";\n    /**\n     * Statistics tab\n     */\n    DebugLayerTab[DebugLayerTab[\"Statistics\"] = 2] = \"Statistics\";\n    /**\n     * Tools tab\n     */\n    DebugLayerTab[DebugLayerTab[\"Tools\"] = 3] = \"Tools\";\n    /**\n     * Settings tab\n     */\n    DebugLayerTab[DebugLayerTab[\"Settings\"] = 4] = \"Settings\";\n})(DebugLayerTab || (DebugLayerTab = {}));\n/**\n * The debug layer (aka Inspector) is the go to tool in order to better understand\n * what is happening in your scene\n * @see https://doc.babylonjs.com/toolsAndResources/inspector\n */\nexport class DebugLayer {\n    /**\n     * Observable triggered when a property is changed through the inspector.\n     */\n    get onPropertyChangedObservable() {\n        if (this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector) {\n            return this.BJSINSPECTOR.Inspector.OnPropertyChangedObservable;\n        }\n        if (!this._onPropertyChangedObservable) {\n            this._onPropertyChangedObservable = new Observable();\n        }\n        return this._onPropertyChangedObservable;\n    }\n    /**\n     * Observable triggered when the selection is changed through the inspector.\n     */\n    get onSelectionChangedObservable() {\n        if (this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector) {\n            return this.BJSINSPECTOR.Inspector.OnSelectionChangeObservable;\n        }\n        if (!this._onSelectionChangedObservable) {\n            this._onSelectionChangedObservable = new Observable();\n        }\n        return this._onSelectionChangedObservable;\n    }\n    /**\n     * Instantiates a new debug layer.\n     * The debug layer (aka Inspector) is the go to tool in order to better understand\n     * what is happening in your scene\n     * @see https://doc.babylonjs.com/toolsAndResources/inspector\n     * @param scene Defines the scene to inspect\n     */\n    constructor(scene) {\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        this.BJSINSPECTOR = this._getGlobalInspector();\n        this._scene = scene || EngineStore.LastCreatedScene;\n        if (!this._scene) {\n            return;\n        }\n        this._scene.onDisposeObservable.add(() => {\n            // Debug layer\n            if (this._scene._debugLayer) {\n                this._scene._debugLayer.hide();\n            }\n        });\n    }\n    /**\n     * Creates the inspector window.\n     * @param config\n     */\n    _createInspector(config) {\n        if (this.isVisible()) {\n            return;\n        }\n        if (this._onPropertyChangedObservable) {\n            for (const observer of this._onPropertyChangedObservable.observers) {\n                this.BJSINSPECTOR.Inspector.OnPropertyChangedObservable.add(observer);\n            }\n            this._onPropertyChangedObservable.clear();\n            this._onPropertyChangedObservable = undefined;\n        }\n        if (this._onSelectionChangedObservable) {\n            for (const observer of this._onSelectionChangedObservable.observers) {\n                this.BJSINSPECTOR.Inspector.OnSelectionChangedObservable.add(observer);\n            }\n            this._onSelectionChangedObservable.clear();\n            this._onSelectionChangedObservable = undefined;\n        }\n        const userOptions = {\n            overlay: false,\n            showExplorer: true,\n            showInspector: true,\n            embedMode: false,\n            handleResize: true,\n            enablePopup: true,\n            ...config,\n        };\n        this.BJSINSPECTOR = this.BJSINSPECTOR || this._getGlobalInspector();\n        this.BJSINSPECTOR.Inspector.Show(this._scene, userOptions);\n    }\n    /**\n     * Select a specific entity in the scene explorer and highlight a specific block in that entity property grid\n     * @param entity defines the entity to select\n     * @param lineContainerTitles defines the specific blocks to highlight (could be a string or an array of strings)\n     */\n    select(entity, lineContainerTitles) {\n        if (this.BJSINSPECTOR) {\n            if (lineContainerTitles) {\n                if (Object.prototype.toString.call(lineContainerTitles) == \"[object String]\") {\n                    this.BJSINSPECTOR.Inspector.MarkLineContainerTitleForHighlighting(lineContainerTitles);\n                }\n                else {\n                    this.BJSINSPECTOR.Inspector.MarkMultipleLineContainerTitlesForHighlighting(lineContainerTitles);\n                }\n            }\n            this.BJSINSPECTOR.Inspector.OnSelectionChangeObservable.notifyObservers(entity);\n        }\n    }\n    /** Get the inspector from bundle or global */\n    _getGlobalInspector() {\n        // UMD Global name detection from Webpack Bundle UMD Name.\n        if (typeof INSPECTOR !== \"undefined\") {\n            return INSPECTOR;\n        }\n        // In case of module let s check the global emitted from the Inspector entry point.\n        if (typeof BABYLON !== \"undefined\" && typeof BABYLON.Inspector !== \"undefined\") {\n            return BABYLON;\n        }\n        return undefined;\n    }\n    /**\n     * Get if the inspector is visible or not.\n     * @returns true if visible otherwise, false\n     */\n    isVisible() {\n        return this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector.IsVisible;\n    }\n    /**\n     * Hide the inspector and close its window.\n     */\n    hide() {\n        if (this.BJSINSPECTOR) {\n            this.BJSINSPECTOR.Inspector.Hide();\n        }\n    }\n    /**\n     * Update the scene in the inspector\n     */\n    setAsActiveScene() {\n        if (this.BJSINSPECTOR) {\n            this.BJSINSPECTOR.Inspector._SetNewScene(this._scene);\n        }\n    }\n    /**\n     * Launch the debugLayer.\n     * @param config Define the configuration of the inspector\n     * @returns a promise fulfilled when the debug layer is visible\n     */\n    show(config) {\n        return new Promise((resolve) => {\n            if (typeof this.BJSINSPECTOR == \"undefined\") {\n                const inspectorUrl = config && config.inspectorURL ? config.inspectorURL : DebugLayer.InspectorURL;\n                // Load inspector and add it to the DOM\n                Tools.LoadScript(inspectorUrl, () => {\n                    this._createInspector(config);\n                    resolve(this);\n                });\n            }\n            else {\n                // Otherwise creates the inspector\n                this._createInspector(config);\n                resolve(this);\n            }\n        });\n    }\n}\n/**\n * Define the url to get the inspector script from.\n * By default it uses the babylonjs CDN.\n * @ignoreNaming\n */\nDebugLayer.InspectorURL = `https://unpkg.com/babylonjs-inspector@${Engine.Version}/babylon.inspector.bundle.js`;\n//# sourceMappingURL=debugLayer.js.map","import { Vector3, Matrix, TmpVectors } from \"../Maths/math.vector.js\";\nimport { Color3, Color4 } from \"../Maths/math.color.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { CreateLineSystem } from \"../Meshes/Builders/linesBuilder.js\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer.js\";\nimport { Material } from \"../Materials/material.js\";\nimport { ShaderMaterial } from \"../Materials/shaderMaterial.js\";\nimport { DynamicTexture } from \"../Materials/Textures/dynamicTexture.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { Effect } from \"../Materials/effect.js\";\nimport { CreateSphere } from \"../Meshes/Builders/sphereBuilder.js\";\nimport { ExtrudeShapeCustom } from \"../Meshes/Builders/shapeBuilder.js\";\n/**\n * Class used to render a debug view of a given skeleton\n * @see http://www.babylonjs-playground.com/#1BZJVJ#8\n */\nexport class SkeletonViewer {\n    /** public static method to create a BoneWeight Shader\n     * @param options The constructor options\n     * @param scene The scene that the shader is scoped to\n     * @returns The created ShaderMaterial\n     * @see http://www.babylonjs-playground.com/#1BZJVJ#395\n     */\n    static CreateBoneWeightShader(options, scene) {\n        var _a, _c, _d, _e, _f, _g;\n        const skeleton = options.skeleton;\n        const colorBase = (_a = options.colorBase) !== null && _a !== void 0 ? _a : Color3.Black();\n        const colorZero = (_c = options.colorZero) !== null && _c !== void 0 ? _c : Color3.Blue();\n        const colorQuarter = (_d = options.colorQuarter) !== null && _d !== void 0 ? _d : Color3.Green();\n        const colorHalf = (_e = options.colorHalf) !== null && _e !== void 0 ? _e : Color3.Yellow();\n        const colorFull = (_f = options.colorFull) !== null && _f !== void 0 ? _f : Color3.Red();\n        const targetBoneIndex = (_g = options.targetBoneIndex) !== null && _g !== void 0 ? _g : 0;\n        Effect.ShadersStore[\"boneWeights:\" + skeleton.name + \"VertexShader\"] = `precision highp float;\r\n\r\n        attribute vec3 position;\r\n        attribute vec2 uv;\r\n\r\n        uniform mat4 view;\r\n        uniform mat4 projection;\r\n        uniform mat4 worldViewProjection;\r\n\r\n        #include<bonesDeclaration>\r\n        #if NUM_BONE_INFLUENCERS == 0\r\n            attribute vec4 matricesIndices;\r\n            attribute vec4 matricesWeights;\r\n        #endif\r\n        #include<bakedVertexAnimationDeclaration>\r\n\r\n        #include<instancesDeclaration>\r\n\r\n        varying vec3 vColor;\r\n\r\n        uniform vec3 colorBase;\r\n        uniform vec3 colorZero;\r\n        uniform vec3 colorQuarter;\r\n        uniform vec3 colorHalf;\r\n        uniform vec3 colorFull;\r\n\r\n        uniform float targetBoneIndex;\r\n\r\n        void main() {\r\n            vec3 positionUpdated = position;\r\n\r\n            #include<instancesVertex>\r\n            #include<bonesVertex>\r\n            #include<bakedVertexAnimation>\r\n\r\n            vec4 worldPos = finalWorld * vec4(positionUpdated, 1.0);\r\n\r\n            vec3 color = colorBase;\r\n            float totalWeight = 0.;\r\n            if(matricesIndices[0] == targetBoneIndex && matricesWeights[0] > 0.){\r\n                totalWeight += matricesWeights[0];\r\n            }\r\n            if(matricesIndices[1] == targetBoneIndex && matricesWeights[1] > 0.){\r\n                totalWeight += matricesWeights[1];\r\n            }\r\n            if(matricesIndices[2] == targetBoneIndex && matricesWeights[2] > 0.){\r\n                totalWeight += matricesWeights[2];\r\n            }\r\n            if(matricesIndices[3] == targetBoneIndex && matricesWeights[3] > 0.){\r\n                totalWeight += matricesWeights[3];\r\n            }\r\n\r\n            color = mix(color, colorZero, smoothstep(0., 0.25, totalWeight));\r\n            color = mix(color, colorQuarter, smoothstep(0.25, 0.5, totalWeight));\r\n            color = mix(color, colorHalf, smoothstep(0.5, 0.75, totalWeight));\r\n            color = mix(color, colorFull, smoothstep(0.75, 1.0, totalWeight));\r\n            vColor = color;\r\n\r\n        gl_Position = projection * view * worldPos;\r\n        }`;\n        Effect.ShadersStore[\"boneWeights:\" + skeleton.name + \"FragmentShader\"] = `\r\n            precision highp float;\r\n            varying vec3 vPosition;\r\n\r\n            varying vec3 vColor;\r\n\r\n            void main() {\r\n                vec4 color = vec4(vColor, 1.0);\r\n                gl_FragColor = color;\r\n            }\r\n        `;\n        const shader = new ShaderMaterial(\"boneWeight:\" + skeleton.name, scene, {\n            vertex: \"boneWeights:\" + skeleton.name,\n            fragment: \"boneWeights:\" + skeleton.name,\n        }, {\n            attributes: [\"position\", \"normal\", \"matricesIndices\", \"matricesWeights\"],\n            uniforms: [\n                \"world\",\n                \"worldView\",\n                \"worldViewProjection\",\n                \"view\",\n                \"projection\",\n                \"viewProjection\",\n                \"colorBase\",\n                \"colorZero\",\n                \"colorQuarter\",\n                \"colorHalf\",\n                \"colorFull\",\n                \"targetBoneIndex\",\n            ],\n        });\n        shader.setColor3(\"colorBase\", colorBase);\n        shader.setColor3(\"colorZero\", colorZero);\n        shader.setColor3(\"colorQuarter\", colorQuarter);\n        shader.setColor3(\"colorHalf\", colorHalf);\n        shader.setColor3(\"colorFull\", colorFull);\n        shader.setFloat(\"targetBoneIndex\", targetBoneIndex);\n        shader.getClassName = () => {\n            return \"BoneWeightShader\";\n        };\n        shader.transparencyMode = Material.MATERIAL_OPAQUE;\n        return shader;\n    }\n    /** public static method to create a BoneWeight Shader\n     * @param options The constructor options\n     * @param scene The scene that the shader is scoped to\n     * @returns The created ShaderMaterial\n     */\n    static CreateSkeletonMapShader(options, scene) {\n        var _a;\n        const skeleton = options.skeleton;\n        const colorMap = (_a = options.colorMap) !== null && _a !== void 0 ? _a : [\n            {\n                color: new Color3(1, 0.38, 0.18),\n                location: 0,\n            },\n            {\n                color: new Color3(0.59, 0.18, 1.0),\n                location: 0.2,\n            },\n            {\n                color: new Color3(0.59, 1, 0.18),\n                location: 0.4,\n            },\n            {\n                color: new Color3(1, 0.87, 0.17),\n                location: 0.6,\n            },\n            {\n                color: new Color3(1, 0.17, 0.42),\n                location: 0.8,\n            },\n            {\n                color: new Color3(0.17, 0.68, 1.0),\n                location: 1.0,\n            },\n        ];\n        const bufferWidth = skeleton.bones.length + 1;\n        const colorMapBuffer = SkeletonViewer._CreateBoneMapColorBuffer(bufferWidth, colorMap, scene);\n        const shader = new ShaderMaterial(\"boneWeights:\" + skeleton.name, scene, {\n            vertexSource: `precision highp float;\r\n\r\n            attribute vec3 position;\r\n            attribute vec2 uv;\r\n\r\n            uniform mat4 view;\r\n            uniform mat4 projection;\r\n            uniform mat4 worldViewProjection;\r\n            uniform float colorMap[` +\n                skeleton.bones.length * 4 +\n                `];\r\n\r\n            #include<bonesDeclaration>\r\n            #if NUM_BONE_INFLUENCERS == 0\r\n                attribute vec4 matricesIndices;\r\n                attribute vec4 matricesWeights;\r\n            #endif\r\n            #include<bakedVertexAnimationDeclaration>\r\n            #include<instancesDeclaration>\r\n\r\n            varying vec3 vColor;\r\n\r\n            void main() {\r\n                vec3 positionUpdated = position;\r\n\r\n                #include<instancesVertex>\r\n                #include<bonesVertex>\r\n                #include<bakedVertexAnimation>\r\n\r\n                vec3 color = vec3(0.);\r\n                bool first = true;\r\n\r\n                for (int i = 0; i < 4; i++) {\r\n                    int boneIdx = int(matricesIndices[i]);\r\n                    float boneWgt = matricesWeights[i];\r\n\r\n                    vec3 c = vec3(colorMap[boneIdx * 4 + 0], colorMap[boneIdx * 4 + 1], colorMap[boneIdx * 4 + 2]);\r\n\r\n                    if (boneWgt > 0.) {\r\n                        if (first) {\r\n                            first = false;\r\n                            color = c;\r\n                        } else {\r\n                            color = mix(color, c, boneWgt);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                vColor = color;\r\n\r\n                vec4 worldPos = finalWorld * vec4(positionUpdated, 1.0);\r\n\r\n                gl_Position = projection * view * worldPos;\r\n            }`,\n            fragmentSource: `\r\n            precision highp float;\r\n            varying vec3 vColor;\r\n\r\n            void main() {\r\n                vec4 color = vec4( vColor, 1.0 );\r\n                gl_FragColor = color;\r\n            }\r\n            `,\n        }, {\n            attributes: [\"position\", \"normal\", \"matricesIndices\", \"matricesWeights\"],\n            uniforms: [\"world\", \"worldView\", \"worldViewProjection\", \"view\", \"projection\", \"viewProjection\", \"colorMap\"],\n        });\n        shader.setFloats(\"colorMap\", colorMapBuffer);\n        shader.getClassName = () => {\n            return \"SkeletonMapShader\";\n        };\n        shader.transparencyMode = Material.MATERIAL_OPAQUE;\n        return shader;\n    }\n    /** private static method to create a BoneWeight Shader\n     * @param size The size of the buffer to create (usually the bone count)\n     * @param colorMap The gradient data to generate\n     * @param scene The scene that the shader is scoped to\n     * @returns an Array of floats from the color gradient values\n     */\n    static _CreateBoneMapColorBuffer(size, colorMap, scene) {\n        const tempGrad = new DynamicTexture(\"temp\", { width: size, height: 1 }, scene, false);\n        const ctx = tempGrad.getContext();\n        const grad = ctx.createLinearGradient(0, 0, size, 0);\n        colorMap.forEach((stop) => {\n            grad.addColorStop(stop.location, stop.color.toHexString());\n        });\n        ctx.fillStyle = grad;\n        ctx.fillRect(0, 0, size, 1);\n        tempGrad.update();\n        const buffer = [];\n        const data = ctx.getImageData(0, 0, size, 1).data;\n        const rUnit = 1 / 255;\n        for (let i = 0; i < data.length; i++) {\n            buffer.push(data[i] * rUnit);\n        }\n        tempGrad.dispose();\n        return buffer;\n    }\n    /** Gets the Scene. */\n    get scene() {\n        return this._scene;\n    }\n    /** Gets the utilityLayer. */\n    get utilityLayer() {\n        return this._utilityLayer;\n    }\n    /** Checks Ready Status. */\n    get isReady() {\n        return this._ready;\n    }\n    /** Sets Ready Status. */\n    set ready(value) {\n        this._ready = value;\n    }\n    /** Gets the debugMesh */\n    get debugMesh() {\n        return this._debugMesh;\n    }\n    /** Sets the debugMesh */\n    set debugMesh(value) {\n        this._debugMesh = value;\n    }\n    /** Gets the displayMode */\n    get displayMode() {\n        return this.options.displayMode || SkeletonViewer.DISPLAY_LINES;\n    }\n    /** Sets the displayMode */\n    set displayMode(value) {\n        if (value > SkeletonViewer.DISPLAY_SPHERE_AND_SPURS) {\n            value = SkeletonViewer.DISPLAY_LINES;\n        }\n        this.options.displayMode = value;\n    }\n    /**\n     * Creates a new SkeletonViewer\n     * @param skeleton defines the skeleton to render\n     * @param mesh defines the mesh attached to the skeleton\n     * @param scene defines the hosting scene\n     * @param autoUpdateBonesMatrices defines a boolean indicating if bones matrices must be forced to update before rendering (true by default)\n     * @param renderingGroupId defines the rendering group id to use with the viewer\n     * @param options All of the extra constructor options for the SkeletonViewer\n     */\n    constructor(\n    /** defines the skeleton to render */\n    skeleton, \n    /** defines the mesh attached to the skeleton */\n    mesh, \n    /** The Scene scope*/\n    scene, \n    /** defines a boolean indicating if bones matrices must be forced to update before rendering (true by default)  */\n    autoUpdateBonesMatrices = true, \n    /** defines the rendering group id to use with the viewer */\n    renderingGroupId = 3, \n    /** is the options for the viewer */\n    options = {}) {\n        var _a, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;\n        this.skeleton = skeleton;\n        this.mesh = mesh;\n        this.autoUpdateBonesMatrices = autoUpdateBonesMatrices;\n        this.renderingGroupId = renderingGroupId;\n        this.options = options;\n        /** Gets or sets the color used to render the skeleton */\n        this.color = Color3.White();\n        /** Array of the points of the skeleton fo the line view. */\n        this._debugLines = new Array();\n        /** The local axes Meshes. */\n        this._localAxes = null;\n        /** If SkeletonViewer is enabled. */\n        this._isEnabled = true;\n        /** SkeletonViewer render observable. */\n        this._obs = null;\n        this._scene = scene;\n        this._ready = false;\n        //Defaults\n        options.pauseAnimations = (_a = options.pauseAnimations) !== null && _a !== void 0 ? _a : true;\n        options.returnToRest = (_c = options.returnToRest) !== null && _c !== void 0 ? _c : false;\n        options.displayMode = (_d = options.displayMode) !== null && _d !== void 0 ? _d : SkeletonViewer.DISPLAY_LINES;\n        options.displayOptions = (_e = options.displayOptions) !== null && _e !== void 0 ? _e : {};\n        options.displayOptions.midStep = (_f = options.displayOptions.midStep) !== null && _f !== void 0 ? _f : 0.235;\n        options.displayOptions.midStepFactor = (_g = options.displayOptions.midStepFactor) !== null && _g !== void 0 ? _g : 0.155;\n        options.displayOptions.sphereBaseSize = (_h = options.displayOptions.sphereBaseSize) !== null && _h !== void 0 ? _h : 0.15;\n        options.displayOptions.sphereScaleUnit = (_j = options.displayOptions.sphereScaleUnit) !== null && _j !== void 0 ? _j : 2;\n        options.displayOptions.sphereFactor = (_k = options.displayOptions.sphereFactor) !== null && _k !== void 0 ? _k : 0.865;\n        options.displayOptions.spurFollowsChild = (_l = options.displayOptions.spurFollowsChild) !== null && _l !== void 0 ? _l : false;\n        options.displayOptions.showLocalAxes = (_m = options.displayOptions.showLocalAxes) !== null && _m !== void 0 ? _m : false;\n        options.displayOptions.localAxesSize = (_o = options.displayOptions.localAxesSize) !== null && _o !== void 0 ? _o : 0.075;\n        options.computeBonesUsingShaders = (_p = options.computeBonesUsingShaders) !== null && _p !== void 0 ? _p : true;\n        options.useAllBones = (_q = options.useAllBones) !== null && _q !== void 0 ? _q : true;\n        const initialMeshBoneIndices = mesh.getVerticesData(VertexBuffer.MatricesIndicesKind);\n        const initialMeshBoneWeights = mesh.getVerticesData(VertexBuffer.MatricesWeightsKind);\n        this._boneIndices = new Set();\n        if (!options.useAllBones) {\n            if (initialMeshBoneIndices && initialMeshBoneWeights) {\n                for (let i = 0; i < initialMeshBoneIndices.length; ++i) {\n                    const index = initialMeshBoneIndices[i], weight = initialMeshBoneWeights[i];\n                    if (weight !== 0) {\n                        this._boneIndices.add(index);\n                    }\n                }\n            }\n        }\n        /* Create Utility Layer */\n        this._utilityLayer = new UtilityLayerRenderer(this._scene, false);\n        this._utilityLayer.pickUtilitySceneFirst = false;\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = true;\n        let displayMode = this.options.displayMode || 0;\n        if (displayMode > SkeletonViewer.DISPLAY_SPHERE_AND_SPURS) {\n            displayMode = SkeletonViewer.DISPLAY_LINES;\n        }\n        this.displayMode = displayMode;\n        //Prep the Systems\n        this.update();\n        this._bindObs();\n    }\n    /** The Dynamic bindings for the update functions */\n    _bindObs() {\n        switch (this.displayMode) {\n            case SkeletonViewer.DISPLAY_LINES: {\n                this._obs = this.scene.onBeforeRenderObservable.add(() => {\n                    this._displayLinesUpdate();\n                });\n                break;\n            }\n        }\n    }\n    /** Update the viewer to sync with current skeleton state, only used to manually update. */\n    update() {\n        switch (this.displayMode) {\n            case SkeletonViewer.DISPLAY_LINES: {\n                this._displayLinesUpdate();\n                break;\n            }\n            case SkeletonViewer.DISPLAY_SPHERES: {\n                this._buildSpheresAndSpurs(true);\n                break;\n            }\n            case SkeletonViewer.DISPLAY_SPHERE_AND_SPURS: {\n                this._buildSpheresAndSpurs(false);\n                break;\n            }\n        }\n        this._buildLocalAxes();\n    }\n    /** Gets or sets a boolean indicating if the viewer is enabled */\n    set isEnabled(value) {\n        if (this.isEnabled === value) {\n            return;\n        }\n        this._isEnabled = value;\n        if (this.debugMesh) {\n            this.debugMesh.setEnabled(value);\n        }\n        if (value && !this._obs) {\n            this._bindObs();\n        }\n        else if (!value && this._obs) {\n            this.scene.onBeforeRenderObservable.remove(this._obs);\n            this._obs = null;\n        }\n    }\n    get isEnabled() {\n        return this._isEnabled;\n    }\n    _getBonePosition(position, bone, meshMat, x = 0, y = 0, z = 0) {\n        const tmat = TmpVectors.Matrix[0];\n        const parentBone = bone.getParent();\n        tmat.copyFrom(bone.getLocalMatrix());\n        if (x !== 0 || y !== 0 || z !== 0) {\n            const tmat2 = TmpVectors.Matrix[1];\n            Matrix.IdentityToRef(tmat2);\n            tmat2.setTranslationFromFloats(x, y, z);\n            tmat2.multiplyToRef(tmat, tmat);\n        }\n        if (parentBone) {\n            tmat.multiplyToRef(parentBone.getAbsoluteTransform(), tmat);\n        }\n        tmat.multiplyToRef(meshMat, tmat);\n        position.x = tmat.m[12];\n        position.y = tmat.m[13];\n        position.z = tmat.m[14];\n    }\n    _getLinesForBonesWithLength(bones, meshMat) {\n        const len = bones.length;\n        const mesh = this.mesh;\n        const meshPos = mesh.position;\n        let idx = 0;\n        for (let i = 0; i < len; i++) {\n            const bone = bones[i];\n            let points = this._debugLines[idx];\n            if (bone._index === -1 || (!this._boneIndices.has(bone.getIndex()) && !this.options.useAllBones)) {\n                continue;\n            }\n            if (!points) {\n                points = [Vector3.Zero(), Vector3.Zero()];\n                this._debugLines[idx] = points;\n            }\n            this._getBonePosition(points[0], bone, meshMat);\n            this._getBonePosition(points[1], bone, meshMat, 0, bone.length, 0);\n            points[0].subtractInPlace(meshPos);\n            points[1].subtractInPlace(meshPos);\n            idx++;\n        }\n    }\n    _getLinesForBonesNoLength(bones) {\n        const len = bones.length;\n        let boneNum = 0;\n        const mesh = this.mesh;\n        const meshPos = mesh.position;\n        for (let i = len - 1; i >= 0; i--) {\n            const childBone = bones[i];\n            const parentBone = childBone.getParent();\n            if (!parentBone || (!this._boneIndices.has(childBone.getIndex()) && !this.options.useAllBones)) {\n                continue;\n            }\n            let points = this._debugLines[boneNum];\n            if (!points) {\n                points = [Vector3.Zero(), Vector3.Zero()];\n                this._debugLines[boneNum] = points;\n            }\n            childBone.getAbsolutePositionToRef(mesh, points[0]);\n            parentBone.getAbsolutePositionToRef(mesh, points[1]);\n            points[0].subtractInPlace(meshPos);\n            points[1].subtractInPlace(meshPos);\n            boneNum++;\n        }\n    }\n    /**\n     * function to revert the mesh and scene back to the initial state.\n     * @param animationState\n     */\n    _revert(animationState) {\n        if (this.options.pauseAnimations) {\n            this.scene.animationsEnabled = animationState;\n            this.utilityLayer.utilityLayerScene.animationsEnabled = animationState;\n        }\n    }\n    /**\n     * function to get the absolute bind pose of a bone by accumulating transformations up the bone hierarchy.\n     * @param bone\n     * @param matrix\n     */\n    _getAbsoluteBindPoseToRef(bone, matrix) {\n        if (bone === null || bone._index === -1) {\n            matrix.copyFrom(Matrix.Identity());\n            return;\n        }\n        this._getAbsoluteBindPoseToRef(bone.getParent(), matrix);\n        bone.getBaseMatrix().multiplyToRef(matrix, matrix);\n        return;\n    }\n    /**\n     * function to build and bind sphere joint points and spur bone representations.\n     * @param spheresOnly\n     */\n    _buildSpheresAndSpurs(spheresOnly = true) {\n        var _a, _c;\n        if (this._debugMesh) {\n            this._debugMesh.dispose();\n            this._debugMesh = null;\n            this.ready = false;\n        }\n        this._ready = false;\n        const utilityLayerScene = (_a = this.utilityLayer) === null || _a === void 0 ? void 0 : _a.utilityLayerScene;\n        const bones = this.skeleton.bones;\n        const spheres = [];\n        const spurs = [];\n        const animationState = this.scene.animationsEnabled;\n        try {\n            if (this.options.pauseAnimations) {\n                this.scene.animationsEnabled = false;\n                utilityLayerScene.animationsEnabled = false;\n            }\n            if (this.options.returnToRest) {\n                this.skeleton.returnToRest();\n            }\n            if (this.autoUpdateBonesMatrices) {\n                this.skeleton.computeAbsoluteTransforms();\n            }\n            let longestBoneLength = Number.NEGATIVE_INFINITY;\n            const displayOptions = this.options.displayOptions || {};\n            for (let i = 0; i < bones.length; i++) {\n                const bone = bones[i];\n                if (bone._index === -1 || (!this._boneIndices.has(bone.getIndex()) && !this.options.useAllBones)) {\n                    continue;\n                }\n                const boneAbsoluteBindPoseTransform = new Matrix();\n                this._getAbsoluteBindPoseToRef(bone, boneAbsoluteBindPoseTransform);\n                const anchorPoint = new Vector3();\n                boneAbsoluteBindPoseTransform.decompose(undefined, undefined, anchorPoint);\n                bone.children.forEach((bc) => {\n                    const childAbsoluteBindPoseTransform = new Matrix();\n                    bc.getBaseMatrix().multiplyToRef(boneAbsoluteBindPoseTransform, childAbsoluteBindPoseTransform);\n                    const childPoint = new Vector3();\n                    childAbsoluteBindPoseTransform.decompose(undefined, undefined, childPoint);\n                    const distanceFromParent = Vector3.Distance(anchorPoint, childPoint);\n                    if (distanceFromParent > longestBoneLength) {\n                        longestBoneLength = distanceFromParent;\n                    }\n                    if (spheresOnly) {\n                        return;\n                    }\n                    const dir = childPoint.clone().subtract(anchorPoint.clone());\n                    const h = dir.length();\n                    const up = dir.normalize().scale(h);\n                    const midStep = displayOptions.midStep || 0.165;\n                    const midStepFactor = displayOptions.midStepFactor || 0.215;\n                    const up0 = up.scale(midStep);\n                    const spur = ExtrudeShapeCustom(\"skeletonViewer\", {\n                        shape: [new Vector3(1, -1, 0), new Vector3(1, 1, 0), new Vector3(-1, 1, 0), new Vector3(-1, -1, 0), new Vector3(1, -1, 0)],\n                        path: [Vector3.Zero(), up0, up],\n                        scaleFunction: (i) => {\n                            switch (i) {\n                                case 0:\n                                case 2:\n                                    return 0;\n                                case 1:\n                                    return h * midStepFactor;\n                            }\n                            return 0;\n                        },\n                        sideOrientation: Mesh.DEFAULTSIDE,\n                        updatable: false,\n                    }, utilityLayerScene);\n                    const numVertices = spur.getTotalVertices();\n                    const mwk = [], mik = [];\n                    for (let i = 0; i < numVertices; i++) {\n                        mwk.push(1, 0, 0, 0);\n                        // Select verts at end of spur (ie vert 10 to 14) and bind to child\n                        // bone if spurFollowsChild is enabled.\n                        if (displayOptions.spurFollowsChild && i > 9) {\n                            mik.push(bc.getIndex(), 0, 0, 0);\n                        }\n                        else {\n                            mik.push(bone.getIndex(), 0, 0, 0);\n                        }\n                    }\n                    spur.position = anchorPoint.clone();\n                    spur.setVerticesData(VertexBuffer.MatricesWeightsKind, mwk, false);\n                    spur.setVerticesData(VertexBuffer.MatricesIndicesKind, mik, false);\n                    spur.convertToFlatShadedMesh();\n                    spurs.push(spur);\n                });\n                const sphereBaseSize = displayOptions.sphereBaseSize || 0.2;\n                const sphere = CreateSphere(\"skeletonViewer\", {\n                    segments: 6,\n                    diameter: sphereBaseSize,\n                    updatable: true,\n                }, utilityLayerScene);\n                const numVertices = sphere.getTotalVertices();\n                const mwk = [], mik = [];\n                for (let i = 0; i < numVertices; i++) {\n                    mwk.push(1, 0, 0, 0);\n                    mik.push(bone.getIndex(), 0, 0, 0);\n                }\n                sphere.setVerticesData(VertexBuffer.MatricesWeightsKind, mwk, false);\n                sphere.setVerticesData(VertexBuffer.MatricesIndicesKind, mik, false);\n                sphere.position = anchorPoint.clone();\n                spheres.push([sphere, bone]);\n            }\n            const sphereScaleUnit = displayOptions.sphereScaleUnit || 2;\n            const sphereFactor = displayOptions.sphereFactor || 0.85;\n            const meshes = [];\n            for (let i = 0; i < spheres.length; i++) {\n                const [sphere, bone] = spheres[i];\n                const scale = 1 / (sphereScaleUnit / longestBoneLength);\n                let _stepsOut = 0;\n                let _b = bone;\n                while (_b.getParent() && _b.getParent().getIndex() !== -1) {\n                    _stepsOut++;\n                    _b = _b.getParent();\n                }\n                sphere.scaling.scaleInPlace(scale * Math.pow(sphereFactor, _stepsOut));\n                meshes.push(sphere);\n            }\n            this.debugMesh = Mesh.MergeMeshes(meshes.concat(spurs), true, true);\n            if (this.debugMesh) {\n                this.debugMesh.renderingGroupId = this.renderingGroupId;\n                this.debugMesh.skeleton = this.skeleton;\n                this.debugMesh.parent = this.mesh;\n                this.debugMesh.computeBonesUsingShaders = (_c = this.options.computeBonesUsingShaders) !== null && _c !== void 0 ? _c : true;\n                this.debugMesh.alwaysSelectAsActiveMesh = true;\n            }\n            const light = this.utilityLayer._getSharedGizmoLight();\n            light.intensity = 0.7;\n            this._revert(animationState);\n            this.ready = true;\n        }\n        catch (err) {\n            console.error(err);\n            this._revert(animationState);\n            this.dispose();\n        }\n    }\n    _buildLocalAxes() {\n        var _a;\n        if (this._localAxes) {\n            this._localAxes.dispose();\n        }\n        this._localAxes = null;\n        const displayOptions = this.options.displayOptions || {};\n        if (!displayOptions.showLocalAxes) {\n            return;\n        }\n        const targetScene = this._utilityLayer.utilityLayerScene;\n        const size = displayOptions.localAxesSize || 0.075;\n        const lines = [];\n        const colors = [];\n        const red = new Color4(1, 0, 0, 1);\n        const green = new Color4(0, 1, 0, 1);\n        const blue = new Color4(0, 0, 1, 1);\n        const mwk = [];\n        const mik = [];\n        const vertsPerBone = 6;\n        for (const i in this.skeleton.bones) {\n            const bone = this.skeleton.bones[i];\n            if (bone._index === -1 || (!this._boneIndices.has(bone.getIndex()) && !this.options.useAllBones)) {\n                continue;\n            }\n            const boneAbsoluteBindPoseTransform = new Matrix();\n            const boneOrigin = new Vector3();\n            this._getAbsoluteBindPoseToRef(bone, boneAbsoluteBindPoseTransform);\n            boneAbsoluteBindPoseTransform.decompose(undefined, TmpVectors.Quaternion[0], boneOrigin);\n            const m = new Matrix();\n            TmpVectors.Quaternion[0].toRotationMatrix(m);\n            const boneAxisX = Vector3.TransformCoordinates(new Vector3(0 + size, 0, 0), m);\n            const boneAxisY = Vector3.TransformCoordinates(new Vector3(0, 0 + size, 0), m);\n            const boneAxisZ = Vector3.TransformCoordinates(new Vector3(0, 0, 0 + size), m);\n            const axisX = [boneOrigin, boneOrigin.add(boneAxisX)];\n            const axisY = [boneOrigin, boneOrigin.add(boneAxisY)];\n            const axisZ = [boneOrigin, boneOrigin.add(boneAxisZ)];\n            const linePoints = [axisX, axisY, axisZ];\n            const lineColors = [\n                [red, red],\n                [green, green],\n                [blue, blue],\n            ];\n            lines.push(...linePoints);\n            colors.push(...lineColors);\n            for (let j = 0; j < vertsPerBone; j++) {\n                mwk.push(1, 0, 0, 0);\n                mik.push(bone.getIndex(), 0, 0, 0);\n            }\n        }\n        this._localAxes = CreateLineSystem(\"localAxes\", { lines: lines, colors: colors, updatable: true }, targetScene);\n        this._localAxes.setVerticesData(VertexBuffer.MatricesWeightsKind, mwk, false);\n        this._localAxes.setVerticesData(VertexBuffer.MatricesIndicesKind, mik, false);\n        this._localAxes.skeleton = this.skeleton;\n        this._localAxes.renderingGroupId = this.renderingGroupId + 1;\n        this._localAxes.parent = this.mesh;\n        this._localAxes.computeBonesUsingShaders = (_a = this.options.computeBonesUsingShaders) !== null && _a !== void 0 ? _a : true;\n    }\n    /** Update the viewer to sync with current skeleton state, only used for the line display. */\n    _displayLinesUpdate() {\n        if (!this._utilityLayer) {\n            return;\n        }\n        if (this.autoUpdateBonesMatrices) {\n            this.skeleton.computeAbsoluteTransforms();\n        }\n        if (this.skeleton.bones[0].length === undefined) {\n            this._getLinesForBonesNoLength(this.skeleton.bones);\n        }\n        else {\n            this._getLinesForBonesWithLength(this.skeleton.bones, this.mesh.getWorldMatrix());\n        }\n        const targetScene = this._utilityLayer.utilityLayerScene;\n        if (targetScene) {\n            if (!this._debugMesh) {\n                this._debugMesh = CreateLineSystem(\"\", { lines: this._debugLines, updatable: true, instance: null }, targetScene);\n                this._debugMesh.renderingGroupId = this.renderingGroupId;\n            }\n            else {\n                CreateLineSystem(\"\", { lines: this._debugLines, updatable: true, instance: this._debugMesh }, targetScene);\n            }\n            this._debugMesh.position.copyFrom(this.mesh.position);\n            this._debugMesh.color = this.color;\n        }\n    }\n    /** Changes the displayMode of the skeleton viewer\n     * @param mode The displayMode numerical value\n     */\n    changeDisplayMode(mode) {\n        const wasEnabled = this.isEnabled ? true : false;\n        if (this.displayMode !== mode) {\n            this.isEnabled = false;\n            if (this._debugMesh) {\n                this._debugMesh.dispose();\n                this._debugMesh = null;\n                this.ready = false;\n            }\n            this.displayMode = mode;\n            this.update();\n            this._bindObs();\n            this.isEnabled = wasEnabled;\n        }\n    }\n    /** Sets a display option of the skeleton viewer\n     *\n     * | Option           | Type    | Default | Description |\n     * | ---------------- | ------- | ------- | ----------- |\n     * | midStep          | float   | 0.235   | A percentage between a bone and its child that determines the widest part of a spur. Only used when `displayMode` is set to `DISPLAY_SPHERE_AND_SPURS`. |\n     * | midStepFactor    | float   | 0.15    | Mid step width expressed as a factor of the length. A value of 0.5 makes the spur width half of the spur length. Only used when `displayMode` is set to `DISPLAY_SPHERE_AND_SPURS`. |\n     * | sphereBaseSize   | float   | 2       | Sphere base size. Only used when `displayMode` is set to `DISPLAY_SPHERE_AND_SPURS`. |\n     * | sphereScaleUnit  | float   | 0.865   | Sphere scale factor used to scale spheres in relation to the longest bone. Only used when `displayMode` is set to `DISPLAY_SPHERE_AND_SPURS`. |\n     * | spurFollowsChild | boolean | false   | Whether a spur should attach its far end to the child bone. |\n     * | showLocalAxes    | boolean | false   | Displays local axes on all bones. |\n     * | localAxesSize    | float   | 0.075   | Determines the length of each local axis. |\n     *\n     * @param option String of the option name\n     * @param value The numerical option value\n     */\n    changeDisplayOptions(option, value) {\n        const wasEnabled = this.isEnabled ? true : false;\n        this.options.displayOptions[option] = value;\n        this.isEnabled = false;\n        if (this._debugMesh) {\n            this._debugMesh.dispose();\n            this._debugMesh = null;\n            this.ready = false;\n        }\n        this.update();\n        this._bindObs();\n        this.isEnabled = wasEnabled;\n    }\n    /** Release associated resources */\n    dispose() {\n        this.isEnabled = false;\n        if (this._debugMesh) {\n            this._debugMesh.dispose();\n            this._debugMesh = null;\n        }\n        if (this._utilityLayer) {\n            this._utilityLayer.dispose();\n            this._utilityLayer = null;\n        }\n        this.ready = false;\n    }\n}\n/** public Display constants BABYLON.SkeletonViewer.DISPLAY_LINES */\nSkeletonViewer.DISPLAY_LINES = 0;\n/** public Display constants BABYLON.SkeletonViewer.DISPLAY_SPHERES */\nSkeletonViewer.DISPLAY_SPHERES = 1;\n/** public Display constants BABYLON.SkeletonViewer.DISPLAY_SPHERE_AND_SPURS */\nSkeletonViewer.DISPLAY_SPHERE_AND_SPURS = 2;\n//# sourceMappingURL=skeletonViewer.js.map","/**\n * Enum for Device Types\n */\nexport var DeviceType;\n(function (DeviceType) {\n    /** Generic */\n    DeviceType[DeviceType[\"Generic\"] = 0] = \"Generic\";\n    /** Keyboard */\n    DeviceType[DeviceType[\"Keyboard\"] = 1] = \"Keyboard\";\n    /** Mouse */\n    DeviceType[DeviceType[\"Mouse\"] = 2] = \"Mouse\";\n    /** Touch Pointers */\n    DeviceType[DeviceType[\"Touch\"] = 3] = \"Touch\";\n    /** PS4 Dual Shock */\n    DeviceType[DeviceType[\"DualShock\"] = 4] = \"DualShock\";\n    /** Xbox */\n    DeviceType[DeviceType[\"Xbox\"] = 5] = \"Xbox\";\n    /** Switch Controller */\n    DeviceType[DeviceType[\"Switch\"] = 6] = \"Switch\";\n    /** PS5 DualSense */\n    DeviceType[DeviceType[\"DualSense\"] = 7] = \"DualSense\";\n})(DeviceType || (DeviceType = {}));\n// Device Enums\n/**\n * Enum for All Pointers (Touch/Mouse)\n */\nexport var PointerInput;\n(function (PointerInput) {\n    /** Horizontal Axis (Not used in events/observables; only in polling) */\n    PointerInput[PointerInput[\"Horizontal\"] = 0] = \"Horizontal\";\n    /** Vertical Axis (Not used in events/observables; only in polling) */\n    PointerInput[PointerInput[\"Vertical\"] = 1] = \"Vertical\";\n    /** Left Click or Touch */\n    PointerInput[PointerInput[\"LeftClick\"] = 2] = \"LeftClick\";\n    /** Middle Click */\n    PointerInput[PointerInput[\"MiddleClick\"] = 3] = \"MiddleClick\";\n    /** Right Click */\n    PointerInput[PointerInput[\"RightClick\"] = 4] = \"RightClick\";\n    /** Browser Back */\n    PointerInput[PointerInput[\"BrowserBack\"] = 5] = \"BrowserBack\";\n    /** Browser Forward */\n    PointerInput[PointerInput[\"BrowserForward\"] = 6] = \"BrowserForward\";\n    /** Mouse Wheel X */\n    PointerInput[PointerInput[\"MouseWheelX\"] = 7] = \"MouseWheelX\";\n    /** Mouse Wheel Y */\n    PointerInput[PointerInput[\"MouseWheelY\"] = 8] = \"MouseWheelY\";\n    /** Mouse Wheel Z */\n    PointerInput[PointerInput[\"MouseWheelZ\"] = 9] = \"MouseWheelZ\";\n    /** Used in events/observables to identify if x/y changes occurred */\n    PointerInput[PointerInput[\"Move\"] = 12] = \"Move\";\n})(PointerInput || (PointerInput = {}));\n/** @internal */\nexport var NativePointerInput;\n(function (NativePointerInput) {\n    /** Horizontal Axis */\n    NativePointerInput[NativePointerInput[\"Horizontal\"] = 0] = \"Horizontal\";\n    /** Vertical Axis */\n    NativePointerInput[NativePointerInput[\"Vertical\"] = 1] = \"Vertical\";\n    /** Left Click or Touch */\n    NativePointerInput[NativePointerInput[\"LeftClick\"] = 2] = \"LeftClick\";\n    /** Middle Click */\n    NativePointerInput[NativePointerInput[\"MiddleClick\"] = 3] = \"MiddleClick\";\n    /** Right Click */\n    NativePointerInput[NativePointerInput[\"RightClick\"] = 4] = \"RightClick\";\n    /** Browser Back */\n    NativePointerInput[NativePointerInput[\"BrowserBack\"] = 5] = \"BrowserBack\";\n    /** Browser Forward */\n    NativePointerInput[NativePointerInput[\"BrowserForward\"] = 6] = \"BrowserForward\";\n    /** Mouse Wheel X */\n    NativePointerInput[NativePointerInput[\"MouseWheelX\"] = 7] = \"MouseWheelX\";\n    /** Mouse Wheel Y */\n    NativePointerInput[NativePointerInput[\"MouseWheelY\"] = 8] = \"MouseWheelY\";\n    /** Mouse Wheel Z */\n    NativePointerInput[NativePointerInput[\"MouseWheelZ\"] = 9] = \"MouseWheelZ\";\n    /** Delta X */\n    NativePointerInput[NativePointerInput[\"DeltaHorizontal\"] = 10] = \"DeltaHorizontal\";\n    /** Delta Y */\n    NativePointerInput[NativePointerInput[\"DeltaVertical\"] = 11] = \"DeltaVertical\";\n})(NativePointerInput || (NativePointerInput = {}));\n/**\n * Enum for Dual Shock Gamepad\n */\nexport var DualShockInput;\n(function (DualShockInput) {\n    /** Cross */\n    DualShockInput[DualShockInput[\"Cross\"] = 0] = \"Cross\";\n    /** Circle */\n    DualShockInput[DualShockInput[\"Circle\"] = 1] = \"Circle\";\n    /** Square */\n    DualShockInput[DualShockInput[\"Square\"] = 2] = \"Square\";\n    /** Triangle */\n    DualShockInput[DualShockInput[\"Triangle\"] = 3] = \"Triangle\";\n    /** L1 */\n    DualShockInput[DualShockInput[\"L1\"] = 4] = \"L1\";\n    /** R1 */\n    DualShockInput[DualShockInput[\"R1\"] = 5] = \"R1\";\n    /** L2 */\n    DualShockInput[DualShockInput[\"L2\"] = 6] = \"L2\";\n    /** R2 */\n    DualShockInput[DualShockInput[\"R2\"] = 7] = \"R2\";\n    /** Share */\n    DualShockInput[DualShockInput[\"Share\"] = 8] = \"Share\";\n    /** Options */\n    DualShockInput[DualShockInput[\"Options\"] = 9] = \"Options\";\n    /** L3 */\n    DualShockInput[DualShockInput[\"L3\"] = 10] = \"L3\";\n    /** R3 */\n    DualShockInput[DualShockInput[\"R3\"] = 11] = \"R3\";\n    /** DPadUp */\n    DualShockInput[DualShockInput[\"DPadUp\"] = 12] = \"DPadUp\";\n    /** DPadDown */\n    DualShockInput[DualShockInput[\"DPadDown\"] = 13] = \"DPadDown\";\n    /** DPadLeft */\n    DualShockInput[DualShockInput[\"DPadLeft\"] = 14] = \"DPadLeft\";\n    /** DRight */\n    DualShockInput[DualShockInput[\"DPadRight\"] = 15] = \"DPadRight\";\n    /** Home */\n    DualShockInput[DualShockInput[\"Home\"] = 16] = \"Home\";\n    /** TouchPad */\n    DualShockInput[DualShockInput[\"TouchPad\"] = 17] = \"TouchPad\";\n    /** LStickXAxis */\n    DualShockInput[DualShockInput[\"LStickXAxis\"] = 18] = \"LStickXAxis\";\n    /** LStickYAxis */\n    DualShockInput[DualShockInput[\"LStickYAxis\"] = 19] = \"LStickYAxis\";\n    /** RStickXAxis */\n    DualShockInput[DualShockInput[\"RStickXAxis\"] = 20] = \"RStickXAxis\";\n    /** RStickYAxis */\n    DualShockInput[DualShockInput[\"RStickYAxis\"] = 21] = \"RStickYAxis\";\n})(DualShockInput || (DualShockInput = {}));\n/**\n * Enum for Dual Sense Gamepad\n */\nexport var DualSenseInput;\n(function (DualSenseInput) {\n    /** Cross */\n    DualSenseInput[DualSenseInput[\"Cross\"] = 0] = \"Cross\";\n    /** Circle */\n    DualSenseInput[DualSenseInput[\"Circle\"] = 1] = \"Circle\";\n    /** Square */\n    DualSenseInput[DualSenseInput[\"Square\"] = 2] = \"Square\";\n    /** Triangle */\n    DualSenseInput[DualSenseInput[\"Triangle\"] = 3] = \"Triangle\";\n    /** L1 */\n    DualSenseInput[DualSenseInput[\"L1\"] = 4] = \"L1\";\n    /** R1 */\n    DualSenseInput[DualSenseInput[\"R1\"] = 5] = \"R1\";\n    /** L2 */\n    DualSenseInput[DualSenseInput[\"L2\"] = 6] = \"L2\";\n    /** R2 */\n    DualSenseInput[DualSenseInput[\"R2\"] = 7] = \"R2\";\n    /** Create */\n    DualSenseInput[DualSenseInput[\"Create\"] = 8] = \"Create\";\n    /** Options */\n    DualSenseInput[DualSenseInput[\"Options\"] = 9] = \"Options\";\n    /** L3 */\n    DualSenseInput[DualSenseInput[\"L3\"] = 10] = \"L3\";\n    /** R3 */\n    DualSenseInput[DualSenseInput[\"R3\"] = 11] = \"R3\";\n    /** DPadUp */\n    DualSenseInput[DualSenseInput[\"DPadUp\"] = 12] = \"DPadUp\";\n    /** DPadDown */\n    DualSenseInput[DualSenseInput[\"DPadDown\"] = 13] = \"DPadDown\";\n    /** DPadLeft */\n    DualSenseInput[DualSenseInput[\"DPadLeft\"] = 14] = \"DPadLeft\";\n    /** DRight */\n    DualSenseInput[DualSenseInput[\"DPadRight\"] = 15] = \"DPadRight\";\n    /** Home */\n    DualSenseInput[DualSenseInput[\"Home\"] = 16] = \"Home\";\n    /** TouchPad */\n    DualSenseInput[DualSenseInput[\"TouchPad\"] = 17] = \"TouchPad\";\n    /** LStickXAxis */\n    DualSenseInput[DualSenseInput[\"LStickXAxis\"] = 18] = \"LStickXAxis\";\n    /** LStickYAxis */\n    DualSenseInput[DualSenseInput[\"LStickYAxis\"] = 19] = \"LStickYAxis\";\n    /** RStickXAxis */\n    DualSenseInput[DualSenseInput[\"RStickXAxis\"] = 20] = \"RStickXAxis\";\n    /** RStickYAxis */\n    DualSenseInput[DualSenseInput[\"RStickYAxis\"] = 21] = \"RStickYAxis\";\n})(DualSenseInput || (DualSenseInput = {}));\n/**\n * Enum for Xbox Gamepad\n */\nexport var XboxInput;\n(function (XboxInput) {\n    /** A */\n    XboxInput[XboxInput[\"A\"] = 0] = \"A\";\n    /** B */\n    XboxInput[XboxInput[\"B\"] = 1] = \"B\";\n    /** X */\n    XboxInput[XboxInput[\"X\"] = 2] = \"X\";\n    /** Y */\n    XboxInput[XboxInput[\"Y\"] = 3] = \"Y\";\n    /** LB */\n    XboxInput[XboxInput[\"LB\"] = 4] = \"LB\";\n    /** RB */\n    XboxInput[XboxInput[\"RB\"] = 5] = \"RB\";\n    /** LT */\n    XboxInput[XboxInput[\"LT\"] = 6] = \"LT\";\n    /** RT */\n    XboxInput[XboxInput[\"RT\"] = 7] = \"RT\";\n    /** Back */\n    XboxInput[XboxInput[\"Back\"] = 8] = \"Back\";\n    /** Start */\n    XboxInput[XboxInput[\"Start\"] = 9] = \"Start\";\n    /** LS */\n    XboxInput[XboxInput[\"LS\"] = 10] = \"LS\";\n    /** RS */\n    XboxInput[XboxInput[\"RS\"] = 11] = \"RS\";\n    /** DPadUp */\n    XboxInput[XboxInput[\"DPadUp\"] = 12] = \"DPadUp\";\n    /** DPadDown */\n    XboxInput[XboxInput[\"DPadDown\"] = 13] = \"DPadDown\";\n    /** DPadLeft */\n    XboxInput[XboxInput[\"DPadLeft\"] = 14] = \"DPadLeft\";\n    /** DRight */\n    XboxInput[XboxInput[\"DPadRight\"] = 15] = \"DPadRight\";\n    /** Home */\n    XboxInput[XboxInput[\"Home\"] = 16] = \"Home\";\n    /** LStickXAxis */\n    XboxInput[XboxInput[\"LStickXAxis\"] = 17] = \"LStickXAxis\";\n    /** LStickYAxis */\n    XboxInput[XboxInput[\"LStickYAxis\"] = 18] = \"LStickYAxis\";\n    /** RStickXAxis */\n    XboxInput[XboxInput[\"RStickXAxis\"] = 19] = \"RStickXAxis\";\n    /** RStickYAxis */\n    XboxInput[XboxInput[\"RStickYAxis\"] = 20] = \"RStickYAxis\";\n})(XboxInput || (XboxInput = {}));\n/**\n * Enum for Switch (Pro/JoyCon L+R) Gamepad\n */\nexport var SwitchInput;\n(function (SwitchInput) {\n    /** B */\n    SwitchInput[SwitchInput[\"B\"] = 0] = \"B\";\n    /** A */\n    SwitchInput[SwitchInput[\"A\"] = 1] = \"A\";\n    /** Y */\n    SwitchInput[SwitchInput[\"Y\"] = 2] = \"Y\";\n    /** X */\n    SwitchInput[SwitchInput[\"X\"] = 3] = \"X\";\n    /** L */\n    SwitchInput[SwitchInput[\"L\"] = 4] = \"L\";\n    /** R */\n    SwitchInput[SwitchInput[\"R\"] = 5] = \"R\";\n    /** ZL */\n    SwitchInput[SwitchInput[\"ZL\"] = 6] = \"ZL\";\n    /** ZR */\n    SwitchInput[SwitchInput[\"ZR\"] = 7] = \"ZR\";\n    /** Minus */\n    SwitchInput[SwitchInput[\"Minus\"] = 8] = \"Minus\";\n    /** Plus */\n    SwitchInput[SwitchInput[\"Plus\"] = 9] = \"Plus\";\n    /** LS */\n    SwitchInput[SwitchInput[\"LS\"] = 10] = \"LS\";\n    /** RS */\n    SwitchInput[SwitchInput[\"RS\"] = 11] = \"RS\";\n    /** DPadUp */\n    SwitchInput[SwitchInput[\"DPadUp\"] = 12] = \"DPadUp\";\n    /** DPadDown */\n    SwitchInput[SwitchInput[\"DPadDown\"] = 13] = \"DPadDown\";\n    /** DPadLeft */\n    SwitchInput[SwitchInput[\"DPadLeft\"] = 14] = \"DPadLeft\";\n    /** DRight */\n    SwitchInput[SwitchInput[\"DPadRight\"] = 15] = \"DPadRight\";\n    /** Home */\n    SwitchInput[SwitchInput[\"Home\"] = 16] = \"Home\";\n    /** Capture */\n    SwitchInput[SwitchInput[\"Capture\"] = 17] = \"Capture\";\n    /** LStickXAxis */\n    SwitchInput[SwitchInput[\"LStickXAxis\"] = 18] = \"LStickXAxis\";\n    /** LStickYAxis */\n    SwitchInput[SwitchInput[\"LStickYAxis\"] = 19] = \"LStickYAxis\";\n    /** RStickXAxis */\n    SwitchInput[SwitchInput[\"RStickXAxis\"] = 20] = \"RStickXAxis\";\n    /** RStickYAxis */\n    SwitchInput[SwitchInput[\"RStickYAxis\"] = 21] = \"RStickYAxis\";\n})(SwitchInput || (SwitchInput = {}));\n//# sourceMappingURL=deviceEnums.js.map","import { Observable } from \"../../Misc/observable.js\";\n/**\n * Class that handles all input for a specific device\n */\nexport class DeviceSource {\n    /**\n     * Default Constructor\n     * @param deviceInputSystem - Reference to DeviceInputSystem\n     * @param deviceType - Type of device\n     * @param deviceSlot - \"Slot\" or index that device is referenced in\n     */\n    constructor(deviceInputSystem, \n    /** Type of device */\n    deviceType, \n    /** \"Slot\" or index that device is referenced in */\n    deviceSlot = 0) {\n        this.deviceType = deviceType;\n        this.deviceSlot = deviceSlot;\n        // Public Members\n        /**\n         * Observable to handle device input changes per device\n         */\n        this.onInputChangedObservable = new Observable();\n        this._deviceInputSystem = deviceInputSystem;\n    }\n    /**\n     * Get input for specific input\n     * @param inputIndex - index of specific input on device\n     * @returns Input value from DeviceInputSystem\n     */\n    getInput(inputIndex) {\n        return this._deviceInputSystem.pollInput(this.deviceType, this.deviceSlot, inputIndex);\n    }\n}\n//# sourceMappingURL=deviceSource.js.map","\nimport { EventConstants } from \"../Events/deviceInputEvents.js\";\nimport { DeviceType, NativePointerInput, PointerInput } from \"./InputDevices/deviceEnums.js\";\n/**\n * Class to wrap DeviceInputSystem data into an event object\n */\nexport class DeviceEventFactory {\n    /**\n     * Create device input events based on provided type and slot\n     *\n     * @param deviceType Type of device\n     * @param deviceSlot \"Slot\" or index that device is referenced in\n     * @param inputIndex Id of input to be checked\n     * @param currentState Current value for given input\n     * @param deviceInputSystem Reference to DeviceInputSystem\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\n     * @returns IUIEvent object\n     */\n    static CreateDeviceEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo, pointerId) {\n        switch (deviceType) {\n            case DeviceType.Keyboard:\n                return this._CreateKeyboardEvent(inputIndex, currentState, deviceInputSystem, elementToAttachTo);\n            case DeviceType.Mouse:\n                if (inputIndex === PointerInput.MouseWheelX || inputIndex === PointerInput.MouseWheelY || inputIndex === PointerInput.MouseWheelZ) {\n                    return this._CreateWheelEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\n                }\n            // eslint-disable-next-line no-fallthrough\n            case DeviceType.Touch:\n                return this._CreatePointerEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo, pointerId);\n            default:\n                throw `Unable to generate event for device ${DeviceType[deviceType]}`;\n        }\n    }\n    /**\n     * Creates pointer event\n     *\n     * @param deviceType Type of device\n     * @param deviceSlot \"Slot\" or index that device is referenced in\n     * @param inputIndex Id of input to be checked\n     * @param currentState Current value for given input\n     * @param deviceInputSystem Reference to DeviceInputSystem\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\n     * @returns IUIEvent object (Pointer)\n     */\n    static _CreatePointerEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo, pointerId) {\n        const evt = this._CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\n        if (deviceType === DeviceType.Mouse) {\n            evt.deviceType = DeviceType.Mouse;\n            evt.pointerId = 1;\n            evt.pointerType = \"mouse\";\n        }\n        else {\n            evt.deviceType = DeviceType.Touch;\n            evt.pointerId = pointerId !== null && pointerId !== void 0 ? pointerId : deviceSlot;\n            evt.pointerType = \"touch\";\n        }\n        if (inputIndex === PointerInput.Move) {\n            evt.type = \"pointermove\";\n        }\n        else if (inputIndex >= PointerInput.LeftClick && inputIndex <= PointerInput.RightClick) {\n            evt.type = currentState === 1 ? \"pointerdown\" : \"pointerup\";\n            evt.button = inputIndex - 2;\n        }\n        return evt;\n    }\n    /**\n     * Create Mouse Wheel Event\n     * @param deviceType Type of device\n     * @param deviceSlot \"Slot\" or index that device is referenced in\n     * @param inputIndex Id of input to be checked\n     * @param currentState Current value for given input\n     * @param deviceInputSystem Reference to DeviceInputSystem\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\n     * @returns IUIEvent object (Wheel)\n     */\n    static _CreateWheelEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo) {\n        const evt = this._CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\n        evt.type = \"wheel\";\n        evt.deltaMode = EventConstants.DOM_DELTA_PIXEL;\n        evt.deltaX = 0;\n        evt.deltaY = 0;\n        evt.deltaZ = 0;\n        switch (inputIndex) {\n            case PointerInput.MouseWheelX:\n                evt.deltaX = currentState;\n                break;\n            case PointerInput.MouseWheelY:\n                evt.deltaY = currentState;\n                break;\n            case PointerInput.MouseWheelZ:\n                evt.deltaZ = currentState;\n                break;\n        }\n        return evt;\n    }\n    /**\n     * Create Mouse Event\n     * @param deviceType Type of device\n     * @param deviceSlot \"Slot\" or index that device is referenced in\n     * @param inputIndex Id of input to be checked\n     * @param currentState Current value for given input\n     * @param deviceInputSystem Reference to DeviceInputSystem\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\n     * @returns IUIEvent object (Mouse)\n     */\n    static _CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo) {\n        const evt = this._CreateEvent(elementToAttachTo);\n        const pointerX = deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.Horizontal);\n        const pointerY = deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.Vertical);\n        // Handle offsets/deltas based on existence of HTMLElement\n        if (elementToAttachTo) {\n            evt.movementX = 0;\n            evt.movementY = 0;\n            evt.offsetX = evt.movementX - elementToAttachTo.getBoundingClientRect().x;\n            evt.offsetY = evt.movementY - elementToAttachTo.getBoundingClientRect().y;\n        }\n        else {\n            evt.movementX = deviceInputSystem.pollInput(deviceType, deviceSlot, NativePointerInput.DeltaHorizontal); // DeltaHorizontal\n            evt.movementY = deviceInputSystem.pollInput(deviceType, deviceSlot, NativePointerInput.DeltaVertical); // DeltaVertical\n            evt.offsetX = 0;\n            evt.offsetY = 0;\n        }\n        this._CheckNonCharacterKeys(evt, deviceInputSystem);\n        evt.clientX = pointerX;\n        evt.clientY = pointerY;\n        evt.x = pointerX;\n        evt.y = pointerY;\n        evt.deviceType = deviceType;\n        evt.deviceSlot = deviceSlot;\n        evt.inputIndex = inputIndex;\n        return evt;\n    }\n    /**\n     * Create Keyboard Event\n     * @param inputIndex Id of input to be checked\n     * @param currentState Current value for given input\n     * @param deviceInputSystem Reference to DeviceInputSystem\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\n     * @returns IEvent object (Keyboard)\n     */\n    static _CreateKeyboardEvent(inputIndex, currentState, deviceInputSystem, elementToAttachTo) {\n        const evt = this._CreateEvent(elementToAttachTo);\n        this._CheckNonCharacterKeys(evt, deviceInputSystem);\n        evt.deviceType = DeviceType.Keyboard;\n        evt.deviceSlot = 0;\n        evt.inputIndex = inputIndex;\n        evt.type = currentState === 1 ? \"keydown\" : \"keyup\";\n        evt.key = String.fromCharCode(inputIndex);\n        evt.keyCode = inputIndex;\n        return evt;\n    }\n    /**\n     * Add parameters for non-character keys (Ctrl, Alt, Meta, Shift)\n     * @param evt Event object to add parameters to\n     * @param deviceInputSystem DeviceInputSystem to pull values from\n     */\n    static _CheckNonCharacterKeys(evt, deviceInputSystem) {\n        const isKeyboardActive = deviceInputSystem.isDeviceAvailable(DeviceType.Keyboard);\n        const altKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, 18) === 1;\n        const ctrlKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, 17) === 1;\n        const metaKey = isKeyboardActive &&\n            (deviceInputSystem.pollInput(DeviceType.Keyboard, 0, 91) === 1 ||\n                deviceInputSystem.pollInput(DeviceType.Keyboard, 0, 92) === 1 ||\n                deviceInputSystem.pollInput(DeviceType.Keyboard, 0, 93) === 1);\n        const shiftKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, 16) === 1;\n        evt.altKey = altKey;\n        evt.ctrlKey = ctrlKey;\n        evt.metaKey = metaKey;\n        evt.shiftKey = shiftKey;\n    }\n    /**\n     * Create base event object\n     * @param elementToAttachTo Value to use as event target\n     * @returns\n     */\n    static _CreateEvent(elementToAttachTo) {\n        const evt = {};\n        evt.preventDefault = () => { };\n        evt.target = elementToAttachTo;\n        return evt;\n    }\n}\n//# sourceMappingURL=eventFactory.js.map","import { DeviceEventFactory } from \"./eventFactory.js\";\nimport { DeviceType } from \"./InputDevices/deviceEnums.js\";\n/** @internal */\nexport class NativeDeviceInputSystem {\n    constructor(onDeviceConnected, onDeviceDisconnected, onInputChanged) {\n        this._nativeInput = _native.DeviceInputSystem\n            ? new _native.DeviceInputSystem(onDeviceConnected, onDeviceDisconnected, (deviceType, deviceSlot, inputIndex, currentState) => {\n                const evt = DeviceEventFactory.CreateDeviceEvent(deviceType, deviceSlot, inputIndex, currentState, this);\n                onInputChanged(deviceType, deviceSlot, evt);\n            })\n            : this._createDummyNativeInput();\n    }\n    // Public functions\n    /**\n     * Checks for current device input value, given an id and input index. Throws exception if requested device not initialized.\n     * @param deviceType Enum specifying device type\n     * @param deviceSlot \"Slot\" or index that device is referenced in\n     * @param inputIndex Id of input to be checked\n     * @returns Current value of input\n     */\n    pollInput(deviceType, deviceSlot, inputIndex) {\n        return this._nativeInput.pollInput(deviceType, deviceSlot, inputIndex);\n    }\n    /**\n     * Check for a specific device in the DeviceInputSystem\n     * @param deviceType Type of device to check for\n     * @returns bool with status of device's existence\n     */\n    isDeviceAvailable(deviceType) {\n        //TODO: FIx native side first\n        return deviceType === DeviceType.Mouse || deviceType === DeviceType.Touch;\n    }\n    /**\n     * Dispose of all the observables\n     */\n    dispose() {\n        this._nativeInput.dispose();\n    }\n    /**\n     * For versions of BabylonNative that don't have the NativeInput plugin initialized, create a dummy version\n     * @returns Object with dummy functions\n     */\n    _createDummyNativeInput() {\n        const nativeInput = {\n            pollInput: () => {\n                return 0;\n            },\n            isDeviceAvailable: () => {\n                return false;\n            },\n            dispose: () => { },\n        };\n        return nativeInput;\n    }\n}\n//# sourceMappingURL=nativeDeviceInputSystem.js.map","import { DomManagement } from \"../Misc/domManagement.js\";\nimport { Tools } from \"../Misc/tools.js\";\nimport { DeviceEventFactory } from \"./eventFactory.js\";\nimport { DeviceType, PointerInput } from \"./InputDevices/deviceEnums.js\";\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst MAX_KEYCODES = 255;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst MAX_POINTER_INPUTS = Object.keys(PointerInput).length / 2;\n/** @internal */\nexport class WebDeviceInputSystem {\n    constructor(engine, onDeviceConnected, onDeviceDisconnected, onInputChanged) {\n        // Private Members\n        this._inputs = [];\n        this._keyboardActive = false;\n        this._pointerActive = false;\n        this._usingSafari = Tools.IsSafari();\n        // Found solution for determining if MacOS is being used here:\n        // https://stackoverflow.com/questions/10527983/best-way-to-detect-mac-os-x-or-windows-computers-with-javascript-or-jquery\n        this._usingMacOS = /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform);\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        this._keyboardDownEvent = (evt) => { };\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        this._keyboardUpEvent = (evt) => { };\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        this._keyboardBlurEvent = (evt) => { };\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        this._pointerMoveEvent = (evt) => { };\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        this._pointerDownEvent = (evt) => { };\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        this._pointerUpEvent = (evt) => { };\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        this._pointerCancelEvent = (evt) => { };\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        this._pointerWheelEvent = (evt) => { };\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        this._pointerBlurEvent = (evt) => { };\n        this._eventsAttached = false;\n        this._mouseId = -1;\n        this._isUsingFirefox = DomManagement.IsNavigatorAvailable() && navigator.userAgent && navigator.userAgent.indexOf(\"Firefox\") !== -1;\n        this._maxTouchPoints = 0;\n        this._pointerInputClearObserver = null;\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        this._gamepadConnectedEvent = (evt) => { };\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        this._gamepadDisconnectedEvent = (evt) => { };\n        this._eventPrefix = Tools.GetPointerPrefix(engine);\n        this._engine = engine;\n        this._onDeviceConnected = onDeviceConnected;\n        this._onDeviceDisconnected = onDeviceDisconnected;\n        this._onInputChanged = onInputChanged;\n        this._enableEvents();\n        if (this._usingMacOS) {\n            this._metaKeys = [];\n        }\n        // Set callback to enable event handler switching when inputElement changes\n        if (!this._engine._onEngineViewChanged) {\n            this._engine._onEngineViewChanged = () => {\n                this._enableEvents();\n            };\n        }\n    }\n    // Public functions\n    /**\n     * Checks for current device input value, given an id and input index. Throws exception if requested device not initialized.\n     * @param deviceType Enum specifying device type\n     * @param deviceSlot \"Slot\" or index that device is referenced in\n     * @param inputIndex Id of input to be checked\n     * @returns Current value of input\n     */\n    pollInput(deviceType, deviceSlot, inputIndex) {\n        const device = this._inputs[deviceType][deviceSlot];\n        if (!device) {\n            throw `Unable to find device ${DeviceType[deviceType]}`;\n        }\n        if (deviceType >= DeviceType.DualShock && deviceType <= DeviceType.DualSense) {\n            this._updateDevice(deviceType, deviceSlot, inputIndex);\n        }\n        const currentValue = device[inputIndex];\n        if (currentValue === undefined) {\n            throw `Unable to find input ${inputIndex} for device ${DeviceType[deviceType]} in slot ${deviceSlot}`;\n        }\n        if (inputIndex === PointerInput.Move) {\n            Tools.Warn(`Unable to provide information for PointerInput.Move.  Try using PointerInput.Horizontal or PointerInput.Vertical for move data.`);\n        }\n        return currentValue;\n    }\n    /**\n     * Check for a specific device in the DeviceInputSystem\n     * @param deviceType Type of device to check for\n     * @returns bool with status of device's existence\n     */\n    isDeviceAvailable(deviceType) {\n        return this._inputs[deviceType] !== undefined;\n    }\n    /**\n     * Dispose of all the eventlisteners\n     */\n    dispose() {\n        // Callbacks\n        this._onDeviceConnected = () => { };\n        this._onDeviceDisconnected = () => { };\n        this._onInputChanged = () => { };\n        delete this._engine._onEngineViewChanged;\n        if (this._elementToAttachTo) {\n            this._disableEvents();\n        }\n    }\n    /**\n     * Enable listening for user input events\n     */\n    _enableEvents() {\n        const inputElement = this === null || this === void 0 ? void 0 : this._engine.getInputElement();\n        if (inputElement && (!this._eventsAttached || this._elementToAttachTo !== inputElement)) {\n            // Remove events before adding to avoid double events or simultaneous events on multiple canvases\n            this._disableEvents();\n            // If the inputs array has already been created, zero it out to before setting up events\n            if (this._inputs) {\n                for (const inputs of this._inputs) {\n                    if (inputs) {\n                        for (const deviceSlotKey in inputs) {\n                            const deviceSlot = +deviceSlotKey;\n                            const device = inputs[deviceSlot];\n                            if (device) {\n                                for (let inputIndex = 0; inputIndex < device.length; inputIndex++) {\n                                    device[inputIndex] = 0;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            this._elementToAttachTo = inputElement;\n            // Set tab index for the inputElement to the engine's canvasTabIndex, if and only if the element's tab index is -1\n            this._elementToAttachTo.tabIndex = this._elementToAttachTo.tabIndex !== -1 ? this._elementToAttachTo.tabIndex : this._engine.canvasTabIndex;\n            this._handleKeyActions();\n            this._handlePointerActions();\n            this._handleGamepadActions();\n            this._eventsAttached = true;\n            // Check for devices that are already connected but aren't registered. Currently, only checks for gamepads and mouse\n            this._checkForConnectedDevices();\n        }\n    }\n    /**\n     * Disable listening for user input events\n     */\n    _disableEvents() {\n        if (this._elementToAttachTo) {\n            // Blur Events\n            this._elementToAttachTo.removeEventListener(\"blur\", this._keyboardBlurEvent);\n            this._elementToAttachTo.removeEventListener(\"blur\", this._pointerBlurEvent);\n            // Keyboard Events\n            this._elementToAttachTo.removeEventListener(\"keydown\", this._keyboardDownEvent);\n            this._elementToAttachTo.removeEventListener(\"keyup\", this._keyboardUpEvent);\n            // Pointer Events\n            this._elementToAttachTo.removeEventListener(this._eventPrefix + \"move\", this._pointerMoveEvent);\n            this._elementToAttachTo.removeEventListener(this._eventPrefix + \"down\", this._pointerDownEvent);\n            this._elementToAttachTo.removeEventListener(this._eventPrefix + \"up\", this._pointerUpEvent);\n            this._elementToAttachTo.removeEventListener(this._eventPrefix + \"cancel\", this._pointerCancelEvent);\n            this._elementToAttachTo.removeEventListener(this._wheelEventName, this._pointerWheelEvent);\n            // Gamepad Events\n            window.removeEventListener(\"gamepadconnected\", this._gamepadConnectedEvent);\n            window.removeEventListener(\"gamepaddisconnected\", this._gamepadDisconnectedEvent);\n        }\n        if (this._pointerInputClearObserver) {\n            this._engine.onEndFrameObservable.remove(this._pointerInputClearObserver);\n        }\n        this._eventsAttached = false;\n    }\n    /**\n     * Checks for existing connections to devices and register them, if necessary\n     * Currently handles gamepads and mouse\n     */\n    _checkForConnectedDevices() {\n        if (navigator.getGamepads) {\n            const gamepads = navigator.getGamepads();\n            for (const gamepad of gamepads) {\n                if (gamepad) {\n                    this._addGamePad(gamepad);\n                }\n            }\n        }\n        // If the device in use has mouse capabilities, pre-register mouse\n        if (typeof matchMedia === \"function\" && matchMedia(\"(pointer:fine)\").matches) {\n            // This will provide a dummy value for the cursor position and is expected to be overridden when the first mouse event happens.\n            // There isn't any good way to get the current position outside of a pointer event so that's why this was done.\n            this._addPointerDevice(DeviceType.Mouse, 0, 0, 0);\n        }\n    }\n    // Private functions\n    /**\n     * Add a gamepad to the DeviceInputSystem\n     * @param gamepad A single DOM Gamepad object\n     */\n    _addGamePad(gamepad) {\n        const deviceType = this._getGamepadDeviceType(gamepad.id);\n        const deviceSlot = gamepad.index;\n        this._gamepads = this._gamepads || new Array(gamepad.index + 1);\n        this._registerDevice(deviceType, deviceSlot, gamepad.buttons.length + gamepad.axes.length);\n        this._gamepads[deviceSlot] = deviceType;\n    }\n    /**\n     * Add pointer device to DeviceInputSystem\n     * @param deviceType Type of Pointer to add\n     * @param deviceSlot Pointer ID (0 for mouse, pointerId for Touch)\n     * @param currentX Current X at point of adding\n     * @param currentY Current Y at point of adding\n     */\n    _addPointerDevice(deviceType, deviceSlot, currentX, currentY) {\n        if (!this._pointerActive) {\n            this._pointerActive = true;\n        }\n        this._registerDevice(deviceType, deviceSlot, MAX_POINTER_INPUTS);\n        const pointer = this._inputs[deviceType][deviceSlot]; /* initialize our pointer position immediately after registration */\n        pointer[0] = currentX;\n        pointer[1] = currentY;\n    }\n    /**\n     * Add device and inputs to device array\n     * @param deviceType Enum specifying device type\n     * @param deviceSlot \"Slot\" or index that device is referenced in\n     * @param numberOfInputs Number of input entries to create for given device\n     */\n    _registerDevice(deviceType, deviceSlot, numberOfInputs) {\n        if (deviceSlot === undefined) {\n            throw `Unable to register device ${DeviceType[deviceType]} to undefined slot.`;\n        }\n        if (!this._inputs[deviceType]) {\n            this._inputs[deviceType] = {};\n        }\n        if (!this._inputs[deviceType][deviceSlot]) {\n            const device = new Array(numberOfInputs);\n            device.fill(0);\n            this._inputs[deviceType][deviceSlot] = device;\n            this._onDeviceConnected(deviceType, deviceSlot);\n        }\n    }\n    /**\n     * Given a specific device name, remove that device from the device map\n     * @param deviceType Enum specifying device type\n     * @param deviceSlot \"Slot\" or index that device is referenced in\n     */\n    _unregisterDevice(deviceType, deviceSlot) {\n        if (this._inputs[deviceType][deviceSlot]) {\n            delete this._inputs[deviceType][deviceSlot];\n            this._onDeviceDisconnected(deviceType, deviceSlot);\n        }\n    }\n    /**\n     * Handle all actions that come from keyboard interaction\n     */\n    _handleKeyActions() {\n        this._keyboardDownEvent = (evt) => {\n            if (!this._keyboardActive) {\n                this._keyboardActive = true;\n                this._registerDevice(DeviceType.Keyboard, 0, MAX_KEYCODES);\n            }\n            const kbKey = this._inputs[DeviceType.Keyboard][0];\n            if (kbKey) {\n                kbKey[evt.keyCode] = 1;\n                const deviceEvent = evt;\n                deviceEvent.inputIndex = evt.keyCode;\n                if (this._usingMacOS && evt.metaKey && evt.key !== \"Meta\") {\n                    if (!this._metaKeys.includes(evt.keyCode)) {\n                        this._metaKeys.push(evt.keyCode);\n                    }\n                }\n                this._onInputChanged(DeviceType.Keyboard, 0, deviceEvent);\n            }\n        };\n        this._keyboardUpEvent = (evt) => {\n            if (!this._keyboardActive) {\n                this._keyboardActive = true;\n                this._registerDevice(DeviceType.Keyboard, 0, MAX_KEYCODES);\n            }\n            const kbKey = this._inputs[DeviceType.Keyboard][0];\n            if (kbKey) {\n                kbKey[evt.keyCode] = 0;\n                const deviceEvent = evt;\n                deviceEvent.inputIndex = evt.keyCode;\n                if (this._usingMacOS && evt.key === \"Meta\" && this._metaKeys.length > 0) {\n                    for (const keyCode of this._metaKeys) {\n                        const deviceEvent = DeviceEventFactory.CreateDeviceEvent(DeviceType.Keyboard, 0, keyCode, 0, this, this._elementToAttachTo);\n                        kbKey[keyCode] = 0;\n                        this._onInputChanged(DeviceType.Keyboard, 0, deviceEvent);\n                    }\n                    this._metaKeys.splice(0, this._metaKeys.length);\n                }\n                this._onInputChanged(DeviceType.Keyboard, 0, deviceEvent);\n            }\n        };\n        this._keyboardBlurEvent = () => {\n            if (this._keyboardActive) {\n                const kbKey = this._inputs[DeviceType.Keyboard][0];\n                for (let i = 0; i < kbKey.length; i++) {\n                    if (kbKey[i] !== 0) {\n                        kbKey[i] = 0;\n                        const deviceEvent = DeviceEventFactory.CreateDeviceEvent(DeviceType.Keyboard, 0, i, 0, this, this._elementToAttachTo);\n                        this._onInputChanged(DeviceType.Keyboard, 0, deviceEvent);\n                    }\n                }\n                if (this._usingMacOS) {\n                    this._metaKeys.splice(0, this._metaKeys.length);\n                }\n            }\n        };\n        this._elementToAttachTo.addEventListener(\"keydown\", this._keyboardDownEvent);\n        this._elementToAttachTo.addEventListener(\"keyup\", this._keyboardUpEvent);\n        this._elementToAttachTo.addEventListener(\"blur\", this._keyboardBlurEvent);\n    }\n    /**\n     * Handle all actions that come from pointer interaction\n     */\n    _handlePointerActions() {\n        // If maxTouchPoints is defined, use that value.  Otherwise, allow for a minimum for supported gestures like pinch\n        this._maxTouchPoints = (DomManagement.IsNavigatorAvailable() && navigator.maxTouchPoints) || 2;\n        if (!this._activeTouchIds) {\n            this._activeTouchIds = new Array(this._maxTouchPoints);\n        }\n        for (let i = 0; i < this._maxTouchPoints; i++) {\n            this._activeTouchIds[i] = -1;\n        }\n        this._pointerMoveEvent = (evt) => {\n            const deviceType = this._getPointerType(evt);\n            const deviceSlot = deviceType === DeviceType.Mouse ? 0 : this._activeTouchIds.indexOf(evt.pointerId);\n            if (!this._inputs[deviceType]) {\n                this._inputs[deviceType] = {};\n            }\n            if (!this._inputs[deviceType][deviceSlot]) {\n                this._addPointerDevice(deviceType, deviceSlot, evt.clientX, evt.clientY);\n            }\n            const pointer = this._inputs[deviceType][deviceSlot];\n            if (pointer) {\n                const deviceEvent = evt;\n                deviceEvent.inputIndex = PointerInput.Move;\n                pointer[PointerInput.Horizontal] = evt.clientX;\n                pointer[PointerInput.Vertical] = evt.clientY;\n                this._onInputChanged(deviceType, deviceSlot, deviceEvent);\n                // Lets Propagate the event for move with same position.\n                if (!this._usingSafari && evt.button !== -1) {\n                    deviceEvent.inputIndex = evt.button + 2;\n                    pointer[evt.button + 2] = pointer[evt.button + 2] ? 0 : 1; // Reverse state of button if evt.button has value\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\n                }\n            }\n        };\n        this._pointerDownEvent = (evt) => {\n            const deviceType = this._getPointerType(evt);\n            let deviceSlot = deviceType === DeviceType.Mouse ? 0 : evt.pointerId;\n            if (deviceType === DeviceType.Touch) {\n                const idx = this._activeTouchIds.indexOf(-1);\n                if (idx >= 0) {\n                    deviceSlot = idx;\n                    this._activeTouchIds[idx] = evt.pointerId;\n                }\n                else {\n                    // We can't find an open slot to store new pointer so just return (can only support max number of touches)\n                    Tools.Warn(`Max number of touches exceeded.  Ignoring touches in excess of ${this._maxTouchPoints}`);\n                    return;\n                }\n            }\n            if (!this._inputs[deviceType]) {\n                this._inputs[deviceType] = {};\n            }\n            if (!this._inputs[deviceType][deviceSlot]) {\n                this._addPointerDevice(deviceType, deviceSlot, evt.clientX, evt.clientY);\n            }\n            else if (deviceType === DeviceType.Touch) {\n                this._onDeviceConnected(deviceType, deviceSlot);\n            }\n            const pointer = this._inputs[deviceType][deviceSlot];\n            if (pointer) {\n                const previousHorizontal = pointer[PointerInput.Horizontal];\n                const previousVertical = pointer[PointerInput.Vertical];\n                if (deviceType === DeviceType.Mouse) {\n                    // Mouse; Among supported browsers, value is either 1 or 0 for mouse\n                    if (this._mouseId === -1) {\n                        if (evt.pointerId === undefined) {\n                            // If there is no pointerId (eg. manually dispatched MouseEvent)\n                            this._mouseId = this._isUsingFirefox ? 0 : 1;\n                        }\n                        else {\n                            this._mouseId = evt.pointerId;\n                        }\n                    }\n                    if (!document.pointerLockElement) {\n                        try {\n                            this._elementToAttachTo.setPointerCapture(this._mouseId);\n                        }\n                        catch (e) {\n                            // DO NOTHING\n                        }\n                    }\n                }\n                else {\n                    // Touch; Since touches are dynamically assigned, only set capture if we have an id\n                    if (evt.pointerId && !document.pointerLockElement) {\n                        try {\n                            this._elementToAttachTo.setPointerCapture(evt.pointerId);\n                        }\n                        catch (e) {\n                            // DO NOTHING\n                        }\n                    }\n                }\n                pointer[PointerInput.Horizontal] = evt.clientX;\n                pointer[PointerInput.Vertical] = evt.clientY;\n                pointer[evt.button + 2] = 1;\n                const deviceEvent = evt;\n                // NOTE: The +2 used here to is because PointerInput has the same value progression for its mouse buttons as PointerEvent.button\n                // However, we have our X and Y values front-loaded to group together the touch inputs but not break this progression\n                // EG. ([X, Y, Left-click], Middle-click, etc...)\n                deviceEvent.inputIndex = evt.button + 2;\n                this._onInputChanged(deviceType, deviceSlot, deviceEvent);\n                if (previousHorizontal !== evt.clientX || previousVertical !== evt.clientY) {\n                    deviceEvent.inputIndex = PointerInput.Move;\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\n                }\n            }\n        };\n        this._pointerUpEvent = (evt) => {\n            var _a, _b, _c, _d, _e;\n            const deviceType = this._getPointerType(evt);\n            const deviceSlot = deviceType === DeviceType.Mouse ? 0 : this._activeTouchIds.indexOf(evt.pointerId);\n            if (deviceType === DeviceType.Touch) {\n                if (deviceSlot === -1) {\n                    return;\n                }\n                else {\n                    this._activeTouchIds[deviceSlot] = -1;\n                }\n            }\n            const pointer = (_a = this._inputs[deviceType]) === null || _a === void 0 ? void 0 : _a[deviceSlot];\n            if (pointer && pointer[evt.button + 2] !== 0) {\n                const previousHorizontal = pointer[PointerInput.Horizontal];\n                const previousVertical = pointer[PointerInput.Vertical];\n                pointer[PointerInput.Horizontal] = evt.clientX;\n                pointer[PointerInput.Vertical] = evt.clientY;\n                pointer[evt.button + 2] = 0;\n                const deviceEvent = evt;\n                if (previousHorizontal !== evt.clientX || previousVertical !== evt.clientY) {\n                    deviceEvent.inputIndex = PointerInput.Move;\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\n                }\n                // NOTE: The +2 used here to is because PointerInput has the same value progression for its mouse buttons as PointerEvent.button\n                // However, we have our X and Y values front-loaded to group together the touch inputs but not break this progression\n                // EG. ([X, Y, Left-click], Middle-click, etc...)\n                deviceEvent.inputIndex = evt.button + 2;\n                if (deviceType === DeviceType.Mouse && this._mouseId >= 0 && ((_c = (_b = this._elementToAttachTo).hasPointerCapture) === null || _c === void 0 ? void 0 : _c.call(_b, this._mouseId))) {\n                    this._elementToAttachTo.releasePointerCapture(this._mouseId);\n                }\n                else if (evt.pointerId && ((_e = (_d = this._elementToAttachTo).hasPointerCapture) === null || _e === void 0 ? void 0 : _e.call(_d, evt.pointerId))) {\n                    this._elementToAttachTo.releasePointerCapture(evt.pointerId);\n                }\n                this._onInputChanged(deviceType, deviceSlot, deviceEvent);\n                if (deviceType === DeviceType.Touch) {\n                    this._onDeviceDisconnected(deviceType, deviceSlot);\n                }\n            }\n        };\n        this._pointerCancelEvent = (evt) => {\n            var _a, _b, _c, _d;\n            if (evt.pointerType === \"mouse\") {\n                const pointer = this._inputs[DeviceType.Mouse][0];\n                if (this._mouseId >= 0 && ((_b = (_a = this._elementToAttachTo).hasPointerCapture) === null || _b === void 0 ? void 0 : _b.call(_a, this._mouseId))) {\n                    this._elementToAttachTo.releasePointerCapture(this._mouseId);\n                }\n                for (let inputIndex = PointerInput.LeftClick; inputIndex <= PointerInput.BrowserForward; inputIndex++) {\n                    if (pointer[inputIndex] === 1) {\n                        pointer[inputIndex] = 0;\n                        const deviceEvent = DeviceEventFactory.CreateDeviceEvent(DeviceType.Mouse, 0, inputIndex, 0, this, this._elementToAttachTo);\n                        this._onInputChanged(DeviceType.Mouse, 0, deviceEvent);\n                    }\n                }\n            }\n            else {\n                const deviceSlot = this._activeTouchIds.indexOf(evt.pointerId);\n                if ((_d = (_c = this._elementToAttachTo).hasPointerCapture) === null || _d === void 0 ? void 0 : _d.call(_c, evt.pointerId)) {\n                    this._elementToAttachTo.releasePointerCapture(evt.pointerId);\n                }\n                this._inputs[DeviceType.Touch][deviceSlot][PointerInput.LeftClick] = 0;\n                const deviceEvent = DeviceEventFactory.CreateDeviceEvent(DeviceType.Touch, deviceSlot, PointerInput.LeftClick, 0, this, this._elementToAttachTo, evt.pointerId);\n                this._onInputChanged(DeviceType.Touch, deviceSlot, deviceEvent);\n                this._activeTouchIds[deviceSlot] = -1;\n                this._onDeviceDisconnected(DeviceType.Touch, deviceSlot);\n            }\n        };\n        // Set Wheel Event Name, code originally from scene.inputManager\n        this._wheelEventName =\n            \"onwheel\" in document.createElement(\"div\")\n                ? \"wheel\" // Modern browsers support \"wheel\"\n                : document.onmousewheel !== undefined\n                    ? \"mousewheel\" // Webkit and IE support at least \"mousewheel\"\n                    : \"DOMMouseScroll\"; // let's assume that remaining browsers are older Firefox\n        // Code originally in scene.inputManager.ts\n        // Chrome reports warning in console if wheel listener doesn't set an explicit passive option.\n        // IE11 only supports captureEvent:boolean, not options:object, and it defaults to false.\n        // Feature detection technique copied from: https://github.com/github/eventlistener-polyfill (MIT license)\n        let passiveSupported = false;\n        const noop = function () { };\n        try {\n            const options = Object.defineProperty({}, \"passive\", {\n                get: function () {\n                    passiveSupported = true;\n                },\n            });\n            this._elementToAttachTo.addEventListener(\"test\", noop, options);\n            this._elementToAttachTo.removeEventListener(\"test\", noop, options);\n        }\n        catch (e) {\n            /* */\n        }\n        this._pointerBlurEvent = () => {\n            var _a, _b, _c, _d, _e;\n            // Handle mouse buttons\n            if (this.isDeviceAvailable(DeviceType.Mouse)) {\n                const pointer = this._inputs[DeviceType.Mouse][0];\n                if (this._mouseId >= 0 && ((_b = (_a = this._elementToAttachTo).hasPointerCapture) === null || _b === void 0 ? void 0 : _b.call(_a, this._mouseId))) {\n                    this._elementToAttachTo.releasePointerCapture(this._mouseId);\n                }\n                for (let inputIndex = PointerInput.LeftClick; inputIndex <= PointerInput.BrowserForward; inputIndex++) {\n                    if (pointer[inputIndex] === 1) {\n                        pointer[inputIndex] = 0;\n                        const deviceEvent = DeviceEventFactory.CreateDeviceEvent(DeviceType.Mouse, 0, inputIndex, 0, this, this._elementToAttachTo);\n                        this._onInputChanged(DeviceType.Mouse, 0, deviceEvent);\n                    }\n                }\n            }\n            // Handle Active Touches\n            if (this.isDeviceAvailable(DeviceType.Touch)) {\n                const pointer = this._inputs[DeviceType.Touch];\n                for (let deviceSlot = 0; deviceSlot < this._activeTouchIds.length; deviceSlot++) {\n                    const pointerId = this._activeTouchIds[deviceSlot];\n                    if ((_d = (_c = this._elementToAttachTo).hasPointerCapture) === null || _d === void 0 ? void 0 : _d.call(_c, pointerId)) {\n                        this._elementToAttachTo.releasePointerCapture(pointerId);\n                    }\n                    if (pointerId !== -1 && ((_e = pointer[deviceSlot]) === null || _e === void 0 ? void 0 : _e[PointerInput.LeftClick]) === 1) {\n                        pointer[deviceSlot][PointerInput.LeftClick] = 0;\n                        const deviceEvent = DeviceEventFactory.CreateDeviceEvent(DeviceType.Touch, deviceSlot, PointerInput.LeftClick, 0, this, this._elementToAttachTo, pointerId);\n                        this._onInputChanged(DeviceType.Touch, deviceSlot, deviceEvent);\n                        this._activeTouchIds[deviceSlot] = -1;\n                        this._onDeviceDisconnected(DeviceType.Touch, deviceSlot);\n                    }\n                }\n            }\n        };\n        this._pointerWheelEvent = (evt) => {\n            const deviceType = DeviceType.Mouse;\n            const deviceSlot = 0;\n            if (!this._inputs[deviceType]) {\n                this._inputs[deviceType] = [];\n            }\n            if (!this._inputs[deviceType][deviceSlot]) {\n                this._pointerActive = true;\n                this._registerDevice(deviceType, deviceSlot, MAX_POINTER_INPUTS);\n            }\n            const pointer = this._inputs[deviceType][deviceSlot];\n            if (pointer) {\n                pointer[PointerInput.MouseWheelX] = evt.deltaX || 0;\n                pointer[PointerInput.MouseWheelY] = evt.deltaY || evt.wheelDelta || 0;\n                pointer[PointerInput.MouseWheelZ] = evt.deltaZ || 0;\n                const deviceEvent = evt;\n                if (pointer[PointerInput.MouseWheelX] !== 0) {\n                    deviceEvent.inputIndex = PointerInput.MouseWheelX;\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\n                }\n                if (pointer[PointerInput.MouseWheelY] !== 0) {\n                    deviceEvent.inputIndex = PointerInput.MouseWheelY;\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\n                }\n                if (pointer[PointerInput.MouseWheelZ] !== 0) {\n                    deviceEvent.inputIndex = PointerInput.MouseWheelZ;\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\n                }\n            }\n        };\n        this._elementToAttachTo.addEventListener(this._eventPrefix + \"move\", this._pointerMoveEvent);\n        this._elementToAttachTo.addEventListener(this._eventPrefix + \"down\", this._pointerDownEvent);\n        this._elementToAttachTo.addEventListener(this._eventPrefix + \"up\", this._pointerUpEvent);\n        this._elementToAttachTo.addEventListener(this._eventPrefix + \"cancel\", this._pointerCancelEvent);\n        this._elementToAttachTo.addEventListener(\"blur\", this._pointerBlurEvent);\n        this._elementToAttachTo.addEventListener(this._wheelEventName, this._pointerWheelEvent, passiveSupported ? { passive: false } : false);\n        // Since there's no up or down event for mouse wheel or delta x/y, clear mouse values at end of frame\n        this._pointerInputClearObserver = this._engine.onEndFrameObservable.add(() => {\n            if (this.isDeviceAvailable(DeviceType.Mouse)) {\n                const pointer = this._inputs[DeviceType.Mouse][0];\n                pointer[PointerInput.MouseWheelX] = 0;\n                pointer[PointerInput.MouseWheelY] = 0;\n                pointer[PointerInput.MouseWheelZ] = 0;\n            }\n        });\n    }\n    /**\n     * Handle all actions that come from gamepad interaction\n     */\n    _handleGamepadActions() {\n        this._gamepadConnectedEvent = (evt) => {\n            this._addGamePad(evt.gamepad);\n        };\n        this._gamepadDisconnectedEvent = (evt) => {\n            if (this._gamepads) {\n                const deviceType = this._getGamepadDeviceType(evt.gamepad.id);\n                const deviceSlot = evt.gamepad.index;\n                this._unregisterDevice(deviceType, deviceSlot);\n                delete this._gamepads[deviceSlot];\n            }\n        };\n        window.addEventListener(\"gamepadconnected\", this._gamepadConnectedEvent);\n        window.addEventListener(\"gamepaddisconnected\", this._gamepadDisconnectedEvent);\n    }\n    /**\n     * Update all non-event based devices with each frame\n     * @param deviceType Enum specifying device type\n     * @param deviceSlot \"Slot\" or index that device is referenced in\n     * @param inputIndex Id of input to be checked\n     */\n    _updateDevice(deviceType, deviceSlot, inputIndex) {\n        // Gamepads\n        const gp = navigator.getGamepads()[deviceSlot];\n        if (gp && deviceType === this._gamepads[deviceSlot]) {\n            const device = this._inputs[deviceType][deviceSlot];\n            if (inputIndex >= gp.buttons.length) {\n                device[inputIndex] = gp.axes[inputIndex - gp.buttons.length].valueOf();\n            }\n            else {\n                device[inputIndex] = gp.buttons[inputIndex].value;\n            }\n        }\n    }\n    /**\n     * Gets DeviceType from the device name\n     * @param deviceName Name of Device from DeviceInputSystem\n     * @returns DeviceType enum value\n     */\n    _getGamepadDeviceType(deviceName) {\n        if (deviceName.indexOf(\"054c\") !== -1) {\n            // DualShock 4 Gamepad\n            return deviceName.indexOf(\"0ce6\") !== -1 ? DeviceType.DualSense : DeviceType.DualShock;\n        }\n        else if (deviceName.indexOf(\"Xbox One\") !== -1 || deviceName.search(\"Xbox 360\") !== -1 || deviceName.search(\"xinput\") !== -1) {\n            // Xbox Gamepad\n            return DeviceType.Xbox;\n        }\n        else if (deviceName.indexOf(\"057e\") !== -1) {\n            // Switch Gamepad\n            return DeviceType.Switch;\n        }\n        return DeviceType.Generic;\n    }\n    /**\n     * Get DeviceType from a given pointer/mouse/touch event.\n     * @param evt PointerEvent to evaluate\n     * @returns DeviceType interpreted from event\n     */\n    _getPointerType(evt) {\n        let deviceType = DeviceType.Mouse;\n        if (evt.pointerType === \"touch\" || evt.pointerType === \"pen\" || evt.touches) {\n            deviceType = DeviceType.Touch;\n        }\n        return deviceType;\n    }\n}\n//# sourceMappingURL=webDeviceInputSystem.js.map","import { DeviceType } from \"./InputDevices/deviceEnums.js\";\nimport { NativeDeviceInputSystem } from \"./nativeDeviceInputSystem.js\";\nimport { WebDeviceInputSystem } from \"./webDeviceInputSystem.js\";\nimport { DeviceSource } from \"./InputDevices/deviceSource.js\";\n/** @internal */\nexport class InternalDeviceSourceManager {\n    constructor(engine) {\n        this._registeredManagers = new Array();\n        this._refCount = 0;\n        // Public Functions\n        this.registerManager = (manager) => {\n            for (let deviceType = 0; deviceType < this._devices.length; deviceType++) {\n                const device = this._devices[deviceType];\n                for (const deviceSlotKey in device) {\n                    const deviceSlot = +deviceSlotKey;\n                    manager._addDevice(new DeviceSource(this._deviceInputSystem, deviceType, deviceSlot));\n                }\n            }\n            this._registeredManagers.push(manager);\n        };\n        this.unregisterManager = (manager) => {\n            const idx = this._registeredManagers.indexOf(manager);\n            if (idx > -1) {\n                this._registeredManagers.splice(idx, 1);\n            }\n        };\n        const numberOfDeviceTypes = Object.keys(DeviceType).length / 2;\n        this._devices = new Array(numberOfDeviceTypes);\n        const onDeviceConnected = (deviceType, deviceSlot) => {\n            if (!this._devices[deviceType]) {\n                this._devices[deviceType] = new Array();\n            }\n            if (!this._devices[deviceType][deviceSlot]) {\n                this._devices[deviceType][deviceSlot] = deviceSlot;\n            }\n            for (const manager of this._registeredManagers) {\n                const deviceSource = new DeviceSource(this._deviceInputSystem, deviceType, deviceSlot);\n                manager._addDevice(deviceSource);\n            }\n        };\n        const onDeviceDisconnected = (deviceType, deviceSlot) => {\n            var _a;\n            if ((_a = this._devices[deviceType]) === null || _a === void 0 ? void 0 : _a[deviceSlot]) {\n                delete this._devices[deviceType][deviceSlot];\n            }\n            for (const manager of this._registeredManagers) {\n                manager._removeDevice(deviceType, deviceSlot);\n            }\n        };\n        const onInputChanged = (deviceType, deviceSlot, eventData) => {\n            if (eventData) {\n                for (const manager of this._registeredManagers) {\n                    manager._onInputChanged(deviceType, deviceSlot, eventData);\n                }\n            }\n        };\n        if (typeof _native !== \"undefined\") {\n            this._deviceInputSystem = new NativeDeviceInputSystem(onDeviceConnected, onDeviceDisconnected, onInputChanged);\n        }\n        else {\n            this._deviceInputSystem = new WebDeviceInputSystem(engine, onDeviceConnected, onDeviceDisconnected, onInputChanged);\n        }\n    }\n    dispose() {\n        this._deviceInputSystem.dispose();\n    }\n}\n//# sourceMappingURL=internalDeviceSourceManager.js.map","import { DeviceType } from \"./deviceEnums.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { InternalDeviceSourceManager } from \"../internalDeviceSourceManager.js\";\n/**\n * Class to keep track of devices\n */\nexport class DeviceSourceManager {\n    // Public Functions\n    /**\n     * Gets a DeviceSource, given a type and slot\n     * @param deviceType - Type of Device\n     * @param deviceSlot - Slot or ID of device\n     * @returns DeviceSource\n     */\n    getDeviceSource(deviceType, deviceSlot) {\n        if (deviceSlot === undefined) {\n            if (this._firstDevice[deviceType] === undefined) {\n                return null;\n            }\n            deviceSlot = this._firstDevice[deviceType];\n        }\n        if (!this._devices[deviceType] || this._devices[deviceType][deviceSlot] === undefined) {\n            return null;\n        }\n        return this._devices[deviceType][deviceSlot];\n    }\n    /**\n     * Gets an array of DeviceSource objects for a given device type\n     * @param deviceType - Type of Device\n     * @returns All available DeviceSources of a given type\n     */\n    getDeviceSources(deviceType) {\n        // If device type hasn't had any devices connected yet, return empty array.\n        if (!this._devices[deviceType]) {\n            return [];\n        }\n        return this._devices[deviceType].filter((source) => {\n            return !!source;\n        });\n    }\n    /**\n     * Default constructor\n     * @param engine - Used to get canvas (if applicable)\n     */\n    constructor(engine) {\n        const numberOfDeviceTypes = Object.keys(DeviceType).length / 2;\n        this._devices = new Array(numberOfDeviceTypes);\n        this._firstDevice = new Array(numberOfDeviceTypes);\n        this._engine = engine;\n        if (!this._engine._deviceSourceManager) {\n            this._engine._deviceSourceManager = new InternalDeviceSourceManager(engine);\n        }\n        this._engine._deviceSourceManager._refCount++;\n        // Observables\n        this.onDeviceConnectedObservable = new Observable((observer) => {\n            for (const devices of this._devices) {\n                if (devices) {\n                    for (const device of devices) {\n                        if (device) {\n                            this.onDeviceConnectedObservable.notifyObserver(observer, device);\n                        }\n                    }\n                }\n            }\n        });\n        this.onDeviceDisconnectedObservable = new Observable();\n        this._engine._deviceSourceManager.registerManager(this);\n        this._onDisposeObserver = engine.onDisposeObservable.add(() => {\n            this.dispose();\n        });\n    }\n    /**\n     * Dispose of DeviceSourceManager\n     */\n    dispose() {\n        // Null out observable refs\n        this.onDeviceConnectedObservable.clear();\n        this.onDeviceDisconnectedObservable.clear();\n        if (this._engine._deviceSourceManager) {\n            this._engine._deviceSourceManager.unregisterManager(this);\n            if (--this._engine._deviceSourceManager._refCount < 1) {\n                this._engine._deviceSourceManager.dispose();\n                delete this._engine._deviceSourceManager;\n            }\n        }\n        this._engine.onDisposeObservable.remove(this._onDisposeObserver);\n    }\n    // Hidden Functions\n    /**\n     * @param deviceSource - Source to add\n     * @internal\n     */\n    _addDevice(deviceSource) {\n        if (!this._devices[deviceSource.deviceType]) {\n            this._devices[deviceSource.deviceType] = new Array();\n        }\n        if (!this._devices[deviceSource.deviceType][deviceSource.deviceSlot]) {\n            this._devices[deviceSource.deviceType][deviceSource.deviceSlot] = deviceSource;\n            this._updateFirstDevices(deviceSource.deviceType);\n        }\n        this.onDeviceConnectedObservable.notifyObservers(deviceSource);\n    }\n    /**\n     * @param deviceType - DeviceType\n     * @param deviceSlot - DeviceSlot\n     * @internal\n     */\n    _removeDevice(deviceType, deviceSlot) {\n        var _a, _b;\n        const deviceSource = (_a = this._devices[deviceType]) === null || _a === void 0 ? void 0 : _a[deviceSlot]; // Grab local reference to use before removing from devices\n        this.onDeviceDisconnectedObservable.notifyObservers(deviceSource);\n        if ((_b = this._devices[deviceType]) === null || _b === void 0 ? void 0 : _b[deviceSlot]) {\n            delete this._devices[deviceType][deviceSlot];\n        }\n        // Even if we don't delete a device, we should still check for the first device as things may have gotten out of sync.\n        this._updateFirstDevices(deviceType);\n    }\n    /**\n     * @param deviceType - DeviceType\n     * @param deviceSlot - DeviceSlot\n     * @param eventData - Event\n     * @internal\n     */\n    _onInputChanged(deviceType, deviceSlot, eventData) {\n        var _a, _b;\n        (_b = (_a = this._devices[deviceType]) === null || _a === void 0 ? void 0 : _a[deviceSlot]) === null || _b === void 0 ? void 0 : _b.onInputChangedObservable.notifyObservers(eventData);\n    }\n    // Private Functions\n    _updateFirstDevices(type) {\n        switch (type) {\n            case DeviceType.Keyboard:\n            case DeviceType.Mouse:\n                this._firstDevice[type] = 0;\n                break;\n            case DeviceType.Touch:\n            case DeviceType.DualSense:\n            case DeviceType.DualShock:\n            case DeviceType.Xbox:\n            case DeviceType.Switch:\n            case DeviceType.Generic: {\n                delete this._firstDevice[type];\n                // eslint-disable-next-line no-case-declarations\n                const devices = this._devices[type];\n                if (devices) {\n                    for (let i = 0; i < devices.length; i++) {\n                        if (devices[i]) {\n                            this._firstDevice[type] = i;\n                            break;\n                        }\n                    }\n                }\n                break;\n            }\n        }\n    }\n}\n//# sourceMappingURL=deviceSourceManager.js.map","import { ThinEngine } from \"../../Engines/thinEngine.js\";\n\nThinEngine.prototype.setAlphaConstants = function (r, g, b, a) {\n    this._alphaState.setAlphaBlendConstants(r, g, b, a);\n};\nThinEngine.prototype.setAlphaMode = function (mode, noDepthWriteChange = false) {\n    if (this._alphaMode === mode) {\n        if (!noDepthWriteChange) {\n            // Make sure we still have the correct depth mask according to the alpha mode (a transparent material could have forced writting to the depth buffer, for instance)\n            const depthMask = mode === 0;\n            if (this.depthCullingState.depthMask !== depthMask) {\n                this.depthCullingState.depthMask = depthMask;\n            }\n        }\n        return;\n    }\n    switch (mode) {\n        case 0:\n            this._alphaState.alphaBlend = false;\n            break;\n        case 7:\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 8:\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 2:\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 6:\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE, this._gl.ZERO, this._gl.ONE);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 1:\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE, this._gl.ZERO, this._gl.ONE);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 3:\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ZERO, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE, this._gl.ONE);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 4:\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.DST_COLOR, this._gl.ZERO, this._gl.ONE, this._gl.ONE);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 5:\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE, this._gl.ONE);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 9:\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.CONSTANT_COLOR, this._gl.ONE_MINUS_CONSTANT_COLOR, this._gl.CONSTANT_ALPHA, this._gl.ONE_MINUS_CONSTANT_ALPHA);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 10:\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 11:\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE, this._gl.ONE, this._gl.ONE);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 12:\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.DST_ALPHA, this._gl.ONE, this._gl.ZERO, this._gl.ZERO);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 13:\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE_MINUS_DST_COLOR, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE_MINUS_DST_ALPHA, this._gl.ONE_MINUS_SRC_ALPHA);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 14:\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 15:\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE, this._gl.ONE, this._gl.ZERO);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 16:\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE_MINUS_DST_COLOR, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ZERO, this._gl.ONE);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 17:\n            // Same as ALPHA_COMBINE but accumulates (1 - alpha) values in the alpha channel for a later readout in order independant transparency\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\n            this._alphaState.alphaBlend = true;\n            break;\n    }\n    if (!noDepthWriteChange) {\n        this.depthCullingState.depthMask = mode === 0;\n    }\n    this._alphaMode = mode;\n};\nThinEngine.prototype.getAlphaMode = function () {\n    return this._alphaMode;\n};\nThinEngine.prototype.setAlphaEquation = function (equation) {\n    if (this._alphaEquation === equation) {\n        return;\n    }\n    switch (equation) {\n        case 0:\n            this._alphaState.setAlphaEquationParameters(32774, 32774);\n            break;\n        case 1:\n            this._alphaState.setAlphaEquationParameters(32778, 32778);\n            break;\n        case 2:\n            this._alphaState.setAlphaEquationParameters(32779, 32779);\n            break;\n        case 3:\n            this._alphaState.setAlphaEquationParameters(32776, 32776);\n            break;\n        case 4:\n            this._alphaState.setAlphaEquationParameters(32775, 32775);\n            break;\n        case 5:\n            this._alphaState.setAlphaEquationParameters(32775, 32774);\n            break;\n    }\n    this._alphaEquation = equation;\n};\nThinEngine.prototype.getAlphaEquation = function () {\n    return this._alphaEquation;\n};\n//# sourceMappingURL=engine.alpha.js.map","import { ThinEngine } from \"../../Engines/thinEngine.js\";\n/** @internal */\nexport var ComputeBindingType;\n(function (ComputeBindingType) {\n    ComputeBindingType[ComputeBindingType[\"Texture\"] = 0] = \"Texture\";\n    ComputeBindingType[ComputeBindingType[\"StorageTexture\"] = 1] = \"StorageTexture\";\n    ComputeBindingType[ComputeBindingType[\"UniformBuffer\"] = 2] = \"UniformBuffer\";\n    ComputeBindingType[ComputeBindingType[\"StorageBuffer\"] = 3] = \"StorageBuffer\";\n    ComputeBindingType[ComputeBindingType[\"TextureWithoutSampler\"] = 4] = \"TextureWithoutSampler\";\n    ComputeBindingType[ComputeBindingType[\"Sampler\"] = 5] = \"Sampler\";\n})(ComputeBindingType || (ComputeBindingType = {}));\nThinEngine.prototype.createComputeEffect = function (baseName, options) {\n    throw new Error(\"createComputeEffect: This engine does not support compute shaders!\");\n};\nThinEngine.prototype.createComputePipelineContext = function () {\n    throw new Error(\"createComputePipelineContext: This engine does not support compute shaders!\");\n};\nThinEngine.prototype.createComputeContext = function () {\n    return undefined;\n};\nThinEngine.prototype.computeDispatch = function (effect, context, bindings, x, y, z, bindingsMapping) {\n    throw new Error(\"computeDispatch: This engine does not support compute shaders!\");\n};\nThinEngine.prototype.areAllComputeEffectsReady = function () {\n    return true;\n};\nThinEngine.prototype.releaseComputeEffects = function () { };\nThinEngine.prototype._prepareComputePipelineContext = function (pipelineContext, computeSourceCode, rawComputeSourceCode, defines, entryPoint) { };\nThinEngine.prototype._rebuildComputeEffects = function () { };\nThinEngine.prototype._executeWhenComputeStateIsCompiled = function (pipelineContext, action) {\n    action();\n};\nThinEngine.prototype._releaseComputeEffect = function (effect) { };\nThinEngine.prototype._deleteComputePipelineContext = function (pipelineContext) { };\n//# sourceMappingURL=engine.computeShader.js.map","import { ThinEngine } from \"../../Engines/thinEngine.js\";\nimport { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { LoadImage } from \"../../Misc/fileTools.js\";\nimport { RandomGUID } from \"../../Misc/guid.js\";\n\nThinEngine.prototype._createDepthStencilCubeTexture = function (size, options, rtWrapper) {\n    const internalTexture = new InternalTexture(this, InternalTextureSource.DepthStencil);\n    internalTexture.isCube = true;\n    if (this.webGLVersion === 1) {\n        Logger.Error(\"Depth cube texture is not supported by WebGL 1.\");\n        return internalTexture;\n    }\n    const internalOptions = {\n        bilinearFiltering: false,\n        comparisonFunction: 0,\n        generateStencil: false,\n        ...options,\n    };\n    const gl = this._gl;\n    this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, internalTexture, true);\n    this._setupDepthStencilTexture(internalTexture, size, internalOptions.generateStencil, internalOptions.bilinearFiltering, internalOptions.comparisonFunction);\n    rtWrapper._depthStencilTexture = internalTexture;\n    rtWrapper._depthStencilTextureWithStencil = internalOptions.generateStencil;\n    // Create the depth/stencil buffer\n    for (let face = 0; face < 6; face++) {\n        if (internalOptions.generateStencil) {\n            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + face, 0, gl.DEPTH24_STENCIL8, size, size, 0, gl.DEPTH_STENCIL, gl.UNSIGNED_INT_24_8, null);\n        }\n        else {\n            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + face, 0, gl.DEPTH_COMPONENT24, size, size, 0, gl.DEPTH_COMPONENT, gl.UNSIGNED_INT, null);\n        }\n    }\n    this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\n    this._internalTexturesCache.push(internalTexture);\n    return internalTexture;\n};\nThinEngine.prototype._partialLoadFile = function (url, index, loadedFiles, onfinish, onErrorCallBack = null) {\n    const onload = (data) => {\n        loadedFiles[index] = data;\n        loadedFiles._internalCount++;\n        if (loadedFiles._internalCount === 6) {\n            onfinish(loadedFiles);\n        }\n    };\n    const onerror = (request, exception) => {\n        if (onErrorCallBack && request) {\n            onErrorCallBack(request.status + \" \" + request.statusText, exception);\n        }\n    };\n    this._loadFile(url, onload, undefined, undefined, true, onerror);\n};\nThinEngine.prototype._cascadeLoadFiles = function (scene, onfinish, files, onError = null) {\n    const loadedFiles = [];\n    loadedFiles._internalCount = 0;\n    for (let index = 0; index < 6; index++) {\n        this._partialLoadFile(files[index], index, loadedFiles, onfinish, onError);\n    }\n};\nThinEngine.prototype._cascadeLoadImgs = function (scene, texture, onfinish, files, onError = null, mimeType) {\n    const loadedImages = [];\n    loadedImages._internalCount = 0;\n    for (let index = 0; index < 6; index++) {\n        this._partialLoadImg(files[index], index, loadedImages, scene, texture, onfinish, onError, mimeType);\n    }\n};\nThinEngine.prototype._partialLoadImg = function (url, index, loadedImages, scene, texture, onfinish, onErrorCallBack = null, mimeType) {\n    const tokenPendingData = RandomGUID();\n    const onload = (img) => {\n        loadedImages[index] = img;\n        loadedImages._internalCount++;\n        if (scene) {\n            scene.removePendingData(tokenPendingData);\n        }\n        if (loadedImages._internalCount === 6 && onfinish) {\n            onfinish(texture, loadedImages);\n        }\n    };\n    const onerror = (message, exception) => {\n        if (scene) {\n            scene.removePendingData(tokenPendingData);\n        }\n        if (onErrorCallBack) {\n            onErrorCallBack(message, exception);\n        }\n    };\n    LoadImage(url, onload, onerror, scene ? scene.offlineProvider : null, mimeType);\n    if (scene) {\n        scene.addPendingData(tokenPendingData);\n    }\n};\nThinEngine.prototype._setCubeMapTextureParams = function (texture, loadMipmap, maxLevel) {\n    const gl = this._gl;\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, loadMipmap ? gl.LINEAR_MIPMAP_LINEAR : gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    texture.samplingMode = loadMipmap ? 3 : 2;\n    if (loadMipmap && this.getCaps().textureMaxLevel && maxLevel !== undefined && maxLevel > 0) {\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAX_LEVEL, maxLevel);\n        texture._maxLodLevel = maxLevel;\n    }\n    this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\n};\nThinEngine.prototype.createCubeTextureBase = function (rootUrl, scene, files, noMipmap, onLoad = null, onError = null, format, forcedExtension = null, createPolynomials = false, lodScale = 0, lodOffset = 0, fallback = null, beforeLoadCubeDataCallback = null, imageHandler = null, useSRGBBuffer = false) {\n    const texture = fallback ? fallback : new InternalTexture(this, InternalTextureSource.Cube);\n    texture.isCube = true;\n    texture.url = rootUrl;\n    texture.generateMipMaps = !noMipmap;\n    texture._lodGenerationScale = lodScale;\n    texture._lodGenerationOffset = lodOffset;\n    texture._useSRGBBuffer = !!useSRGBBuffer && this._caps.supportSRGBBuffers && (this.webGLVersion > 1 || this.isWebGPU || !!noMipmap);\n    if (!this._doNotHandleContextLost) {\n        texture._extension = forcedExtension;\n        texture._files = files;\n    }\n    const originalRootUrl = rootUrl;\n    if (this._transformTextureUrl && !fallback) {\n        rootUrl = this._transformTextureUrl(rootUrl);\n    }\n    const rootUrlWithoutUriParams = rootUrl.split(\"?\")[0];\n    const lastDot = rootUrlWithoutUriParams.lastIndexOf(\".\");\n    const extension = forcedExtension ? forcedExtension : lastDot > -1 ? rootUrlWithoutUriParams.substring(lastDot).toLowerCase() : \"\";\n    let loader = null;\n    for (const availableLoader of ThinEngine._TextureLoaders) {\n        if (availableLoader.canLoad(extension)) {\n            loader = availableLoader;\n            break;\n        }\n    }\n    const onInternalError = (request, exception) => {\n        if (rootUrl === originalRootUrl) {\n            if (onError && request) {\n                onError(request.status + \" \" + request.statusText, exception);\n            }\n        }\n        else {\n            // fall back to the original url if the transformed url fails to load\n            Logger.Warn(`Failed to load ${rootUrl}, falling back to the ${originalRootUrl}`);\n            this.createCubeTextureBase(originalRootUrl, scene, files, !!noMipmap, onLoad, onError, format, forcedExtension, createPolynomials, lodScale, lodOffset, texture, beforeLoadCubeDataCallback, imageHandler, useSRGBBuffer);\n        }\n    };\n    if (loader) {\n        const onloaddata = (data) => {\n            if (beforeLoadCubeDataCallback) {\n                beforeLoadCubeDataCallback(texture, data);\n            }\n            loader.loadCubeData(data, texture, createPolynomials, onLoad, onError);\n        };\n        if (files && files.length === 6) {\n            if (loader.supportCascades) {\n                this._cascadeLoadFiles(scene, (images) => onloaddata(images.map((image) => new Uint8Array(image))), files, onError);\n            }\n            else {\n                if (onError) {\n                    onError(\"Textures type does not support cascades.\");\n                }\n                else {\n                    Logger.Warn(\"Texture loader does not support cascades.\");\n                }\n            }\n        }\n        else {\n            this._loadFile(rootUrl, (data) => onloaddata(new Uint8Array(data)), undefined, undefined, true, onInternalError);\n        }\n    }\n    else {\n        if (!files) {\n            throw new Error(\"Cannot load cubemap because files were not defined\");\n        }\n        this._cascadeLoadImgs(scene, texture, (texture, imgs) => {\n            if (imageHandler) {\n                imageHandler(texture, imgs);\n            }\n        }, files, onError);\n    }\n    this._internalTexturesCache.push(texture);\n    return texture;\n};\nThinEngine.prototype.createCubeTexture = function (rootUrl, scene, files, noMipmap, onLoad = null, onError = null, format, forcedExtension = null, createPolynomials = false, lodScale = 0, lodOffset = 0, fallback = null, loaderOptions, useSRGBBuffer = false) {\n    const gl = this._gl;\n    return this.createCubeTextureBase(rootUrl, scene, files, !!noMipmap, onLoad, onError, format, forcedExtension, createPolynomials, lodScale, lodOffset, fallback, (texture) => this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true), (texture, imgs) => {\n        const width = this.needPOTTextures ? ThinEngine.GetExponentOfTwo(imgs[0].width, this._caps.maxCubemapTextureSize) : imgs[0].width;\n        const height = width;\n        const faces = [\n            gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n            gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n            gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_Z,\n        ];\n        this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\n        this._unpackFlipY(false);\n        const internalFormat = format ? this._getInternalFormat(format, texture._useSRGBBuffer) : texture._useSRGBBuffer ? gl.SRGB8_ALPHA8 : gl.RGBA;\n        let texelFormat = format ? this._getInternalFormat(format) : gl.RGBA;\n        if (texture._useSRGBBuffer && this.webGLVersion === 1) {\n            texelFormat = internalFormat;\n        }\n        for (let index = 0; index < faces.length; index++) {\n            if (imgs[index].width !== width || imgs[index].height !== height) {\n                this._prepareWorkingCanvas();\n                if (!this._workingCanvas || !this._workingContext) {\n                    Logger.Warn(\"Cannot create canvas to resize texture.\");\n                    return;\n                }\n                this._workingCanvas.width = width;\n                this._workingCanvas.height = height;\n                this._workingContext.drawImage(imgs[index], 0, 0, imgs[index].width, imgs[index].height, 0, 0, width, height);\n                gl.texImage2D(faces[index], 0, internalFormat, texelFormat, gl.UNSIGNED_BYTE, this._workingCanvas);\n            }\n            else {\n                gl.texImage2D(faces[index], 0, internalFormat, texelFormat, gl.UNSIGNED_BYTE, imgs[index]);\n            }\n        }\n        if (!noMipmap) {\n            gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\n        }\n        this._setCubeMapTextureParams(texture, !noMipmap);\n        texture.width = width;\n        texture.height = height;\n        texture.isReady = true;\n        if (format) {\n            texture.format = format;\n        }\n        texture.onLoadedObservable.notifyObservers(texture);\n        texture.onLoadedObservable.clear();\n        if (onLoad) {\n            onLoad();\n        }\n    }, !!useSRGBBuffer);\n};\n//# sourceMappingURL=engine.cubeTexture.js.map","import { ThinEngine } from \"../../Engines/thinEngine.js\";\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nThinEngine.prototype.updateDynamicIndexBuffer = function (indexBuffer, indices, offset = 0) {\n    // Force cache update\n    this._currentBoundBuffer[this._gl.ELEMENT_ARRAY_BUFFER] = null;\n    this.bindIndexBuffer(indexBuffer);\n    let view;\n    if (indexBuffer.is32Bits) {\n        // anything else than Uint32Array needs to be converted to Uint32Array\n        view = indices instanceof Uint32Array ? indices : new Uint32Array(indices);\n    }\n    else {\n        // anything else than Uint16Array needs to be converted to Uint16Array\n        view = indices instanceof Uint16Array ? indices : new Uint16Array(indices);\n    }\n    this._gl.bufferData(this._gl.ELEMENT_ARRAY_BUFFER, view, this._gl.DYNAMIC_DRAW);\n    this._resetIndexBufferBinding();\n};\nThinEngine.prototype.updateDynamicVertexBuffer = function (vertexBuffer, data, byteOffset, byteLength) {\n    this.bindArrayBuffer(vertexBuffer);\n    if (byteOffset === undefined) {\n        byteOffset = 0;\n    }\n    const dataLength = data.byteLength || data.length;\n    if (byteLength === undefined || (byteLength >= dataLength && byteOffset === 0)) {\n        if (data instanceof Array) {\n            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, byteOffset, new Float32Array(data));\n        }\n        else {\n            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, byteOffset, data);\n        }\n    }\n    else {\n        if (data instanceof Array) {\n            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, 0, new Float32Array(data).subarray(byteOffset, byteOffset + byteLength));\n        }\n        else {\n            if (data instanceof ArrayBuffer) {\n                data = new Uint8Array(data, byteOffset, byteLength);\n            }\n            else {\n                data = new Uint8Array(data.buffer, data.byteOffset + byteOffset, byteLength);\n            }\n            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, 0, data);\n        }\n    }\n    this._resetVertexBufferBinding();\n};\n//# sourceMappingURL=engine.dynamicBuffer.js.map","import { ThinEngine } from \"../../Engines/thinEngine.js\";\nimport { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture.js\";\nThinEngine.prototype.createDynamicTexture = function (width, height, generateMipMaps, samplingMode) {\n    const texture = new InternalTexture(this, InternalTextureSource.Dynamic);\n    texture.baseWidth = width;\n    texture.baseHeight = height;\n    if (generateMipMaps) {\n        width = this.needPOTTextures ? ThinEngine.GetExponentOfTwo(width, this._caps.maxTextureSize) : width;\n        height = this.needPOTTextures ? ThinEngine.GetExponentOfTwo(height, this._caps.maxTextureSize) : height;\n    }\n    //  this.resetTextureCache();\n    texture.width = width;\n    texture.height = height;\n    texture.isReady = false;\n    texture.generateMipMaps = generateMipMaps;\n    texture.samplingMode = samplingMode;\n    this.updateTextureSamplingMode(samplingMode, texture);\n    this._internalTexturesCache.push(texture);\n    return texture;\n};\nThinEngine.prototype.updateDynamicTexture = function (texture, source, invertY, premulAlpha = false, format, forceBindTexture = false, \n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nallowGPUOptimization = false) {\n    if (!texture) {\n        return;\n    }\n    const gl = this._gl;\n    const target = gl.TEXTURE_2D;\n    const wasPreviouslyBound = this._bindTextureDirectly(target, texture, true, forceBindTexture);\n    this._unpackFlipY(invertY === undefined ? texture.invertY : invertY);\n    if (premulAlpha) {\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);\n    }\n    const textureType = this._getWebGLTextureType(texture.type);\n    const glformat = this._getInternalFormat(format ? format : texture.format);\n    const internalFormat = this._getRGBABufferInternalSizedFormat(texture.type, glformat);\n    gl.texImage2D(target, 0, internalFormat, glformat, textureType, source);\n    if (texture.generateMipMaps) {\n        gl.generateMipmap(target);\n    }\n    if (!wasPreviouslyBound) {\n        this._bindTextureDirectly(target, null);\n    }\n    if (premulAlpha) {\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);\n    }\n    texture.isReady = true;\n};\n//# sourceMappingURL=engine.dynamicTexture.js.map","import { ThinEngine } from \"../../Engines/thinEngine.js\";\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nThinEngine.prototype.createExternalTexture = function (video) {\n    return null;\n};\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nThinEngine.prototype.setExternalTexture = function (name, texture) {\n    throw new Error(\"setExternalTexture: This engine does not support external textures!\");\n};\n//# sourceMappingURL=engine.externalTexture.js.map","import { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture.js\";\nimport { Logger } from \"../../Misc/logger.js\";\n\nimport { ThinEngine } from \"../thinEngine.js\";\nThinEngine.prototype.restoreSingleAttachment = function () {\n    const gl = this._gl;\n    this.bindAttachments([gl.BACK]);\n};\nThinEngine.prototype.restoreSingleAttachmentForRenderTarget = function () {\n    const gl = this._gl;\n    this.bindAttachments([gl.COLOR_ATTACHMENT0]);\n};\nThinEngine.prototype.buildTextureLayout = function (textureStatus) {\n    const gl = this._gl;\n    const result = [];\n    for (let i = 0; i < textureStatus.length; i++) {\n        if (textureStatus[i]) {\n            result.push(gl[\"COLOR_ATTACHMENT\" + i]);\n        }\n        else {\n            result.push(gl.NONE);\n        }\n    }\n    return result;\n};\nThinEngine.prototype.bindAttachments = function (attachments) {\n    const gl = this._gl;\n    gl.drawBuffers(attachments);\n};\nThinEngine.prototype.unBindMultiColorAttachmentFramebuffer = function (rtWrapper, disableGenerateMipMaps = false, onBeforeUnbind) {\n    this._currentRenderTarget = null;\n    // If MSAA, we need to bitblt back to main texture\n    const gl = this._gl;\n    const attachments = rtWrapper._attachments;\n    const count = attachments.length;\n    if (rtWrapper._MSAAFramebuffer) {\n        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, rtWrapper._MSAAFramebuffer);\n        gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, rtWrapper._framebuffer);\n        for (let i = 0; i < count; i++) {\n            const texture = rtWrapper.textures[i];\n            for (let j = 0; j < count; j++) {\n                attachments[j] = gl.NONE;\n            }\n            attachments[i] = gl[this.webGLVersion > 1 ? \"COLOR_ATTACHMENT\" + i : \"COLOR_ATTACHMENT\" + i + \"_WEBGL\"];\n            gl.readBuffer(attachments[i]);\n            gl.drawBuffers(attachments);\n            gl.blitFramebuffer(0, 0, texture.width, texture.height, 0, 0, texture.width, texture.height, gl.COLOR_BUFFER_BIT, gl.NEAREST);\n        }\n        for (let i = 0; i < count; i++) {\n            attachments[i] = gl[this.webGLVersion > 1 ? \"COLOR_ATTACHMENT\" + i : \"COLOR_ATTACHMENT\" + i + \"_WEBGL\"];\n        }\n        gl.drawBuffers(attachments);\n    }\n    for (let i = 0; i < count; i++) {\n        const texture = rtWrapper.textures[i];\n        if (texture.generateMipMaps && !disableGenerateMipMaps && !texture.isCube) {\n            this._bindTextureDirectly(gl.TEXTURE_2D, texture, true);\n            gl.generateMipmap(gl.TEXTURE_2D);\n            this._bindTextureDirectly(gl.TEXTURE_2D, null);\n        }\n    }\n    if (onBeforeUnbind) {\n        if (rtWrapper._MSAAFramebuffer) {\n            // Bind the correct framebuffer\n            this._bindUnboundFramebuffer(rtWrapper._framebuffer);\n        }\n        onBeforeUnbind();\n    }\n    this._bindUnboundFramebuffer(null);\n};\nThinEngine.prototype.createMultipleRenderTarget = function (size, options, initializeBuffers = true) {\n    let generateMipMaps = false;\n    let generateDepthBuffer = true;\n    let generateStencilBuffer = false;\n    let generateDepthTexture = false;\n    let depthTextureFormat = 15;\n    let textureCount = 1;\n    const defaultType = 0;\n    const defaultSamplingMode = 3;\n    const defaultUseSRGBBuffer = false;\n    let types = new Array();\n    let samplingModes = new Array();\n    let useSRGBBuffers = new Array();\n    const rtWrapper = this._createHardwareRenderTargetWrapper(true, false, size);\n    if (options !== undefined) {\n        generateMipMaps = options.generateMipMaps === undefined ? false : options.generateMipMaps;\n        generateDepthBuffer = options.generateDepthBuffer === undefined ? true : options.generateDepthBuffer;\n        generateStencilBuffer = options.generateStencilBuffer === undefined ? false : options.generateStencilBuffer;\n        generateDepthTexture = options.generateDepthTexture === undefined ? false : options.generateDepthTexture;\n        textureCount = options.textureCount || 1;\n        if (options.types) {\n            types = options.types;\n        }\n        if (options.samplingModes) {\n            samplingModes = options.samplingModes;\n        }\n        if (options.useSRGBBuffers) {\n            useSRGBBuffers = options.useSRGBBuffers;\n        }\n        if (this.webGLVersion > 1 &&\n            (options.depthTextureFormat === 13 ||\n                options.depthTextureFormat === 17 ||\n                options.depthTextureFormat === 16 ||\n                options.depthTextureFormat === 14 ||\n                options.depthTextureFormat === 18)) {\n            depthTextureFormat = options.depthTextureFormat;\n        }\n    }\n    const gl = this._gl;\n    // Create the framebuffer\n    const framebuffer = gl.createFramebuffer();\n    this._bindUnboundFramebuffer(framebuffer);\n    const width = size.width || size;\n    const height = size.height || size;\n    const textures = [];\n    const attachments = [];\n    const useStencilTexture = this.webGLVersion > 1 &&\n        generateDepthTexture &&\n        (options.depthTextureFormat === 13 ||\n            options.depthTextureFormat === 17 ||\n            options.depthTextureFormat === 18);\n    const depthStencilBuffer = this._setupFramebufferDepthAttachments(!useStencilTexture && generateStencilBuffer, !generateDepthTexture && generateDepthBuffer, width, height);\n    rtWrapper._framebuffer = framebuffer;\n    rtWrapper._depthStencilBuffer = depthStencilBuffer;\n    rtWrapper._generateDepthBuffer = !generateDepthTexture && generateDepthBuffer;\n    rtWrapper._generateStencilBuffer = !useStencilTexture && generateStencilBuffer;\n    rtWrapper._attachments = attachments;\n    for (let i = 0; i < textureCount; i++) {\n        let samplingMode = samplingModes[i] || defaultSamplingMode;\n        let type = types[i] || defaultType;\n        let useSRGBBuffer = useSRGBBuffers[i] || defaultUseSRGBBuffer;\n        if (type === 1 && !this._caps.textureFloatLinearFiltering) {\n            // if floating point linear (gl.FLOAT) then force to NEAREST_SAMPLINGMODE\n            samplingMode = 1;\n        }\n        else if (type === 2 && !this._caps.textureHalfFloatLinearFiltering) {\n            // if floating point linear (HALF_FLOAT) then force to NEAREST_SAMPLINGMODE\n            samplingMode = 1;\n        }\n        const filters = this._getSamplingParameters(samplingMode, generateMipMaps);\n        if (type === 1 && !this._caps.textureFloat) {\n            type = 0;\n            Logger.Warn(\"Float textures are not supported. Render target forced to TEXTURETYPE_UNSIGNED_BYTE type\");\n        }\n        useSRGBBuffer = useSRGBBuffer && this._caps.supportSRGBBuffers && (this.webGLVersion > 1 || this.isWebGPU);\n        const texture = new InternalTexture(this, InternalTextureSource.MultiRenderTarget);\n        const attachment = gl[this.webGLVersion > 1 ? \"COLOR_ATTACHMENT\" + i : \"COLOR_ATTACHMENT\" + i + \"_WEBGL\"];\n        textures.push(texture);\n        attachments.push(attachment);\n        gl.activeTexture(gl[\"TEXTURE\" + i]);\n        gl.bindTexture(gl.TEXTURE_2D, texture._hardwareTexture.underlyingResource);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filters.mag);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filters.min);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        const internalSizedFormat = this._getRGBABufferInternalSizedFormat(type, 5, useSRGBBuffer);\n        gl.texImage2D(gl.TEXTURE_2D, 0, internalSizedFormat, width, height, 0, gl.RGBA, this._getWebGLTextureType(type), null);\n        gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, attachment, gl.TEXTURE_2D, texture._hardwareTexture.underlyingResource, 0);\n        if (generateMipMaps) {\n            this._gl.generateMipmap(this._gl.TEXTURE_2D);\n        }\n        // Unbind\n        this._bindTextureDirectly(gl.TEXTURE_2D, null);\n        texture.baseWidth = width;\n        texture.baseHeight = height;\n        texture.width = width;\n        texture.height = height;\n        texture.isReady = true;\n        texture.samples = 1;\n        texture.generateMipMaps = generateMipMaps;\n        texture.samplingMode = samplingMode;\n        texture.type = type;\n        texture._useSRGBBuffer = useSRGBBuffer;\n        this._internalTexturesCache.push(texture);\n    }\n    if (generateDepthTexture && this._caps.depthTextureExtension) {\n        // Depth texture\n        const depthTexture = new InternalTexture(this, InternalTextureSource.Depth);\n        let depthTextureType = 5;\n        let glDepthTextureInternalFormat = gl.DEPTH_COMPONENT16;\n        let glDepthTextureFormat = gl.DEPTH_COMPONENT;\n        let glDepthTextureType = gl.UNSIGNED_SHORT;\n        let glDepthTextureAttachment = gl.DEPTH_ATTACHMENT;\n        if (this.webGLVersion < 2) {\n            glDepthTextureInternalFormat = gl.DEPTH_COMPONENT;\n        }\n        else {\n            if (depthTextureFormat === 14) {\n                depthTextureType = 1;\n                glDepthTextureType = gl.FLOAT;\n                glDepthTextureInternalFormat = gl.DEPTH_COMPONENT32F;\n            }\n            else if (depthTextureFormat === 18) {\n                depthTextureType = 0;\n                glDepthTextureType = gl.FLOAT_32_UNSIGNED_INT_24_8_REV;\n                glDepthTextureInternalFormat = gl.DEPTH32F_STENCIL8;\n                glDepthTextureFormat = gl.DEPTH_STENCIL;\n                glDepthTextureAttachment = gl.DEPTH_STENCIL_ATTACHMENT;\n            }\n            else if (depthTextureFormat === 16) {\n                depthTextureType = 0;\n                glDepthTextureType = gl.UNSIGNED_INT;\n                glDepthTextureInternalFormat = gl.DEPTH_COMPONENT24;\n                glDepthTextureAttachment = gl.DEPTH_ATTACHMENT;\n            }\n            else if (depthTextureFormat === 13 || depthTextureFormat === 17) {\n                depthTextureType = 12;\n                glDepthTextureType = gl.UNSIGNED_INT_24_8;\n                glDepthTextureInternalFormat = gl.DEPTH24_STENCIL8;\n                glDepthTextureFormat = gl.DEPTH_STENCIL;\n                glDepthTextureAttachment = gl.DEPTH_STENCIL_ATTACHMENT;\n            }\n        }\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, depthTexture._hardwareTexture.underlyingResource);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texImage2D(gl.TEXTURE_2D, 0, glDepthTextureInternalFormat, width, height, 0, glDepthTextureFormat, glDepthTextureType, null);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, glDepthTextureAttachment, gl.TEXTURE_2D, depthTexture._hardwareTexture.underlyingResource, 0);\n        depthTexture.baseWidth = width;\n        depthTexture.baseHeight = height;\n        depthTexture.width = width;\n        depthTexture.height = height;\n        depthTexture.isReady = true;\n        depthTexture.samples = 1;\n        depthTexture.generateMipMaps = generateMipMaps;\n        depthTexture.samplingMode = 1;\n        depthTexture.format = depthTextureFormat;\n        depthTexture.type = depthTextureType;\n        textures.push(depthTexture);\n        this._internalTexturesCache.push(depthTexture);\n    }\n    rtWrapper.setTextures(textures);\n    if (initializeBuffers) {\n        gl.drawBuffers(attachments);\n    }\n    this._bindUnboundFramebuffer(null);\n    this.resetTextureCache();\n    return rtWrapper;\n};\nThinEngine.prototype.updateMultipleRenderTargetTextureSampleCount = function (rtWrapper, samples, initializeBuffers = true) {\n    if (this.webGLVersion < 2 || !rtWrapper || !rtWrapper.texture) {\n        return 1;\n    }\n    if (rtWrapper.samples === samples) {\n        return samples;\n    }\n    const count = rtWrapper._attachments.length;\n    if (count === 0) {\n        return 1;\n    }\n    const gl = this._gl;\n    samples = Math.min(samples, this.getCaps().maxMSAASamples);\n    // Dispose previous render buffers\n    const useDepthStencil = !!rtWrapper._depthStencilBuffer;\n    if (useDepthStencil) {\n        gl.deleteRenderbuffer(rtWrapper._depthStencilBuffer);\n        rtWrapper._depthStencilBuffer = null;\n    }\n    if (rtWrapper._MSAAFramebuffer) {\n        gl.deleteFramebuffer(rtWrapper._MSAAFramebuffer);\n        rtWrapper._MSAAFramebuffer = null;\n    }\n    if (samples > 1 && typeof gl.renderbufferStorageMultisample === \"function\") {\n        const framebuffer = gl.createFramebuffer();\n        if (!framebuffer) {\n            throw new Error(\"Unable to create multi sampled framebuffer\");\n        }\n        rtWrapper._MSAAFramebuffer = framebuffer;\n        this._bindUnboundFramebuffer(framebuffer);\n        const attachments = [];\n        for (let i = 0; i < count; i++) {\n            const texture = rtWrapper.textures[i];\n            const hardwareTexture = texture._hardwareTexture;\n            const attachment = gl[this.webGLVersion > 1 ? \"COLOR_ATTACHMENT\" + i : \"COLOR_ATTACHMENT\" + i + \"_WEBGL\"];\n            const colorRenderbuffer = hardwareTexture._MSAARenderBuffer\n                ? this._updateRenderBuffer(hardwareTexture._MSAARenderBuffer, texture.width, texture.height, samples, -1 /* not used */, this._getRGBAMultiSampleBufferFormat(texture.type), attachment)\n                : this._createRenderBuffer(texture.width, texture.height, samples, -1 /* not used */, this._getRGBAMultiSampleBufferFormat(texture.type), attachment);\n            if (!colorRenderbuffer) {\n                throw new Error(\"Unable to create multi sampled framebuffer\");\n            }\n            hardwareTexture._MSAARenderBuffer = colorRenderbuffer;\n            texture.samples = samples;\n            attachments.push(attachment);\n        }\n        if (initializeBuffers) {\n            gl.drawBuffers(attachments);\n        }\n    }\n    else {\n        this._bindUnboundFramebuffer(rtWrapper._framebuffer);\n    }\n    if (useDepthStencil) {\n        rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(rtWrapper._generateStencilBuffer, rtWrapper._generateDepthBuffer, rtWrapper.texture.width, rtWrapper.texture.height, samples);\n    }\n    this._bindUnboundFramebuffer(null);\n    return samples;\n};\n//# sourceMappingURL=engine.multiRender.js.map","import { Camera } from \"../../Cameras/camera.js\";\nimport { Engine } from \"../../Engines/engine.js\";\nimport { Scene } from \"../../scene.js\";\nimport { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture.js\";\nimport { Matrix, TmpVectors } from \"../../Maths/math.vector.js\";\nimport { UniformBuffer } from \"../../Materials/uniformBuffer.js\";\nimport { MultiviewRenderTarget } from \"../../Materials/Textures/MultiviewRenderTarget.js\";\nimport { Frustum } from \"../../Maths/math.frustum.js\";\nEngine.prototype.createMultiviewRenderTargetTexture = function (width, height) {\n    const gl = this._gl;\n    if (!this.getCaps().multiview) {\n        throw \"Multiview is not supported\";\n    }\n    const rtWrapper = this._createHardwareRenderTargetWrapper(false, false, { width, height });\n    rtWrapper._framebuffer = gl.createFramebuffer();\n    const internalTexture = new InternalTexture(this, InternalTextureSource.Unknown, true);\n    internalTexture.width = width;\n    internalTexture.height = height;\n    internalTexture.isMultiview = true;\n    rtWrapper._colorTextureArray = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D_ARRAY, rtWrapper._colorTextureArray);\n    gl.texStorage3D(gl.TEXTURE_2D_ARRAY, 1, gl.RGBA8, width, height, 2);\n    rtWrapper._depthStencilTextureArray = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D_ARRAY, rtWrapper._depthStencilTextureArray);\n    gl.texStorage3D(gl.TEXTURE_2D_ARRAY, 1, gl.DEPTH24_STENCIL8, width, height, 2);\n    internalTexture.isReady = true;\n    rtWrapper.setTextures(internalTexture);\n    rtWrapper._depthStencilTexture = internalTexture;\n    return rtWrapper;\n};\nEngine.prototype.bindMultiviewFramebuffer = function (_multiviewTexture) {\n    const multiviewTexture = _multiviewTexture;\n    const gl = this._gl;\n    const ext = this.getCaps().oculusMultiview || this.getCaps().multiview;\n    this.bindFramebuffer(multiviewTexture, undefined, undefined, undefined, true);\n    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, multiviewTexture._framebuffer);\n    if (multiviewTexture._colorTextureArray && multiviewTexture._depthStencilTextureArray) {\n        if (this.getCaps().oculusMultiview) {\n            ext.framebufferTextureMultisampleMultiviewOVR(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, multiviewTexture._colorTextureArray, 0, multiviewTexture.samples, 0, 2);\n            ext.framebufferTextureMultisampleMultiviewOVR(gl.DRAW_FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, multiviewTexture._depthStencilTextureArray, 0, multiviewTexture.samples, 0, 2);\n        }\n        else {\n            ext.framebufferTextureMultiviewOVR(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, multiviewTexture._colorTextureArray, 0, 0, 2);\n            ext.framebufferTextureMultiviewOVR(gl.DRAW_FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, multiviewTexture._depthStencilTextureArray, 0, 0, 2);\n        }\n    }\n    else {\n        throw \"Invalid multiview frame buffer\";\n    }\n};\nCamera.prototype._useMultiviewToSingleView = false;\nCamera.prototype._multiviewTexture = null;\nCamera.prototype._resizeOrCreateMultiviewTexture = function (width, height) {\n    if (!this._multiviewTexture) {\n        this._multiviewTexture = new MultiviewRenderTarget(this.getScene(), { width: width, height: height });\n    }\n    else if (this._multiviewTexture.getRenderWidth() != width || this._multiviewTexture.getRenderHeight() != height) {\n        this._multiviewTexture.dispose();\n        this._multiviewTexture = new MultiviewRenderTarget(this.getScene(), { width: width, height: height });\n    }\n};\nfunction createMultiviewUbo(engine, name) {\n    const ubo = new UniformBuffer(engine, undefined, true, name);\n    ubo.addUniform(\"viewProjection\", 16);\n    ubo.addUniform(\"viewProjectionR\", 16);\n    ubo.addUniform(\"view\", 16);\n    ubo.addUniform(\"projection\", 16);\n    ubo.addUniform(\"vEyePosition\", 4);\n    return ubo;\n}\nconst currentCreateSceneUniformBuffer = Scene.prototype.createSceneUniformBuffer;\nScene.prototype._transformMatrixR = Matrix.Zero();\nScene.prototype._multiviewSceneUbo = null;\nScene.prototype._createMultiviewUbo = function () {\n    this._multiviewSceneUbo = createMultiviewUbo(this.getEngine(), \"scene_multiview\");\n};\nScene.prototype.createSceneUniformBuffer = function (name) {\n    if (this._multiviewSceneUbo) {\n        return createMultiviewUbo(this.getEngine(), name);\n    }\n    return currentCreateSceneUniformBuffer.bind(this)(name);\n};\nScene.prototype._updateMultiviewUbo = function (viewR, projectionR) {\n    if (viewR && projectionR) {\n        viewR.multiplyToRef(projectionR, this._transformMatrixR);\n    }\n    if (viewR && projectionR) {\n        viewR.multiplyToRef(projectionR, TmpVectors.Matrix[0]);\n        Frustum.GetRightPlaneToRef(TmpVectors.Matrix[0], this._frustumPlanes[3]); // Replace right plane by second camera right plane\n    }\n    if (this._multiviewSceneUbo) {\n        this._multiviewSceneUbo.updateMatrix(\"viewProjection\", this.getTransformMatrix());\n        this._multiviewSceneUbo.updateMatrix(\"viewProjectionR\", this._transformMatrixR);\n        this._multiviewSceneUbo.updateMatrix(\"view\", this._viewMatrix);\n        this._multiviewSceneUbo.updateMatrix(\"projection\", this._projectionMatrix);\n    }\n};\nScene.prototype._renderMultiviewToSingleView = function (camera) {\n    // Multiview is only able to be displayed directly for API's such as webXR\n    // This displays a multiview image by rendering to the multiview image and then\n    // copying the result into the sub cameras instead of rendering them and proceeding as normal from there\n    // Render to a multiview texture\n    camera._resizeOrCreateMultiviewTexture(camera._rigPostProcess && camera._rigPostProcess && camera._rigPostProcess.width > 0 ? camera._rigPostProcess.width : this.getEngine().getRenderWidth(true), camera._rigPostProcess && camera._rigPostProcess && camera._rigPostProcess.height > 0 ? camera._rigPostProcess.height : this.getEngine().getRenderHeight(true));\n    if (!this._multiviewSceneUbo) {\n        this._createMultiviewUbo();\n    }\n    camera.outputRenderTarget = camera._multiviewTexture;\n    this._renderForCamera(camera);\n    camera.outputRenderTarget = null;\n    // Consume the multiview texture through a shader for each eye\n    for (let index = 0; index < camera._rigCameras.length; index++) {\n        const engine = this.getEngine();\n        this._activeCamera = camera._rigCameras[index];\n        engine.setViewport(this._activeCamera.viewport);\n        if (this.postProcessManager) {\n            this.postProcessManager._prepareFrame();\n            this.postProcessManager._finalizeFrame(this._activeCamera.isIntermediate);\n        }\n    }\n};\n//# sourceMappingURL=engine.multiview.js.map","import { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { Tools } from \"../../Misc/tools.js\";\n\nimport { ThinEngine } from \"../thinEngine.js\";\nThinEngine.prototype.updateRawTexture = function (texture, data, format, invertY, compression = null, type = 0, useSRGBBuffer = false) {\n    if (!texture) {\n        return;\n    }\n    // Babylon's internalSizedFomat but gl's texImage2D internalFormat\n    const internalSizedFomat = this._getRGBABufferInternalSizedFormat(type, format, useSRGBBuffer);\n    // Babylon's internalFormat but gl's texImage2D format\n    const internalFormat = this._getInternalFormat(format);\n    const textureType = this._getWebGLTextureType(type);\n    this._bindTextureDirectly(this._gl.TEXTURE_2D, texture, true);\n    this._unpackFlipY(invertY === undefined ? true : invertY ? true : false);\n    if (!this._doNotHandleContextLost) {\n        texture._bufferView = data;\n        texture.format = format;\n        texture.type = type;\n        texture.invertY = invertY;\n        texture._compression = compression;\n    }\n    if (texture.width % 4 !== 0) {\n        this._gl.pixelStorei(this._gl.UNPACK_ALIGNMENT, 1);\n    }\n    if (compression && data) {\n        this._gl.compressedTexImage2D(this._gl.TEXTURE_2D, 0, this.getCaps().s3tc[compression], texture.width, texture.height, 0, data);\n    }\n    else {\n        this._gl.texImage2D(this._gl.TEXTURE_2D, 0, internalSizedFomat, texture.width, texture.height, 0, internalFormat, textureType, data);\n    }\n    if (texture.generateMipMaps) {\n        this._gl.generateMipmap(this._gl.TEXTURE_2D);\n    }\n    this._bindTextureDirectly(this._gl.TEXTURE_2D, null);\n    //  this.resetTextureCache();\n    texture.isReady = true;\n};\nThinEngine.prototype.createRawTexture = function (data, width, height, format, generateMipMaps, invertY, samplingMode, compression = null, type = 0, \n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ncreationFlags = 0, useSRGBBuffer = false) {\n    const texture = new InternalTexture(this, InternalTextureSource.Raw);\n    texture.baseWidth = width;\n    texture.baseHeight = height;\n    texture.width = width;\n    texture.height = height;\n    texture.format = format;\n    texture.generateMipMaps = generateMipMaps;\n    texture.samplingMode = samplingMode;\n    texture.invertY = invertY;\n    texture._compression = compression;\n    texture.type = type;\n    texture._useSRGBBuffer = this._getUseSRGBBuffer(useSRGBBuffer, !generateMipMaps);\n    if (!this._doNotHandleContextLost) {\n        texture._bufferView = data;\n    }\n    this.updateRawTexture(texture, data, format, invertY, compression, type, texture._useSRGBBuffer);\n    this._bindTextureDirectly(this._gl.TEXTURE_2D, texture, true);\n    // Filters\n    const filters = this._getSamplingParameters(samplingMode, generateMipMaps);\n    this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MAG_FILTER, filters.mag);\n    this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MIN_FILTER, filters.min);\n    if (generateMipMaps) {\n        this._gl.generateMipmap(this._gl.TEXTURE_2D);\n    }\n    this._bindTextureDirectly(this._gl.TEXTURE_2D, null);\n    this._internalTexturesCache.push(texture);\n    return texture;\n};\nThinEngine.prototype.createRawCubeTexture = function (data, size, format, type, generateMipMaps, invertY, samplingMode, compression = null) {\n    const gl = this._gl;\n    const texture = new InternalTexture(this, InternalTextureSource.CubeRaw);\n    texture.isCube = true;\n    texture.format = format;\n    texture.type = type;\n    if (!this._doNotHandleContextLost) {\n        texture._bufferViewArray = data;\n    }\n    const textureType = this._getWebGLTextureType(type);\n    let internalFormat = this._getInternalFormat(format);\n    if (internalFormat === gl.RGB) {\n        internalFormat = gl.RGBA;\n    }\n    // Mipmap generation needs a sized internal format that is both color-renderable and texture-filterable\n    if (textureType === gl.FLOAT && !this._caps.textureFloatLinearFiltering) {\n        generateMipMaps = false;\n        samplingMode = 1;\n        Logger.Warn(\"Float texture filtering is not supported. Mipmap generation and sampling mode are forced to false and TEXTURE_NEAREST_SAMPLINGMODE, respectively.\");\n    }\n    else if (textureType === this._gl.HALF_FLOAT_OES && !this._caps.textureHalfFloatLinearFiltering) {\n        generateMipMaps = false;\n        samplingMode = 1;\n        Logger.Warn(\"Half float texture filtering is not supported. Mipmap generation and sampling mode are forced to false and TEXTURE_NEAREST_SAMPLINGMODE, respectively.\");\n    }\n    else if (textureType === gl.FLOAT && !this._caps.textureFloatRender) {\n        generateMipMaps = false;\n        Logger.Warn(\"Render to float textures is not supported. Mipmap generation forced to false.\");\n    }\n    else if (textureType === gl.HALF_FLOAT && !this._caps.colorBufferFloat) {\n        generateMipMaps = false;\n        Logger.Warn(\"Render to half float textures is not supported. Mipmap generation forced to false.\");\n    }\n    const width = size;\n    const height = width;\n    texture.width = width;\n    texture.height = height;\n    texture.invertY = invertY;\n    texture._compression = compression;\n    // Double check on POT to generate Mips.\n    const isPot = !this.needPOTTextures || (Tools.IsExponentOfTwo(texture.width) && Tools.IsExponentOfTwo(texture.height));\n    if (!isPot) {\n        generateMipMaps = false;\n    }\n    // Upload data if needed. The texture won't be ready until then.\n    if (data) {\n        this.updateRawCubeTexture(texture, data, format, type, invertY, compression);\n    }\n    else {\n        const internalSizedFomat = this._getRGBABufferInternalSizedFormat(type);\n        const level = 0;\n        this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\n        for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n            if (compression) {\n                gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, level, this.getCaps().s3tc[compression], texture.width, texture.height, 0, undefined);\n            }\n            else {\n                gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, level, internalSizedFomat, texture.width, texture.height, 0, internalFormat, textureType, null);\n            }\n        }\n        this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, null);\n    }\n    this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, texture, true);\n    // Filters\n    if (data && generateMipMaps) {\n        this._gl.generateMipmap(this._gl.TEXTURE_CUBE_MAP);\n    }\n    const filters = this._getSamplingParameters(samplingMode, generateMipMaps);\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, filters.mag);\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, filters.min);\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\n    texture.generateMipMaps = generateMipMaps;\n    texture.samplingMode = samplingMode;\n    texture.isReady = true;\n    return texture;\n};\nThinEngine.prototype.updateRawCubeTexture = function (texture, data, format, type, invertY, compression = null, level = 0) {\n    texture._bufferViewArray = data;\n    texture.format = format;\n    texture.type = type;\n    texture.invertY = invertY;\n    texture._compression = compression;\n    const gl = this._gl;\n    const textureType = this._getWebGLTextureType(type);\n    let internalFormat = this._getInternalFormat(format);\n    const internalSizedFomat = this._getRGBABufferInternalSizedFormat(type);\n    let needConversion = false;\n    if (internalFormat === gl.RGB) {\n        internalFormat = gl.RGBA;\n        needConversion = true;\n    }\n    this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\n    this._unpackFlipY(invertY === undefined ? true : invertY ? true : false);\n    if (texture.width % 4 !== 0) {\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\n    }\n    // Data are known to be in +X +Y +Z -X -Y -Z\n    for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n        let faceData = data[faceIndex];\n        if (compression) {\n            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, level, this.getCaps().s3tc[compression], texture.width, texture.height, 0, faceData);\n        }\n        else {\n            if (needConversion) {\n                faceData = _convertRGBtoRGBATextureData(faceData, texture.width, texture.height, type);\n            }\n            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, level, internalSizedFomat, texture.width, texture.height, 0, internalFormat, textureType, faceData);\n        }\n    }\n    const isPot = !this.needPOTTextures || (Tools.IsExponentOfTwo(texture.width) && Tools.IsExponentOfTwo(texture.height));\n    if (isPot && texture.generateMipMaps && level === 0) {\n        this._gl.generateMipmap(this._gl.TEXTURE_CUBE_MAP);\n    }\n    this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, null);\n    // this.resetTextureCache();\n    texture.isReady = true;\n};\nThinEngine.prototype.createRawCubeTextureFromUrl = function (url, scene, size, format, type, noMipmap, callback, mipmapGenerator, onLoad = null, onError = null, samplingMode = 3, invertY = false) {\n    const gl = this._gl;\n    const texture = this.createRawCubeTexture(null, size, format, type, !noMipmap, invertY, samplingMode, null);\n    scene === null || scene === void 0 ? void 0 : scene.addPendingData(texture);\n    texture.url = url;\n    this._internalTexturesCache.push(texture);\n    const onerror = (request, exception) => {\n        scene === null || scene === void 0 ? void 0 : scene.removePendingData(texture);\n        if (onError && request) {\n            onError(request.status + \" \" + request.statusText, exception);\n        }\n    };\n    const internalCallback = (data) => {\n        const width = texture.width;\n        const faceDataArrays = callback(data);\n        if (!faceDataArrays) {\n            return;\n        }\n        if (mipmapGenerator) {\n            const textureType = this._getWebGLTextureType(type);\n            let internalFormat = this._getInternalFormat(format);\n            const internalSizedFomat = this._getRGBABufferInternalSizedFormat(type);\n            let needConversion = false;\n            if (internalFormat === gl.RGB) {\n                internalFormat = gl.RGBA;\n                needConversion = true;\n            }\n            this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\n            this._unpackFlipY(false);\n            const mipData = mipmapGenerator(faceDataArrays);\n            for (let level = 0; level < mipData.length; level++) {\n                const mipSize = width >> level;\n                for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n                    let mipFaceData = mipData[level][faceIndex];\n                    if (needConversion) {\n                        mipFaceData = _convertRGBtoRGBATextureData(mipFaceData, mipSize, mipSize, type);\n                    }\n                    gl.texImage2D(faceIndex, level, internalSizedFomat, mipSize, mipSize, 0, internalFormat, textureType, mipFaceData);\n                }\n            }\n            this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\n        }\n        else {\n            this.updateRawCubeTexture(texture, faceDataArrays, format, type, invertY);\n        }\n        texture.isReady = true;\n        // this.resetTextureCache();\n        scene === null || scene === void 0 ? void 0 : scene.removePendingData(texture);\n        texture.onLoadedObservable.notifyObservers(texture);\n        texture.onLoadedObservable.clear();\n        if (onLoad) {\n            onLoad();\n        }\n    };\n    this._loadFile(url, (data) => {\n        internalCallback(data);\n    }, undefined, scene === null || scene === void 0 ? void 0 : scene.offlineProvider, true, onerror);\n    return texture;\n};\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _convertRGBtoRGBATextureData(rgbData, width, height, textureType) {\n    // Create new RGBA data container.\n    let rgbaData;\n    let val1 = 1;\n    if (textureType === 1) {\n        rgbaData = new Float32Array(width * height * 4);\n    }\n    else if (textureType === 2) {\n        rgbaData = new Uint16Array(width * height * 4);\n        val1 = 15360; // 15360 is the encoding of 1 in half float\n    }\n    else if (textureType === 7) {\n        rgbaData = new Uint32Array(width * height * 4);\n    }\n    else {\n        rgbaData = new Uint8Array(width * height * 4);\n    }\n    // Convert each pixel.\n    for (let x = 0; x < width; x++) {\n        for (let y = 0; y < height; y++) {\n            const index = (y * width + x) * 3;\n            const newIndex = (y * width + x) * 4;\n            // Map Old Value to new value.\n            rgbaData[newIndex + 0] = rgbData[index + 0];\n            rgbaData[newIndex + 1] = rgbData[index + 1];\n            rgbaData[newIndex + 2] = rgbData[index + 2];\n            // Add fully opaque alpha channel.\n            rgbaData[newIndex + 3] = val1;\n        }\n    }\n    return rgbaData;\n}\n/**\n * Create a function for createRawTexture3D/createRawTexture2DArray\n * @param is3D true for TEXTURE_3D and false for TEXTURE_2D_ARRAY\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _makeCreateRawTextureFunction(is3D) {\n    return function (data, width, height, depth, format, generateMipMaps, invertY, samplingMode, compression = null, textureType = 0) {\n        const target = is3D ? this._gl.TEXTURE_3D : this._gl.TEXTURE_2D_ARRAY;\n        const source = is3D ? InternalTextureSource.Raw3D : InternalTextureSource.Raw2DArray;\n        const texture = new InternalTexture(this, source);\n        texture.baseWidth = width;\n        texture.baseHeight = height;\n        texture.baseDepth = depth;\n        texture.width = width;\n        texture.height = height;\n        texture.depth = depth;\n        texture.format = format;\n        texture.type = textureType;\n        texture.generateMipMaps = generateMipMaps;\n        texture.samplingMode = samplingMode;\n        if (is3D) {\n            texture.is3D = true;\n        }\n        else {\n            texture.is2DArray = true;\n        }\n        if (!this._doNotHandleContextLost) {\n            texture._bufferView = data;\n        }\n        if (is3D) {\n            this.updateRawTexture3D(texture, data, format, invertY, compression, textureType);\n        }\n        else {\n            this.updateRawTexture2DArray(texture, data, format, invertY, compression, textureType);\n        }\n        this._bindTextureDirectly(target, texture, true);\n        // Filters\n        const filters = this._getSamplingParameters(samplingMode, generateMipMaps);\n        this._gl.texParameteri(target, this._gl.TEXTURE_MAG_FILTER, filters.mag);\n        this._gl.texParameteri(target, this._gl.TEXTURE_MIN_FILTER, filters.min);\n        if (generateMipMaps) {\n            this._gl.generateMipmap(target);\n        }\n        this._bindTextureDirectly(target, null);\n        this._internalTexturesCache.push(texture);\n        return texture;\n    };\n}\nThinEngine.prototype.createRawTexture2DArray = _makeCreateRawTextureFunction(false);\nThinEngine.prototype.createRawTexture3D = _makeCreateRawTextureFunction(true);\n/**\n * Create a function for updateRawTexture3D/updateRawTexture2DArray\n * @param is3D true for TEXTURE_3D and false for TEXTURE_2D_ARRAY\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _makeUpdateRawTextureFunction(is3D) {\n    return function (texture, data, format, invertY, compression = null, textureType = 0) {\n        const target = is3D ? this._gl.TEXTURE_3D : this._gl.TEXTURE_2D_ARRAY;\n        const internalType = this._getWebGLTextureType(textureType);\n        const internalFormat = this._getInternalFormat(format);\n        const internalSizedFomat = this._getRGBABufferInternalSizedFormat(textureType, format);\n        this._bindTextureDirectly(target, texture, true);\n        this._unpackFlipY(invertY === undefined ? true : invertY ? true : false);\n        if (!this._doNotHandleContextLost) {\n            texture._bufferView = data;\n            texture.format = format;\n            texture.invertY = invertY;\n            texture._compression = compression;\n        }\n        if (texture.width % 4 !== 0) {\n            this._gl.pixelStorei(this._gl.UNPACK_ALIGNMENT, 1);\n        }\n        if (compression && data) {\n            this._gl.compressedTexImage3D(target, 0, this.getCaps().s3tc[compression], texture.width, texture.height, texture.depth, 0, data);\n        }\n        else {\n            this._gl.texImage3D(target, 0, internalSizedFomat, texture.width, texture.height, texture.depth, 0, internalFormat, internalType, data);\n        }\n        if (texture.generateMipMaps) {\n            this._gl.generateMipmap(target);\n        }\n        this._bindTextureDirectly(target, null);\n        // this.resetTextureCache();\n        texture.isReady = true;\n    };\n}\nThinEngine.prototype.updateRawTexture2DArray = _makeUpdateRawTextureFunction(false);\nThinEngine.prototype.updateRawTexture3D = _makeUpdateRawTextureFunction(true);\n//# sourceMappingURL=engine.rawTexture.js.map","import { ThinEngine } from \"../../Engines/thinEngine.js\";\n\n/**\n * Allocate a typed array depending on a texture type. Optionally can copy existing data in the buffer.\n * @param type type of the texture\n * @param sizeOrDstBuffer size of the array OR an existing buffer that will be used as the destination of the copy (if copyBuffer is provided)\n * @param sizeInBytes true if the size of the array is given in bytes, false if it is the number of elements of the array\n * @param copyBuffer if provided, buffer to copy into the destination buffer (either a newly allocated buffer if sizeOrDstBuffer is a number or use sizeOrDstBuffer as the destination buffer otherwise)\n * @returns the allocated buffer or sizeOrDstBuffer if the latter is an ArrayBuffer\n */\nexport function allocateAndCopyTypedBuffer(type, sizeOrDstBuffer, sizeInBytes = false, copyBuffer) {\n    switch (type) {\n        case 3: {\n            const buffer = sizeOrDstBuffer instanceof ArrayBuffer ? new Int8Array(sizeOrDstBuffer) : new Int8Array(sizeOrDstBuffer);\n            if (copyBuffer) {\n                buffer.set(new Int8Array(copyBuffer));\n            }\n            return buffer;\n        }\n        case 0: {\n            const buffer = sizeOrDstBuffer instanceof ArrayBuffer ? new Uint8Array(sizeOrDstBuffer) : new Uint8Array(sizeOrDstBuffer);\n            if (copyBuffer) {\n                buffer.set(new Uint8Array(copyBuffer));\n            }\n            return buffer;\n        }\n        case 4: {\n            const buffer = sizeOrDstBuffer instanceof ArrayBuffer ? new Int16Array(sizeOrDstBuffer) : new Int16Array(sizeInBytes ? sizeOrDstBuffer / 2 : sizeOrDstBuffer);\n            if (copyBuffer) {\n                buffer.set(new Int16Array(copyBuffer));\n            }\n            return buffer;\n        }\n        case 5:\n        case 8:\n        case 9:\n        case 10:\n        case 2: {\n            const buffer = sizeOrDstBuffer instanceof ArrayBuffer ? new Uint16Array(sizeOrDstBuffer) : new Uint16Array(sizeInBytes ? sizeOrDstBuffer / 2 : sizeOrDstBuffer);\n            if (copyBuffer) {\n                buffer.set(new Uint16Array(copyBuffer));\n            }\n            return buffer;\n        }\n        case 6: {\n            const buffer = sizeOrDstBuffer instanceof ArrayBuffer ? new Int32Array(sizeOrDstBuffer) : new Int32Array(sizeInBytes ? sizeOrDstBuffer / 4 : sizeOrDstBuffer);\n            if (copyBuffer) {\n                buffer.set(new Int32Array(copyBuffer));\n            }\n            return buffer;\n        }\n        case 7:\n        case 11:\n        case 12:\n        case 13:\n        case 14:\n        case 15: {\n            const buffer = sizeOrDstBuffer instanceof ArrayBuffer ? new Uint32Array(sizeOrDstBuffer) : new Uint32Array(sizeInBytes ? sizeOrDstBuffer / 4 : sizeOrDstBuffer);\n            if (copyBuffer) {\n                buffer.set(new Uint32Array(copyBuffer));\n            }\n            return buffer;\n        }\n        case 1: {\n            const buffer = sizeOrDstBuffer instanceof ArrayBuffer ? new Float32Array(sizeOrDstBuffer) : new Float32Array(sizeInBytes ? sizeOrDstBuffer / 4 : sizeOrDstBuffer);\n            if (copyBuffer) {\n                buffer.set(new Float32Array(copyBuffer));\n            }\n            return buffer;\n        }\n    }\n    const buffer = sizeOrDstBuffer instanceof ArrayBuffer ? new Uint8Array(sizeOrDstBuffer) : new Uint8Array(sizeOrDstBuffer);\n    if (copyBuffer) {\n        buffer.set(new Uint8Array(copyBuffer));\n    }\n    return buffer;\n}\nThinEngine.prototype._readTexturePixelsSync = function (texture, width, height, faceIndex = -1, level = 0, buffer = null, flushRenderer = true, noDataConversion = false, x = 0, y = 0) {\n    var _a, _b;\n    const gl = this._gl;\n    if (!gl) {\n        throw new Error(\"Engine does not have gl rendering context.\");\n    }\n    if (!this._dummyFramebuffer) {\n        const dummy = gl.createFramebuffer();\n        if (!dummy) {\n            throw new Error(\"Unable to create dummy framebuffer\");\n        }\n        this._dummyFramebuffer = dummy;\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._dummyFramebuffer);\n    if (faceIndex > -1) {\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, (_a = texture._hardwareTexture) === null || _a === void 0 ? void 0 : _a.underlyingResource, level);\n    }\n    else {\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, (_b = texture._hardwareTexture) === null || _b === void 0 ? void 0 : _b.underlyingResource, level);\n    }\n    let readType = texture.type !== undefined ? this._getWebGLTextureType(texture.type) : gl.UNSIGNED_BYTE;\n    if (!noDataConversion) {\n        switch (readType) {\n            case gl.UNSIGNED_BYTE:\n                if (!buffer) {\n                    buffer = new Uint8Array(4 * width * height);\n                }\n                readType = gl.UNSIGNED_BYTE;\n                break;\n            default:\n                if (!buffer) {\n                    buffer = new Float32Array(4 * width * height);\n                }\n                readType = gl.FLOAT;\n                break;\n        }\n    }\n    else if (!buffer) {\n        buffer = allocateAndCopyTypedBuffer(texture.type, 4 * width * height);\n    }\n    if (flushRenderer) {\n        this.flushFramebuffer();\n    }\n    gl.readPixels(x, y, width, height, gl.RGBA, readType, buffer);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._currentFramebuffer);\n    return buffer;\n};\nThinEngine.prototype._readTexturePixels = function (texture, width, height, faceIndex = -1, level = 0, buffer = null, flushRenderer = true, noDataConversion = false, x = 0, y = 0) {\n    return Promise.resolve(this._readTexturePixelsSync(texture, width, height, faceIndex, level, buffer, flushRenderer, noDataConversion, x, y));\n};\n//# sourceMappingURL=engine.readTexture.js.map","import { RenderTargetWrapper } from \"../renderTargetWrapper.js\";\n/** @internal */\nexport class WebGLRenderTargetWrapper extends RenderTargetWrapper {\n    constructor(isMulti, isCube, size, engine, context) {\n        super(isMulti, isCube, size, engine);\n        this._framebuffer = null;\n        this._depthStencilBuffer = null;\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        this._MSAAFramebuffer = null;\n        // Multiview\n        this._colorTextureArray = null;\n        this._depthStencilTextureArray = null;\n        this._context = context;\n    }\n    _cloneRenderTargetWrapper() {\n        let rtw = null;\n        if (this._colorTextureArray && this._depthStencilTextureArray) {\n            rtw = this._engine.createMultiviewRenderTargetTexture(this.width, this.height);\n            rtw.texture.isReady = true;\n        }\n        else {\n            rtw = super._cloneRenderTargetWrapper();\n        }\n        return rtw;\n    }\n    _swapRenderTargetWrapper(target) {\n        super._swapRenderTargetWrapper(target);\n        target._framebuffer = this._framebuffer;\n        target._depthStencilBuffer = this._depthStencilBuffer;\n        target._MSAAFramebuffer = this._MSAAFramebuffer;\n        target._colorTextureArray = this._colorTextureArray;\n        target._depthStencilTextureArray = this._depthStencilTextureArray;\n        this._framebuffer = this._depthStencilBuffer = this._MSAAFramebuffer = this._colorTextureArray = this._depthStencilTextureArray = null;\n    }\n    /**\n     * Shares the depth buffer of this render target with another render target.\n     * @internal\n     * @param renderTarget Destination renderTarget\n     */\n    _shareDepth(renderTarget) {\n        super._shareDepth(renderTarget);\n        const gl = this._context;\n        const depthbuffer = this._depthStencilBuffer;\n        const framebuffer = renderTarget._MSAAFramebuffer || renderTarget._framebuffer;\n        if (renderTarget._depthStencilBuffer) {\n            gl.deleteRenderbuffer(renderTarget._depthStencilBuffer);\n        }\n        renderTarget._depthStencilBuffer = this._depthStencilBuffer;\n        this._engine._bindUnboundFramebuffer(framebuffer);\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthbuffer);\n        this._engine._bindUnboundFramebuffer(null);\n    }\n    /**\n     * Binds a texture to this render target on a specific attachment\n     * @param texture The texture to bind to the framebuffer\n     * @param attachmentIndex Index of the attachment\n     * @param faceIndex The face of the texture to render to in case of cube texture\n     * @param lodLevel defines the lod level to bind to the frame buffer\n     */\n    _bindTextureRenderTarget(texture, attachmentIndex = 0, faceIndex = -1, lodLevel = 0) {\n        if (!texture._hardwareTexture) {\n            return;\n        }\n        const gl = this._context;\n        const framebuffer = this._framebuffer;\n        const currentFB = this._engine._currentFramebuffer;\n        this._engine._bindUnboundFramebuffer(framebuffer);\n        const attachment = gl[this._engine.webGLVersion > 1 ? \"COLOR_ATTACHMENT\" + attachmentIndex : \"COLOR_ATTACHMENT\" + attachmentIndex + \"_WEBGL\"];\n        const target = faceIndex !== -1 ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex : gl.TEXTURE_2D;\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, target, texture._hardwareTexture.underlyingResource, lodLevel);\n        this._engine._bindUnboundFramebuffer(currentFB);\n    }\n    /**\n     * Set a texture in the textures array\n     * @param texture the texture to set\n     * @param index the index in the textures array to set\n     * @param disposePrevious If this function should dispose the previous texture\n     */\n    setTexture(texture, index = 0, disposePrevious = true) {\n        super.setTexture(texture, index, disposePrevious);\n        this._bindTextureRenderTarget(texture, index);\n    }\n    dispose(disposeOnlyFramebuffers = false) {\n        const gl = this._context;\n        if (!disposeOnlyFramebuffers) {\n            if (this._colorTextureArray) {\n                this._context.deleteTexture(this._colorTextureArray);\n                this._colorTextureArray = null;\n            }\n            if (this._depthStencilTextureArray) {\n                this._context.deleteTexture(this._depthStencilTextureArray);\n                this._depthStencilTextureArray = null;\n            }\n        }\n        if (this._framebuffer) {\n            gl.deleteFramebuffer(this._framebuffer);\n            this._framebuffer = null;\n        }\n        if (this._depthStencilBuffer) {\n            gl.deleteRenderbuffer(this._depthStencilBuffer);\n            this._depthStencilBuffer = null;\n        }\n        if (this._MSAAFramebuffer) {\n            gl.deleteFramebuffer(this._MSAAFramebuffer);\n            this._MSAAFramebuffer = null;\n        }\n        super.dispose(disposeOnlyFramebuffers);\n    }\n}\n//# sourceMappingURL=webGLRenderTargetWrapper.js.map","import { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { ThinEngine } from \"../thinEngine.js\";\nimport { WebGLRenderTargetWrapper } from \"../WebGL/webGLRenderTargetWrapper.js\";\n\nThinEngine.prototype._createHardwareRenderTargetWrapper = function (isMulti, isCube, size) {\n    const rtWrapper = new WebGLRenderTargetWrapper(isMulti, isCube, size, this, this._gl);\n    this._renderTargetWrapperCache.push(rtWrapper);\n    return rtWrapper;\n};\nThinEngine.prototype.createRenderTargetTexture = function (size, options) {\n    var _a, _b;\n    const rtWrapper = this._createHardwareRenderTargetWrapper(false, false, size);\n    let generateDepthBuffer = true;\n    let generateStencilBuffer = false;\n    let noColorAttachment = false;\n    let colorAttachment = undefined;\n    let samples = 1;\n    if (options !== undefined && typeof options === \"object\") {\n        generateDepthBuffer = (_a = options.generateDepthBuffer) !== null && _a !== void 0 ? _a : true;\n        generateStencilBuffer = !!options.generateStencilBuffer;\n        noColorAttachment = !!options.noColorAttachment;\n        colorAttachment = options.colorAttachment;\n        samples = (_b = options.samples) !== null && _b !== void 0 ? _b : 1;\n    }\n    const texture = colorAttachment || (noColorAttachment ? null : this._createInternalTexture(size, options, true, InternalTextureSource.RenderTarget));\n    const width = size.width || size;\n    const height = size.height || size;\n    const currentFrameBuffer = this._currentFramebuffer;\n    const gl = this._gl;\n    // Create the framebuffer\n    const framebuffer = gl.createFramebuffer();\n    this._bindUnboundFramebuffer(framebuffer);\n    rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(generateStencilBuffer, generateDepthBuffer, width, height);\n    // No need to rebind on every frame\n    if (texture && !texture.is2DArray) {\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture._hardwareTexture.underlyingResource, 0);\n    }\n    this._bindUnboundFramebuffer(currentFrameBuffer);\n    rtWrapper._framebuffer = framebuffer;\n    rtWrapper._generateDepthBuffer = generateDepthBuffer;\n    rtWrapper._generateStencilBuffer = generateStencilBuffer;\n    rtWrapper.setTextures(texture);\n    this.updateRenderTargetTextureSampleCount(rtWrapper, samples);\n    return rtWrapper;\n};\nThinEngine.prototype.createDepthStencilTexture = function (size, options, rtWrapper) {\n    if (options.isCube) {\n        const width = size.width || size;\n        return this._createDepthStencilCubeTexture(width, options, rtWrapper);\n    }\n    else {\n        return this._createDepthStencilTexture(size, options, rtWrapper);\n    }\n};\nThinEngine.prototype._createDepthStencilTexture = function (size, options, rtWrapper) {\n    const gl = this._gl;\n    const layers = size.layers || 0;\n    const target = layers !== 0 ? gl.TEXTURE_2D_ARRAY : gl.TEXTURE_2D;\n    const internalTexture = new InternalTexture(this, InternalTextureSource.DepthStencil);\n    if (!this._caps.depthTextureExtension) {\n        Logger.Error(\"Depth texture is not supported by your browser or hardware.\");\n        return internalTexture;\n    }\n    const internalOptions = {\n        bilinearFiltering: false,\n        comparisonFunction: 0,\n        generateStencil: false,\n        ...options,\n    };\n    this._bindTextureDirectly(target, internalTexture, true);\n    this._setupDepthStencilTexture(internalTexture, size, internalOptions.generateStencil, internalOptions.comparisonFunction === 0 ? false : internalOptions.bilinearFiltering, internalOptions.comparisonFunction, internalOptions.samples);\n    if (internalOptions.depthTextureFormat !== undefined) {\n        if (internalOptions.depthTextureFormat !== 15 &&\n            internalOptions.depthTextureFormat !== 16 &&\n            internalOptions.depthTextureFormat !== 17 &&\n            internalOptions.depthTextureFormat !== 13 &&\n            internalOptions.depthTextureFormat !== 14 &&\n            internalOptions.depthTextureFormat !== 18) {\n            Logger.Error(\"Depth texture format is not supported.\");\n            return internalTexture;\n        }\n        internalTexture.format = internalOptions.depthTextureFormat;\n    }\n    else {\n        internalTexture.format = internalOptions.generateStencil ? 13 : 16;\n    }\n    const hasStencil = internalTexture.format === 17 ||\n        internalTexture.format === 13 ||\n        internalTexture.format === 18;\n    rtWrapper._depthStencilTexture = internalTexture;\n    rtWrapper._depthStencilTextureWithStencil = hasStencil;\n    let type = gl.UNSIGNED_INT;\n    if (internalTexture.format === 15) {\n        type = gl.UNSIGNED_SHORT;\n    }\n    else if (internalTexture.format === 17 || internalTexture.format === 13) {\n        type = gl.UNSIGNED_INT_24_8;\n    }\n    else if (internalTexture.format === 14) {\n        type = gl.FLOAT;\n    }\n    else if (internalTexture.format === 18) {\n        type = gl.FLOAT_32_UNSIGNED_INT_24_8_REV;\n    }\n    const format = hasStencil ? gl.DEPTH_STENCIL : gl.DEPTH_COMPONENT;\n    let internalFormat = format;\n    if (this.webGLVersion > 1) {\n        if (internalTexture.format === 15) {\n            internalFormat = gl.DEPTH_COMPONENT16;\n        }\n        else if (internalTexture.format === 16) {\n            internalFormat = gl.DEPTH_COMPONENT24;\n        }\n        else if (internalTexture.format === 17 || internalTexture.format === 13) {\n            internalFormat = gl.DEPTH24_STENCIL8;\n        }\n        else if (internalTexture.format === 14) {\n            internalFormat = gl.DEPTH_COMPONENT32F;\n        }\n        else if (internalTexture.format === 18) {\n            internalFormat = gl.DEPTH32F_STENCIL8;\n        }\n    }\n    if (internalTexture.is2DArray) {\n        gl.texImage3D(target, 0, internalFormat, internalTexture.width, internalTexture.height, layers, 0, format, type, null);\n    }\n    else {\n        gl.texImage2D(target, 0, internalFormat, internalTexture.width, internalTexture.height, 0, format, type, null);\n    }\n    this._bindTextureDirectly(target, null);\n    this._internalTexturesCache.push(internalTexture);\n    // Dispose previous depth/stencil render buffers and clear the corresponding attachment.\n    // Next time this framebuffer is bound, the new depth/stencil texture will be attached.\n    const glRtWrapper = rtWrapper;\n    if (glRtWrapper._depthStencilBuffer) {\n        const currentFrameBuffer = this._currentFramebuffer;\n        this._bindUnboundFramebuffer(glRtWrapper._framebuffer);\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, null);\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, null);\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, null);\n        this._bindUnboundFramebuffer(currentFrameBuffer);\n        gl.deleteRenderbuffer(glRtWrapper._depthStencilBuffer);\n        glRtWrapper._depthStencilBuffer = null;\n    }\n    return internalTexture;\n};\nThinEngine.prototype.updateRenderTargetTextureSampleCount = function (rtWrapper, samples) {\n    if (this.webGLVersion < 2 || !rtWrapper || !rtWrapper.texture) {\n        return 1;\n    }\n    if (rtWrapper.samples === samples) {\n        return samples;\n    }\n    const gl = this._gl;\n    samples = Math.min(samples, this.getCaps().maxMSAASamples);\n    // Dispose previous render buffers\n    if (rtWrapper._depthStencilBuffer) {\n        gl.deleteRenderbuffer(rtWrapper._depthStencilBuffer);\n        rtWrapper._depthStencilBuffer = null;\n    }\n    if (rtWrapper._MSAAFramebuffer) {\n        gl.deleteFramebuffer(rtWrapper._MSAAFramebuffer);\n        rtWrapper._MSAAFramebuffer = null;\n    }\n    const hardwareTexture = rtWrapper.texture._hardwareTexture;\n    if (hardwareTexture._MSAARenderBuffer) {\n        gl.deleteRenderbuffer(hardwareTexture._MSAARenderBuffer);\n        hardwareTexture._MSAARenderBuffer = null;\n    }\n    if (samples > 1 && typeof gl.renderbufferStorageMultisample === \"function\") {\n        const framebuffer = gl.createFramebuffer();\n        if (!framebuffer) {\n            throw new Error(\"Unable to create multi sampled framebuffer\");\n        }\n        rtWrapper._MSAAFramebuffer = framebuffer;\n        this._bindUnboundFramebuffer(rtWrapper._MSAAFramebuffer);\n        const colorRenderbuffer = this._createRenderBuffer(rtWrapper.texture.width, rtWrapper.texture.height, samples, -1 /* not used */, this._getRGBAMultiSampleBufferFormat(rtWrapper.texture.type), gl.COLOR_ATTACHMENT0, false);\n        if (!colorRenderbuffer) {\n            throw new Error(\"Unable to create multi sampled framebuffer\");\n        }\n        hardwareTexture._MSAARenderBuffer = colorRenderbuffer;\n    }\n    else {\n        this._bindUnboundFramebuffer(rtWrapper._framebuffer);\n    }\n    rtWrapper.texture.samples = samples;\n    rtWrapper._samples = samples;\n    rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(rtWrapper._generateStencilBuffer, rtWrapper._generateDepthBuffer, rtWrapper.texture.width, rtWrapper.texture.height, samples);\n    this._bindUnboundFramebuffer(null);\n    return samples;\n};\n//# sourceMappingURL=engine.renderTarget.js.map","import { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture.js\";\nimport { Logger } from \"../../Misc/logger.js\";\n\nimport { ThinEngine } from \"../thinEngine.js\";\nThinEngine.prototype.createRenderTargetCubeTexture = function (size, options) {\n    const rtWrapper = this._createHardwareRenderTargetWrapper(false, true, size);\n    const fullOptions = {\n        generateMipMaps: true,\n        generateDepthBuffer: true,\n        generateStencilBuffer: false,\n        type: 0,\n        samplingMode: 3,\n        format: 5,\n        ...options,\n    };\n    fullOptions.generateStencilBuffer = fullOptions.generateDepthBuffer && fullOptions.generateStencilBuffer;\n    if (fullOptions.type === 1 && !this._caps.textureFloatLinearFiltering) {\n        // if floating point linear (gl.FLOAT) then force to NEAREST_SAMPLINGMODE\n        fullOptions.samplingMode = 1;\n    }\n    else if (fullOptions.type === 2 && !this._caps.textureHalfFloatLinearFiltering) {\n        // if floating point linear (HALF_FLOAT) then force to NEAREST_SAMPLINGMODE\n        fullOptions.samplingMode = 1;\n    }\n    const gl = this._gl;\n    const texture = new InternalTexture(this, InternalTextureSource.RenderTarget);\n    this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\n    const filters = this._getSamplingParameters(fullOptions.samplingMode, fullOptions.generateMipMaps);\n    if (fullOptions.type === 1 && !this._caps.textureFloat) {\n        fullOptions.type = 0;\n        Logger.Warn(\"Float textures are not supported. Cube render target forced to TEXTURETYPE_UNESIGNED_BYTE type\");\n    }\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, filters.mag);\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, filters.min);\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    for (let face = 0; face < 6; face++) {\n        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + face, 0, this._getRGBABufferInternalSizedFormat(fullOptions.type, fullOptions.format), size, size, 0, this._getInternalFormat(fullOptions.format), this._getWebGLTextureType(fullOptions.type), null);\n    }\n    // Create the framebuffer\n    const framebuffer = gl.createFramebuffer();\n    this._bindUnboundFramebuffer(framebuffer);\n    rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(fullOptions.generateStencilBuffer, fullOptions.generateDepthBuffer, size, size);\n    // MipMaps\n    if (fullOptions.generateMipMaps) {\n        gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\n    }\n    // Unbind\n    this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\n    this._bindUnboundFramebuffer(null);\n    rtWrapper._framebuffer = framebuffer;\n    rtWrapper._generateDepthBuffer = fullOptions.generateDepthBuffer;\n    rtWrapper._generateStencilBuffer = fullOptions.generateStencilBuffer;\n    texture.width = size;\n    texture.height = size;\n    texture.isReady = true;\n    texture.isCube = true;\n    texture.samples = 1;\n    texture.generateMipMaps = fullOptions.generateMipMaps;\n    texture.samplingMode = fullOptions.samplingMode;\n    texture.type = fullOptions.type;\n    texture.format = fullOptions.format;\n    this._internalTexturesCache.push(texture);\n    rtWrapper.setTextures(texture);\n    return rtWrapper;\n};\n//# sourceMappingURL=engine.renderTargetCube.js.map","import { ThinEngine } from \"../../Engines/thinEngine.js\";\nimport { WebGLDataBuffer } from \"../../Meshes/WebGL/webGLDataBuffer.js\";\nThinEngine.prototype.createUniformBuffer = function (elements) {\n    const ubo = this._gl.createBuffer();\n    if (!ubo) {\n        throw new Error(\"Unable to create uniform buffer\");\n    }\n    const result = new WebGLDataBuffer(ubo);\n    this.bindUniformBuffer(result);\n    if (elements instanceof Float32Array) {\n        this._gl.bufferData(this._gl.UNIFORM_BUFFER, elements, this._gl.STATIC_DRAW);\n    }\n    else {\n        this._gl.bufferData(this._gl.UNIFORM_BUFFER, new Float32Array(elements), this._gl.STATIC_DRAW);\n    }\n    this.bindUniformBuffer(null);\n    result.references = 1;\n    return result;\n};\nThinEngine.prototype.createDynamicUniformBuffer = function (elements) {\n    const ubo = this._gl.createBuffer();\n    if (!ubo) {\n        throw new Error(\"Unable to create dynamic uniform buffer\");\n    }\n    const result = new WebGLDataBuffer(ubo);\n    this.bindUniformBuffer(result);\n    if (elements instanceof Float32Array) {\n        this._gl.bufferData(this._gl.UNIFORM_BUFFER, elements, this._gl.DYNAMIC_DRAW);\n    }\n    else {\n        this._gl.bufferData(this._gl.UNIFORM_BUFFER, new Float32Array(elements), this._gl.DYNAMIC_DRAW);\n    }\n    this.bindUniformBuffer(null);\n    result.references = 1;\n    return result;\n};\nThinEngine.prototype.updateUniformBuffer = function (uniformBuffer, elements, offset, count) {\n    this.bindUniformBuffer(uniformBuffer);\n    if (offset === undefined) {\n        offset = 0;\n    }\n    if (count === undefined) {\n        if (elements instanceof Float32Array) {\n            this._gl.bufferSubData(this._gl.UNIFORM_BUFFER, offset, elements);\n        }\n        else {\n            this._gl.bufferSubData(this._gl.UNIFORM_BUFFER, offset, new Float32Array(elements));\n        }\n    }\n    else {\n        if (elements instanceof Float32Array) {\n            this._gl.bufferSubData(this._gl.UNIFORM_BUFFER, 0, elements.subarray(offset, offset + count));\n        }\n        else {\n            this._gl.bufferSubData(this._gl.UNIFORM_BUFFER, 0, new Float32Array(elements).subarray(offset, offset + count));\n        }\n    }\n    this.bindUniformBuffer(null);\n};\nThinEngine.prototype.bindUniformBuffer = function (buffer) {\n    this._gl.bindBuffer(this._gl.UNIFORM_BUFFER, buffer ? buffer.underlyingResource : null);\n};\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nThinEngine.prototype.bindUniformBufferBase = function (buffer, location, name) {\n    this._gl.bindBufferBase(this._gl.UNIFORM_BUFFER, location, buffer ? buffer.underlyingResource : null);\n};\nThinEngine.prototype.bindUniformBlock = function (pipelineContext, blockName, index) {\n    const program = pipelineContext.program;\n    const uniformLocation = this._gl.getUniformBlockIndex(program, blockName);\n    if (uniformLocation !== 0xffffffff) {\n        this._gl.uniformBlockBinding(program, uniformLocation, index);\n    }\n};\n//# sourceMappingURL=engine.uniformBuffer.js.map","import { ThinEngine } from \"../../Engines/thinEngine.js\";\n\nThinEngine.prototype.updateVideoTexture = function (texture, video, invertY) {\n    if (!texture || texture._isDisabled) {\n        return;\n    }\n    const glformat = this._getInternalFormat(texture.format);\n    const internalFormat = this._getRGBABufferInternalSizedFormat(0, texture.format);\n    const wasPreviouslyBound = this._bindTextureDirectly(this._gl.TEXTURE_2D, texture, true);\n    this._unpackFlipY(!invertY); // Video are upside down by default\n    try {\n        // Testing video texture support\n        if (this._videoTextureSupported === undefined) {\n            // clear old errors just in case.\n            this._gl.getError();\n            this._gl.texImage2D(this._gl.TEXTURE_2D, 0, internalFormat, glformat, this._gl.UNSIGNED_BYTE, video);\n            if (this._gl.getError() !== 0) {\n                this._videoTextureSupported = false;\n            }\n            else {\n                this._videoTextureSupported = true;\n            }\n        }\n        // Copy video through the current working canvas if video texture is not supported\n        if (!this._videoTextureSupported) {\n            if (!texture._workingCanvas) {\n                texture._workingCanvas = this.createCanvas(texture.width, texture.height);\n                const context = texture._workingCanvas.getContext(\"2d\");\n                if (!context) {\n                    throw new Error(\"Unable to get 2d context\");\n                }\n                texture._workingContext = context;\n                texture._workingCanvas.width = texture.width;\n                texture._workingCanvas.height = texture.height;\n            }\n            texture._workingContext.clearRect(0, 0, texture.width, texture.height);\n            texture._workingContext.drawImage(video, 0, 0, video.videoWidth, video.videoHeight, 0, 0, texture.width, texture.height);\n            this._gl.texImage2D(this._gl.TEXTURE_2D, 0, internalFormat, glformat, this._gl.UNSIGNED_BYTE, texture._workingCanvas);\n        }\n        else {\n            this._gl.texImage2D(this._gl.TEXTURE_2D, 0, internalFormat, glformat, this._gl.UNSIGNED_BYTE, video);\n        }\n        if (texture.generateMipMaps) {\n            this._gl.generateMipmap(this._gl.TEXTURE_2D);\n        }\n        if (!wasPreviouslyBound) {\n            this._bindTextureDirectly(this._gl.TEXTURE_2D, null);\n        }\n        //    this.resetTextureCache();\n        texture.isReady = true;\n    }\n    catch (ex) {\n        // Something unexpected\n        // Let's disable the texture\n        texture._isDisabled = true;\n    }\n};\n//# sourceMappingURL=engine.videoTexture.js.map","import { Engine } from \"../../Engines/engine.js\";\nimport { Size } from \"../../Maths/math.size.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { Tools } from \"../../Misc/tools.js\";\nimport { IsWindowObjectExist } from \"../../Misc/domManagement.js\";\nObject.defineProperty(Engine.prototype, \"isInVRExclusivePointerMode\", {\n    get: function () {\n        return this._vrExclusivePointerMode;\n    },\n    enumerable: true,\n    configurable: true,\n});\nEngine.prototype._prepareVRComponent = function () {\n    this._vrSupported = false;\n    this._vrExclusivePointerMode = false;\n    this.onVRDisplayChangedObservable = new Observable();\n    this.onVRRequestPresentComplete = new Observable();\n    this.onVRRequestPresentStart = new Observable();\n};\nEngine.prototype.isVRDevicePresent = function () {\n    return !!this._vrDisplay;\n};\nEngine.prototype.getVRDevice = function () {\n    return this._vrDisplay;\n};\nEngine.prototype.initWebVR = function () {\n    this.initWebVRAsync();\n    return this.onVRDisplayChangedObservable;\n};\nEngine.prototype.initWebVRAsync = function () {\n    const notifyObservers = () => {\n        const eventArgs = {\n            vrDisplay: this._vrDisplay,\n            vrSupported: this._vrSupported,\n        };\n        this.onVRDisplayChangedObservable.notifyObservers(eventArgs);\n        this._webVRInitPromise = new Promise((res) => {\n            res(eventArgs);\n        });\n    };\n    if (!this._onVrDisplayConnect) {\n        this._onVrDisplayConnect = (event) => {\n            this._vrDisplay = event.display;\n            notifyObservers();\n        };\n        this._onVrDisplayDisconnect = () => {\n            this._vrDisplay.cancelAnimationFrame(this._frameHandler);\n            this._vrDisplay = undefined;\n            this._frameHandler = Engine.QueueNewFrame(this._boundRenderFunction);\n            notifyObservers();\n        };\n        this._onVrDisplayPresentChange = () => {\n            this._vrExclusivePointerMode = this._vrDisplay && this._vrDisplay.isPresenting;\n        };\n        const hostWindow = this.getHostWindow();\n        if (hostWindow) {\n            hostWindow.addEventListener(\"vrdisplayconnect\", this._onVrDisplayConnect);\n            hostWindow.addEventListener(\"vrdisplaydisconnect\", this._onVrDisplayDisconnect);\n            hostWindow.addEventListener(\"vrdisplaypresentchange\", this._onVrDisplayPresentChange);\n        }\n    }\n    this._webVRInitPromise = this._webVRInitPromise || this._getVRDisplaysAsync();\n    this._webVRInitPromise.then(notifyObservers);\n    return this._webVRInitPromise;\n};\nEngine.prototype._getVRDisplaysAsync = function () {\n    return new Promise((res) => {\n        if (navigator.getVRDisplays) {\n            navigator.getVRDisplays().then((devices) => {\n                this._vrSupported = true;\n                // note that devices may actually be an empty array. This is fine;\n                // we expect this._vrDisplay to be undefined in this case.\n                this._vrDisplay = devices[0];\n                res({\n                    vrDisplay: this._vrDisplay,\n                    vrSupported: this._vrSupported,\n                });\n            });\n        }\n        else {\n            this._vrDisplay = undefined;\n            this._vrSupported = false;\n            res({\n                vrDisplay: this._vrDisplay,\n                vrSupported: this._vrSupported,\n            });\n        }\n    });\n};\nEngine.prototype.enableVR = function (options) {\n    if (this._vrDisplay && !this._vrDisplay.isPresenting) {\n        const onResolved = () => {\n            this.onVRRequestPresentComplete.notifyObservers(true);\n            this._onVRFullScreenTriggered();\n        };\n        const onRejected = () => {\n            this.onVRRequestPresentComplete.notifyObservers(false);\n        };\n        this.onVRRequestPresentStart.notifyObservers(this);\n        const presentationAttributes = {\n            highRefreshRate: this.vrPresentationAttributes ? this.vrPresentationAttributes.highRefreshRate : false,\n            foveationLevel: this.vrPresentationAttributes ? this.vrPresentationAttributes.foveationLevel : 1,\n            multiview: (this.getCaps().multiview || this.getCaps().oculusMultiview) && options.useMultiview,\n        };\n        this._vrDisplay\n            .requestPresent([\n            {\n                source: this.getRenderingCanvas(),\n                attributes: presentationAttributes,\n                ...presentationAttributes,\n            },\n        ])\n            .then(onResolved)\n            .catch(onRejected);\n    }\n};\nEngine.prototype._onVRFullScreenTriggered = function () {\n    if (this._vrDisplay && this._vrDisplay.isPresenting) {\n        //get the old size before we change\n        this._oldSize = new Size(this.getRenderWidth(), this.getRenderHeight());\n        this._oldHardwareScaleFactor = this.getHardwareScalingLevel();\n        //get the width and height, change the render size\n        const leftEye = this._vrDisplay.getEyeParameters(\"left\");\n        this.setHardwareScalingLevel(1);\n        this.setSize(leftEye.renderWidth * 2, leftEye.renderHeight);\n    }\n    else {\n        this.setHardwareScalingLevel(this._oldHardwareScaleFactor);\n        this.setSize(this._oldSize.width, this._oldSize.height);\n    }\n};\nEngine.prototype.disableVR = function () {\n    if (this._vrDisplay && this._vrDisplay.isPresenting) {\n        this._vrDisplay\n            .exitPresent()\n            .then(() => this._onVRFullScreenTriggered())\n            .catch(() => this._onVRFullScreenTriggered());\n    }\n    if (IsWindowObjectExist()) {\n        window.removeEventListener(\"vrdisplaypointerrestricted\", this._onVRDisplayPointerRestricted);\n        window.removeEventListener(\"vrdisplaypointerunrestricted\", this._onVRDisplayPointerUnrestricted);\n        if (this._onVrDisplayConnect) {\n            window.removeEventListener(\"vrdisplayconnect\", this._onVrDisplayConnect);\n            if (this._onVrDisplayDisconnect) {\n                window.removeEventListener(\"vrdisplaydisconnect\", this._onVrDisplayDisconnect);\n            }\n            if (this._onVrDisplayPresentChange) {\n                window.removeEventListener(\"vrdisplaypresentchange\", this._onVrDisplayPresentChange);\n            }\n            this._onVrDisplayConnect = null;\n            this._onVrDisplayDisconnect = null;\n        }\n    }\n};\nEngine.prototype._connectVREvents = function (canvas, document) {\n    this._onVRDisplayPointerRestricted = () => {\n        if (canvas) {\n            canvas.requestPointerLock();\n        }\n    };\n    this._onVRDisplayPointerUnrestricted = () => {\n        // Edge fix - for some reason document is not present and this is window\n        if (!document) {\n            const hostWindow = this.getHostWindow();\n            if (hostWindow.document && hostWindow.document.exitPointerLock) {\n                hostWindow.document.exitPointerLock();\n            }\n            return;\n        }\n        if (!document.exitPointerLock) {\n            return;\n        }\n        document.exitPointerLock();\n    };\n    if (IsWindowObjectExist()) {\n        const hostWindow = this.getHostWindow();\n        hostWindow.addEventListener(\"vrdisplaypointerrestricted\", this._onVRDisplayPointerRestricted, false);\n        hostWindow.addEventListener(\"vrdisplaypointerunrestricted\", this._onVRDisplayPointerUnrestricted, false);\n    }\n};\nEngine.prototype._submitVRFrame = function () {\n    // Submit frame to the vr device, if enabled\n    if (this._vrDisplay && this._vrDisplay.isPresenting) {\n        // TODO: We should only submit the frame if we read frameData successfully.\n        try {\n            this._vrDisplay.submitFrame();\n        }\n        catch (e) {\n            Tools.Warn(\"webVR submitFrame has had an unexpected failure: \" + e);\n        }\n    }\n};\nEngine.prototype.isVRPresenting = function () {\n    return this._vrDisplay && this._vrDisplay.isPresenting;\n};\nEngine.prototype._requestVRFrame = function () {\n    this._frameHandler = Engine.QueueNewFrame(this._boundRenderFunction, this._vrDisplay);\n};\n//# sourceMappingURL=engine.webVR.js.map","/** @internal */\nexport class NativeDataStream {\n    constructor() {\n        const buffer = new ArrayBuffer(NativeDataStream.DEFAULT_BUFFER_SIZE);\n        this._uint32s = new Uint32Array(buffer);\n        this._int32s = new Int32Array(buffer);\n        this._float32s = new Float32Array(buffer);\n        this._length = NativeDataStream.DEFAULT_BUFFER_SIZE / 4;\n        this._position = 0;\n        this._nativeDataStream = new _native.NativeDataStream(() => {\n            this._flush();\n        });\n    }\n    writeUint32(value) {\n        this._flushIfNecessary(1);\n        this._uint32s[this._position++] = value;\n    }\n    writeInt32(value) {\n        this._flushIfNecessary(1);\n        this._int32s[this._position++] = value;\n    }\n    writeFloat32(value) {\n        this._flushIfNecessary(1);\n        this._float32s[this._position++] = value;\n    }\n    writeUint32Array(values) {\n        this._flushIfNecessary(1 + values.length);\n        this._uint32s[this._position++] = values.length;\n        this._uint32s.set(values, this._position);\n        this._position += values.length;\n    }\n    writeInt32Array(values) {\n        this._flushIfNecessary(1 + values.length);\n        this._uint32s[this._position++] = values.length;\n        this._int32s.set(values, this._position);\n        this._position += values.length;\n    }\n    writeFloat32Array(values) {\n        this._flushIfNecessary(1 + values.length);\n        this._uint32s[this._position++] = values.length;\n        this._float32s.set(values, this._position);\n        this._position += values.length;\n    }\n    writeNativeData(handle) {\n        this._flushIfNecessary(handle.length);\n        this._uint32s.set(handle, this._position);\n        this._position += handle.length;\n    }\n    writeBoolean(value) {\n        this.writeUint32(value ? 1 : 0);\n    }\n    _flushIfNecessary(required) {\n        if (this._position + required > this._length) {\n            this._flush();\n        }\n    }\n    _flush() {\n        this._nativeDataStream.writeBuffer(this._uint32s.buffer, this._position);\n        this._position = 0;\n    }\n}\n// Must be multiple of 4!\n// eslint-disable-next-line @typescript-eslint/naming-convention\nNativeDataStream.DEFAULT_BUFFER_SIZE = 65536;\n//# sourceMappingURL=nativeDataStream.js.map","/** @internal */\nexport class NativeHardwareTexture {\n    get underlyingResource() {\n        return this._nativeTexture;\n    }\n    constructor(existingTexture, engine) {\n        this._engine = engine;\n        this.set(existingTexture);\n    }\n    setUsage() { }\n    set(hardwareTexture) {\n        this._nativeTexture = hardwareTexture;\n    }\n    reset() {\n        this._nativeTexture = null;\n    }\n    release() {\n        if (this._nativeTexture) {\n            this._engine.deleteTexture(this._nativeTexture);\n        }\n        this.reset();\n    }\n}\n//# sourceMappingURL=nativeHardwareTexture.js.map","export class NativePipelineContext {\n    _getVertexShaderCode() {\n        return null;\n    }\n    _getFragmentShaderCode() {\n        return null;\n    }\n    // TODO: what should this do?\n    _handlesSpectorRebuildCallback(onCompiled) {\n        throw new Error(\"Not implemented\");\n    }\n    constructor(engine) {\n        // TODO: async should be true?\n        this.isAsync = false;\n        this.isReady = false;\n        this._valueCache = {};\n        this._engine = engine;\n    }\n    _fillEffectInformation(effect, uniformBuffersNames, uniformsNames, uniforms, samplerList, samplers, attributesNames, attributes) {\n        const engine = this._engine;\n        if (engine.supportsUniformBuffers) {\n            for (const name in uniformBuffersNames) {\n                effect.bindUniformBlock(name, uniformBuffersNames[name]);\n            }\n        }\n        const effectAvailableUniforms = this._engine.getUniforms(this, uniformsNames);\n        effectAvailableUniforms.forEach((uniform, index) => {\n            uniforms[uniformsNames[index]] = uniform;\n        });\n        this._uniforms = uniforms;\n        let index;\n        for (index = 0; index < samplerList.length; index++) {\n            const sampler = effect.getUniform(samplerList[index]);\n            if (sampler == null) {\n                samplerList.splice(index, 1);\n                index--;\n            }\n        }\n        samplerList.forEach((name, index) => {\n            samplers[name] = index;\n        });\n        attributes.push(...engine.getAttributes(this, attributesNames));\n    }\n    /**\n     * Release all associated resources.\n     **/\n    dispose() {\n        this._uniforms = {};\n    }\n    /**\n     * @internal\n     */\n    _cacheMatrix(uniformName, matrix) {\n        const cache = this._valueCache[uniformName];\n        const flag = matrix.updateFlag;\n        if (cache !== undefined && cache === flag) {\n            return false;\n        }\n        this._valueCache[uniformName] = flag;\n        return true;\n    }\n    /**\n     * @internal\n     */\n    _cacheFloat2(uniformName, x, y) {\n        let cache = this._valueCache[uniformName];\n        if (!cache) {\n            cache = [x, y];\n            this._valueCache[uniformName] = cache;\n            return true;\n        }\n        let changed = false;\n        if (cache[0] !== x) {\n            cache[0] = x;\n            changed = true;\n        }\n        if (cache[1] !== y) {\n            cache[1] = y;\n            changed = true;\n        }\n        return changed;\n    }\n    /**\n     * @internal\n     */\n    _cacheFloat3(uniformName, x, y, z) {\n        let cache = this._valueCache[uniformName];\n        if (!cache) {\n            cache = [x, y, z];\n            this._valueCache[uniformName] = cache;\n            return true;\n        }\n        let changed = false;\n        if (cache[0] !== x) {\n            cache[0] = x;\n            changed = true;\n        }\n        if (cache[1] !== y) {\n            cache[1] = y;\n            changed = true;\n        }\n        if (cache[2] !== z) {\n            cache[2] = z;\n            changed = true;\n        }\n        return changed;\n    }\n    /**\n     * @internal\n     */\n    _cacheFloat4(uniformName, x, y, z, w) {\n        let cache = this._valueCache[uniformName];\n        if (!cache) {\n            cache = [x, y, z, w];\n            this._valueCache[uniformName] = cache;\n            return true;\n        }\n        let changed = false;\n        if (cache[0] !== x) {\n            cache[0] = x;\n            changed = true;\n        }\n        if (cache[1] !== y) {\n            cache[1] = y;\n            changed = true;\n        }\n        if (cache[2] !== z) {\n            cache[2] = z;\n            changed = true;\n        }\n        if (cache[3] !== w) {\n            cache[3] = w;\n            changed = true;\n        }\n        return changed;\n    }\n    /**\n     * Sets an integer value on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param value Value to be set.\n     */\n    setInt(uniformName, value) {\n        const cache = this._valueCache[uniformName];\n        if (cache !== undefined && cache === value) {\n            return;\n        }\n        if (this._engine.setInt(this._uniforms[uniformName], value)) {\n            this._valueCache[uniformName] = value;\n        }\n    }\n    /**\n     * Sets a int2 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param x First int in int2.\n     * @param y Second int in int2.\n     */\n    setInt2(uniformName, x, y) {\n        if (this._cacheFloat2(uniformName, x, y)) {\n            if (!this._engine.setInt2(this._uniforms[uniformName], x, y)) {\n                this._valueCache[uniformName] = null;\n            }\n        }\n    }\n    /**\n     * Sets a int3 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param x First int in int3.\n     * @param y Second int in int3.\n     * @param z Third int in int3.\n     */\n    setInt3(uniformName, x, y, z) {\n        if (this._cacheFloat3(uniformName, x, y, z)) {\n            if (!this._engine.setInt3(this._uniforms[uniformName], x, y, z)) {\n                this._valueCache[uniformName] = null;\n            }\n        }\n    }\n    /**\n     * Sets a int4 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param x First int in int4.\n     * @param y Second int in int4.\n     * @param z Third int in int4.\n     * @param w Fourth int in int4.\n     */\n    setInt4(uniformName, x, y, z, w) {\n        if (this._cacheFloat4(uniformName, x, y, z, w)) {\n            if (!this._engine.setInt4(this._uniforms[uniformName], x, y, z, w)) {\n                this._valueCache[uniformName] = null;\n            }\n        }\n    }\n    /**\n     * Sets an int array on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     */\n    setIntArray(uniformName, array) {\n        this._valueCache[uniformName] = null;\n        this._engine.setIntArray(this._uniforms[uniformName], array);\n    }\n    /**\n     * Sets an int array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     */\n    setIntArray2(uniformName, array) {\n        this._valueCache[uniformName] = null;\n        this._engine.setIntArray2(this._uniforms[uniformName], array);\n    }\n    /**\n     * Sets an int array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     */\n    setIntArray3(uniformName, array) {\n        this._valueCache[uniformName] = null;\n        this._engine.setIntArray3(this._uniforms[uniformName], array);\n    }\n    /**\n     * Sets an int array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     */\n    setIntArray4(uniformName, array) {\n        this._valueCache[uniformName] = null;\n        this._engine.setIntArray4(this._uniforms[uniformName], array);\n    }\n    /**\n     * Sets an unsigned integer value on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param value Value to be set.\n     */\n    setUInt(uniformName, value) {\n        const cache = this._valueCache[uniformName];\n        if (cache !== undefined && cache === value) {\n            return;\n        }\n        if (this._engine.setUInt(this._uniforms[uniformName], value)) {\n            this._valueCache[uniformName] = value;\n        }\n    }\n    /**\n     * Sets a unsigned int2 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param x First unsigned int in uint2.\n     * @param y Second unsigned int in uint2.\n     */\n    setUInt2(uniformName, x, y) {\n        if (this._cacheFloat2(uniformName, x, y)) {\n            if (!this._engine.setUInt2(this._uniforms[uniformName], x, y)) {\n                this._valueCache[uniformName] = null;\n            }\n        }\n    }\n    /**\n     * Sets a unsigned int3 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param x First unsigned int in uint3.\n     * @param y Second unsigned int in uint3.\n     * @param z Third unsigned int in uint3.\n     */\n    setUInt3(uniformName, x, y, z) {\n        if (this._cacheFloat3(uniformName, x, y, z)) {\n            if (!this._engine.setUInt3(this._uniforms[uniformName], x, y, z)) {\n                this._valueCache[uniformName] = null;\n            }\n        }\n    }\n    /**\n     * Sets a unsigned int4 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param x First unsigned int in uint4.\n     * @param y Second unsigned int in uint4.\n     * @param z Third unsigned int in uint4.\n     * @param w Fourth unsigned int in uint4.\n     */\n    setUInt4(uniformName, x, y, z, w) {\n        if (this._cacheFloat4(uniformName, x, y, z, w)) {\n            if (!this._engine.setUInt4(this._uniforms[uniformName], x, y, z, w)) {\n                this._valueCache[uniformName] = null;\n            }\n        }\n    }\n    /**\n     * Sets an unsigned int array on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     */\n    setUIntArray(uniformName, array) {\n        this._valueCache[uniformName] = null;\n        this._engine.setUIntArray(this._uniforms[uniformName], array);\n    }\n    /**\n     * Sets an unsigned int array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     */\n    setUIntArray2(uniformName, array) {\n        this._valueCache[uniformName] = null;\n        this._engine.setUIntArray2(this._uniforms[uniformName], array);\n    }\n    /**\n     * Sets an unsigned int array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     */\n    setUIntArray3(uniformName, array) {\n        this._valueCache[uniformName] = null;\n        this._engine.setUIntArray3(this._uniforms[uniformName], array);\n    }\n    /**\n     * Sets an unsigned int array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     */\n    setUIntArray4(uniformName, array) {\n        this._valueCache[uniformName] = null;\n        this._engine.setUIntArray4(this._uniforms[uniformName], array);\n    }\n    /**\n     * Sets an float array on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     */\n    setFloatArray(uniformName, array) {\n        this._valueCache[uniformName] = null;\n        this._engine.setFloatArray(this._uniforms[uniformName], array);\n    }\n    /**\n     * Sets an float array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     */\n    setFloatArray2(uniformName, array) {\n        this._valueCache[uniformName] = null;\n        this._engine.setFloatArray2(this._uniforms[uniformName], array);\n    }\n    /**\n     * Sets an float array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     */\n    setFloatArray3(uniformName, array) {\n        this._valueCache[uniformName] = null;\n        this._engine.setFloatArray3(this._uniforms[uniformName], array);\n    }\n    /**\n     * Sets an float array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     */\n    setFloatArray4(uniformName, array) {\n        this._valueCache[uniformName] = null;\n        this._engine.setFloatArray4(this._uniforms[uniformName], array);\n    }\n    /**\n     * Sets an array on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     */\n    setArray(uniformName, array) {\n        this._valueCache[uniformName] = null;\n        this._engine.setArray(this._uniforms[uniformName], array);\n    }\n    /**\n     * Sets an array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     */\n    setArray2(uniformName, array) {\n        this._valueCache[uniformName] = null;\n        this._engine.setArray2(this._uniforms[uniformName], array);\n    }\n    /**\n     * Sets an array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     * @returns this effect.\n     */\n    setArray3(uniformName, array) {\n        this._valueCache[uniformName] = null;\n        this._engine.setArray3(this._uniforms[uniformName], array);\n    }\n    /**\n     * Sets an array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     */\n    setArray4(uniformName, array) {\n        this._valueCache[uniformName] = null;\n        this._engine.setArray4(this._uniforms[uniformName], array);\n    }\n    /**\n     * Sets matrices on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param matrices matrices to be set.\n     */\n    setMatrices(uniformName, matrices) {\n        if (!matrices) {\n            return;\n        }\n        this._valueCache[uniformName] = null;\n        this._engine.setMatrices(this._uniforms[uniformName], matrices);\n    }\n    /**\n     * Sets matrix on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param matrix matrix to be set.\n     */\n    setMatrix(uniformName, matrix) {\n        if (this._cacheMatrix(uniformName, matrix)) {\n            if (!this._engine.setMatrices(this._uniforms[uniformName], matrix.toArray())) {\n                this._valueCache[uniformName] = null;\n            }\n        }\n    }\n    /**\n     * Sets a 3x3 matrix on a uniform variable. (Specified as [1,2,3,4,5,6,7,8,9] will result in [1,2,3][4,5,6][7,8,9] matrix)\n     * @param uniformName Name of the variable.\n     * @param matrix matrix to be set.\n     */\n    setMatrix3x3(uniformName, matrix) {\n        this._valueCache[uniformName] = null;\n        this._engine.setMatrix3x3(this._uniforms[uniformName], matrix);\n    }\n    /**\n     * Sets a 2x2 matrix on a uniform variable. (Specified as [1,2,3,4] will result in [1,2][3,4] matrix)\n     * @param uniformName Name of the variable.\n     * @param matrix matrix to be set.\n     */\n    setMatrix2x2(uniformName, matrix) {\n        this._valueCache[uniformName] = null;\n        this._engine.setMatrix2x2(this._uniforms[uniformName], matrix);\n    }\n    /**\n     * Sets a float on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param value value to be set.\n     * @returns this effect.\n     */\n    setFloat(uniformName, value) {\n        const cache = this._valueCache[uniformName];\n        if (cache !== undefined && cache === value) {\n            return;\n        }\n        if (this._engine.setFloat(this._uniforms[uniformName], value)) {\n            this._valueCache[uniformName] = value;\n        }\n    }\n    /**\n     * Sets a boolean on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param bool value to be set.\n     */\n    setBool(uniformName, bool) {\n        const cache = this._valueCache[uniformName];\n        if (cache !== undefined && cache === bool) {\n            return;\n        }\n        if (this._engine.setInt(this._uniforms[uniformName], bool ? 1 : 0)) {\n            this._valueCache[uniformName] = bool ? 1 : 0;\n        }\n    }\n    /**\n     * Sets a Vector2 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param vector2 vector2 to be set.\n     */\n    setVector2(uniformName, vector2) {\n        if (this._cacheFloat2(uniformName, vector2.x, vector2.y)) {\n            if (!this._engine.setFloat2(this._uniforms[uniformName], vector2.x, vector2.y)) {\n                this._valueCache[uniformName] = null;\n            }\n        }\n    }\n    /**\n     * Sets a float2 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param x First float in float2.\n     * @param y Second float in float2.\n     */\n    setFloat2(uniformName, x, y) {\n        if (this._cacheFloat2(uniformName, x, y)) {\n            if (!this._engine.setFloat2(this._uniforms[uniformName], x, y)) {\n                this._valueCache[uniformName] = null;\n            }\n        }\n    }\n    /**\n     * Sets a Vector3 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param vector3 Value to be set.\n     */\n    setVector3(uniformName, vector3) {\n        if (this._cacheFloat3(uniformName, vector3.x, vector3.y, vector3.z)) {\n            if (!this._engine.setFloat3(this._uniforms[uniformName], vector3.x, vector3.y, vector3.z)) {\n                this._valueCache[uniformName] = null;\n            }\n        }\n    }\n    /**\n     * Sets a float3 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param x First float in float3.\n     * @param y Second float in float3.\n     * @param z Third float in float3.\n     */\n    setFloat3(uniformName, x, y, z) {\n        if (this._cacheFloat3(uniformName, x, y, z)) {\n            if (!this._engine.setFloat3(this._uniforms[uniformName], x, y, z)) {\n                this._valueCache[uniformName] = null;\n            }\n        }\n    }\n    /**\n     * Sets a Vector4 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param vector4 Value to be set.\n     */\n    setVector4(uniformName, vector4) {\n        if (this._cacheFloat4(uniformName, vector4.x, vector4.y, vector4.z, vector4.w)) {\n            if (!this._engine.setFloat4(this._uniforms[uniformName], vector4.x, vector4.y, vector4.z, vector4.w)) {\n                this._valueCache[uniformName] = null;\n            }\n        }\n    }\n    /**\n     * Sets a Quaternion on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param quaternion Value to be set.\n     */\n    setQuaternion(uniformName, quaternion) {\n        if (this._cacheFloat4(uniformName, quaternion.x, quaternion.y, quaternion.z, quaternion.w)) {\n            if (!this._engine.setFloat4(this._uniforms[uniformName], quaternion.x, quaternion.y, quaternion.z, quaternion.w)) {\n                this._valueCache[uniformName] = null;\n            }\n        }\n    }\n    /**\n     * Sets a float4 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param x First float in float4.\n     * @param y Second float in float4.\n     * @param z Third float in float4.\n     * @param w Fourth float in float4.\n     * @returns this effect.\n     */\n    setFloat4(uniformName, x, y, z, w) {\n        if (this._cacheFloat4(uniformName, x, y, z, w)) {\n            if (!this._engine.setFloat4(this._uniforms[uniformName], x, y, z, w)) {\n                this._valueCache[uniformName] = null;\n            }\n        }\n    }\n    /**\n     * Sets a Color3 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param color3 Value to be set.\n     */\n    setColor3(uniformName, color3) {\n        if (this._cacheFloat3(uniformName, color3.r, color3.g, color3.b)) {\n            if (!this._engine.setFloat3(this._uniforms[uniformName], color3.r, color3.g, color3.b)) {\n                this._valueCache[uniformName] = null;\n            }\n        }\n    }\n    /**\n     * Sets a Color4 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param color3 Value to be set.\n     * @param alpha Alpha value to be set.\n     */\n    setColor4(uniformName, color3, alpha) {\n        if (this._cacheFloat4(uniformName, color3.r, color3.g, color3.b, alpha)) {\n            if (!this._engine.setFloat4(this._uniforms[uniformName], color3.r, color3.g, color3.b, alpha)) {\n                this._valueCache[uniformName] = null;\n            }\n        }\n    }\n    /**\n     * Sets a Color4 on a uniform variable\n     * @param uniformName defines the name of the variable\n     * @param color4 defines the value to be set\n     */\n    setDirectColor4(uniformName, color4) {\n        if (this._cacheFloat4(uniformName, color4.r, color4.g, color4.b, color4.a)) {\n            if (!this._engine.setFloat4(this._uniforms[uniformName], color4.r, color4.g, color4.b, color4.a)) {\n                this._valueCache[uniformName] = null;\n            }\n        }\n    }\n}\n//# sourceMappingURL=nativePipelineContext.js.map","import { RenderTargetWrapper } from \"../renderTargetWrapper.js\";\nexport class NativeRenderTargetWrapper extends RenderTargetWrapper {\n    get _framebuffer() {\n        return this.__framebuffer;\n    }\n    set _framebuffer(framebuffer) {\n        if (this.__framebuffer) {\n            this._engine._releaseFramebufferObjects(this.__framebuffer);\n        }\n        this.__framebuffer = framebuffer;\n    }\n    get _framebufferDepthStencil() {\n        return this.__framebufferDepthStencil;\n    }\n    set _framebufferDepthStencil(framebufferDepthStencil) {\n        if (this.__framebufferDepthStencil) {\n            this._engine._releaseFramebufferObjects(this.__framebufferDepthStencil);\n        }\n        this.__framebufferDepthStencil = framebufferDepthStencil;\n    }\n    constructor(isMulti, isCube, size, engine) {\n        super(isMulti, isCube, size, engine);\n        this.__framebuffer = null;\n        this.__framebufferDepthStencil = null;\n        this._engine = engine;\n    }\n    dispose(disposeOnlyFramebuffers = false) {\n        this._framebuffer = null;\n        this._framebufferDepthStencil = null;\n        super.dispose(disposeOnlyFramebuffers);\n    }\n}\n//# sourceMappingURL=nativeRenderTargetWrapper.js.map","import { EscapeRegExp, ExtractBetweenMarkers, FindBackward, IsIdentifierChar, RemoveComments, SkipWhitespaces } from \"../../Misc/codeStringParsingTools.js\";\n/**\n * Class used to inline functions in shader code\n */\nexport class ShaderCodeInliner {\n    /** Gets the code after the inlining process */\n    get code() {\n        return this._sourceCode;\n    }\n    /**\n     * Initializes the inliner\n     * @param sourceCode shader code source to inline\n     * @param numMaxIterations maximum number of iterations (used to detect recursive calls)\n     */\n    constructor(sourceCode, numMaxIterations = 20) {\n        /** Gets or sets the debug mode */\n        this.debug = false;\n        this._sourceCode = sourceCode;\n        this._numMaxIterations = numMaxIterations;\n        this._functionDescr = [];\n        this.inlineToken = \"#define inline\";\n    }\n    /**\n     * Start the processing of the shader code\n     */\n    processCode() {\n        if (this.debug) {\n            console.log(`Start inlining process (code size=${this._sourceCode.length})...`);\n        }\n        this._collectFunctions();\n        this._processInlining(this._numMaxIterations);\n        if (this.debug) {\n            console.log(\"End of inlining process.\");\n        }\n    }\n    _collectFunctions() {\n        let startIndex = 0;\n        while (startIndex < this._sourceCode.length) {\n            // locate the function to inline and extract its name\n            const inlineTokenIndex = this._sourceCode.indexOf(this.inlineToken, startIndex);\n            if (inlineTokenIndex < 0) {\n                break;\n            }\n            const funcParamsStartIndex = this._sourceCode.indexOf(\"(\", inlineTokenIndex + this.inlineToken.length);\n            if (funcParamsStartIndex < 0) {\n                if (this.debug) {\n                    console.warn(`Could not find the opening parenthesis after the token. startIndex=${startIndex}`);\n                }\n                startIndex = inlineTokenIndex + this.inlineToken.length;\n                continue;\n            }\n            const funcNameMatch = ShaderCodeInliner._RegexpFindFunctionNameAndType.exec(this._sourceCode.substring(inlineTokenIndex + this.inlineToken.length, funcParamsStartIndex));\n            if (!funcNameMatch) {\n                if (this.debug) {\n                    console.warn(`Could not extract the name/type of the function from: ${this._sourceCode.substring(inlineTokenIndex + this.inlineToken.length, funcParamsStartIndex)}`);\n                }\n                startIndex = inlineTokenIndex + this.inlineToken.length;\n                continue;\n            }\n            const [funcType, funcName] = [funcNameMatch[3], funcNameMatch[4]];\n            // extract the parameters of the function as a whole string (without the leading / trailing parenthesis)\n            const funcParamsEndIndex = ExtractBetweenMarkers(\"(\", \")\", this._sourceCode, funcParamsStartIndex);\n            if (funcParamsEndIndex < 0) {\n                if (this.debug) {\n                    console.warn(`Could not extract the parameters the function '${funcName}' (type=${funcType}). funcParamsStartIndex=${funcParamsStartIndex}`);\n                }\n                startIndex = inlineTokenIndex + this.inlineToken.length;\n                continue;\n            }\n            const funcParams = this._sourceCode.substring(funcParamsStartIndex + 1, funcParamsEndIndex);\n            // extract the body of the function (with the curly brackets)\n            const funcBodyStartIndex = SkipWhitespaces(this._sourceCode, funcParamsEndIndex + 1);\n            if (funcBodyStartIndex === this._sourceCode.length) {\n                if (this.debug) {\n                    console.warn(`Could not extract the body of the function '${funcName}' (type=${funcType}). funcParamsEndIndex=${funcParamsEndIndex}`);\n                }\n                startIndex = inlineTokenIndex + this.inlineToken.length;\n                continue;\n            }\n            const funcBodyEndIndex = ExtractBetweenMarkers(\"{\", \"}\", this._sourceCode, funcBodyStartIndex);\n            if (funcBodyEndIndex < 0) {\n                if (this.debug) {\n                    console.warn(`Could not extract the body of the function '${funcName}' (type=${funcType}). funcBodyStartIndex=${funcBodyStartIndex}`);\n                }\n                startIndex = inlineTokenIndex + this.inlineToken.length;\n                continue;\n            }\n            const funcBody = this._sourceCode.substring(funcBodyStartIndex, funcBodyEndIndex + 1);\n            // process the parameters: extract each names\n            const params = RemoveComments(funcParams).split(\",\");\n            const paramNames = [];\n            for (let p = 0; p < params.length; ++p) {\n                const param = params[p].trim();\n                const idx = param.lastIndexOf(\" \");\n                if (idx >= 0) {\n                    paramNames.push(param.substring(idx + 1));\n                }\n            }\n            if (funcType !== \"void\") {\n                // for functions that return a value, we will replace \"return\" by \"tempvarname = \", tempvarname being a unique generated name\n                paramNames.push(\"return\");\n            }\n            // collect the function\n            this._functionDescr.push({\n                name: funcName,\n                type: funcType,\n                parameters: paramNames,\n                body: funcBody,\n                callIndex: 0,\n            });\n            startIndex = funcBodyEndIndex + 1;\n            // remove the function from the source code\n            const partBefore = inlineTokenIndex > 0 ? this._sourceCode.substring(0, inlineTokenIndex) : \"\";\n            const partAfter = funcBodyEndIndex + 1 < this._sourceCode.length - 1 ? this._sourceCode.substring(funcBodyEndIndex + 1) : \"\";\n            this._sourceCode = partBefore + partAfter;\n            startIndex -= funcBodyEndIndex + 1 - inlineTokenIndex;\n        }\n        if (this.debug) {\n            console.log(`Collect functions: ${this._functionDescr.length} functions found. functionDescr=`, this._functionDescr);\n        }\n    }\n    _processInlining(numMaxIterations = 20) {\n        while (numMaxIterations-- >= 0) {\n            if (!this._replaceFunctionCallsByCode()) {\n                break;\n            }\n        }\n        if (this.debug) {\n            console.log(`numMaxIterations is ${numMaxIterations} after inlining process`);\n        }\n        return numMaxIterations >= 0;\n    }\n    _replaceFunctionCallsByCode() {\n        let doAgain = false;\n        for (const func of this._functionDescr) {\n            const { name, type, parameters, body } = func;\n            let startIndex = 0;\n            while (startIndex < this._sourceCode.length) {\n                // Look for the function name in the source code\n                const functionCallIndex = this._sourceCode.indexOf(name, startIndex);\n                if (functionCallIndex < 0) {\n                    break;\n                }\n                // Make sure \"name\" is not part of a bigger string\n                if (functionCallIndex === 0 || IsIdentifierChar(this._sourceCode.charAt(functionCallIndex - 1))) {\n                    startIndex = functionCallIndex + name.length;\n                    continue;\n                }\n                // Find the opening parenthesis\n                const callParamsStartIndex = SkipWhitespaces(this._sourceCode, functionCallIndex + name.length);\n                if (callParamsStartIndex === this._sourceCode.length || this._sourceCode.charAt(callParamsStartIndex) !== \"(\") {\n                    startIndex = functionCallIndex + name.length;\n                    continue;\n                }\n                // extract the parameters of the function call as a whole string (without the leading / trailing parenthesis)\n                const callParamsEndIndex = ExtractBetweenMarkers(\"(\", \")\", this._sourceCode, callParamsStartIndex);\n                if (callParamsEndIndex < 0) {\n                    if (this.debug) {\n                        console.warn(`Could not extract the parameters of the function call. Function '${name}' (type=${type}). callParamsStartIndex=${callParamsStartIndex}`);\n                    }\n                    startIndex = functionCallIndex + name.length;\n                    continue;\n                }\n                const callParams = this._sourceCode.substring(callParamsStartIndex + 1, callParamsEndIndex);\n                // process the parameter call: extract each names\n                // this function split the parameter list used in the function call at ',' boundaries by taking care of potential parenthesis like in:\n                //      myfunc(a, vec2(1., 0.), 4.)\n                const splitParameterCall = (s) => {\n                    const parameters = [];\n                    let curIdx = 0, startParamIdx = 0;\n                    while (curIdx < s.length) {\n                        if (s.charAt(curIdx) === \"(\") {\n                            const idx2 = ExtractBetweenMarkers(\"(\", \")\", s, curIdx);\n                            if (idx2 < 0) {\n                                return null;\n                            }\n                            curIdx = idx2;\n                        }\n                        else if (s.charAt(curIdx) === \",\") {\n                            parameters.push(s.substring(startParamIdx, curIdx));\n                            startParamIdx = curIdx + 1;\n                        }\n                        curIdx++;\n                    }\n                    if (startParamIdx < curIdx) {\n                        parameters.push(s.substring(startParamIdx, curIdx));\n                    }\n                    return parameters;\n                };\n                const params = splitParameterCall(RemoveComments(callParams));\n                if (params === null) {\n                    if (this.debug) {\n                        console.warn(`Invalid function call: can't extract the parameters of the function call. Function '${name}' (type=${type}). callParamsStartIndex=${callParamsStartIndex}, callParams=` +\n                            callParams);\n                    }\n                    startIndex = functionCallIndex + name.length;\n                    continue;\n                }\n                const paramNames = [];\n                for (let p = 0; p < params.length; ++p) {\n                    const param = params[p].trim();\n                    paramNames.push(param);\n                }\n                const retParamName = type !== \"void\" ? name + \"_\" + func.callIndex++ : null;\n                if (retParamName) {\n                    paramNames.push(retParamName + \" =\");\n                }\n                if (paramNames.length !== parameters.length) {\n                    if (this.debug) {\n                        console.warn(`Invalid function call: not the same number of parameters for the call than the number expected by the function. Function '${name}' (type=${type}). function parameters=${parameters}, call parameters=${paramNames}`);\n                    }\n                    startIndex = functionCallIndex + name.length;\n                    continue;\n                }\n                startIndex = callParamsEndIndex + 1;\n                // replace the function call by the body function\n                const funcBody = this._replaceNames(body, parameters, paramNames);\n                let partBefore = functionCallIndex > 0 ? this._sourceCode.substring(0, functionCallIndex) : \"\";\n                const partAfter = callParamsEndIndex + 1 < this._sourceCode.length - 1 ? this._sourceCode.substring(callParamsEndIndex + 1) : \"\";\n                if (retParamName) {\n                    // case where the function returns a value. We generate:\n                    // FUNCTYPE retParamName;\n                    // {function body}\n                    // and replace the function call by retParamName\n                    const injectDeclarationIndex = FindBackward(this._sourceCode, functionCallIndex - 1, \"\\n\");\n                    partBefore = this._sourceCode.substring(0, injectDeclarationIndex + 1);\n                    const partBetween = this._sourceCode.substring(injectDeclarationIndex + 1, functionCallIndex);\n                    this._sourceCode = partBefore + type + \" \" + retParamName + \";\\n\" + funcBody + \"\\n\" + partBetween + retParamName + partAfter;\n                    if (this.debug) {\n                        console.log(`Replace function call by code. Function '${name}' (type=${type}). injectDeclarationIndex=${injectDeclarationIndex}, call parameters=${paramNames}`);\n                    }\n                }\n                else {\n                    // simple case where the return value of the function is \"void\"\n                    this._sourceCode = partBefore + funcBody + partAfter;\n                    startIndex += funcBody.length - (callParamsEndIndex + 1 - functionCallIndex);\n                    if (this.debug) {\n                        console.log(`Replace function call by code. Function '${name}' (type=${type}). functionCallIndex=${functionCallIndex}, call parameters=${paramNames}`);\n                    }\n                }\n                doAgain = true;\n            }\n        }\n        return doAgain;\n    }\n    _replaceNames(code, sources, destinations) {\n        for (let i = 0; i < sources.length; ++i) {\n            const source = new RegExp(EscapeRegExp(sources[i]), \"g\"), sourceLen = sources[i].length, destination = destinations[i];\n            code = code.replace(source, (match, ...args) => {\n                const offset = args[0];\n                // Make sure \"source\" is not part of a bigger identifier (for eg, if source=view and we matched it with viewDirection)\n                if (IsIdentifierChar(code.charAt(offset - 1)) || IsIdentifierChar(code.charAt(offset + sourceLen))) {\n                    return sources[i];\n                }\n                return destination;\n            });\n        }\n        return code;\n    }\n}\nShaderCodeInliner._RegexpFindFunctionNameAndType = /((\\s+?)(\\w+)\\s+(\\w+)\\s*?)$/;\n//# sourceMappingURL=shaderCodeInliner.js.map","const defaultAttributeKeywordName = \"attribute\";\nconst defaultVaryingKeywordName = \"varying\";\n/** @internal */\nexport class ShaderCodeNode {\n    constructor() {\n        this.children = [];\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isValid(preprocessors) {\n        return true;\n    }\n    process(preprocessors, options) {\n        var _a, _b, _c, _d, _e, _f;\n        let result = \"\";\n        if (this.line) {\n            let value = this.line;\n            const processor = options.processor;\n            if (processor) {\n                // This must be done before other replacements to avoid mistakenly changing something that was already changed.\n                if (processor.lineProcessor) {\n                    value = processor.lineProcessor(value, options.isFragment, options.processingContext);\n                }\n                const attributeKeyword = (_b = (_a = options.processor) === null || _a === void 0 ? void 0 : _a.attributeKeywordName) !== null && _b !== void 0 ? _b : defaultAttributeKeywordName;\n                const varyingKeyword = options.isFragment && ((_c = options.processor) === null || _c === void 0 ? void 0 : _c.varyingFragmentKeywordName)\n                    ? (_d = options.processor) === null || _d === void 0 ? void 0 : _d.varyingFragmentKeywordName\n                    : !options.isFragment && ((_e = options.processor) === null || _e === void 0 ? void 0 : _e.varyingVertexKeywordName)\n                        ? (_f = options.processor) === null || _f === void 0 ? void 0 : _f.varyingVertexKeywordName\n                        : defaultVaryingKeywordName;\n                if (!options.isFragment && processor.attributeProcessor && this.line.startsWith(attributeKeyword)) {\n                    value = processor.attributeProcessor(this.line, preprocessors, options.processingContext);\n                }\n                else if (processor.varyingProcessor && this.line.startsWith(varyingKeyword)) {\n                    value = processor.varyingProcessor(this.line, options.isFragment, preprocessors, options.processingContext);\n                }\n                else if (processor.uniformProcessor && processor.uniformRegexp && processor.uniformRegexp.test(this.line)) {\n                    if (!options.lookForClosingBracketForUniformBuffer) {\n                        value = processor.uniformProcessor(this.line, options.isFragment, preprocessors, options.processingContext);\n                    }\n                }\n                else if (processor.uniformBufferProcessor && processor.uniformBufferRegexp && processor.uniformBufferRegexp.test(this.line)) {\n                    if (!options.lookForClosingBracketForUniformBuffer) {\n                        value = processor.uniformBufferProcessor(this.line, options.isFragment, options.processingContext);\n                        options.lookForClosingBracketForUniformBuffer = true;\n                    }\n                }\n                else if (processor.textureProcessor && processor.textureRegexp && processor.textureRegexp.test(this.line)) {\n                    value = processor.textureProcessor(this.line, options.isFragment, preprocessors, options.processingContext);\n                }\n                else if ((processor.uniformProcessor || processor.uniformBufferProcessor) && this.line.startsWith(\"uniform\") && !options.lookForClosingBracketForUniformBuffer) {\n                    const regex = /uniform\\s+(?:(?:highp)?|(?:lowp)?)\\s*(\\S+)\\s+(\\S+)\\s*;/;\n                    if (regex.test(this.line)) {\n                        // uniform\n                        if (processor.uniformProcessor) {\n                            value = processor.uniformProcessor(this.line, options.isFragment, preprocessors, options.processingContext);\n                        }\n                    }\n                    else {\n                        // Uniform buffer\n                        if (processor.uniformBufferProcessor) {\n                            value = processor.uniformBufferProcessor(this.line, options.isFragment, options.processingContext);\n                            options.lookForClosingBracketForUniformBuffer = true;\n                        }\n                    }\n                }\n                if (options.lookForClosingBracketForUniformBuffer && this.line.indexOf(\"}\") !== -1) {\n                    options.lookForClosingBracketForUniformBuffer = false;\n                    if (processor.endOfUniformBufferProcessor) {\n                        value = processor.endOfUniformBufferProcessor(this.line, options.isFragment, options.processingContext);\n                    }\n                }\n            }\n            result += value + \"\\r\\n\";\n        }\n        this.children.forEach((child) => {\n            result += child.process(preprocessors, options);\n        });\n        if (this.additionalDefineKey) {\n            preprocessors[this.additionalDefineKey] = this.additionalDefineValue || \"true\";\n        }\n        return result;\n    }\n}\n//# sourceMappingURL=shaderCodeNode.js.map","/** @internal */\nexport class ShaderCodeCursor {\n    constructor() {\n        this._lines = [];\n    }\n    get currentLine() {\n        return this._lines[this.lineIndex];\n    }\n    get canRead() {\n        return this.lineIndex < this._lines.length - 1;\n    }\n    set lines(value) {\n        this._lines.length = 0;\n        for (const line of value) {\n            // Prevent removing line break in macros.\n            if (line[0] === \"#\") {\n                this._lines.push(line);\n                continue;\n            }\n            // Do not split single line comments\n            if (line.trim().startsWith(\"//\")) {\n                this._lines.push(line);\n                continue;\n            }\n            const split = line.split(\";\");\n            for (let index = 0; index < split.length; index++) {\n                let subLine = split[index];\n                subLine = subLine.trim();\n                if (!subLine) {\n                    continue;\n                }\n                this._lines.push(subLine + (index !== split.length - 1 ? \";\" : \"\"));\n            }\n        }\n    }\n}\n//# sourceMappingURL=shaderCodeCursor.js.map","import { ShaderCodeNode } from \"./shaderCodeNode.js\";\n/** @internal */\nexport class ShaderCodeConditionNode extends ShaderCodeNode {\n    process(preprocessors, options) {\n        for (let index = 0; index < this.children.length; index++) {\n            const node = this.children[index];\n            if (node.isValid(preprocessors)) {\n                return node.process(preprocessors, options);\n            }\n        }\n        return \"\";\n    }\n}\n//# sourceMappingURL=shaderCodeConditionNode.js.map","import { ShaderCodeNode } from \"./shaderCodeNode.js\";\n/** @internal */\nexport class ShaderCodeTestNode extends ShaderCodeNode {\n    isValid(preprocessors) {\n        return this.testExpression.isTrue(preprocessors);\n    }\n}\n//# sourceMappingURL=shaderCodeTestNode.js.map","/* eslint-disable @typescript-eslint/naming-convention */\n/** @internal */\nexport class ShaderDefineExpression {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isTrue(preprocessors) {\n        return true;\n    }\n    static postfixToInfix(postfix) {\n        const stack = [];\n        for (const c of postfix) {\n            if (ShaderDefineExpression._OperatorPriority[c] === undefined) {\n                stack.push(c);\n            }\n            else {\n                const v1 = stack[stack.length - 1], v2 = stack[stack.length - 2];\n                stack.length -= 2;\n                stack.push(`(${v2}${c}${v1})`);\n            }\n        }\n        return stack[stack.length - 1];\n    }\n    static infixToPostfix(infix) {\n        const result = [];\n        let stackIdx = -1;\n        const pushOperand = () => {\n            operand = operand.trim();\n            if (operand !== \"\") {\n                result.push(operand);\n                operand = \"\";\n            }\n        };\n        const push = (s) => {\n            if (stackIdx < ShaderDefineExpression._Stack.length - 1) {\n                ShaderDefineExpression._Stack[++stackIdx] = s;\n            }\n        };\n        const peek = () => ShaderDefineExpression._Stack[stackIdx];\n        const pop = () => (stackIdx === -1 ? \"!!INVALID EXPRESSION!!\" : ShaderDefineExpression._Stack[stackIdx--]);\n        let idx = 0, operand = \"\";\n        while (idx < infix.length) {\n            const c = infix.charAt(idx), token = idx < infix.length - 1 ? infix.substr(idx, 2) : \"\";\n            if (c === \"(\") {\n                operand = \"\";\n                push(c);\n            }\n            else if (c === \")\") {\n                pushOperand();\n                while (stackIdx !== -1 && peek() !== \"(\") {\n                    result.push(pop());\n                }\n                pop();\n            }\n            else if (ShaderDefineExpression._OperatorPriority[token] > 1) {\n                pushOperand();\n                while (stackIdx !== -1 && ShaderDefineExpression._OperatorPriority[peek()] >= ShaderDefineExpression._OperatorPriority[token]) {\n                    result.push(pop());\n                }\n                push(token);\n                idx++;\n            }\n            else {\n                operand += c;\n            }\n            idx++;\n        }\n        pushOperand();\n        while (stackIdx !== -1) {\n            if (peek() === \"(\") {\n                pop();\n            }\n            else {\n                result.push(pop());\n            }\n        }\n        return result;\n    }\n}\nShaderDefineExpression._OperatorPriority = {\n    \")\": 0,\n    \"(\": 1,\n    \"||\": 2,\n    \"&&\": 3,\n};\nShaderDefineExpression._Stack = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\n//# sourceMappingURL=shaderDefineExpression.js.map","import { ShaderDefineExpression } from \"../shaderDefineExpression.js\";\n/** @internal */\nexport class ShaderDefineIsDefinedOperator extends ShaderDefineExpression {\n    constructor(define, not = false) {\n        super();\n        this.define = define;\n        this.not = not;\n    }\n    isTrue(preprocessors) {\n        let condition = preprocessors[this.define] !== undefined;\n        if (this.not) {\n            condition = !condition;\n        }\n        return condition;\n    }\n}\n//# sourceMappingURL=shaderDefineIsDefinedOperator.js.map","import { ShaderDefineExpression } from \"../shaderDefineExpression.js\";\n/** @internal */\nexport class ShaderDefineOrOperator extends ShaderDefineExpression {\n    isTrue(preprocessors) {\n        return this.leftOperand.isTrue(preprocessors) || this.rightOperand.isTrue(preprocessors);\n    }\n}\n//# sourceMappingURL=shaderDefineOrOperator.js.map","import { ShaderDefineExpression } from \"../shaderDefineExpression.js\";\n/** @internal */\nexport class ShaderDefineAndOperator extends ShaderDefineExpression {\n    isTrue(preprocessors) {\n        return this.leftOperand.isTrue(preprocessors) && this.rightOperand.isTrue(preprocessors);\n    }\n}\n//# sourceMappingURL=shaderDefineAndOperator.js.map","import { ShaderDefineExpression } from \"../shaderDefineExpression.js\";\n/** @internal */\nexport class ShaderDefineArithmeticOperator extends ShaderDefineExpression {\n    constructor(define, operand, testValue) {\n        super();\n        this.define = define;\n        this.operand = operand;\n        this.testValue = testValue;\n    }\n    isTrue(preprocessors) {\n        let value = preprocessors[this.define];\n        if (value === undefined) {\n            value = this.define;\n        }\n        let condition = false;\n        const left = parseInt(value);\n        const right = parseInt(this.testValue);\n        switch (this.operand) {\n            case \">\":\n                condition = left > right;\n                break;\n            case \"<\":\n                condition = left < right;\n                break;\n            case \"<=\":\n                condition = left <= right;\n                break;\n            case \">=\":\n                condition = left >= right;\n                break;\n            case \"==\":\n                condition = left === right;\n                break;\n        }\n        return condition;\n    }\n}\n//# sourceMappingURL=shaderDefineArithmeticOperator.js.map","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { ShaderCodeNode } from \"./shaderCodeNode.js\";\nimport { ShaderCodeCursor } from \"./shaderCodeCursor.js\";\nimport { ShaderCodeConditionNode } from \"./shaderCodeConditionNode.js\";\nimport { ShaderCodeTestNode } from \"./shaderCodeTestNode.js\";\nimport { ShaderDefineIsDefinedOperator } from \"./Expressions/Operators/shaderDefineIsDefinedOperator.js\";\nimport { ShaderDefineOrOperator } from \"./Expressions/Operators/shaderDefineOrOperator.js\";\nimport { ShaderDefineAndOperator } from \"./Expressions/Operators/shaderDefineAndOperator.js\";\nimport { ShaderDefineExpression } from \"./Expressions/shaderDefineExpression.js\";\nimport { ShaderDefineArithmeticOperator } from \"./Expressions/Operators/shaderDefineArithmeticOperator.js\";\nimport { _WarnImport } from \"../../Misc/devTools.js\";\nimport { ShaderLanguage } from \"../../Materials/shaderLanguage.js\";\nconst regexSE = /defined\\s*?\\((.+?)\\)/g;\nconst regexSERevert = /defined\\s*?\\[(.+?)\\]/g;\nconst regexShaderInclude = /#include\\s?<(.+)>(\\((.*)\\))*(\\[(.*)\\])*/g;\n/** @internal */\nexport class ShaderProcessor {\n    static Initialize(options) {\n        if (options.processor && options.processor.initializeShaders) {\n            options.processor.initializeShaders(options.processingContext);\n        }\n    }\n    static Process(sourceCode, options, callback, engine) {\n        var _a;\n        if ((_a = options.processor) === null || _a === void 0 ? void 0 : _a.preProcessShaderCode) {\n            sourceCode = options.processor.preProcessShaderCode(sourceCode, options.isFragment);\n        }\n        this._ProcessIncludes(sourceCode, options, (codeWithIncludes) => {\n            if (options.processCodeAfterIncludes) {\n                codeWithIncludes = options.processCodeAfterIncludes(options.isFragment ? \"fragment\" : \"vertex\", codeWithIncludes);\n            }\n            const migratedCode = this._ProcessShaderConversion(codeWithIncludes, options, engine);\n            callback(migratedCode, codeWithIncludes);\n        });\n    }\n    static PreProcess(sourceCode, options, callback, engine) {\n        var _a;\n        if ((_a = options.processor) === null || _a === void 0 ? void 0 : _a.preProcessShaderCode) {\n            sourceCode = options.processor.preProcessShaderCode(sourceCode, options.isFragment);\n        }\n        this._ProcessIncludes(sourceCode, options, (codeWithIncludes) => {\n            if (options.processCodeAfterIncludes) {\n                codeWithIncludes = options.processCodeAfterIncludes(options.isFragment ? \"fragment\" : \"vertex\", codeWithIncludes);\n            }\n            const migratedCode = this._ApplyPreProcessing(codeWithIncludes, options, engine);\n            callback(migratedCode, codeWithIncludes);\n        });\n    }\n    static Finalize(vertexCode, fragmentCode, options) {\n        if (!options.processor || !options.processor.finalizeShaders) {\n            return { vertexCode, fragmentCode };\n        }\n        return options.processor.finalizeShaders(vertexCode, fragmentCode, options.processingContext);\n    }\n    static _ProcessPrecision(source, options) {\n        var _a;\n        if ((_a = options.processor) === null || _a === void 0 ? void 0 : _a.noPrecision) {\n            return source;\n        }\n        const shouldUseHighPrecisionShader = options.shouldUseHighPrecisionShader;\n        if (source.indexOf(\"precision highp float\") === -1) {\n            if (!shouldUseHighPrecisionShader) {\n                source = \"precision mediump float;\\n\" + source;\n            }\n            else {\n                source = \"precision highp float;\\n\" + source;\n            }\n        }\n        else {\n            if (!shouldUseHighPrecisionShader) {\n                // Moving highp to mediump\n                source = source.replace(\"precision highp float\", \"precision mediump float\");\n            }\n        }\n        return source;\n    }\n    static _ExtractOperation(expression) {\n        const regex = /defined\\((.+)\\)/;\n        const match = regex.exec(expression);\n        if (match && match.length) {\n            return new ShaderDefineIsDefinedOperator(match[1].trim(), expression[0] === \"!\");\n        }\n        const operators = [\"==\", \">=\", \"<=\", \"<\", \">\"];\n        let operator = \"\";\n        let indexOperator = 0;\n        for (operator of operators) {\n            indexOperator = expression.indexOf(operator);\n            if (indexOperator > -1) {\n                break;\n            }\n        }\n        if (indexOperator === -1) {\n            return new ShaderDefineIsDefinedOperator(expression);\n        }\n        const define = expression.substring(0, indexOperator).trim();\n        const value = expression.substring(indexOperator + operator.length).trim();\n        return new ShaderDefineArithmeticOperator(define, operator, value);\n    }\n    static _BuildSubExpression(expression) {\n        expression = expression.replace(regexSE, \"defined[$1]\");\n        const postfix = ShaderDefineExpression.infixToPostfix(expression);\n        const stack = [];\n        for (const c of postfix) {\n            if (c !== \"||\" && c !== \"&&\") {\n                stack.push(c);\n            }\n            else if (stack.length >= 2) {\n                let v1 = stack[stack.length - 1], v2 = stack[stack.length - 2];\n                stack.length -= 2;\n                const operator = c == \"&&\" ? new ShaderDefineAndOperator() : new ShaderDefineOrOperator();\n                if (typeof v1 === \"string\") {\n                    v1 = v1.replace(regexSERevert, \"defined($1)\");\n                }\n                if (typeof v2 === \"string\") {\n                    v2 = v2.replace(regexSERevert, \"defined($1)\");\n                }\n                operator.leftOperand = typeof v2 === \"string\" ? this._ExtractOperation(v2) : v2;\n                operator.rightOperand = typeof v1 === \"string\" ? this._ExtractOperation(v1) : v1;\n                stack.push(operator);\n            }\n        }\n        let result = stack[stack.length - 1];\n        if (typeof result === \"string\") {\n            result = result.replace(regexSERevert, \"defined($1)\");\n        }\n        // note: stack.length !== 1 if there was an error in the parsing\n        return typeof result === \"string\" ? this._ExtractOperation(result) : result;\n    }\n    static _BuildExpression(line, start) {\n        const node = new ShaderCodeTestNode();\n        const command = line.substring(0, start);\n        let expression = line.substring(start);\n        expression = expression.substring(0, (expression.indexOf(\"//\") + 1 || expression.length + 1) - 1).trim();\n        if (command === \"#ifdef\") {\n            node.testExpression = new ShaderDefineIsDefinedOperator(expression);\n        }\n        else if (command === \"#ifndef\") {\n            node.testExpression = new ShaderDefineIsDefinedOperator(expression, true);\n        }\n        else {\n            node.testExpression = this._BuildSubExpression(expression);\n        }\n        return node;\n    }\n    static _MoveCursorWithinIf(cursor, rootNode, ifNode) {\n        let line = cursor.currentLine;\n        while (this._MoveCursor(cursor, ifNode)) {\n            line = cursor.currentLine;\n            const first5 = line.substring(0, 5).toLowerCase();\n            if (first5 === \"#else\") {\n                const elseNode = new ShaderCodeNode();\n                rootNode.children.push(elseNode);\n                this._MoveCursor(cursor, elseNode);\n                return;\n            }\n            else if (first5 === \"#elif\") {\n                const elifNode = this._BuildExpression(line, 5);\n                rootNode.children.push(elifNode);\n                ifNode = elifNode;\n            }\n        }\n    }\n    static _MoveCursor(cursor, rootNode) {\n        while (cursor.canRead) {\n            cursor.lineIndex++;\n            const line = cursor.currentLine;\n            const keywords = /(#ifdef)|(#else)|(#elif)|(#endif)|(#ifndef)|(#if)/;\n            const matches = keywords.exec(line);\n            if (matches && matches.length) {\n                const keyword = matches[0];\n                switch (keyword) {\n                    case \"#ifdef\": {\n                        const newRootNode = new ShaderCodeConditionNode();\n                        rootNode.children.push(newRootNode);\n                        const ifNode = this._BuildExpression(line, 6);\n                        newRootNode.children.push(ifNode);\n                        this._MoveCursorWithinIf(cursor, newRootNode, ifNode);\n                        break;\n                    }\n                    case \"#else\":\n                    case \"#elif\":\n                        return true;\n                    case \"#endif\":\n                        return false;\n                    case \"#ifndef\": {\n                        const newRootNode = new ShaderCodeConditionNode();\n                        rootNode.children.push(newRootNode);\n                        const ifNode = this._BuildExpression(line, 7);\n                        newRootNode.children.push(ifNode);\n                        this._MoveCursorWithinIf(cursor, newRootNode, ifNode);\n                        break;\n                    }\n                    case \"#if\": {\n                        const newRootNode = new ShaderCodeConditionNode();\n                        const ifNode = this._BuildExpression(line, 3);\n                        rootNode.children.push(newRootNode);\n                        newRootNode.children.push(ifNode);\n                        this._MoveCursorWithinIf(cursor, newRootNode, ifNode);\n                        break;\n                    }\n                }\n            }\n            else {\n                const newNode = new ShaderCodeNode();\n                newNode.line = line;\n                rootNode.children.push(newNode);\n                // Detect additional defines\n                if (line[0] === \"#\" && line[1] === \"d\") {\n                    const split = line.replace(\";\", \"\").split(\" \");\n                    newNode.additionalDefineKey = split[1];\n                    if (split.length === 3) {\n                        newNode.additionalDefineValue = split[2];\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    static _EvaluatePreProcessors(sourceCode, preprocessors, options) {\n        const rootNode = new ShaderCodeNode();\n        const cursor = new ShaderCodeCursor();\n        cursor.lineIndex = -1;\n        cursor.lines = sourceCode.split(\"\\n\");\n        // Decompose (We keep it in 2 steps so it is easier to maintain and perf hit is insignificant)\n        this._MoveCursor(cursor, rootNode);\n        // Recompose\n        return rootNode.process(preprocessors, options);\n    }\n    static _PreparePreProcessors(options, engine) {\n        var _a;\n        const defines = options.defines;\n        const preprocessors = {};\n        for (const define of defines) {\n            const keyValue = define.replace(\"#define\", \"\").replace(\";\", \"\").trim();\n            const split = keyValue.split(\" \");\n            preprocessors[split[0]] = split.length > 1 ? split[1] : \"\";\n        }\n        if (((_a = options.processor) === null || _a === void 0 ? void 0 : _a.shaderLanguage) === ShaderLanguage.GLSL) {\n            preprocessors[\"GL_ES\"] = \"true\";\n        }\n        preprocessors[\"__VERSION__\"] = options.version;\n        preprocessors[options.platformName] = \"true\";\n        engine._getGlobalDefines(preprocessors);\n        return preprocessors;\n    }\n    static _ProcessShaderConversion(sourceCode, options, engine) {\n        let preparedSourceCode = this._ProcessPrecision(sourceCode, options);\n        if (!options.processor) {\n            return preparedSourceCode;\n        }\n        // Already converted\n        if (options.processor.shaderLanguage === ShaderLanguage.GLSL && preparedSourceCode.indexOf(\"#version 3\") !== -1) {\n            preparedSourceCode = preparedSourceCode.replace(\"#version 300 es\", \"\");\n            if (!options.processor.parseGLES3) {\n                return preparedSourceCode;\n            }\n        }\n        const defines = options.defines;\n        const preprocessors = this._PreparePreProcessors(options, engine);\n        // General pre processing\n        if (options.processor.preProcessor) {\n            preparedSourceCode = options.processor.preProcessor(preparedSourceCode, defines, options.isFragment, options.processingContext);\n        }\n        preparedSourceCode = this._EvaluatePreProcessors(preparedSourceCode, preprocessors, options);\n        // Post processing\n        if (options.processor.postProcessor) {\n            preparedSourceCode = options.processor.postProcessor(preparedSourceCode, defines, options.isFragment, options.processingContext, engine);\n        }\n        // Inline functions tagged with #define inline\n        if (engine._features.needShaderCodeInlining) {\n            preparedSourceCode = engine.inlineShaderCode(preparedSourceCode);\n        }\n        return preparedSourceCode;\n    }\n    static _ApplyPreProcessing(sourceCode, options, engine) {\n        var _a, _b;\n        let preparedSourceCode = sourceCode;\n        const defines = options.defines;\n        const preprocessors = this._PreparePreProcessors(options, engine);\n        // General pre processing\n        if ((_a = options.processor) === null || _a === void 0 ? void 0 : _a.preProcessor) {\n            preparedSourceCode = options.processor.preProcessor(preparedSourceCode, defines, options.isFragment, options.processingContext);\n        }\n        preparedSourceCode = this._EvaluatePreProcessors(preparedSourceCode, preprocessors, options);\n        // Post processing\n        if ((_b = options.processor) === null || _b === void 0 ? void 0 : _b.postProcessor) {\n            preparedSourceCode = options.processor.postProcessor(preparedSourceCode, defines, options.isFragment, options.processingContext, engine);\n        }\n        // Inline functions tagged with #define inline\n        if (engine._features.needShaderCodeInlining) {\n            preparedSourceCode = engine.inlineShaderCode(preparedSourceCode);\n        }\n        return preparedSourceCode;\n    }\n    static _ProcessIncludes(sourceCode, options, callback) {\n        let match = regexShaderInclude.exec(sourceCode);\n        let returnValue = new String(sourceCode);\n        let keepProcessing = false;\n        while (match != null) {\n            let includeFile = match[1];\n            // Uniform declaration\n            if (includeFile.indexOf(\"__decl__\") !== -1) {\n                includeFile = includeFile.replace(/__decl__/, \"\");\n                if (options.supportsUniformBuffers) {\n                    includeFile = includeFile.replace(/Vertex/, \"Ubo\");\n                    includeFile = includeFile.replace(/Fragment/, \"Ubo\");\n                }\n                includeFile = includeFile + \"Declaration\";\n            }\n            if (options.includesShadersStore[includeFile]) {\n                // Substitution\n                let includeContent = options.includesShadersStore[includeFile];\n                if (match[2]) {\n                    const splits = match[3].split(\",\");\n                    for (let index = 0; index < splits.length; index += 2) {\n                        const source = new RegExp(splits[index], \"g\");\n                        const dest = splits[index + 1];\n                        includeContent = includeContent.replace(source, dest);\n                    }\n                }\n                if (match[4]) {\n                    const indexString = match[5];\n                    if (indexString.indexOf(\"..\") !== -1) {\n                        const indexSplits = indexString.split(\"..\");\n                        const minIndex = parseInt(indexSplits[0]);\n                        let maxIndex = parseInt(indexSplits[1]);\n                        let sourceIncludeContent = includeContent.slice(0);\n                        includeContent = \"\";\n                        if (isNaN(maxIndex)) {\n                            maxIndex = options.indexParameters[indexSplits[1]];\n                        }\n                        for (let i = minIndex; i < maxIndex; i++) {\n                            if (!options.supportsUniformBuffers) {\n                                // Ubo replacement\n                                sourceIncludeContent = sourceIncludeContent.replace(/light\\{X\\}.(\\w*)/g, (str, p1) => {\n                                    return p1 + \"{X}\";\n                                });\n                            }\n                            includeContent += sourceIncludeContent.replace(/\\{X\\}/g, i.toString()) + \"\\n\";\n                        }\n                    }\n                    else {\n                        if (!options.supportsUniformBuffers) {\n                            // Ubo replacement\n                            includeContent = includeContent.replace(/light\\{X\\}.(\\w*)/g, (str, p1) => {\n                                return p1 + \"{X}\";\n                            });\n                        }\n                        includeContent = includeContent.replace(/\\{X\\}/g, indexString);\n                    }\n                }\n                // Replace\n                returnValue = returnValue.replace(match[0], includeContent);\n                keepProcessing = keepProcessing || includeContent.indexOf(\"#include<\") >= 0 || includeContent.indexOf(\"#include <\") >= 0;\n            }\n            else {\n                const includeShaderUrl = options.shadersRepository + \"ShadersInclude/\" + includeFile + \".fx\";\n                ShaderProcessor._FileToolsLoadFile(includeShaderUrl, (fileContent) => {\n                    options.includesShadersStore[includeFile] = fileContent;\n                    this._ProcessIncludes(returnValue, options, callback);\n                });\n                return;\n            }\n            match = regexShaderInclude.exec(sourceCode);\n        }\n        if (keepProcessing) {\n            this._ProcessIncludes(returnValue.toString(), options, callback);\n        }\n        else {\n            callback(returnValue);\n        }\n    }\n    /**\n     * Loads a file from a url\n     * @param url url to load\n     * @param onSuccess callback called when the file successfully loads\n     * @param onProgress callback called while file is loading (if the server supports this mode)\n     * @param offlineProvider defines the offline provider for caching\n     * @param useArrayBuffer defines a boolean indicating that date must be returned as ArrayBuffer\n     * @param onError callback called when the file fails to load\n     * @returns a file request object\n     * @internal\n     */\n    static _FileToolsLoadFile(url, onSuccess, onProgress, offlineProvider, useArrayBuffer, onError) {\n        throw _WarnImport(\"FileTools\");\n    }\n}\n//# sourceMappingURL=shaderProcessor.js.map","import { ShaderLanguage } from \"../../Materials/shaderLanguage.js\";\n/** @internal */\nexport class WebGL2ShaderProcessor {\n    constructor() {\n        this.shaderLanguage = ShaderLanguage.GLSL;\n    }\n    attributeProcessor(attribute) {\n        return attribute.replace(\"attribute\", \"in\");\n    }\n    varyingProcessor(varying, isFragment) {\n        return varying.replace(\"varying\", isFragment ? \"in\" : \"out\");\n    }\n    postProcessor(code, defines, isFragment) {\n        const hasDrawBuffersExtension = code.search(/#extension.+GL_EXT_draw_buffers.+require/) !== -1;\n        // Remove extensions\n        const regex = /#extension.+(GL_OVR_multiview2|GL_OES_standard_derivatives|GL_EXT_shader_texture_lod|GL_EXT_frag_depth|GL_EXT_draw_buffers).+(enable|require)/g;\n        code = code.replace(regex, \"\");\n        // Replace instructions\n        code = code.replace(/texture2D\\s*\\(/g, \"texture(\");\n        if (isFragment) {\n            code = code.replace(/texture2DLodEXT\\s*\\(/g, \"textureLod(\");\n            code = code.replace(/textureCubeLodEXT\\s*\\(/g, \"textureLod(\");\n            code = code.replace(/textureCube\\s*\\(/g, \"texture(\");\n            code = code.replace(/gl_FragDepthEXT/g, \"gl_FragDepth\");\n            code = code.replace(/gl_FragColor/g, \"glFragColor\");\n            code = code.replace(/gl_FragData/g, \"glFragData\");\n            code = code.replace(/void\\s+?main\\s*\\(/g, (hasDrawBuffersExtension ? \"\" : \"layout(location = 0) out vec4 glFragColor;\\n\") + \"void main(\");\n        }\n        else {\n            const hasMultiviewExtension = defines.indexOf(\"#define MULTIVIEW\") !== -1;\n            if (hasMultiviewExtension) {\n                return \"#extension GL_OVR_multiview2 : require\\nlayout (num_views = 2) in;\\n\" + code;\n            }\n        }\n        return code;\n    }\n}\n//# sourceMappingURL=webGL2ShaderProcessors.js.map","/** @internal */\nexport class WebGLHardwareTexture {\n    get underlyingResource() {\n        return this._webGLTexture;\n    }\n    constructor(existingTexture = null, context) {\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        this._MSAARenderBuffer = null;\n        this._context = context;\n        if (!existingTexture) {\n            existingTexture = context.createTexture();\n            if (!existingTexture) {\n                throw new Error(\"Unable to create webGL texture\");\n            }\n        }\n        this.set(existingTexture);\n    }\n    setUsage() { }\n    set(hardwareTexture) {\n        this._webGLTexture = hardwareTexture;\n    }\n    reset() {\n        this._webGLTexture = null;\n        this._MSAARenderBuffer = null;\n    }\n    release() {\n        if (this._MSAARenderBuffer) {\n            this._context.deleteRenderbuffer(this._MSAARenderBuffer);\n            this._MSAARenderBuffer = null;\n        }\n        if (this._webGLTexture) {\n            this._context.deleteTexture(this._webGLTexture);\n        }\n        this.reset();\n    }\n}\n//# sourceMappingURL=webGLHardwareTexture.js.map","const floatNCache = [\n    \"Int\",\n    \"Int2\",\n    \"Int3\",\n    \"Int4\",\n    \"UInt\",\n    \"UInt2\",\n    \"UInt3\",\n    \"UInt4\",\n    \"Vector2\",\n    \"Vector3\",\n    \"Vector4\",\n    \"Float2\",\n    \"Float\",\n    \"Float3\",\n    \"Float4\",\n    \"Quaternion\",\n    \"Color3\",\n    \"Color4\",\n    \"DirectColor4\",\n];\n/** @internal */\nexport class WebGLPipelineContext {\n    constructor() {\n        this._valueCache = {};\n        this.vertexCompilationError = null;\n        this.fragmentCompilationError = null;\n        this.programLinkError = null;\n        this.programValidationError = null;\n        const args = [];\n        const prepareArray = function () {\n            args.length = 0;\n            Array.prototype.push.apply(args, arguments);\n            args[0] = this._uniforms[args[0]];\n        };\n        const proxyFunction = (functionName) => {\n            const cacheFunction = floatNCache.includes(functionName.substring(3)) && \"FloatN\";\n            if (cacheFunction) {\n                const cacheFunc = this[`_cache${cacheFunction}`];\n                return function () {\n                    const func = this.engine[functionName];\n                    prepareArray.apply(this, arguments);\n                    if (cacheFunc.apply(this, arguments)) {\n                        if (!func.apply(this.engine, args)) {\n                            this._valueCache[arguments[0]] = null;\n                        }\n                    }\n                };\n            }\n            else {\n                return function () {\n                    const func = this.engine[functionName];\n                    prepareArray.apply(this, arguments);\n                    if (arguments[1] !== undefined) {\n                        this._valueCache[arguments[0]] = null;\n                        func.apply(this.engine, args);\n                    }\n                };\n            }\n        };\n        [\"Int?\", \"UInt?\", \"IntArray?\", \"UIntArray?\", \"Array?\", \"Float?\", \"Matrices\", \"Matrix3x3\", \"Matrix2x2\"].forEach((functionName) => {\n            const name = `set${functionName}`;\n            if (this[name]) {\n                return;\n            }\n            if (name.endsWith(\"?\")) {\n                [\"\", 2, 3, 4].forEach((n) => {\n                    this[(name.slice(0, -1) + n)] = this[(name.slice(0, -1) + n)] || proxyFunction(name.slice(0, -1) + n).bind(this);\n                });\n            }\n            else {\n                this[name] = this[name] || proxyFunction(name).bind(this);\n            }\n        });\n    }\n    get isAsync() {\n        return this.isParallelCompiled;\n    }\n    get isReady() {\n        if (this.program) {\n            if (this.isParallelCompiled) {\n                return this.engine._isRenderingStateCompiled(this);\n            }\n            return true;\n        }\n        return false;\n    }\n    _handlesSpectorRebuildCallback(onCompiled) {\n        if (onCompiled && this.program) {\n            onCompiled(this.program);\n        }\n    }\n    _fillEffectInformation(effect, uniformBuffersNames, uniformsNames, uniforms, samplerList, samplers, attributesNames, attributes) {\n        const engine = this.engine;\n        if (engine.supportsUniformBuffers) {\n            for (const name in uniformBuffersNames) {\n                effect.bindUniformBlock(name, uniformBuffersNames[name]);\n            }\n        }\n        const effectAvailableUniforms = this.engine.getUniforms(this, uniformsNames);\n        effectAvailableUniforms.forEach((uniform, index) => {\n            uniforms[uniformsNames[index]] = uniform;\n        });\n        this._uniforms = uniforms;\n        let index;\n        for (index = 0; index < samplerList.length; index++) {\n            const sampler = effect.getUniform(samplerList[index]);\n            if (sampler == null) {\n                samplerList.splice(index, 1);\n                index--;\n            }\n        }\n        samplerList.forEach((name, index) => {\n            samplers[name] = index;\n        });\n        for (const attr of engine.getAttributes(this, attributesNames)) {\n            attributes.push(attr);\n        }\n    }\n    /**\n     * Release all associated resources.\n     **/\n    dispose() {\n        this._uniforms = {};\n    }\n    /**\n     * @internal\n     */\n    _cacheMatrix(uniformName, matrix) {\n        const cache = this._valueCache[uniformName];\n        const flag = matrix.updateFlag;\n        if (cache !== undefined && cache === flag) {\n            return false;\n        }\n        this._valueCache[uniformName] = flag;\n        return true;\n    }\n    /**\n     * @internal\n     */\n    _cacheFloatN(_uniformName, _x, _y, _z, _w) {\n        /**\n         * arguments will be used to abstract the cache function.\n         * arguments[0] is the uniform name. the rest are numbers.\n         */\n        let cache = this._valueCache[arguments[0]];\n        if (!cache || cache.length !== arguments.length - 1) {\n            cache = Array.prototype.slice.call(arguments, 1);\n            this._valueCache[arguments[0]] = cache;\n            return true;\n        }\n        let changed = false;\n        for (let i = 0; i < cache.length; ++i) {\n            if (cache[i] !== arguments[i + 1]) {\n                cache[i] = arguments[i + 1];\n                changed = true;\n            }\n        }\n        return changed;\n    }\n    /**\n     * @internal\n     */\n    _cacheFloat2(uniformName, x, y) {\n        return this._cacheFloatN(uniformName, x, y);\n    }\n    /**\n     * @internal\n     */\n    _cacheFloat3(uniformName, x, y, z) {\n        return this._cacheFloatN(uniformName, x, y, z);\n    }\n    /**\n     * @internal\n     */\n    _cacheFloat4(uniformName, x, y, z, w) {\n        return this._cacheFloatN(uniformName, x, y, z, w);\n    }\n    /**\n     * Sets matrix on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param matrix matrix to be set.\n     */\n    setMatrix(uniformName, matrix) {\n        if (this._cacheMatrix(uniformName, matrix)) {\n            if (!this.engine.setMatrices(this._uniforms[uniformName], matrix.toArray())) {\n                this._valueCache[uniformName] = null;\n            }\n        }\n    }\n    /**\n     * Sets a Vector2 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param vector2 vector2 to be set.\n     */\n    setVector2(uniformName, vector2) {\n        this.setFloat2(uniformName, vector2.x, vector2.y);\n    }\n    /**\n     * Sets a Vector3 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param vector3 Value to be set.\n     */\n    setVector3(uniformName, vector3) {\n        this.setFloat3(uniformName, vector3.x, vector3.y, vector3.z);\n    }\n    /**\n     * Sets a Vector4 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param vector4 Value to be set.\n     */\n    setVector4(uniformName, vector4) {\n        this.setFloat4(uniformName, vector4.x, vector4.y, vector4.z, vector4.w);\n    }\n    /**\n     * Sets a Quaternion on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param quaternion Value to be set.\n     */\n    setQuaternion(uniformName, quaternion) {\n        this.setFloat4(uniformName, quaternion.x, quaternion.y, quaternion.z, quaternion.w);\n    }\n    /**\n     * Sets a Color3 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param color3 Value to be set.\n     */\n    setColor3(uniformName, color3) {\n        this.setFloat3(uniformName, color3.r, color3.g, color3.b);\n    }\n    /**\n     * Sets a Color4 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param color3 Value to be set.\n     * @param alpha Alpha value to be set.\n     */\n    setColor4(uniformName, color3, alpha) {\n        this.setFloat4(uniformName, color3.r, color3.g, color3.b, alpha);\n    }\n    /**\n     * Sets a Color4 on a uniform variable\n     * @param uniformName defines the name of the variable\n     * @param color4 defines the value to be set\n     */\n    setDirectColor4(uniformName, color4) {\n        this.setFloat4(uniformName, color4.r, color4.g, color4.b, color4.a);\n    }\n    _getVertexShaderCode() {\n        return this.vertexShader ? this.engine._getShaderSource(this.vertexShader) : null;\n    }\n    _getFragmentShaderCode() {\n        return this.fragmentShader ? this.engine._getShaderSource(this.fragmentShader) : null;\n    }\n}\n//# sourceMappingURL=webGLPipelineContext.js.map","import { ShaderLanguage } from \"../../Materials/shaderLanguage.js\";\n/** @internal */\nexport class WebGLShaderProcessor {\n    constructor() {\n        this.shaderLanguage = ShaderLanguage.GLSL;\n    }\n    postProcessor(code, defines, isFragment, processingContext, engine) {\n        // Remove extensions\n        if (!engine.getCaps().drawBuffersExtension) {\n            // even if enclosed in #if/#endif, IE11 does parse the #extension declaration, so we need to remove it altogether\n            const regex = /#extension.+GL_EXT_draw_buffers.+(enable|require)/g;\n            code = code.replace(regex, \"\");\n        }\n        return code;\n    }\n}\n//# sourceMappingURL=webGLShaderProcessors.js.map","import { WebGPUDataBuffer } from \"../../Meshes/WebGPU/webgpuDataBuffer.js\";\nimport { FromHalfFloat } from \"../../Misc/textureTools.js\";\n\nimport { allocateAndCopyTypedBuffer } from \"../Extensions/engine.readTexture.js\";\nimport * as WebGPUConstants from \"./webgpuConstants.js\";\n/** @internal */\nexport class WebGPUBufferManager {\n    static _IsGPUBuffer(buffer) {\n        return buffer.underlyingResource === undefined;\n    }\n    constructor(device) {\n        this._deferredReleaseBuffers = [];\n        this._device = device;\n    }\n    createRawBuffer(viewOrSize, flags, mappedAtCreation = false) {\n        const alignedLength = viewOrSize.byteLength !== undefined ? (viewOrSize.byteLength + 3) & ~3 : (viewOrSize + 3) & ~3; // 4 bytes alignments (because of the upload which requires this)\n        const verticesBufferDescriptor = {\n            mappedAtCreation,\n            size: alignedLength,\n            usage: flags,\n        };\n        return this._device.createBuffer(verticesBufferDescriptor);\n    }\n    createBuffer(viewOrSize, flags) {\n        const isView = viewOrSize.byteLength !== undefined;\n        const buffer = this.createRawBuffer(viewOrSize, flags);\n        const dataBuffer = new WebGPUDataBuffer(buffer);\n        dataBuffer.references = 1;\n        dataBuffer.capacity = isView ? viewOrSize.byteLength : viewOrSize;\n        if (isView) {\n            this.setSubData(dataBuffer, 0, viewOrSize);\n        }\n        return dataBuffer;\n    }\n    setRawData(buffer, dstByteOffset, src, srcByteOffset, byteLength) {\n        this._device.queue.writeBuffer(buffer, dstByteOffset, src.buffer, srcByteOffset, byteLength);\n    }\n    setSubData(dataBuffer, dstByteOffset, src, srcByteOffset = 0, byteLength = 0) {\n        const buffer = dataBuffer.underlyingResource;\n        byteLength = byteLength || src.byteLength;\n        byteLength = Math.min(byteLength, dataBuffer.capacity - dstByteOffset);\n        // After Migration to Canary\n        let chunkStart = src.byteOffset + srcByteOffset;\n        let chunkEnd = chunkStart + byteLength;\n        // 4 bytes alignments for upload\n        const alignedLength = (byteLength + 3) & ~3;\n        if (alignedLength !== byteLength) {\n            const tempView = new Uint8Array(src.buffer.slice(chunkStart, chunkEnd));\n            src = new Uint8Array(alignedLength);\n            src.set(tempView);\n            srcByteOffset = 0;\n            chunkStart = 0;\n            chunkEnd = alignedLength;\n            byteLength = alignedLength;\n        }\n        // Chunk\n        const maxChunk = 1024 * 1024 * 15;\n        let offset = 0;\n        while (chunkEnd - (chunkStart + offset) > maxChunk) {\n            this._device.queue.writeBuffer(buffer, dstByteOffset + offset, src.buffer, chunkStart + offset, maxChunk);\n            offset += maxChunk;\n        }\n        this._device.queue.writeBuffer(buffer, dstByteOffset + offset, src.buffer, chunkStart + offset, byteLength - offset);\n    }\n    _getHalfFloatAsFloatRGBAArrayBuffer(dataLength, arrayBuffer, destArray) {\n        if (!destArray) {\n            destArray = new Float32Array(dataLength);\n        }\n        const srcData = new Uint16Array(arrayBuffer);\n        while (dataLength--) {\n            destArray[dataLength] = FromHalfFloat(srcData[dataLength]);\n        }\n        return destArray;\n    }\n    readDataFromBuffer(gpuBuffer, size, width, height, bytesPerRow, bytesPerRowAligned, type = 0, offset = 0, buffer = null, destroyBuffer = true, noDataConversion = false) {\n        const floatFormat = type === 1 ? 2 : type === 2 ? 1 : 0;\n        return new Promise((resolve, reject) => {\n            gpuBuffer.mapAsync(WebGPUConstants.MapMode.Read, offset, size).then(() => {\n                const copyArrayBuffer = gpuBuffer.getMappedRange(offset, size);\n                let data = buffer;\n                if (noDataConversion) {\n                    if (data === null) {\n                        data = allocateAndCopyTypedBuffer(type, size, true, copyArrayBuffer);\n                    }\n                    else {\n                        data = allocateAndCopyTypedBuffer(type, data.buffer, undefined, copyArrayBuffer);\n                    }\n                }\n                else {\n                    if (data === null) {\n                        switch (floatFormat) {\n                            case 0: // byte format\n                                data = new Uint8Array(size);\n                                data.set(new Uint8Array(copyArrayBuffer));\n                                break;\n                            case 1: // half float\n                                // TODO WEBGPU use computer shaders (or render pass) to make the conversion?\n                                data = this._getHalfFloatAsFloatRGBAArrayBuffer(size / 2, copyArrayBuffer);\n                                break;\n                            case 2: // float\n                                data = new Float32Array(size / 4);\n                                data.set(new Float32Array(copyArrayBuffer));\n                                break;\n                        }\n                    }\n                    else {\n                        switch (floatFormat) {\n                            case 0: // byte format\n                                data = new Uint8Array(data.buffer);\n                                data.set(new Uint8Array(copyArrayBuffer));\n                                break;\n                            case 1: // half float\n                                // TODO WEBGPU use computer shaders (or render pass) to make the conversion?\n                                data = this._getHalfFloatAsFloatRGBAArrayBuffer(size / 2, copyArrayBuffer, buffer);\n                                break;\n                            case 2: // float\n                                data = new Float32Array(data.buffer);\n                                data.set(new Float32Array(copyArrayBuffer));\n                                break;\n                        }\n                    }\n                }\n                if (bytesPerRow !== bytesPerRowAligned) {\n                    // TODO WEBGPU use computer shaders (or render pass) to build the final buffer data?\n                    if (floatFormat === 1 && !noDataConversion) {\n                        // half float have been converted to float above\n                        bytesPerRow *= 2;\n                        bytesPerRowAligned *= 2;\n                    }\n                    const data2 = new Uint8Array(data.buffer);\n                    let offset = bytesPerRow, offset2 = 0;\n                    for (let y = 1; y < height; ++y) {\n                        offset2 = y * bytesPerRowAligned;\n                        for (let x = 0; x < bytesPerRow; ++x) {\n                            data2[offset++] = data2[offset2++];\n                        }\n                    }\n                    if (floatFormat !== 0 && !noDataConversion) {\n                        data = new Float32Array(data2.buffer, 0, offset / 4);\n                    }\n                    else {\n                        data = new Uint8Array(data2.buffer, 0, offset);\n                    }\n                }\n                gpuBuffer.unmap();\n                if (destroyBuffer) {\n                    this.releaseBuffer(gpuBuffer);\n                }\n                resolve(data);\n            }, (reason) => reject(reason));\n        });\n    }\n    releaseBuffer(buffer) {\n        if (WebGPUBufferManager._IsGPUBuffer(buffer)) {\n            this._deferredReleaseBuffers.push(buffer);\n            return true;\n        }\n        buffer.references--;\n        if (buffer.references === 0) {\n            this._deferredReleaseBuffers.push(buffer.underlyingResource);\n            return true;\n        }\n        return false;\n    }\n    destroyDeferredBuffers() {\n        for (let i = 0; i < this._deferredReleaseBuffers.length; ++i) {\n            this._deferredReleaseBuffers[i].destroy();\n        }\n        this._deferredReleaseBuffers.length = 0;\n    }\n}\n//# sourceMappingURL=webgpuBufferManager.js.map","/** @internal */\nexport class WebGPURenderItemViewport {\n    constructor(x, y, w, h) {\n        this.x = Math.floor(x);\n        this.y = Math.floor(y);\n        this.w = Math.floor(w);\n        this.h = Math.floor(h);\n    }\n    run(renderPass) {\n        renderPass.setViewport(this.x, this.y, this.w, this.h, 0, 1);\n    }\n    clone() {\n        return new WebGPURenderItemViewport(this.x, this.y, this.w, this.h);\n    }\n}\n/** @internal */\nexport class WebGPURenderItemScissor {\n    constructor(x, y, w, h) {\n        this.x = x;\n        this.y = y;\n        this.w = w;\n        this.h = h;\n    }\n    run(renderPass) {\n        renderPass.setScissorRect(this.x, this.y, this.w, this.h);\n    }\n    clone() {\n        return new WebGPURenderItemScissor(this.x, this.y, this.w, this.h);\n    }\n}\n/** @internal */\nexport class WebGPURenderItemStencilRef {\n    constructor(ref) {\n        this.ref = ref;\n    }\n    run(renderPass) {\n        renderPass.setStencilReference(this.ref);\n    }\n    clone() {\n        return new WebGPURenderItemStencilRef(this.ref);\n    }\n}\n/** @internal */\nexport class WebGPURenderItemBlendColor {\n    constructor(color) {\n        this.color = color;\n    }\n    run(renderPass) {\n        renderPass.setBlendConstant(this.color);\n    }\n    clone() {\n        return new WebGPURenderItemBlendColor(this.color);\n    }\n}\n/** @internal */\nexport class WebGPURenderItemBeginOcclusionQuery {\n    constructor(query) {\n        this.query = query;\n    }\n    run(renderPass) {\n        renderPass.beginOcclusionQuery(this.query);\n    }\n    clone() {\n        return new WebGPURenderItemBeginOcclusionQuery(this.query);\n    }\n}\n/** @internal */\nexport class WebGPURenderItemEndOcclusionQuery {\n    constructor() { }\n    run(renderPass) {\n        renderPass.endOcclusionQuery();\n    }\n    clone() {\n        return new WebGPURenderItemEndOcclusionQuery();\n    }\n}\nclass WebGPURenderItemBundles {\n    constructor() {\n        this.bundles = [];\n    }\n    run(renderPass) {\n        renderPass.executeBundles(this.bundles);\n    }\n    clone() {\n        const cloned = new WebGPURenderItemBundles();\n        cloned.bundles = this.bundles;\n        return cloned;\n    }\n}\n/** @internal */\nexport class WebGPUBundleList {\n    constructor(device) {\n        this.numDrawCalls = 0;\n        this._device = device;\n        this._list = new Array(10);\n        this._listLength = 0;\n    }\n    addBundle(bundle) {\n        if (!this._currentItemIsBundle) {\n            const item = new WebGPURenderItemBundles();\n            this._list[this._listLength++] = item;\n            this._currentBundleList = item.bundles;\n            this._currentItemIsBundle = true;\n        }\n        if (bundle) {\n            this._currentBundleList.push(bundle);\n        }\n    }\n    _finishBundle() {\n        if (this._currentItemIsBundle && this._bundleEncoder) {\n            this._currentBundleList.push(this._bundleEncoder.finish());\n            this._bundleEncoder = undefined;\n            this._currentItemIsBundle = false;\n        }\n    }\n    addItem(item) {\n        this._finishBundle();\n        this._list[this._listLength++] = item;\n        this._currentItemIsBundle = false;\n    }\n    getBundleEncoder(colorFormats, depthStencilFormat, sampleCount) {\n        if (!this._currentItemIsBundle) {\n            this.addBundle();\n            this._bundleEncoder = this._device.createRenderBundleEncoder({\n                colorFormats,\n                depthStencilFormat,\n                sampleCount,\n            });\n        }\n        return this._bundleEncoder;\n    }\n    close() {\n        this._finishBundle();\n    }\n    run(renderPass) {\n        this.close();\n        for (let i = 0; i < this._listLength; ++i) {\n            this._list[i].run(renderPass);\n        }\n    }\n    reset() {\n        this._listLength = 0;\n        this._currentItemIsBundle = false;\n        this.numDrawCalls = 0;\n    }\n    clone() {\n        this.close();\n        const cloned = new WebGPUBundleList(this._device);\n        cloned._list = new Array(this._listLength);\n        cloned._listLength = this._listLength;\n        cloned.numDrawCalls = this.numDrawCalls;\n        for (let i = 0; i < this._listLength; ++i) {\n            cloned._list[i] = this._list[i].clone();\n        }\n        return cloned;\n    }\n}\n//# sourceMappingURL=webgpuBundleList.js.map","import { Logger } from \"../../Misc/logger.js\";\nclass WebGPUBindGroupCacheNode {\n    constructor() {\n        this.values = {};\n    }\n}\n/** @internal */\nexport class WebGPUCacheBindGroups {\n    static get Statistics() {\n        return {\n            totalCreated: WebGPUCacheBindGroups.NumBindGroupsCreatedTotal,\n            lastFrameCreated: WebGPUCacheBindGroups.NumBindGroupsCreatedLastFrame,\n            lookupLastFrame: WebGPUCacheBindGroups.NumBindGroupsLookupLastFrame,\n            noLookupLastFrame: WebGPUCacheBindGroups.NumBindGroupsNoLookupLastFrame,\n        };\n    }\n    constructor(device, cacheSampler, engine) {\n        this.disabled = false;\n        this._device = device;\n        this._cacheSampler = cacheSampler;\n        this._engine = engine;\n    }\n    endFrame() {\n        WebGPUCacheBindGroups.NumBindGroupsCreatedLastFrame = WebGPUCacheBindGroups._NumBindGroupsCreatedCurrentFrame;\n        WebGPUCacheBindGroups.NumBindGroupsLookupLastFrame = WebGPUCacheBindGroups._NumBindGroupsLookupCurrentFrame;\n        WebGPUCacheBindGroups.NumBindGroupsNoLookupLastFrame = WebGPUCacheBindGroups._NumBindGroupsNoLookupCurrentFrame;\n        WebGPUCacheBindGroups._NumBindGroupsCreatedCurrentFrame = 0;\n        WebGPUCacheBindGroups._NumBindGroupsLookupCurrentFrame = 0;\n        WebGPUCacheBindGroups._NumBindGroupsNoLookupCurrentFrame = 0;\n    }\n    /**\n     * Cache is currently based on the uniform/storage buffers, samplers and textures used by the binding groups.\n     * Note that all uniform buffers have an offset of 0 in Babylon and we don't have a use case where we would have the same buffer used with different capacity values:\n     * that means we don't need to factor in the offset/size of the buffer in the cache, only the id\n     * @param webgpuPipelineContext\n     * @param drawContext\n     * @param materialContext\n     */\n    getBindGroups(webgpuPipelineContext, drawContext, materialContext) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        let bindGroups = undefined;\n        let node = WebGPUCacheBindGroups._Cache;\n        const cacheIsDisabled = this.disabled || materialContext.forceBindGroupCreation;\n        if (!cacheIsDisabled) {\n            if (!drawContext.isDirty(materialContext.updateId) && !materialContext.isDirty) {\n                WebGPUCacheBindGroups._NumBindGroupsNoLookupCurrentFrame++;\n                return drawContext.bindGroups;\n            }\n            for (const bufferName of webgpuPipelineContext.shaderProcessingContext.bufferNames) {\n                const uboId = (_b = (_a = drawContext.buffers[bufferName]) === null || _a === void 0 ? void 0 : _a.uniqueId) !== null && _b !== void 0 ? _b : 0;\n                let nextNode = node.values[uboId];\n                if (!nextNode) {\n                    nextNode = new WebGPUBindGroupCacheNode();\n                    node.values[uboId] = nextNode;\n                }\n                node = nextNode;\n            }\n            for (const samplerName of webgpuPipelineContext.shaderProcessingContext.samplerNames) {\n                const samplerHashCode = (_d = (_c = materialContext.samplers[samplerName]) === null || _c === void 0 ? void 0 : _c.hashCode) !== null && _d !== void 0 ? _d : 0;\n                let nextNode = node.values[samplerHashCode];\n                if (!nextNode) {\n                    nextNode = new WebGPUBindGroupCacheNode();\n                    node.values[samplerHashCode] = nextNode;\n                }\n                node = nextNode;\n            }\n            for (const textureName of webgpuPipelineContext.shaderProcessingContext.textureNames) {\n                const textureId = (_g = (_f = (_e = materialContext.textures[textureName]) === null || _e === void 0 ? void 0 : _e.texture) === null || _f === void 0 ? void 0 : _f.uniqueId) !== null && _g !== void 0 ? _g : 0;\n                let nextNode = node.values[textureId];\n                if (!nextNode) {\n                    nextNode = new WebGPUBindGroupCacheNode();\n                    node.values[textureId] = nextNode;\n                }\n                node = nextNode;\n            }\n            bindGroups = node.bindGroups;\n        }\n        drawContext.resetIsDirty(materialContext.updateId);\n        materialContext.isDirty = false;\n        if (bindGroups) {\n            drawContext.bindGroups = bindGroups;\n            WebGPUCacheBindGroups._NumBindGroupsLookupCurrentFrame++;\n            return bindGroups;\n        }\n        bindGroups = [];\n        drawContext.bindGroups = bindGroups;\n        if (!cacheIsDisabled) {\n            node.bindGroups = bindGroups;\n        }\n        WebGPUCacheBindGroups.NumBindGroupsCreatedTotal++;\n        WebGPUCacheBindGroups._NumBindGroupsCreatedCurrentFrame++;\n        const bindGroupLayouts = webgpuPipelineContext.bindGroupLayouts;\n        for (let i = 0; i < webgpuPipelineContext.shaderProcessingContext.bindGroupLayoutEntries.length; i++) {\n            const setDefinition = webgpuPipelineContext.shaderProcessingContext.bindGroupLayoutEntries[i];\n            const entries = webgpuPipelineContext.shaderProcessingContext.bindGroupEntries[i];\n            for (let j = 0; j < setDefinition.length; j++) {\n                const entry = webgpuPipelineContext.shaderProcessingContext.bindGroupLayoutEntries[i][j];\n                const entryInfo = webgpuPipelineContext.shaderProcessingContext.bindGroupLayoutEntryInfo[i][entry.binding];\n                const name = (_h = entryInfo.nameInArrayOfTexture) !== null && _h !== void 0 ? _h : entryInfo.name;\n                if (entry.sampler) {\n                    const bindingInfo = materialContext.samplers[name];\n                    if (bindingInfo) {\n                        const sampler = bindingInfo.sampler;\n                        if (!sampler) {\n                            if (this._engine.dbgSanityChecks) {\n                                Logger.Error(`Trying to bind a null sampler! entry=${JSON.stringify(entry)}, name=${name}, bindingInfo=${JSON.stringify(bindingInfo, (key, value) => (key === \"texture\" ? \"<no dump>\" : value))}, materialContext.uniqueId=${materialContext.uniqueId}`, 50);\n                            }\n                            continue;\n                        }\n                        entries[j].resource = this._cacheSampler.getSampler(sampler, false, bindingInfo.hashCode);\n                    }\n                    else {\n                        Logger.Error(`Sampler \"${name}\" could not be bound. entry=${JSON.stringify(entry)}, materialContext=${JSON.stringify(materialContext, (key, value) => key === \"texture\" || key === \"sampler\" ? \"<no dump>\" : value)}`, 50);\n                    }\n                }\n                else if (entry.texture || entry.storageTexture) {\n                    const bindingInfo = materialContext.textures[name];\n                    if (bindingInfo) {\n                        if (this._engine.dbgSanityChecks && bindingInfo.texture === null) {\n                            Logger.Error(`Trying to bind a null texture! entry=${JSON.stringify(entry)}, bindingInfo=${JSON.stringify(bindingInfo, (key, value) => key === \"texture\" ? \"<no dump>\" : value)}, materialContext.uniqueId=${materialContext.uniqueId}`, 50);\n                            continue;\n                        }\n                        const hardwareTexture = bindingInfo.texture._hardwareTexture;\n                        if (this._engine.dbgSanityChecks &&\n                            (!hardwareTexture || (entry.texture && !hardwareTexture.view) || (entry.storageTexture && !hardwareTexture.viewForWriting))) {\n                            Logger.Error(`Trying to bind a null gpu texture or view! entry=${JSON.stringify(entry)}, name=${name}, bindingInfo=${JSON.stringify(bindingInfo, (key, value) => (key === \"texture\" ? \"<no dump>\" : value))}, isReady=${(_j = bindingInfo.texture) === null || _j === void 0 ? void 0 : _j.isReady}, materialContext.uniqueId=${materialContext.uniqueId}`, 50);\n                            continue;\n                        }\n                        entries[j].resource = entry.storageTexture ? hardwareTexture.viewForWriting : hardwareTexture.view;\n                    }\n                    else {\n                        Logger.Error(`Texture \"${name}\" could not be bound. entry=${JSON.stringify(entry)}, materialContext=${JSON.stringify(materialContext, (key, value) => key === \"texture\" || key === \"sampler\" ? \"<no dump>\" : value)}`, 50);\n                    }\n                }\n                else if (entry.externalTexture) {\n                    const bindingInfo = materialContext.textures[name];\n                    if (bindingInfo) {\n                        if (this._engine.dbgSanityChecks && bindingInfo.texture === null) {\n                            Logger.Error(`Trying to bind a null external texture! entry=${JSON.stringify(entry)}, name=${name}, bindingInfo=${JSON.stringify(bindingInfo, (key, value) => (key === \"texture\" ? \"<no dump>\" : value))}, materialContext.uniqueId=${materialContext.uniqueId}`, 50);\n                            continue;\n                        }\n                        const externalTexture = bindingInfo.texture.underlyingResource;\n                        if (this._engine.dbgSanityChecks && !externalTexture) {\n                            Logger.Error(`Trying to bind a null gpu external texture! entry=${JSON.stringify(entry)}, name=${name}, bindingInfo=${JSON.stringify(bindingInfo, (key, value) => (key === \"texture\" ? \"<no dump>\" : value))}, isReady=${(_k = bindingInfo.texture) === null || _k === void 0 ? void 0 : _k.isReady}, materialContext.uniqueId=${materialContext.uniqueId}`, 50);\n                            continue;\n                        }\n                        entries[j].resource = this._device.importExternalTexture({ source: externalTexture });\n                    }\n                    else {\n                        Logger.Error(`Texture \"${name}\" could not be bound. entry=${JSON.stringify(entry)}, materialContext=${JSON.stringify(materialContext, (key, value) => key === \"texture\" || key === \"sampler\" ? \"<no dump>\" : value)}`, 50);\n                    }\n                }\n                else if (entry.buffer) {\n                    const dataBuffer = drawContext.buffers[name];\n                    if (dataBuffer) {\n                        const webgpuBuffer = dataBuffer.underlyingResource;\n                        entries[j].resource.buffer = webgpuBuffer;\n                        entries[j].resource.size = dataBuffer.capacity;\n                    }\n                    else {\n                        Logger.Error(`Can't find buffer \"${name}\". entry=${JSON.stringify(entry)}, buffers=${JSON.stringify(drawContext.buffers)}, drawContext.uniqueId=${drawContext.uniqueId}`, 50);\n                    }\n                }\n            }\n            const groupLayout = bindGroupLayouts[i];\n            bindGroups[i] = this._device.createBindGroup({\n                layout: groupLayout,\n                entries,\n            });\n        }\n        return bindGroups;\n    }\n}\nWebGPUCacheBindGroups.NumBindGroupsCreatedTotal = 0;\nWebGPUCacheBindGroups.NumBindGroupsCreatedLastFrame = 0;\nWebGPUCacheBindGroups.NumBindGroupsLookupLastFrame = 0;\nWebGPUCacheBindGroups.NumBindGroupsNoLookupLastFrame = 0;\nWebGPUCacheBindGroups._Cache = new WebGPUBindGroupCacheNode();\nWebGPUCacheBindGroups._NumBindGroupsCreatedCurrentFrame = 0;\nWebGPUCacheBindGroups._NumBindGroupsLookupCurrentFrame = 0;\nWebGPUCacheBindGroups._NumBindGroupsNoLookupCurrentFrame = 0;\n//# sourceMappingURL=webgpuCacheBindGroups.js.map","/* eslint-disable @typescript-eslint/naming-convention */\n\nimport * as WebGPUConstants from \"./webgpuConstants.js\";\nimport { VertexBuffer } from \"../../Buffers/buffer.js\";\nimport { WebGPUShaderProcessor } from \"./webgpuShaderProcessor.js\";\nimport { renderableTextureFormatToIndex, WebGPUTextureHelper } from \"./webgpuTextureHelper.js\";\nvar StatePosition;\n(function (StatePosition) {\n    StatePosition[StatePosition[\"StencilReadMask\"] = 0] = \"StencilReadMask\";\n    StatePosition[StatePosition[\"StencilWriteMask\"] = 1] = \"StencilWriteMask\";\n    //DepthBiasClamp = 1, // not used, so remove it to improve perf\n    StatePosition[StatePosition[\"DepthBias\"] = 2] = \"DepthBias\";\n    StatePosition[StatePosition[\"DepthBiasSlopeScale\"] = 3] = \"DepthBiasSlopeScale\";\n    StatePosition[StatePosition[\"DepthStencilState\"] = 4] = \"DepthStencilState\";\n    StatePosition[StatePosition[\"MRTAttachments1\"] = 5] = \"MRTAttachments1\";\n    StatePosition[StatePosition[\"MRTAttachments2\"] = 6] = \"MRTAttachments2\";\n    StatePosition[StatePosition[\"RasterizationState\"] = 7] = \"RasterizationState\";\n    StatePosition[StatePosition[\"ColorStates\"] = 8] = \"ColorStates\";\n    StatePosition[StatePosition[\"ShaderStage\"] = 9] = \"ShaderStage\";\n    StatePosition[StatePosition[\"TextureStage\"] = 10] = \"TextureStage\";\n    StatePosition[StatePosition[\"VertexState\"] = 11] = \"VertexState\";\n    StatePosition[StatePosition[\"NumStates\"] = 12] = \"NumStates\";\n})(StatePosition || (StatePosition = {}));\nconst alphaBlendFactorToIndex = {\n    0: 1,\n    1: 2,\n    0x0300: 3,\n    0x0301: 4,\n    0x0302: 5,\n    0x0303: 6,\n    0x0304: 7,\n    0x0305: 8,\n    0x0306: 9,\n    0x0307: 10,\n    0x0308: 11,\n    0x8001: 12,\n    0x8002: 13,\n    0x8003: 12,\n    0x8004: 13, // OneMinusBlendColor (alpha)\n};\nconst stencilOpToIndex = {\n    0x0000: 0,\n    0x1e00: 1,\n    0x1e01: 2,\n    0x1e02: 3,\n    0x1e03: 4,\n    0x150a: 5,\n    0x8507: 6,\n    0x8508: 7, // DECR_WRAP\n};\n/** @internal */\nexport class WebGPUCacheRenderPipeline {\n    constructor(device, emptyVertexBuffer, useTextureStage) {\n        this.mrtTextureCount = 0;\n        this._device = device;\n        this._useTextureStage = useTextureStage;\n        this._states = new Array(30); // pre-allocate enough room so that no new allocation will take place afterwards\n        this._statesLength = 0;\n        this._stateDirtyLowestIndex = 0;\n        this._emptyVertexBuffer = emptyVertexBuffer;\n        this._mrtFormats = [];\n        this._parameter = { token: undefined, pipeline: null };\n        this.disabled = false;\n        this.vertexBuffers = [];\n        this._kMaxVertexBufferStride = device.limits.maxVertexBufferArrayStride || 2048;\n        this.reset();\n    }\n    reset() {\n        this._isDirty = true;\n        this.vertexBuffers.length = 0;\n        this.setAlphaToCoverage(false);\n        this.resetDepthCullingState();\n        this.setClampDepth(false);\n        this.setDepthBias(0);\n        //this.setDepthBiasClamp(0);\n        this._webgpuColorFormat = [WebGPUConstants.TextureFormat.BGRA8Unorm];\n        this.setColorFormat(WebGPUConstants.TextureFormat.BGRA8Unorm);\n        this.setMRT([]);\n        this.setAlphaBlendEnabled(false);\n        this.setAlphaBlendFactors([null, null, null, null], [null, null]);\n        this.setWriteMask(0xf);\n        this.setDepthStencilFormat(WebGPUConstants.TextureFormat.Depth24PlusStencil8);\n        this.setStencilEnabled(false);\n        this.resetStencilState();\n        this.setBuffers(null, null, null);\n        this._setTextureState(0);\n    }\n    get colorFormats() {\n        return this._mrtAttachments1 > 0 ? this._mrtFormats : this._webgpuColorFormat;\n    }\n    getRenderPipeline(fillMode, effect, sampleCount, textureState = 0) {\n        if (sampleCount > 1) {\n            // WebGPU only supports 1 or 4\n            sampleCount = 4;\n        }\n        if (this.disabled) {\n            const topology = WebGPUCacheRenderPipeline._GetTopology(fillMode);\n            this._setVertexState(effect); // to fill this.vertexBuffers with correct data\n            this._parameter.pipeline = this._createRenderPipeline(effect, topology, sampleCount);\n            WebGPUCacheRenderPipeline.NumCacheMiss++;\n            WebGPUCacheRenderPipeline._NumPipelineCreationCurrentFrame++;\n            return this._parameter.pipeline;\n        }\n        this._setShaderStage(effect.uniqueId);\n        this._setRasterizationState(fillMode, sampleCount);\n        this._setColorStates();\n        this._setDepthStencilState();\n        this._setVertexState(effect);\n        this._setTextureState(textureState);\n        this.lastStateDirtyLowestIndex = this._stateDirtyLowestIndex;\n        if (!this._isDirty && this._parameter.pipeline) {\n            this._stateDirtyLowestIndex = this._statesLength;\n            WebGPUCacheRenderPipeline.NumCacheHitWithoutHash++;\n            return this._parameter.pipeline;\n        }\n        this._getRenderPipeline(this._parameter);\n        this._isDirty = false;\n        this._stateDirtyLowestIndex = this._statesLength;\n        if (this._parameter.pipeline) {\n            WebGPUCacheRenderPipeline.NumCacheHitWithHash++;\n            return this._parameter.pipeline;\n        }\n        const topology = WebGPUCacheRenderPipeline._GetTopology(fillMode);\n        this._parameter.pipeline = this._createRenderPipeline(effect, topology, sampleCount);\n        this._setRenderPipeline(this._parameter);\n        WebGPUCacheRenderPipeline.NumCacheMiss++;\n        WebGPUCacheRenderPipeline._NumPipelineCreationCurrentFrame++;\n        return this._parameter.pipeline;\n    }\n    endFrame() {\n        WebGPUCacheRenderPipeline.NumPipelineCreationLastFrame = WebGPUCacheRenderPipeline._NumPipelineCreationCurrentFrame;\n        WebGPUCacheRenderPipeline._NumPipelineCreationCurrentFrame = 0;\n    }\n    setAlphaToCoverage(enabled) {\n        this._alphaToCoverageEnabled = enabled;\n    }\n    setFrontFace(frontFace) {\n        this._frontFace = frontFace;\n    }\n    setCullEnabled(enabled) {\n        this._cullEnabled = enabled;\n    }\n    setCullFace(cullFace) {\n        this._cullFace = cullFace;\n    }\n    setClampDepth(clampDepth) {\n        this._clampDepth = clampDepth;\n    }\n    resetDepthCullingState() {\n        this.setDepthCullingState(false, 2, 1, 0, 0, true, true, 519);\n    }\n    setDepthCullingState(cullEnabled, frontFace, cullFace, zOffset, zOffsetUnits, depthTestEnabled, depthWriteEnabled, depthCompare) {\n        this._depthWriteEnabled = depthWriteEnabled;\n        this._depthTestEnabled = depthTestEnabled;\n        this._depthCompare = (depthCompare !== null && depthCompare !== void 0 ? depthCompare : 519) - 0x0200;\n        this._cullFace = cullFace;\n        this._cullEnabled = cullEnabled;\n        this._frontFace = frontFace;\n        this.setDepthBiasSlopeScale(zOffset);\n        this.setDepthBias(zOffsetUnits);\n    }\n    setDepthBias(depthBias) {\n        if (this._depthBias !== depthBias) {\n            this._depthBias = depthBias;\n            this._states[StatePosition.DepthBias] = depthBias;\n            this._isDirty = true;\n            this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.DepthBias);\n        }\n    }\n    /*public setDepthBiasClamp(depthBiasClamp: number): void {\n        if (this._depthBiasClamp !== depthBiasClamp) {\n            this._depthBiasClamp = depthBiasClamp;\n            this._states[StatePosition.DepthBiasClamp] = depthBiasClamp.toString();\n            this._isDirty = true;\n        }\n    }*/\n    setDepthBiasSlopeScale(depthBiasSlopeScale) {\n        if (this._depthBiasSlopeScale !== depthBiasSlopeScale) {\n            this._depthBiasSlopeScale = depthBiasSlopeScale;\n            this._states[StatePosition.DepthBiasSlopeScale] = depthBiasSlopeScale;\n            this._isDirty = true;\n            this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.DepthBiasSlopeScale);\n        }\n    }\n    setColorFormat(format) {\n        this._webgpuColorFormat[0] = format;\n        this._colorFormat = renderableTextureFormatToIndex[format !== null && format !== void 0 ? format : \"\"];\n    }\n    setMRTAttachments(attachments) {\n        this.mrtAttachments = attachments;\n        let mask = 0;\n        for (let i = 0; i < attachments.length; ++i) {\n            if (attachments[i] !== 0) {\n                mask += 1 << i;\n            }\n        }\n        if (this._mrtEnabledMask !== mask) {\n            this._mrtEnabledMask = mask;\n            this._isDirty = true;\n            this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.MRTAttachments1);\n        }\n    }\n    setMRT(textureArray, textureCount) {\n        var _a, _b;\n        textureCount = textureCount !== null && textureCount !== void 0 ? textureCount : textureArray.length;\n        if (textureCount > 10) {\n            // If we want more than 10 attachments we need to change this method (and the StatePosition enum) but 10 seems plenty: note that WebGPU only supports 8 at the time (2021/12/13)!\n            // As we need 39 different values we are using 6 bits to encode a texture format, meaning we can encode 5 texture formats in 32 bits\n            // We are using 2x32 bit values to handle 10 textures\n            throw \"Can't handle more than 10 attachments for a MRT in cache render pipeline!\";\n        }\n        this.mrtTextureArray = textureArray;\n        this.mrtTextureCount = textureCount;\n        this._mrtEnabledMask = 0xffff; // all textures are enabled at start (meaning we can write to them). Calls to setMRTAttachments may disable some\n        const bits = [0, 0];\n        let indexBits = 0, mask = 0, numRT = 0;\n        for (let i = 0; i < textureCount; ++i) {\n            const texture = textureArray[i];\n            const gpuWrapper = texture === null || texture === void 0 ? void 0 : texture._hardwareTexture;\n            this._mrtFormats[numRT] = (_a = gpuWrapper === null || gpuWrapper === void 0 ? void 0 : gpuWrapper.format) !== null && _a !== void 0 ? _a : this._webgpuColorFormat[0];\n            bits[indexBits] += renderableTextureFormatToIndex[(_b = this._mrtFormats[numRT]) !== null && _b !== void 0 ? _b : \"\"] << mask;\n            mask += 6;\n            numRT++;\n            if (mask >= 32) {\n                mask = 0;\n                indexBits++;\n            }\n        }\n        this._mrtFormats.length = numRT;\n        if (this._mrtAttachments1 !== bits[0] || this._mrtAttachments2 !== bits[1]) {\n            this._mrtAttachments1 = bits[0];\n            this._mrtAttachments2 = bits[1];\n            this._states[StatePosition.MRTAttachments1] = bits[0];\n            this._states[StatePosition.MRTAttachments2] = bits[1];\n            this._isDirty = true;\n            this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.MRTAttachments1);\n        }\n    }\n    setAlphaBlendEnabled(enabled) {\n        this._alphaBlendEnabled = enabled;\n    }\n    setAlphaBlendFactors(factors, operations) {\n        this._alphaBlendFuncParams = factors;\n        this._alphaBlendEqParams = operations;\n    }\n    setWriteMask(mask) {\n        this._writeMask = mask;\n    }\n    setDepthStencilFormat(format) {\n        this._webgpuDepthStencilFormat = format;\n        this._depthStencilFormat = format === undefined ? 0 : renderableTextureFormatToIndex[format];\n    }\n    setDepthTestEnabled(enabled) {\n        this._depthTestEnabled = enabled;\n    }\n    setDepthWriteEnabled(enabled) {\n        this._depthWriteEnabled = enabled;\n    }\n    setDepthCompare(func) {\n        this._depthCompare = (func !== null && func !== void 0 ? func : 519) - 0x0200;\n    }\n    setStencilEnabled(enabled) {\n        this._stencilEnabled = enabled;\n    }\n    setStencilCompare(func) {\n        this._stencilFrontCompare = (func !== null && func !== void 0 ? func : 519) - 0x0200;\n    }\n    setStencilDepthFailOp(op) {\n        this._stencilFrontDepthFailOp = op === null ? 1 /* KEEP */ : stencilOpToIndex[op];\n    }\n    setStencilPassOp(op) {\n        this._stencilFrontPassOp = op === null ? 2 /* REPLACE */ : stencilOpToIndex[op];\n    }\n    setStencilFailOp(op) {\n        this._stencilFrontFailOp = op === null ? 1 /* KEEP */ : stencilOpToIndex[op];\n    }\n    setStencilReadMask(mask) {\n        if (this._stencilReadMask !== mask) {\n            this._stencilReadMask = mask;\n            this._states[StatePosition.StencilReadMask] = mask;\n            this._isDirty = true;\n            this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.StencilReadMask);\n        }\n    }\n    setStencilWriteMask(mask) {\n        if (this._stencilWriteMask !== mask) {\n            this._stencilWriteMask = mask;\n            this._states[StatePosition.StencilWriteMask] = mask;\n            this._isDirty = true;\n            this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.StencilWriteMask);\n        }\n    }\n    resetStencilState() {\n        this.setStencilState(false, 519, 7680, 7681, 7680, 0xff, 0xff);\n    }\n    setStencilState(stencilEnabled, compare, depthFailOp, passOp, failOp, readMask, writeMask) {\n        this._stencilEnabled = stencilEnabled;\n        this._stencilFrontCompare = (compare !== null && compare !== void 0 ? compare : 519) - 0x0200;\n        this._stencilFrontDepthFailOp = depthFailOp === null ? 1 /* KEEP */ : stencilOpToIndex[depthFailOp];\n        this._stencilFrontPassOp = passOp === null ? 2 /* REPLACE */ : stencilOpToIndex[passOp];\n        this._stencilFrontFailOp = failOp === null ? 1 /* KEEP */ : stencilOpToIndex[failOp];\n        this.setStencilReadMask(readMask);\n        this.setStencilWriteMask(writeMask);\n    }\n    setBuffers(vertexBuffers, indexBuffer, overrideVertexBuffers) {\n        this._vertexBuffers = vertexBuffers;\n        this._overrideVertexBuffers = overrideVertexBuffers;\n        this._indexBuffer = indexBuffer;\n    }\n    static _GetTopology(fillMode) {\n        switch (fillMode) {\n            // Triangle views\n            case 0:\n                return WebGPUConstants.PrimitiveTopology.TriangleList;\n            case 2:\n                return WebGPUConstants.PrimitiveTopology.PointList;\n            case 1:\n                return WebGPUConstants.PrimitiveTopology.LineList;\n            // Draw modes\n            case 3:\n                return WebGPUConstants.PrimitiveTopology.PointList;\n            case 4:\n                return WebGPUConstants.PrimitiveTopology.LineList;\n            case 5:\n                // return this._gl.LINE_LOOP;\n                // TODO WEBGPU. Line Loop Mode Fallback at buffer load time.\n                throw \"LineLoop is an unsupported fillmode in WebGPU\";\n            case 6:\n                return WebGPUConstants.PrimitiveTopology.LineStrip;\n            case 7:\n                return WebGPUConstants.PrimitiveTopology.TriangleStrip;\n            case 8:\n                // return this._gl.TRIANGLE_FAN;\n                // TODO WEBGPU. Triangle Fan Mode Fallback at buffer load time.\n                throw \"TriangleFan is an unsupported fillmode in WebGPU\";\n            default:\n                return WebGPUConstants.PrimitiveTopology.TriangleList;\n        }\n    }\n    static _GetAphaBlendOperation(operation) {\n        switch (operation) {\n            case 32774:\n                return WebGPUConstants.BlendOperation.Add;\n            case 32778:\n                return WebGPUConstants.BlendOperation.Subtract;\n            case 32779:\n                return WebGPUConstants.BlendOperation.ReverseSubtract;\n            case 32775:\n                return WebGPUConstants.BlendOperation.Min;\n            case 32776:\n                return WebGPUConstants.BlendOperation.Max;\n            default:\n                return WebGPUConstants.BlendOperation.Add;\n        }\n    }\n    static _GetAphaBlendFactor(factor) {\n        switch (factor) {\n            case 0:\n                return WebGPUConstants.BlendFactor.Zero;\n            case 1:\n                return WebGPUConstants.BlendFactor.One;\n            case 768:\n                return WebGPUConstants.BlendFactor.Src;\n            case 769:\n                return WebGPUConstants.BlendFactor.OneMinusSrc;\n            case 770:\n                return WebGPUConstants.BlendFactor.SrcAlpha;\n            case 771:\n                return WebGPUConstants.BlendFactor.OneMinusSrcAlpha;\n            case 772:\n                return WebGPUConstants.BlendFactor.DstAlpha;\n            case 773:\n                return WebGPUConstants.BlendFactor.OneMinusDstAlpha;\n            case 774:\n                return WebGPUConstants.BlendFactor.Dst;\n            case 775:\n                return WebGPUConstants.BlendFactor.OneMinusDst;\n            case 776:\n                return WebGPUConstants.BlendFactor.SrcAlphaSaturated;\n            case 32769:\n                return WebGPUConstants.BlendFactor.Constant;\n            case 32770:\n                return WebGPUConstants.BlendFactor.OneMinusConstant;\n            case 32771:\n                return WebGPUConstants.BlendFactor.Constant;\n            case 32772:\n                return WebGPUConstants.BlendFactor.OneMinusConstant;\n            default:\n                return WebGPUConstants.BlendFactor.One;\n        }\n    }\n    static _GetCompareFunction(compareFunction) {\n        switch (compareFunction) {\n            case 0: // NEVER\n                return WebGPUConstants.CompareFunction.Never;\n            case 1: // LESS\n                return WebGPUConstants.CompareFunction.Less;\n            case 2: // EQUAL\n                return WebGPUConstants.CompareFunction.Equal;\n            case 3: // LEQUAL\n                return WebGPUConstants.CompareFunction.LessEqual;\n            case 4: // GREATER\n                return WebGPUConstants.CompareFunction.Greater;\n            case 5: // NOTEQUAL\n                return WebGPUConstants.CompareFunction.NotEqual;\n            case 6: // GEQUAL\n                return WebGPUConstants.CompareFunction.GreaterEqual;\n            case 7: // ALWAYS\n                return WebGPUConstants.CompareFunction.Always;\n        }\n        return WebGPUConstants.CompareFunction.Never;\n    }\n    static _GetStencilOpFunction(operation) {\n        switch (operation) {\n            case 0:\n                return WebGPUConstants.StencilOperation.Zero;\n            case 1:\n                return WebGPUConstants.StencilOperation.Keep;\n            case 2:\n                return WebGPUConstants.StencilOperation.Replace;\n            case 3:\n                return WebGPUConstants.StencilOperation.IncrementClamp;\n            case 4:\n                return WebGPUConstants.StencilOperation.DecrementClamp;\n            case 5:\n                return WebGPUConstants.StencilOperation.Invert;\n            case 6:\n                return WebGPUConstants.StencilOperation.IncrementWrap;\n            case 7:\n                return WebGPUConstants.StencilOperation.DecrementWrap;\n        }\n        return WebGPUConstants.StencilOperation.Keep;\n    }\n    static _GetVertexInputDescriptorFormat(vertexBuffer) {\n        const type = vertexBuffer.type;\n        const normalized = vertexBuffer.normalized;\n        const size = vertexBuffer.getSize();\n        switch (type) {\n            case VertexBuffer.BYTE:\n                switch (size) {\n                    case 1:\n                    case 2:\n                        return normalized ? WebGPUConstants.VertexFormat.Snorm8x2 : WebGPUConstants.VertexFormat.Sint8x2;\n                    case 3:\n                    case 4:\n                        return normalized ? WebGPUConstants.VertexFormat.Snorm8x4 : WebGPUConstants.VertexFormat.Sint8x4;\n                }\n                break;\n            case VertexBuffer.UNSIGNED_BYTE:\n                switch (size) {\n                    case 1:\n                    case 2:\n                        return normalized ? WebGPUConstants.VertexFormat.Unorm8x2 : WebGPUConstants.VertexFormat.Uint8x2;\n                    case 3:\n                    case 4:\n                        return normalized ? WebGPUConstants.VertexFormat.Unorm8x4 : WebGPUConstants.VertexFormat.Uint8x4;\n                }\n                break;\n            case VertexBuffer.SHORT:\n                switch (size) {\n                    case 1:\n                    case 2:\n                        return normalized ? WebGPUConstants.VertexFormat.Snorm16x2 : WebGPUConstants.VertexFormat.Sint16x2;\n                    case 3:\n                    case 4:\n                        return normalized ? WebGPUConstants.VertexFormat.Snorm16x4 : WebGPUConstants.VertexFormat.Sint16x4;\n                }\n                break;\n            case VertexBuffer.UNSIGNED_SHORT:\n                switch (size) {\n                    case 1:\n                    case 2:\n                        return normalized ? WebGPUConstants.VertexFormat.Unorm16x2 : WebGPUConstants.VertexFormat.Uint16x2;\n                    case 3:\n                    case 4:\n                        return normalized ? WebGPUConstants.VertexFormat.Unorm16x4 : WebGPUConstants.VertexFormat.Uint16x4;\n                }\n                break;\n            case VertexBuffer.INT:\n                switch (size) {\n                    case 1:\n                        return WebGPUConstants.VertexFormat.Sint32;\n                    case 2:\n                        return WebGPUConstants.VertexFormat.Sint32x2;\n                    case 3:\n                        return WebGPUConstants.VertexFormat.Sint32x3;\n                    case 4:\n                        return WebGPUConstants.VertexFormat.Sint32x4;\n                }\n                break;\n            case VertexBuffer.UNSIGNED_INT:\n                switch (size) {\n                    case 1:\n                        return WebGPUConstants.VertexFormat.Uint32;\n                    case 2:\n                        return WebGPUConstants.VertexFormat.Uint32x2;\n                    case 3:\n                        return WebGPUConstants.VertexFormat.Uint32x3;\n                    case 4:\n                        return WebGPUConstants.VertexFormat.Uint32x4;\n                }\n                break;\n            case VertexBuffer.FLOAT:\n                switch (size) {\n                    case 1:\n                        return WebGPUConstants.VertexFormat.Float32;\n                    case 2:\n                        return WebGPUConstants.VertexFormat.Float32x2;\n                    case 3:\n                        return WebGPUConstants.VertexFormat.Float32x3;\n                    case 4:\n                        return WebGPUConstants.VertexFormat.Float32x4;\n                }\n                break;\n        }\n        throw new Error(`Invalid Format '${vertexBuffer.getKind()}' - type=${type}, normalized=${normalized}, size=${size}`);\n    }\n    _getAphaBlendState() {\n        if (!this._alphaBlendEnabled) {\n            return null;\n        }\n        return {\n            srcFactor: WebGPUCacheRenderPipeline._GetAphaBlendFactor(this._alphaBlendFuncParams[2]),\n            dstFactor: WebGPUCacheRenderPipeline._GetAphaBlendFactor(this._alphaBlendFuncParams[3]),\n            operation: WebGPUCacheRenderPipeline._GetAphaBlendOperation(this._alphaBlendEqParams[1]),\n        };\n    }\n    _getColorBlendState() {\n        if (!this._alphaBlendEnabled) {\n            return null;\n        }\n        return {\n            srcFactor: WebGPUCacheRenderPipeline._GetAphaBlendFactor(this._alphaBlendFuncParams[0]),\n            dstFactor: WebGPUCacheRenderPipeline._GetAphaBlendFactor(this._alphaBlendFuncParams[1]),\n            operation: WebGPUCacheRenderPipeline._GetAphaBlendOperation(this._alphaBlendEqParams[0]),\n        };\n    }\n    _setShaderStage(id) {\n        if (this._shaderId !== id) {\n            this._shaderId = id;\n            this._states[StatePosition.ShaderStage] = id;\n            this._isDirty = true;\n            this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.ShaderStage);\n        }\n    }\n    _setRasterizationState(topology, sampleCount) {\n        const frontFace = this._frontFace;\n        const cullMode = this._cullEnabled ? this._cullFace : 0;\n        const clampDepth = this._clampDepth ? 1 : 0;\n        const alphaToCoverage = this._alphaToCoverageEnabled ? 1 : 0;\n        const rasterizationState = frontFace - 1 + (cullMode << 1) + (clampDepth << 3) + (alphaToCoverage << 4) + (topology << 5) + (sampleCount << 8);\n        if (this._rasterizationState !== rasterizationState) {\n            this._rasterizationState = rasterizationState;\n            this._states[StatePosition.RasterizationState] = this._rasterizationState;\n            this._isDirty = true;\n            this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.RasterizationState);\n        }\n    }\n    _setColorStates() {\n        let colorStates = ((this._writeMask ? 1 : 0) << 22) + (this._colorFormat << 23) + ((this._depthWriteEnabled ? 1 : 0) << 29); // this state has been moved from depthStencilState here because alpha and depth are related (generally when alpha is on, depth write is off and the other way around)\n        if (this._alphaBlendEnabled) {\n            colorStates +=\n                ((this._alphaBlendFuncParams[0] === null ? 2 : alphaBlendFactorToIndex[this._alphaBlendFuncParams[0]]) << 0) +\n                    ((this._alphaBlendFuncParams[1] === null ? 2 : alphaBlendFactorToIndex[this._alphaBlendFuncParams[1]]) << 4) +\n                    ((this._alphaBlendFuncParams[2] === null ? 2 : alphaBlendFactorToIndex[this._alphaBlendFuncParams[2]]) << 8) +\n                    ((this._alphaBlendFuncParams[3] === null ? 2 : alphaBlendFactorToIndex[this._alphaBlendFuncParams[3]]) << 12) +\n                    ((this._alphaBlendEqParams[0] === null ? 1 : this._alphaBlendEqParams[0] - 0x8005) << 16) +\n                    ((this._alphaBlendEqParams[1] === null ? 1 : this._alphaBlendEqParams[1] - 0x8005) << 19);\n        }\n        if (colorStates !== this._colorStates) {\n            this._colorStates = colorStates;\n            this._states[StatePosition.ColorStates] = this._colorStates;\n            this._isDirty = true;\n            this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.ColorStates);\n        }\n    }\n    _setDepthStencilState() {\n        const stencilState = !this._stencilEnabled\n            ? 7 /* ALWAYS */ + (1 /* KEEP */ << 3) + (1 /* KEEP */ << 6) + (1 /* KEEP */ << 9)\n            : this._stencilFrontCompare + (this._stencilFrontDepthFailOp << 3) + (this._stencilFrontPassOp << 6) + (this._stencilFrontFailOp << 9);\n        const depthStencilState = this._depthStencilFormat + ((this._depthTestEnabled ? this._depthCompare : 7) /* ALWAYS */ << 6) + (stencilState << 10); // stencil front - stencil back is the same\n        if (this._depthStencilState !== depthStencilState) {\n            this._depthStencilState = depthStencilState;\n            this._states[StatePosition.DepthStencilState] = this._depthStencilState;\n            this._isDirty = true;\n            this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.DepthStencilState);\n        }\n    }\n    _setVertexState(effect) {\n        var _a, _b;\n        const currStateLen = this._statesLength;\n        let newNumStates = StatePosition.VertexState;\n        const webgpuPipelineContext = effect._pipelineContext;\n        const attributes = webgpuPipelineContext.shaderProcessingContext.attributeNamesFromEffect;\n        const locations = webgpuPipelineContext.shaderProcessingContext.attributeLocationsFromEffect;\n        let currentGPUBuffer;\n        let numVertexBuffers = 0;\n        for (let index = 0; index < attributes.length; index++) {\n            const location = locations[index];\n            let vertexBuffer = (_a = (this._overrideVertexBuffers && this._overrideVertexBuffers[attributes[index]])) !== null && _a !== void 0 ? _a : this._vertexBuffers[attributes[index]];\n            if (!vertexBuffer) {\n                // In WebGL it's valid to not bind a vertex buffer to an attribute, but it's not valid in WebGPU\n                // So we must bind a dummy buffer when we are not given one for a specific attribute\n                vertexBuffer = this._emptyVertexBuffer;\n            }\n            const buffer = (_b = vertexBuffer.getBuffer()) === null || _b === void 0 ? void 0 : _b.underlyingResource;\n            // We optimize usage of GPUVertexBufferLayout: we will create a single GPUVertexBufferLayout for all the attributes which follow each other and which use the same GPU buffer\n            // However, there are some constraints in the attribute.offset value range, so we must check for them before being able to reuse the same GPUVertexBufferLayout\n            // See _getVertexInputDescriptor() below\n            if (vertexBuffer._validOffsetRange === undefined) {\n                const offset = vertexBuffer.byteOffset;\n                const formatSize = vertexBuffer.getSize(true);\n                const byteStride = vertexBuffer.byteStride;\n                vertexBuffer._validOffsetRange = offset <= this._kMaxVertexBufferStride - formatSize && (byteStride === 0 || offset + formatSize <= byteStride);\n            }\n            if (!(currentGPUBuffer && currentGPUBuffer === buffer && vertexBuffer._validOffsetRange)) {\n                // we can't combine the previous vertexBuffer with the current one\n                this.vertexBuffers[numVertexBuffers++] = vertexBuffer;\n                currentGPUBuffer = vertexBuffer._validOffsetRange ? buffer : null;\n            }\n            const vid = vertexBuffer.hashCode + (location << 7);\n            this._isDirty = this._isDirty || this._states[newNumStates] !== vid;\n            this._states[newNumStates++] = vid;\n        }\n        this.vertexBuffers.length = numVertexBuffers;\n        this._statesLength = newNumStates;\n        this._isDirty = this._isDirty || newNumStates !== currStateLen;\n        if (this._isDirty) {\n            this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.VertexState);\n        }\n    }\n    _setTextureState(textureState) {\n        if (this._textureState !== textureState) {\n            this._textureState = textureState;\n            this._states[StatePosition.TextureStage] = this._textureState;\n            this._isDirty = true;\n            this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.TextureStage);\n        }\n    }\n    _createPipelineLayout(webgpuPipelineContext) {\n        if (this._useTextureStage) {\n            return this._createPipelineLayoutWithTextureStage(webgpuPipelineContext);\n        }\n        const bindGroupLayouts = [];\n        const bindGroupLayoutEntries = webgpuPipelineContext.shaderProcessingContext.bindGroupLayoutEntries;\n        for (let i = 0; i < bindGroupLayoutEntries.length; i++) {\n            const setDefinition = bindGroupLayoutEntries[i];\n            bindGroupLayouts[i] = this._device.createBindGroupLayout({\n                entries: setDefinition,\n            });\n        }\n        webgpuPipelineContext.bindGroupLayouts = bindGroupLayouts;\n        return this._device.createPipelineLayout({ bindGroupLayouts });\n    }\n    _createPipelineLayoutWithTextureStage(webgpuPipelineContext) {\n        var _a;\n        const shaderProcessingContext = webgpuPipelineContext.shaderProcessingContext;\n        const bindGroupLayoutEntries = shaderProcessingContext.bindGroupLayoutEntries;\n        let bitVal = 1;\n        for (let i = 0; i < bindGroupLayoutEntries.length; i++) {\n            const setDefinition = bindGroupLayoutEntries[i];\n            for (let j = 0; j < setDefinition.length; j++) {\n                const entry = bindGroupLayoutEntries[i][j];\n                if (entry.texture) {\n                    const name = shaderProcessingContext.bindGroupLayoutEntryInfo[i][entry.binding].name;\n                    const textureInfo = shaderProcessingContext.availableTextures[name];\n                    const samplerInfo = textureInfo.autoBindSampler ? shaderProcessingContext.availableSamplers[name + WebGPUShaderProcessor.AutoSamplerSuffix] : null;\n                    let sampleType = textureInfo.sampleType;\n                    let samplerType = (_a = samplerInfo === null || samplerInfo === void 0 ? void 0 : samplerInfo.type) !== null && _a !== void 0 ? _a : WebGPUConstants.SamplerBindingType.Filtering;\n                    if (this._textureState & bitVal && sampleType !== WebGPUConstants.TextureSampleType.Depth) {\n                        // The texture is a 32 bits float texture but the system does not support linear filtering for them:\n                        // we set the sampler to \"non-filtering\" and the texture sample type to \"unfilterable-float\"\n                        if (textureInfo.autoBindSampler) {\n                            samplerType = WebGPUConstants.SamplerBindingType.NonFiltering;\n                        }\n                        sampleType = WebGPUConstants.TextureSampleType.UnfilterableFloat;\n                    }\n                    entry.texture.sampleType = sampleType;\n                    if (samplerInfo) {\n                        const binding = shaderProcessingContext.bindGroupLayoutEntryInfo[samplerInfo.binding.groupIndex][samplerInfo.binding.bindingIndex].index;\n                        bindGroupLayoutEntries[samplerInfo.binding.groupIndex][binding].sampler.type = samplerType;\n                    }\n                    bitVal = bitVal << 1;\n                }\n            }\n        }\n        const bindGroupLayouts = [];\n        for (let i = 0; i < bindGroupLayoutEntries.length; ++i) {\n            bindGroupLayouts[i] = this._device.createBindGroupLayout({\n                entries: bindGroupLayoutEntries[i],\n            });\n        }\n        webgpuPipelineContext.bindGroupLayouts = bindGroupLayouts;\n        return this._device.createPipelineLayout({ bindGroupLayouts });\n    }\n    _getVertexInputDescriptor(effect) {\n        var _a, _b;\n        const descriptors = [];\n        const webgpuPipelineContext = effect._pipelineContext;\n        const attributes = webgpuPipelineContext.shaderProcessingContext.attributeNamesFromEffect;\n        const locations = webgpuPipelineContext.shaderProcessingContext.attributeLocationsFromEffect;\n        let currentGPUBuffer;\n        let currentGPUAttributes;\n        for (let index = 0; index < attributes.length; index++) {\n            const location = locations[index];\n            let vertexBuffer = (_a = (this._overrideVertexBuffers && this._overrideVertexBuffers[attributes[index]])) !== null && _a !== void 0 ? _a : this._vertexBuffers[attributes[index]];\n            if (!vertexBuffer) {\n                // In WebGL it's valid to not bind a vertex buffer to an attribute, but it's not valid in WebGPU\n                // So we must bind a dummy buffer when we are not given one for a specific attribute\n                vertexBuffer = this._emptyVertexBuffer;\n            }\n            let buffer = (_b = vertexBuffer.getBuffer()) === null || _b === void 0 ? void 0 : _b.underlyingResource;\n            // We reuse the same GPUVertexBufferLayout for all attributes that use the same underlying GPU buffer (and for attributes that follow each other in the attributes array)\n            let offset = vertexBuffer.byteOffset;\n            const invalidOffsetRange = !vertexBuffer._validOffsetRange;\n            if (!(currentGPUBuffer && currentGPUAttributes && currentGPUBuffer === buffer) || invalidOffsetRange) {\n                const vertexBufferDescriptor = {\n                    arrayStride: vertexBuffer.byteStride,\n                    stepMode: vertexBuffer.getIsInstanced() ? WebGPUConstants.InputStepMode.Instance : WebGPUConstants.InputStepMode.Vertex,\n                    attributes: [],\n                };\n                descriptors.push(vertexBufferDescriptor);\n                currentGPUAttributes = vertexBufferDescriptor.attributes;\n                if (invalidOffsetRange) {\n                    offset = 0; // the offset will be set directly in the setVertexBuffer call\n                    buffer = null; // buffer can't be reused\n                }\n            }\n            currentGPUAttributes.push({\n                shaderLocation: location,\n                offset,\n                format: WebGPUCacheRenderPipeline._GetVertexInputDescriptorFormat(vertexBuffer),\n            });\n            currentGPUBuffer = buffer;\n        }\n        return descriptors;\n    }\n    _createRenderPipeline(effect, topology, sampleCount) {\n        var _a, _b, _c;\n        const webgpuPipelineContext = effect._pipelineContext;\n        const inputStateDescriptor = this._getVertexInputDescriptor(effect);\n        const pipelineLayout = this._createPipelineLayout(webgpuPipelineContext);\n        const colorStates = [];\n        const alphaBlend = this._getAphaBlendState();\n        const colorBlend = this._getColorBlendState();\n        if (this._mrtAttachments1 > 0) {\n            for (let i = 0; i < this._mrtFormats.length; ++i) {\n                const format = this._mrtFormats[i];\n                if (format) {\n                    const descr = {\n                        format,\n                        writeMask: (this._mrtEnabledMask & (1 << i)) !== 0 ? this._writeMask : 0,\n                    };\n                    if (alphaBlend && colorBlend) {\n                        descr.blend = {\n                            alpha: alphaBlend,\n                            color: colorBlend,\n                        };\n                    }\n                    colorStates.push(descr);\n                }\n                else {\n                    colorStates.push(null);\n                }\n            }\n        }\n        else {\n            if (this._webgpuColorFormat[0]) {\n                const descr = {\n                    format: this._webgpuColorFormat[0],\n                    writeMask: this._writeMask,\n                };\n                if (alphaBlend && colorBlend) {\n                    descr.blend = {\n                        alpha: alphaBlend,\n                        color: colorBlend,\n                    };\n                }\n                colorStates.push(descr);\n            }\n            else {\n                colorStates.push(null);\n            }\n        }\n        const stencilFrontBack = {\n            compare: WebGPUCacheRenderPipeline._GetCompareFunction(this._stencilEnabled ? this._stencilFrontCompare : 7 /* ALWAYS */),\n            depthFailOp: WebGPUCacheRenderPipeline._GetStencilOpFunction(this._stencilEnabled ? this._stencilFrontDepthFailOp : 1 /* KEEP */),\n            failOp: WebGPUCacheRenderPipeline._GetStencilOpFunction(this._stencilEnabled ? this._stencilFrontFailOp : 1 /* KEEP */),\n            passOp: WebGPUCacheRenderPipeline._GetStencilOpFunction(this._stencilEnabled ? this._stencilFrontPassOp : 1 /* KEEP */),\n        };\n        let stripIndexFormat = undefined;\n        if (topology === WebGPUConstants.PrimitiveTopology.LineStrip || topology === WebGPUConstants.PrimitiveTopology.TriangleStrip) {\n            stripIndexFormat = !this._indexBuffer || this._indexBuffer.is32Bits ? WebGPUConstants.IndexFormat.Uint32 : WebGPUConstants.IndexFormat.Uint16;\n        }\n        const depthStencilFormatHasStencil = this._webgpuDepthStencilFormat ? WebGPUTextureHelper.HasStencilAspect(this._webgpuDepthStencilFormat) : false;\n        return this._device.createRenderPipeline({\n            label: `RenderPipeline_${(_b = (_a = colorStates[0]) === null || _a === void 0 ? void 0 : _a.format) !== null && _b !== void 0 ? _b : \"nooutput\"}_${(_c = this._webgpuDepthStencilFormat) !== null && _c !== void 0 ? _c : \"nodepth\"}_samples${sampleCount}`,\n            layout: pipelineLayout,\n            vertex: {\n                module: webgpuPipelineContext.stages.vertexStage.module,\n                entryPoint: webgpuPipelineContext.stages.vertexStage.entryPoint,\n                buffers: inputStateDescriptor,\n            },\n            primitive: {\n                topology,\n                stripIndexFormat,\n                frontFace: this._frontFace === 1 ? WebGPUConstants.FrontFace.CCW : WebGPUConstants.FrontFace.CW,\n                cullMode: !this._cullEnabled ? WebGPUConstants.CullMode.None : this._cullFace === 2 ? WebGPUConstants.CullMode.Front : WebGPUConstants.CullMode.Back,\n            },\n            fragment: !webgpuPipelineContext.stages.fragmentStage\n                ? undefined\n                : {\n                    module: webgpuPipelineContext.stages.fragmentStage.module,\n                    entryPoint: webgpuPipelineContext.stages.fragmentStage.entryPoint,\n                    targets: colorStates,\n                },\n            multisample: {\n                count: sampleCount,\n                /*mask,\n                alphaToCoverageEnabled,*/\n            },\n            depthStencil: this._webgpuDepthStencilFormat === undefined\n                ? undefined\n                : {\n                    depthWriteEnabled: this._depthWriteEnabled,\n                    depthCompare: this._depthTestEnabled ? WebGPUCacheRenderPipeline._GetCompareFunction(this._depthCompare) : WebGPUConstants.CompareFunction.Always,\n                    format: this._webgpuDepthStencilFormat,\n                    stencilFront: this._stencilEnabled && depthStencilFormatHasStencil ? stencilFrontBack : undefined,\n                    stencilBack: this._stencilEnabled && depthStencilFormatHasStencil ? stencilFrontBack : undefined,\n                    stencilReadMask: this._stencilEnabled && depthStencilFormatHasStencil ? this._stencilReadMask : undefined,\n                    stencilWriteMask: this._stencilEnabled && depthStencilFormatHasStencil ? this._stencilWriteMask : undefined,\n                    depthBias: this._depthBias,\n                    depthBiasClamp: this._depthBiasClamp,\n                    depthBiasSlopeScale: this._depthBiasSlopeScale,\n                },\n        });\n    }\n}\nWebGPUCacheRenderPipeline.NumCacheHitWithoutHash = 0;\nWebGPUCacheRenderPipeline.NumCacheHitWithHash = 0;\nWebGPUCacheRenderPipeline.NumCacheMiss = 0;\nWebGPUCacheRenderPipeline.NumPipelineCreationLastFrame = 0;\nWebGPUCacheRenderPipeline._NumPipelineCreationCurrentFrame = 0;\n//# sourceMappingURL=webgpuCacheRenderPipeline.js.map","import { WebGPUCacheRenderPipeline } from \"./webgpuCacheRenderPipeline.js\";\n/** @internal */\nclass NodeState {\n    constructor() {\n        this.values = {};\n    }\n    count() {\n        let countNode = 0, countPipeline = this.pipeline ? 1 : 0;\n        for (const value in this.values) {\n            const node = this.values[value];\n            const [childCountNodes, childCoundPipeline] = node.count();\n            countNode += childCountNodes;\n            countPipeline += childCoundPipeline;\n            countNode++;\n        }\n        return [countNode, countPipeline];\n    }\n}\n/** @internal */\nexport class WebGPUCacheRenderPipelineTree extends WebGPUCacheRenderPipeline {\n    static GetNodeCounts() {\n        const counts = WebGPUCacheRenderPipelineTree._Cache.count();\n        return { nodeCount: counts[0], pipelineCount: counts[1] };\n    }\n    static _GetPipelines(node, pipelines, curPath, curPathLen) {\n        if (node.pipeline) {\n            const path = curPath.slice();\n            path.length = curPathLen;\n            pipelines.push(path);\n        }\n        for (const value in node.values) {\n            const nnode = node.values[value];\n            curPath[curPathLen] = parseInt(value);\n            WebGPUCacheRenderPipelineTree._GetPipelines(nnode, pipelines, curPath, curPathLen + 1);\n        }\n    }\n    static GetPipelines() {\n        const pipelines = [];\n        WebGPUCacheRenderPipelineTree._GetPipelines(WebGPUCacheRenderPipelineTree._Cache, pipelines, [], 0);\n        return pipelines;\n    }\n    constructor(device, emptyVertexBuffer, useTextureStage) {\n        super(device, emptyVertexBuffer, useTextureStage);\n        this._nodeStack = [];\n        this._nodeStack[0] = WebGPUCacheRenderPipelineTree._Cache;\n    }\n    _getRenderPipeline(param) {\n        let node = this._nodeStack[this._stateDirtyLowestIndex];\n        for (let i = this._stateDirtyLowestIndex; i < this._statesLength; ++i) {\n            let nn = node.values[this._states[i]];\n            if (!nn) {\n                nn = new NodeState();\n                node.values[this._states[i]] = nn;\n            }\n            node = nn;\n            this._nodeStack[i + 1] = node;\n        }\n        param.token = node;\n        param.pipeline = node.pipeline;\n    }\n    _setRenderPipeline(param) {\n        param.token.pipeline = param.pipeline;\n    }\n}\nWebGPUCacheRenderPipelineTree._Cache = new NodeState();\n//# sourceMappingURL=webgpuCacheRenderPipelineTree.js.map","import * as WebGPUConstants from \"./webgpuConstants.js\";\n\nconst filterToBits = [\n    0 | (0 << 1) | (0 << 2),\n    0 | (0 << 1) | (0 << 2),\n    1 | (1 << 1) | (0 << 2),\n    1 | (1 << 1) | (1 << 2),\n    0 | (0 << 1) | (0 << 2),\n    0 | (1 << 1) | (0 << 2),\n    0 | (1 << 1) | (1 << 2),\n    0 | (1 << 1) | (0 << 2),\n    0 | (0 << 1) | (1 << 2),\n    1 | (0 << 1) | (0 << 2),\n    1 | (0 << 1) | (1 << 2),\n    1 | (1 << 1) | (0 << 2),\n    1 | (0 << 1) | (0 << 2), // TEXTURE_LINEAR_NEAREST\n];\n// subtract 0x01FF from the comparison function value before indexing this array!\nconst comparisonFunctionToBits = [\n    (0 << 3) | (0 << 4) | (0 << 5) | (0 << 6),\n    (0 << 3) | (0 << 4) | (0 << 5) | (1 << 6),\n    (0 << 3) | (0 << 4) | (1 << 5) | (0 << 6),\n    (0 << 3) | (0 << 4) | (1 << 5) | (1 << 6),\n    (0 << 3) | (1 << 4) | (0 << 5) | (0 << 6),\n    (0 << 3) | (1 << 4) | (0 << 5) | (1 << 6),\n    (0 << 3) | (1 << 4) | (1 << 5) | (0 << 6),\n    (0 << 3) | (1 << 4) | (1 << 5) | (1 << 6),\n    (1 << 3) | (0 << 4) | (0 << 5) | (0 << 6), // ALWAYS\n];\nconst filterNoMipToBits = [\n    0 << 7,\n    1 << 7,\n    1 << 7,\n    0 << 7,\n    0 << 7,\n    0 << 7,\n    0 << 7,\n    1 << 7,\n    0 << 7,\n    0 << 7,\n    0 << 7,\n    0 << 7,\n    1 << 7, // TEXTURE_LINEAR_NEAREST\n];\n/** @internal */\nexport class WebGPUCacheSampler {\n    constructor(device) {\n        this._samplers = {};\n        this._device = device;\n        this.disabled = false;\n    }\n    static GetSamplerHashCode(sampler) {\n        var _a, _b, _c;\n        // The WebGPU spec currently only allows values 1 and 4 for anisotropy\n        const anisotropy = sampler._cachedAnisotropicFilteringLevel && sampler._cachedAnisotropicFilteringLevel > 1 ? 4 : 1;\n        const code = filterToBits[sampler.samplingMode] +\n            comparisonFunctionToBits[(sampler._comparisonFunction || 0x0202) - 0x0200 + 1] +\n            filterNoMipToBits[sampler.samplingMode] + // handle the lodMinClamp = lodMaxClamp = 0 case when no filter used for mip mapping\n            (((_a = sampler._cachedWrapU) !== null && _a !== void 0 ? _a : 1) << 8) +\n            (((_b = sampler._cachedWrapV) !== null && _b !== void 0 ? _b : 1) << 10) +\n            (((_c = sampler._cachedWrapR) !== null && _c !== void 0 ? _c : 1) << 12) +\n            ((sampler.useMipMaps ? 1 : 0) << 14) + // need to factor this in because _getSamplerFilterDescriptor depends on samplingMode AND useMipMaps!\n            (anisotropy << 15);\n        return code;\n    }\n    static _GetSamplerFilterDescriptor(sampler, anisotropy) {\n        let magFilter, minFilter, mipmapFilter, lodMinClamp, lodMaxClamp;\n        const useMipMaps = sampler.useMipMaps;\n        switch (sampler.samplingMode) {\n            case 11:\n                magFilter = WebGPUConstants.FilterMode.Linear;\n                minFilter = WebGPUConstants.FilterMode.Linear;\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n                if (!useMipMaps) {\n                    lodMinClamp = lodMaxClamp = 0;\n                }\n                break;\n            case 3:\n            case 3:\n                magFilter = WebGPUConstants.FilterMode.Linear;\n                minFilter = WebGPUConstants.FilterMode.Linear;\n                if (!useMipMaps) {\n                    mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n                    lodMinClamp = lodMaxClamp = 0;\n                }\n                else {\n                    mipmapFilter = WebGPUConstants.FilterMode.Linear;\n                }\n                break;\n            case 8:\n                magFilter = WebGPUConstants.FilterMode.Nearest;\n                minFilter = WebGPUConstants.FilterMode.Nearest;\n                if (!useMipMaps) {\n                    mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n                    lodMinClamp = lodMaxClamp = 0;\n                }\n                else {\n                    mipmapFilter = WebGPUConstants.FilterMode.Linear;\n                }\n                break;\n            case 4:\n                magFilter = WebGPUConstants.FilterMode.Nearest;\n                minFilter = WebGPUConstants.FilterMode.Nearest;\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n                if (!useMipMaps) {\n                    lodMinClamp = lodMaxClamp = 0;\n                }\n                break;\n            case 5:\n                magFilter = WebGPUConstants.FilterMode.Nearest;\n                minFilter = WebGPUConstants.FilterMode.Linear;\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n                if (!useMipMaps) {\n                    lodMinClamp = lodMaxClamp = 0;\n                }\n                break;\n            case 6:\n                magFilter = WebGPUConstants.FilterMode.Nearest;\n                minFilter = WebGPUConstants.FilterMode.Linear;\n                if (!useMipMaps) {\n                    mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n                    lodMinClamp = lodMaxClamp = 0;\n                }\n                else {\n                    mipmapFilter = WebGPUConstants.FilterMode.Linear;\n                }\n                break;\n            case 7:\n                magFilter = WebGPUConstants.FilterMode.Nearest;\n                minFilter = WebGPUConstants.FilterMode.Linear;\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n                lodMinClamp = lodMaxClamp = 0;\n                break;\n            case 1:\n            case 1:\n                magFilter = WebGPUConstants.FilterMode.Nearest;\n                minFilter = WebGPUConstants.FilterMode.Nearest;\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n                lodMinClamp = lodMaxClamp = 0;\n                break;\n            case 9:\n                magFilter = WebGPUConstants.FilterMode.Linear;\n                minFilter = WebGPUConstants.FilterMode.Nearest;\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n                if (!useMipMaps) {\n                    lodMinClamp = lodMaxClamp = 0;\n                }\n                break;\n            case 10:\n                magFilter = WebGPUConstants.FilterMode.Linear;\n                minFilter = WebGPUConstants.FilterMode.Nearest;\n                if (!useMipMaps) {\n                    mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n                    lodMinClamp = lodMaxClamp = 0;\n                }\n                else {\n                    mipmapFilter = WebGPUConstants.FilterMode.Linear;\n                }\n                break;\n            case 2:\n            case 2:\n                magFilter = WebGPUConstants.FilterMode.Linear;\n                minFilter = WebGPUConstants.FilterMode.Linear;\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n                lodMinClamp = lodMaxClamp = 0;\n                break;\n            case 12:\n                magFilter = WebGPUConstants.FilterMode.Linear;\n                minFilter = WebGPUConstants.FilterMode.Nearest;\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n                lodMinClamp = lodMaxClamp = 0;\n                break;\n            default:\n                magFilter = WebGPUConstants.FilterMode.Nearest;\n                minFilter = WebGPUConstants.FilterMode.Nearest;\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n                lodMinClamp = lodMaxClamp = 0;\n                break;\n        }\n        if (anisotropy > 1 && (lodMinClamp !== 0 || lodMaxClamp !== 0)) {\n            return {\n                magFilter: WebGPUConstants.FilterMode.Linear,\n                minFilter: WebGPUConstants.FilterMode.Linear,\n                mipmapFilter: WebGPUConstants.FilterMode.Linear,\n                anisotropyEnabled: true,\n            };\n        }\n        return {\n            magFilter,\n            minFilter,\n            mipmapFilter,\n            lodMinClamp,\n            lodMaxClamp,\n        };\n    }\n    static _GetWrappingMode(mode) {\n        switch (mode) {\n            case 1:\n                return WebGPUConstants.AddressMode.Repeat;\n            case 0:\n                return WebGPUConstants.AddressMode.ClampToEdge;\n            case 2:\n                return WebGPUConstants.AddressMode.MirrorRepeat;\n        }\n        return WebGPUConstants.AddressMode.Repeat;\n    }\n    static _GetSamplerWrappingDescriptor(sampler) {\n        return {\n            addressModeU: this._GetWrappingMode(sampler._cachedWrapU),\n            addressModeV: this._GetWrappingMode(sampler._cachedWrapV),\n            addressModeW: this._GetWrappingMode(sampler._cachedWrapR),\n        };\n    }\n    static _GetSamplerDescriptor(sampler) {\n        // The WebGPU spec currently only allows values 1 and 4 for anisotropy\n        const anisotropy = sampler.useMipMaps && sampler._cachedAnisotropicFilteringLevel && sampler._cachedAnisotropicFilteringLevel > 1 ? 4 : 1;\n        const filterDescriptor = this._GetSamplerFilterDescriptor(sampler, anisotropy);\n        return {\n            ...filterDescriptor,\n            ...this._GetSamplerWrappingDescriptor(sampler),\n            compare: sampler._comparisonFunction ? WebGPUCacheSampler.GetCompareFunction(sampler._comparisonFunction) : undefined,\n            maxAnisotropy: filterDescriptor.anisotropyEnabled ? anisotropy : 1,\n        };\n    }\n    static GetCompareFunction(compareFunction) {\n        switch (compareFunction) {\n            case 519:\n                return WebGPUConstants.CompareFunction.Always;\n            case 514:\n                return WebGPUConstants.CompareFunction.Equal;\n            case 516:\n                return WebGPUConstants.CompareFunction.Greater;\n            case 518:\n                return WebGPUConstants.CompareFunction.GreaterEqual;\n            case 513:\n                return WebGPUConstants.CompareFunction.Less;\n            case 515:\n                return WebGPUConstants.CompareFunction.LessEqual;\n            case 512:\n                return WebGPUConstants.CompareFunction.Never;\n            case 517:\n                return WebGPUConstants.CompareFunction.NotEqual;\n            default:\n                return WebGPUConstants.CompareFunction.Less;\n        }\n    }\n    getSampler(sampler, bypassCache = false, hash = 0) {\n        if (this.disabled) {\n            return this._device.createSampler(WebGPUCacheSampler._GetSamplerDescriptor(sampler));\n        }\n        if (bypassCache) {\n            hash = 0;\n        }\n        else if (hash === 0) {\n            hash = WebGPUCacheSampler.GetSamplerHashCode(sampler);\n        }\n        let gpuSampler = bypassCache ? undefined : this._samplers[hash];\n        if (!gpuSampler) {\n            gpuSampler = this._device.createSampler(WebGPUCacheSampler._GetSamplerDescriptor(sampler));\n            if (!bypassCache) {\n                this._samplers[hash] = gpuSampler;\n            }\n        }\n        return gpuSampler;\n    }\n}\n//# sourceMappingURL=webgpuCacheSampler.js.map","\nimport { WebGPUCacheRenderPipelineTree } from \"./webgpuCacheRenderPipelineTree.js\";\nimport { WebGPUShaderProcessingContext } from \"./webgpuShaderProcessingContext.js\";\nimport { renderableTextureFormatToIndex, WebGPUTextureHelper } from \"./webgpuTextureHelper.js\";\nimport \"../../Shaders/clearQuad.vertex.js\";\nimport \"../../Shaders/clearQuad.fragment.js\";\n/** @internal */\nexport class WebGPUClearQuad {\n    setDepthStencilFormat(format) {\n        this._depthTextureFormat = format;\n        this._cacheRenderPipeline.setDepthStencilFormat(format);\n    }\n    setColorFormat(format) {\n        this._cacheRenderPipeline.setColorFormat(format);\n    }\n    setMRTAttachments(attachments, textureArray, textureCount) {\n        this._cacheRenderPipeline.setMRT(textureArray, textureCount);\n        this._cacheRenderPipeline.setMRTAttachments(attachments);\n    }\n    constructor(device, engine, emptyVertexBuffer) {\n        this._bindGroups = {};\n        this._bundleCache = {};\n        this._keyTemp = [];\n        this._device = device;\n        this._engine = engine;\n        this._cacheRenderPipeline = new WebGPUCacheRenderPipelineTree(this._device, emptyVertexBuffer, !engine._caps.textureFloatLinearFiltering);\n        this._cacheRenderPipeline.setDepthTestEnabled(false);\n        this._cacheRenderPipeline.setStencilReadMask(0xff);\n        this._effect = engine.createEffect(\"clearQuad\", [], [\"color\", \"depthValue\"]);\n    }\n    clear(renderPass, clearColor, clearDepth, clearStencil, sampleCount = 1) {\n        var _a, _b;\n        let renderPass2;\n        let bundle = null;\n        let bundleKey;\n        const isRTTPass = !!this._engine._currentRenderTarget;\n        if (renderPass) {\n            renderPass2 = renderPass;\n        }\n        else {\n            let idx = 0;\n            this._keyTemp.length = 0;\n            for (let i = 0; i < this._cacheRenderPipeline.colorFormats.length; ++i) {\n                this._keyTemp[idx++] = renderableTextureFormatToIndex[(_a = this._cacheRenderPipeline.colorFormats[i]) !== null && _a !== void 0 ? _a : \"\"];\n            }\n            const depthStencilFormatIndex = renderableTextureFormatToIndex[(_b = this._depthTextureFormat) !== null && _b !== void 0 ? _b : 0];\n            this._keyTemp[idx] =\n                (clearColor ? clearColor.r + clearColor.g * 256 + clearColor.b * 256 * 256 + clearColor.a * 256 * 256 * 256 : 0) +\n                    (clearDepth ? 2 ** 32 : 0) +\n                    (clearStencil ? 2 ** 33 : 0) +\n                    (this._engine.useReverseDepthBuffer ? 2 ** 34 : 0) +\n                    (isRTTPass ? 2 ** 35 : 0) +\n                    (sampleCount > 1 ? 2 ** 36 : 0) +\n                    depthStencilFormatIndex * 2 ** 37;\n            bundleKey = this._keyTemp.join(\"_\");\n            bundle = this._bundleCache[bundleKey];\n            if (bundle) {\n                return bundle;\n            }\n            renderPass2 = this._device.createRenderBundleEncoder({\n                colorFormats: this._cacheRenderPipeline.colorFormats,\n                depthStencilFormat: this._depthTextureFormat,\n                sampleCount,\n            });\n        }\n        this._cacheRenderPipeline.setDepthWriteEnabled(!!clearDepth);\n        this._cacheRenderPipeline.setStencilEnabled(!!clearStencil && !!this._depthTextureFormat && WebGPUTextureHelper.HasStencilAspect(this._depthTextureFormat));\n        this._cacheRenderPipeline.setStencilWriteMask(clearStencil ? 0xff : 0);\n        this._cacheRenderPipeline.setStencilCompare(clearStencil ? 519 : 512);\n        this._cacheRenderPipeline.setStencilPassOp(clearStencil ? 7681 : 7680);\n        this._cacheRenderPipeline.setWriteMask(clearColor ? 0xf : 0);\n        const pipeline = this._cacheRenderPipeline.getRenderPipeline(7, this._effect, sampleCount);\n        const webgpuPipelineContext = this._effect._pipelineContext;\n        if (clearColor) {\n            this._effect.setDirectColor4(\"color\", clearColor);\n        }\n        this._effect.setFloat(\"depthValue\", this._engine.useReverseDepthBuffer ? this._engine._clearReverseDepthValue : this._engine._clearDepthValue);\n        webgpuPipelineContext.uniformBuffer.update();\n        const bufferInternals = isRTTPass ? this._engine._ubInvertY : this._engine._ubDontInvertY;\n        const bufferLeftOver = webgpuPipelineContext.uniformBuffer.getBuffer();\n        const key = bufferLeftOver.uniqueId + \"-\" + bufferInternals.uniqueId;\n        let bindGroups = this._bindGroups[key];\n        if (!bindGroups) {\n            const bindGroupLayouts = webgpuPipelineContext.bindGroupLayouts;\n            bindGroups = this._bindGroups[key] = [];\n            bindGroups.push(this._device.createBindGroup({\n                layout: bindGroupLayouts[0],\n                entries: [],\n            }));\n            if (!WebGPUShaderProcessingContext._SimplifiedKnownBindings) {\n                bindGroups.push(this._device.createBindGroup({\n                    layout: bindGroupLayouts[1],\n                    entries: [],\n                }));\n            }\n            bindGroups.push(this._device.createBindGroup({\n                layout: bindGroupLayouts[WebGPUShaderProcessingContext._SimplifiedKnownBindings ? 1 : 2],\n                entries: [\n                    {\n                        binding: 0,\n                        resource: {\n                            buffer: bufferInternals.underlyingResource,\n                            size: bufferInternals.capacity,\n                        },\n                    },\n                    {\n                        binding: 1,\n                        resource: {\n                            buffer: bufferLeftOver.underlyingResource,\n                            size: bufferLeftOver.capacity,\n                        },\n                    },\n                ],\n            }));\n        }\n        renderPass2.setPipeline(pipeline);\n        for (let i = 0; i < bindGroups.length; ++i) {\n            renderPass2.setBindGroup(i, bindGroups[i]);\n        }\n        renderPass2.draw(4, 1, 0, 0);\n        if (!renderPass) {\n            bundle = renderPass2.finish();\n            this._bundleCache[bundleKey] = bundle;\n        }\n        return bundle;\n    }\n}\n//# sourceMappingURL=webgpuClearQuad.js.map","/** @internal */\n// eslint-disable-next-line import/export\nexport var PredefinedColorSpace;\n(function (PredefinedColorSpace) {\n    PredefinedColorSpace[\"SRGB\"] = \"srgb\";\n})(PredefinedColorSpace || (PredefinedColorSpace = {}));\n/** @internal */\n// eslint-disable-next-line import/export\nexport var PowerPreference;\n(function (PowerPreference) {\n    PowerPreference[\"LowPower\"] = \"low-power\";\n    PowerPreference[\"HighPerformance\"] = \"high-performance\";\n})(PowerPreference || (PowerPreference = {}));\n/** @internal */\nexport var FeatureName;\n(function (FeatureName) {\n    FeatureName[\"DepthClipControl\"] = \"depth-clip-control\";\n    FeatureName[\"Depth24UnormStencil8\"] = \"depth24unorm-stencil8\";\n    FeatureName[\"Depth32FloatStencil8\"] = \"depth32float-stencil8\";\n    FeatureName[\"TextureCompressionBC\"] = \"texture-compression-bc\";\n    FeatureName[\"TextureCompressionETC2\"] = \"texture-compression-etc2\";\n    FeatureName[\"TextureCompressionASTC\"] = \"texture-compression-astc\";\n    FeatureName[\"TimestampQuery\"] = \"timestamp-query\";\n    FeatureName[\"IndirectFirstInstance\"] = \"indirect-first-instance\";\n    FeatureName[\"ShaderF16\"] = \"shader-f16\";\n    FeatureName[\"BGRA8UnormStorage\"] = \"bgra8unorm-storage\";\n})(FeatureName || (FeatureName = {}));\n/** @internal */\nexport var BufferUsage;\n(function (BufferUsage) {\n    BufferUsage[BufferUsage[\"MapRead\"] = 1] = \"MapRead\";\n    BufferUsage[BufferUsage[\"MapWrite\"] = 2] = \"MapWrite\";\n    BufferUsage[BufferUsage[\"CopySrc\"] = 4] = \"CopySrc\";\n    BufferUsage[BufferUsage[\"CopyDst\"] = 8] = \"CopyDst\";\n    BufferUsage[BufferUsage[\"Index\"] = 16] = \"Index\";\n    BufferUsage[BufferUsage[\"Vertex\"] = 32] = \"Vertex\";\n    BufferUsage[BufferUsage[\"Uniform\"] = 64] = \"Uniform\";\n    BufferUsage[BufferUsage[\"Storage\"] = 128] = \"Storage\";\n    BufferUsage[BufferUsage[\"Indirect\"] = 256] = \"Indirect\";\n    BufferUsage[BufferUsage[\"QueryResolve\"] = 512] = \"QueryResolve\";\n})(BufferUsage || (BufferUsage = {}));\n/** @internal */\nexport var MapMode;\n(function (MapMode) {\n    MapMode[MapMode[\"Read\"] = 1] = \"Read\";\n    MapMode[MapMode[\"Write\"] = 2] = \"Write\";\n})(MapMode || (MapMode = {}));\n/** @internal */\nexport var TextureDimension;\n(function (TextureDimension) {\n    TextureDimension[\"E1d\"] = \"1d\";\n    TextureDimension[\"E2d\"] = \"2d\";\n    TextureDimension[\"E3d\"] = \"3d\";\n})(TextureDimension || (TextureDimension = {}));\n/** @internal */\nexport var TextureUsage;\n(function (TextureUsage) {\n    TextureUsage[TextureUsage[\"CopySrc\"] = 1] = \"CopySrc\";\n    TextureUsage[TextureUsage[\"CopyDst\"] = 2] = \"CopyDst\";\n    TextureUsage[TextureUsage[\"TextureBinding\"] = 4] = \"TextureBinding\";\n    TextureUsage[TextureUsage[\"StorageBinding\"] = 8] = \"StorageBinding\";\n    TextureUsage[TextureUsage[\"RenderAttachment\"] = 16] = \"RenderAttachment\";\n})(TextureUsage || (TextureUsage = {}));\n/** @internal */\nexport var TextureViewDimension;\n(function (TextureViewDimension) {\n    TextureViewDimension[\"E1d\"] = \"1d\";\n    TextureViewDimension[\"E2d\"] = \"2d\";\n    TextureViewDimension[\"E2dArray\"] = \"2d-array\";\n    TextureViewDimension[\"Cube\"] = \"cube\";\n    TextureViewDimension[\"CubeArray\"] = \"cube-array\";\n    TextureViewDimension[\"E3d\"] = \"3d\";\n})(TextureViewDimension || (TextureViewDimension = {}));\n/** @internal */\nexport var TextureAspect;\n(function (TextureAspect) {\n    TextureAspect[\"All\"] = \"all\";\n    TextureAspect[\"StencilOnly\"] = \"stencil-only\";\n    TextureAspect[\"DepthOnly\"] = \"depth-only\";\n})(TextureAspect || (TextureAspect = {}));\n/**\n * Comments taken from https://github.com/gfx-rs/wgpu/blob/master/wgpu-types/src/lib.rs\n * @internal\n */\nexport var TextureFormat;\n(function (TextureFormat) {\n    // 8-bit formats\n    TextureFormat[\"R8Unorm\"] = \"r8unorm\";\n    TextureFormat[\"R8Snorm\"] = \"r8snorm\";\n    TextureFormat[\"R8Uint\"] = \"r8uint\";\n    TextureFormat[\"R8Sint\"] = \"r8sint\";\n    // 16-bit formats\n    TextureFormat[\"R16Uint\"] = \"r16uint\";\n    TextureFormat[\"R16Sint\"] = \"r16sint\";\n    TextureFormat[\"R16Float\"] = \"r16float\";\n    TextureFormat[\"RG8Unorm\"] = \"rg8unorm\";\n    TextureFormat[\"RG8Snorm\"] = \"rg8snorm\";\n    TextureFormat[\"RG8Uint\"] = \"rg8uint\";\n    TextureFormat[\"RG8Sint\"] = \"rg8sint\";\n    // 32-bit formats\n    TextureFormat[\"R32Uint\"] = \"r32uint\";\n    TextureFormat[\"R32Sint\"] = \"r32sint\";\n    TextureFormat[\"R32Float\"] = \"r32float\";\n    TextureFormat[\"RG16Uint\"] = \"rg16uint\";\n    TextureFormat[\"RG16Sint\"] = \"rg16sint\";\n    TextureFormat[\"RG16Float\"] = \"rg16float\";\n    TextureFormat[\"RGBA8Unorm\"] = \"rgba8unorm\";\n    TextureFormat[\"RGBA8UnormSRGB\"] = \"rgba8unorm-srgb\";\n    TextureFormat[\"RGBA8Snorm\"] = \"rgba8snorm\";\n    TextureFormat[\"RGBA8Uint\"] = \"rgba8uint\";\n    TextureFormat[\"RGBA8Sint\"] = \"rgba8sint\";\n    TextureFormat[\"BGRA8Unorm\"] = \"bgra8unorm\";\n    TextureFormat[\"BGRA8UnormSRGB\"] = \"bgra8unorm-srgb\";\n    // Packed 32-bit formats\n    TextureFormat[\"RGB9E5UFloat\"] = \"rgb9e5ufloat\";\n    TextureFormat[\"RGB10A2Unorm\"] = \"rgb10a2unorm\";\n    TextureFormat[\"RG11B10UFloat\"] = \"rg11b10ufloat\";\n    // 64-bit formats\n    TextureFormat[\"RG32Uint\"] = \"rg32uint\";\n    TextureFormat[\"RG32Sint\"] = \"rg32sint\";\n    TextureFormat[\"RG32Float\"] = \"rg32float\";\n    TextureFormat[\"RGBA16Uint\"] = \"rgba16uint\";\n    TextureFormat[\"RGBA16Sint\"] = \"rgba16sint\";\n    TextureFormat[\"RGBA16Float\"] = \"rgba16float\";\n    // 128-bit formats\n    TextureFormat[\"RGBA32Uint\"] = \"rgba32uint\";\n    TextureFormat[\"RGBA32Sint\"] = \"rgba32sint\";\n    TextureFormat[\"RGBA32Float\"] = \"rgba32float\";\n    // Depth and stencil formats\n    TextureFormat[\"Stencil8\"] = \"stencil8\";\n    TextureFormat[\"Depth16Unorm\"] = \"depth16unorm\";\n    TextureFormat[\"Depth24Plus\"] = \"depth24plus\";\n    TextureFormat[\"Depth24PlusStencil8\"] = \"depth24plus-stencil8\";\n    TextureFormat[\"Depth32Float\"] = \"depth32float\";\n    // BC compressed formats usable if \"texture-compression-bc\" is both\n    // supported by the device/user agent and enabled in requestDevice.\n    TextureFormat[\"BC1RGBAUnorm\"] = \"bc1-rgba-unorm\";\n    TextureFormat[\"BC1RGBAUnormSRGB\"] = \"bc1-rgba-unorm-srgb\";\n    TextureFormat[\"BC2RGBAUnorm\"] = \"bc2-rgba-unorm\";\n    TextureFormat[\"BC2RGBAUnormSRGB\"] = \"bc2-rgba-unorm-srgb\";\n    TextureFormat[\"BC3RGBAUnorm\"] = \"bc3-rgba-unorm\";\n    TextureFormat[\"BC3RGBAUnormSRGB\"] = \"bc3-rgba-unorm-srgb\";\n    TextureFormat[\"BC4RUnorm\"] = \"bc4-r-unorm\";\n    TextureFormat[\"BC4RSnorm\"] = \"bc4-r-snorm\";\n    TextureFormat[\"BC5RGUnorm\"] = \"bc5-rg-unorm\";\n    TextureFormat[\"BC5RGSnorm\"] = \"bc5-rg-snorm\";\n    TextureFormat[\"BC6HRGBUFloat\"] = \"bc6h-rgb-ufloat\";\n    TextureFormat[\"BC6HRGBFloat\"] = \"bc6h-rgb-float\";\n    TextureFormat[\"BC7RGBAUnorm\"] = \"bc7-rgba-unorm\";\n    TextureFormat[\"BC7RGBAUnormSRGB\"] = \"bc7-rgba-unorm-srgb\";\n    // ETC2 compressed formats usable if \"texture-compression-etc2\" is both\n    // supported by the device/user agent and enabled in requestDevice.\n    TextureFormat[\"ETC2RGB8Unorm\"] = \"etc2-rgb8unorm\";\n    TextureFormat[\"ETC2RGB8UnormSRGB\"] = \"etc2-rgb8unorm-srgb\";\n    TextureFormat[\"ETC2RGB8A1Unorm\"] = \"etc2-rgb8a1unorm\";\n    TextureFormat[\"ETC2RGB8A1UnormSRGB\"] = \"etc2-rgb8a1unorm-srgb\";\n    TextureFormat[\"ETC2RGBA8Unorm\"] = \"etc2-rgba8unorm\";\n    TextureFormat[\"ETC2RGBA8UnormSRGB\"] = \"etc2-rgba8unorm-srgb\";\n    TextureFormat[\"EACR11Unorm\"] = \"eac-r11unorm\";\n    TextureFormat[\"EACR11Snorm\"] = \"eac-r11snorm\";\n    TextureFormat[\"EACRG11Unorm\"] = \"eac-rg11unorm\";\n    TextureFormat[\"EACRG11Snorm\"] = \"eac-rg11snorm\";\n    // ASTC compressed formats usable if \"texture-compression-astc\" is both\n    // supported by the device/user agent and enabled in requestDevice.\n    TextureFormat[\"ASTC4x4Unorm\"] = \"astc-4x4-unorm\";\n    TextureFormat[\"ASTC4x4UnormSRGB\"] = \"astc-4x4-unorm-srgb\";\n    TextureFormat[\"ASTC5x4Unorm\"] = \"astc-5x4-unorm\";\n    TextureFormat[\"ASTC5x4UnormSRGB\"] = \"astc-5x4-unorm-srgb\";\n    TextureFormat[\"ASTC5x5Unorm\"] = \"astc-5x5-unorm\";\n    TextureFormat[\"ASTC5x5UnormSRGB\"] = \"astc-5x5-unorm-srgb\";\n    TextureFormat[\"ASTC6x5Unorm\"] = \"astc-6x5-unorm\";\n    TextureFormat[\"ASTC6x5UnormSRGB\"] = \"astc-6x5-unorm-srgb\";\n    TextureFormat[\"ASTC6x6Unorm\"] = \"astc-6x6-unorm\";\n    TextureFormat[\"ASTC6x6UnormSRGB\"] = \"astc-6x6-unorm-srgb\";\n    TextureFormat[\"ASTC8x5Unorm\"] = \"astc-8x5-unorm\";\n    TextureFormat[\"ASTC8x5UnormSRGB\"] = \"astc-8x5-unorm-srgb\";\n    TextureFormat[\"ASTC8x6Unorm\"] = \"astc-8x6-unorm\";\n    TextureFormat[\"ASTC8x6UnormSRGB\"] = \"astc-8x6-unorm-srgb\";\n    TextureFormat[\"ASTC8x8Unorm\"] = \"astc-8x8-unorm\";\n    TextureFormat[\"ASTC8x8UnormSRGB\"] = \"astc-8x8-unorm-srgb\";\n    TextureFormat[\"ASTC10x5Unorm\"] = \"astc-10x5-unorm\";\n    TextureFormat[\"ASTC10x5UnormSRGB\"] = \"astc-10x5-unorm-srgb\";\n    TextureFormat[\"ASTC10x6Unorm\"] = \"astc-10x6-unorm\";\n    TextureFormat[\"ASTC10x6UnormSRGB\"] = \"astc-10x6-unorm-srgb\";\n    TextureFormat[\"ASTC10x8Unorm\"] = \"astc-10x8-unorm\";\n    TextureFormat[\"ASTC10x8UnormSRGB\"] = \"astc-10x8-unorm-srgb\";\n    TextureFormat[\"ASTC10x10Unorm\"] = \"astc-10x10-unorm\";\n    TextureFormat[\"ASTC10x10UnormSRGB\"] = \"astc-10x10-unorm-srgb\";\n    TextureFormat[\"ASTC12x10Unorm\"] = \"astc-12x10-unorm\";\n    TextureFormat[\"ASTC12x10UnormSRGB\"] = \"astc-12x10-unorm-srgb\";\n    TextureFormat[\"ASTC12x12Unorm\"] = \"astc-12x12-unorm\";\n    TextureFormat[\"ASTC12x12UnormSRGB\"] = \"astc-12x12-unorm-srgb\";\n    // \"depth24unorm-stencil8\" feature\n    TextureFormat[\"Depth24UnormStencil8\"] = \"depth24unorm-stencil8\";\n    // \"depth32float-stencil8\" feature\n    TextureFormat[\"Depth32FloatStencil8\"] = \"depth32float-stencil8\";\n})(TextureFormat || (TextureFormat = {}));\n/** @internal */\nexport var AddressMode;\n(function (AddressMode) {\n    AddressMode[\"ClampToEdge\"] = \"clamp-to-edge\";\n    AddressMode[\"Repeat\"] = \"repeat\";\n    AddressMode[\"MirrorRepeat\"] = \"mirror-repeat\";\n})(AddressMode || (AddressMode = {}));\n/** @internal */\nexport var FilterMode;\n(function (FilterMode) {\n    FilterMode[\"Nearest\"] = \"nearest\";\n    FilterMode[\"Linear\"] = \"linear\";\n})(FilterMode || (FilterMode = {}));\n/** @internal */\nexport var CompareFunction;\n(function (CompareFunction) {\n    CompareFunction[\"Never\"] = \"never\";\n    CompareFunction[\"Less\"] = \"less\";\n    CompareFunction[\"Equal\"] = \"equal\";\n    CompareFunction[\"LessEqual\"] = \"less-equal\";\n    CompareFunction[\"Greater\"] = \"greater\";\n    CompareFunction[\"NotEqual\"] = \"not-equal\";\n    CompareFunction[\"GreaterEqual\"] = \"greater-equal\";\n    CompareFunction[\"Always\"] = \"always\";\n})(CompareFunction || (CompareFunction = {}));\n/** @internal */\nexport var ShaderStage;\n(function (ShaderStage) {\n    ShaderStage[ShaderStage[\"Vertex\"] = 1] = \"Vertex\";\n    ShaderStage[ShaderStage[\"Fragment\"] = 2] = \"Fragment\";\n    ShaderStage[ShaderStage[\"Compute\"] = 4] = \"Compute\";\n})(ShaderStage || (ShaderStage = {}));\n/** @internal */\nexport var BufferBindingType;\n(function (BufferBindingType) {\n    BufferBindingType[\"Uniform\"] = \"uniform\";\n    BufferBindingType[\"Storage\"] = \"storage\";\n    BufferBindingType[\"ReadOnlyStorage\"] = \"read-only-storage\";\n})(BufferBindingType || (BufferBindingType = {}));\n/** @internal */\nexport var SamplerBindingType;\n(function (SamplerBindingType) {\n    SamplerBindingType[\"Filtering\"] = \"filtering\";\n    SamplerBindingType[\"NonFiltering\"] = \"non-filtering\";\n    SamplerBindingType[\"Comparison\"] = \"comparison\";\n})(SamplerBindingType || (SamplerBindingType = {}));\n/** @internal */\nexport var TextureSampleType;\n(function (TextureSampleType) {\n    TextureSampleType[\"Float\"] = \"float\";\n    TextureSampleType[\"UnfilterableFloat\"] = \"unfilterable-float\";\n    TextureSampleType[\"Depth\"] = \"depth\";\n    TextureSampleType[\"Sint\"] = \"sint\";\n    TextureSampleType[\"Uint\"] = \"uint\";\n})(TextureSampleType || (TextureSampleType = {}));\n/** @internal */\nexport var StorageTextureAccess;\n(function (StorageTextureAccess) {\n    StorageTextureAccess[\"WriteOnly\"] = \"write-only\";\n})(StorageTextureAccess || (StorageTextureAccess = {}));\n/** @internal */\nexport var CompilationMessageType;\n(function (CompilationMessageType) {\n    CompilationMessageType[\"Error\"] = \"error\";\n    CompilationMessageType[\"Warning\"] = \"warning\";\n    CompilationMessageType[\"Info\"] = \"info\";\n})(CompilationMessageType || (CompilationMessageType = {}));\n/** @internal */\nexport var AutoLayoutMode;\n(function (AutoLayoutMode) {\n    AutoLayoutMode[\"Auto\"] = \"auto\";\n})(AutoLayoutMode || (AutoLayoutMode = {}));\n/** @internal */\nexport var PrimitiveTopology;\n(function (PrimitiveTopology) {\n    PrimitiveTopology[\"PointList\"] = \"point-list\";\n    PrimitiveTopology[\"LineList\"] = \"line-list\";\n    PrimitiveTopology[\"LineStrip\"] = \"line-strip\";\n    PrimitiveTopology[\"TriangleList\"] = \"triangle-list\";\n    PrimitiveTopology[\"TriangleStrip\"] = \"triangle-strip\";\n})(PrimitiveTopology || (PrimitiveTopology = {}));\n/** @internal */\nexport var FrontFace;\n(function (FrontFace) {\n    FrontFace[\"CCW\"] = \"ccw\";\n    FrontFace[\"CW\"] = \"cw\";\n})(FrontFace || (FrontFace = {}));\n/** @internal */\nexport var CullMode;\n(function (CullMode) {\n    CullMode[\"None\"] = \"none\";\n    CullMode[\"Front\"] = \"front\";\n    CullMode[\"Back\"] = \"back\";\n})(CullMode || (CullMode = {}));\n/** @internal */\nexport var ColorWriteFlags;\n(function (ColorWriteFlags) {\n    ColorWriteFlags[ColorWriteFlags[\"Red\"] = 1] = \"Red\";\n    ColorWriteFlags[ColorWriteFlags[\"Green\"] = 2] = \"Green\";\n    ColorWriteFlags[ColorWriteFlags[\"Blue\"] = 4] = \"Blue\";\n    ColorWriteFlags[ColorWriteFlags[\"Alpha\"] = 8] = \"Alpha\";\n    ColorWriteFlags[ColorWriteFlags[\"All\"] = 15] = \"All\";\n})(ColorWriteFlags || (ColorWriteFlags = {}));\n/** @internal */\nexport var BlendFactor;\n(function (BlendFactor) {\n    BlendFactor[\"Zero\"] = \"zero\";\n    BlendFactor[\"One\"] = \"one\";\n    BlendFactor[\"Src\"] = \"src\";\n    BlendFactor[\"OneMinusSrc\"] = \"one-minus-src\";\n    BlendFactor[\"SrcAlpha\"] = \"src-alpha\";\n    BlendFactor[\"OneMinusSrcAlpha\"] = \"one-minus-src-alpha\";\n    BlendFactor[\"Dst\"] = \"dst\";\n    BlendFactor[\"OneMinusDst\"] = \"one-minus-dst\";\n    BlendFactor[\"DstAlpha\"] = \"dst-alpha\";\n    BlendFactor[\"OneMinusDstAlpha\"] = \"one-minus-dst-alpha\";\n    BlendFactor[\"SrcAlphaSaturated\"] = \"src-alpha-saturated\";\n    BlendFactor[\"Constant\"] = \"constant\";\n    BlendFactor[\"OneMinusConstant\"] = \"one-minus-constant\";\n})(BlendFactor || (BlendFactor = {}));\n/** @internal */\nexport var BlendOperation;\n(function (BlendOperation) {\n    BlendOperation[\"Add\"] = \"add\";\n    BlendOperation[\"Subtract\"] = \"subtract\";\n    BlendOperation[\"ReverseSubtract\"] = \"reverse-subtract\";\n    BlendOperation[\"Min\"] = \"min\";\n    BlendOperation[\"Max\"] = \"max\";\n})(BlendOperation || (BlendOperation = {}));\n/** @internal */\nexport var StencilOperation;\n(function (StencilOperation) {\n    StencilOperation[\"Keep\"] = \"keep\";\n    StencilOperation[\"Zero\"] = \"zero\";\n    StencilOperation[\"Replace\"] = \"replace\";\n    StencilOperation[\"Invert\"] = \"invert\";\n    StencilOperation[\"IncrementClamp\"] = \"increment-clamp\";\n    StencilOperation[\"DecrementClamp\"] = \"decrement-clamp\";\n    StencilOperation[\"IncrementWrap\"] = \"increment-wrap\";\n    StencilOperation[\"DecrementWrap\"] = \"decrement-wrap\";\n})(StencilOperation || (StencilOperation = {}));\n/** @internal */\nexport var IndexFormat;\n(function (IndexFormat) {\n    IndexFormat[\"Uint16\"] = \"uint16\";\n    IndexFormat[\"Uint32\"] = \"uint32\";\n})(IndexFormat || (IndexFormat = {}));\n/** @internal */\nexport var VertexFormat;\n(function (VertexFormat) {\n    VertexFormat[\"Uint8x2\"] = \"uint8x2\";\n    VertexFormat[\"Uint8x4\"] = \"uint8x4\";\n    VertexFormat[\"Sint8x2\"] = \"sint8x2\";\n    VertexFormat[\"Sint8x4\"] = \"sint8x4\";\n    VertexFormat[\"Unorm8x2\"] = \"unorm8x2\";\n    VertexFormat[\"Unorm8x4\"] = \"unorm8x4\";\n    VertexFormat[\"Snorm8x2\"] = \"snorm8x2\";\n    VertexFormat[\"Snorm8x4\"] = \"snorm8x4\";\n    VertexFormat[\"Uint16x2\"] = \"uint16x2\";\n    VertexFormat[\"Uint16x4\"] = \"uint16x4\";\n    VertexFormat[\"Sint16x2\"] = \"sint16x2\";\n    VertexFormat[\"Sint16x4\"] = \"sint16x4\";\n    VertexFormat[\"Unorm16x2\"] = \"unorm16x2\";\n    VertexFormat[\"Unorm16x4\"] = \"unorm16x4\";\n    VertexFormat[\"Snorm16x2\"] = \"snorm16x2\";\n    VertexFormat[\"Snorm16x4\"] = \"snorm16x4\";\n    VertexFormat[\"Float16x2\"] = \"float16x2\";\n    VertexFormat[\"Float16x4\"] = \"float16x4\";\n    VertexFormat[\"Float32\"] = \"float32\";\n    VertexFormat[\"Float32x2\"] = \"float32x2\";\n    VertexFormat[\"Float32x3\"] = \"float32x3\";\n    VertexFormat[\"Float32x4\"] = \"float32x4\";\n    VertexFormat[\"Uint32\"] = \"uint32\";\n    VertexFormat[\"Uint32x2\"] = \"uint32x2\";\n    VertexFormat[\"Uint32x3\"] = \"uint32x3\";\n    VertexFormat[\"Uint32x4\"] = \"uint32x4\";\n    VertexFormat[\"Sint32\"] = \"sint32\";\n    VertexFormat[\"Sint32x2\"] = \"sint32x2\";\n    VertexFormat[\"Sint32x3\"] = \"sint32x3\";\n    VertexFormat[\"Sint32x4\"] = \"sint32x4\";\n})(VertexFormat || (VertexFormat = {}));\n/** @internal */\nexport var InputStepMode;\n(function (InputStepMode) {\n    InputStepMode[\"Vertex\"] = \"vertex\";\n    InputStepMode[\"Instance\"] = \"instance\";\n})(InputStepMode || (InputStepMode = {}));\n/** @internal */\nexport var ComputePassTimestampLocation;\n(function (ComputePassTimestampLocation) {\n    ComputePassTimestampLocation[\"Beginning\"] = \"beginning\";\n    ComputePassTimestampLocation[\"End\"] = \"end\";\n})(ComputePassTimestampLocation || (ComputePassTimestampLocation = {}));\n/** @internal */\nexport var RenderPassTimestampLocation;\n(function (RenderPassTimestampLocation) {\n    RenderPassTimestampLocation[\"Beginning\"] = \"beginning\";\n    RenderPassTimestampLocation[\"End\"] = \"end\";\n})(RenderPassTimestampLocation || (RenderPassTimestampLocation = {}));\n/** @internal */\nexport var LoadOp;\n(function (LoadOp) {\n    LoadOp[\"Load\"] = \"load\";\n    LoadOp[\"Clear\"] = \"clear\";\n})(LoadOp || (LoadOp = {}));\n/** @internal */\nexport var StoreOp;\n(function (StoreOp) {\n    StoreOp[\"Store\"] = \"store\";\n    StoreOp[\"Discard\"] = \"discard\";\n})(StoreOp || (StoreOp = {}));\n/** @internal */\nexport var QueryType;\n(function (QueryType) {\n    QueryType[\"Occlusion\"] = \"occlusion\";\n    QueryType[\"Timestamp\"] = \"timestamp\";\n})(QueryType || (QueryType = {}));\n/** @internal */\nexport var CanvasAlphaMode;\n(function (CanvasAlphaMode) {\n    CanvasAlphaMode[\"Opaque\"] = \"opaque\";\n    CanvasAlphaMode[\"Premultiplied\"] = \"premultiplied\";\n})(CanvasAlphaMode || (CanvasAlphaMode = {}));\n/** @internal */\nexport var DeviceLostReason;\n(function (DeviceLostReason) {\n    DeviceLostReason[\"Destroyed\"] = \"destroyed\";\n})(DeviceLostReason || (DeviceLostReason = {}));\n/** @internal */\nexport var ErrorFilter;\n(function (ErrorFilter) {\n    ErrorFilter[\"OutOfMemory\"] = \"out-of-memory\";\n    ErrorFilter[\"Validation\"] = \"validation\";\n})(ErrorFilter || (ErrorFilter = {}));\n//# sourceMappingURL=webgpuConstants.js.map","import { DepthCullingState } from \"../../States/depthCullingState.js\";\n/**\n * @internal\n **/\nexport class WebGPUDepthCullingState extends DepthCullingState {\n    /**\n     * Initializes the state.\n     * @param cache\n     */\n    constructor(cache) {\n        super(false);\n        this._cache = cache;\n        this.reset();\n    }\n    get zOffset() {\n        return this._zOffset;\n    }\n    set zOffset(value) {\n        if (this._zOffset === value) {\n            return;\n        }\n        this._zOffset = value;\n        this._isZOffsetDirty = true;\n        this._cache.setDepthBiasSlopeScale(value);\n    }\n    get zOffsetUnits() {\n        return this._zOffsetUnits;\n    }\n    set zOffsetUnits(value) {\n        if (this._zOffsetUnits === value) {\n            return;\n        }\n        this._zOffsetUnits = value;\n        this._isZOffsetDirty = true;\n        this._cache.setDepthBias(value);\n    }\n    get cullFace() {\n        return this._cullFace;\n    }\n    set cullFace(value) {\n        if (this._cullFace === value) {\n            return;\n        }\n        this._cullFace = value;\n        this._isCullFaceDirty = true;\n        this._cache.setCullFace(value !== null && value !== void 0 ? value : 1);\n    }\n    get cull() {\n        return this._cull;\n    }\n    set cull(value) {\n        if (this._cull === value) {\n            return;\n        }\n        this._cull = value;\n        this._isCullDirty = true;\n        this._cache.setCullEnabled(!!value);\n    }\n    get depthFunc() {\n        return this._depthFunc;\n    }\n    set depthFunc(value) {\n        if (this._depthFunc === value) {\n            return;\n        }\n        this._depthFunc = value;\n        this._isDepthFuncDirty = true;\n        this._cache.setDepthCompare(value);\n    }\n    get depthMask() {\n        return this._depthMask;\n    }\n    set depthMask(value) {\n        if (this._depthMask === value) {\n            return;\n        }\n        this._depthMask = value;\n        this._isDepthMaskDirty = true;\n        this._cache.setDepthWriteEnabled(value);\n    }\n    get depthTest() {\n        return this._depthTest;\n    }\n    set depthTest(value) {\n        if (this._depthTest === value) {\n            return;\n        }\n        this._depthTest = value;\n        this._isDepthTestDirty = true;\n        this._cache.setDepthTestEnabled(value);\n    }\n    get frontFace() {\n        return this._frontFace;\n    }\n    set frontFace(value) {\n        if (this._frontFace === value) {\n            return;\n        }\n        this._frontFace = value;\n        this._isFrontFaceDirty = true;\n        this._cache.setFrontFace(value !== null && value !== void 0 ? value : 2);\n    }\n    reset() {\n        super.reset();\n        this._cache.resetDepthCullingState();\n    }\n    apply() {\n        // nothing to do\n    }\n}\n//# sourceMappingURL=webgpuDepthCullingState.js.map","import * as WebGPUConstants from \"./webgpuConstants.js\";\n/** @internal */\nexport class WebGPUDrawContext {\n    isDirty(materialContextUpdateId) {\n        return this._isDirty || this._materialContextUpdateId !== materialContextUpdateId;\n    }\n    resetIsDirty(materialContextUpdateId) {\n        this._isDirty = false;\n        this._materialContextUpdateId = materialContextUpdateId;\n    }\n    get useInstancing() {\n        return this._useInstancing;\n    }\n    set useInstancing(use) {\n        if (this._useInstancing === use) {\n            return;\n        }\n        if (!use) {\n            if (this.indirectDrawBuffer) {\n                this._bufferManager.releaseBuffer(this.indirectDrawBuffer);\n            }\n            this.indirectDrawBuffer = undefined;\n            this._indirectDrawData = undefined;\n        }\n        else {\n            this.indirectDrawBuffer = this._bufferManager.createRawBuffer(40, WebGPUConstants.BufferUsage.CopyDst | WebGPUConstants.BufferUsage.Indirect);\n            this._indirectDrawData = new Uint32Array(5);\n            this._indirectDrawData[3] = 0;\n            this._indirectDrawData[4] = 0;\n        }\n        this._useInstancing = use;\n        this._currentInstanceCount = -1;\n    }\n    constructor(bufferManager) {\n        this._bufferManager = bufferManager;\n        this.uniqueId = WebGPUDrawContext._Counter++;\n        this._useInstancing = false;\n        this._currentInstanceCount = 0;\n        this.reset();\n    }\n    reset() {\n        this.buffers = {};\n        this._isDirty = true;\n        this._materialContextUpdateId = 0;\n        this.fastBundle = undefined;\n        this.bindGroups = undefined;\n    }\n    setBuffer(name, buffer) {\n        var _a;\n        this._isDirty || (this._isDirty = (buffer === null || buffer === void 0 ? void 0 : buffer.uniqueId) !== ((_a = this.buffers[name]) === null || _a === void 0 ? void 0 : _a.uniqueId));\n        this.buffers[name] = buffer;\n    }\n    setIndirectData(indexOrVertexCount, instanceCount, firstIndexOrVertex) {\n        if (instanceCount === this._currentInstanceCount || !this.indirectDrawBuffer || !this._indirectDrawData) {\n            // The current buffer is already up to date so do nothing\n            // Note that we only check for instanceCount and not indexOrVertexCount nor firstIndexOrVertex because those values\n            // are supposed to not change during the lifetime of a draw context\n            return;\n        }\n        this._currentInstanceCount = instanceCount;\n        this._indirectDrawData[0] = indexOrVertexCount;\n        this._indirectDrawData[1] = instanceCount;\n        this._indirectDrawData[2] = firstIndexOrVertex;\n        this._bufferManager.setRawData(this.indirectDrawBuffer, 0, this._indirectDrawData, 0, 20);\n    }\n    dispose() {\n        if (this.indirectDrawBuffer) {\n            this._bufferManager.releaseBuffer(this.indirectDrawBuffer);\n            this.indirectDrawBuffer = undefined;\n            this._indirectDrawData = undefined;\n        }\n        this.fastBundle = undefined;\n        this.bindGroups = undefined;\n        this.buffers = undefined;\n    }\n}\nWebGPUDrawContext._Counter = 0;\n//# sourceMappingURL=webgpuDrawContext.js.map","import { InternalTextureSource } from \"../../Materials/Textures/internalTexture.js\";\nimport { Scalar } from \"../../Maths/math.scalar.js\";\nimport * as WebGPUConstants from \"./webgpuConstants.js\";\n/** @internal */\nexport class WebGPUHardwareTexture {\n    get underlyingResource() {\n        return this._webgpuTexture;\n    }\n    get msaaTexture() {\n        return this._webgpuMSAATexture;\n    }\n    set msaaTexture(texture) {\n        this._webgpuMSAATexture = texture;\n    }\n    constructor(existingTexture = null) {\n        this.format = WebGPUConstants.TextureFormat.RGBA8Unorm;\n        this.textureUsages = 0;\n        this.textureAdditionalUsages = 0;\n        this._webgpuTexture = existingTexture;\n        this._webgpuMSAATexture = null;\n        this.view = null;\n        this.viewForWriting = null;\n    }\n    set(hardwareTexture) {\n        this._webgpuTexture = hardwareTexture;\n    }\n    setUsage(textureSource, generateMipMaps, isCube, width, height) {\n        generateMipMaps = textureSource === InternalTextureSource.RenderTarget ? false : generateMipMaps;\n        this.createView({\n            format: this.format,\n            dimension: isCube ? WebGPUConstants.TextureViewDimension.Cube : WebGPUConstants.TextureViewDimension.E2d,\n            mipLevelCount: generateMipMaps ? Scalar.ILog2(Math.max(width, height)) + 1 : 1,\n            baseArrayLayer: 0,\n            baseMipLevel: 0,\n            arrayLayerCount: isCube ? 6 : 1,\n            aspect: WebGPUConstants.TextureAspect.All,\n        });\n    }\n    createView(descriptor, createViewForWriting = false) {\n        this.view = this._webgpuTexture.createView(descriptor);\n        if (createViewForWriting && descriptor) {\n            const saveNumMipMaps = descriptor.mipLevelCount;\n            descriptor.mipLevelCount = 1;\n            this.viewForWriting = this._webgpuTexture.createView(descriptor);\n            descriptor.mipLevelCount = saveNumMipMaps;\n        }\n    }\n    reset() {\n        this._webgpuTexture = null;\n        this._webgpuMSAATexture = null;\n        this.view = null;\n        this.viewForWriting = null;\n    }\n    release() {\n        var _a, _b, _c;\n        (_a = this._webgpuTexture) === null || _a === void 0 ? void 0 : _a.destroy();\n        (_b = this._webgpuMSAATexture) === null || _b === void 0 ? void 0 : _b.destroy();\n        (_c = this._copyInvertYTempTexture) === null || _c === void 0 ? void 0 : _c.destroy();\n        this.reset();\n    }\n}\n//# sourceMappingURL=webgpuHardwareTexture.js.map","import { ExternalTexture } from \"../../Materials/Textures/externalTexture.js\";\n\nimport { WebGPUCacheSampler } from \"./webgpuCacheSampler.js\";\n/** @internal */\nexport class WebGPUMaterialContext {\n    get forceBindGroupCreation() {\n        // If there is at least one external texture to bind, we must recreate the bind groups each time\n        // because we need to retrieve a new texture each frame (by calling device.importExternalTexture)\n        return this._numExternalTextures > 0;\n    }\n    get hasFloatTextures() {\n        return this._numFloatTextures > 0;\n    }\n    constructor() {\n        this.uniqueId = WebGPUMaterialContext._Counter++;\n        this.updateId = 0;\n        this.reset();\n    }\n    reset() {\n        this.samplers = {};\n        this.textures = {};\n        this.isDirty = true;\n        this._numFloatTextures = 0;\n        this._numExternalTextures = 0;\n    }\n    setSampler(name, sampler) {\n        let samplerCache = this.samplers[name];\n        let currentHashCode = -1;\n        if (!samplerCache) {\n            this.samplers[name] = samplerCache = { sampler, hashCode: 0 };\n        }\n        else {\n            currentHashCode = samplerCache.hashCode;\n        }\n        samplerCache.sampler = sampler;\n        samplerCache.hashCode = sampler ? WebGPUCacheSampler.GetSamplerHashCode(sampler) : 0;\n        const isDirty = currentHashCode !== samplerCache.hashCode;\n        if (isDirty) {\n            this.updateId++;\n        }\n        this.isDirty || (this.isDirty = isDirty);\n    }\n    setTexture(name, texture) {\n        var _a, _b, _c;\n        let textureCache = this.textures[name];\n        let currentTextureId = -1;\n        if (!textureCache) {\n            this.textures[name] = textureCache = { texture, isFloatTexture: false, isExternalTexture: false };\n        }\n        else {\n            currentTextureId = (_b = (_a = textureCache.texture) === null || _a === void 0 ? void 0 : _a.uniqueId) !== null && _b !== void 0 ? _b : -1;\n        }\n        if (textureCache.isExternalTexture) {\n            this._numExternalTextures--;\n        }\n        if (textureCache.isFloatTexture) {\n            this._numFloatTextures--;\n        }\n        if (texture) {\n            textureCache.isFloatTexture = texture.type === 1;\n            textureCache.isExternalTexture = ExternalTexture.IsExternalTexture(texture);\n            if (textureCache.isFloatTexture) {\n                this._numFloatTextures++;\n            }\n            if (textureCache.isExternalTexture) {\n                this._numExternalTextures++;\n            }\n        }\n        else {\n            textureCache.isFloatTexture = false;\n            textureCache.isExternalTexture = false;\n        }\n        textureCache.texture = texture;\n        const isDirty = currentTextureId !== ((_c = texture === null || texture === void 0 ? void 0 : texture.uniqueId) !== null && _c !== void 0 ? _c : -1);\n        if (isDirty) {\n            this.updateId++;\n        }\n        this.isDirty || (this.isDirty = isDirty);\n    }\n}\nWebGPUMaterialContext._Counter = 0;\n//# sourceMappingURL=webgpuMaterialContext.js.map","import * as WebGPUConstants from \"./webgpuConstants.js\";\nimport { WebGPUQuerySet } from \"./webgpuQuerySet.js\";\n/** @internal */\nexport class WebGPUOcclusionQuery {\n    get querySet() {\n        return this._querySet.querySet;\n    }\n    get hasQueries() {\n        return this._currentTotalIndices !== this._availableIndices.length;\n    }\n    get canBeginQuery() {\n        const passIndex = this._engine._getCurrentRenderPassIndex();\n        switch (passIndex) {\n            case 0: {\n                return this._engine._mainRenderPassWrapper.renderPassDescriptor.occlusionQuerySet !== undefined;\n            }\n            case 1: {\n                return this._engine._rttRenderPassWrapper.renderPassDescriptor.occlusionQuerySet !== undefined;\n            }\n        }\n        return false;\n    }\n    constructor(engine, device, bufferManager, startCount = 50, incrementCount = 100) {\n        this._availableIndices = [];\n        this._engine = engine;\n        this._device = device;\n        this._bufferManager = bufferManager;\n        this._frameLastBuffer = -1;\n        this._currentTotalIndices = 0;\n        this._countIncrement = incrementCount;\n        this._allocateNewIndices(startCount);\n    }\n    createQuery() {\n        if (this._availableIndices.length === 0) {\n            this._allocateNewIndices();\n        }\n        const index = this._availableIndices[this._availableIndices.length - 1];\n        this._availableIndices.length--;\n        return index;\n    }\n    deleteQuery(index) {\n        this._availableIndices[this._availableIndices.length - 1] = index;\n    }\n    isQueryResultAvailable(index) {\n        this._retrieveQueryBuffer();\n        return !!this._lastBuffer && index < this._lastBuffer.length;\n    }\n    getQueryResult(index) {\n        var _a, _b;\n        return Number((_b = (_a = this._lastBuffer) === null || _a === void 0 ? void 0 : _a[index]) !== null && _b !== void 0 ? _b : -1);\n    }\n    _retrieveQueryBuffer() {\n        if (this._lastBuffer && this._frameLastBuffer === this._engine.frameId) {\n            return;\n        }\n        if (this._frameLastBuffer !== this._engine.frameId) {\n            this._frameLastBuffer = this._engine.frameId;\n            this._querySet.readValues(0, this._currentTotalIndices).then((arrayBuffer) => {\n                this._lastBuffer = arrayBuffer;\n            });\n        }\n    }\n    _allocateNewIndices(numIndices) {\n        numIndices = numIndices !== null && numIndices !== void 0 ? numIndices : this._countIncrement;\n        this._delayQuerySetDispose();\n        for (let i = 0; i < numIndices; ++i) {\n            this._availableIndices.push(this._currentTotalIndices + i);\n        }\n        this._currentTotalIndices += numIndices;\n        this._querySet = new WebGPUQuerySet(this._currentTotalIndices, WebGPUConstants.QueryType.Occlusion, this._device, this._bufferManager, false);\n    }\n    _delayQuerySetDispose() {\n        const querySet = this._querySet;\n        if (querySet) {\n            // Wait a bit before disposing of the queryset, in case some queries are still running for it\n            setTimeout(() => querySet.dispose, 1000);\n        }\n    }\n    dispose() {\n        var _a;\n        (_a = this._querySet) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._availableIndices.length = 0;\n    }\n}\n//# sourceMappingURL=webgpuOcclusionQuery.js.map","import { UniformBuffer } from \"../../Materials/uniformBuffer.js\";\nimport { WebGPUShaderProcessor } from \"./webgpuShaderProcessor.js\";\n/** @internal */\nexport class WebGPUPipelineContext {\n    get isAsync() {\n        return false;\n    }\n    get isReady() {\n        if (this.stages) {\n            return true;\n        }\n        return false;\n    }\n    constructor(shaderProcessingContext, engine) {\n        this._name = \"unnamed\";\n        this.shaderProcessingContext = shaderProcessingContext;\n        this._leftOverUniformsByName = {};\n        this.engine = engine;\n    }\n    _handlesSpectorRebuildCallback() {\n        // Nothing to do yet for spector.\n    }\n    _fillEffectInformation(effect, uniformBuffersNames, uniformsNames, uniforms, samplerList, samplers, attributesNames, attributes) {\n        const engine = this.engine;\n        // Prevent Memory Leak by reducing the number of string, refer to the string instead of copy.\n        effect._fragmentSourceCode = \"\";\n        effect._vertexSourceCode = \"\";\n        // this._fragmentSourceCodeOverride = \"\";\n        // this._vertexSourceCodeOverride = \"\";\n        const foundSamplers = this.shaderProcessingContext.availableTextures;\n        let index;\n        for (index = 0; index < samplerList.length; index++) {\n            const name = samplerList[index];\n            const sampler = foundSamplers[samplerList[index]];\n            if (sampler == null || sampler == undefined) {\n                samplerList.splice(index, 1);\n                index--;\n            }\n            else {\n                samplers[name] = index;\n            }\n        }\n        for (const attr of engine.getAttributes(this, attributesNames)) {\n            attributes.push(attr);\n        }\n        // Build the uniform layout for the left over uniforms.\n        this.buildUniformLayout();\n        const attributeNamesFromEffect = [];\n        const attributeLocationsFromEffect = [];\n        for (index = 0; index < attributesNames.length; index++) {\n            const location = attributes[index];\n            if (location >= 0) {\n                attributeNamesFromEffect.push(attributesNames[index]);\n                attributeLocationsFromEffect.push(location);\n            }\n        }\n        this.shaderProcessingContext.attributeNamesFromEffect = attributeNamesFromEffect;\n        this.shaderProcessingContext.attributeLocationsFromEffect = attributeLocationsFromEffect;\n    }\n    /** @internal */\n    /**\n     * Build the uniform buffer used in the material.\n     */\n    buildUniformLayout() {\n        if (!this.shaderProcessingContext.leftOverUniforms.length) {\n            return;\n        }\n        this.uniformBuffer = new UniformBuffer(this.engine, undefined, undefined, \"leftOver-\" + this._name);\n        for (const leftOverUniform of this.shaderProcessingContext.leftOverUniforms) {\n            const type = leftOverUniform.type.replace(/^(.*?)(<.*>)?$/, \"$1\");\n            const size = WebGPUShaderProcessor.UniformSizes[type];\n            this.uniformBuffer.addUniform(leftOverUniform.name, size, leftOverUniform.length);\n            this._leftOverUniformsByName[leftOverUniform.name] = leftOverUniform.type;\n        }\n        this.uniformBuffer.create();\n    }\n    /**\n     * Release all associated resources.\n     **/\n    dispose() {\n        if (this.uniformBuffer) {\n            this.uniformBuffer.dispose();\n        }\n    }\n    /**\n     * Sets an integer value on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param value Value to be set.\n     */\n    setInt(uniformName, value) {\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n            return;\n        }\n        this.uniformBuffer.updateInt(uniformName, value);\n    }\n    /**\n     * Sets an int2 value on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param x First int in int2.\n     * @param y Second int in int2.\n     */\n    setInt2(uniformName, x, y) {\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n            return;\n        }\n        this.uniformBuffer.updateInt2(uniformName, x, y);\n    }\n    /**\n     * Sets an int3 value on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param x First int in int3.\n     * @param y Second int in int3.\n     * @param z Third int in int3.\n     */\n    setInt3(uniformName, x, y, z) {\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n            return;\n        }\n        this.uniformBuffer.updateInt3(uniformName, x, y, z);\n    }\n    /**\n     * Sets an int4 value on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param x First int in int4.\n     * @param y Second int in int4.\n     * @param z Third int in int4.\n     * @param w Fourth int in int4.\n     */\n    setInt4(uniformName, x, y, z, w) {\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n            return;\n        }\n        this.uniformBuffer.updateInt4(uniformName, x, y, z, w);\n    }\n    /**\n     * Sets an int array on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     */\n    setIntArray(uniformName, array) {\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n            return;\n        }\n        this.uniformBuffer.updateIntArray(uniformName, array);\n    }\n    /**\n     * Sets an int array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     */\n    setIntArray2(uniformName, array) {\n        this.setIntArray(uniformName, array);\n    }\n    /**\n     * Sets an int array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     */\n    setIntArray3(uniformName, array) {\n        this.setIntArray(uniformName, array);\n    }\n    /**\n     * Sets an int array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     */\n    setIntArray4(uniformName, array) {\n        this.setIntArray(uniformName, array);\n    }\n    /**\n     * Sets an unsigned integer value on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param value Value to be set.\n     */\n    setUInt(uniformName, value) {\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n            return;\n        }\n        this.uniformBuffer.updateUInt(uniformName, value);\n    }\n    /**\n     * Sets an unsigned int2 value on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param x First unsigned int in uint2.\n     * @param y Second unsigned int in uint2.\n     */\n    setUInt2(uniformName, x, y) {\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n            return;\n        }\n        this.uniformBuffer.updateUInt2(uniformName, x, y);\n    }\n    /**\n     * Sets an unsigned int3 value on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param x First unsigned int in uint3.\n     * @param y Second unsigned int in uint3.\n     * @param z Third unsigned int in uint3.\n     */\n    setUInt3(uniformName, x, y, z) {\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n            return;\n        }\n        this.uniformBuffer.updateUInt3(uniformName, x, y, z);\n    }\n    /**\n     * Sets an unsigned int4 value on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param x First unsigned int in uint4.\n     * @param y Second unsigned int in uint4.\n     * @param z Third unsigned int in uint4.\n     * @param w Fourth unsigned int in uint4.\n     */\n    setUInt4(uniformName, x, y, z, w) {\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n            return;\n        }\n        this.uniformBuffer.updateUInt4(uniformName, x, y, z, w);\n    }\n    /**\n     * Sets an unsigned int array on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     */\n    setUIntArray(uniformName, array) {\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n            return;\n        }\n        this.uniformBuffer.updateUIntArray(uniformName, array);\n    }\n    /**\n     * Sets an unsigned int array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     */\n    setUIntArray2(uniformName, array) {\n        this.setUIntArray(uniformName, array);\n    }\n    /**\n     * Sets an unsigned int array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     */\n    setUIntArray3(uniformName, array) {\n        this.setUIntArray(uniformName, array);\n    }\n    /**\n     * Sets an unsigned int array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     */\n    setUIntArray4(uniformName, array) {\n        this.setUIntArray(uniformName, array);\n    }\n    /**\n     * Sets an array on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     */\n    setArray(uniformName, array) {\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n            return;\n        }\n        this.uniformBuffer.updateArray(uniformName, array);\n    }\n    /**\n     * Sets an array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     */\n    setArray2(uniformName, array) {\n        this.setArray(uniformName, array);\n    }\n    /**\n     * Sets an array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     * @returns this effect.\n     */\n    setArray3(uniformName, array) {\n        this.setArray(uniformName, array);\n    }\n    /**\n     * Sets an array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     */\n    setArray4(uniformName, array) {\n        this.setArray(uniformName, array);\n    }\n    /**\n     * Sets matrices on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param matrices matrices to be set.\n     */\n    setMatrices(uniformName, matrices) {\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n            return;\n        }\n        this.uniformBuffer.updateMatrices(uniformName, matrices);\n    }\n    /**\n     * Sets matrix on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param matrix matrix to be set.\n     */\n    setMatrix(uniformName, matrix) {\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n            return;\n        }\n        this.uniformBuffer.updateMatrix(uniformName, matrix);\n    }\n    /**\n     * Sets a 3x3 matrix on a uniform variable. (Specified as [1,2,3,4,5,6,7,8,9] will result in [1,2,3][4,5,6][7,8,9] matrix)\n     * @param uniformName Name of the variable.\n     * @param matrix matrix to be set.\n     */\n    setMatrix3x3(uniformName, matrix) {\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n            return;\n        }\n        this.uniformBuffer.updateMatrix3x3(uniformName, matrix);\n    }\n    /**\n     * Sets a 2x2 matrix on a uniform variable. (Specified as [1,2,3,4] will result in [1,2][3,4] matrix)\n     * @param uniformName Name of the variable.\n     * @param matrix matrix to be set.\n     */\n    setMatrix2x2(uniformName, matrix) {\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n            return;\n        }\n        this.uniformBuffer.updateMatrix2x2(uniformName, matrix);\n    }\n    /**\n     * Sets a float on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param value value to be set.\n     * @returns this effect.\n     */\n    setFloat(uniformName, value) {\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n            return;\n        }\n        this.uniformBuffer.updateFloat(uniformName, value);\n    }\n    /**\n     * Sets a Vector2 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param vector2 vector2 to be set.\n     */\n    setVector2(uniformName, vector2) {\n        this.setFloat2(uniformName, vector2.x, vector2.y);\n    }\n    /**\n     * Sets a float2 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param x First float in float2.\n     * @param y Second float in float2.\n     */\n    setFloat2(uniformName, x, y) {\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n            return;\n        }\n        this.uniformBuffer.updateFloat2(uniformName, x, y);\n    }\n    /**\n     * Sets a Vector3 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param vector3 Value to be set.\n     */\n    setVector3(uniformName, vector3) {\n        this.setFloat3(uniformName, vector3.x, vector3.y, vector3.z);\n    }\n    /**\n     * Sets a float3 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param x First float in float3.\n     * @param y Second float in float3.\n     * @param z Third float in float3.\n     */\n    setFloat3(uniformName, x, y, z) {\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n            return;\n        }\n        this.uniformBuffer.updateFloat3(uniformName, x, y, z);\n    }\n    /**\n     * Sets a Vector4 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param vector4 Value to be set.\n     */\n    setVector4(uniformName, vector4) {\n        this.setFloat4(uniformName, vector4.x, vector4.y, vector4.z, vector4.w);\n    }\n    /**\n     * Sets a Quaternion on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param quaternion Value to be set.\n     */\n    setQuaternion(uniformName, quaternion) {\n        this.setFloat4(uniformName, quaternion.x, quaternion.y, quaternion.z, quaternion.w);\n    }\n    /**\n     * Sets a float4 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param x First float in float4.\n     * @param y Second float in float4.\n     * @param z Third float in float4.\n     * @param w Fourth float in float4.\n     * @returns this effect.\n     */\n    setFloat4(uniformName, x, y, z, w) {\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n            return;\n        }\n        this.uniformBuffer.updateFloat4(uniformName, x, y, z, w);\n    }\n    /**\n     * Sets a Color3 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param color3 Value to be set.\n     */\n    setColor3(uniformName, color3) {\n        this.setFloat3(uniformName, color3.r, color3.g, color3.b);\n    }\n    /**\n     * Sets a Color4 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param color3 Value to be set.\n     * @param alpha Alpha value to be set.\n     */\n    setColor4(uniformName, color3, alpha) {\n        this.setFloat4(uniformName, color3.r, color3.g, color3.b, alpha);\n    }\n    /**\n     * Sets a Color4 on a uniform variable\n     * @param uniformName defines the name of the variable\n     * @param color4 defines the value to be set\n     */\n    setDirectColor4(uniformName, color4) {\n        this.setFloat4(uniformName, color4.r, color4.g, color4.b, color4.a);\n    }\n    _getVertexShaderCode() {\n        var _a;\n        return (_a = this.sources) === null || _a === void 0 ? void 0 : _a.vertex;\n    }\n    _getFragmentShaderCode() {\n        var _a;\n        return (_a = this.sources) === null || _a === void 0 ? void 0 : _a.fragment;\n    }\n}\n//# sourceMappingURL=webgpuPipelineContext.js.map","import * as WebGPUConstants from \"./webgpuConstants.js\";\n/** @internal */\nexport class WebGPUQuerySet {\n    get querySet() {\n        return this._querySet;\n    }\n    constructor(count, type, device, bufferManager, canUseMultipleBuffers = true) {\n        this._dstBuffers = [];\n        this._device = device;\n        this._bufferManager = bufferManager;\n        this._count = count;\n        this._canUseMultipleBuffers = canUseMultipleBuffers;\n        this._querySet = device.createQuerySet({\n            type,\n            count,\n        });\n        this._queryBuffer = bufferManager.createRawBuffer(8 * count, WebGPUConstants.BufferUsage.QueryResolve | WebGPUConstants.BufferUsage.CopySrc);\n        if (!canUseMultipleBuffers) {\n            this._dstBuffers.push(this._bufferManager.createRawBuffer(8 * this._count, WebGPUConstants.BufferUsage.MapRead | WebGPUConstants.BufferUsage.CopyDst));\n        }\n    }\n    _getBuffer(firstQuery, queryCount) {\n        if (!this._canUseMultipleBuffers && this._dstBuffers.length === 0) {\n            return null;\n        }\n        const encoderResult = this._device.createCommandEncoder();\n        let buffer;\n        if (this._dstBuffers.length === 0) {\n            buffer = this._bufferManager.createRawBuffer(8 * this._count, WebGPUConstants.BufferUsage.MapRead | WebGPUConstants.BufferUsage.CopyDst);\n        }\n        else {\n            buffer = this._dstBuffers[this._dstBuffers.length - 1];\n            this._dstBuffers.length--;\n        }\n        encoderResult.resolveQuerySet(this._querySet, firstQuery, queryCount, this._queryBuffer, 0);\n        encoderResult.copyBufferToBuffer(this._queryBuffer, 0, buffer, 0, 8 * queryCount);\n        this._device.queue.submit([encoderResult.finish()]);\n        return buffer;\n    }\n    async readValues(firstQuery = 0, queryCount = 1) {\n        const buffer = this._getBuffer(firstQuery, queryCount);\n        if (buffer === null) {\n            return null;\n        }\n        await buffer.mapAsync(WebGPUConstants.MapMode.Read);\n        const arrayBuf = new BigUint64Array(buffer.getMappedRange()).slice();\n        buffer.unmap();\n        this._dstBuffers[this._dstBuffers.length] = buffer;\n        return arrayBuf;\n    }\n    async readValue(firstQuery = 0) {\n        const buffer = this._getBuffer(firstQuery, 1);\n        if (buffer === null) {\n            return null;\n        }\n        await buffer.mapAsync(WebGPUConstants.MapMode.Read);\n        const arrayBuf = new BigUint64Array(buffer.getMappedRange());\n        const value = Number(arrayBuf[0]);\n        buffer.unmap();\n        this._dstBuffers[this._dstBuffers.length] = buffer;\n        return value;\n    }\n    async readTwoValuesAndSubtract(firstQuery = 0) {\n        const buffer = this._getBuffer(firstQuery, 2);\n        if (buffer === null) {\n            return null;\n        }\n        await buffer.mapAsync(WebGPUConstants.MapMode.Read);\n        const arrayBuf = new BigUint64Array(buffer.getMappedRange());\n        const value = Number(arrayBuf[1] - arrayBuf[0]);\n        buffer.unmap();\n        this._dstBuffers[this._dstBuffers.length] = buffer;\n        return value;\n    }\n    dispose() {\n        this._querySet.destroy();\n        this._bufferManager.releaseBuffer(this._queryBuffer);\n        for (let i = 0; i < this._dstBuffers.length; ++i) {\n            this._bufferManager.releaseBuffer(this._dstBuffers[i]);\n        }\n    }\n}\n//# sourceMappingURL=webgpuQuerySet.js.map","/** @internal */\nexport class WebGPURenderPassWrapper {\n    constructor() {\n        this.colorAttachmentGPUTextures = [];\n        this.reset();\n    }\n    reset(fullReset = false) {\n        this.renderPass = null;\n        if (fullReset) {\n            this.renderPassDescriptor = null;\n            this.colorAttachmentViewDescriptor = null;\n            this.depthAttachmentViewDescriptor = null;\n            this.colorAttachmentGPUTextures = [];\n            this.depthTextureFormat = undefined;\n        }\n    }\n}\n//# sourceMappingURL=webgpuRenderPassWrapper.js.map","const _maxGroups = 4;\nconst _maxBindingsPerGroup = 1 << 16;\n// all types not listed are assumed to consume 1 location\nconst _typeToLocationSize = {\n    // GLSL types\n    mat2: 2,\n    mat3: 3,\n    mat4: 4,\n    // WGSL types\n    mat2x2: 2,\n    mat3x3: 3,\n    mat4x4: 4,\n};\n/**\n * @internal\n */\nexport class WebGPUShaderProcessingContext {\n    static get KnownUBOs() {\n        return WebGPUShaderProcessingContext._SimplifiedKnownBindings ? WebGPUShaderProcessingContext._SimplifiedKnownUBOs : WebGPUShaderProcessingContext._KnownUBOs;\n    }\n    constructor(shaderLanguage) {\n        this.shaderLanguage = shaderLanguage;\n        this._attributeNextLocation = 0;\n        this._varyingNextLocation = 0;\n        this.freeGroupIndex = 0;\n        this.freeBindingIndex = 0;\n        this.availableVaryings = {};\n        this.availableAttributes = {};\n        this.availableBuffers = {};\n        this.availableTextures = {};\n        this.availableSamplers = {};\n        this.orderedAttributes = [];\n        this.bindGroupLayoutEntries = [];\n        this.bindGroupLayoutEntryInfo = [];\n        this.bindGroupEntries = [];\n        this.bufferNames = [];\n        this.textureNames = [];\n        this.samplerNames = [];\n        this.leftOverUniforms = [];\n        this._findStartingGroupBinding();\n    }\n    _findStartingGroupBinding() {\n        const knownUBOs = WebGPUShaderProcessingContext.KnownUBOs;\n        const groups = [];\n        for (const name in knownUBOs) {\n            const binding = knownUBOs[name].binding;\n            if (binding.groupIndex === -1) {\n                continue;\n            }\n            if (groups[binding.groupIndex] === undefined) {\n                groups[binding.groupIndex] = binding.bindingIndex;\n            }\n            else {\n                groups[binding.groupIndex] = Math.max(groups[binding.groupIndex], binding.bindingIndex);\n            }\n        }\n        this.freeGroupIndex = groups.length - 1;\n        if (this.freeGroupIndex === 0) {\n            this.freeGroupIndex++;\n            this.freeBindingIndex = 0;\n        }\n        else {\n            this.freeBindingIndex = groups[groups.length - 1] + 1;\n        }\n    }\n    getAttributeNextLocation(dataType, arrayLength = 0) {\n        var _a;\n        const index = this._attributeNextLocation;\n        this._attributeNextLocation += ((_a = _typeToLocationSize[dataType]) !== null && _a !== void 0 ? _a : 1) * (arrayLength || 1);\n        return index;\n    }\n    getVaryingNextLocation(dataType, arrayLength = 0) {\n        var _a;\n        const index = this._varyingNextLocation;\n        this._varyingNextLocation += ((_a = _typeToLocationSize[dataType]) !== null && _a !== void 0 ? _a : 1) * (arrayLength || 1);\n        return index;\n    }\n    getNextFreeUBOBinding() {\n        return this._getNextFreeBinding(1);\n    }\n    _getNextFreeBinding(bindingCount) {\n        if (this.freeBindingIndex > _maxBindingsPerGroup - bindingCount) {\n            this.freeGroupIndex++;\n            this.freeBindingIndex = 0;\n        }\n        if (this.freeGroupIndex === _maxGroups) {\n            throw \"Too many textures or UBOs have been declared and it is not supported in WebGPU.\";\n        }\n        const returnValue = {\n            groupIndex: this.freeGroupIndex,\n            bindingIndex: this.freeBindingIndex,\n        };\n        this.freeBindingIndex += bindingCount;\n        return returnValue;\n    }\n}\n/** @internal */\nWebGPUShaderProcessingContext._SimplifiedKnownBindings = true; // if true, use only group=0,binding=0 as a known group/binding for the Scene ubo and use group=1,binding=X for all other bindings\n// if false, see _KnownUBOs for the known groups/bindings used\nWebGPUShaderProcessingContext._SimplifiedKnownUBOs = {\n    Scene: { binding: { groupIndex: 0, bindingIndex: 0 } },\n    Light0: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light1: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light2: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light3: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light4: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light5: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light6: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light7: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light8: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light9: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light10: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light11: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light12: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light13: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light14: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light15: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light16: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light17: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light18: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light19: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light20: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light21: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light22: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light23: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light24: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light25: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light26: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light27: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light28: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light29: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light30: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Light31: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Material: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Mesh: { binding: { groupIndex: -1, bindingIndex: -1 } },\n    Internals: { binding: { groupIndex: -1, bindingIndex: -1 } },\n};\nWebGPUShaderProcessingContext._KnownUBOs = {\n    Scene: { binding: { groupIndex: 0, bindingIndex: 0 } },\n    Light0: { binding: { groupIndex: 1, bindingIndex: 0 } },\n    Light1: { binding: { groupIndex: 1, bindingIndex: 1 } },\n    Light2: { binding: { groupIndex: 1, bindingIndex: 2 } },\n    Light3: { binding: { groupIndex: 1, bindingIndex: 3 } },\n    Light4: { binding: { groupIndex: 1, bindingIndex: 4 } },\n    Light5: { binding: { groupIndex: 1, bindingIndex: 5 } },\n    Light6: { binding: { groupIndex: 1, bindingIndex: 6 } },\n    Light7: { binding: { groupIndex: 1, bindingIndex: 7 } },\n    Light8: { binding: { groupIndex: 1, bindingIndex: 8 } },\n    Light9: { binding: { groupIndex: 1, bindingIndex: 9 } },\n    Light10: { binding: { groupIndex: 1, bindingIndex: 10 } },\n    Light11: { binding: { groupIndex: 1, bindingIndex: 11 } },\n    Light12: { binding: { groupIndex: 1, bindingIndex: 12 } },\n    Light13: { binding: { groupIndex: 1, bindingIndex: 13 } },\n    Light14: { binding: { groupIndex: 1, bindingIndex: 14 } },\n    Light15: { binding: { groupIndex: 1, bindingIndex: 15 } },\n    Light16: { binding: { groupIndex: 1, bindingIndex: 16 } },\n    Light17: { binding: { groupIndex: 1, bindingIndex: 17 } },\n    Light18: { binding: { groupIndex: 1, bindingIndex: 18 } },\n    Light19: { binding: { groupIndex: 1, bindingIndex: 19 } },\n    Light20: { binding: { groupIndex: 1, bindingIndex: 20 } },\n    Light21: { binding: { groupIndex: 1, bindingIndex: 21 } },\n    Light22: { binding: { groupIndex: 1, bindingIndex: 22 } },\n    Light23: { binding: { groupIndex: 1, bindingIndex: 23 } },\n    Light24: { binding: { groupIndex: 1, bindingIndex: 24 } },\n    Light25: { binding: { groupIndex: 1, bindingIndex: 25 } },\n    Light26: { binding: { groupIndex: 1, bindingIndex: 26 } },\n    Light27: { binding: { groupIndex: 1, bindingIndex: 27 } },\n    Light28: { binding: { groupIndex: 1, bindingIndex: 28 } },\n    Light29: { binding: { groupIndex: 1, bindingIndex: 29 } },\n    Light30: { binding: { groupIndex: 1, bindingIndex: 30 } },\n    Light31: { binding: { groupIndex: 1, bindingIndex: 31 } },\n    Material: { binding: { groupIndex: 2, bindingIndex: 0 } },\n    Mesh: { binding: { groupIndex: 2, bindingIndex: 1 } },\n    Internals: { binding: { groupIndex: 2, bindingIndex: 2 } },\n};\n//# sourceMappingURL=webgpuShaderProcessingContext.js.map","import { ShaderLanguage } from \"../../Materials/shaderLanguage.js\";\nimport * as WebGPUConstants from \"./webgpuConstants.js\";\n/** @internal */\nexport class WebGPUShaderProcessor {\n    constructor() {\n        this.shaderLanguage = ShaderLanguage.GLSL;\n    }\n    _addUniformToLeftOverUBO(name, uniformType, preProcessors) {\n        let length = 0;\n        [name, uniformType, length] = this._getArraySize(name, uniformType, preProcessors);\n        for (let i = 0; i < this._webgpuProcessingContext.leftOverUniforms.length; i++) {\n            if (this._webgpuProcessingContext.leftOverUniforms[i].name === name) {\n                return;\n            }\n        }\n        this._webgpuProcessingContext.leftOverUniforms.push({\n            name,\n            type: uniformType,\n            length,\n        });\n    }\n    _buildLeftOverUBO() {\n        if (!this._webgpuProcessingContext.leftOverUniforms.length) {\n            return \"\";\n        }\n        const name = WebGPUShaderProcessor.LeftOvertUBOName;\n        let availableUBO = this._webgpuProcessingContext.availableBuffers[name];\n        if (!availableUBO) {\n            availableUBO = {\n                binding: this._webgpuProcessingContext.getNextFreeUBOBinding(),\n            };\n            this._webgpuProcessingContext.availableBuffers[name] = availableUBO;\n            this._addBufferBindingDescription(name, availableUBO, WebGPUConstants.BufferBindingType.Uniform, true);\n            this._addBufferBindingDescription(name, availableUBO, WebGPUConstants.BufferBindingType.Uniform, false);\n        }\n        return this._generateLeftOverUBOCode(name, availableUBO);\n    }\n    _collectBindingNames() {\n        // collect all the binding names for faster processing in WebGPUCacheBindGroup\n        for (let i = 0; i < this._webgpuProcessingContext.bindGroupLayoutEntries.length; i++) {\n            const setDefinition = this._webgpuProcessingContext.bindGroupLayoutEntries[i];\n            if (setDefinition === undefined) {\n                this._webgpuProcessingContext.bindGroupLayoutEntries[i] = [];\n                continue;\n            }\n            for (let j = 0; j < setDefinition.length; j++) {\n                const entry = this._webgpuProcessingContext.bindGroupLayoutEntries[i][j];\n                const name = this._webgpuProcessingContext.bindGroupLayoutEntryInfo[i][entry.binding].name;\n                const nameInArrayOfTexture = this._webgpuProcessingContext.bindGroupLayoutEntryInfo[i][entry.binding].nameInArrayOfTexture;\n                if (entry) {\n                    if (entry.texture || entry.externalTexture || entry.storageTexture) {\n                        this._webgpuProcessingContext.textureNames.push(nameInArrayOfTexture);\n                    }\n                    else if (entry.sampler) {\n                        this._webgpuProcessingContext.samplerNames.push(name);\n                    }\n                    else if (entry.buffer) {\n                        this._webgpuProcessingContext.bufferNames.push(name);\n                    }\n                }\n            }\n        }\n    }\n    _preCreateBindGroupEntries() {\n        const bindGroupEntries = this._webgpuProcessingContext.bindGroupEntries;\n        for (let i = 0; i < this._webgpuProcessingContext.bindGroupLayoutEntries.length; i++) {\n            const setDefinition = this._webgpuProcessingContext.bindGroupLayoutEntries[i];\n            const entries = [];\n            for (let j = 0; j < setDefinition.length; j++) {\n                const entry = this._webgpuProcessingContext.bindGroupLayoutEntries[i][j];\n                if (entry.sampler || entry.texture || entry.storageTexture || entry.externalTexture) {\n                    entries.push({\n                        binding: entry.binding,\n                        resource: undefined,\n                    });\n                }\n                else if (entry.buffer) {\n                    entries.push({\n                        binding: entry.binding,\n                        resource: {\n                            buffer: undefined,\n                            offset: 0,\n                            size: 0,\n                        },\n                    });\n                }\n            }\n            bindGroupEntries[i] = entries;\n        }\n    }\n    _addTextureBindingDescription(name, textureInfo, textureIndex, dimension, format, isVertex) {\n        // eslint-disable-next-line prefer-const\n        let { groupIndex, bindingIndex } = textureInfo.textures[textureIndex];\n        if (!this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex]) {\n            this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex] = [];\n            this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex] = [];\n        }\n        if (!this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex]) {\n            let len;\n            if (dimension === null) {\n                len = this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex].push({\n                    binding: bindingIndex,\n                    visibility: 0,\n                    externalTexture: {},\n                });\n            }\n            else if (format) {\n                len = this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex].push({\n                    binding: bindingIndex,\n                    visibility: 0,\n                    storageTexture: {\n                        access: WebGPUConstants.StorageTextureAccess.WriteOnly,\n                        format,\n                        viewDimension: dimension,\n                    },\n                });\n            }\n            else {\n                len = this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex].push({\n                    binding: bindingIndex,\n                    visibility: 0,\n                    texture: {\n                        sampleType: textureInfo.sampleType,\n                        viewDimension: dimension,\n                        multisampled: false,\n                    },\n                });\n            }\n            const textureName = textureInfo.isTextureArray ? name + textureIndex : name;\n            this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex] = { name, index: len - 1, nameInArrayOfTexture: textureName };\n        }\n        bindingIndex = this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex].index;\n        if (isVertex) {\n            this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Vertex;\n        }\n        else {\n            this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Fragment;\n        }\n    }\n    _addSamplerBindingDescription(name, samplerInfo, isVertex) {\n        // eslint-disable-next-line prefer-const\n        let { groupIndex, bindingIndex } = samplerInfo.binding;\n        if (!this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex]) {\n            this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex] = [];\n            this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex] = [];\n        }\n        if (!this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex]) {\n            const len = this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex].push({\n                binding: bindingIndex,\n                visibility: 0,\n                sampler: {\n                    type: samplerInfo.type,\n                },\n            });\n            this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex] = { name, index: len - 1 };\n        }\n        bindingIndex = this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex].index;\n        if (isVertex) {\n            this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Vertex;\n        }\n        else {\n            this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Fragment;\n        }\n    }\n    _addBufferBindingDescription(name, uniformBufferInfo, bufferType, isVertex) {\n        // eslint-disable-next-line prefer-const\n        let { groupIndex, bindingIndex } = uniformBufferInfo.binding;\n        if (!this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex]) {\n            this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex] = [];\n            this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex] = [];\n        }\n        if (!this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex]) {\n            const len = this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex].push({\n                binding: bindingIndex,\n                visibility: 0,\n                buffer: {\n                    type: bufferType,\n                },\n            });\n            this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex] = { name, index: len - 1 };\n        }\n        bindingIndex = this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex].index;\n        if (isVertex) {\n            this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Vertex;\n        }\n        else {\n            this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Fragment;\n        }\n    }\n    _injectStartingAndEndingCode(code, mainFuncDecl, startingCode, endingCode) {\n        let idx = code.indexOf(mainFuncDecl);\n        if (idx < 0) {\n            console.error(`No \"main\" function found in shader code! Processing aborted.`);\n            return code;\n        }\n        if (startingCode) {\n            // eslint-disable-next-line no-empty\n            while (idx++ < code.length && code.charAt(idx) != \"{\") { }\n            if (idx < code.length) {\n                const part1 = code.substring(0, idx + 1);\n                const part2 = code.substring(idx + 1);\n                code = part1 + startingCode + part2;\n            }\n        }\n        if (endingCode) {\n            const lastClosingCurly = code.lastIndexOf(\"}\");\n            code = code.substring(0, lastClosingCurly);\n            code += endingCode + \"\\n}\";\n        }\n        return code;\n    }\n}\nWebGPUShaderProcessor.AutoSamplerSuffix = \"Sampler\";\nWebGPUShaderProcessor.LeftOvertUBOName = \"LeftOver\";\nWebGPUShaderProcessor.InternalsUBOName = \"Internals\";\nWebGPUShaderProcessor.UniformSizes = {\n    // GLSL types\n    bool: 1,\n    int: 1,\n    float: 1,\n    vec2: 2,\n    ivec2: 2,\n    vec3: 3,\n    ivec3: 3,\n    vec4: 4,\n    ivec4: 4,\n    mat2: 4,\n    mat3: 12,\n    mat4: 16,\n    // WGSL types\n    i32: 1,\n    u32: 1,\n    f32: 1,\n    mat2x2: 4,\n    mat3x3: 12,\n    mat4x4: 16,\n};\n// eslint-disable-next-line @typescript-eslint/naming-convention\nWebGPUShaderProcessor._SamplerFunctionByWebGLSamplerType = {\n    sampler2D: \"sampler2D\",\n    sampler2DArray: \"sampler2DArray\",\n    sampler2DShadow: \"sampler2DShadow\",\n    sampler2DArrayShadow: \"sampler2DArrayShadow\",\n    samplerCube: \"samplerCube\",\n    sampler3D: \"sampler3D\",\n};\n// eslint-disable-next-line @typescript-eslint/naming-convention\nWebGPUShaderProcessor._TextureTypeByWebGLSamplerType = {\n    sampler2D: \"texture2D\",\n    sampler2DArray: \"texture2DArray\",\n    sampler2DShadow: \"texture2D\",\n    sampler2DArrayShadow: \"texture2DArray\",\n    samplerCube: \"textureCube\",\n    samplerCubeArray: \"textureCubeArray\",\n    sampler3D: \"texture3D\",\n};\n// eslint-disable-next-line @typescript-eslint/naming-convention\nWebGPUShaderProcessor._GpuTextureViewDimensionByWebGPUTextureType = {\n    textureCube: WebGPUConstants.TextureViewDimension.Cube,\n    textureCubeArray: WebGPUConstants.TextureViewDimension.CubeArray,\n    texture2D: WebGPUConstants.TextureViewDimension.E2d,\n    texture2DArray: WebGPUConstants.TextureViewDimension.E2dArray,\n    texture3D: WebGPUConstants.TextureViewDimension.E3d,\n};\n// if the webgl sampler type is not listed in this array, \"sampler\" is taken by default\n// eslint-disable-next-line @typescript-eslint/naming-convention\nWebGPUShaderProcessor._SamplerTypeByWebGLSamplerType = {\n    sampler2DShadow: \"samplerShadow\",\n    sampler2DArrayShadow: \"samplerShadow\",\n};\n// eslint-disable-next-line @typescript-eslint/naming-convention\nWebGPUShaderProcessor._IsComparisonSamplerByWebGPUSamplerType = {\n    samplerShadow: true,\n    samplerArrayShadow: true,\n    sampler: false,\n};\n//# sourceMappingURL=webgpuShaderProcessor.js.map","import { WebGPUShaderProcessingContext } from \"./webgpuShaderProcessingContext.js\";\nimport * as WebGPUConstants from \"./webgpuConstants.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { WebGPUShaderProcessor } from \"./webgpuShaderProcessor.js\";\nimport { ShaderLanguage } from \"../../Materials/shaderLanguage.js\";\n/** @internal */\nexport class WebGPUShaderProcessorGLSL extends WebGPUShaderProcessor {\n    constructor() {\n        super(...arguments);\n        this._missingVaryings = [];\n        this._textureArrayProcessing = [];\n        this._vertexIsGLES3 = false;\n        this._fragmentIsGLES3 = false;\n        this.shaderLanguage = ShaderLanguage.GLSL;\n        this.parseGLES3 = true;\n    }\n    _getArraySize(name, type, preProcessors) {\n        let length = 0;\n        const startArray = name.indexOf(\"[\");\n        const endArray = name.indexOf(\"]\");\n        if (startArray > 0 && endArray > 0) {\n            const lengthInString = name.substring(startArray + 1, endArray);\n            length = +lengthInString;\n            if (isNaN(length)) {\n                length = +preProcessors[lengthInString.trim()];\n            }\n            name = name.substr(0, startArray);\n        }\n        return [name, type, length];\n    }\n    initializeShaders(processingContext) {\n        this._webgpuProcessingContext = processingContext;\n        this._missingVaryings.length = 0;\n        this._textureArrayProcessing.length = 0;\n        this.attributeKeywordName = undefined;\n        this.varyingVertexKeywordName = undefined;\n        this.varyingFragmentKeywordName = undefined;\n    }\n    preProcessShaderCode(code, isFragment) {\n        const ubDeclaration = `// Internals UBO\\r\\nuniform ${WebGPUShaderProcessor.InternalsUBOName} {\\nfloat yFactor_;\\nfloat textureOutputHeight_;\\n};\\n`;\n        const alreadyInjected = code.indexOf(\"// Internals UBO\") !== -1;\n        if (isFragment) {\n            this._fragmentIsGLES3 = code.indexOf(\"#version 3\") !== -1;\n            if (this._fragmentIsGLES3) {\n                this.varyingFragmentKeywordName = \"in\";\n            }\n            return alreadyInjected ? code : ubDeclaration + \"##INJECTCODE##\\n\" + code;\n        }\n        this._vertexIsGLES3 = code.indexOf(\"#version 3\") !== -1;\n        if (this._vertexIsGLES3) {\n            this.attributeKeywordName = \"in\";\n            this.varyingVertexKeywordName = \"out\";\n        }\n        return alreadyInjected ? code : ubDeclaration + code;\n    }\n    varyingProcessor(varying, isFragment, preProcessors) {\n        this._preProcessors = preProcessors;\n        const outRegex = /\\s*out\\s+(?:(?:highp)?|(?:lowp)?)\\s*(\\S+)\\s+(\\S+)\\s*;/gm;\n        const inRegex = /\\s*in\\s+(?:(?:highp)?|(?:lowp)?)\\s*(\\S+)\\s+(\\S+)\\s*;/gm;\n        const varyingRegex = /\\s*varying\\s+(?:(?:highp)?|(?:lowp)?)\\s*(\\S+)\\s+(\\S+)\\s*;/gm;\n        const regex = isFragment && this._fragmentIsGLES3 ? inRegex : !isFragment && this._vertexIsGLES3 ? outRegex : varyingRegex;\n        const match = regex.exec(varying);\n        if (match !== null) {\n            const varyingType = match[1];\n            const name = match[2];\n            let location;\n            if (isFragment) {\n                location = this._webgpuProcessingContext.availableVaryings[name];\n                this._missingVaryings[location] = \"\";\n                if (location === undefined) {\n                    Logger.Warn(`Invalid fragment shader: The varying named \"${name}\" is not declared in the vertex shader! This declaration will be ignored.`);\n                }\n            }\n            else {\n                location = this._webgpuProcessingContext.getVaryingNextLocation(varyingType, this._getArraySize(name, varyingType, preProcessors)[2]);\n                this._webgpuProcessingContext.availableVaryings[name] = location;\n                this._missingVaryings[location] = `layout(location = ${location}) in ${varyingType} ${name};`;\n            }\n            varying = varying.replace(match[0], location === undefined ? \"\" : `layout(location = ${location}) ${isFragment ? \"in\" : \"out\"} ${varyingType} ${name};`);\n        }\n        return varying;\n    }\n    attributeProcessor(attribute, preProcessors) {\n        this._preProcessors = preProcessors;\n        const inRegex = /\\s*in\\s+(\\S+)\\s+(\\S+)\\s*;/gm;\n        const attribRegex = /\\s*attribute\\s+(\\S+)\\s+(\\S+)\\s*;/gm;\n        const regex = this._vertexIsGLES3 ? inRegex : attribRegex;\n        const match = regex.exec(attribute);\n        if (match !== null) {\n            const attributeType = match[1];\n            const name = match[2];\n            const location = this._webgpuProcessingContext.getAttributeNextLocation(attributeType, this._getArraySize(name, attributeType, preProcessors)[2]);\n            this._webgpuProcessingContext.availableAttributes[name] = location;\n            this._webgpuProcessingContext.orderedAttributes[location] = name;\n            attribute = attribute.replace(match[0], `layout(location = ${location}) in ${attributeType} ${name};`);\n        }\n        return attribute;\n    }\n    uniformProcessor(uniform, isFragment, preProcessors) {\n        var _a;\n        this._preProcessors = preProcessors;\n        const uniformRegex = /\\s*uniform\\s+(?:(?:highp)?|(?:lowp)?)\\s*(\\S+)\\s+(\\S+)\\s*;/gm;\n        const match = uniformRegex.exec(uniform);\n        if (match !== null) {\n            let uniformType = match[1];\n            let name = match[2];\n            if (uniformType.indexOf(\"sampler\") === 0 || uniformType.indexOf(\"sampler\") === 1) {\n                let arraySize = 0; // 0 means the texture is not declared as an array\n                [name, uniformType, arraySize] = this._getArraySize(name, uniformType, preProcessors);\n                let textureInfo = this._webgpuProcessingContext.availableTextures[name];\n                if (!textureInfo) {\n                    textureInfo = {\n                        autoBindSampler: true,\n                        isTextureArray: arraySize > 0,\n                        isStorageTexture: false,\n                        textures: [],\n                        sampleType: WebGPUConstants.TextureSampleType.Float,\n                    };\n                    for (let i = 0; i < (arraySize || 1); ++i) {\n                        textureInfo.textures.push(this._webgpuProcessingContext.getNextFreeUBOBinding());\n                    }\n                }\n                const samplerType = (_a = WebGPUShaderProcessor._SamplerTypeByWebGLSamplerType[uniformType]) !== null && _a !== void 0 ? _a : \"sampler\";\n                const isComparisonSampler = !!WebGPUShaderProcessor._IsComparisonSamplerByWebGPUSamplerType[samplerType];\n                const samplerBindingType = isComparisonSampler ? WebGPUConstants.SamplerBindingType.Comparison : WebGPUConstants.SamplerBindingType.Filtering;\n                const samplerName = name + WebGPUShaderProcessor.AutoSamplerSuffix;\n                let samplerInfo = this._webgpuProcessingContext.availableSamplers[samplerName];\n                if (!samplerInfo) {\n                    samplerInfo = {\n                        binding: this._webgpuProcessingContext.getNextFreeUBOBinding(),\n                        type: samplerBindingType,\n                    };\n                }\n                const componentType = uniformType.charAt(0) === \"u\" ? \"u\" : uniformType.charAt(0) === \"i\" ? \"i\" : \"\";\n                if (componentType) {\n                    uniformType = uniformType.substr(1);\n                }\n                const sampleType = isComparisonSampler\n                    ? WebGPUConstants.TextureSampleType.Depth\n                    : componentType === \"u\"\n                        ? WebGPUConstants.TextureSampleType.Uint\n                        : componentType === \"i\"\n                            ? WebGPUConstants.TextureSampleType.Sint\n                            : WebGPUConstants.TextureSampleType.Float;\n                textureInfo.sampleType = sampleType;\n                const isTextureArray = arraySize > 0;\n                const samplerGroupIndex = samplerInfo.binding.groupIndex;\n                const samplerBindingIndex = samplerInfo.binding.bindingIndex;\n                const samplerFunction = WebGPUShaderProcessor._SamplerFunctionByWebGLSamplerType[uniformType];\n                const textureType = WebGPUShaderProcessor._TextureTypeByWebGLSamplerType[uniformType];\n                const textureDimension = WebGPUShaderProcessor._GpuTextureViewDimensionByWebGPUTextureType[textureType];\n                // Manage textures and samplers.\n                if (!isTextureArray) {\n                    arraySize = 1;\n                    uniform = `layout(set = ${samplerGroupIndex}, binding = ${samplerBindingIndex}) uniform ${componentType}${samplerType} ${samplerName};\r\n                        layout(set = ${textureInfo.textures[0].groupIndex}, binding = ${textureInfo.textures[0].bindingIndex}) uniform ${textureType} ${name}Texture;\r\n                        #define ${name} ${componentType}${samplerFunction}(${name}Texture, ${samplerName})`;\n                }\n                else {\n                    const layouts = [];\n                    layouts.push(`layout(set = ${samplerGroupIndex}, binding = ${samplerBindingIndex}) uniform ${componentType}${samplerType} ${samplerName};`);\n                    uniform = `\\r\\n`;\n                    for (let i = 0; i < arraySize; ++i) {\n                        const textureSetIndex = textureInfo.textures[i].groupIndex;\n                        const textureBindingIndex = textureInfo.textures[i].bindingIndex;\n                        layouts.push(`layout(set = ${textureSetIndex}, binding = ${textureBindingIndex}) uniform ${textureType} ${name}Texture${i};`);\n                        uniform += `${i > 0 ? \"\\r\\n\" : \"\"}#define ${name}${i} ${componentType}${samplerFunction}(${name}Texture${i}, ${samplerName})`;\n                    }\n                    uniform = layouts.join(\"\\r\\n\") + uniform;\n                    this._textureArrayProcessing.push(name);\n                }\n                this._webgpuProcessingContext.availableTextures[name] = textureInfo;\n                this._webgpuProcessingContext.availableSamplers[samplerName] = samplerInfo;\n                this._addSamplerBindingDescription(samplerName, samplerInfo, !isFragment);\n                for (let i = 0; i < arraySize; ++i) {\n                    this._addTextureBindingDescription(name, textureInfo, i, textureDimension, null, !isFragment);\n                }\n            }\n            else {\n                this._addUniformToLeftOverUBO(name, uniformType, preProcessors);\n                uniform = \"\";\n            }\n        }\n        return uniform;\n    }\n    uniformBufferProcessor(uniformBuffer, isFragment) {\n        const uboRegex = /uniform\\s+(\\w+)/gm;\n        const match = uboRegex.exec(uniformBuffer);\n        if (match !== null) {\n            const name = match[1];\n            let uniformBufferInfo = this._webgpuProcessingContext.availableBuffers[name];\n            if (!uniformBufferInfo) {\n                const knownUBO = WebGPUShaderProcessingContext.KnownUBOs[name];\n                let binding;\n                if (knownUBO && knownUBO.binding.groupIndex !== -1) {\n                    binding = knownUBO.binding;\n                }\n                else {\n                    binding = this._webgpuProcessingContext.getNextFreeUBOBinding();\n                }\n                uniformBufferInfo = { binding };\n                this._webgpuProcessingContext.availableBuffers[name] = uniformBufferInfo;\n            }\n            this._addBufferBindingDescription(name, uniformBufferInfo, WebGPUConstants.BufferBindingType.Uniform, !isFragment);\n            uniformBuffer = uniformBuffer.replace(\"uniform\", `layout(set = ${uniformBufferInfo.binding.groupIndex}, binding = ${uniformBufferInfo.binding.bindingIndex}) uniform`);\n        }\n        return uniformBuffer;\n    }\n    postProcessor(code, defines, isFragment, processingContext, engine) {\n        const hasDrawBuffersExtension = code.search(/#extension.+GL_EXT_draw_buffers.+require/) !== -1;\n        // Remove extensions\n        const regex = /#extension.+(GL_OVR_multiview2|GL_OES_standard_derivatives|GL_EXT_shader_texture_lod|GL_EXT_frag_depth|GL_EXT_draw_buffers).+(enable|require)/g;\n        code = code.replace(regex, \"\");\n        // Replace instructions\n        code = code.replace(/texture2D\\s*\\(/g, \"texture(\");\n        if (isFragment) {\n            const hasFragCoord = code.indexOf(\"gl_FragCoord\") >= 0;\n            const fragCoordCode = `\r\n                glFragCoord_ = gl_FragCoord;\r\n                if (yFactor_ == 1.) {\r\n                    glFragCoord_.y = textureOutputHeight_ - glFragCoord_.y;\r\n                }\r\n            `;\n            const injectCode = hasFragCoord ? \"vec4 glFragCoord_;\\n\" : \"\";\n            code = code.replace(/texture2DLodEXT\\s*\\(/g, \"textureLod(\");\n            code = code.replace(/textureCubeLodEXT\\s*\\(/g, \"textureLod(\");\n            code = code.replace(/textureCube\\s*\\(/g, \"texture(\");\n            code = code.replace(/gl_FragDepthEXT/g, \"gl_FragDepth\");\n            code = code.replace(/gl_FragColor/g, \"glFragColor\");\n            code = code.replace(/gl_FragData/g, \"glFragData\");\n            code = code.replace(/gl_FragCoord/g, \"glFragCoord_\");\n            if (!this._fragmentIsGLES3) {\n                code = code.replace(/void\\s+?main\\s*\\(/g, (hasDrawBuffersExtension ? \"\" : \"layout(location = 0) out vec4 glFragColor;\\n\") + \"void main(\");\n            }\n            else {\n                const match = /^\\s*out\\s+\\S+\\s+\\S+\\s*;/gm.exec(code);\n                if (match !== null) {\n                    code = code.substring(0, match.index) + \"layout(location = 0) \" + code.substring(match.index);\n                }\n            }\n            code = code.replace(/dFdy/g, \"(-yFactor_)*dFdy\"); // will also handle dFdyCoarse and dFdyFine\n            code = code.replace(\"##INJECTCODE##\", injectCode);\n            if (hasFragCoord) {\n                code = this._injectStartingAndEndingCode(code, \"void main\", fragCoordCode);\n            }\n        }\n        else {\n            code = code.replace(/gl_InstanceID/g, \"gl_InstanceIndex\");\n            code = code.replace(/gl_VertexID/g, \"gl_VertexIndex\");\n            const hasMultiviewExtension = defines.indexOf(\"#define MULTIVIEW\") !== -1;\n            if (hasMultiviewExtension) {\n                return \"#extension GL_OVR_multiview2 : require\\nlayout (num_views = 2) in;\\n\" + code;\n            }\n        }\n        // Flip Y + convert z range from [-1,1] to [0,1]\n        if (!isFragment) {\n            const lastClosingCurly = code.lastIndexOf(\"}\");\n            code = code.substring(0, lastClosingCurly);\n            code += \"gl_Position.y *= yFactor_;\\n\";\n            if (!engine.isNDCHalfZRange) {\n                code += \"gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0;\\n\";\n            }\n            code += \"}\";\n        }\n        return code;\n    }\n    _applyTextureArrayProcessing(code, name) {\n        // Replaces the occurrences of name[XX] by nameXX\n        const regex = new RegExp(name + \"\\\\s*\\\\[(.+)?\\\\]\", \"gm\");\n        let match = regex.exec(code);\n        while (match !== null) {\n            const index = match[1];\n            let iindex = +index;\n            if (this._preProcessors && isNaN(iindex)) {\n                iindex = +this._preProcessors[index.trim()];\n            }\n            code = code.replace(match[0], name + iindex);\n            match = regex.exec(code);\n        }\n        return code;\n    }\n    _generateLeftOverUBOCode(name, uniformBufferDescription) {\n        let ubo = `layout(set = ${uniformBufferDescription.binding.groupIndex}, binding = ${uniformBufferDescription.binding.bindingIndex}) uniform ${name} {\\n    `;\n        for (const leftOverUniform of this._webgpuProcessingContext.leftOverUniforms) {\n            if (leftOverUniform.length > 0) {\n                ubo += `    ${leftOverUniform.type} ${leftOverUniform.name}[${leftOverUniform.length}];\\n`;\n            }\n            else {\n                ubo += `    ${leftOverUniform.type} ${leftOverUniform.name};\\n`;\n            }\n        }\n        ubo += \"};\\n\\n\";\n        return ubo;\n    }\n    finalizeShaders(vertexCode, fragmentCode) {\n        // make replacements for texture names in the texture array case\n        for (let i = 0; i < this._textureArrayProcessing.length; ++i) {\n            const name = this._textureArrayProcessing[i];\n            vertexCode = this._applyTextureArrayProcessing(vertexCode, name);\n            fragmentCode = this._applyTextureArrayProcessing(fragmentCode, name);\n        }\n        // inject the missing varying in the fragment shader\n        for (let i = 0; i < this._missingVaryings.length; ++i) {\n            const decl = this._missingVaryings[i];\n            if (decl && decl.length > 0) {\n                fragmentCode = decl + \"\\n\" + fragmentCode;\n            }\n        }\n        // Builds the leftover UBOs.\n        const leftOverUBO = this._buildLeftOverUBO();\n        vertexCode = leftOverUBO + vertexCode;\n        fragmentCode = leftOverUBO + fragmentCode;\n        this._collectBindingNames();\n        this._preCreateBindGroupEntries();\n        this._preProcessors = null;\n        return { vertexCode, fragmentCode };\n    }\n}\n//# sourceMappingURL=webgpuShaderProcessorsGLSL.js.map","import { WebGPUShaderProcessingContext } from \"./webgpuShaderProcessingContext.js\";\nimport * as WebGPUConstants from \"./webgpuConstants.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { WebGPUShaderProcessor } from \"./webgpuShaderProcessor.js\";\nimport { RemoveComments } from \"../../Misc/codeStringParsingTools.js\";\nimport \"../../ShadersWGSL/ShadersInclude/bonesDeclaration.js\";\nimport \"../../ShadersWGSL/ShadersInclude/bonesVertex.js\";\nimport \"../../ShadersWGSL/ShadersInclude/bakedVertexAnimationDeclaration.js\";\nimport \"../../ShadersWGSL/ShadersInclude/bakedVertexAnimation.js\";\nimport \"../../ShadersWGSL/ShadersInclude/clipPlaneFragment.js\";\nimport \"../../ShadersWGSL/ShadersInclude/clipPlaneFragmentDeclaration.js\";\nimport \"../../ShadersWGSL/ShadersInclude/clipPlaneVertex.js\";\nimport \"../../ShadersWGSL/ShadersInclude/clipPlaneVertexDeclaration.js\";\nimport \"../../ShadersWGSL/ShadersInclude/instancesDeclaration.js\";\nimport \"../../ShadersWGSL/ShadersInclude/instancesVertex.js\";\nimport \"../../ShadersWGSL/ShadersInclude/meshUboDeclaration.js\";\nimport \"../../ShadersWGSL/ShadersInclude/morphTargetsVertex.js\";\nimport \"../../ShadersWGSL/ShadersInclude/morphTargetsVertexDeclaration.js\";\nimport \"../../ShadersWGSL/ShadersInclude/morphTargetsVertexGlobal.js\";\nimport \"../../ShadersWGSL/ShadersInclude/morphTargetsVertexGlobalDeclaration.js\";\nimport \"../../ShadersWGSL/ShadersInclude/sceneUboDeclaration.js\";\nimport { ShaderLanguage } from \"../../Materials/shaderLanguage.js\";\nconst builtInName_vertex_index = \"gl_VertexID\";\nconst builtInName_instance_index = \"gl_InstanceID\";\nconst builtInName_position = \"gl_Position\";\nconst builtInName_position_frag = \"gl_FragCoord\";\nconst builtInName_front_facing = \"gl_FrontFacing\";\nconst builtInName_frag_depth = \"gl_FragDepth\";\nconst builtInName_FragColor = \"gl_FragColor\";\nconst leftOverVarName = \"uniforms\";\nconst internalsVarName = \"internals\";\nconst gpuTextureViewDimensionByWebGPUTextureFunction = {\n    texture_1d: WebGPUConstants.TextureViewDimension.E1d,\n    texture_2d: WebGPUConstants.TextureViewDimension.E2d,\n    texture_2d_array: WebGPUConstants.TextureViewDimension.E2dArray,\n    texture_3d: WebGPUConstants.TextureViewDimension.E3d,\n    texture_cube: WebGPUConstants.TextureViewDimension.Cube,\n    texture_cube_array: WebGPUConstants.TextureViewDimension.CubeArray,\n    texture_multisampled_2d: WebGPUConstants.TextureViewDimension.E2d,\n    texture_depth_2d: WebGPUConstants.TextureViewDimension.E2d,\n    texture_depth_2d_array: WebGPUConstants.TextureViewDimension.E2dArray,\n    texture_depth_cube: WebGPUConstants.TextureViewDimension.Cube,\n    texture_depth_cube_array: WebGPUConstants.TextureViewDimension.CubeArray,\n    texture_depth_multisampled_2d: WebGPUConstants.TextureViewDimension.E2d,\n    texture_storage_1d: WebGPUConstants.TextureViewDimension.E1d,\n    texture_storage_2d: WebGPUConstants.TextureViewDimension.E2d,\n    texture_storage_2d_array: WebGPUConstants.TextureViewDimension.E2dArray,\n    texture_storage_3d: WebGPUConstants.TextureViewDimension.E3d,\n    texture_external: null,\n};\n/** @internal */\nexport class WebGPUShaderProcessorWGSL extends WebGPUShaderProcessor {\n    constructor() {\n        super(...arguments);\n        this.shaderLanguage = ShaderLanguage.WGSL;\n        this.uniformRegexp = /uniform\\s+(\\w+)\\s*:\\s*(.+)\\s*;/;\n        this.textureRegexp = /var\\s+(\\w+)\\s*:\\s*((array<\\s*)?(texture_\\w+)\\s*(<\\s*(.+)\\s*>)?\\s*(,\\s*\\w+\\s*>\\s*)?);/;\n        this.noPrecision = true;\n    }\n    _getArraySize(name, uniformType, preProcessors) {\n        let length = 0;\n        const endArray = uniformType.lastIndexOf(\">\");\n        if (uniformType.indexOf(\"array\") >= 0 && endArray > 0) {\n            let startArray = endArray;\n            while (startArray > 0 && uniformType.charAt(startArray) !== \" \" && uniformType.charAt(startArray) !== \",\") {\n                startArray--;\n            }\n            const lengthInString = uniformType.substring(startArray + 1, endArray);\n            length = +lengthInString;\n            if (isNaN(length)) {\n                length = +preProcessors[lengthInString.trim()];\n            }\n            while (startArray > 0 && (uniformType.charAt(startArray) === \" \" || uniformType.charAt(startArray) === \",\")) {\n                startArray--;\n            }\n            uniformType = uniformType.substring(uniformType.indexOf(\"<\") + 1, startArray + 1);\n        }\n        return [name, uniformType, length];\n    }\n    initializeShaders(processingContext) {\n        this._webgpuProcessingContext = processingContext;\n        this._attributesWGSL = [];\n        this._attributesDeclWGSL = [];\n        this._attributeNamesWGSL = [];\n        this._varyingsWGSL = [];\n        this._varyingsDeclWGSL = [];\n        this._varyingNamesWGSL = [];\n        this._stridedUniformArrays = [];\n    }\n    preProcessShaderCode(code) {\n        return (`struct ${WebGPUShaderProcessor.InternalsUBOName} {\\nyFactor_: f32,\\ntextureOutputHeight_: f32,\\n};\\nvar<uniform> ${internalsVarName} : ${WebGPUShaderProcessor.InternalsUBOName};\\n` +\n            RemoveComments(code));\n    }\n    varyingProcessor(varying, isFragment, preProcessors) {\n        const varyingRegex = /\\s*varying\\s+(?:(?:highp)?|(?:lowp)?)\\s*(\\S+)\\s*:\\s*(.+)\\s*;/gm;\n        const match = varyingRegex.exec(varying);\n        if (match !== null) {\n            const varyingType = match[2];\n            const name = match[1];\n            let location;\n            if (isFragment) {\n                location = this._webgpuProcessingContext.availableVaryings[name];\n                if (location === undefined) {\n                    Logger.Warn(`Invalid fragment shader: The varying named \"${name}\" is not declared in the vertex shader! This declaration will be ignored.`);\n                }\n            }\n            else {\n                location = this._webgpuProcessingContext.getVaryingNextLocation(varyingType, this._getArraySize(name, varyingType, preProcessors)[2]);\n                this._webgpuProcessingContext.availableVaryings[name] = location;\n                this._varyingsWGSL.push(`@location(${location}) ${name} : ${varyingType},`);\n                this._varyingsDeclWGSL.push(`var<private> ${name} : ${varyingType};`);\n                this._varyingNamesWGSL.push(name);\n            }\n            varying = \"\";\n        }\n        return varying;\n    }\n    attributeProcessor(attribute, preProcessors) {\n        const attribRegex = /\\s*attribute\\s+(\\S+)\\s*:\\s*(.+)\\s*;/gm;\n        const match = attribRegex.exec(attribute);\n        if (match !== null) {\n            const attributeType = match[2];\n            const name = match[1];\n            const location = this._webgpuProcessingContext.getAttributeNextLocation(attributeType, this._getArraySize(name, attributeType, preProcessors)[2]);\n            this._webgpuProcessingContext.availableAttributes[name] = location;\n            this._webgpuProcessingContext.orderedAttributes[location] = name;\n            this._attributesWGSL.push(`@location(${location}) ${name} : ${attributeType},`);\n            this._attributesDeclWGSL.push(`var<private> ${name} : ${attributeType};`);\n            this._attributeNamesWGSL.push(name);\n            attribute = \"\";\n        }\n        return attribute;\n    }\n    uniformProcessor(uniform, isFragment, preProcessors) {\n        const match = this.uniformRegexp.exec(uniform);\n        if (match !== null) {\n            const uniformType = match[2];\n            const name = match[1];\n            this._addUniformToLeftOverUBO(name, uniformType, preProcessors);\n            uniform = \"\";\n        }\n        return uniform;\n    }\n    textureProcessor(texture, isFragment, preProcessors) {\n        const match = this.textureRegexp.exec(texture);\n        if (match !== null) {\n            const name = match[1]; // name of the variable\n            const type = match[2]; // texture_2d<f32> or array<texture_2d_array<f32>, 5> for eg\n            const isArrayOfTexture = !!match[3];\n            const textureFunc = match[4]; // texture_2d, texture_depth_2d, etc\n            const isStorageTexture = textureFunc.indexOf(\"storage\") > 0;\n            const componentType = match[6]; // f32 or i32 or u32 or undefined\n            const storageTextureFormat = isStorageTexture ? componentType.substring(0, componentType.indexOf(\",\")).trim() : null;\n            let arraySize = isArrayOfTexture ? this._getArraySize(name, type, preProcessors)[2] : 0;\n            let textureInfo = this._webgpuProcessingContext.availableTextures[name];\n            if (!textureInfo) {\n                textureInfo = {\n                    isTextureArray: arraySize > 0,\n                    isStorageTexture,\n                    textures: [],\n                    sampleType: WebGPUConstants.TextureSampleType.Float,\n                };\n                arraySize = arraySize || 1;\n                for (let i = 0; i < arraySize; ++i) {\n                    textureInfo.textures.push(this._webgpuProcessingContext.getNextFreeUBOBinding());\n                }\n            }\n            else {\n                arraySize = textureInfo.textures.length;\n            }\n            this._webgpuProcessingContext.availableTextures[name] = textureInfo;\n            const isDepthTexture = textureFunc.indexOf(\"depth\") > 0;\n            const textureDimension = gpuTextureViewDimensionByWebGPUTextureFunction[textureFunc];\n            const sampleType = isDepthTexture\n                ? WebGPUConstants.TextureSampleType.Depth\n                : componentType === \"u32\"\n                    ? WebGPUConstants.TextureSampleType.Uint\n                    : componentType === \"i32\"\n                        ? WebGPUConstants.TextureSampleType.Sint\n                        : WebGPUConstants.TextureSampleType.Float;\n            textureInfo.sampleType = sampleType;\n            if (textureDimension === undefined) {\n                throw `Can't get the texture dimension corresponding to the texture function \"${textureFunc}\"!`;\n            }\n            for (let i = 0; i < arraySize; ++i) {\n                const { groupIndex, bindingIndex } = textureInfo.textures[i];\n                if (i === 0) {\n                    texture = `@group(${groupIndex}) @binding(${bindingIndex}) ${texture}`;\n                }\n                this._addTextureBindingDescription(name, textureInfo, i, textureDimension, storageTextureFormat, !isFragment);\n            }\n        }\n        return texture;\n    }\n    postProcessor(code) {\n        return code;\n    }\n    finalizeShaders(vertexCode, fragmentCode) {\n        const fragCoordCode = fragmentCode.indexOf(\"gl_FragCoord\") >= 0\n            ? `\r\n            if (internals.yFactor_ == 1.) {\r\n                gl_FragCoord.y = internals.textureOutputHeight_ - gl_FragCoord.y;\r\n            }\r\n        `\n            : \"\";\n        // Add the group/binding info to the sampler declaration (var xxx: sampler|sampler_comparison)\n        vertexCode = this._processSamplers(vertexCode, true);\n        fragmentCode = this._processSamplers(fragmentCode, false);\n        // Add the group/binding info to the uniform/storage buffer declarations (var<uniform> XXX:YYY or var<storage(,read_write|read)> XXX:YYY)\n        vertexCode = this._processCustomBuffers(vertexCode, true);\n        fragmentCode = this._processCustomBuffers(fragmentCode, false);\n        // Builds the leftover UBOs.\n        const leftOverUBO = this._buildLeftOverUBO();\n        vertexCode = leftOverUBO + vertexCode;\n        fragmentCode = leftOverUBO + fragmentCode;\n        // Vertex code\n        vertexCode = vertexCode.replace(/#define /g, \"//#define \");\n        vertexCode = this._processStridedUniformArrays(vertexCode);\n        const varyingsDecl = this._varyingsDeclWGSL.join(\"\\n\") + \"\\n\";\n        const vertexBuiltinDecl = `var<private> ${builtInName_vertex_index} : u32;\\nvar<private> ${builtInName_instance_index} : u32;\\nvar<private> ${builtInName_position} : vec4<f32>;\\n`;\n        const vertexAttributesDecl = this._attributesDeclWGSL.join(\"\\n\") + \"\\n\";\n        let vertexInputs = \"struct VertexInputs {\\n  @builtin(vertex_index) vertexIndex : u32,\\n  @builtin(instance_index) instanceIndex : u32,\\n\";\n        if (this._attributesWGSL.length > 0) {\n            vertexInputs += this._attributesWGSL.join(\"\\n\");\n        }\n        vertexInputs += \"\\n};\\n\";\n        let vertexFragmentInputs = \"struct FragmentInputs {\\n  @builtin(position) position : vec4<f32>,\\n\";\n        if (this._varyingsWGSL.length > 0) {\n            vertexFragmentInputs += this._varyingsWGSL.join(\"\\n\");\n        }\n        vertexFragmentInputs += \"\\n};\\n\";\n        vertexCode = vertexBuiltinDecl + vertexInputs + vertexAttributesDecl + vertexFragmentInputs + varyingsDecl + vertexCode;\n        let vertexStartingCode = `  var output : FragmentInputs;\\n  ${builtInName_vertex_index} = input.vertexIndex;\\n  ${builtInName_instance_index} = input.instanceIndex;\\n`;\n        for (let i = 0; i < this._attributeNamesWGSL.length; ++i) {\n            const name = this._attributeNamesWGSL[i];\n            vertexStartingCode += `  ${name} = input.${name};\\n`;\n        }\n        let vertexEndingCode = `  output.position = ${builtInName_position};\\n  output.position.y = output.position.y * internals.yFactor_;\\n`;\n        for (let i = 0; i < this._varyingNamesWGSL.length; ++i) {\n            const name = this._varyingNamesWGSL[i];\n            vertexEndingCode += `  output.${name} = ${name};\\n`;\n        }\n        vertexEndingCode += \"  return output;\";\n        vertexCode = this._injectStartingAndEndingCode(vertexCode, \"fn main\", vertexStartingCode, vertexEndingCode);\n        // fragment code\n        fragmentCode = fragmentCode.replace(/#define /g, \"//#define \");\n        fragmentCode = this._processStridedUniformArrays(fragmentCode);\n        fragmentCode = fragmentCode.replace(/dpdy/g, \"(-internals.yFactor_)*dpdy\"); // will also handle dpdyCoarse and dpdyFine\n        const fragmentBuiltinDecl = `var<private> ${builtInName_position_frag} : vec4<f32>;\\nvar<private> ${builtInName_front_facing} : bool;\\nvar<private> ${builtInName_FragColor} : vec4<f32>;\\nvar<private> ${builtInName_frag_depth} : f32;\\n`;\n        let fragmentFragmentInputs = \"struct FragmentInputs {\\n  @builtin(position) position : vec4<f32>,\\n  @builtin(front_facing) frontFacing : bool,\\n\";\n        if (this._varyingsWGSL.length > 0) {\n            fragmentFragmentInputs += this._varyingsWGSL.join(\"\\n\");\n        }\n        fragmentFragmentInputs += \"\\n};\\n\";\n        let fragmentOutputs = \"struct FragmentOutputs {\\n  @location(0) color : vec4<f32>,\\n\";\n        let hasFragDepth = false;\n        let idx = 0;\n        while (!hasFragDepth) {\n            idx = fragmentCode.indexOf(builtInName_frag_depth, idx);\n            if (idx < 0) {\n                break;\n            }\n            const saveIndex = idx;\n            hasFragDepth = true;\n            while (idx > 1 && fragmentCode.charAt(idx) !== \"\\n\") {\n                if (fragmentCode.charAt(idx) === \"/\" && fragmentCode.charAt(idx - 1) === \"/\") {\n                    hasFragDepth = false;\n                    break;\n                }\n                idx--;\n            }\n            idx = saveIndex + builtInName_frag_depth.length;\n        }\n        if (hasFragDepth) {\n            fragmentOutputs += \"  @builtin(frag_depth) fragDepth: f32,\\n\";\n        }\n        fragmentOutputs += \"};\\n\";\n        fragmentCode = fragmentBuiltinDecl + fragmentFragmentInputs + varyingsDecl + fragmentOutputs + fragmentCode;\n        let fragmentStartingCode = `  var output : FragmentOutputs;\\n  ${builtInName_position_frag} = input.position;\\n  ${builtInName_front_facing} = input.frontFacing;\\n` + fragCoordCode;\n        for (let i = 0; i < this._varyingNamesWGSL.length; ++i) {\n            const name = this._varyingNamesWGSL[i];\n            fragmentStartingCode += `  ${name} = input.${name};\\n`;\n        }\n        let fragmentEndingCode = `  output.color = ${builtInName_FragColor};\\n`;\n        if (hasFragDepth) {\n            fragmentEndingCode += `  output.fragDepth = ${builtInName_frag_depth};\\n`;\n        }\n        fragmentEndingCode += \"  return output;\";\n        fragmentCode = this._injectStartingAndEndingCode(fragmentCode, \"fn main\", fragmentStartingCode, fragmentEndingCode);\n        this._collectBindingNames();\n        this._preCreateBindGroupEntries();\n        return { vertexCode, fragmentCode };\n    }\n    _generateLeftOverUBOCode(name, uniformBufferDescription) {\n        let stridedArrays = \"\";\n        let ubo = `struct ${name} {\\n`;\n        for (const leftOverUniform of this._webgpuProcessingContext.leftOverUniforms) {\n            const type = leftOverUniform.type.replace(/^(.*?)(<.*>)?$/, \"$1\");\n            const size = WebGPUShaderProcessor.UniformSizes[type];\n            if (leftOverUniform.length > 0) {\n                if (size <= 2) {\n                    const stridedArrayType = `${name}_${this._stridedUniformArrays.length}_strided_arr`;\n                    stridedArrays += `struct ${stridedArrayType} {\r\n                        @size(16)\r\n                        el: ${type},\r\n                    }`;\n                    this._stridedUniformArrays.push(leftOverUniform.name);\n                    ubo += ` @align(16) ${leftOverUniform.name} : array<${stridedArrayType}, ${leftOverUniform.length}>,\\n`;\n                }\n                else {\n                    ubo += ` ${leftOverUniform.name} : array<${leftOverUniform.type}, ${leftOverUniform.length}>,\\n`;\n                }\n            }\n            else {\n                ubo += `  ${leftOverUniform.name} : ${leftOverUniform.type},\\n`;\n            }\n        }\n        ubo += \"};\\n\";\n        ubo = `${stridedArrays}\\n${ubo}`;\n        ubo += `@group(${uniformBufferDescription.binding.groupIndex}) @binding(${uniformBufferDescription.binding.bindingIndex}) var<uniform> ${leftOverVarName} : ${name};\\n`;\n        return ubo;\n    }\n    _processSamplers(code, isVertex) {\n        const samplerRegexp = /var\\s+(\\w+Sampler)\\s*:\\s*(sampler|sampler_comparison)\\s*;/gm;\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            const match = samplerRegexp.exec(code);\n            if (match === null) {\n                break;\n            }\n            const name = match[1]; // name of the variable\n            const samplerType = match[2]; // sampler or sampler_comparison\n            const textureName = name.indexOf(WebGPUShaderProcessor.AutoSamplerSuffix) === name.length - WebGPUShaderProcessor.AutoSamplerSuffix.length\n                ? name.substring(0, name.indexOf(WebGPUShaderProcessor.AutoSamplerSuffix))\n                : null;\n            const samplerBindingType = samplerType === \"sampler_comparison\" ? WebGPUConstants.SamplerBindingType.Comparison : WebGPUConstants.SamplerBindingType.Filtering;\n            if (textureName) {\n                const textureInfo = this._webgpuProcessingContext.availableTextures[textureName];\n                if (textureInfo) {\n                    textureInfo.autoBindSampler = true;\n                }\n            }\n            let samplerInfo = this._webgpuProcessingContext.availableSamplers[name];\n            if (!samplerInfo) {\n                samplerInfo = {\n                    binding: this._webgpuProcessingContext.getNextFreeUBOBinding(),\n                    type: samplerBindingType,\n                };\n                this._webgpuProcessingContext.availableSamplers[name] = samplerInfo;\n            }\n            this._addSamplerBindingDescription(name, samplerInfo, isVertex);\n            const part1 = code.substring(0, match.index);\n            const insertPart = `@group(${samplerInfo.binding.groupIndex}) @binding(${samplerInfo.binding.bindingIndex}) `;\n            const part2 = code.substring(match.index);\n            code = part1 + insertPart + part2;\n            samplerRegexp.lastIndex += insertPart.length;\n        }\n        return code;\n    }\n    _processCustomBuffers(code, isVertex) {\n        const instantiateBufferRegexp = /var<\\s*(uniform|storage)\\s*(,\\s*(read|read_write)\\s*)?>\\s+(\\S+)\\s*:\\s*(\\S+)\\s*;/gm;\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            const match = instantiateBufferRegexp.exec(code);\n            if (match === null) {\n                break;\n            }\n            const type = match[1];\n            const decoration = match[3];\n            let name = match[4];\n            const structName = match[5];\n            let bufferInfo = this._webgpuProcessingContext.availableBuffers[name];\n            if (!bufferInfo) {\n                const knownUBO = type === \"uniform\" ? WebGPUShaderProcessingContext.KnownUBOs[structName] : null;\n                let binding;\n                if (knownUBO) {\n                    name = structName;\n                    binding = knownUBO.binding;\n                    if (binding.groupIndex === -1) {\n                        binding = this._webgpuProcessingContext.getNextFreeUBOBinding();\n                    }\n                }\n                else {\n                    binding = this._webgpuProcessingContext.getNextFreeUBOBinding();\n                }\n                bufferInfo = { binding };\n                this._webgpuProcessingContext.availableBuffers[name] = bufferInfo;\n            }\n            this._addBufferBindingDescription(name, this._webgpuProcessingContext.availableBuffers[name], decoration === \"read_write\"\n                ? WebGPUConstants.BufferBindingType.Storage\n                : type === \"storage\"\n                    ? WebGPUConstants.BufferBindingType.ReadOnlyStorage\n                    : WebGPUConstants.BufferBindingType.Uniform, isVertex);\n            const groupIndex = bufferInfo.binding.groupIndex;\n            const bindingIndex = bufferInfo.binding.bindingIndex;\n            const part1 = code.substring(0, match.index);\n            const insertPart = `@group(${groupIndex}) @binding(${bindingIndex}) `;\n            const part2 = code.substring(match.index);\n            code = part1 + insertPart + part2;\n            instantiateBufferRegexp.lastIndex += insertPart.length;\n        }\n        return code;\n    }\n    _processStridedUniformArrays(code) {\n        for (const uniformArrayName of this._stridedUniformArrays) {\n            code = code.replace(new RegExp(`${uniformArrayName}\\\\s*\\\\[(.*)\\\\]`, \"g\"), `${uniformArrayName}[$1].el`);\n        }\n        return code;\n    }\n}\n//# sourceMappingURL=webgpuShaderProcessorsWGSL.js.map","\n/** @internal */\nexport class WebGPUSnapshotRendering {\n    constructor(engine, renderingMode, bundleList, bundleListRenderTarget) {\n        this._record = false;\n        this._play = false;\n        this._mainPassBundleList = [];\n        this._enabled = false;\n        this._engine = engine;\n        this._mode = renderingMode;\n        this._bundleList = bundleList;\n        this._bundleListRenderTarget = bundleListRenderTarget;\n    }\n    get enabled() {\n        return this._enabled;\n    }\n    get play() {\n        return this._play;\n    }\n    get record() {\n        return this._record;\n    }\n    set enabled(activate) {\n        this._mainPassBundleList.length = 0;\n        this._record = this._enabled = activate;\n        this._play = false;\n        if (activate) {\n            this._modeSaved = this._mode;\n            this._mode = 0; // need to reset to standard for the recording pass to avoid some code being bypassed\n        }\n    }\n    get mode() {\n        return this._mode;\n    }\n    set mode(mode) {\n        if (this._record) {\n            this._modeSaved = mode;\n        }\n        else {\n            this._mode = mode;\n        }\n    }\n    endMainRenderPass() {\n        if (this._record) {\n            this._mainPassBundleList.push(this._bundleList.clone());\n        }\n    }\n    endRenderTargetPass(currentRenderPass, gpuWrapper) {\n        var _a, _b, _c, _d;\n        if (this._play) {\n            (_b = (_a = gpuWrapper._bundleLists) === null || _a === void 0 ? void 0 : _a[gpuWrapper._currentLayer]) === null || _b === void 0 ? void 0 : _b.run(currentRenderPass);\n            if (this._mode === 1) {\n                this._engine._reportDrawCall((_d = (_c = gpuWrapper._bundleLists) === null || _c === void 0 ? void 0 : _c[gpuWrapper._currentLayer]) === null || _d === void 0 ? void 0 : _d.numDrawCalls);\n            }\n        }\n        else if (this._record) {\n            if (!gpuWrapper._bundleLists) {\n                gpuWrapper._bundleLists = [];\n            }\n            gpuWrapper._bundleLists[gpuWrapper._currentLayer] = this._bundleListRenderTarget.clone();\n            gpuWrapper._bundleLists[gpuWrapper._currentLayer].run(currentRenderPass);\n            this._bundleListRenderTarget.reset();\n        }\n        else {\n            return false;\n        }\n        return true;\n    }\n    endFrame(mainRenderPass) {\n        if (this._record) {\n            this._mainPassBundleList.push(this._bundleList.clone());\n            this._record = false;\n            this._play = true;\n            this._mode = this._modeSaved;\n        }\n        if (mainRenderPass !== null && this._play) {\n            for (let i = 0; i < this._mainPassBundleList.length; ++i) {\n                this._mainPassBundleList[i].run(mainRenderPass);\n                if (this._mode === 1) {\n                    this._engine._reportDrawCall(this._mainPassBundleList[i].numDrawCalls);\n                }\n            }\n        }\n    }\n    reset() {\n        this.enabled = false;\n        this.enabled = true;\n    }\n}\n//# sourceMappingURL=webgpuSnapshotRendering.js.map","import { StencilStateComposer } from \"../../States/stencilStateComposer.js\";\n/**\n * @internal\n **/\nexport class WebGPUStencilStateComposer extends StencilStateComposer {\n    constructor(cache) {\n        super(false);\n        this._cache = cache;\n        this.reset();\n    }\n    get func() {\n        return this._func;\n    }\n    set func(value) {\n        if (this._func === value) {\n            return;\n        }\n        this._func = value;\n        this._cache.setStencilCompare(value);\n    }\n    get funcMask() {\n        return this._funcMask;\n    }\n    set funcMask(value) {\n        if (this._funcMask === value) {\n            return;\n        }\n        this._funcMask = value;\n        this._cache.setStencilReadMask(value);\n    }\n    get opStencilFail() {\n        return this._opStencilFail;\n    }\n    set opStencilFail(value) {\n        if (this._opStencilFail === value) {\n            return;\n        }\n        this._opStencilFail = value;\n        this._cache.setStencilFailOp(value);\n    }\n    get opDepthFail() {\n        return this._opDepthFail;\n    }\n    set opDepthFail(value) {\n        if (this._opDepthFail === value) {\n            return;\n        }\n        this._opDepthFail = value;\n        this._cache.setStencilDepthFailOp(value);\n    }\n    get opStencilDepthPass() {\n        return this._opStencilDepthPass;\n    }\n    set opStencilDepthPass(value) {\n        if (this._opStencilDepthPass === value) {\n            return;\n        }\n        this._opStencilDepthPass = value;\n        this._cache.setStencilPassOp(value);\n    }\n    get mask() {\n        return this._mask;\n    }\n    set mask(value) {\n        if (this._mask === value) {\n            return;\n        }\n        this._mask = value;\n        this._cache.setStencilWriteMask(value);\n    }\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        if (this._enabled === value) {\n            return;\n        }\n        this._enabled = value;\n        this._cache.setStencilEnabled(value);\n    }\n    reset() {\n        super.reset();\n        this._cache.resetStencilState();\n    }\n    apply() {\n        var _a;\n        const stencilMaterialEnabled = (_a = this.stencilMaterial) === null || _a === void 0 ? void 0 : _a.enabled;\n        this.enabled = stencilMaterialEnabled ? this.stencilMaterial.enabled : this.stencilGlobal.enabled;\n        if (!this.enabled) {\n            return;\n        }\n        this.func = stencilMaterialEnabled ? this.stencilMaterial.func : this.stencilGlobal.func;\n        this.funcRef = stencilMaterialEnabled ? this.stencilMaterial.funcRef : this.stencilGlobal.funcRef;\n        this.funcMask = stencilMaterialEnabled ? this.stencilMaterial.funcMask : this.stencilGlobal.funcMask;\n        this.opStencilFail = stencilMaterialEnabled ? this.stencilMaterial.opStencilFail : this.stencilGlobal.opStencilFail;\n        this.opDepthFail = stencilMaterialEnabled ? this.stencilMaterial.opDepthFail : this.stencilGlobal.opDepthFail;\n        this.opStencilDepthPass = stencilMaterialEnabled ? this.stencilMaterial.opStencilDepthPass : this.stencilGlobal.opStencilDepthPass;\n        this.mask = stencilMaterialEnabled ? this.stencilMaterial.mask : this.stencilGlobal.mask;\n    }\n}\n//# sourceMappingURL=webgpuStencilStateComposer.js.map","/* eslint-disable @typescript-eslint/naming-convention */\n// License for the mipmap generation code:\n//\n// Copyright 2020 Brandon Jones\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nimport * as WebGPUConstants from \"./webgpuConstants.js\";\nimport { Scalar } from \"../../Maths/math.scalar.js\";\n\nimport { InternalTextureSource } from \"../../Materials/Textures/internalTexture.js\";\nimport { WebGPUHardwareTexture } from \"./webgpuHardwareTexture.js\";\n// TODO WEBGPU improve mipmap generation by using compute shaders\n// TODO WEBGPU use WGSL instead of GLSL\nconst mipmapVertexSource = `\r\n    const vec2 pos[4] = vec2[4](vec2(-1.0f, 1.0f), vec2(1.0f, 1.0f), vec2(-1.0f, -1.0f), vec2(1.0f, -1.0f));\r\n    const vec2 tex[4] = vec2[4](vec2(0.0f, 0.0f), vec2(1.0f, 0.0f), vec2(0.0f, 1.0f), vec2(1.0f, 1.0f));\r\n\r\n    layout(location = 0) out vec2 vTex;\r\n\r\n    void main() {\r\n        vTex = tex[gl_VertexIndex];\r\n        gl_Position = vec4(pos[gl_VertexIndex], 0.0, 1.0);\r\n    }\r\n    `;\nconst mipmapFragmentSource = `\r\n    layout(set = 0, binding = 0) uniform sampler imgSampler;\r\n    layout(set = 0, binding = 1) uniform texture2D img;\r\n\r\n    layout(location = 0) in vec2 vTex;\r\n    layout(location = 0) out vec4 outColor;\r\n\r\n    void main() {\r\n        outColor = texture(sampler2D(img, imgSampler), vTex);\r\n    }\r\n    `;\nconst invertYPreMultiplyAlphaVertexSource = `\r\n    #extension GL_EXT_samplerless_texture_functions : enable\r\n\r\n    const vec2 pos[4] = vec2[4](vec2(-1.0f, 1.0f), vec2(1.0f, 1.0f), vec2(-1.0f, -1.0f), vec2(1.0f, -1.0f));\r\n    const vec2 tex[4] = vec2[4](vec2(0.0f, 0.0f), vec2(1.0f, 0.0f), vec2(0.0f, 1.0f), vec2(1.0f, 1.0f));\r\n\r\n    layout(set = 0, binding = 0) uniform texture2D img;\r\n\r\n    #ifdef INVERTY\r\n        layout(location = 0) out flat ivec2 vTextureSize;\r\n    #endif\r\n\r\n    void main() {\r\n        #ifdef INVERTY\r\n            vTextureSize = textureSize(img, 0);\r\n        #endif\r\n        gl_Position = vec4(pos[gl_VertexIndex], 0.0, 1.0);\r\n    }\r\n    `;\nconst invertYPreMultiplyAlphaFragmentSource = `\r\n    #extension GL_EXT_samplerless_texture_functions : enable\r\n\r\n    layout(set = 0, binding = 0) uniform texture2D img;\r\n\r\n    #ifdef INVERTY\r\n        layout(location = 0) in flat ivec2 vTextureSize;\r\n    #endif\r\n    layout(location = 0) out vec4 outColor;\r\n\r\n    void main() {\r\n    #ifdef INVERTY\r\n        vec4 color = texelFetch(img, ivec2(gl_FragCoord.x, vTextureSize.y - gl_FragCoord.y), 0);\r\n    #else\r\n        vec4 color = texelFetch(img, ivec2(gl_FragCoord.xy), 0);\r\n    #endif\r\n    #ifdef PREMULTIPLYALPHA\r\n        color.rgb *= color.a;\r\n    #endif\r\n        outColor = color;\r\n    }\r\n    `;\nconst invertYPreMultiplyAlphaWithOfstVertexSource = invertYPreMultiplyAlphaVertexSource;\nconst invertYPreMultiplyAlphaWithOfstFragmentSource = `\r\n    #extension GL_EXT_samplerless_texture_functions : enable\r\n\r\n    layout(set = 0, binding = 0) uniform texture2D img;\r\n    layout(set = 0, binding = 1) uniform Params {\r\n        float ofstX;\r\n        float ofstY;\r\n        float width;\r\n        float height;\r\n    };\r\n\r\n    #ifdef INVERTY\r\n        layout(location = 0) in flat ivec2 vTextureSize;\r\n    #endif\r\n    layout(location = 0) out vec4 outColor;\r\n\r\n    void main() {\r\n        if (gl_FragCoord.x < ofstX || gl_FragCoord.x >= ofstX + width) {\r\n            discard;\r\n        }\r\n        if (gl_FragCoord.y < ofstY || gl_FragCoord.y >= ofstY + height) {\r\n            discard;\r\n        }\r\n    #ifdef INVERTY\r\n        vec4 color = texelFetch(img, ivec2(gl_FragCoord.x, ofstY + height - (gl_FragCoord.y - ofstY)), 0);\r\n    #else\r\n        vec4 color = texelFetch(img, ivec2(gl_FragCoord.xy), 0);\r\n    #endif\r\n    #ifdef PREMULTIPLYALPHA\r\n        color.rgb *= color.a;\r\n    #endif\r\n        outColor = color;\r\n    }\r\n    `;\nconst clearVertexSource = `\r\n    const vec2 pos[4] = vec2[4](vec2(-1.0f, 1.0f), vec2(1.0f, 1.0f), vec2(-1.0f, -1.0f), vec2(1.0f, -1.0f));\r\n\r\n    void main() {\r\n        gl_Position = vec4(pos[gl_VertexIndex], 0.0, 1.0);\r\n    }\r\n    `;\nconst clearFragmentSource = `\r\n    layout(set = 0, binding = 0) uniform Uniforms {\r\n        uniform vec4 color;\r\n    };\r\n\r\n    layout(location = 0) out vec4 outColor;\r\n\r\n    void main() {\r\n        outColor = color;\r\n    }\r\n    `;\nconst copyVideoToTextureVertexSource = `\r\n    struct VertexOutput {\r\n        @builtin(position) Position : vec4<f32>,\r\n        @location(0) fragUV : vec2<f32>\r\n    }\r\n  \r\n    @vertex\r\n    fn main(\r\n        @builtin(vertex_index) VertexIndex : u32\r\n    ) -> VertexOutput {\r\n        var pos = array<vec2<f32>, 4>(\r\n            vec2(-1.0,  1.0),\r\n            vec2( 1.0,  1.0),\r\n            vec2(-1.0, -1.0),\r\n            vec2( 1.0, -1.0)\r\n        );\r\n        var tex = array<vec2<f32>, 4>(\r\n            vec2(0.0, 0.0),\r\n            vec2(1.0, 0.0),\r\n            vec2(0.0, 1.0),\r\n            vec2(1.0, 1.0)\r\n        );\r\n\r\n        var output: VertexOutput;\r\n\r\n        output.Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\r\n        output.fragUV = tex[VertexIndex];\r\n\r\n        return output;\r\n    }\r\n    `;\nconst copyVideoToTextureFragmentSource = `\r\n    @group(0) @binding(0) var videoSampler: sampler;\r\n    @group(0) @binding(1) var videoTexture: texture_external;\r\n\r\n    @fragment\r\n    fn main(\r\n        @location(0) fragUV: vec2<f32>\r\n    ) -> @location(0) vec4<f32> {\r\n        return textureSampleBaseClampToEdge(videoTexture, videoSampler, fragUV);\r\n    }\r\n    `;\nconst copyVideoToTextureInvertYFragmentSource = `\r\n    @group(0) @binding(0) var videoSampler: sampler;\r\n    @group(0) @binding(1) var videoTexture: texture_external;\r\n\r\n    @fragment\r\n    fn main(\r\n        @location(0) fragUV: vec2<f32>\r\n    ) -> @location(0) vec4<f32> {\r\n        return textureSampleBaseClampToEdge(videoTexture, videoSampler, vec2<f32>(fragUV.x, 1.0 - fragUV.y));\r\n    }\r\n    `;\nvar PipelineType;\n(function (PipelineType) {\n    PipelineType[PipelineType[\"MipMap\"] = 0] = \"MipMap\";\n    PipelineType[PipelineType[\"InvertYPremultiplyAlpha\"] = 1] = \"InvertYPremultiplyAlpha\";\n    PipelineType[PipelineType[\"Clear\"] = 2] = \"Clear\";\n    PipelineType[PipelineType[\"InvertYPremultiplyAlphaWithOfst\"] = 3] = \"InvertYPremultiplyAlphaWithOfst\";\n})(PipelineType || (PipelineType = {}));\nvar VideoPipelineType;\n(function (VideoPipelineType) {\n    VideoPipelineType[VideoPipelineType[\"DontInvertY\"] = 0] = \"DontInvertY\";\n    VideoPipelineType[VideoPipelineType[\"InvertY\"] = 1] = \"InvertY\";\n})(VideoPipelineType || (VideoPipelineType = {}));\nconst shadersForPipelineType = [\n    { vertex: mipmapVertexSource, fragment: mipmapFragmentSource },\n    { vertex: invertYPreMultiplyAlphaVertexSource, fragment: invertYPreMultiplyAlphaFragmentSource },\n    { vertex: clearVertexSource, fragment: clearFragmentSource },\n    { vertex: invertYPreMultiplyAlphaWithOfstVertexSource, fragment: invertYPreMultiplyAlphaWithOfstFragmentSource },\n];\n/**\n * Map a (renderable) texture format (GPUTextureFormat) to an index for fast lookup (in caches for eg)\n */\nexport const renderableTextureFormatToIndex = {\n    \"\": 0,\n    r8unorm: 1,\n    r8uint: 2,\n    r8sint: 3,\n    r16uint: 4,\n    r16sint: 5,\n    r16float: 6,\n    rg8unorm: 7,\n    rg8uint: 8,\n    rg8sint: 9,\n    r32uint: 10,\n    r32sint: 11,\n    r32float: 12,\n    rg16uint: 13,\n    rg16sint: 14,\n    rg16float: 15,\n    rgba8unorm: 16,\n    \"rgba8unorm-srgb\": 17,\n    rgba8uint: 18,\n    rgba8sint: 19,\n    bgra8unorm: 20,\n    \"bgra8unorm-srgb\": 21,\n    rgb10a2unorm: 22,\n    rg32uint: 23,\n    rg32sint: 24,\n    rg32float: 25,\n    rgba16uint: 26,\n    rgba16sint: 27,\n    rgba16float: 28,\n    rgba32uint: 29,\n    rgba32sint: 30,\n    rgba32float: 31,\n    stencil8: 32,\n    depth16unorm: 33,\n    depth24plus: 34,\n    \"depth24plus-stencil8\": 35,\n    depth32float: 36,\n    \"depth24unorm-stencil8\": 37,\n    \"depth32float-stencil8\": 38,\n};\n/** @internal */\nexport class WebGPUTextureHelper {\n    static ComputeNumMipmapLevels(width, height) {\n        return Scalar.ILog2(Math.max(width, height)) + 1;\n    }\n    //------------------------------------------------------------------------------\n    //                         Initialization / Helpers\n    //------------------------------------------------------------------------------\n    constructor(device, glslang, tintWASM, bufferManager) {\n        this._pipelines = {};\n        this._compiledShaders = [];\n        this._videoPipelines = {};\n        this._videoCompiledShaders = [];\n        this._deferredReleaseTextures = [];\n        this._device = device;\n        this._glslang = glslang;\n        this._tintWASM = tintWASM;\n        this._bufferManager = bufferManager;\n        this._mipmapSampler = device.createSampler({ minFilter: WebGPUConstants.FilterMode.Linear });\n        this._videoSampler = device.createSampler({ minFilter: WebGPUConstants.FilterMode.Linear });\n        this._ubCopyWithOfst = this._bufferManager.createBuffer(4 * 4, WebGPUConstants.BufferUsage.Uniform | WebGPUConstants.BufferUsage.CopyDst).underlyingResource;\n        this._getPipeline(WebGPUConstants.TextureFormat.RGBA8Unorm);\n        this._getVideoPipeline(WebGPUConstants.TextureFormat.RGBA8Unorm);\n    }\n    _getPipeline(format, type = PipelineType.MipMap, params) {\n        const index = type === PipelineType.MipMap\n            ? 1 << 0\n            : type === PipelineType.InvertYPremultiplyAlpha\n                ? ((params.invertY ? 1 : 0) << 1) + ((params.premultiplyAlpha ? 1 : 0) << 2)\n                : type === PipelineType.Clear\n                    ? 1 << 3\n                    : type === PipelineType.InvertYPremultiplyAlphaWithOfst\n                        ? ((params.invertY ? 1 : 0) << 4) + ((params.premultiplyAlpha ? 1 : 0) << 5)\n                        : 0;\n        if (!this._pipelines[format]) {\n            this._pipelines[format] = [];\n        }\n        let pipelineAndBGL = this._pipelines[format][index];\n        if (!pipelineAndBGL) {\n            let defines = \"#version 450\\r\\n\";\n            if (type === PipelineType.InvertYPremultiplyAlpha || type === PipelineType.InvertYPremultiplyAlphaWithOfst) {\n                if (params.invertY) {\n                    defines += \"#define INVERTY\\r\\n\";\n                }\n                if (params.premultiplyAlpha) {\n                    defines += \"#define PREMULTIPLYALPHA\\r\\n\";\n                }\n            }\n            let modules = this._compiledShaders[index];\n            if (!modules) {\n                let vertexCode = this._glslang.compileGLSL(defines + shadersForPipelineType[type].vertex, \"vertex\");\n                let fragmentCode = this._glslang.compileGLSL(defines + shadersForPipelineType[type].fragment, \"fragment\");\n                if (this._tintWASM) {\n                    vertexCode = this._tintWASM.convertSpirV2WGSL(vertexCode);\n                    fragmentCode = this._tintWASM.convertSpirV2WGSL(fragmentCode);\n                }\n                const vertexModule = this._device.createShaderModule({\n                    code: vertexCode,\n                });\n                const fragmentModule = this._device.createShaderModule({\n                    code: fragmentCode,\n                });\n                modules = this._compiledShaders[index] = [vertexModule, fragmentModule];\n            }\n            const pipeline = this._device.createRenderPipeline({\n                layout: WebGPUConstants.AutoLayoutMode.Auto,\n                vertex: {\n                    module: modules[0],\n                    entryPoint: \"main\",\n                },\n                fragment: {\n                    module: modules[1],\n                    entryPoint: \"main\",\n                    targets: [\n                        {\n                            format,\n                        },\n                    ],\n                },\n                primitive: {\n                    topology: WebGPUConstants.PrimitiveTopology.TriangleStrip,\n                    stripIndexFormat: WebGPUConstants.IndexFormat.Uint16,\n                },\n            });\n            pipelineAndBGL = this._pipelines[format][index] = [pipeline, pipeline.getBindGroupLayout(0)];\n        }\n        return pipelineAndBGL;\n    }\n    _getVideoPipeline(format, type = VideoPipelineType.DontInvertY) {\n        const index = type === VideoPipelineType.InvertY ? 1 << 0 : 0;\n        if (!this._videoPipelines[format]) {\n            this._videoPipelines[format] = [];\n        }\n        let pipelineAndBGL = this._videoPipelines[format][index];\n        if (!pipelineAndBGL) {\n            let modules = this._videoCompiledShaders[index];\n            if (!modules) {\n                const vertexModule = this._device.createShaderModule({\n                    code: copyVideoToTextureVertexSource,\n                });\n                const fragmentModule = this._device.createShaderModule({\n                    code: index === 0 ? copyVideoToTextureFragmentSource : copyVideoToTextureInvertYFragmentSource,\n                });\n                modules = this._videoCompiledShaders[index] = [vertexModule, fragmentModule];\n            }\n            const pipeline = this._device.createRenderPipeline({\n                label: `CopyVideoToTexture_${format}_${index === 0 ? \"DontInvertY\" : \"InvertY\"}`,\n                layout: WebGPUConstants.AutoLayoutMode.Auto,\n                vertex: {\n                    module: modules[0],\n                    entryPoint: \"main\",\n                },\n                fragment: {\n                    module: modules[1],\n                    entryPoint: \"main\",\n                    targets: [\n                        {\n                            format,\n                        },\n                    ],\n                },\n                primitive: {\n                    topology: WebGPUConstants.PrimitiveTopology.TriangleStrip,\n                    stripIndexFormat: WebGPUConstants.IndexFormat.Uint16,\n                },\n            });\n            pipelineAndBGL = this._videoPipelines[format][index] = [pipeline, pipeline.getBindGroupLayout(0)];\n        }\n        return pipelineAndBGL;\n    }\n    static _GetTextureTypeFromFormat(format) {\n        switch (format) {\n            // One Component = 8 bits\n            case WebGPUConstants.TextureFormat.R8Unorm:\n            case WebGPUConstants.TextureFormat.R8Snorm:\n            case WebGPUConstants.TextureFormat.R8Uint:\n            case WebGPUConstants.TextureFormat.R8Sint:\n            case WebGPUConstants.TextureFormat.RG8Unorm:\n            case WebGPUConstants.TextureFormat.RG8Snorm:\n            case WebGPUConstants.TextureFormat.RG8Uint:\n            case WebGPUConstants.TextureFormat.RG8Sint:\n            case WebGPUConstants.TextureFormat.RGBA8Unorm:\n            case WebGPUConstants.TextureFormat.RGBA8UnormSRGB:\n            case WebGPUConstants.TextureFormat.RGBA8Snorm:\n            case WebGPUConstants.TextureFormat.RGBA8Uint:\n            case WebGPUConstants.TextureFormat.RGBA8Sint:\n            case WebGPUConstants.TextureFormat.BGRA8Unorm:\n            case WebGPUConstants.TextureFormat.BGRA8UnormSRGB:\n            case WebGPUConstants.TextureFormat.RGB10A2Unorm: // composite format - let's say it's byte...\n            case WebGPUConstants.TextureFormat.RGB9E5UFloat: // composite format - let's say it's byte...\n            case WebGPUConstants.TextureFormat.RG11B10UFloat: // composite format - let's say it's byte...\n            case WebGPUConstants.TextureFormat.Depth24UnormStencil8: // composite format - let's say it's byte...\n            case WebGPUConstants.TextureFormat.Depth32FloatStencil8: // composite format - let's say it's byte...\n            case WebGPUConstants.TextureFormat.BC7RGBAUnorm:\n            case WebGPUConstants.TextureFormat.BC7RGBAUnormSRGB:\n            case WebGPUConstants.TextureFormat.BC6HRGBUFloat:\n            case WebGPUConstants.TextureFormat.BC6HRGBFloat:\n            case WebGPUConstants.TextureFormat.BC5RGUnorm:\n            case WebGPUConstants.TextureFormat.BC5RGSnorm:\n            case WebGPUConstants.TextureFormat.BC3RGBAUnorm:\n            case WebGPUConstants.TextureFormat.BC3RGBAUnormSRGB:\n            case WebGPUConstants.TextureFormat.BC2RGBAUnorm:\n            case WebGPUConstants.TextureFormat.BC2RGBAUnormSRGB:\n            case WebGPUConstants.TextureFormat.BC4RUnorm:\n            case WebGPUConstants.TextureFormat.BC4RSnorm:\n            case WebGPUConstants.TextureFormat.BC1RGBAUnorm:\n            case WebGPUConstants.TextureFormat.BC1RGBAUnormSRGB:\n            case WebGPUConstants.TextureFormat.ETC2RGB8Unorm:\n            case WebGPUConstants.TextureFormat.ETC2RGB8UnormSRGB:\n            case WebGPUConstants.TextureFormat.ETC2RGB8A1Unorm:\n            case WebGPUConstants.TextureFormat.ETC2RGB8A1UnormSRGB:\n            case WebGPUConstants.TextureFormat.ETC2RGBA8Unorm:\n            case WebGPUConstants.TextureFormat.ETC2RGBA8UnormSRGB:\n            case WebGPUConstants.TextureFormat.EACR11Unorm:\n            case WebGPUConstants.TextureFormat.EACR11Snorm:\n            case WebGPUConstants.TextureFormat.EACRG11Unorm:\n            case WebGPUConstants.TextureFormat.EACRG11Snorm:\n            case WebGPUConstants.TextureFormat.ASTC4x4Unorm:\n            case WebGPUConstants.TextureFormat.ASTC4x4UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC5x4Unorm:\n            case WebGPUConstants.TextureFormat.ASTC5x4UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC5x5Unorm:\n            case WebGPUConstants.TextureFormat.ASTC5x5UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC6x5Unorm:\n            case WebGPUConstants.TextureFormat.ASTC6x5UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC6x6Unorm:\n            case WebGPUConstants.TextureFormat.ASTC6x6UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC8x5Unorm:\n            case WebGPUConstants.TextureFormat.ASTC8x5UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC8x6Unorm:\n            case WebGPUConstants.TextureFormat.ASTC8x6UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC8x8Unorm:\n            case WebGPUConstants.TextureFormat.ASTC8x8UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC10x5Unorm:\n            case WebGPUConstants.TextureFormat.ASTC10x5UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC10x6Unorm:\n            case WebGPUConstants.TextureFormat.ASTC10x6UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC10x8Unorm:\n            case WebGPUConstants.TextureFormat.ASTC10x8UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC10x10Unorm:\n            case WebGPUConstants.TextureFormat.ASTC10x10UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC12x10Unorm:\n            case WebGPUConstants.TextureFormat.ASTC12x10UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC12x12Unorm:\n            case WebGPUConstants.TextureFormat.ASTC12x12UnormSRGB:\n                return 0;\n            // One component = 16 bits\n            case WebGPUConstants.TextureFormat.R16Uint:\n            case WebGPUConstants.TextureFormat.R16Sint:\n            case WebGPUConstants.TextureFormat.RG16Uint:\n            case WebGPUConstants.TextureFormat.RG16Sint:\n            case WebGPUConstants.TextureFormat.RGBA16Uint:\n            case WebGPUConstants.TextureFormat.RGBA16Sint:\n            case WebGPUConstants.TextureFormat.Depth16Unorm:\n                return 5;\n            case WebGPUConstants.TextureFormat.R16Float:\n            case WebGPUConstants.TextureFormat.RG16Float:\n            case WebGPUConstants.TextureFormat.RGBA16Float:\n                return 2;\n            // One component = 32 bits\n            case WebGPUConstants.TextureFormat.R32Uint:\n            case WebGPUConstants.TextureFormat.R32Sint:\n            case WebGPUConstants.TextureFormat.RG32Uint:\n            case WebGPUConstants.TextureFormat.RG32Sint:\n            case WebGPUConstants.TextureFormat.RGBA32Uint:\n            case WebGPUConstants.TextureFormat.RGBA32Sint:\n                return 7;\n            case WebGPUConstants.TextureFormat.R32Float:\n            case WebGPUConstants.TextureFormat.RG32Float:\n            case WebGPUConstants.TextureFormat.RGBA32Float:\n            case WebGPUConstants.TextureFormat.Depth32Float:\n                return 1;\n            case WebGPUConstants.TextureFormat.Stencil8:\n                throw \"No fixed size for Stencil8 format!\";\n            case WebGPUConstants.TextureFormat.Depth24Plus:\n                throw \"No fixed size for Depth24Plus format!\";\n            case WebGPUConstants.TextureFormat.Depth24PlusStencil8:\n                throw \"No fixed size for Depth24PlusStencil8 format!\";\n        }\n        return 0;\n    }\n    static _GetBlockInformationFromFormat(format) {\n        switch (format) {\n            // 8 bits formats\n            case WebGPUConstants.TextureFormat.R8Unorm:\n            case WebGPUConstants.TextureFormat.R8Snorm:\n            case WebGPUConstants.TextureFormat.R8Uint:\n            case WebGPUConstants.TextureFormat.R8Sint:\n                return { width: 1, height: 1, length: 1 };\n            // 16 bits formats\n            case WebGPUConstants.TextureFormat.R16Uint:\n            case WebGPUConstants.TextureFormat.R16Sint:\n            case WebGPUConstants.TextureFormat.R16Float:\n            case WebGPUConstants.TextureFormat.RG8Unorm:\n            case WebGPUConstants.TextureFormat.RG8Snorm:\n            case WebGPUConstants.TextureFormat.RG8Uint:\n            case WebGPUConstants.TextureFormat.RG8Sint:\n                return { width: 1, height: 1, length: 2 };\n            // 32 bits formats\n            case WebGPUConstants.TextureFormat.R32Uint:\n            case WebGPUConstants.TextureFormat.R32Sint:\n            case WebGPUConstants.TextureFormat.R32Float:\n            case WebGPUConstants.TextureFormat.RG16Uint:\n            case WebGPUConstants.TextureFormat.RG16Sint:\n            case WebGPUConstants.TextureFormat.RG16Float:\n            case WebGPUConstants.TextureFormat.RGBA8Unorm:\n            case WebGPUConstants.TextureFormat.RGBA8UnormSRGB:\n            case WebGPUConstants.TextureFormat.RGBA8Snorm:\n            case WebGPUConstants.TextureFormat.RGBA8Uint:\n            case WebGPUConstants.TextureFormat.RGBA8Sint:\n            case WebGPUConstants.TextureFormat.BGRA8Unorm:\n            case WebGPUConstants.TextureFormat.BGRA8UnormSRGB:\n            case WebGPUConstants.TextureFormat.RGB9E5UFloat:\n            case WebGPUConstants.TextureFormat.RGB10A2Unorm:\n            case WebGPUConstants.TextureFormat.RG11B10UFloat:\n                return { width: 1, height: 1, length: 4 };\n            // 64 bits formats\n            case WebGPUConstants.TextureFormat.RG32Uint:\n            case WebGPUConstants.TextureFormat.RG32Sint:\n            case WebGPUConstants.TextureFormat.RG32Float:\n            case WebGPUConstants.TextureFormat.RGBA16Uint:\n            case WebGPUConstants.TextureFormat.RGBA16Sint:\n            case WebGPUConstants.TextureFormat.RGBA16Float:\n                return { width: 1, height: 1, length: 8 };\n            // 128 bits formats\n            case WebGPUConstants.TextureFormat.RGBA32Uint:\n            case WebGPUConstants.TextureFormat.RGBA32Sint:\n            case WebGPUConstants.TextureFormat.RGBA32Float:\n                return { width: 1, height: 1, length: 16 };\n            // Depth and stencil formats\n            case WebGPUConstants.TextureFormat.Stencil8:\n                throw \"No fixed size for Stencil8 format!\";\n            case WebGPUConstants.TextureFormat.Depth16Unorm:\n                return { width: 1, height: 1, length: 2 };\n            case WebGPUConstants.TextureFormat.Depth24Plus:\n                throw \"No fixed size for Depth24Plus format!\";\n            case WebGPUConstants.TextureFormat.Depth24PlusStencil8:\n                throw \"No fixed size for Depth24PlusStencil8 format!\";\n            case WebGPUConstants.TextureFormat.Depth32Float:\n                return { width: 1, height: 1, length: 4 };\n            case WebGPUConstants.TextureFormat.Depth24UnormStencil8:\n                return { width: 1, height: 1, length: 4 };\n            case WebGPUConstants.TextureFormat.Depth32FloatStencil8:\n                return { width: 1, height: 1, length: 5 };\n            // BC compressed formats usable if \"texture-compression-bc\" is both\n            // supported by the device/user agent and enabled in requestDevice.\n            case WebGPUConstants.TextureFormat.BC7RGBAUnorm:\n            case WebGPUConstants.TextureFormat.BC7RGBAUnormSRGB:\n            case WebGPUConstants.TextureFormat.BC6HRGBUFloat:\n            case WebGPUConstants.TextureFormat.BC6HRGBFloat:\n            case WebGPUConstants.TextureFormat.BC5RGUnorm:\n            case WebGPUConstants.TextureFormat.BC5RGSnorm:\n            case WebGPUConstants.TextureFormat.BC3RGBAUnorm:\n            case WebGPUConstants.TextureFormat.BC3RGBAUnormSRGB:\n            case WebGPUConstants.TextureFormat.BC2RGBAUnorm:\n            case WebGPUConstants.TextureFormat.BC2RGBAUnormSRGB:\n                return { width: 4, height: 4, length: 16 };\n            case WebGPUConstants.TextureFormat.BC4RUnorm:\n            case WebGPUConstants.TextureFormat.BC4RSnorm:\n            case WebGPUConstants.TextureFormat.BC1RGBAUnorm:\n            case WebGPUConstants.TextureFormat.BC1RGBAUnormSRGB:\n                return { width: 4, height: 4, length: 8 };\n            // ETC2 compressed formats usable if \"texture-compression-etc2\" is both\n            // supported by the device/user agent and enabled in requestDevice.\n            case WebGPUConstants.TextureFormat.ETC2RGB8Unorm:\n            case WebGPUConstants.TextureFormat.ETC2RGB8UnormSRGB:\n            case WebGPUConstants.TextureFormat.ETC2RGB8A1Unorm:\n            case WebGPUConstants.TextureFormat.ETC2RGB8A1UnormSRGB:\n            case WebGPUConstants.TextureFormat.EACR11Unorm:\n            case WebGPUConstants.TextureFormat.EACR11Snorm:\n                return { width: 4, height: 4, length: 8 };\n            case WebGPUConstants.TextureFormat.ETC2RGBA8Unorm:\n            case WebGPUConstants.TextureFormat.ETC2RGBA8UnormSRGB:\n            case WebGPUConstants.TextureFormat.EACRG11Unorm:\n            case WebGPUConstants.TextureFormat.EACRG11Snorm:\n                return { width: 4, height: 4, length: 16 };\n            // ASTC compressed formats usable if \"texture-compression-astc\" is both\n            // supported by the device/user agent and enabled in requestDevice.\n            case WebGPUConstants.TextureFormat.ASTC4x4Unorm:\n            case WebGPUConstants.TextureFormat.ASTC4x4UnormSRGB:\n                return { width: 4, height: 4, length: 16 };\n            case WebGPUConstants.TextureFormat.ASTC5x4Unorm:\n            case WebGPUConstants.TextureFormat.ASTC5x4UnormSRGB:\n                return { width: 5, height: 4, length: 16 };\n            case WebGPUConstants.TextureFormat.ASTC5x5Unorm:\n            case WebGPUConstants.TextureFormat.ASTC5x5UnormSRGB:\n                return { width: 5, height: 5, length: 16 };\n            case WebGPUConstants.TextureFormat.ASTC6x5Unorm:\n            case WebGPUConstants.TextureFormat.ASTC6x5UnormSRGB:\n                return { width: 6, height: 5, length: 16 };\n            case WebGPUConstants.TextureFormat.ASTC6x6Unorm:\n            case WebGPUConstants.TextureFormat.ASTC6x6UnormSRGB:\n                return { width: 6, height: 6, length: 16 };\n            case WebGPUConstants.TextureFormat.ASTC8x5Unorm:\n            case WebGPUConstants.TextureFormat.ASTC8x5UnormSRGB:\n                return { width: 8, height: 5, length: 16 };\n            case WebGPUConstants.TextureFormat.ASTC8x6Unorm:\n            case WebGPUConstants.TextureFormat.ASTC8x6UnormSRGB:\n                return { width: 8, height: 6, length: 16 };\n            case WebGPUConstants.TextureFormat.ASTC8x8Unorm:\n            case WebGPUConstants.TextureFormat.ASTC8x8UnormSRGB:\n                return { width: 8, height: 8, length: 16 };\n            case WebGPUConstants.TextureFormat.ASTC10x5Unorm:\n            case WebGPUConstants.TextureFormat.ASTC10x5UnormSRGB:\n                return { width: 10, height: 5, length: 16 };\n            case WebGPUConstants.TextureFormat.ASTC10x6Unorm:\n            case WebGPUConstants.TextureFormat.ASTC10x6UnormSRGB:\n                return { width: 10, height: 6, length: 16 };\n            case WebGPUConstants.TextureFormat.ASTC10x8Unorm:\n            case WebGPUConstants.TextureFormat.ASTC10x8UnormSRGB:\n                return { width: 10, height: 8, length: 16 };\n            case WebGPUConstants.TextureFormat.ASTC10x10Unorm:\n            case WebGPUConstants.TextureFormat.ASTC10x10UnormSRGB:\n                return { width: 10, height: 10, length: 16 };\n            case WebGPUConstants.TextureFormat.ASTC12x10Unorm:\n            case WebGPUConstants.TextureFormat.ASTC12x10UnormSRGB:\n                return { width: 12, height: 10, length: 16 };\n            case WebGPUConstants.TextureFormat.ASTC12x12Unorm:\n            case WebGPUConstants.TextureFormat.ASTC12x12UnormSRGB:\n                return { width: 12, height: 12, length: 16 };\n        }\n        return { width: 1, height: 1, length: 4 };\n    }\n    static _IsHardwareTexture(texture) {\n        return !!texture.release;\n    }\n    static _IsInternalTexture(texture) {\n        return !!texture.dispose;\n    }\n    static IsImageBitmap(imageBitmap) {\n        return imageBitmap.close !== undefined;\n    }\n    static IsImageBitmapArray(imageBitmap) {\n        return Array.isArray(imageBitmap) && imageBitmap[0].close !== undefined;\n    }\n    setCommandEncoder(encoder) {\n        this._commandEncoderForCreation = encoder;\n    }\n    static IsCompressedFormat(format) {\n        switch (format) {\n            case WebGPUConstants.TextureFormat.BC7RGBAUnormSRGB:\n            case WebGPUConstants.TextureFormat.BC7RGBAUnorm:\n            case WebGPUConstants.TextureFormat.BC6HRGBFloat:\n            case WebGPUConstants.TextureFormat.BC6HRGBUFloat:\n            case WebGPUConstants.TextureFormat.BC5RGSnorm:\n            case WebGPUConstants.TextureFormat.BC5RGUnorm:\n            case WebGPUConstants.TextureFormat.BC4RSnorm:\n            case WebGPUConstants.TextureFormat.BC4RUnorm:\n            case WebGPUConstants.TextureFormat.BC3RGBAUnormSRGB:\n            case WebGPUConstants.TextureFormat.BC3RGBAUnorm:\n            case WebGPUConstants.TextureFormat.BC2RGBAUnormSRGB:\n            case WebGPUConstants.TextureFormat.BC2RGBAUnorm:\n            case WebGPUConstants.TextureFormat.BC1RGBAUnormSRGB:\n            case WebGPUConstants.TextureFormat.BC1RGBAUnorm:\n            case WebGPUConstants.TextureFormat.ETC2RGB8Unorm:\n            case WebGPUConstants.TextureFormat.ETC2RGB8UnormSRGB:\n            case WebGPUConstants.TextureFormat.ETC2RGB8A1Unorm:\n            case WebGPUConstants.TextureFormat.ETC2RGB8A1UnormSRGB:\n            case WebGPUConstants.TextureFormat.ETC2RGBA8Unorm:\n            case WebGPUConstants.TextureFormat.ETC2RGBA8UnormSRGB:\n            case WebGPUConstants.TextureFormat.EACR11Unorm:\n            case WebGPUConstants.TextureFormat.EACR11Snorm:\n            case WebGPUConstants.TextureFormat.EACRG11Unorm:\n            case WebGPUConstants.TextureFormat.EACRG11Snorm:\n            case WebGPUConstants.TextureFormat.ASTC4x4Unorm:\n            case WebGPUConstants.TextureFormat.ASTC4x4UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC5x4Unorm:\n            case WebGPUConstants.TextureFormat.ASTC5x4UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC5x5Unorm:\n            case WebGPUConstants.TextureFormat.ASTC5x5UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC6x5Unorm:\n            case WebGPUConstants.TextureFormat.ASTC6x5UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC6x6Unorm:\n            case WebGPUConstants.TextureFormat.ASTC6x6UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC8x5Unorm:\n            case WebGPUConstants.TextureFormat.ASTC8x5UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC8x6Unorm:\n            case WebGPUConstants.TextureFormat.ASTC8x6UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC8x8Unorm:\n            case WebGPUConstants.TextureFormat.ASTC8x8UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC10x5Unorm:\n            case WebGPUConstants.TextureFormat.ASTC10x5UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC10x6Unorm:\n            case WebGPUConstants.TextureFormat.ASTC10x6UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC10x8Unorm:\n            case WebGPUConstants.TextureFormat.ASTC10x8UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC10x10Unorm:\n            case WebGPUConstants.TextureFormat.ASTC10x10UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC12x10Unorm:\n            case WebGPUConstants.TextureFormat.ASTC12x10UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC12x12Unorm:\n            case WebGPUConstants.TextureFormat.ASTC12x12UnormSRGB:\n                return true;\n        }\n        return false;\n    }\n    static GetWebGPUTextureFormat(type, format, useSRGBBuffer = false) {\n        switch (format) {\n            case 15:\n                return WebGPUConstants.TextureFormat.Depth16Unorm;\n            case 16:\n                return WebGPUConstants.TextureFormat.Depth24Plus;\n            case 13:\n                return WebGPUConstants.TextureFormat.Depth24PlusStencil8;\n            case 14:\n                return WebGPUConstants.TextureFormat.Depth32Float;\n            case 17:\n                return WebGPUConstants.TextureFormat.Depth24UnormStencil8;\n            case 18:\n                return WebGPUConstants.TextureFormat.Depth32FloatStencil8;\n            case 36492:\n                return useSRGBBuffer ? WebGPUConstants.TextureFormat.BC7RGBAUnormSRGB : WebGPUConstants.TextureFormat.BC7RGBAUnorm;\n            case 36495:\n                return WebGPUConstants.TextureFormat.BC6HRGBUFloat;\n            case 36494:\n                return WebGPUConstants.TextureFormat.BC6HRGBFloat;\n            case 33779:\n                return useSRGBBuffer ? WebGPUConstants.TextureFormat.BC3RGBAUnormSRGB : WebGPUConstants.TextureFormat.BC3RGBAUnorm;\n            case 33778:\n                return useSRGBBuffer ? WebGPUConstants.TextureFormat.BC2RGBAUnormSRGB : WebGPUConstants.TextureFormat.BC2RGBAUnorm;\n            case 33777:\n            case 33776:\n                return useSRGBBuffer ? WebGPUConstants.TextureFormat.BC1RGBAUnormSRGB : WebGPUConstants.TextureFormat.BC1RGBAUnorm;\n            case 37808:\n                return useSRGBBuffer ? WebGPUConstants.TextureFormat.ASTC4x4UnormSRGB : WebGPUConstants.TextureFormat.ASTC4x4Unorm;\n            case 36196:\n            case 37492:\n                return useSRGBBuffer ? WebGPUConstants.TextureFormat.ETC2RGB8UnormSRGB : WebGPUConstants.TextureFormat.ETC2RGB8Unorm;\n            case 37496:\n                return useSRGBBuffer ? WebGPUConstants.TextureFormat.ETC2RGBA8UnormSRGB : WebGPUConstants.TextureFormat.ETC2RGBA8Unorm;\n        }\n        switch (type) {\n            case 3:\n                switch (format) {\n                    case 6:\n                        return WebGPUConstants.TextureFormat.R8Snorm;\n                    case 7:\n                        return WebGPUConstants.TextureFormat.RG8Snorm;\n                    case 4:\n                        throw \"RGB format not supported in WebGPU\";\n                    case 8:\n                        return WebGPUConstants.TextureFormat.R8Sint;\n                    case 9:\n                        return WebGPUConstants.TextureFormat.RG8Sint;\n                    case 10:\n                        throw \"RGB_INTEGER format not supported in WebGPU\";\n                    case 11:\n                        return WebGPUConstants.TextureFormat.RGBA8Sint;\n                    default:\n                        return WebGPUConstants.TextureFormat.RGBA8Snorm;\n                }\n            case 0:\n                switch (format) {\n                    case 6:\n                        return WebGPUConstants.TextureFormat.R8Unorm;\n                    case 7:\n                        return WebGPUConstants.TextureFormat.RG8Unorm;\n                    case 4:\n                        throw \"TEXTUREFORMAT_RGB format not supported in WebGPU\";\n                    case 5:\n                        return useSRGBBuffer ? WebGPUConstants.TextureFormat.RGBA8UnormSRGB : WebGPUConstants.TextureFormat.RGBA8Unorm;\n                    case 12:\n                        return useSRGBBuffer ? WebGPUConstants.TextureFormat.BGRA8UnormSRGB : WebGPUConstants.TextureFormat.BGRA8Unorm;\n                    case 8:\n                        return WebGPUConstants.TextureFormat.R8Uint;\n                    case 9:\n                        return WebGPUConstants.TextureFormat.RG8Uint;\n                    case 10:\n                        throw \"RGB_INTEGER format not supported in WebGPU\";\n                    case 11:\n                        return WebGPUConstants.TextureFormat.RGBA8Uint;\n                    case 0:\n                        throw \"TEXTUREFORMAT_ALPHA format not supported in WebGPU\";\n                    case 1:\n                        throw \"TEXTUREFORMAT_LUMINANCE format not supported in WebGPU\";\n                    case 2:\n                        throw \"TEXTUREFORMAT_LUMINANCE_ALPHA format not supported in WebGPU\";\n                    default:\n                        return WebGPUConstants.TextureFormat.RGBA8Unorm;\n                }\n            case 4:\n                switch (format) {\n                    case 8:\n                        return WebGPUConstants.TextureFormat.R16Sint;\n                    case 9:\n                        return WebGPUConstants.TextureFormat.RG16Sint;\n                    case 10:\n                        throw \"TEXTUREFORMAT_RGB_INTEGER format not supported in WebGPU\";\n                    case 11:\n                        return WebGPUConstants.TextureFormat.RGBA16Sint;\n                    default:\n                        return WebGPUConstants.TextureFormat.RGBA16Sint;\n                }\n            case 5:\n                switch (format) {\n                    case 8:\n                        return WebGPUConstants.TextureFormat.R16Uint;\n                    case 9:\n                        return WebGPUConstants.TextureFormat.RG16Uint;\n                    case 10:\n                        throw \"TEXTUREFORMAT_RGB_INTEGER format not supported in WebGPU\";\n                    case 11:\n                        return WebGPUConstants.TextureFormat.RGBA16Uint;\n                    default:\n                        return WebGPUConstants.TextureFormat.RGBA16Uint;\n                }\n            case 6:\n                switch (format) {\n                    case 8:\n                        return WebGPUConstants.TextureFormat.R32Sint;\n                    case 9:\n                        return WebGPUConstants.TextureFormat.RG32Sint;\n                    case 10:\n                        throw \"TEXTUREFORMAT_RGB_INTEGER format not supported in WebGPU\";\n                    case 11:\n                        return WebGPUConstants.TextureFormat.RGBA32Sint;\n                    default:\n                        return WebGPUConstants.TextureFormat.RGBA32Sint;\n                }\n            case 7: // Refers to UNSIGNED_INT\n                switch (format) {\n                    case 8:\n                        return WebGPUConstants.TextureFormat.R32Uint;\n                    case 9:\n                        return WebGPUConstants.TextureFormat.RG32Uint;\n                    case 10:\n                        throw \"TEXTUREFORMAT_RGB_INTEGER format not supported in WebGPU\";\n                    case 11:\n                        return WebGPUConstants.TextureFormat.RGBA32Uint;\n                    default:\n                        return WebGPUConstants.TextureFormat.RGBA32Uint;\n                }\n            case 1:\n                switch (format) {\n                    case 6:\n                        return WebGPUConstants.TextureFormat.R32Float; // By default. Other possibility is R16Float.\n                    case 7:\n                        return WebGPUConstants.TextureFormat.RG32Float; // By default. Other possibility is RG16Float.\n                    case 4:\n                        throw \"TEXTUREFORMAT_RGB format not supported in WebGPU\";\n                    case 5:\n                        return WebGPUConstants.TextureFormat.RGBA32Float; // By default. Other possibility is RGBA16Float.\n                    default:\n                        return WebGPUConstants.TextureFormat.RGBA32Float;\n                }\n            case 2:\n                switch (format) {\n                    case 6:\n                        return WebGPUConstants.TextureFormat.R16Float;\n                    case 7:\n                        return WebGPUConstants.TextureFormat.RG16Float;\n                    case 4:\n                        throw \"TEXTUREFORMAT_RGB format not supported in WebGPU\";\n                    case 5:\n                        return WebGPUConstants.TextureFormat.RGBA16Float;\n                    default:\n                        return WebGPUConstants.TextureFormat.RGBA16Float;\n                }\n            case 10:\n                throw \"TEXTURETYPE_UNSIGNED_SHORT_5_6_5 format not supported in WebGPU\";\n            case 13:\n                throw \"TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV format not supported in WebGPU\";\n            case 14:\n                throw \"TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV format not supported in WebGPU\";\n            case 8:\n                throw \"TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4 format not supported in WebGPU\";\n            case 9:\n                throw \"TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1 format not supported in WebGPU\";\n            case 11:\n                switch (format) {\n                    case 5:\n                        return WebGPUConstants.TextureFormat.RGB10A2Unorm;\n                    case 11:\n                        throw \"TEXTUREFORMAT_RGBA_INTEGER format not supported in WebGPU when type is TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV\";\n                    default:\n                        return WebGPUConstants.TextureFormat.RGB10A2Unorm;\n                }\n        }\n        return useSRGBBuffer ? WebGPUConstants.TextureFormat.RGBA8UnormSRGB : WebGPUConstants.TextureFormat.RGBA8Unorm;\n    }\n    static GetNumChannelsFromWebGPUTextureFormat(format) {\n        switch (format) {\n            case WebGPUConstants.TextureFormat.R8Unorm:\n            case WebGPUConstants.TextureFormat.R8Snorm:\n            case WebGPUConstants.TextureFormat.R8Uint:\n            case WebGPUConstants.TextureFormat.R8Sint:\n            case WebGPUConstants.TextureFormat.BC4RUnorm:\n            case WebGPUConstants.TextureFormat.BC4RSnorm:\n            case WebGPUConstants.TextureFormat.R16Uint:\n            case WebGPUConstants.TextureFormat.R16Sint:\n            case WebGPUConstants.TextureFormat.Depth16Unorm:\n            case WebGPUConstants.TextureFormat.R16Float:\n            case WebGPUConstants.TextureFormat.R32Uint:\n            case WebGPUConstants.TextureFormat.R32Sint:\n            case WebGPUConstants.TextureFormat.R32Float:\n            case WebGPUConstants.TextureFormat.Depth32Float:\n            case WebGPUConstants.TextureFormat.Stencil8:\n            case WebGPUConstants.TextureFormat.Depth24Plus:\n            case WebGPUConstants.TextureFormat.EACR11Unorm:\n            case WebGPUConstants.TextureFormat.EACR11Snorm:\n                return 1;\n            case WebGPUConstants.TextureFormat.RG8Unorm:\n            case WebGPUConstants.TextureFormat.RG8Snorm:\n            case WebGPUConstants.TextureFormat.RG8Uint:\n            case WebGPUConstants.TextureFormat.RG8Sint:\n            case WebGPUConstants.TextureFormat.Depth24UnormStencil8: // composite format - let's say it's byte...\n            case WebGPUConstants.TextureFormat.Depth32FloatStencil8: // composite format - let's say it's byte...\n            case WebGPUConstants.TextureFormat.BC5RGUnorm:\n            case WebGPUConstants.TextureFormat.BC5RGSnorm:\n            case WebGPUConstants.TextureFormat.RG16Uint:\n            case WebGPUConstants.TextureFormat.RG16Sint:\n            case WebGPUConstants.TextureFormat.RG16Float:\n            case WebGPUConstants.TextureFormat.RG32Uint:\n            case WebGPUConstants.TextureFormat.RG32Sint:\n            case WebGPUConstants.TextureFormat.RG32Float:\n            case WebGPUConstants.TextureFormat.Depth24PlusStencil8:\n            case WebGPUConstants.TextureFormat.EACRG11Unorm:\n            case WebGPUConstants.TextureFormat.EACRG11Snorm:\n                return 2;\n            case WebGPUConstants.TextureFormat.RGB9E5UFloat: // composite format - let's say it's byte...\n            case WebGPUConstants.TextureFormat.RG11B10UFloat: // composite format - let's say it's byte...\n            case WebGPUConstants.TextureFormat.BC6HRGBUFloat:\n            case WebGPUConstants.TextureFormat.BC6HRGBFloat:\n            case WebGPUConstants.TextureFormat.ETC2RGB8Unorm:\n            case WebGPUConstants.TextureFormat.ETC2RGB8UnormSRGB:\n                return 3;\n            case WebGPUConstants.TextureFormat.RGBA8Unorm:\n            case WebGPUConstants.TextureFormat.RGBA8UnormSRGB:\n            case WebGPUConstants.TextureFormat.RGBA8Snorm:\n            case WebGPUConstants.TextureFormat.RGBA8Uint:\n            case WebGPUConstants.TextureFormat.RGBA8Sint:\n            case WebGPUConstants.TextureFormat.BGRA8Unorm:\n            case WebGPUConstants.TextureFormat.BGRA8UnormSRGB:\n            case WebGPUConstants.TextureFormat.RGB10A2Unorm: // composite format - let's say it's byte...\n            case WebGPUConstants.TextureFormat.BC7RGBAUnorm:\n            case WebGPUConstants.TextureFormat.BC7RGBAUnormSRGB:\n            case WebGPUConstants.TextureFormat.BC3RGBAUnorm:\n            case WebGPUConstants.TextureFormat.BC3RGBAUnormSRGB:\n            case WebGPUConstants.TextureFormat.BC2RGBAUnorm:\n            case WebGPUConstants.TextureFormat.BC2RGBAUnormSRGB:\n            case WebGPUConstants.TextureFormat.BC1RGBAUnorm:\n            case WebGPUConstants.TextureFormat.BC1RGBAUnormSRGB:\n            case WebGPUConstants.TextureFormat.RGBA16Uint:\n            case WebGPUConstants.TextureFormat.RGBA16Sint:\n            case WebGPUConstants.TextureFormat.RGBA16Float:\n            case WebGPUConstants.TextureFormat.RGBA32Uint:\n            case WebGPUConstants.TextureFormat.RGBA32Sint:\n            case WebGPUConstants.TextureFormat.RGBA32Float:\n            case WebGPUConstants.TextureFormat.ETC2RGB8A1Unorm:\n            case WebGPUConstants.TextureFormat.ETC2RGB8A1UnormSRGB:\n            case WebGPUConstants.TextureFormat.ETC2RGBA8Unorm:\n            case WebGPUConstants.TextureFormat.ETC2RGBA8UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC4x4Unorm:\n            case WebGPUConstants.TextureFormat.ASTC4x4UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC5x4Unorm:\n            case WebGPUConstants.TextureFormat.ASTC5x4UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC5x5Unorm:\n            case WebGPUConstants.TextureFormat.ASTC5x5UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC6x5Unorm:\n            case WebGPUConstants.TextureFormat.ASTC6x5UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC6x6Unorm:\n            case WebGPUConstants.TextureFormat.ASTC6x6UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC8x5Unorm:\n            case WebGPUConstants.TextureFormat.ASTC8x5UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC8x6Unorm:\n            case WebGPUConstants.TextureFormat.ASTC8x6UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC8x8Unorm:\n            case WebGPUConstants.TextureFormat.ASTC8x8UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC10x5Unorm:\n            case WebGPUConstants.TextureFormat.ASTC10x5UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC10x6Unorm:\n            case WebGPUConstants.TextureFormat.ASTC10x6UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC10x8Unorm:\n            case WebGPUConstants.TextureFormat.ASTC10x8UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC10x10Unorm:\n            case WebGPUConstants.TextureFormat.ASTC10x10UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC12x10Unorm:\n            case WebGPUConstants.TextureFormat.ASTC12x10UnormSRGB:\n            case WebGPUConstants.TextureFormat.ASTC12x12Unorm:\n            case WebGPUConstants.TextureFormat.ASTC12x12UnormSRGB:\n                return 4;\n        }\n        throw `Unknown format ${format}!`;\n    }\n    static HasStencilAspect(format) {\n        switch (format) {\n            case WebGPUConstants.TextureFormat.Stencil8:\n            case WebGPUConstants.TextureFormat.Depth24UnormStencil8:\n            case WebGPUConstants.TextureFormat.Depth32FloatStencil8:\n            case WebGPUConstants.TextureFormat.Depth24PlusStencil8:\n                return true;\n        }\n        return false;\n    }\n    static HasDepthAndStencilAspects(format) {\n        switch (format) {\n            case WebGPUConstants.TextureFormat.Depth24UnormStencil8:\n            case WebGPUConstants.TextureFormat.Depth32FloatStencil8:\n            case WebGPUConstants.TextureFormat.Depth24PlusStencil8:\n                return true;\n        }\n        return false;\n    }\n    copyVideoToTexture(video, texture, format, invertY = false, commandEncoder) {\n        var _a, _b, _c, _d;\n        const useOwnCommandEncoder = commandEncoder === undefined;\n        const [pipeline, bindGroupLayout] = this._getVideoPipeline(format, invertY ? VideoPipelineType.InvertY : VideoPipelineType.DontInvertY);\n        if (useOwnCommandEncoder) {\n            commandEncoder = this._device.createCommandEncoder({});\n        }\n        (_b = (_a = commandEncoder).pushDebugGroup) === null || _b === void 0 ? void 0 : _b.call(_a, `copy video to texture - invertY=${invertY}`);\n        const webgpuHardwareTexture = texture._hardwareTexture;\n        const renderPassDescriptor = {\n            colorAttachments: [\n                {\n                    view: webgpuHardwareTexture.underlyingResource.createView({\n                        format,\n                        dimension: WebGPUConstants.TextureViewDimension.E2d,\n                        mipLevelCount: 1,\n                        baseArrayLayer: 0,\n                        baseMipLevel: 0,\n                        arrayLayerCount: 1,\n                        aspect: WebGPUConstants.TextureAspect.All,\n                    }),\n                    loadOp: WebGPUConstants.LoadOp.Load,\n                    storeOp: WebGPUConstants.StoreOp.Store,\n                },\n            ],\n        };\n        const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n        const descriptor = {\n            layout: bindGroupLayout,\n            entries: [\n                {\n                    binding: 0,\n                    resource: this._videoSampler,\n                },\n                {\n                    binding: 1,\n                    resource: this._device.importExternalTexture({\n                        source: video.underlyingResource,\n                    }),\n                },\n            ],\n        };\n        const bindGroup = this._device.createBindGroup(descriptor);\n        passEncoder.setPipeline(pipeline);\n        passEncoder.setBindGroup(0, bindGroup);\n        passEncoder.draw(4, 1, 0, 0);\n        passEncoder.end();\n        (_d = (_c = commandEncoder).popDebugGroup) === null || _d === void 0 ? void 0 : _d.call(_c);\n        if (useOwnCommandEncoder) {\n            this._device.queue.submit([commandEncoder.finish()]);\n            commandEncoder = null;\n        }\n    }\n    invertYPreMultiplyAlpha(gpuOrHdwTexture, width, height, format, invertY = false, premultiplyAlpha = false, faceIndex = 0, mipLevel = 0, layers = 1, ofstX = 0, ofstY = 0, rectWidth = 0, rectHeight = 0, commandEncoder, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    allowGPUOptimization) {\n        var _a, _b, _c, _d, _e, _f;\n        const useRect = rectWidth !== 0;\n        const useOwnCommandEncoder = commandEncoder === undefined;\n        const [pipeline, bindGroupLayout] = this._getPipeline(format, useRect ? PipelineType.InvertYPremultiplyAlphaWithOfst : PipelineType.InvertYPremultiplyAlpha, {\n            invertY,\n            premultiplyAlpha,\n        });\n        faceIndex = Math.max(faceIndex, 0);\n        if (useOwnCommandEncoder) {\n            commandEncoder = this._device.createCommandEncoder({});\n        }\n        (_b = (_a = commandEncoder).pushDebugGroup) === null || _b === void 0 ? void 0 : _b.call(_a, `internal process texture - invertY=${invertY} premultiplyAlpha=${premultiplyAlpha}`);\n        let gpuTexture;\n        if (WebGPUTextureHelper._IsHardwareTexture(gpuOrHdwTexture)) {\n            gpuTexture = gpuOrHdwTexture.underlyingResource;\n            if (!(invertY && !premultiplyAlpha && layers === 1 && faceIndex === 0)) {\n                // we optimize only for the most likely case (invertY=true, premultiplyAlpha=false, layers=1, faceIndex=0) to avoid dealing with big caches\n                gpuOrHdwTexture = undefined;\n            }\n        }\n        else {\n            gpuTexture = gpuOrHdwTexture;\n            gpuOrHdwTexture = undefined;\n        }\n        if (!gpuTexture) {\n            return;\n        }\n        if (useRect) {\n            this._bufferManager.setRawData(this._ubCopyWithOfst, 0, new Float32Array([ofstX, ofstY, rectWidth, rectHeight]), 0, 4 * 4);\n        }\n        const webgpuHardwareTexture = gpuOrHdwTexture;\n        const outputTexture = (_c = webgpuHardwareTexture === null || webgpuHardwareTexture === void 0 ? void 0 : webgpuHardwareTexture._copyInvertYTempTexture) !== null && _c !== void 0 ? _c : this.createTexture({ width, height, layers: 1 }, false, false, false, false, false, format, 1, commandEncoder, WebGPUConstants.TextureUsage.CopySrc | WebGPUConstants.TextureUsage.RenderAttachment | WebGPUConstants.TextureUsage.TextureBinding);\n        const renderPassDescriptor = (_d = webgpuHardwareTexture === null || webgpuHardwareTexture === void 0 ? void 0 : webgpuHardwareTexture._copyInvertYRenderPassDescr) !== null && _d !== void 0 ? _d : {\n            colorAttachments: [\n                {\n                    view: outputTexture.createView({\n                        format,\n                        dimension: WebGPUConstants.TextureViewDimension.E2d,\n                        baseMipLevel: 0,\n                        mipLevelCount: 1,\n                        arrayLayerCount: 1,\n                        baseArrayLayer: 0,\n                    }),\n                    loadOp: WebGPUConstants.LoadOp.Load,\n                    storeOp: WebGPUConstants.StoreOp.Store,\n                },\n            ],\n        };\n        const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n        let bindGroup = useRect ? webgpuHardwareTexture === null || webgpuHardwareTexture === void 0 ? void 0 : webgpuHardwareTexture._copyInvertYBindGroupWithOfst : webgpuHardwareTexture === null || webgpuHardwareTexture === void 0 ? void 0 : webgpuHardwareTexture._copyInvertYBindGroup;\n        if (!bindGroup) {\n            const descriptor = {\n                layout: bindGroupLayout,\n                entries: [\n                    {\n                        binding: 0,\n                        resource: gpuTexture.createView({\n                            format,\n                            dimension: WebGPUConstants.TextureViewDimension.E2d,\n                            baseMipLevel: mipLevel,\n                            mipLevelCount: 1,\n                            arrayLayerCount: layers,\n                            baseArrayLayer: faceIndex,\n                        }),\n                    },\n                ],\n            };\n            if (useRect) {\n                descriptor.entries.push({\n                    binding: 1,\n                    resource: {\n                        buffer: this._ubCopyWithOfst,\n                    },\n                });\n            }\n            bindGroup = this._device.createBindGroup(descriptor);\n        }\n        passEncoder.setPipeline(pipeline);\n        passEncoder.setBindGroup(0, bindGroup);\n        passEncoder.draw(4, 1, 0, 0);\n        passEncoder.end();\n        commandEncoder.copyTextureToTexture({\n            texture: outputTexture,\n        }, {\n            texture: gpuTexture,\n            mipLevel,\n            origin: {\n                x: 0,\n                y: 0,\n                z: faceIndex,\n            },\n        }, {\n            width,\n            height,\n            depthOrArrayLayers: 1,\n        });\n        if (webgpuHardwareTexture) {\n            webgpuHardwareTexture._copyInvertYTempTexture = outputTexture;\n            webgpuHardwareTexture._copyInvertYRenderPassDescr = renderPassDescriptor;\n            if (useRect) {\n                webgpuHardwareTexture._copyInvertYBindGroupWithOfst = bindGroup;\n            }\n            else {\n                webgpuHardwareTexture._copyInvertYBindGroup = bindGroup;\n            }\n        }\n        else {\n            this._deferredReleaseTextures.push([outputTexture, null]);\n        }\n        (_f = (_e = commandEncoder).popDebugGroup) === null || _f === void 0 ? void 0 : _f.call(_e);\n        if (useOwnCommandEncoder) {\n            this._device.queue.submit([commandEncoder.finish()]);\n            commandEncoder = null;\n        }\n    }\n    copyWithInvertY(srcTextureView, format, renderPassDescriptor, commandEncoder) {\n        var _a, _b, _c, _d;\n        const useOwnCommandEncoder = commandEncoder === undefined;\n        const [pipeline, bindGroupLayout] = this._getPipeline(format, PipelineType.InvertYPremultiplyAlpha, { invertY: true, premultiplyAlpha: false });\n        if (useOwnCommandEncoder) {\n            commandEncoder = this._device.createCommandEncoder({});\n        }\n        (_b = (_a = commandEncoder).pushDebugGroup) === null || _b === void 0 ? void 0 : _b.call(_a, `internal copy texture with invertY`);\n        const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n        const bindGroup = this._device.createBindGroup({\n            layout: bindGroupLayout,\n            entries: [\n                {\n                    binding: 0,\n                    resource: srcTextureView,\n                },\n            ],\n        });\n        passEncoder.setPipeline(pipeline);\n        passEncoder.setBindGroup(0, bindGroup);\n        passEncoder.draw(4, 1, 0, 0);\n        passEncoder.end();\n        (_d = (_c = commandEncoder).popDebugGroup) === null || _d === void 0 ? void 0 : _d.call(_c);\n        if (useOwnCommandEncoder) {\n            this._device.queue.submit([commandEncoder.finish()]);\n            commandEncoder = null;\n        }\n    }\n    //------------------------------------------------------------------------------\n    //                               Creation\n    //------------------------------------------------------------------------------\n    createTexture(imageBitmap, hasMipmaps = false, generateMipmaps = false, invertY = false, premultiplyAlpha = false, is3D = false, format = WebGPUConstants.TextureFormat.RGBA8Unorm, sampleCount = 1, commandEncoder, usage = -1, additionalUsages = 0) {\n        if (sampleCount > 1) {\n            // WebGPU only supports 1 or 4\n            sampleCount = 4;\n        }\n        const layerCount = imageBitmap.layers || 1;\n        const textureSize = {\n            width: imageBitmap.width,\n            height: imageBitmap.height,\n            depthOrArrayLayers: layerCount,\n        };\n        const isCompressedFormat = WebGPUTextureHelper.IsCompressedFormat(format);\n        const mipLevelCount = hasMipmaps ? WebGPUTextureHelper.ComputeNumMipmapLevels(imageBitmap.width, imageBitmap.height) : 1;\n        const usages = usage >= 0 ? usage : WebGPUConstants.TextureUsage.CopySrc | WebGPUConstants.TextureUsage.CopyDst | WebGPUConstants.TextureUsage.TextureBinding;\n        additionalUsages |= hasMipmaps && !isCompressedFormat ? WebGPUConstants.TextureUsage.CopySrc | WebGPUConstants.TextureUsage.RenderAttachment : 0;\n        if (!isCompressedFormat && !is3D) {\n            // we don't know in advance if the texture will be updated with copyExternalImageToTexture (which requires to have those flags), so we need to force the flags all the times\n            additionalUsages |= WebGPUConstants.TextureUsage.RenderAttachment | WebGPUConstants.TextureUsage.CopyDst;\n        }\n        const gpuTexture = this._device.createTexture({\n            label: `Texture_${textureSize.width}x${textureSize.height}x${textureSize.depthOrArrayLayers}_${hasMipmaps ? \"wmips\" : \"womips\"}_${format}_samples${sampleCount}`,\n            size: textureSize,\n            dimension: is3D ? WebGPUConstants.TextureDimension.E3d : WebGPUConstants.TextureDimension.E2d,\n            format,\n            usage: usages | additionalUsages,\n            sampleCount,\n            mipLevelCount,\n        });\n        if (WebGPUTextureHelper.IsImageBitmap(imageBitmap)) {\n            this.updateTexture(imageBitmap, gpuTexture, imageBitmap.width, imageBitmap.height, layerCount, format, 0, 0, invertY, premultiplyAlpha, 0, 0);\n            if (hasMipmaps && generateMipmaps) {\n                this.generateMipmaps(gpuTexture, format, mipLevelCount, 0, commandEncoder);\n            }\n        }\n        return gpuTexture;\n    }\n    createCubeTexture(imageBitmaps, hasMipmaps = false, generateMipmaps = false, invertY = false, premultiplyAlpha = false, format = WebGPUConstants.TextureFormat.RGBA8Unorm, sampleCount = 1, commandEncoder, usage = -1, additionalUsages = 0) {\n        if (sampleCount > 1) {\n            // WebGPU only supports 1 or 4\n            sampleCount = 4;\n        }\n        const width = WebGPUTextureHelper.IsImageBitmapArray(imageBitmaps) ? imageBitmaps[0].width : imageBitmaps.width;\n        const height = WebGPUTextureHelper.IsImageBitmapArray(imageBitmaps) ? imageBitmaps[0].height : imageBitmaps.height;\n        const isCompressedFormat = WebGPUTextureHelper.IsCompressedFormat(format);\n        const mipLevelCount = hasMipmaps ? WebGPUTextureHelper.ComputeNumMipmapLevels(width, height) : 1;\n        const usages = usage >= 0 ? usage : WebGPUConstants.TextureUsage.CopySrc | WebGPUConstants.TextureUsage.CopyDst | WebGPUConstants.TextureUsage.TextureBinding;\n        additionalUsages |= hasMipmaps && !isCompressedFormat ? WebGPUConstants.TextureUsage.CopySrc | WebGPUConstants.TextureUsage.RenderAttachment : 0;\n        if (!isCompressedFormat) {\n            // we don't know in advance if the texture will be updated with copyExternalImageToTexture (which requires to have those flags), so we need to force the flags all the times\n            additionalUsages |= WebGPUConstants.TextureUsage.RenderAttachment | WebGPUConstants.TextureUsage.CopyDst;\n        }\n        const gpuTexture = this._device.createTexture({\n            label: `TextureCube_${width}x${height}x6_${hasMipmaps ? \"wmips\" : \"womips\"}_${format}_samples${sampleCount}`,\n            size: {\n                width,\n                height,\n                depthOrArrayLayers: 6,\n            },\n            dimension: WebGPUConstants.TextureDimension.E2d,\n            format,\n            usage: usages | additionalUsages,\n            sampleCount,\n            mipLevelCount,\n        });\n        if (WebGPUTextureHelper.IsImageBitmapArray(imageBitmaps)) {\n            this.updateCubeTextures(imageBitmaps, gpuTexture, width, height, format, invertY, premultiplyAlpha, 0, 0);\n            if (hasMipmaps && generateMipmaps) {\n                this.generateCubeMipmaps(gpuTexture, format, mipLevelCount, commandEncoder);\n            }\n        }\n        return gpuTexture;\n    }\n    generateCubeMipmaps(gpuTexture, format, mipLevelCount, commandEncoder) {\n        var _a, _b, _c, _d;\n        const useOwnCommandEncoder = commandEncoder === undefined;\n        if (useOwnCommandEncoder) {\n            commandEncoder = this._device.createCommandEncoder({});\n        }\n        (_b = (_a = commandEncoder).pushDebugGroup) === null || _b === void 0 ? void 0 : _b.call(_a, `create cube mipmaps - ${mipLevelCount} levels`);\n        for (let f = 0; f < 6; ++f) {\n            this.generateMipmaps(gpuTexture, format, mipLevelCount, f, commandEncoder);\n        }\n        (_d = (_c = commandEncoder).popDebugGroup) === null || _d === void 0 ? void 0 : _d.call(_c);\n        if (useOwnCommandEncoder) {\n            this._device.queue.submit([commandEncoder.finish()]);\n            commandEncoder = null;\n        }\n    }\n    generateMipmaps(gpuOrHdwTexture, format, mipLevelCount, faceIndex = 0, commandEncoder) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const useOwnCommandEncoder = commandEncoder === undefined;\n        const [pipeline, bindGroupLayout] = this._getPipeline(format);\n        faceIndex = Math.max(faceIndex, 0);\n        if (useOwnCommandEncoder) {\n            commandEncoder = this._device.createCommandEncoder({});\n        }\n        (_b = (_a = commandEncoder).pushDebugGroup) === null || _b === void 0 ? void 0 : _b.call(_a, `create mipmaps for face #${faceIndex} - ${mipLevelCount} levels`);\n        let gpuTexture;\n        if (WebGPUTextureHelper._IsHardwareTexture(gpuOrHdwTexture)) {\n            gpuTexture = gpuOrHdwTexture.underlyingResource;\n            gpuOrHdwTexture._mipmapGenRenderPassDescr = gpuOrHdwTexture._mipmapGenRenderPassDescr || [];\n            gpuOrHdwTexture._mipmapGenBindGroup = gpuOrHdwTexture._mipmapGenBindGroup || [];\n        }\n        else {\n            gpuTexture = gpuOrHdwTexture;\n            gpuOrHdwTexture = undefined;\n        }\n        if (!gpuTexture) {\n            return;\n        }\n        const webgpuHardwareTexture = gpuOrHdwTexture;\n        for (let i = 1; i < mipLevelCount; ++i) {\n            const renderPassDescriptor = (_d = (_c = webgpuHardwareTexture === null || webgpuHardwareTexture === void 0 ? void 0 : webgpuHardwareTexture._mipmapGenRenderPassDescr[faceIndex]) === null || _c === void 0 ? void 0 : _c[i - 1]) !== null && _d !== void 0 ? _d : {\n                colorAttachments: [\n                    {\n                        view: gpuTexture.createView({\n                            format,\n                            dimension: WebGPUConstants.TextureViewDimension.E2d,\n                            baseMipLevel: i,\n                            mipLevelCount: 1,\n                            arrayLayerCount: 1,\n                            baseArrayLayer: faceIndex,\n                        }),\n                        loadOp: WebGPUConstants.LoadOp.Load,\n                        storeOp: WebGPUConstants.StoreOp.Store,\n                    },\n                ],\n            };\n            if (webgpuHardwareTexture) {\n                webgpuHardwareTexture._mipmapGenRenderPassDescr[faceIndex] = webgpuHardwareTexture._mipmapGenRenderPassDescr[faceIndex] || [];\n                webgpuHardwareTexture._mipmapGenRenderPassDescr[faceIndex][i - 1] = renderPassDescriptor;\n            }\n            const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n            const bindGroup = (_f = (_e = webgpuHardwareTexture === null || webgpuHardwareTexture === void 0 ? void 0 : webgpuHardwareTexture._mipmapGenBindGroup[faceIndex]) === null || _e === void 0 ? void 0 : _e[i - 1]) !== null && _f !== void 0 ? _f : this._device.createBindGroup({\n                layout: bindGroupLayout,\n                entries: [\n                    {\n                        binding: 0,\n                        resource: this._mipmapSampler,\n                    },\n                    {\n                        binding: 1,\n                        resource: gpuTexture.createView({\n                            format,\n                            dimension: WebGPUConstants.TextureViewDimension.E2d,\n                            baseMipLevel: i - 1,\n                            mipLevelCount: 1,\n                            arrayLayerCount: 1,\n                            baseArrayLayer: faceIndex,\n                        }),\n                    },\n                ],\n            });\n            if (webgpuHardwareTexture) {\n                webgpuHardwareTexture._mipmapGenBindGroup[faceIndex] = webgpuHardwareTexture._mipmapGenBindGroup[faceIndex] || [];\n                webgpuHardwareTexture._mipmapGenBindGroup[faceIndex][i - 1] = bindGroup;\n            }\n            passEncoder.setPipeline(pipeline);\n            passEncoder.setBindGroup(0, bindGroup);\n            passEncoder.draw(4, 1, 0, 0);\n            passEncoder.end();\n        }\n        (_h = (_g = commandEncoder).popDebugGroup) === null || _h === void 0 ? void 0 : _h.call(_g);\n        if (useOwnCommandEncoder) {\n            this._device.queue.submit([commandEncoder.finish()]);\n            commandEncoder = null;\n        }\n    }\n    createGPUTextureForInternalTexture(texture, width, height, depth, creationFlags) {\n        if (!texture._hardwareTexture) {\n            texture._hardwareTexture = new WebGPUHardwareTexture();\n        }\n        if (width === undefined) {\n            width = texture.width;\n        }\n        if (height === undefined) {\n            height = texture.height;\n        }\n        if (depth === undefined) {\n            depth = texture.depth;\n        }\n        const gpuTextureWrapper = texture._hardwareTexture;\n        const isStorageTexture = ((creationFlags !== null && creationFlags !== void 0 ? creationFlags : 0) & 1) !== 0;\n        gpuTextureWrapper.format = WebGPUTextureHelper.GetWebGPUTextureFormat(texture.type, texture.format, texture._useSRGBBuffer);\n        gpuTextureWrapper.textureUsages =\n            texture._source === InternalTextureSource.RenderTarget || texture.source === InternalTextureSource.MultiRenderTarget\n                ? WebGPUConstants.TextureUsage.TextureBinding | WebGPUConstants.TextureUsage.CopySrc | WebGPUConstants.TextureUsage.RenderAttachment\n                : texture._source === InternalTextureSource.DepthStencil\n                    ? WebGPUConstants.TextureUsage.TextureBinding | WebGPUConstants.TextureUsage.RenderAttachment\n                    : -1;\n        gpuTextureWrapper.textureAdditionalUsages = isStorageTexture ? WebGPUConstants.TextureUsage.StorageBinding : 0;\n        const hasMipMaps = texture.generateMipMaps;\n        const layerCount = depth || 1;\n        let mipmapCount;\n        if (texture._maxLodLevel !== null) {\n            mipmapCount = texture._maxLodLevel;\n        }\n        else {\n            mipmapCount = hasMipMaps ? WebGPUTextureHelper.ComputeNumMipmapLevels(width, height) : 1;\n        }\n        if (texture.isCube) {\n            const gpuTexture = this.createCubeTexture({ width, height }, texture.generateMipMaps, texture.generateMipMaps, texture.invertY, false, gpuTextureWrapper.format, 1, this._commandEncoderForCreation, gpuTextureWrapper.textureUsages, gpuTextureWrapper.textureAdditionalUsages);\n            gpuTextureWrapper.set(gpuTexture);\n            gpuTextureWrapper.createView({\n                format: gpuTextureWrapper.format,\n                dimension: WebGPUConstants.TextureViewDimension.Cube,\n                mipLevelCount: mipmapCount,\n                baseArrayLayer: 0,\n                baseMipLevel: 0,\n                arrayLayerCount: 6,\n                aspect: WebGPUTextureHelper.HasDepthAndStencilAspects(gpuTextureWrapper.format) ? WebGPUConstants.TextureAspect.DepthOnly : WebGPUConstants.TextureAspect.All,\n            }, isStorageTexture);\n        }\n        else {\n            const gpuTexture = this.createTexture({ width, height, layers: layerCount }, texture.generateMipMaps, texture.generateMipMaps, texture.invertY, false, texture.is3D, gpuTextureWrapper.format, 1, this._commandEncoderForCreation, gpuTextureWrapper.textureUsages, gpuTextureWrapper.textureAdditionalUsages);\n            gpuTextureWrapper.set(gpuTexture);\n            gpuTextureWrapper.createView({\n                format: gpuTextureWrapper.format,\n                dimension: texture.is2DArray\n                    ? WebGPUConstants.TextureViewDimension.E2dArray\n                    : texture.is3D\n                        ? WebGPUConstants.TextureDimension.E3d\n                        : WebGPUConstants.TextureViewDimension.E2d,\n                mipLevelCount: mipmapCount,\n                baseArrayLayer: 0,\n                baseMipLevel: 0,\n                arrayLayerCount: texture.is3D ? 1 : layerCount,\n                aspect: WebGPUTextureHelper.HasDepthAndStencilAspects(gpuTextureWrapper.format) ? WebGPUConstants.TextureAspect.DepthOnly : WebGPUConstants.TextureAspect.All,\n            }, isStorageTexture);\n        }\n        texture.width = texture.baseWidth = width;\n        texture.height = texture.baseHeight = height;\n        texture.depth = texture.baseDepth = depth;\n        this.createMSAATexture(texture, texture.samples);\n        return gpuTextureWrapper;\n    }\n    createMSAATexture(texture, samples) {\n        const gpuTextureWrapper = texture._hardwareTexture;\n        if (gpuTextureWrapper === null || gpuTextureWrapper === void 0 ? void 0 : gpuTextureWrapper.msaaTexture) {\n            this.releaseTexture(gpuTextureWrapper.msaaTexture);\n            gpuTextureWrapper.msaaTexture = null;\n        }\n        if (!gpuTextureWrapper || (samples !== null && samples !== void 0 ? samples : 1) <= 1) {\n            return;\n        }\n        const width = texture.width;\n        const height = texture.height;\n        const layerCount = texture.depth || 1;\n        if (texture.isCube) {\n            const gpuMSAATexture = this.createCubeTexture({ width, height }, false, false, texture.invertY, false, gpuTextureWrapper.format, samples, this._commandEncoderForCreation, gpuTextureWrapper.textureUsages, gpuTextureWrapper.textureAdditionalUsages);\n            gpuTextureWrapper.msaaTexture = gpuMSAATexture;\n        }\n        else {\n            const gpuMSAATexture = this.createTexture({ width, height, layers: layerCount }, false, false, texture.invertY, false, texture.is3D, gpuTextureWrapper.format, samples, this._commandEncoderForCreation, gpuTextureWrapper.textureUsages, gpuTextureWrapper.textureAdditionalUsages);\n            gpuTextureWrapper.msaaTexture = gpuMSAATexture;\n        }\n    }\n    //------------------------------------------------------------------------------\n    //                                  Update\n    //------------------------------------------------------------------------------\n    updateCubeTextures(imageBitmaps, gpuTexture, width, height, format, invertY = false, premultiplyAlpha = false, offsetX = 0, offsetY = 0) {\n        const faces = [0, 3, 1, 4, 2, 5];\n        for (let f = 0; f < faces.length; ++f) {\n            const imageBitmap = imageBitmaps[faces[f]];\n            this.updateTexture(imageBitmap, gpuTexture, width, height, 1, format, f, 0, invertY, premultiplyAlpha, offsetX, offsetY);\n        }\n    }\n    // TODO WEBGPU handle data source not being in the same format than the destination texture?\n    updateTexture(imageBitmap, texture, width, height, layers, format, faceIndex = 0, mipLevel = 0, invertY = false, premultiplyAlpha = false, offsetX = 0, offsetY = 0, allowGPUOptimization) {\n        const gpuTexture = WebGPUTextureHelper._IsInternalTexture(texture) ? texture._hardwareTexture.underlyingResource : texture;\n        const blockInformation = WebGPUTextureHelper._GetBlockInformationFromFormat(format);\n        const gpuOrHdwTexture = WebGPUTextureHelper._IsInternalTexture(texture) ? texture._hardwareTexture : texture;\n        const textureCopyView = {\n            texture: gpuTexture,\n            origin: {\n                x: offsetX,\n                y: offsetY,\n                z: Math.max(faceIndex, 0),\n            },\n            mipLevel: mipLevel,\n            premultipliedAlpha: premultiplyAlpha,\n        };\n        const textureExtent = {\n            width: Math.ceil(width / blockInformation.width) * blockInformation.width,\n            height: Math.ceil(height / blockInformation.height) * blockInformation.height,\n            depthOrArrayLayers: layers || 1,\n        };\n        if (imageBitmap.byteLength !== undefined) {\n            imageBitmap = imageBitmap;\n            const bytesPerRow = Math.ceil(width / blockInformation.width) * blockInformation.length;\n            const aligned = Math.ceil(bytesPerRow / 256) * 256 === bytesPerRow;\n            if (aligned) {\n                const commandEncoder = this._device.createCommandEncoder({});\n                const buffer = this._bufferManager.createRawBuffer(imageBitmap.byteLength, WebGPUConstants.BufferUsage.MapWrite | WebGPUConstants.BufferUsage.CopySrc, true);\n                const arrayBuffer = buffer.getMappedRange();\n                new Uint8Array(arrayBuffer).set(imageBitmap);\n                buffer.unmap();\n                commandEncoder.copyBufferToTexture({\n                    buffer: buffer,\n                    offset: 0,\n                    bytesPerRow,\n                    rowsPerImage: height,\n                }, textureCopyView, textureExtent);\n                this._device.queue.submit([commandEncoder.finish()]);\n                this._bufferManager.releaseBuffer(buffer);\n            }\n            else {\n                this._device.queue.writeTexture(textureCopyView, imageBitmap, {\n                    offset: 0,\n                    bytesPerRow,\n                    rowsPerImage: height,\n                }, textureExtent);\n            }\n            if (invertY || premultiplyAlpha) {\n                if (WebGPUTextureHelper._IsInternalTexture(texture)) {\n                    const dontUseRect = offsetX === 0 && offsetY === 0 && width === texture.width && height === texture.height;\n                    this.invertYPreMultiplyAlpha(gpuOrHdwTexture, texture.width, texture.height, format, invertY, premultiplyAlpha, faceIndex, mipLevel, layers || 1, offsetX, offsetY, dontUseRect ? 0 : width, dontUseRect ? 0 : height, undefined, allowGPUOptimization);\n                }\n                else {\n                    // we should never take this code path\n                    throw \"updateTexture: Can't process the texture data because a GPUTexture was provided instead of an InternalTexture!\";\n                }\n            }\n        }\n        else {\n            imageBitmap = imageBitmap;\n            if (invertY) {\n                textureCopyView.premultipliedAlpha = false; // we are going to handle premultiplyAlpha ourselves\n                // we must preprocess the image\n                if (WebGPUTextureHelper._IsInternalTexture(texture) && offsetX === 0 && offsetY === 0 && width === texture.width && height === texture.height) {\n                    // optimization when the source image is the same size than the destination texture and offsets X/Y == 0:\n                    // we simply copy the source to the destination and we apply the preprocessing on the destination\n                    this._device.queue.copyExternalImageToTexture({ source: imageBitmap }, textureCopyView, textureExtent);\n                    this.invertYPreMultiplyAlpha(gpuOrHdwTexture, width, height, format, invertY, premultiplyAlpha, faceIndex, mipLevel, layers || 1, 0, 0, 0, 0, undefined, allowGPUOptimization);\n                }\n                else {\n                    // we must apply the preprocessing on the source image before copying it into the destination texture\n                    const commandEncoder = this._device.createCommandEncoder({});\n                    // create a temp texture and copy the image to it\n                    const srcTexture = this.createTexture({ width, height, layers: 1 }, false, false, false, false, false, format, 1, commandEncoder, WebGPUConstants.TextureUsage.CopySrc | WebGPUConstants.TextureUsage.TextureBinding);\n                    this._deferredReleaseTextures.push([srcTexture, null]);\n                    textureExtent.depthOrArrayLayers = 1;\n                    this._device.queue.copyExternalImageToTexture({ source: imageBitmap }, { texture: srcTexture }, textureExtent);\n                    textureExtent.depthOrArrayLayers = layers || 1;\n                    // apply the preprocessing to this temp texture\n                    this.invertYPreMultiplyAlpha(srcTexture, width, height, format, invertY, premultiplyAlpha, faceIndex, mipLevel, layers || 1, 0, 0, 0, 0, commandEncoder, allowGPUOptimization);\n                    // copy the temp texture to the destination texture\n                    commandEncoder.copyTextureToTexture({ texture: srcTexture }, textureCopyView, textureExtent);\n                    this._device.queue.submit([commandEncoder.finish()]);\n                }\n            }\n            else {\n                // no preprocessing: direct copy to destination texture\n                this._device.queue.copyExternalImageToTexture({ source: imageBitmap }, textureCopyView, textureExtent);\n            }\n        }\n    }\n    readPixels(texture, x, y, width, height, format, faceIndex = 0, mipLevel = 0, buffer = null, noDataConversion = false) {\n        const blockInformation = WebGPUTextureHelper._GetBlockInformationFromFormat(format);\n        const bytesPerRow = Math.ceil(width / blockInformation.width) * blockInformation.length;\n        const bytesPerRowAligned = Math.ceil(bytesPerRow / 256) * 256;\n        const size = bytesPerRowAligned * height;\n        const gpuBuffer = this._bufferManager.createRawBuffer(size, WebGPUConstants.BufferUsage.MapRead | WebGPUConstants.BufferUsage.CopyDst);\n        const commandEncoder = this._device.createCommandEncoder({});\n        commandEncoder.copyTextureToBuffer({\n            texture,\n            mipLevel,\n            origin: {\n                x,\n                y,\n                z: Math.max(faceIndex, 0),\n            },\n        }, {\n            buffer: gpuBuffer,\n            offset: 0,\n            bytesPerRow: bytesPerRowAligned,\n        }, {\n            width,\n            height,\n            depthOrArrayLayers: 1,\n        });\n        this._device.queue.submit([commandEncoder.finish()]);\n        return this._bufferManager.readDataFromBuffer(gpuBuffer, size, width, height, bytesPerRow, bytesPerRowAligned, WebGPUTextureHelper._GetTextureTypeFromFormat(format), 0, buffer, true, noDataConversion);\n    }\n    //------------------------------------------------------------------------------\n    //                              Dispose\n    //------------------------------------------------------------------------------\n    releaseTexture(texture) {\n        if (WebGPUTextureHelper._IsInternalTexture(texture)) {\n            const hardwareTexture = texture._hardwareTexture;\n            const irradianceTexture = texture._irradianceTexture;\n            // We can't destroy the objects just now because they could be used in the current frame - we delay the destroying after the end of the frame\n            this._deferredReleaseTextures.push([hardwareTexture, irradianceTexture]);\n        }\n        else {\n            this._deferredReleaseTextures.push([texture, null]);\n        }\n    }\n    destroyDeferredTextures() {\n        for (let i = 0; i < this._deferredReleaseTextures.length; ++i) {\n            const [hardwareTexture, irradianceTexture] = this._deferredReleaseTextures[i];\n            if (hardwareTexture) {\n                if (WebGPUTextureHelper._IsHardwareTexture(hardwareTexture)) {\n                    hardwareTexture.release();\n                }\n                else {\n                    hardwareTexture.destroy();\n                }\n            }\n            irradianceTexture === null || irradianceTexture === void 0 ? void 0 : irradianceTexture.dispose();\n        }\n        this._deferredReleaseTextures.length = 0;\n    }\n}\n//# sourceMappingURL=webgpuTextureHelper.js.map","import * as WebGPUConstants from \"./webgpuConstants.js\";\nimport { PerfCounter } from \"../../Misc/perfCounter.js\";\nimport { WebGPUQuerySet } from \"./webgpuQuerySet.js\";\n/** @internal */\nexport class WebGPUTimestampQuery {\n    get gpuFrameTimeCounter() {\n        return this._gpuFrameTimeCounter;\n    }\n    constructor(device, bufferManager) {\n        this._enabled = false;\n        this._gpuFrameTimeCounter = new PerfCounter();\n        this._measureDurationState = 0;\n        this._device = device;\n        this._bufferManager = bufferManager;\n    }\n    get enable() {\n        return this._enabled;\n    }\n    set enable(value) {\n        if (this._enabled === value) {\n            return;\n        }\n        this._enabled = value;\n        this._measureDurationState = 0;\n        if (value) {\n            this._measureDuration = new WebGPUDurationMeasure(this._device, this._bufferManager);\n        }\n        else {\n            this._measureDuration.dispose();\n        }\n    }\n    startFrame(commandEncoder) {\n        if (this._enabled && this._measureDurationState === 0) {\n            this._measureDuration.start(commandEncoder);\n            this._measureDurationState = 1;\n        }\n    }\n    endFrame(commandEncoder) {\n        if (this._measureDurationState === 1) {\n            this._measureDurationState = 2;\n            this._measureDuration.stop(commandEncoder).then((duration) => {\n                if (duration !== null && duration >= 0) {\n                    this._gpuFrameTimeCounter.fetchNewFrame();\n                    this._gpuFrameTimeCounter.addCount(duration, true);\n                }\n                this._measureDurationState = 0;\n            });\n        }\n    }\n}\n/** @internal */\nexport class WebGPUDurationMeasure {\n    constructor(device, bufferManager) {\n        this._querySet = new WebGPUQuerySet(2, WebGPUConstants.QueryType.Timestamp, device, bufferManager);\n    }\n    start(encoder) {\n        encoder.writeTimestamp(this._querySet.querySet, 0);\n    }\n    async stop(encoder) {\n        encoder.writeTimestamp(this._querySet.querySet, 1);\n        return this._querySet.readTwoValuesAndSubtract(0);\n    }\n    dispose() {\n        this._querySet.dispose();\n    }\n}\n//# sourceMappingURL=webgpuTimestampQuery.js.map","import { IsWindowObjectExist } from \"../../Misc/domManagement.js\";\nimport { Tools } from \"../../Misc/tools.js\";\n/** @internal */\nexport class WebGPUTintWASM {\n    constructor() {\n        this._twgsl = null;\n    }\n    async initTwgsl(twgslOptions) {\n        twgslOptions = twgslOptions || {};\n        twgslOptions = {\n            ...WebGPUTintWASM._TWgslDefaultOptions,\n            ...twgslOptions,\n        };\n        if (twgslOptions.twgsl) {\n            this._twgsl = twgslOptions.twgsl;\n            return Promise.resolve();\n        }\n        if (twgslOptions.jsPath && twgslOptions.wasmPath) {\n            if (IsWindowObjectExist()) {\n                await Tools.LoadScriptAsync(twgslOptions.jsPath);\n            }\n            else {\n                importScripts(twgslOptions.jsPath);\n            }\n        }\n        if (self.twgsl) {\n            this._twgsl = await self.twgsl(twgslOptions.wasmPath);\n            return Promise.resolve();\n        }\n        return Promise.reject(\"twgsl is not available.\");\n    }\n    convertSpirV2WGSL(code) {\n        const ccode = this._twgsl.convertSpirV2WGSL(code);\n        if (WebGPUTintWASM.ShowWGSLShaderCode) {\n            console.log(ccode);\n            console.log(\"***********************************************\");\n        }\n        return ccode;\n    }\n}\n// Default twgsl options.\nWebGPUTintWASM._TWgslDefaultOptions = {\n    jsPath: \"https://preview.babylonjs.com/twgsl/twgsl.js\",\n    wasmPath: \"https://preview.babylonjs.com/twgsl/twgsl.wasm\",\n};\nWebGPUTintWASM.ShowWGSLShaderCode = false;\n//# sourceMappingURL=webgpuTintWASM.js.map","/* eslint-disable @typescript-eslint/naming-convention */\n/** Defines the cross module used constants to avoid circular dependencies */\nexport class Constants {\n}\n/** Defines that alpha blending is disabled */\nConstants.ALPHA_DISABLE = 0;\n/** Defines that alpha blending is SRC ALPHA * SRC + DEST */\nConstants.ALPHA_ADD = 1;\n/** Defines that alpha blending is SRC ALPHA * SRC + (1 - SRC ALPHA) * DEST */\nConstants.ALPHA_COMBINE = 2;\n/** Defines that alpha blending is DEST - SRC * DEST */\nConstants.ALPHA_SUBTRACT = 3;\n/** Defines that alpha blending is SRC * DEST */\nConstants.ALPHA_MULTIPLY = 4;\n/** Defines that alpha blending is SRC ALPHA * SRC + (1 - SRC) * DEST */\nConstants.ALPHA_MAXIMIZED = 5;\n/** Defines that alpha blending is SRC + DEST */\nConstants.ALPHA_ONEONE = 6;\n/** Defines that alpha blending is SRC + (1 - SRC ALPHA) * DEST */\nConstants.ALPHA_PREMULTIPLIED = 7;\n/**\n * Defines that alpha blending is SRC + (1 - SRC ALPHA) * DEST\n * Alpha will be set to (1 - SRC ALPHA) * DEST ALPHA\n */\nConstants.ALPHA_PREMULTIPLIED_PORTERDUFF = 8;\n/** Defines that alpha blending is CST * SRC + (1 - CST) * DEST */\nConstants.ALPHA_INTERPOLATE = 9;\n/**\n * Defines that alpha blending is SRC + (1 - SRC) * DEST\n * Alpha will be set to SRC ALPHA + (1 - SRC ALPHA) * DEST ALPHA\n */\nConstants.ALPHA_SCREENMODE = 10;\n/**\n * Defines that alpha blending is SRC + DST\n * Alpha will be set to SRC ALPHA + DST ALPHA\n */\nConstants.ALPHA_ONEONE_ONEONE = 11;\n/**\n * Defines that alpha blending is SRC * DST ALPHA + DST\n * Alpha will be set to 0\n */\nConstants.ALPHA_ALPHATOCOLOR = 12;\n/**\n * Defines that alpha blending is SRC * (1 - DST) + DST * (1 - SRC)\n */\nConstants.ALPHA_REVERSEONEMINUS = 13;\n/**\n * Defines that alpha blending is SRC + DST * (1 - SRC ALPHA)\n * Alpha will be set to SRC ALPHA + DST ALPHA * (1 - SRC ALPHA)\n */\nConstants.ALPHA_SRC_DSTONEMINUSSRCALPHA = 14;\n/**\n * Defines that alpha blending is SRC + DST\n * Alpha will be set to SRC ALPHA\n */\nConstants.ALPHA_ONEONE_ONEZERO = 15;\n/**\n * Defines that alpha blending is SRC * (1 - DST) + DST * (1 - SRC)\n * Alpha will be set to DST ALPHA\n */\nConstants.ALPHA_EXCLUSION = 16;\n/**\n * Defines that alpha blending is SRC * SRC ALPHA + DST * (1 - SRC ALPHA)\n * Alpha will be set to SRC ALPHA + (1 - SRC ALPHA) * DST ALPHA\n */\nConstants.ALPHA_LAYER_ACCUMULATE = 17;\n/** Defines that alpha blending equation a SUM */\nConstants.ALPHA_EQUATION_ADD = 0;\n/** Defines that alpha blending equation a SUBSTRACTION */\nConstants.ALPHA_EQUATION_SUBSTRACT = 1;\n/** Defines that alpha blending equation a REVERSE SUBSTRACTION */\nConstants.ALPHA_EQUATION_REVERSE_SUBTRACT = 2;\n/** Defines that alpha blending equation a MAX operation */\nConstants.ALPHA_EQUATION_MAX = 3;\n/** Defines that alpha blending equation a MIN operation */\nConstants.ALPHA_EQUATION_MIN = 4;\n/**\n * Defines that alpha blending equation a DARKEN operation:\n * It takes the min of the src and sums the alpha channels.\n */\nConstants.ALPHA_EQUATION_DARKEN = 5;\n/** Defines that the resource is not delayed*/\nConstants.DELAYLOADSTATE_NONE = 0;\n/** Defines that the resource was successfully delay loaded */\nConstants.DELAYLOADSTATE_LOADED = 1;\n/** Defines that the resource is currently delay loading */\nConstants.DELAYLOADSTATE_LOADING = 2;\n/** Defines that the resource is delayed and has not started loading */\nConstants.DELAYLOADSTATE_NOTLOADED = 4;\n// Depth or Stencil test Constants.\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will never pass. i.e. Nothing will be drawn */\nConstants.NEVER = 0x0200;\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will always pass. i.e. Pixels will be drawn in the order they are drawn */\nConstants.ALWAYS = 0x0207;\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than the stored value */\nConstants.LESS = 0x0201;\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is equals to the stored value */\nConstants.EQUAL = 0x0202;\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than or equal to the stored value */\nConstants.LEQUAL = 0x0203;\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than the stored value */\nConstants.GREATER = 0x0204;\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than or equal to the stored value */\nConstants.GEQUAL = 0x0206;\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is not equal to the stored value */\nConstants.NOTEQUAL = 0x0205;\n// Stencil Actions Constants.\n/** Passed to stencilOperation to specify that stencil value must be kept */\nConstants.KEEP = 0x1e00;\n/** Passed to stencilOperation to specify that stencil value must be zero */\nConstants.ZERO = 0x0000;\n/** Passed to stencilOperation to specify that stencil value must be replaced */\nConstants.REPLACE = 0x1e01;\n/** Passed to stencilOperation to specify that stencil value must be incremented */\nConstants.INCR = 0x1e02;\n/** Passed to stencilOperation to specify that stencil value must be decremented */\nConstants.DECR = 0x1e03;\n/** Passed to stencilOperation to specify that stencil value must be inverted */\nConstants.INVERT = 0x150a;\n/** Passed to stencilOperation to specify that stencil value must be incremented with wrapping */\nConstants.INCR_WRAP = 0x8507;\n/** Passed to stencilOperation to specify that stencil value must be decremented with wrapping */\nConstants.DECR_WRAP = 0x8508;\n/** Texture is not repeating outside of 0..1 UVs */\nConstants.TEXTURE_CLAMP_ADDRESSMODE = 0;\n/** Texture is repeating outside of 0..1 UVs */\nConstants.TEXTURE_WRAP_ADDRESSMODE = 1;\n/** Texture is repeating and mirrored */\nConstants.TEXTURE_MIRROR_ADDRESSMODE = 2;\n/** Flag to create a storage texture */\nConstants.TEXTURE_CREATIONFLAG_STORAGE = 1;\n/** ALPHA */\nConstants.TEXTUREFORMAT_ALPHA = 0;\n/** LUMINANCE */\nConstants.TEXTUREFORMAT_LUMINANCE = 1;\n/** LUMINANCE_ALPHA */\nConstants.TEXTUREFORMAT_LUMINANCE_ALPHA = 2;\n/** RGB */\nConstants.TEXTUREFORMAT_RGB = 4;\n/** RGBA */\nConstants.TEXTUREFORMAT_RGBA = 5;\n/** RED */\nConstants.TEXTUREFORMAT_RED = 6;\n/** RED (2nd reference) */\nConstants.TEXTUREFORMAT_R = 6;\n/** RG */\nConstants.TEXTUREFORMAT_RG = 7;\n/** RED_INTEGER */\nConstants.TEXTUREFORMAT_RED_INTEGER = 8;\n/** RED_INTEGER (2nd reference) */\nConstants.TEXTUREFORMAT_R_INTEGER = 8;\n/** RG_INTEGER */\nConstants.TEXTUREFORMAT_RG_INTEGER = 9;\n/** RGB_INTEGER */\nConstants.TEXTUREFORMAT_RGB_INTEGER = 10;\n/** RGBA_INTEGER */\nConstants.TEXTUREFORMAT_RGBA_INTEGER = 11;\n/** BGRA */\nConstants.TEXTUREFORMAT_BGRA = 12;\n/** Depth 24 bits + Stencil 8 bits */\nConstants.TEXTUREFORMAT_DEPTH24_STENCIL8 = 13;\n/** Depth 32 bits float */\nConstants.TEXTUREFORMAT_DEPTH32_FLOAT = 14;\n/** Depth 16 bits */\nConstants.TEXTUREFORMAT_DEPTH16 = 15;\n/** Depth 24 bits */\nConstants.TEXTUREFORMAT_DEPTH24 = 16;\n/** Depth 24 bits unorm + Stencil 8 bits */\nConstants.TEXTUREFORMAT_DEPTH24UNORM_STENCIL8 = 17;\n/** Depth 32 bits float + Stencil 8 bits */\nConstants.TEXTUREFORMAT_DEPTH32FLOAT_STENCIL8 = 18;\n/** Compressed BC7 */\nConstants.TEXTUREFORMAT_COMPRESSED_RGBA_BPTC_UNORM = 36492;\n/** Compressed BC7 (SRGB) */\nConstants.TEXTUREFORMAT_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 36493;\n/** Compressed BC6 unsigned float */\nConstants.TEXTUREFORMAT_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 36495;\n/** Compressed BC6 signed float */\nConstants.TEXTUREFORMAT_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 36494;\n/** Compressed BC3 */\nConstants.TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT5 = 33779;\n/** Compressed BC3 (SRGB) */\nConstants.TEXTUREFORMAT_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 35919;\n/** Compressed BC2 */\nConstants.TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT3 = 33778;\n/** Compressed BC2 (SRGB) */\nConstants.TEXTUREFORMAT_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 35918;\n/** Compressed BC1 (RGBA) */\nConstants.TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT1 = 33777;\n/** Compressed BC1 (RGB) */\nConstants.TEXTUREFORMAT_COMPRESSED_RGB_S3TC_DXT1 = 33776;\n/** Compressed BC1 (SRGB+A) */\nConstants.TEXTUREFORMAT_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 35917;\n/** Compressed BC1 (SRGB) */\nConstants.TEXTUREFORMAT_COMPRESSED_SRGB_S3TC_DXT1_EXT = 35916;\n/** Compressed ASTC 4x4 */\nConstants.TEXTUREFORMAT_COMPRESSED_RGBA_ASTC_4x4 = 37808;\n/** Compressed ASTC 4x4 (SRGB) */\nConstants.TEXTUREFORMAT_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 37840;\n/** Compressed ETC1 (RGB) */\nConstants.TEXTUREFORMAT_COMPRESSED_RGB_ETC1_WEBGL = 36196;\n/** Compressed ETC2 (RGB) */\nConstants.TEXTUREFORMAT_COMPRESSED_RGB8_ETC2 = 37492;\n/** Compressed ETC2 (SRGB) */\nConstants.TEXTUREFORMAT_COMPRESSED_SRGB8_ETC2 = 37493;\n/** Compressed ETC2 (RGB+A1) */\nConstants.TEXTUREFORMAT_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37494;\n/** Compressed ETC2 (SRGB+A1)*/\nConstants.TEXTUREFORMAT_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37495;\n/** Compressed ETC2 (RGB+A) */\nConstants.TEXTUREFORMAT_COMPRESSED_RGBA8_ETC2_EAC = 37496;\n/** Compressed ETC2 (SRGB+1) */\nConstants.TEXTUREFORMAT_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 37497;\n/** UNSIGNED_BYTE */\nConstants.TEXTURETYPE_UNSIGNED_BYTE = 0;\n/** UNSIGNED_BYTE (2nd reference) */\nConstants.TEXTURETYPE_UNSIGNED_INT = 0;\n/** FLOAT */\nConstants.TEXTURETYPE_FLOAT = 1;\n/** HALF_FLOAT */\nConstants.TEXTURETYPE_HALF_FLOAT = 2;\n/** BYTE */\nConstants.TEXTURETYPE_BYTE = 3;\n/** SHORT */\nConstants.TEXTURETYPE_SHORT = 4;\n/** UNSIGNED_SHORT */\nConstants.TEXTURETYPE_UNSIGNED_SHORT = 5;\n/** INT */\nConstants.TEXTURETYPE_INT = 6;\n/** UNSIGNED_INT */\nConstants.TEXTURETYPE_UNSIGNED_INTEGER = 7;\n/** UNSIGNED_SHORT_4_4_4_4 */\nConstants.TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4 = 8;\n/** UNSIGNED_SHORT_5_5_5_1 */\nConstants.TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1 = 9;\n/** UNSIGNED_SHORT_5_6_5 */\nConstants.TEXTURETYPE_UNSIGNED_SHORT_5_6_5 = 10;\n/** UNSIGNED_INT_2_10_10_10_REV */\nConstants.TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV = 11;\n/** UNSIGNED_INT_24_8 */\nConstants.TEXTURETYPE_UNSIGNED_INT_24_8 = 12;\n/** UNSIGNED_INT_10F_11F_11F_REV */\nConstants.TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV = 13;\n/** UNSIGNED_INT_5_9_9_9_REV */\nConstants.TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV = 14;\n/** FLOAT_32_UNSIGNED_INT_24_8_REV */\nConstants.TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV = 15;\n/** UNDEFINED */\nConstants.TEXTURETYPE_UNDEFINED = 16;\n/** nearest is mag = nearest and min = nearest and no mip */\nConstants.TEXTURE_NEAREST_SAMPLINGMODE = 1;\n/** mag = nearest and min = nearest and mip = none */\nConstants.TEXTURE_NEAREST_NEAREST = 1;\n/** Bilinear is mag = linear and min = linear and no mip */\nConstants.TEXTURE_BILINEAR_SAMPLINGMODE = 2;\n/** mag = linear and min = linear and mip = none */\nConstants.TEXTURE_LINEAR_LINEAR = 2;\n/** Trilinear is mag = linear and min = linear and mip = linear */\nConstants.TEXTURE_TRILINEAR_SAMPLINGMODE = 3;\n/** Trilinear is mag = linear and min = linear and mip = linear */\nConstants.TEXTURE_LINEAR_LINEAR_MIPLINEAR = 3;\n/** mag = nearest and min = nearest and mip = nearest */\nConstants.TEXTURE_NEAREST_NEAREST_MIPNEAREST = 4;\n/** mag = nearest and min = linear and mip = nearest */\nConstants.TEXTURE_NEAREST_LINEAR_MIPNEAREST = 5;\n/** mag = nearest and min = linear and mip = linear */\nConstants.TEXTURE_NEAREST_LINEAR_MIPLINEAR = 6;\n/** mag = nearest and min = linear and mip = none */\nConstants.TEXTURE_NEAREST_LINEAR = 7;\n/** nearest is mag = nearest and min = nearest and mip = linear */\nConstants.TEXTURE_NEAREST_NEAREST_MIPLINEAR = 8;\n/** mag = linear and min = nearest and mip = nearest */\nConstants.TEXTURE_LINEAR_NEAREST_MIPNEAREST = 9;\n/** mag = linear and min = nearest and mip = linear */\nConstants.TEXTURE_LINEAR_NEAREST_MIPLINEAR = 10;\n/** Bilinear is mag = linear and min = linear and mip = nearest */\nConstants.TEXTURE_LINEAR_LINEAR_MIPNEAREST = 11;\n/** mag = linear and min = nearest and mip = none */\nConstants.TEXTURE_LINEAR_NEAREST = 12;\n/** Explicit coordinates mode */\nConstants.TEXTURE_EXPLICIT_MODE = 0;\n/** Spherical coordinates mode */\nConstants.TEXTURE_SPHERICAL_MODE = 1;\n/** Planar coordinates mode */\nConstants.TEXTURE_PLANAR_MODE = 2;\n/** Cubic coordinates mode */\nConstants.TEXTURE_CUBIC_MODE = 3;\n/** Projection coordinates mode */\nConstants.TEXTURE_PROJECTION_MODE = 4;\n/** Skybox coordinates mode */\nConstants.TEXTURE_SKYBOX_MODE = 5;\n/** Inverse Cubic coordinates mode */\nConstants.TEXTURE_INVCUBIC_MODE = 6;\n/** Equirectangular coordinates mode */\nConstants.TEXTURE_EQUIRECTANGULAR_MODE = 7;\n/** Equirectangular Fixed coordinates mode */\nConstants.TEXTURE_FIXED_EQUIRECTANGULAR_MODE = 8;\n/** Equirectangular Fixed Mirrored coordinates mode */\nConstants.TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE = 9;\n/** Offline (baking) quality for texture filtering */\nConstants.TEXTURE_FILTERING_QUALITY_OFFLINE = 4096;\n/** High quality for texture filtering */\nConstants.TEXTURE_FILTERING_QUALITY_HIGH = 64;\n/** Medium quality for texture filtering */\nConstants.TEXTURE_FILTERING_QUALITY_MEDIUM = 16;\n/** Low quality for texture filtering */\nConstants.TEXTURE_FILTERING_QUALITY_LOW = 8;\n// Texture rescaling mode\n/** Defines that texture rescaling will use a floor to find the closer power of 2 size */\nConstants.SCALEMODE_FLOOR = 1;\n/** Defines that texture rescaling will look for the nearest power of 2 size */\nConstants.SCALEMODE_NEAREST = 2;\n/** Defines that texture rescaling will use a ceil to find the closer power of 2 size */\nConstants.SCALEMODE_CEILING = 3;\n/**\n * The dirty texture flag value\n */\nConstants.MATERIAL_TextureDirtyFlag = 1;\n/**\n * The dirty light flag value\n */\nConstants.MATERIAL_LightDirtyFlag = 2;\n/**\n * The dirty fresnel flag value\n */\nConstants.MATERIAL_FresnelDirtyFlag = 4;\n/**\n * The dirty attribute flag value\n */\nConstants.MATERIAL_AttributesDirtyFlag = 8;\n/**\n * The dirty misc flag value\n */\nConstants.MATERIAL_MiscDirtyFlag = 16;\n/**\n * The dirty prepass flag value\n */\nConstants.MATERIAL_PrePassDirtyFlag = 32;\n/**\n * The all dirty flag value\n */\nConstants.MATERIAL_AllDirtyFlag = 63;\n/**\n * Returns the triangle fill mode\n */\nConstants.MATERIAL_TriangleFillMode = 0;\n/**\n * Returns the wireframe mode\n */\nConstants.MATERIAL_WireFrameFillMode = 1;\n/**\n * Returns the point fill mode\n */\nConstants.MATERIAL_PointFillMode = 2;\n/**\n * Returns the point list draw mode\n */\nConstants.MATERIAL_PointListDrawMode = 3;\n/**\n * Returns the line list draw mode\n */\nConstants.MATERIAL_LineListDrawMode = 4;\n/**\n * Returns the line loop draw mode\n */\nConstants.MATERIAL_LineLoopDrawMode = 5;\n/**\n * Returns the line strip draw mode\n */\nConstants.MATERIAL_LineStripDrawMode = 6;\n/**\n * Returns the triangle strip draw mode\n */\nConstants.MATERIAL_TriangleStripDrawMode = 7;\n/**\n * Returns the triangle fan draw mode\n */\nConstants.MATERIAL_TriangleFanDrawMode = 8;\n/**\n * Stores the clock-wise side orientation\n */\nConstants.MATERIAL_ClockWiseSideOrientation = 0;\n/**\n * Stores the counter clock-wise side orientation\n */\nConstants.MATERIAL_CounterClockWiseSideOrientation = 1;\n/**\n * Nothing\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\n */\nConstants.ACTION_NothingTrigger = 0;\n/**\n * On pick\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\n */\nConstants.ACTION_OnPickTrigger = 1;\n/**\n * On left pick\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\n */\nConstants.ACTION_OnLeftPickTrigger = 2;\n/**\n * On right pick\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\n */\nConstants.ACTION_OnRightPickTrigger = 3;\n/**\n * On center pick\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\n */\nConstants.ACTION_OnCenterPickTrigger = 4;\n/**\n * On pick down\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\n */\nConstants.ACTION_OnPickDownTrigger = 5;\n/**\n * On double pick\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\n */\nConstants.ACTION_OnDoublePickTrigger = 6;\n/**\n * On pick up\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\n */\nConstants.ACTION_OnPickUpTrigger = 7;\n/**\n * On pick out.\n * This trigger will only be raised if you also declared a OnPickDown\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\n */\nConstants.ACTION_OnPickOutTrigger = 16;\n/**\n * On long press\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\n */\nConstants.ACTION_OnLongPressTrigger = 8;\n/**\n * On pointer over\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\n */\nConstants.ACTION_OnPointerOverTrigger = 9;\n/**\n * On pointer out\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\n */\nConstants.ACTION_OnPointerOutTrigger = 10;\n/**\n * On every frame\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\n */\nConstants.ACTION_OnEveryFrameTrigger = 11;\n/**\n * On intersection enter\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\n */\nConstants.ACTION_OnIntersectionEnterTrigger = 12;\n/**\n * On intersection exit\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\n */\nConstants.ACTION_OnIntersectionExitTrigger = 13;\n/**\n * On key down\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\n */\nConstants.ACTION_OnKeyDownTrigger = 14;\n/**\n * On key up\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\n */\nConstants.ACTION_OnKeyUpTrigger = 15;\n/**\n * Billboard mode will only apply to Y axis\n */\nConstants.PARTICLES_BILLBOARDMODE_Y = 2;\n/**\n * Billboard mode will apply to all axes\n */\nConstants.PARTICLES_BILLBOARDMODE_ALL = 7;\n/**\n * Special billboard mode where the particle will be biilboard to the camera but rotated to align with direction\n */\nConstants.PARTICLES_BILLBOARDMODE_STRETCHED = 8;\n/**\n * Special billboard mode where the particle will be billboard to the camera but only around the axis of the direction of particle emission\n */\nConstants.PARTICLES_BILLBOARDMODE_STRETCHED_LOCAL = 9;\n/** Default culling strategy : this is an exclusion test and it's the more accurate.\n *  Test order :\n *  Is the bounding sphere outside the frustum ?\n *  If not, are the bounding box vertices outside the frustum ?\n *  It not, then the cullable object is in the frustum.\n */\nConstants.MESHES_CULLINGSTRATEGY_STANDARD = 0;\n/** Culling strategy : Bounding Sphere Only.\n *  This is an exclusion test. It's faster than the standard strategy because the bounding box is not tested.\n *  It's also less accurate than the standard because some not visible objects can still be selected.\n *  Test : is the bounding sphere outside the frustum ?\n *  If not, then the cullable object is in the frustum.\n */\nConstants.MESHES_CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY = 1;\n/** Culling strategy : Optimistic Inclusion.\n *  This in an inclusion test first, then the standard exclusion test.\n *  This can be faster when a cullable object is expected to be almost always in the camera frustum.\n *  This could also be a little slower than the standard test when the tested object center is not the frustum but one of its bounding box vertex is still inside.\n *  Anyway, it's as accurate as the standard strategy.\n *  Test :\n *  Is the cullable object bounding sphere center in the frustum ?\n *  If not, apply the default culling strategy.\n */\nConstants.MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION = 2;\n/** Culling strategy : Optimistic Inclusion then Bounding Sphere Only.\n *  This in an inclusion test first, then the bounding sphere only exclusion test.\n *  This can be the fastest test when a cullable object is expected to be almost always in the camera frustum.\n *  This could also be a little slower than the BoundingSphereOnly strategy when the tested object center is not in the frustum but its bounding sphere still intersects it.\n *  It's less accurate than the standard strategy and as accurate as the BoundingSphereOnly strategy.\n *  Test :\n *  Is the cullable object bounding sphere center in the frustum ?\n *  If not, apply the Bounding Sphere Only strategy. No Bounding Box is tested here.\n */\nConstants.MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY = 3;\n/**\n * No logging while loading\n */\nConstants.SCENELOADER_NO_LOGGING = 0;\n/**\n * Minimal logging while loading\n */\nConstants.SCENELOADER_MINIMAL_LOGGING = 1;\n/**\n * Summary logging while loading\n */\nConstants.SCENELOADER_SUMMARY_LOGGING = 2;\n/**\n * Detailed logging while loading\n */\nConstants.SCENELOADER_DETAILED_LOGGING = 3;\n/**\n * Constant used to retrieve the irradiance texture index in the textures array in the prepass\n * using getIndex(Constants.PREPASS_IRRADIANCE_TEXTURE_TYPE)\n */\nConstants.PREPASS_IRRADIANCE_TEXTURE_TYPE = 0;\n/**\n * Constant used to retrieve the position texture index in the textures array in the prepass\n * using getIndex(Constants.PREPASS_POSITION_TEXTURE_INDEX)\n */\nConstants.PREPASS_POSITION_TEXTURE_TYPE = 1;\n/**\n * Constant used to retrieve the velocity texture index in the textures array in the prepass\n * using getIndex(Constants.PREPASS_VELOCITY_TEXTURE_INDEX)\n */\nConstants.PREPASS_VELOCITY_TEXTURE_TYPE = 2;\n/**\n * Constant used to retrieve the reflectivity texture index in the textures array in the prepass\n * using the getIndex(Constants.PREPASS_REFLECTIVITY_TEXTURE_TYPE)\n */\nConstants.PREPASS_REFLECTIVITY_TEXTURE_TYPE = 3;\n/**\n * Constant used to retrieve the lit color texture index in the textures array in the prepass\n * using the getIndex(Constants.PREPASS_COLOR_TEXTURE_TYPE)\n */\nConstants.PREPASS_COLOR_TEXTURE_TYPE = 4;\n/**\n * Constant used to retrieve depth index in the textures array in the prepass\n * using the getIndex(Constants.PREPASS_DEPTH_TEXTURE_TYPE)\n */\nConstants.PREPASS_DEPTH_TEXTURE_TYPE = 5;\n/**\n * Constant used to retrieve normal index in the textures array in the prepass\n * using the getIndex(Constants.PREPASS_NORMAL_TEXTURE_TYPE)\n */\nConstants.PREPASS_NORMAL_TEXTURE_TYPE = 6;\n/**\n * Constant used to retrieve albedo index in the textures array in the prepass\n * using the getIndex(Constants.PREPASS_ALBEDO_SQRT_TEXTURE_TYPE)\n */\nConstants.PREPASS_ALBEDO_SQRT_TEXTURE_TYPE = 7;\n/** Flag to create a readable buffer (the buffer can be the source of a copy) */\nConstants.BUFFER_CREATIONFLAG_READ = 1;\n/** Flag to create a writable buffer (the buffer can be the destination of a copy) */\nConstants.BUFFER_CREATIONFLAG_WRITE = 2;\n/** Flag to create a readable and writable buffer */\nConstants.BUFFER_CREATIONFLAG_READWRITE = 3;\n/** Flag to create a buffer suitable to be used as a uniform buffer */\nConstants.BUFFER_CREATIONFLAG_UNIFORM = 4;\n/** Flag to create a buffer suitable to be used as a vertex buffer */\nConstants.BUFFER_CREATIONFLAG_VERTEX = 8;\n/** Flag to create a buffer suitable to be used as an index buffer */\nConstants.BUFFER_CREATIONFLAG_INDEX = 16;\n/** Flag to create a buffer suitable to be used as a storage buffer */\nConstants.BUFFER_CREATIONFLAG_STORAGE = 32;\n/**\n * Prefixes used by the engine for sub mesh draw wrappers\n */\n/** @internal */\nConstants.RENDERPASS_MAIN = 0;\n/**\n * Constant used as key code for Alt key\n */\nConstants.INPUT_ALT_KEY = 18;\n/**\n * Constant used as key code for Ctrl key\n */\nConstants.INPUT_CTRL_KEY = 17;\n/**\n * Constant used as key code for Meta key (Left Win, Left Cmd)\n */\nConstants.INPUT_META_KEY1 = 91;\n/**\n * Constant used as key code for Meta key (Right Win)\n */\nConstants.INPUT_META_KEY2 = 92;\n/**\n * Constant used as key code for Meta key (Right Win, Right Cmd)\n */\nConstants.INPUT_META_KEY3 = 93;\n/**\n * Constant used as key code for Shift key\n */\nConstants.INPUT_SHIFT_KEY = 16;\n/** Standard snapshot rendering. In this mode, some form of dynamic behavior is possible (for eg, uniform buffers are still updated) */\nConstants.SNAPSHOTRENDERING_STANDARD = 0;\n/** Fast snapshot rendering. In this mode, everything is static and only some limited form of dynamic behaviour is possible */\nConstants.SNAPSHOTRENDERING_FAST = 1;\n/**\n * This is the default projection mode used by the cameras.\n * It helps recreating a feeling of perspective and better appreciate depth.\n * This is the best way to simulate real life cameras.\n */\nConstants.PERSPECTIVE_CAMERA = 0;\n/**\n * This helps creating camera with an orthographic mode.\n * Orthographic is commonly used in engineering as a means to produce object specifications that communicate dimensions unambiguously, each line of 1 unit length (cm, meter..whatever) will appear to have the same length everywhere on the drawing. This allows the drafter to dimension only a subset of lines and let the reader know that other lines of that length on the drawing are also that length in reality. Every parallel line in the drawing is also parallel in the object.\n */\nConstants.ORTHOGRAPHIC_CAMERA = 1;\n/**\n * This is the default FOV mode for perspective cameras.\n * This setting aligns the upper and lower bounds of the viewport to the upper and lower bounds of the camera frustum.\n */\nConstants.FOVMODE_VERTICAL_FIXED = 0;\n/**\n * This setting aligns the left and right bounds of the viewport to the left and right bounds of the camera frustum.\n */\nConstants.FOVMODE_HORIZONTAL_FIXED = 1;\n/**\n * This specifies there is no need for a camera rig.\n * Basically only one eye is rendered corresponding to the camera.\n */\nConstants.RIG_MODE_NONE = 0;\n/**\n * Simulates a camera Rig with one blue eye and one red eye.\n * This can be use with 3d blue and red glasses.\n */\nConstants.RIG_MODE_STEREOSCOPIC_ANAGLYPH = 10;\n/**\n * Defines that both eyes of the camera will be rendered side by side with a parallel target.\n */\nConstants.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL = 11;\n/**\n * Defines that both eyes of the camera will be rendered side by side with a none parallel target.\n */\nConstants.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED = 12;\n/**\n * Defines that both eyes of the camera will be rendered over under each other.\n */\nConstants.RIG_MODE_STEREOSCOPIC_OVERUNDER = 13;\n/**\n * Defines that both eyes of the camera will be rendered on successive lines interlaced for passive 3d monitors.\n */\nConstants.RIG_MODE_STEREOSCOPIC_INTERLACED = 14;\n/**\n * Defines that both eyes of the camera should be renderered in a VR mode (carbox).\n */\nConstants.RIG_MODE_VR = 20;\n/**\n * Defines that both eyes of the camera should be renderered in a VR mode (webVR).\n */\nConstants.RIG_MODE_WEBVR = 21;\n/**\n * Custom rig mode allowing rig cameras to be populated manually with any number of cameras\n */\nConstants.RIG_MODE_CUSTOM = 22;\n/**\n * Maximum number of uv sets supported\n */\nConstants.MAX_SUPPORTED_UV_SETS = 6;\n/**\n * GL constants\n */\n/** Alpha blend equation: ADD */\nConstants.GL_ALPHA_EQUATION_ADD = 0x8006;\n/** Alpha equation: MIN */\nConstants.GL_ALPHA_EQUATION_MIN = 0x8007;\n/** Alpha equation: MAX */\nConstants.GL_ALPHA_EQUATION_MAX = 0x8008;\n/** Alpha equation: SUBTRACT */\nConstants.GL_ALPHA_EQUATION_SUBTRACT = 0x800a;\n/** Alpha equation: REVERSE_SUBTRACT */\nConstants.GL_ALPHA_EQUATION_REVERSE_SUBTRACT = 0x800b;\n/** Alpha blend function: SRC */\nConstants.GL_ALPHA_FUNCTION_SRC = 0x0300;\n/** Alpha blend function: ONE_MINUS_SRC */\nConstants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_COLOR = 0x0301;\n/** Alpha blend function: SRC_ALPHA */\nConstants.GL_ALPHA_FUNCTION_SRC_ALPHA = 0x0302;\n/** Alpha blend function: ONE_MINUS_SRC_ALPHA */\nConstants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_ALPHA = 0x0303;\n/** Alpha blend function: DST_ALPHA */\nConstants.GL_ALPHA_FUNCTION_DST_ALPHA = 0x0304;\n/** Alpha blend function: ONE_MINUS_DST_ALPHA */\nConstants.GL_ALPHA_FUNCTION_ONE_MINUS_DST_ALPHA = 0x0305;\n/** Alpha blend function: ONE_MINUS_DST */\nConstants.GL_ALPHA_FUNCTION_DST_COLOR = 0x0306;\n/** Alpha blend function: ONE_MINUS_DST */\nConstants.GL_ALPHA_FUNCTION_ONE_MINUS_DST_COLOR = 0x0307;\n/** Alpha blend function: SRC_ALPHA_SATURATED */\nConstants.GL_ALPHA_FUNCTION_SRC_ALPHA_SATURATED = 0x0308;\n/** Alpha blend function: CONSTANT */\nConstants.GL_ALPHA_FUNCTION_CONSTANT_COLOR = 0x8001;\n/** Alpha blend function: ONE_MINUS_CONSTANT */\nConstants.GL_ALPHA_FUNCTION_ONE_MINUS_CONSTANT_COLOR = 0x8002;\n/** Alpha blend function: CONSTANT_ALPHA */\nConstants.GL_ALPHA_FUNCTION_CONSTANT_ALPHA = 0x8003;\n/** Alpha blend function: ONE_MINUS_CONSTANT_ALPHA */\nConstants.GL_ALPHA_FUNCTION_ONE_MINUS_CONSTANT_ALPHA = 0x8004;\n/** URL to the snippet server. Points to the public snippet server by default */\nConstants.SnippetUrl = \"https://snippet.babylonjs.com\";\n//# sourceMappingURL=constants.js.map","import { Observable } from \"../Misc/observable.js\";\nimport { InternalTexture, InternalTextureSource } from \"../Materials/Textures/internalTexture.js\";\nimport { IsDocumentAvailable, IsWindowObjectExist } from \"../Misc/domManagement.js\";\nimport { EngineStore } from \"./engineStore.js\";\nimport { _WarnImport } from \"../Misc/devTools.js\";\nimport { ThinEngine } from \"./thinEngine.js\";\n\nimport { PerformanceMonitor } from \"../Misc/performanceMonitor.js\";\nimport { PerfCounter } from \"../Misc/perfCounter.js\";\nimport { WebGLDataBuffer } from \"../Meshes/WebGL/webGLDataBuffer.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { WebGLHardwareTexture } from \"./WebGL/webGLHardwareTexture.js\";\nimport \"./Extensions/engine.alpha.js\";\nimport \"./Extensions/engine.readTexture.js\";\nimport \"./Extensions/engine.dynamicBuffer.js\";\n/**\n * The engine class is responsible for interfacing with all lower-level APIs such as WebGL and Audio\n */\nexport class Engine extends ThinEngine {\n    /**\n     * Returns the current npm package of the sdk\n     */\n    // Not mixed with Version for tooling purpose.\n    static get NpmPackage() {\n        return ThinEngine.NpmPackage;\n    }\n    /**\n     * Returns the current version of the framework\n     */\n    static get Version() {\n        return ThinEngine.Version;\n    }\n    /** Gets the list of created engines */\n    static get Instances() {\n        return EngineStore.Instances;\n    }\n    /**\n     * Gets the latest created engine\n     */\n    static get LastCreatedEngine() {\n        return EngineStore.LastCreatedEngine;\n    }\n    /**\n     * Gets the latest created scene\n     */\n    static get LastCreatedScene() {\n        return EngineStore.LastCreatedScene;\n    }\n    /** @internal */\n    /**\n     * Engine abstraction for loading and creating an image bitmap from a given source string.\n     * @param imageSource source to load the image from.\n     * @param options An object that sets options for the image's extraction.\n     * @returns ImageBitmap.\n     */\n    _createImageBitmapFromSource(imageSource, options) {\n        const promise = new Promise((resolve, reject) => {\n            const image = new Image();\n            image.onload = () => {\n                image.decode().then(() => {\n                    this.createImageBitmap(image, options).then((imageBitmap) => {\n                        resolve(imageBitmap);\n                    });\n                });\n            };\n            image.onerror = () => {\n                reject(`Error loading image ${image.src}`);\n            };\n            image.src = imageSource;\n        });\n        return promise;\n    }\n    /**\n     * Engine abstraction for createImageBitmap\n     * @param image source for image\n     * @param options An object that sets options for the image's extraction.\n     * @returns ImageBitmap\n     */\n    createImageBitmap(image, options) {\n        return createImageBitmap(image, options);\n    }\n    /**\n     * Resize an image and returns the image data as an uint8array\n     * @param image image to resize\n     * @param bufferWidth destination buffer width\n     * @param bufferHeight destination buffer height\n     * @returns an uint8array containing RGBA values of bufferWidth * bufferHeight size\n     */\n    resizeImageBitmap(image, bufferWidth, bufferHeight) {\n        const canvas = this.createCanvas(bufferWidth, bufferHeight);\n        const context = canvas.getContext(\"2d\");\n        if (!context) {\n            throw new Error(\"Unable to get 2d context for resizeImageBitmap\");\n        }\n        context.drawImage(image, 0, 0);\n        // Create VertexData from map data\n        // Cast is due to wrong definition in lib.d.ts from ts 1.3 - https://github.com/Microsoft/TypeScript/issues/949\n        const buffer = context.getImageData(0, 0, bufferWidth, bufferHeight).data;\n        return buffer;\n    }\n    /**\n     * Will flag all materials in all scenes in all engines as dirty to trigger new shader compilation\n     * @param flag defines which part of the materials must be marked as dirty\n     * @param predicate defines a predicate used to filter which materials should be affected\n     */\n    static MarkAllMaterialsAsDirty(flag, predicate) {\n        for (let engineIndex = 0; engineIndex < Engine.Instances.length; engineIndex++) {\n            const engine = Engine.Instances[engineIndex];\n            for (let sceneIndex = 0; sceneIndex < engine.scenes.length; sceneIndex++) {\n                engine.scenes[sceneIndex].markAllMaterialsAsDirty(flag, predicate);\n            }\n        }\n    }\n    /**\n     * Method called to create the default loading screen.\n     * This can be overridden in your own app.\n     * @param canvas The rendering canvas element\n     * @returns The loading screen\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    static DefaultLoadingScreenFactory(canvas) {\n        throw _WarnImport(\"LoadingScreen\");\n    }\n    get _supportsHardwareTextureRescaling() {\n        return !!Engine._RescalePostProcessFactory;\n    }\n    /**\n     * Gets the performance monitor attached to this engine\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#engineinstrumentation\n     */\n    get performanceMonitor() {\n        return this._performanceMonitor;\n    }\n    /**\n     * (WebGPU only) True (default) to be in compatibility mode, meaning rendering all existing scenes without artifacts (same rendering than WebGL).\n     * Setting the property to false will improve performances but may not work in some scenes if some precautions are not taken.\n     * See https://doc.babylonjs.com/setup/support/webGPU/webGPUOptimization/webGPUNonCompatibilityMode for more details\n     */\n    get compatibilityMode() {\n        return this._compatibilityMode;\n    }\n    set compatibilityMode(mode) {\n        // not supported in WebGL\n        this._compatibilityMode = true;\n    }\n    // Events\n    /**\n     * Gets the HTML element used to attach event listeners\n     * @returns a HTML element\n     */\n    getInputElement() {\n        return this._renderingCanvas;\n    }\n    /**\n     * Creates a new engine\n     * @param canvasOrContext defines the canvas or WebGL context to use for rendering. If you provide a WebGL context, Babylon.js will not hook events on the canvas (like pointers, keyboards, etc...) so no event observables will be available. This is mostly used when Babylon.js is used as a plugin on a system which already used the WebGL context\n     * @param antialias defines enable antialiasing (default: false)\n     * @param options defines further options to be sent to the getContext() function\n     * @param adaptToDeviceRatio defines whether to adapt to the device's viewport characteristics (default: false)\n     */\n    constructor(canvasOrContext, antialias, options, adaptToDeviceRatio = false) {\n        super(canvasOrContext, antialias, options, adaptToDeviceRatio);\n        // Members\n        /**\n         * Gets or sets a boolean to enable/disable IndexedDB support and avoid XHR on .manifest\n         **/\n        this.enableOfflineSupport = false;\n        /**\n         * Gets or sets a boolean to enable/disable checking manifest if IndexedDB support is enabled (js will always consider the database is up to date)\n         **/\n        this.disableManifestCheck = false;\n        /**\n         * Gets or sets a boolean to enable/disable the context menu (right-click) from appearing on the main canvas\n         */\n        this.disableContextMenu = true;\n        /**\n         * Gets the list of created scenes\n         */\n        this.scenes = new Array();\n        /** @internal */\n        this._virtualScenes = new Array();\n        /**\n         * Event raised when a new scene is created\n         */\n        this.onNewSceneAddedObservable = new Observable();\n        /**\n         * Gets the list of created postprocesses\n         */\n        this.postProcesses = new Array();\n        /**\n         * Gets a boolean indicating if the pointer is currently locked\n         */\n        this.isPointerLock = false;\n        // Observables\n        /**\n         * Observable event triggered each time the rendering canvas is resized\n         */\n        this.onResizeObservable = new Observable();\n        /**\n         * Observable event triggered each time the canvas loses focus\n         */\n        this.onCanvasBlurObservable = new Observable();\n        /**\n         * Observable event triggered each time the canvas gains focus\n         */\n        this.onCanvasFocusObservable = new Observable();\n        /**\n         * Observable event triggered each time the canvas receives pointerout event\n         */\n        this.onCanvasPointerOutObservable = new Observable();\n        /**\n         * Observable raised when the engine begins a new frame\n         */\n        this.onBeginFrameObservable = new Observable();\n        /**\n         * If set, will be used to request the next animation frame for the render loop\n         */\n        this.customAnimationFrameRequester = null;\n        /**\n         * Observable raised when the engine ends the current frame\n         */\n        this.onEndFrameObservable = new Observable();\n        /**\n         * Observable raised when the engine is about to compile a shader\n         */\n        this.onBeforeShaderCompilationObservable = new Observable();\n        /**\n         * Observable raised when the engine has just compiled a shader\n         */\n        this.onAfterShaderCompilationObservable = new Observable();\n        // Deterministic lockstepMaxSteps\n        this._deterministicLockstep = false;\n        this._lockstepMaxSteps = 4;\n        this._timeStep = 1 / 60;\n        // FPS\n        this._fps = 60;\n        this._deltaTime = 0;\n        /** @internal */\n        this._drawCalls = new PerfCounter();\n        /** Gets or sets the tab index to set to the rendering canvas. 1 is the minimum value to set to be able to capture keyboard events */\n        this.canvasTabIndex = 1;\n        /**\n         * Turn this value on if you want to pause FPS computation when in background\n         */\n        this.disablePerformanceMonitorInBackground = false;\n        this._performanceMonitor = new PerformanceMonitor();\n        this._compatibilityMode = true;\n        /**\n         * Gets or sets the current render pass id\n         */\n        this.currentRenderPassId = 0;\n        this._renderPassNames = [\"main\"];\n        Engine.Instances.push(this);\n        if (!canvasOrContext) {\n            return;\n        }\n        this._features.supportRenderPasses = true;\n        options = this._creationOptions;\n        if (canvasOrContext.getContext) {\n            const canvas = canvasOrContext;\n            this._sharedInit(canvas);\n            this._connectVREvents();\n        }\n        // Load WebVR Devices\n        this._prepareVRComponent();\n        if (options.autoEnableWebVR) {\n            this.initWebVR();\n        }\n    }\n    _initGLContext() {\n        super._initGLContext();\n        this._rescalePostProcess = null;\n    }\n    /**\n     * Shared initialization across engines types.\n     * @param canvas The canvas associated with this instance of the engine.\n     */\n    _sharedInit(canvas) {\n        super._sharedInit(canvas);\n        this._onCanvasFocus = () => {\n            this.onCanvasFocusObservable.notifyObservers(this);\n        };\n        this._onCanvasBlur = () => {\n            this.onCanvasBlurObservable.notifyObservers(this);\n        };\n        this._onCanvasContextMenu = (evt) => {\n            if (this.disableContextMenu) {\n                evt.preventDefault();\n            }\n        };\n        canvas.addEventListener(\"focus\", this._onCanvasFocus);\n        canvas.addEventListener(\"blur\", this._onCanvasBlur);\n        canvas.addEventListener(\"contextmenu\", this._onCanvasContextMenu);\n        this._onBlur = () => {\n            if (this.disablePerformanceMonitorInBackground) {\n                this._performanceMonitor.disable();\n            }\n            this._windowIsBackground = true;\n        };\n        this._onFocus = () => {\n            if (this.disablePerformanceMonitorInBackground) {\n                this._performanceMonitor.enable();\n            }\n            this._windowIsBackground = false;\n        };\n        this._onCanvasPointerOut = (ev) => {\n            // Check that the element at the point of the pointer out isn't the canvas and if it isn't, notify observers\n            // Note: This is a workaround for a bug with Safari\n            if (document.elementFromPoint(ev.clientX, ev.clientY) !== canvas) {\n                this.onCanvasPointerOutObservable.notifyObservers(ev);\n            }\n        };\n        const hostWindow = this.getHostWindow(); // it calls IsWindowObjectExist()\n        if (hostWindow && typeof hostWindow.addEventListener === \"function\") {\n            hostWindow.addEventListener(\"blur\", this._onBlur);\n            hostWindow.addEventListener(\"focus\", this._onFocus);\n        }\n        canvas.addEventListener(\"pointerout\", this._onCanvasPointerOut);\n        if (!this._creationOptions.doNotHandleTouchAction) {\n            this._disableTouchAction();\n        }\n        // Create Audio Engine if needed.\n        if (!Engine.audioEngine && this._creationOptions.audioEngine && Engine.AudioEngineFactory) {\n            Engine.audioEngine = Engine.AudioEngineFactory(this.getRenderingCanvas(), this.getAudioContext(), this.getAudioDestination());\n        }\n        if (IsDocumentAvailable()) {\n            // Fullscreen\n            this._onFullscreenChange = () => {\n                this.isFullscreen = !!document.fullscreenElement;\n                // Pointer lock\n                if (this.isFullscreen && this._pointerLockRequested && canvas) {\n                    Engine._RequestPointerlock(canvas);\n                }\n            };\n            document.addEventListener(\"fullscreenchange\", this._onFullscreenChange, false);\n            document.addEventListener(\"webkitfullscreenchange\", this._onFullscreenChange, false);\n            // Pointer lock\n            this._onPointerLockChange = () => {\n                this.isPointerLock = document.pointerLockElement === canvas;\n            };\n            document.addEventListener(\"pointerlockchange\", this._onPointerLockChange, false);\n            document.addEventListener(\"webkitpointerlockchange\", this._onPointerLockChange, false);\n        }\n        this.enableOfflineSupport = Engine.OfflineProviderFactory !== undefined;\n        this._deterministicLockstep = !!this._creationOptions.deterministicLockstep;\n        this._lockstepMaxSteps = this._creationOptions.lockstepMaxSteps || 0;\n        this._timeStep = this._creationOptions.timeStep || 1 / 60;\n    }\n    /**\n     * Gets current aspect ratio\n     * @param viewportOwner defines the camera to use to get the aspect ratio\n     * @param useScreen defines if screen size must be used (or the current render target if any)\n     * @returns a number defining the aspect ratio\n     */\n    getAspectRatio(viewportOwner, useScreen = false) {\n        const viewport = viewportOwner.viewport;\n        return (this.getRenderWidth(useScreen) * viewport.width) / (this.getRenderHeight(useScreen) * viewport.height);\n    }\n    /**\n     * Gets current screen aspect ratio\n     * @returns a number defining the aspect ratio\n     */\n    getScreenAspectRatio() {\n        return this.getRenderWidth(true) / this.getRenderHeight(true);\n    }\n    /**\n     * Gets the client rect of the HTML canvas attached with the current webGL context\n     * @returns a client rectangle\n     */\n    getRenderingCanvasClientRect() {\n        if (!this._renderingCanvas) {\n            return null;\n        }\n        return this._renderingCanvas.getBoundingClientRect();\n    }\n    /**\n     * Gets the client rect of the HTML element used for events\n     * @returns a client rectangle\n     */\n    getInputElementClientRect() {\n        if (!this._renderingCanvas) {\n            return null;\n        }\n        return this.getInputElement().getBoundingClientRect();\n    }\n    /**\n     * Gets a boolean indicating that the engine is running in deterministic lock step mode\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\n     * @returns true if engine is in deterministic lock step mode\n     */\n    isDeterministicLockStep() {\n        return this._deterministicLockstep;\n    }\n    /**\n     * Gets the max steps when engine is running in deterministic lock step\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\n     * @returns the max steps\n     */\n    getLockstepMaxSteps() {\n        return this._lockstepMaxSteps;\n    }\n    /**\n     * Returns the time in ms between steps when using deterministic lock step.\n     * @returns time step in (ms)\n     */\n    getTimeStep() {\n        return this._timeStep * 1000;\n    }\n    /**\n     * Force the mipmap generation for the given render target texture\n     * @param texture defines the render target texture to use\n     * @param unbind defines whether or not to unbind the texture after generation. Defaults to true.\n     */\n    generateMipMapsForCubemap(texture, unbind = true) {\n        if (texture.generateMipMaps) {\n            const gl = this._gl;\n            this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\n            gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\n            if (unbind) {\n                this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\n            }\n        }\n    }\n    /** States */\n    /**\n     * Gets a boolean indicating if depth writing is enabled\n     * @returns the current depth writing state\n     */\n    getDepthWrite() {\n        return this._depthCullingState.depthMask;\n    }\n    /**\n     * Enable or disable depth writing\n     * @param enable defines the state to set\n     */\n    setDepthWrite(enable) {\n        this._depthCullingState.depthMask = enable;\n    }\n    /**\n     * Gets a boolean indicating if stencil buffer is enabled\n     * @returns the current stencil buffer state\n     */\n    getStencilBuffer() {\n        return this._stencilState.stencilTest;\n    }\n    /**\n     * Enable or disable the stencil buffer\n     * @param enable defines if the stencil buffer must be enabled or disabled\n     */\n    setStencilBuffer(enable) {\n        this._stencilState.stencilTest = enable;\n    }\n    /**\n     * Gets the current stencil mask\n     * @returns a number defining the new stencil mask to use\n     */\n    getStencilMask() {\n        return this._stencilState.stencilMask;\n    }\n    /**\n     * Sets the current stencil mask\n     * @param mask defines the new stencil mask to use\n     */\n    setStencilMask(mask) {\n        this._stencilState.stencilMask = mask;\n    }\n    /**\n     * Gets the current stencil function\n     * @returns a number defining the stencil function to use\n     */\n    getStencilFunction() {\n        return this._stencilState.stencilFunc;\n    }\n    /**\n     * Gets the current stencil reference value\n     * @returns a number defining the stencil reference value to use\n     */\n    getStencilFunctionReference() {\n        return this._stencilState.stencilFuncRef;\n    }\n    /**\n     * Gets the current stencil mask\n     * @returns a number defining the stencil mask to use\n     */\n    getStencilFunctionMask() {\n        return this._stencilState.stencilFuncMask;\n    }\n    /**\n     * Sets the current stencil function\n     * @param stencilFunc defines the new stencil function to use\n     */\n    setStencilFunction(stencilFunc) {\n        this._stencilState.stencilFunc = stencilFunc;\n    }\n    /**\n     * Sets the current stencil reference\n     * @param reference defines the new stencil reference to use\n     */\n    setStencilFunctionReference(reference) {\n        this._stencilState.stencilFuncRef = reference;\n    }\n    /**\n     * Sets the current stencil mask\n     * @param mask defines the new stencil mask to use\n     */\n    setStencilFunctionMask(mask) {\n        this._stencilState.stencilFuncMask = mask;\n    }\n    /**\n     * Gets the current stencil operation when stencil fails\n     * @returns a number defining stencil operation to use when stencil fails\n     */\n    getStencilOperationFail() {\n        return this._stencilState.stencilOpStencilFail;\n    }\n    /**\n     * Gets the current stencil operation when depth fails\n     * @returns a number defining stencil operation to use when depth fails\n     */\n    getStencilOperationDepthFail() {\n        return this._stencilState.stencilOpDepthFail;\n    }\n    /**\n     * Gets the current stencil operation when stencil passes\n     * @returns a number defining stencil operation to use when stencil passes\n     */\n    getStencilOperationPass() {\n        return this._stencilState.stencilOpStencilDepthPass;\n    }\n    /**\n     * Sets the stencil operation to use when stencil fails\n     * @param operation defines the stencil operation to use when stencil fails\n     */\n    setStencilOperationFail(operation) {\n        this._stencilState.stencilOpStencilFail = operation;\n    }\n    /**\n     * Sets the stencil operation to use when depth fails\n     * @param operation defines the stencil operation to use when depth fails\n     */\n    setStencilOperationDepthFail(operation) {\n        this._stencilState.stencilOpDepthFail = operation;\n    }\n    /**\n     * Sets the stencil operation to use when stencil passes\n     * @param operation defines the stencil operation to use when stencil passes\n     */\n    setStencilOperationPass(operation) {\n        this._stencilState.stencilOpStencilDepthPass = operation;\n    }\n    /**\n     * Sets a boolean indicating if the dithering state is enabled or disabled\n     * @param value defines the dithering state\n     */\n    setDitheringState(value) {\n        if (value) {\n            this._gl.enable(this._gl.DITHER);\n        }\n        else {\n            this._gl.disable(this._gl.DITHER);\n        }\n    }\n    /**\n     * Sets a boolean indicating if the rasterizer state is enabled or disabled\n     * @param value defines the rasterizer state\n     */\n    setRasterizerState(value) {\n        if (value) {\n            this._gl.disable(this._gl.RASTERIZER_DISCARD);\n        }\n        else {\n            this._gl.enable(this._gl.RASTERIZER_DISCARD);\n        }\n    }\n    /**\n     * Gets the current depth function\n     * @returns a number defining the depth function\n     */\n    getDepthFunction() {\n        return this._depthCullingState.depthFunc;\n    }\n    /**\n     * Sets the current depth function\n     * @param depthFunc defines the function to use\n     */\n    setDepthFunction(depthFunc) {\n        this._depthCullingState.depthFunc = depthFunc;\n    }\n    /**\n     * Sets the current depth function to GREATER\n     */\n    setDepthFunctionToGreater() {\n        this.setDepthFunction(516);\n    }\n    /**\n     * Sets the current depth function to GEQUAL\n     */\n    setDepthFunctionToGreaterOrEqual() {\n        this.setDepthFunction(518);\n    }\n    /**\n     * Sets the current depth function to LESS\n     */\n    setDepthFunctionToLess() {\n        this.setDepthFunction(513);\n    }\n    /**\n     * Sets the current depth function to LEQUAL\n     */\n    setDepthFunctionToLessOrEqual() {\n        this.setDepthFunction(515);\n    }\n    /**\n     * Caches the the state of the stencil buffer\n     */\n    cacheStencilState() {\n        this._cachedStencilBuffer = this.getStencilBuffer();\n        this._cachedStencilFunction = this.getStencilFunction();\n        this._cachedStencilMask = this.getStencilMask();\n        this._cachedStencilOperationPass = this.getStencilOperationPass();\n        this._cachedStencilOperationFail = this.getStencilOperationFail();\n        this._cachedStencilOperationDepthFail = this.getStencilOperationDepthFail();\n        this._cachedStencilReference = this.getStencilFunctionReference();\n    }\n    /**\n     * Restores the state of the stencil buffer\n     */\n    restoreStencilState() {\n        this.setStencilFunction(this._cachedStencilFunction);\n        this.setStencilMask(this._cachedStencilMask);\n        this.setStencilBuffer(this._cachedStencilBuffer);\n        this.setStencilOperationPass(this._cachedStencilOperationPass);\n        this.setStencilOperationFail(this._cachedStencilOperationFail);\n        this.setStencilOperationDepthFail(this._cachedStencilOperationDepthFail);\n        this.setStencilFunctionReference(this._cachedStencilReference);\n    }\n    /**\n     * Directly set the WebGL Viewport\n     * @param x defines the x coordinate of the viewport (in screen space)\n     * @param y defines the y coordinate of the viewport (in screen space)\n     * @param width defines the width of the viewport (in screen space)\n     * @param height defines the height of the viewport (in screen space)\n     * @returns the current viewport Object (if any) that is being replaced by this call. You can restore this viewport later on to go back to the original state\n     */\n    setDirectViewport(x, y, width, height) {\n        const currentViewport = this._cachedViewport;\n        this._cachedViewport = null;\n        this._viewport(x, y, width, height);\n        return currentViewport;\n    }\n    /**\n     * Executes a scissor clear (ie. a clear on a specific portion of the screen)\n     * @param x defines the x-coordinate of the bottom left corner of the clear rectangle\n     * @param y defines the y-coordinate of the corner of the clear rectangle\n     * @param width defines the width of the clear rectangle\n     * @param height defines the height of the clear rectangle\n     * @param clearColor defines the clear color\n     */\n    scissorClear(x, y, width, height, clearColor) {\n        this.enableScissor(x, y, width, height);\n        this.clear(clearColor, true, true, true);\n        this.disableScissor();\n    }\n    /**\n     * Enable scissor test on a specific rectangle (ie. render will only be executed on a specific portion of the screen)\n     * @param x defines the x-coordinate of the bottom left corner of the clear rectangle\n     * @param y defines the y-coordinate of the corner of the clear rectangle\n     * @param width defines the width of the clear rectangle\n     * @param height defines the height of the clear rectangle\n     */\n    enableScissor(x, y, width, height) {\n        const gl = this._gl;\n        // Change state\n        gl.enable(gl.SCISSOR_TEST);\n        gl.scissor(x, y, width, height);\n    }\n    /**\n     * Disable previously set scissor test rectangle\n     */\n    disableScissor() {\n        const gl = this._gl;\n        gl.disable(gl.SCISSOR_TEST);\n    }\n    /**\n     * @internal\n     */\n    _reportDrawCall(numDrawCalls = 1) {\n        this._drawCalls.addCount(numDrawCalls, false);\n    }\n    /**\n     * Initializes a webVR display and starts listening to display change events\n     * The onVRDisplayChangedObservable will be notified upon these changes\n     * @returns The onVRDisplayChangedObservable\n     */\n    initWebVR() {\n        throw _WarnImport(\"WebVRCamera\");\n    }\n    /** @internal */\n    _prepareVRComponent() {\n        // Do nothing as the engine side effect will overload it\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _connectVREvents(canvas, document) {\n        // Do nothing as the engine side effect will overload it\n    }\n    /** @internal */\n    _submitVRFrame() {\n        // Do nothing as the engine side effect will overload it\n    }\n    /**\n     * Call this function to leave webVR mode\n     * Will do nothing if webVR is not supported or if there is no webVR device\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/webVRCamera\n     */\n    disableVR() {\n        // Do nothing as the engine side effect will overload it\n    }\n    /**\n     * Gets a boolean indicating that the system is in VR mode and is presenting\n     * @returns true if VR mode is engaged\n     */\n    isVRPresenting() {\n        return false;\n    }\n    /** @internal */\n    _requestVRFrame() {\n        // Do nothing as the engine side effect will overload it\n    }\n    /**\n     * @internal\n     */\n    _loadFileAsync(url, offlineProvider, useArrayBuffer) {\n        return new Promise((resolve, reject) => {\n            this._loadFile(url, (data) => {\n                resolve(data);\n            }, undefined, offlineProvider, useArrayBuffer, (request, exception) => {\n                reject(exception);\n            });\n        });\n    }\n    /**\n     * Gets the source code of the vertex shader associated with a specific webGL program\n     * @param program defines the program to use\n     * @returns a string containing the source code of the vertex shader associated with the program\n     */\n    getVertexShaderSource(program) {\n        const shaders = this._gl.getAttachedShaders(program);\n        if (!shaders) {\n            return null;\n        }\n        return this._gl.getShaderSource(shaders[0]);\n    }\n    /**\n     * Gets the source code of the fragment shader associated with a specific webGL program\n     * @param program defines the program to use\n     * @returns a string containing the source code of the fragment shader associated with the program\n     */\n    getFragmentShaderSource(program) {\n        const shaders = this._gl.getAttachedShaders(program);\n        if (!shaders) {\n            return null;\n        }\n        return this._gl.getShaderSource(shaders[1]);\n    }\n    /**\n     * Sets a depth stencil texture from a render target to the according uniform.\n     * @param channel The texture channel\n     * @param uniform The uniform to set\n     * @param texture The render target texture containing the depth stencil texture to apply\n     * @param name The texture name\n     */\n    setDepthStencilTexture(channel, uniform, texture, name) {\n        if (channel === undefined) {\n            return;\n        }\n        if (uniform) {\n            this._boundUniforms[channel] = uniform;\n        }\n        if (!texture || !texture.depthStencilTexture) {\n            this._setTexture(channel, null, undefined, undefined, name);\n        }\n        else {\n            this._setTexture(channel, texture, false, true, name);\n        }\n    }\n    /**\n     * Sets a texture to the webGL context from a postprocess\n     * @param channel defines the channel to use\n     * @param postProcess defines the source postprocess\n     * @param name name of the channel\n     */\n    setTextureFromPostProcess(channel, postProcess, name) {\n        var _a;\n        let postProcessInput = null;\n        if (postProcess) {\n            if (postProcess._textures.data[postProcess._currentRenderTextureInd]) {\n                postProcessInput = postProcess._textures.data[postProcess._currentRenderTextureInd];\n            }\n            else if (postProcess._forcedOutputTexture) {\n                postProcessInput = postProcess._forcedOutputTexture;\n            }\n        }\n        this._bindTexture(channel, (_a = postProcessInput === null || postProcessInput === void 0 ? void 0 : postProcessInput.texture) !== null && _a !== void 0 ? _a : null, name);\n    }\n    /**\n     * Binds the output of the passed in post process to the texture channel specified\n     * @param channel The channel the texture should be bound to\n     * @param postProcess The post process which's output should be bound\n     * @param name name of the channel\n     */\n    setTextureFromPostProcessOutput(channel, postProcess, name) {\n        var _a, _b;\n        this._bindTexture(channel, (_b = (_a = postProcess === null || postProcess === void 0 ? void 0 : postProcess._outputTexture) === null || _a === void 0 ? void 0 : _a.texture) !== null && _b !== void 0 ? _b : null, name);\n    }\n    _rebuildBuffers() {\n        // Index / Vertex\n        for (const scene of this.scenes) {\n            scene.resetCachedMaterial();\n            scene._rebuildGeometries();\n            scene._rebuildTextures();\n        }\n        for (const scene of this._virtualScenes) {\n            scene.resetCachedMaterial();\n            scene._rebuildGeometries();\n            scene._rebuildTextures();\n        }\n        super._rebuildBuffers();\n    }\n    /** @internal */\n    _renderFrame() {\n        for (let index = 0; index < this._activeRenderLoops.length; index++) {\n            const renderFunction = this._activeRenderLoops[index];\n            renderFunction();\n        }\n    }\n    _renderLoop() {\n        if (!this._contextWasLost) {\n            let shouldRender = true;\n            if (!this.renderEvenInBackground && this._windowIsBackground) {\n                shouldRender = false;\n            }\n            if (shouldRender) {\n                // Start new frame\n                this.beginFrame();\n                // Child canvases\n                if (!this._renderViews()) {\n                    // Main frame\n                    this._renderFrame();\n                }\n                // Present\n                this.endFrame();\n            }\n        }\n        if (this._activeRenderLoops.length > 0) {\n            // Register new frame\n            if (this.customAnimationFrameRequester) {\n                this.customAnimationFrameRequester.requestID = this._queueNewFrame(this.customAnimationFrameRequester.renderFunction || this._boundRenderFunction, this.customAnimationFrameRequester);\n                this._frameHandler = this.customAnimationFrameRequester.requestID;\n            }\n            else if (this.isVRPresenting()) {\n                this._requestVRFrame();\n            }\n            else {\n                this._frameHandler = this._queueNewFrame(this._boundRenderFunction, this.getHostWindow());\n            }\n        }\n        else {\n            this._renderingQueueLaunched = false;\n        }\n    }\n    /** @internal */\n    _renderViews() {\n        return false;\n    }\n    /**\n     * Toggle full screen mode\n     * @param requestPointerLock defines if a pointer lock should be requested from the user\n     */\n    switchFullscreen(requestPointerLock) {\n        if (this.isFullscreen) {\n            this.exitFullscreen();\n        }\n        else {\n            this.enterFullscreen(requestPointerLock);\n        }\n    }\n    /**\n     * Enters full screen mode\n     * @param requestPointerLock defines if a pointer lock should be requested from the user\n     */\n    enterFullscreen(requestPointerLock) {\n        if (!this.isFullscreen) {\n            this._pointerLockRequested = requestPointerLock;\n            if (this._renderingCanvas) {\n                Engine._RequestFullscreen(this._renderingCanvas);\n            }\n        }\n    }\n    /**\n     * Exits full screen mode\n     */\n    exitFullscreen() {\n        if (this.isFullscreen) {\n            Engine._ExitFullscreen();\n        }\n    }\n    /**\n     * Enters Pointerlock mode\n     */\n    enterPointerlock() {\n        if (this._renderingCanvas) {\n            Engine._RequestPointerlock(this._renderingCanvas);\n        }\n    }\n    /**\n     * Exits Pointerlock mode\n     */\n    exitPointerlock() {\n        Engine._ExitPointerlock();\n    }\n    /**\n     * Begin a new frame\n     */\n    beginFrame() {\n        this._measureFps();\n        this.onBeginFrameObservable.notifyObservers(this);\n        super.beginFrame();\n    }\n    /**\n     * End the current frame\n     */\n    endFrame() {\n        super.endFrame();\n        this._submitVRFrame();\n        this.onEndFrameObservable.notifyObservers(this);\n    }\n    /**\n     * Resize the view according to the canvas' size\n     * @param forceSetSize true to force setting the sizes of the underlying canvas\n     */\n    resize(forceSetSize = false) {\n        // We're not resizing the size of the canvas while in VR mode & presenting\n        if (this.isVRPresenting()) {\n            return;\n        }\n        super.resize(forceSetSize);\n    }\n    /**\n     * Force a specific size of the canvas\n     * @param width defines the new canvas' width\n     * @param height defines the new canvas' height\n     * @param forceSetSize true to force setting the sizes of the underlying canvas\n     * @returns true if the size was changed\n     */\n    setSize(width, height, forceSetSize = false) {\n        if (!this._renderingCanvas) {\n            return false;\n        }\n        if (!super.setSize(width, height, forceSetSize)) {\n            return false;\n        }\n        if (this.scenes) {\n            for (let index = 0; index < this.scenes.length; index++) {\n                const scene = this.scenes[index];\n                for (let camIndex = 0; camIndex < scene.cameras.length; camIndex++) {\n                    const cam = scene.cameras[camIndex];\n                    cam._currentRenderId = 0;\n                }\n            }\n            if (this.onResizeObservable.hasObservers()) {\n                this.onResizeObservable.notifyObservers(this);\n            }\n        }\n        return true;\n    }\n    _deletePipelineContext(pipelineContext) {\n        const webGLPipelineContext = pipelineContext;\n        if (webGLPipelineContext && webGLPipelineContext.program) {\n            if (webGLPipelineContext.transformFeedback) {\n                this.deleteTransformFeedback(webGLPipelineContext.transformFeedback);\n                webGLPipelineContext.transformFeedback = null;\n            }\n        }\n        super._deletePipelineContext(pipelineContext);\n    }\n    createShaderProgram(pipelineContext, vertexCode, fragmentCode, defines, context, transformFeedbackVaryings = null) {\n        context = context || this._gl;\n        this.onBeforeShaderCompilationObservable.notifyObservers(this);\n        const program = super.createShaderProgram(pipelineContext, vertexCode, fragmentCode, defines, context, transformFeedbackVaryings);\n        this.onAfterShaderCompilationObservable.notifyObservers(this);\n        return program;\n    }\n    _createShaderProgram(pipelineContext, vertexShader, fragmentShader, context, transformFeedbackVaryings = null) {\n        const shaderProgram = context.createProgram();\n        pipelineContext.program = shaderProgram;\n        if (!shaderProgram) {\n            throw new Error(\"Unable to create program\");\n        }\n        context.attachShader(shaderProgram, vertexShader);\n        context.attachShader(shaderProgram, fragmentShader);\n        if (this.webGLVersion > 1 && transformFeedbackVaryings) {\n            const transformFeedback = this.createTransformFeedback();\n            this.bindTransformFeedback(transformFeedback);\n            this.setTranformFeedbackVaryings(shaderProgram, transformFeedbackVaryings);\n            pipelineContext.transformFeedback = transformFeedback;\n        }\n        context.linkProgram(shaderProgram);\n        if (this.webGLVersion > 1 && transformFeedbackVaryings) {\n            this.bindTransformFeedback(null);\n        }\n        pipelineContext.context = context;\n        pipelineContext.vertexShader = vertexShader;\n        pipelineContext.fragmentShader = fragmentShader;\n        if (!pipelineContext.isParallelCompiled) {\n            this._finalizePipelineContext(pipelineContext);\n        }\n        return shaderProgram;\n    }\n    /**\n     * @internal\n     */\n    _releaseTexture(texture) {\n        super._releaseTexture(texture);\n    }\n    /**\n     * @internal\n     */\n    _releaseRenderTargetWrapper(rtWrapper) {\n        super._releaseRenderTargetWrapper(rtWrapper);\n        // Set output texture of post process to null if the framebuffer has been released/disposed\n        this.scenes.forEach((scene) => {\n            scene.postProcesses.forEach((postProcess) => {\n                if (postProcess._outputTexture === rtWrapper) {\n                    postProcess._outputTexture = null;\n                }\n            });\n            scene.cameras.forEach((camera) => {\n                camera._postProcesses.forEach((postProcess) => {\n                    if (postProcess) {\n                        if (postProcess._outputTexture === rtWrapper) {\n                            postProcess._outputTexture = null;\n                        }\n                    }\n                });\n            });\n        });\n    }\n    /**\n     * Gets the names of the render passes that are currently created\n     * @returns list of the render pass names\n     */\n    getRenderPassNames() {\n        return this._renderPassNames;\n    }\n    /**\n     * Gets the name of the current render pass\n     * @returns name of the current render pass\n     */\n    getCurrentRenderPassName() {\n        return this._renderPassNames[this.currentRenderPassId];\n    }\n    /**\n     * Creates a render pass id\n     * @param name Name of the render pass (for debug purpose only)\n     * @returns the id of the new render pass\n     */\n    createRenderPassId(name) {\n        // Note: render pass id == 0 is always for the main render pass\n        const id = ++Engine._RenderPassIdCounter;\n        this._renderPassNames[id] = name !== null && name !== void 0 ? name : \"NONAME\";\n        return id;\n    }\n    /**\n     * Releases a render pass id\n     * @param id id of the render pass to release\n     */\n    releaseRenderPassId(id) {\n        this._renderPassNames[id] = undefined;\n        for (let s = 0; s < this.scenes.length; ++s) {\n            const scene = this.scenes[s];\n            for (let m = 0; m < scene.meshes.length; ++m) {\n                const mesh = scene.meshes[m];\n                if (mesh.subMeshes) {\n                    for (let b = 0; b < mesh.subMeshes.length; ++b) {\n                        const subMesh = mesh.subMeshes[b];\n                        subMesh._removeDrawWrapper(id);\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * @internal\n     * Rescales a texture\n     * @param source input texture\n     * @param destination destination texture\n     * @param scene scene to use to render the resize\n     * @param internalFormat format to use when resizing\n     * @param onComplete callback to be called when resize has completed\n     */\n    _rescaleTexture(source, destination, scene, internalFormat, onComplete) {\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MAG_FILTER, this._gl.LINEAR);\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MIN_FILTER, this._gl.LINEAR);\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_S, this._gl.CLAMP_TO_EDGE);\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_T, this._gl.CLAMP_TO_EDGE);\n        const rtt = this.createRenderTargetTexture({\n            width: destination.width,\n            height: destination.height,\n        }, {\n            generateMipMaps: false,\n            type: 0,\n            samplingMode: 2,\n            generateDepthBuffer: false,\n            generateStencilBuffer: false,\n        });\n        if (!this._rescalePostProcess && Engine._RescalePostProcessFactory) {\n            this._rescalePostProcess = Engine._RescalePostProcessFactory(this);\n        }\n        if (this._rescalePostProcess) {\n            this._rescalePostProcess.externalTextureSamplerBinding = true;\n            this._rescalePostProcess.getEffect().executeWhenCompiled(() => {\n                this._rescalePostProcess.onApply = function (effect) {\n                    effect._bindTexture(\"textureSampler\", source);\n                };\n                let hostingScene = scene;\n                if (!hostingScene) {\n                    hostingScene = this.scenes[this.scenes.length - 1];\n                }\n                hostingScene.postProcessManager.directRender([this._rescalePostProcess], rtt, true);\n                this._bindTextureDirectly(this._gl.TEXTURE_2D, destination, true);\n                this._gl.copyTexImage2D(this._gl.TEXTURE_2D, 0, internalFormat, 0, 0, destination.width, destination.height, 0);\n                this.unBindFramebuffer(rtt);\n                rtt.dispose();\n                if (onComplete) {\n                    onComplete();\n                }\n            });\n        }\n    }\n    // FPS\n    /**\n     * Gets the current framerate\n     * @returns a number representing the framerate\n     */\n    getFps() {\n        return this._fps;\n    }\n    /**\n     * Gets the time spent between current and previous frame\n     * @returns a number representing the delta time in ms\n     */\n    getDeltaTime() {\n        return this._deltaTime;\n    }\n    _measureFps() {\n        this._performanceMonitor.sampleFrame();\n        this._fps = this._performanceMonitor.averageFPS;\n        this._deltaTime = this._performanceMonitor.instantaneousFrameTime || 0;\n    }\n    /**\n     * Wraps an external web gl texture in a Babylon texture.\n     * @param texture defines the external texture\n     * @returns the babylon internal texture\n     */\n    wrapWebGLTexture(texture) {\n        const hardwareTexture = new WebGLHardwareTexture(texture, this._gl);\n        const internalTexture = new InternalTexture(this, InternalTextureSource.Unknown, true);\n        internalTexture._hardwareTexture = hardwareTexture;\n        internalTexture.isReady = true;\n        return internalTexture;\n    }\n    /**\n     * @internal\n     */\n    _uploadImageToTexture(texture, image, faceIndex = 0, lod = 0) {\n        const gl = this._gl;\n        const textureType = this._getWebGLTextureType(texture.type);\n        const format = this._getInternalFormat(texture.format);\n        const internalFormat = this._getRGBABufferInternalSizedFormat(texture.type, format);\n        const bindTarget = texture.isCube ? gl.TEXTURE_CUBE_MAP : gl.TEXTURE_2D;\n        this._bindTextureDirectly(bindTarget, texture, true);\n        this._unpackFlipY(texture.invertY);\n        let target = gl.TEXTURE_2D;\n        if (texture.isCube) {\n            target = gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex;\n        }\n        gl.texImage2D(target, lod, internalFormat, format, textureType, image);\n        this._bindTextureDirectly(bindTarget, null, true);\n    }\n    /**\n     * Updates a depth texture Comparison Mode and Function.\n     * If the comparison Function is equal to 0, the mode will be set to none.\n     * Otherwise, this only works in webgl 2 and requires a shadow sampler in the shader.\n     * @param texture The texture to set the comparison function for\n     * @param comparisonFunction The comparison function to set, 0 if no comparison required\n     */\n    updateTextureComparisonFunction(texture, comparisonFunction) {\n        if (this.webGLVersion === 1) {\n            Logger.Error(\"WebGL 1 does not support texture comparison.\");\n            return;\n        }\n        const gl = this._gl;\n        if (texture.isCube) {\n            this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, texture, true);\n            if (comparisonFunction === 0) {\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_FUNC, 515);\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_MODE, gl.NONE);\n            }\n            else {\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_FUNC, comparisonFunction);\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\n            }\n            this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, null);\n        }\n        else {\n            this._bindTextureDirectly(this._gl.TEXTURE_2D, texture, true);\n            if (comparisonFunction === 0) {\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, 515);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.NONE);\n            }\n            else {\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, comparisonFunction);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\n            }\n            this._bindTextureDirectly(this._gl.TEXTURE_2D, null);\n        }\n        texture._comparisonFunction = comparisonFunction;\n    }\n    /**\n     * Creates a webGL buffer to use with instantiation\n     * @param capacity defines the size of the buffer\n     * @returns the webGL buffer\n     */\n    createInstancesBuffer(capacity) {\n        const buffer = this._gl.createBuffer();\n        if (!buffer) {\n            throw new Error(\"Unable to create instance buffer\");\n        }\n        const result = new WebGLDataBuffer(buffer);\n        result.capacity = capacity;\n        this.bindArrayBuffer(result);\n        this._gl.bufferData(this._gl.ARRAY_BUFFER, capacity, this._gl.DYNAMIC_DRAW);\n        result.references = 1;\n        return result;\n    }\n    /**\n     * Delete a webGL buffer used with instantiation\n     * @param buffer defines the webGL buffer to delete\n     */\n    deleteInstancesBuffer(buffer) {\n        this._gl.deleteBuffer(buffer);\n    }\n    _clientWaitAsync(sync, flags = 0, intervalms = 10) {\n        const gl = this._gl;\n        return new Promise((resolve, reject) => {\n            const check = () => {\n                const res = gl.clientWaitSync(sync, flags, 0);\n                if (res == gl.WAIT_FAILED) {\n                    reject();\n                    return;\n                }\n                if (res == gl.TIMEOUT_EXPIRED) {\n                    setTimeout(check, intervalms);\n                    return;\n                }\n                resolve();\n            };\n            check();\n        });\n    }\n    /**\n     * @internal\n     */\n    _readPixelsAsync(x, y, w, h, format, type, outputBuffer) {\n        if (this._webGLVersion < 2) {\n            throw new Error(\"_readPixelsAsync only work on WebGL2+\");\n        }\n        const gl = this._gl;\n        const buf = gl.createBuffer();\n        gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf);\n        gl.bufferData(gl.PIXEL_PACK_BUFFER, outputBuffer.byteLength, gl.STREAM_READ);\n        gl.readPixels(x, y, w, h, format, type, 0);\n        gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\n        const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\n        if (!sync) {\n            return null;\n        }\n        gl.flush();\n        return this._clientWaitAsync(sync, 0, 10).then(() => {\n            gl.deleteSync(sync);\n            gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf);\n            gl.getBufferSubData(gl.PIXEL_PACK_BUFFER, 0, outputBuffer);\n            gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\n            gl.deleteBuffer(buf);\n            return outputBuffer;\n        });\n    }\n    dispose() {\n        this.hideLoadingUI();\n        this.onNewSceneAddedObservable.clear();\n        // Release postProcesses\n        while (this.postProcesses.length) {\n            this.postProcesses[0].dispose();\n        }\n        // Rescale PP\n        if (this._rescalePostProcess) {\n            this._rescalePostProcess.dispose();\n        }\n        // Release scenes\n        while (this.scenes.length) {\n            this.scenes[0].dispose();\n        }\n        while (this._virtualScenes.length) {\n            this._virtualScenes[0].dispose();\n        }\n        // Release audio engine\n        if (Engine.Instances.length === 1 && Engine.audioEngine) {\n            Engine.audioEngine.dispose();\n            Engine.audioEngine = null;\n        }\n        //WebVR\n        this.disableVR();\n        // Events\n        const hostWindow = this.getHostWindow(); // it calls IsWindowObjectExist()\n        if (hostWindow && typeof hostWindow.removeEventListener === \"function\") {\n            hostWindow.removeEventListener(\"blur\", this._onBlur);\n            hostWindow.removeEventListener(\"focus\", this._onFocus);\n        }\n        if (this._renderingCanvas) {\n            this._renderingCanvas.removeEventListener(\"focus\", this._onCanvasFocus);\n            this._renderingCanvas.removeEventListener(\"blur\", this._onCanvasBlur);\n            this._renderingCanvas.removeEventListener(\"pointerout\", this._onCanvasPointerOut);\n            this._renderingCanvas.removeEventListener(\"contextmenu\", this._onCanvasContextMenu);\n        }\n        if (IsDocumentAvailable()) {\n            document.removeEventListener(\"fullscreenchange\", this._onFullscreenChange);\n            document.removeEventListener(\"mozfullscreenchange\", this._onFullscreenChange);\n            document.removeEventListener(\"webkitfullscreenchange\", this._onFullscreenChange);\n            document.removeEventListener(\"msfullscreenchange\", this._onFullscreenChange);\n            document.removeEventListener(\"pointerlockchange\", this._onPointerLockChange);\n            document.removeEventListener(\"mspointerlockchange\", this._onPointerLockChange);\n            document.removeEventListener(\"mozpointerlockchange\", this._onPointerLockChange);\n            document.removeEventListener(\"webkitpointerlockchange\", this._onPointerLockChange);\n        }\n        super.dispose();\n        // Remove from Instances\n        const index = Engine.Instances.indexOf(this);\n        if (index >= 0) {\n            Engine.Instances.splice(index, 1);\n        }\n        // Observables\n        this.onResizeObservable.clear();\n        this.onCanvasBlurObservable.clear();\n        this.onCanvasFocusObservable.clear();\n        this.onCanvasPointerOutObservable.clear();\n        this.onBeginFrameObservable.clear();\n        this.onEndFrameObservable.clear();\n    }\n    _disableTouchAction() {\n        if (!this._renderingCanvas || !this._renderingCanvas.setAttribute) {\n            return;\n        }\n        this._renderingCanvas.setAttribute(\"touch-action\", \"none\");\n        this._renderingCanvas.style.touchAction = \"none\";\n        this._renderingCanvas.style.webkitTapHighlightColor = \"transparent\";\n    }\n    // Loading screen\n    /**\n     * Display the loading screen\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\n     */\n    displayLoadingUI() {\n        if (!IsWindowObjectExist()) {\n            return;\n        }\n        const loadingScreen = this.loadingScreen;\n        if (loadingScreen) {\n            loadingScreen.displayLoadingUI();\n        }\n    }\n    /**\n     * Hide the loading screen\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\n     */\n    hideLoadingUI() {\n        if (!IsWindowObjectExist()) {\n            return;\n        }\n        const loadingScreen = this._loadingScreen;\n        if (loadingScreen) {\n            loadingScreen.hideLoadingUI();\n        }\n    }\n    /**\n     * Gets the current loading screen object\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\n     */\n    get loadingScreen() {\n        if (!this._loadingScreen && this._renderingCanvas) {\n            this._loadingScreen = Engine.DefaultLoadingScreenFactory(this._renderingCanvas);\n        }\n        return this._loadingScreen;\n    }\n    /**\n     * Sets the current loading screen object\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\n     */\n    set loadingScreen(loadingScreen) {\n        this._loadingScreen = loadingScreen;\n    }\n    /**\n     * Sets the current loading screen text\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\n     */\n    set loadingUIText(text) {\n        this.loadingScreen.loadingUIText = text;\n    }\n    /**\n     * Sets the current loading screen background color\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\n     */\n    set loadingUIBackgroundColor(color) {\n        this.loadingScreen.loadingUIBackgroundColor = color;\n    }\n    /**\n     * creates and returns a new video element\n     * @param constraints video constraints\n     * @returns video element\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    createVideoElement(constraints) {\n        return document.createElement(\"video\");\n    }\n    /** Pointerlock and fullscreen */\n    /**\n     * Ask the browser to promote the current element to pointerlock mode\n     * @param element defines the DOM element to promote\n     */\n    static _RequestPointerlock(element) {\n        if (element.requestPointerLock) {\n            // In some browsers, requestPointerLock returns a promise.\n            // Handle possible rejections to avoid an unhandled top-level exception.\n            const promise = element.requestPointerLock();\n            if (promise instanceof Promise)\n                promise\n                    .then(() => {\n                    element.focus();\n                })\n                    .catch(() => { });\n            else\n                element.focus();\n        }\n    }\n    /**\n     * Asks the browser to exit pointerlock mode\n     */\n    static _ExitPointerlock() {\n        if (document.exitPointerLock) {\n            document.exitPointerLock();\n        }\n    }\n    /**\n     * Ask the browser to promote the current element to fullscreen rendering mode\n     * @param element defines the DOM element to promote\n     */\n    static _RequestFullscreen(element) {\n        const requestFunction = element.requestFullscreen || element.webkitRequestFullscreen;\n        if (!requestFunction) {\n            return;\n        }\n        requestFunction.call(element);\n    }\n    /**\n     * Asks the browser to exit fullscreen mode\n     */\n    static _ExitFullscreen() {\n        const anyDoc = document;\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        }\n        else if (anyDoc.webkitCancelFullScreen) {\n            anyDoc.webkitCancelFullScreen();\n        }\n    }\n    /**\n     * Get Font size information\n     * @param font font name\n     * @returns an object containing ascent, height and descent\n     */\n    getFontOffset(font) {\n        const text = document.createElement(\"span\");\n        text.innerHTML = \"Hg\";\n        text.setAttribute(\"style\", `font: ${font} !important`);\n        const block = document.createElement(\"div\");\n        block.style.display = \"inline-block\";\n        block.style.width = \"1px\";\n        block.style.height = \"0px\";\n        block.style.verticalAlign = \"bottom\";\n        const div = document.createElement(\"div\");\n        div.style.whiteSpace = \"nowrap\";\n        div.appendChild(text);\n        div.appendChild(block);\n        document.body.appendChild(div);\n        let fontAscent = 0;\n        let fontHeight = 0;\n        try {\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\n            block.style.verticalAlign = \"baseline\";\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\n        }\n        finally {\n            document.body.removeChild(div);\n        }\n        return { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\n    }\n}\n// Const statics\n/** Defines that alpha blending is disabled */\nEngine.ALPHA_DISABLE = 0;\n/** Defines that alpha blending to SRC ALPHA * SRC + DEST */\nEngine.ALPHA_ADD = 1;\n/** Defines that alpha blending to SRC ALPHA * SRC + (1 - SRC ALPHA) * DEST */\nEngine.ALPHA_COMBINE = 2;\n/** Defines that alpha blending to DEST - SRC * DEST */\nEngine.ALPHA_SUBTRACT = 3;\n/** Defines that alpha blending to SRC * DEST */\nEngine.ALPHA_MULTIPLY = 4;\n/** Defines that alpha blending to SRC ALPHA * SRC + (1 - SRC) * DEST */\nEngine.ALPHA_MAXIMIZED = 5;\n/** Defines that alpha blending to SRC + DEST */\nEngine.ALPHA_ONEONE = 6;\n/** Defines that alpha blending to SRC + (1 - SRC ALPHA) * DEST */\nEngine.ALPHA_PREMULTIPLIED = 7;\n/**\n * Defines that alpha blending to SRC + (1 - SRC ALPHA) * DEST\n * Alpha will be set to (1 - SRC ALPHA) * DEST ALPHA\n */\nEngine.ALPHA_PREMULTIPLIED_PORTERDUFF = 8;\n/** Defines that alpha blending to CST * SRC + (1 - CST) * DEST */\nEngine.ALPHA_INTERPOLATE = 9;\n/**\n * Defines that alpha blending to SRC + (1 - SRC) * DEST\n * Alpha will be set to SRC ALPHA + (1 - SRC ALPHA) * DEST ALPHA\n */\nEngine.ALPHA_SCREENMODE = 10;\n/** Defines that the resource is not delayed*/\nEngine.DELAYLOADSTATE_NONE = 0;\n/** Defines that the resource was successfully delay loaded */\nEngine.DELAYLOADSTATE_LOADED = 1;\n/** Defines that the resource is currently delay loading */\nEngine.DELAYLOADSTATE_LOADING = 2;\n/** Defines that the resource is delayed and has not started loading */\nEngine.DELAYLOADSTATE_NOTLOADED = 4;\n// Depht or Stencil test Constants.\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will never pass. i.e. Nothing will be drawn */\nEngine.NEVER = 512;\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will always pass. i.e. Pixels will be drawn in the order they are drawn */\nEngine.ALWAYS = 519;\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than the stored value */\nEngine.LESS = 513;\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is equals to the stored value */\nEngine.EQUAL = 514;\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than or equal to the stored value */\nEngine.LEQUAL = 515;\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than the stored value */\nEngine.GREATER = 516;\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than or equal to the stored value */\nEngine.GEQUAL = 518;\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is not equal to the stored value */\nEngine.NOTEQUAL = 517;\n// Stencil Actions Constants.\n/** Passed to stencilOperation to specify that stencil value must be kept */\nEngine.KEEP = 7680;\n/** Passed to stencilOperation to specify that stencil value must be replaced */\nEngine.REPLACE = 7681;\n/** Passed to stencilOperation to specify that stencil value must be incremented */\nEngine.INCR = 7682;\n/** Passed to stencilOperation to specify that stencil value must be decremented */\nEngine.DECR = 7683;\n/** Passed to stencilOperation to specify that stencil value must be inverted */\nEngine.INVERT = 5386;\n/** Passed to stencilOperation to specify that stencil value must be incremented with wrapping */\nEngine.INCR_WRAP = 34055;\n/** Passed to stencilOperation to specify that stencil value must be decremented with wrapping */\nEngine.DECR_WRAP = 34056;\n/** Texture is not repeating outside of 0..1 UVs */\nEngine.TEXTURE_CLAMP_ADDRESSMODE = 0;\n/** Texture is repeating outside of 0..1 UVs */\nEngine.TEXTURE_WRAP_ADDRESSMODE = 1;\n/** Texture is repeating and mirrored */\nEngine.TEXTURE_MIRROR_ADDRESSMODE = 2;\n/** ALPHA */\nEngine.TEXTUREFORMAT_ALPHA = 0;\n/** LUMINANCE */\nEngine.TEXTUREFORMAT_LUMINANCE = 1;\n/** LUMINANCE_ALPHA */\nEngine.TEXTUREFORMAT_LUMINANCE_ALPHA = 2;\n/** RGB */\nEngine.TEXTUREFORMAT_RGB = 4;\n/** RGBA */\nEngine.TEXTUREFORMAT_RGBA = 5;\n/** RED */\nEngine.TEXTUREFORMAT_RED = 6;\n/** RED (2nd reference) */\nEngine.TEXTUREFORMAT_R = 6;\n/** RG */\nEngine.TEXTUREFORMAT_RG = 7;\n/** RED_INTEGER */\nEngine.TEXTUREFORMAT_RED_INTEGER = 8;\n/** RED_INTEGER (2nd reference) */\nEngine.TEXTUREFORMAT_R_INTEGER = 8;\n/** RG_INTEGER */\nEngine.TEXTUREFORMAT_RG_INTEGER = 9;\n/** RGB_INTEGER */\nEngine.TEXTUREFORMAT_RGB_INTEGER = 10;\n/** RGBA_INTEGER */\nEngine.TEXTUREFORMAT_RGBA_INTEGER = 11;\n/** UNSIGNED_BYTE */\nEngine.TEXTURETYPE_UNSIGNED_BYTE = 0;\n/** UNSIGNED_BYTE (2nd reference) */\nEngine.TEXTURETYPE_UNSIGNED_INT = 0;\n/** FLOAT */\nEngine.TEXTURETYPE_FLOAT = 1;\n/** HALF_FLOAT */\nEngine.TEXTURETYPE_HALF_FLOAT = 2;\n/** BYTE */\nEngine.TEXTURETYPE_BYTE = 3;\n/** SHORT */\nEngine.TEXTURETYPE_SHORT = 4;\n/** UNSIGNED_SHORT */\nEngine.TEXTURETYPE_UNSIGNED_SHORT = 5;\n/** INT */\nEngine.TEXTURETYPE_INT = 6;\n/** UNSIGNED_INT */\nEngine.TEXTURETYPE_UNSIGNED_INTEGER = 7;\n/** UNSIGNED_SHORT_4_4_4_4 */\nEngine.TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4 = 8;\n/** UNSIGNED_SHORT_5_5_5_1 */\nEngine.TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1 = 9;\n/** UNSIGNED_SHORT_5_6_5 */\nEngine.TEXTURETYPE_UNSIGNED_SHORT_5_6_5 = 10;\n/** UNSIGNED_INT_2_10_10_10_REV */\nEngine.TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV = 11;\n/** UNSIGNED_INT_24_8 */\nEngine.TEXTURETYPE_UNSIGNED_INT_24_8 = 12;\n/** UNSIGNED_INT_10F_11F_11F_REV */\nEngine.TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV = 13;\n/** UNSIGNED_INT_5_9_9_9_REV */\nEngine.TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV = 14;\n/** FLOAT_32_UNSIGNED_INT_24_8_REV */\nEngine.TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV = 15;\n/** nearest is mag = nearest and min = nearest and mip = none */\nEngine.TEXTURE_NEAREST_SAMPLINGMODE = 1;\n/** Bilinear is mag = linear and min = linear and mip = nearest */\nEngine.TEXTURE_BILINEAR_SAMPLINGMODE = 2;\n/** Trilinear is mag = linear and min = linear and mip = linear */\nEngine.TEXTURE_TRILINEAR_SAMPLINGMODE = 3;\n/** nearest is mag = nearest and min = nearest and mip = linear */\nEngine.TEXTURE_NEAREST_NEAREST_MIPLINEAR = 8;\n/** Bilinear is mag = linear and min = linear and mip = nearest */\nEngine.TEXTURE_LINEAR_LINEAR_MIPNEAREST = 11;\n/** Trilinear is mag = linear and min = linear and mip = linear */\nEngine.TEXTURE_LINEAR_LINEAR_MIPLINEAR = 3;\n/** mag = nearest and min = nearest and mip = nearest */\nEngine.TEXTURE_NEAREST_NEAREST_MIPNEAREST = 4;\n/** mag = nearest and min = linear and mip = nearest */\nEngine.TEXTURE_NEAREST_LINEAR_MIPNEAREST = 5;\n/** mag = nearest and min = linear and mip = linear */\nEngine.TEXTURE_NEAREST_LINEAR_MIPLINEAR = 6;\n/** mag = nearest and min = linear and mip = none */\nEngine.TEXTURE_NEAREST_LINEAR = 7;\n/** mag = nearest and min = nearest and mip = none */\nEngine.TEXTURE_NEAREST_NEAREST = 1;\n/** mag = linear and min = nearest and mip = nearest */\nEngine.TEXTURE_LINEAR_NEAREST_MIPNEAREST = 9;\n/** mag = linear and min = nearest and mip = linear */\nEngine.TEXTURE_LINEAR_NEAREST_MIPLINEAR = 10;\n/** mag = linear and min = linear and mip = none */\nEngine.TEXTURE_LINEAR_LINEAR = 2;\n/** mag = linear and min = nearest and mip = none */\nEngine.TEXTURE_LINEAR_NEAREST = 12;\n/** Explicit coordinates mode */\nEngine.TEXTURE_EXPLICIT_MODE = 0;\n/** Spherical coordinates mode */\nEngine.TEXTURE_SPHERICAL_MODE = 1;\n/** Planar coordinates mode */\nEngine.TEXTURE_PLANAR_MODE = 2;\n/** Cubic coordinates mode */\nEngine.TEXTURE_CUBIC_MODE = 3;\n/** Projection coordinates mode */\nEngine.TEXTURE_PROJECTION_MODE = 4;\n/** Skybox coordinates mode */\nEngine.TEXTURE_SKYBOX_MODE = 5;\n/** Inverse Cubic coordinates mode */\nEngine.TEXTURE_INVCUBIC_MODE = 6;\n/** Equirectangular coordinates mode */\nEngine.TEXTURE_EQUIRECTANGULAR_MODE = 7;\n/** Equirectangular Fixed coordinates mode */\nEngine.TEXTURE_FIXED_EQUIRECTANGULAR_MODE = 8;\n/** Equirectangular Fixed Mirrored coordinates mode */\nEngine.TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE = 9;\n// Texture rescaling mode\n/** Defines that texture rescaling will use a floor to find the closer power of 2 size */\nEngine.SCALEMODE_FLOOR = 1;\n/** Defines that texture rescaling will look for the nearest power of 2 size */\nEngine.SCALEMODE_NEAREST = 2;\n/** Defines that texture rescaling will use a ceil to find the closer power of 2 size */\nEngine.SCALEMODE_CEILING = 3;\n/**\n * Method called to create the default rescale post process on each engine.\n */\nEngine._RescalePostProcessFactory = null;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nEngine._RenderPassIdCounter = 0;\n//# sourceMappingURL=engine.js.map","/**\n * The engine store class is responsible to hold all the instances of Engine and Scene created\n * during the life time of the application.\n */\nexport class EngineStore {\n    /**\n     * Gets the latest created engine\n     */\n    static get LastCreatedEngine() {\n        if (this.Instances.length === 0) {\n            return null;\n        }\n        return this.Instances[this.Instances.length - 1];\n    }\n    /**\n     * Gets the latest created scene\n     */\n    static get LastCreatedScene() {\n        return this._LastCreatedScene;\n    }\n}\n/** Gets the list of created engines */\nEngineStore.Instances = new Array();\n/** @internal */\nEngineStore._LastCreatedScene = null;\n/**\n * Gets or sets a global variable indicating if fallback texture must be used when a texture cannot be loaded\n * @ignorenaming\n */\nEngineStore.UseFallbackTexture = true;\n/**\n * Texture content used if a texture cannot loaded\n * @ignorenaming\n */\nEngineStore.FallbackTexture = \"\";\n//# sourceMappingURL=engineStore.js.map","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { ThinEngine } from \"../../Engines/thinEngine.js\";\nThinEngine.prototype._debugPushGroup = function (groupName, targetObject) { };\nThinEngine.prototype._debugPopGroup = function (targetObject) { };\nThinEngine.prototype._debugInsertMarker = function (text, targetObject) { };\nThinEngine.prototype._debugFlushPendingCommands = function () { };\n//# sourceMappingURL=engine.debugging.js.map","import { Engine } from \"../../Engines/engine.js\";\nimport { AbstractMesh } from \"../../Meshes/abstractMesh.js\";\nimport { _TimeToken } from \"../../Instrumentation/timeToken.js\";\nimport { PerfCounter } from \"../../Misc/perfCounter.js\";\n/** @internal */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class _OcclusionDataStorage {\n    constructor() {\n        /** @internal */\n        this.occlusionInternalRetryCounter = 0;\n        /** @internal */\n        this.isOcclusionQueryInProgress = false;\n        /** @internal */\n        this.isOccluded = false;\n        /** @internal */\n        this.occlusionRetryCount = -1;\n        /** @internal */\n        this.occlusionType = AbstractMesh.OCCLUSION_TYPE_NONE;\n        /** @internal */\n        this.occlusionQueryAlgorithmType = AbstractMesh.OCCLUSION_ALGORITHM_TYPE_CONSERVATIVE;\n        /** @internal */\n        this.forceRenderingWhenOccluded = false;\n    }\n}\nEngine.prototype.createQuery = function () {\n    const query = this._gl.createQuery();\n    if (!query) {\n        throw new Error(\"Unable to create Occlusion Query\");\n    }\n    return query;\n};\nEngine.prototype.deleteQuery = function (query) {\n    this._gl.deleteQuery(query);\n    return this;\n};\nEngine.prototype.isQueryResultAvailable = function (query) {\n    return this._gl.getQueryParameter(query, this._gl.QUERY_RESULT_AVAILABLE);\n};\nEngine.prototype.getQueryResult = function (query) {\n    return this._gl.getQueryParameter(query, this._gl.QUERY_RESULT);\n};\nEngine.prototype.beginOcclusionQuery = function (algorithmType, query) {\n    const glAlgorithm = this._getGlAlgorithmType(algorithmType);\n    this._gl.beginQuery(glAlgorithm, query);\n    return true;\n};\nEngine.prototype.endOcclusionQuery = function (algorithmType) {\n    const glAlgorithm = this._getGlAlgorithmType(algorithmType);\n    this._gl.endQuery(glAlgorithm);\n    return this;\n};\nEngine.prototype._createTimeQuery = function () {\n    const timerQuery = this.getCaps().timerQuery;\n    if (timerQuery.createQueryEXT) {\n        return timerQuery.createQueryEXT();\n    }\n    return this.createQuery();\n};\nEngine.prototype._deleteTimeQuery = function (query) {\n    const timerQuery = this.getCaps().timerQuery;\n    if (timerQuery.deleteQueryEXT) {\n        timerQuery.deleteQueryEXT(query);\n        return;\n    }\n    this.deleteQuery(query);\n};\nEngine.prototype._getTimeQueryResult = function (query) {\n    const timerQuery = this.getCaps().timerQuery;\n    if (timerQuery.getQueryObjectEXT) {\n        return timerQuery.getQueryObjectEXT(query, timerQuery.QUERY_RESULT_EXT);\n    }\n    return this.getQueryResult(query);\n};\nEngine.prototype._getTimeQueryAvailability = function (query) {\n    const timerQuery = this.getCaps().timerQuery;\n    if (timerQuery.getQueryObjectEXT) {\n        return timerQuery.getQueryObjectEXT(query, timerQuery.QUERY_RESULT_AVAILABLE_EXT);\n    }\n    return this.isQueryResultAvailable(query);\n};\nEngine.prototype.startTimeQuery = function () {\n    const caps = this.getCaps();\n    const timerQuery = caps.timerQuery;\n    if (!timerQuery) {\n        return null;\n    }\n    const token = new _TimeToken();\n    this._gl.getParameter(timerQuery.GPU_DISJOINT_EXT);\n    if (caps.canUseTimestampForTimerQuery) {\n        token._startTimeQuery = this._createTimeQuery();\n        timerQuery.queryCounterEXT(token._startTimeQuery, timerQuery.TIMESTAMP_EXT);\n    }\n    else {\n        if (this._currentNonTimestampToken) {\n            return this._currentNonTimestampToken;\n        }\n        token._timeElapsedQuery = this._createTimeQuery();\n        if (timerQuery.beginQueryEXT) {\n            timerQuery.beginQueryEXT(timerQuery.TIME_ELAPSED_EXT, token._timeElapsedQuery);\n        }\n        else {\n            this._gl.beginQuery(timerQuery.TIME_ELAPSED_EXT, token._timeElapsedQuery);\n        }\n        this._currentNonTimestampToken = token;\n    }\n    return token;\n};\nEngine.prototype.endTimeQuery = function (token) {\n    const caps = this.getCaps();\n    const timerQuery = caps.timerQuery;\n    if (!timerQuery || !token) {\n        return -1;\n    }\n    if (caps.canUseTimestampForTimerQuery) {\n        if (!token._startTimeQuery) {\n            return -1;\n        }\n        if (!token._endTimeQuery) {\n            token._endTimeQuery = this._createTimeQuery();\n            timerQuery.queryCounterEXT(token._endTimeQuery, timerQuery.TIMESTAMP_EXT);\n        }\n    }\n    else if (!token._timeElapsedQueryEnded) {\n        if (!token._timeElapsedQuery) {\n            return -1;\n        }\n        if (timerQuery.endQueryEXT) {\n            timerQuery.endQueryEXT(timerQuery.TIME_ELAPSED_EXT);\n        }\n        else {\n            this._gl.endQuery(timerQuery.TIME_ELAPSED_EXT);\n            this._currentNonTimestampToken = null;\n        }\n        token._timeElapsedQueryEnded = true;\n    }\n    const disjoint = this._gl.getParameter(timerQuery.GPU_DISJOINT_EXT);\n    let available = false;\n    if (token._endTimeQuery) {\n        available = this._getTimeQueryAvailability(token._endTimeQuery);\n    }\n    else if (token._timeElapsedQuery) {\n        available = this._getTimeQueryAvailability(token._timeElapsedQuery);\n    }\n    if (available && !disjoint) {\n        let result = 0;\n        if (caps.canUseTimestampForTimerQuery) {\n            if (!token._startTimeQuery || !token._endTimeQuery) {\n                return -1;\n            }\n            const timeStart = this._getTimeQueryResult(token._startTimeQuery);\n            const timeEnd = this._getTimeQueryResult(token._endTimeQuery);\n            result = timeEnd - timeStart;\n            this._deleteTimeQuery(token._startTimeQuery);\n            this._deleteTimeQuery(token._endTimeQuery);\n            token._startTimeQuery = null;\n            token._endTimeQuery = null;\n        }\n        else {\n            if (!token._timeElapsedQuery) {\n                return -1;\n            }\n            result = this._getTimeQueryResult(token._timeElapsedQuery);\n            this._deleteTimeQuery(token._timeElapsedQuery);\n            token._timeElapsedQuery = null;\n            token._timeElapsedQueryEnded = false;\n        }\n        return result;\n    }\n    return -1;\n};\nEngine.prototype._captureGPUFrameTime = false;\nEngine.prototype._gpuFrameTime = new PerfCounter();\nEngine.prototype.getGPUFrameTimeCounter = function () {\n    return this._gpuFrameTime;\n};\nEngine.prototype.captureGPUFrameTime = function (value) {\n    if (value === this._captureGPUFrameTime) {\n        return;\n    }\n    this._captureGPUFrameTime = value;\n    if (value) {\n        this._onBeginFrameObserver = this.onBeginFrameObservable.add(() => {\n            if (!this._gpuFrameTimeToken) {\n                this._gpuFrameTimeToken = this.startTimeQuery();\n            }\n        });\n        this._onEndFrameObserver = this.onEndFrameObservable.add(() => {\n            if (!this._gpuFrameTimeToken) {\n                return;\n            }\n            const time = this.endTimeQuery(this._gpuFrameTimeToken);\n            if (time > -1) {\n                this._gpuFrameTimeToken = null;\n                this._gpuFrameTime.fetchNewFrame();\n                this._gpuFrameTime.addCount(time, true);\n            }\n        });\n    }\n    else {\n        this.onBeginFrameObservable.remove(this._onBeginFrameObserver);\n        this._onBeginFrameObserver = null;\n        this.onEndFrameObservable.remove(this._onEndFrameObserver);\n        this._onEndFrameObserver = null;\n    }\n};\nEngine.prototype._getGlAlgorithmType = function (algorithmType) {\n    return algorithmType === AbstractMesh.OCCLUSION_ALGORITHM_TYPE_CONSERVATIVE ? this._gl.ANY_SAMPLES_PASSED_CONSERVATIVE : this._gl.ANY_SAMPLES_PASSED;\n};\nObject.defineProperty(AbstractMesh.prototype, \"isOcclusionQueryInProgress\", {\n    get: function () {\n        return this._occlusionDataStorage.isOcclusionQueryInProgress;\n    },\n    set: function (value) {\n        this._occlusionDataStorage.isOcclusionQueryInProgress = value;\n    },\n    enumerable: false,\n    configurable: true,\n});\nObject.defineProperty(AbstractMesh.prototype, \"_occlusionDataStorage\", {\n    get: function () {\n        if (!this.__occlusionDataStorage) {\n            this.__occlusionDataStorage = new _OcclusionDataStorage();\n        }\n        return this.__occlusionDataStorage;\n    },\n    enumerable: false,\n    configurable: true,\n});\nObject.defineProperty(AbstractMesh.prototype, \"isOccluded\", {\n    get: function () {\n        return this._occlusionDataStorage.isOccluded;\n    },\n    set: function (value) {\n        this._occlusionDataStorage.isOccluded = value;\n    },\n    enumerable: true,\n    configurable: true,\n});\nObject.defineProperty(AbstractMesh.prototype, \"occlusionQueryAlgorithmType\", {\n    get: function () {\n        return this._occlusionDataStorage.occlusionQueryAlgorithmType;\n    },\n    set: function (value) {\n        this._occlusionDataStorage.occlusionQueryAlgorithmType = value;\n    },\n    enumerable: true,\n    configurable: true,\n});\nObject.defineProperty(AbstractMesh.prototype, \"occlusionType\", {\n    get: function () {\n        return this._occlusionDataStorage.occlusionType;\n    },\n    set: function (value) {\n        this._occlusionDataStorage.occlusionType = value;\n    },\n    enumerable: true,\n    configurable: true,\n});\nObject.defineProperty(AbstractMesh.prototype, \"occlusionRetryCount\", {\n    get: function () {\n        return this._occlusionDataStorage.occlusionRetryCount;\n    },\n    set: function (value) {\n        this._occlusionDataStorage.occlusionRetryCount = value;\n    },\n    enumerable: true,\n    configurable: true,\n});\nObject.defineProperty(AbstractMesh.prototype, \"forceRenderingWhenOccluded\", {\n    get: function () {\n        return this._occlusionDataStorage.forceRenderingWhenOccluded;\n    },\n    set: function (value) {\n        this._occlusionDataStorage.forceRenderingWhenOccluded = value;\n    },\n    enumerable: true,\n    configurable: true,\n});\n// We also need to update AbstractMesh as there is a portion of the code there\nAbstractMesh.prototype._checkOcclusionQuery = function () {\n    const dataStorage = this._occlusionDataStorage;\n    if (dataStorage.occlusionType === AbstractMesh.OCCLUSION_TYPE_NONE) {\n        dataStorage.isOccluded = false;\n        return false;\n    }\n    const engine = this.getEngine();\n    if (!engine.getCaps().supportOcclusionQuery) {\n        dataStorage.isOccluded = false;\n        return false;\n    }\n    if (!engine.isQueryResultAvailable) {\n        // Occlusion query where not referenced\n        dataStorage.isOccluded = false;\n        return false;\n    }\n    if (this.isOcclusionQueryInProgress && this._occlusionQuery) {\n        const isOcclusionQueryAvailable = engine.isQueryResultAvailable(this._occlusionQuery);\n        if (isOcclusionQueryAvailable) {\n            const occlusionQueryResult = engine.getQueryResult(this._occlusionQuery);\n            dataStorage.isOcclusionQueryInProgress = false;\n            dataStorage.occlusionInternalRetryCounter = 0;\n            dataStorage.isOccluded = occlusionQueryResult > 0 ? false : true;\n        }\n        else {\n            dataStorage.occlusionInternalRetryCounter++;\n            if (dataStorage.occlusionRetryCount !== -1 && dataStorage.occlusionInternalRetryCounter > dataStorage.occlusionRetryCount) {\n                dataStorage.isOcclusionQueryInProgress = false;\n                dataStorage.occlusionInternalRetryCounter = 0;\n                // if optimistic set isOccluded to false regardless of the status of isOccluded. (Render in the current render loop)\n                // if strict continue the last state of the object.\n                dataStorage.isOccluded = dataStorage.occlusionType === AbstractMesh.OCCLUSION_TYPE_OPTIMISTIC ? false : dataStorage.isOccluded;\n            }\n            else {\n                return dataStorage.occlusionType === AbstractMesh.OCCLUSION_TYPE_OPTIMISTIC ? false : dataStorage.isOccluded;\n            }\n        }\n    }\n    const scene = this.getScene();\n    if (scene.getBoundingBoxRenderer) {\n        const occlusionBoundingBoxRenderer = scene.getBoundingBoxRenderer();\n        if (this._occlusionQuery === null) {\n            this._occlusionQuery = engine.createQuery();\n        }\n        if (engine.beginOcclusionQuery(dataStorage.occlusionQueryAlgorithmType, this._occlusionQuery)) {\n            occlusionBoundingBoxRenderer.renderOcclusionBoundingBox(this);\n            engine.endOcclusionQuery(dataStorage.occlusionQueryAlgorithmType);\n            this._occlusionDataStorage.isOcclusionQueryInProgress = true;\n        }\n    }\n    return dataStorage.isOccluded;\n};\n//# sourceMappingURL=engine.query.js.map","import { Engine } from \"../../Engines/engine.js\";\n/** @internal */\n// eslint-disable-next-line no-var\nexport var _forceTransformFeedbackToBundle = true;\nEngine.prototype.createTransformFeedback = function () {\n    const transformFeedback = this._gl.createTransformFeedback();\n    if (!transformFeedback) {\n        throw new Error(\"Unable to create Transform Feedback\");\n    }\n    return transformFeedback;\n};\nEngine.prototype.deleteTransformFeedback = function (value) {\n    this._gl.deleteTransformFeedback(value);\n};\nEngine.prototype.bindTransformFeedback = function (value) {\n    this._gl.bindTransformFeedback(this._gl.TRANSFORM_FEEDBACK, value);\n};\nEngine.prototype.beginTransformFeedback = function (usePoints = true) {\n    this._gl.beginTransformFeedback(usePoints ? this._gl.POINTS : this._gl.TRIANGLES);\n};\nEngine.prototype.endTransformFeedback = function () {\n    this._gl.endTransformFeedback();\n};\nEngine.prototype.setTranformFeedbackVaryings = function (program, value) {\n    this._gl.transformFeedbackVaryings(program, value, this._gl.INTERLEAVED_ATTRIBS);\n};\nEngine.prototype.bindTransformFeedbackBuffer = function (value) {\n    this._gl.bindBufferBase(this._gl.TRANSFORM_FEEDBACK_BUFFER, 0, value ? value.underlyingResource : null);\n};\n//# sourceMappingURL=engine.transformFeedback.js.map","import { ThinEngine } from \"../../Engines/thinEngine.js\";\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nThinEngine.prototype.setTextureSampler = function (name, sampler) {\n    throw new Error(\"setTextureSampler: This engine does not support separate texture sampler objects!\");\n};\n//# sourceMappingURL=engine.textureSampler.js.map","import { Engine } from \"../engine.js\";\nimport { Observable } from \"../../Misc/observable.js\";\n/**\n * Class used to define an additional view for the engine\n * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/multiCanvas\n */\nexport class EngineView {\n}\nconst _onBeforeViewRenderObservable = new Observable();\nconst _onAfterViewRenderObservable = new Observable();\nObject.defineProperty(Engine.prototype, \"onBeforeViewRenderObservable\", {\n    get: function () {\n        return _onBeforeViewRenderObservable;\n    },\n});\nObject.defineProperty(Engine.prototype, \"onAfterViewRenderObservable\", {\n    get: function () {\n        return _onAfterViewRenderObservable;\n    },\n});\nObject.defineProperty(Engine.prototype, \"inputElement\", {\n    get: function () {\n        return this._inputElement;\n    },\n    set: function (value) {\n        var _a;\n        if (this._inputElement !== value) {\n            this._inputElement = value;\n            (_a = this._onEngineViewChanged) === null || _a === void 0 ? void 0 : _a.call(this);\n        }\n    },\n});\nEngine.prototype.getInputElement = function () {\n    return this.inputElement || this.getRenderingCanvas();\n};\nEngine.prototype.registerView = function (canvas, camera, clearBeforeCopy) {\n    if (!this.views) {\n        this.views = [];\n    }\n    for (const view of this.views) {\n        if (view.target === canvas) {\n            return view;\n        }\n    }\n    const masterCanvas = this.getRenderingCanvas();\n    if (masterCanvas) {\n        canvas.width = masterCanvas.width;\n        canvas.height = masterCanvas.height;\n    }\n    const newView = { target: canvas, camera, clearBeforeCopy, enabled: true, id: (Math.random() * 100000).toFixed() };\n    this.views.push(newView);\n    if (camera) {\n        camera.onDisposeObservable.add(() => {\n            this.unRegisterView(canvas);\n        });\n    }\n    return newView;\n};\nEngine.prototype.unRegisterView = function (canvas) {\n    if (!this.views || this.views.length === 0) {\n        return this;\n    }\n    for (const view of this.views) {\n        if (view.target === canvas) {\n            const index = this.views.indexOf(view);\n            if (index !== -1) {\n                this.views.splice(index, 1);\n            }\n            break;\n        }\n    }\n    return this;\n};\nEngine.prototype._renderViewStep = function (view) {\n    const canvas = view.target;\n    const context = canvas.getContext(\"2d\");\n    if (!context) {\n        return true;\n    }\n    const parent = this.getRenderingCanvas();\n    _onBeforeViewRenderObservable.notifyObservers(view);\n    const camera = view.camera;\n    let previewCamera = null;\n    let scene = null;\n    if (camera) {\n        scene = camera.getScene();\n        if (!scene || (scene.activeCameras && scene.activeCameras.length)) {\n            return true;\n        }\n        this.activeView = view;\n        previewCamera = scene.activeCamera;\n        scene.activeCamera = camera;\n    }\n    if (view.customResize) {\n        view.customResize(canvas);\n    }\n    else {\n        // Set sizes\n        const width = Math.floor(canvas.clientWidth / this._hardwareScalingLevel);\n        const height = Math.floor(canvas.clientHeight / this._hardwareScalingLevel);\n        const dimsChanged = width !== canvas.width || parent.width !== canvas.width || height !== canvas.height || parent.height !== canvas.height;\n        if (canvas.clientWidth && canvas.clientHeight && dimsChanged) {\n            canvas.width = width;\n            canvas.height = height;\n            this.setSize(width, height);\n        }\n    }\n    if (!parent.width || !parent.height) {\n        return false;\n    }\n    // Render the frame\n    this._renderFrame();\n    this.flushFramebuffer();\n    // Copy to target\n    if (view.clearBeforeCopy) {\n        context.clearRect(0, 0, parent.width, parent.height);\n    }\n    context.drawImage(parent, 0, 0);\n    // Restore\n    if (previewCamera && scene) {\n        scene.activeCamera = previewCamera;\n    }\n    _onAfterViewRenderObservable.notifyObservers(view);\n    return true;\n};\nEngine.prototype._renderViews = function () {\n    if (!this.views || this.views.length === 0) {\n        return false;\n    }\n    const parent = this.getRenderingCanvas();\n    if (!parent) {\n        return false;\n    }\n    let inputElementView;\n    for (const view of this.views) {\n        if (!view.enabled) {\n            continue;\n        }\n        const canvas = view.target;\n        // Always render the view correspondent to the inputElement for last\n        if (canvas === this.inputElement) {\n            inputElementView = view;\n            continue;\n        }\n        if (!this._renderViewStep(view)) {\n            return false;\n        }\n    }\n    if (inputElementView) {\n        if (!this._renderViewStep(inputElementView)) {\n            return false;\n        }\n    }\n    this.activeView = null;\n    return true;\n};\n//# sourceMappingURL=engine.views.js.map","import { Engine } from \"../engine.js\";\nfunction transformTextureUrl(url) {\n    const excludeFn = (entry) => {\n        const strRegExPattern = \"\\\\b\" + entry + \"\\\\b\";\n        return url && (url === entry || url.match(new RegExp(strRegExPattern, \"g\")));\n    };\n    if (this._excludedCompressedTextures && this._excludedCompressedTextures.some(excludeFn)) {\n        return url;\n    }\n    const lastDot = url.lastIndexOf(\".\");\n    const lastQuestionMark = url.lastIndexOf(\"?\");\n    const querystring = lastQuestionMark > -1 ? url.substring(lastQuestionMark, url.length) : \"\";\n    return (lastDot > -1 ? url.substring(0, lastDot) : url) + this._textureFormatInUse + querystring;\n}\nObject.defineProperty(Engine.prototype, \"texturesSupported\", {\n    get: function () {\n        // Intelligently add supported compressed formats in order to check for.\n        // Check for ASTC support first as it is most powerful and to be very cross platform.\n        // Next PVRTC & DXT, which are probably superior to ETC1/2.\n        // Likely no hardware which supports both PVR & DXT, so order matters little.\n        // ETC2 is newer and handles ETC1 (no alpha capability), so check for first.\n        const texturesSupported = new Array();\n        if (this._caps.astc) {\n            texturesSupported.push(\"-astc.ktx\");\n        }\n        if (this._caps.s3tc) {\n            texturesSupported.push(\"-dxt.ktx\");\n        }\n        if (this._caps.pvrtc) {\n            texturesSupported.push(\"-pvrtc.ktx\");\n        }\n        if (this._caps.etc2) {\n            texturesSupported.push(\"-etc2.ktx\");\n        }\n        if (this._caps.etc1) {\n            texturesSupported.push(\"-etc1.ktx\");\n        }\n        return texturesSupported;\n    },\n    enumerable: true,\n    configurable: true,\n});\nObject.defineProperty(Engine.prototype, \"textureFormatInUse\", {\n    get: function () {\n        return this._textureFormatInUse || null;\n    },\n    enumerable: true,\n    configurable: true,\n});\nEngine.prototype.setCompressedTextureExclusions = function (skippedFiles) {\n    this._excludedCompressedTextures = skippedFiles;\n};\nEngine.prototype.setTextureFormatToUse = function (formatsAvailable) {\n    const texturesSupported = this.texturesSupported;\n    for (let i = 0, len1 = texturesSupported.length; i < len1; i++) {\n        for (let j = 0, len2 = formatsAvailable.length; j < len2; j++) {\n            if (texturesSupported[i] === formatsAvailable[j].toLowerCase()) {\n                this._transformTextureUrl = transformTextureUrl.bind(this);\n                return (this._textureFormatInUse = texturesSupported[i]);\n            }\n        }\n    }\n    // actively set format to nothing, to allow this to be called more than once\n    // and possibly fail the 2nd time\n    this._textureFormatInUse = \"\";\n    this._transformTextureUrl = null;\n    return null;\n};\n//# sourceMappingURL=engine.textureSelector.js.map","import { ThinEngine } from \"../../Engines/thinEngine.js\";\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nThinEngine.prototype.createStorageBuffer = function (data, creationFlags) {\n    throw new Error(\"createStorageBuffer: Unsupported method in this engine!\");\n};\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nThinEngine.prototype.updateStorageBuffer = function (buffer, data, byteOffset, byteLength) { };\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nThinEngine.prototype.readFromStorageBuffer = function (storageBuffer, offset, size, buffer) {\n    throw new Error(\"readFromStorageBuffer: Unsupported method in this engine!\");\n};\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nThinEngine.prototype.setStorageBuffer = function (name, buffer) {\n    throw new Error(\"setStorageBuffer: Unsupported method in this engine!\");\n};\n//# sourceMappingURL=engine.storageBuffer.js.map","import { NativeEngine } from \"../nativeEngine.js\";\nimport { NativeDataStream } from \"./nativeDataStream.js\";\nNativeEngine._createNativeDataStream = function () {\n    if (_native.NativeDataStream.VALIDATION_ENABLED) {\n        return new ValidatedNativeDataStream();\n    }\n    else {\n        return new NativeDataStream();\n    }\n};\nexport class ValidatedNativeDataStream extends NativeDataStream {\n    constructor() {\n        super();\n    }\n    writeUint32(value) {\n        super.writeUint32(_native.NativeDataStream.VALIDATION_UINT_32);\n        super.writeUint32(value);\n    }\n    writeInt32(value) {\n        super.writeUint32(_native.NativeDataStream.VALIDATION_INT_32);\n        super.writeInt32(value);\n    }\n    writeFloat32(value) {\n        super.writeUint32(_native.NativeDataStream.VALIDATION_FLOAT_32);\n        super.writeFloat32(value);\n    }\n    writeUint32Array(values) {\n        super.writeUint32(_native.NativeDataStream.VALIDATION_UINT_32_ARRAY);\n        super.writeUint32Array(values);\n    }\n    writeInt32Array(values) {\n        super.writeUint32(_native.NativeDataStream.VALIDATION_INT_32_ARRAY);\n        super.writeInt32Array(values);\n    }\n    writeFloat32Array(values) {\n        super.writeUint32(_native.NativeDataStream.VALIDATION_FLOAT_32_ARRAY);\n        super.writeFloat32Array(values);\n    }\n    writeNativeData(handle) {\n        super.writeUint32(_native.NativeDataStream.VALIDATION_NATIVE_DATA);\n        super.writeNativeData(handle);\n    }\n    writeBoolean(value) {\n        super.writeUint32(_native.NativeDataStream.VALIDATION_BOOLEAN);\n        super.writeBoolean(value);\n    }\n}\n//# sourceMappingURL=validatedNativeDataStream.js.map","\nimport { Engine } from \"../../engine.js\";\nimport { WebGPUEngine } from \"../../webgpuEngine.js\";\nWebGPUEngine.prototype.setAlphaMode = function (mode, noDepthWriteChange = false) {\n    if (this._alphaMode === mode && ((mode === 0 && !this._alphaState.alphaBlend) || (mode !== 0 && this._alphaState.alphaBlend))) {\n        if (!noDepthWriteChange) {\n            // Make sure we still have the correct depth mask according to the alpha mode (a transparent material could have forced writting to the depth buffer, for instance)\n            const depthMask = mode === 0;\n            if (this.depthCullingState.depthMask !== depthMask) {\n                this.setDepthWrite(depthMask);\n                this._cacheRenderPipeline.setDepthWriteEnabled(depthMask);\n            }\n        }\n        return;\n    }\n    switch (mode) {\n        case 0:\n            this._alphaState.alphaBlend = false;\n            break;\n        case 7:\n            this._alphaState.setAlphaBlendFunctionParameters(1, 771, 1, 1);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 8:\n            this._alphaState.setAlphaBlendFunctionParameters(1, 771, 1, 771);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 2:\n            this._alphaState.setAlphaBlendFunctionParameters(770, 771, 1, 1);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 6:\n            this._alphaState.setAlphaBlendFunctionParameters(1, 1, 0, 1);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 1:\n            this._alphaState.setAlphaBlendFunctionParameters(770, 1, 0, 1);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 3:\n            this._alphaState.setAlphaBlendFunctionParameters(0, 769, 1, 1);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 4:\n            this._alphaState.setAlphaBlendFunctionParameters(774, 0, 1, 1);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 5:\n            this._alphaState.setAlphaBlendFunctionParameters(770, 769, 1, 1);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 9:\n            this._alphaState.setAlphaBlendFunctionParameters(32769, 32770, 32771, 32772);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 10:\n            this._alphaState.setAlphaBlendFunctionParameters(1, 769, 1, 771);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 11:\n            this._alphaState.setAlphaBlendFunctionParameters(1, 1, 1, 1);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 12:\n            this._alphaState.setAlphaBlendFunctionParameters(772, 1, 0, 0);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 13:\n            this._alphaState.setAlphaBlendFunctionParameters(775, 769, 773, 771);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 14:\n            this._alphaState.setAlphaBlendFunctionParameters(1, 771, 1, 771);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 15:\n            this._alphaState.setAlphaBlendFunctionParameters(1, 1, 1, 0);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 16:\n            this._alphaState.setAlphaBlendFunctionParameters(775, 769, 0, 1);\n            this._alphaState.alphaBlend = true;\n            break;\n        case 17:\n            // Same as ALPHA_COMBINE but accumulates (1 - alpha) values in the alpha channel for a later readout in order independant transparency\n            this._alphaState.setAlphaBlendFunctionParameters(770, 771, 1, 771);\n            this._alphaState.alphaBlend = true;\n            break;\n    }\n    if (!noDepthWriteChange) {\n        this.setDepthWrite(mode === Engine.ALPHA_DISABLE);\n        this._cacheRenderPipeline.setDepthWriteEnabled(mode === Engine.ALPHA_DISABLE);\n    }\n    this._alphaMode = mode;\n    this._cacheRenderPipeline.setAlphaBlendEnabled(this._alphaState.alphaBlend);\n    this._cacheRenderPipeline.setAlphaBlendFactors(this._alphaState._blendFunctionParameters, this._alphaState._blendEquationParameters);\n};\nWebGPUEngine.prototype.setAlphaEquation = function (equation) {\n    Engine.prototype.setAlphaEquation.call(this, equation);\n    this._cacheRenderPipeline.setAlphaBlendFactors(this._alphaState._blendFunctionParameters, this._alphaState._blendEquationParameters);\n};\n//# sourceMappingURL=engine.alpha.js.map","import { Logger } from \"../../Misc/logger.js\";\nimport { ComputeBindingType } from \"../Extensions/engine.computeShader.js\";\nimport * as WebGPUConstants from \"./webgpuConstants.js\";\n/** @internal */\nexport class WebGPUComputeContext {\n    getBindGroups(bindings, computePipeline, bindingsMapping) {\n        if (!bindingsMapping) {\n            throw new Error(\"WebGPUComputeContext.getBindGroups: bindingsMapping is required until browsers support reflection for wgsl shaders!\");\n        }\n        if (this._bindGroups.length === 0) {\n            const bindGroupEntriesExist = this._bindGroupEntries.length > 0;\n            for (const key in bindings) {\n                const binding = bindings[key], location = bindingsMapping[key], group = location.group, index = location.binding, type = binding.type, object = binding.object;\n                let indexInGroupEntries = binding.indexInGroupEntries;\n                let entries = this._bindGroupEntries[group];\n                if (!entries) {\n                    entries = this._bindGroupEntries[group] = [];\n                }\n                switch (type) {\n                    case ComputeBindingType.Sampler: {\n                        const sampler = object;\n                        if (indexInGroupEntries !== undefined && bindGroupEntriesExist) {\n                            entries[indexInGroupEntries].resource = this._cacheSampler.getSampler(sampler);\n                        }\n                        else {\n                            binding.indexInGroupEntries = entries.length;\n                            entries.push({\n                                binding: index,\n                                resource: this._cacheSampler.getSampler(sampler),\n                            });\n                        }\n                        break;\n                    }\n                    case ComputeBindingType.Texture:\n                    case ComputeBindingType.TextureWithoutSampler: {\n                        const texture = object;\n                        const hardwareTexture = texture._texture._hardwareTexture;\n                        if (indexInGroupEntries !== undefined && bindGroupEntriesExist) {\n                            if (type === ComputeBindingType.Texture) {\n                                entries[indexInGroupEntries++].resource = this._cacheSampler.getSampler(texture._texture);\n                            }\n                            entries[indexInGroupEntries].resource = hardwareTexture.view;\n                        }\n                        else {\n                            binding.indexInGroupEntries = entries.length;\n                            if (type === ComputeBindingType.Texture) {\n                                entries.push({\n                                    binding: index - 1,\n                                    resource: this._cacheSampler.getSampler(texture._texture),\n                                });\n                            }\n                            entries.push({\n                                binding: index,\n                                resource: hardwareTexture.view,\n                            });\n                        }\n                        break;\n                    }\n                    case ComputeBindingType.StorageTexture: {\n                        const texture = object;\n                        const hardwareTexture = texture._texture._hardwareTexture;\n                        if ((hardwareTexture.textureAdditionalUsages & WebGPUConstants.TextureUsage.StorageBinding) === 0) {\n                            Logger.Error(`computeDispatch: The texture (name=${texture.name}, uniqueId=${texture.uniqueId}) is not a storage texture!`, 50);\n                        }\n                        if (indexInGroupEntries !== undefined && bindGroupEntriesExist) {\n                            entries[indexInGroupEntries].resource = hardwareTexture.viewForWriting;\n                        }\n                        else {\n                            binding.indexInGroupEntries = entries.length;\n                            entries.push({\n                                binding: index,\n                                resource: hardwareTexture.viewForWriting,\n                            });\n                        }\n                        break;\n                    }\n                    case ComputeBindingType.UniformBuffer:\n                    case ComputeBindingType.StorageBuffer: {\n                        const buffer = type === ComputeBindingType.UniformBuffer ? object : object;\n                        const dataBuffer = buffer.getBuffer();\n                        const webgpuBuffer = dataBuffer.underlyingResource;\n                        if (indexInGroupEntries !== undefined && bindGroupEntriesExist) {\n                            entries[indexInGroupEntries].resource.buffer = webgpuBuffer;\n                            entries[indexInGroupEntries].resource.size = dataBuffer.capacity;\n                        }\n                        else {\n                            binding.indexInGroupEntries = entries.length;\n                            entries.push({\n                                binding: index,\n                                resource: {\n                                    buffer: webgpuBuffer,\n                                    offset: 0,\n                                    size: dataBuffer.capacity,\n                                },\n                            });\n                        }\n                        break;\n                    }\n                }\n            }\n            for (let i = 0; i < this._bindGroupEntries.length; ++i) {\n                const entries = this._bindGroupEntries[i];\n                if (!entries) {\n                    this._bindGroups[i] = undefined;\n                    continue;\n                }\n                this._bindGroups[i] = this._device.createBindGroup({\n                    layout: computePipeline.getBindGroupLayout(i),\n                    entries,\n                });\n            }\n            this._bindGroups.length = this._bindGroupEntries.length;\n        }\n        return this._bindGroups;\n    }\n    constructor(device, cacheSampler) {\n        this._device = device;\n        this._cacheSampler = cacheSampler;\n        this.uniqueId = WebGPUComputeContext._Counter++;\n        this._bindGroupEntries = [];\n        this.clear();\n    }\n    clear() {\n        this._bindGroups = [];\n        // Don't reset _bindGroupEntries if they have already been created, they are still ok even if we have to clear _bindGroups (the layout of the compute shader can't change once created)\n    }\n}\nWebGPUComputeContext._Counter = 0;\n//# sourceMappingURL=webgpuComputeContext.js.map","/** @internal */\nexport class WebGPUComputePipelineContext {\n    get isAsync() {\n        return false;\n    }\n    get isReady() {\n        if (this.stage) {\n            return true;\n        }\n        return false;\n    }\n    constructor(engine) {\n        this._name = \"unnamed\";\n        this.engine = engine;\n    }\n    _getComputeShaderCode() {\n        var _a;\n        return (_a = this.sources) === null || _a === void 0 ? void 0 : _a.compute;\n    }\n    dispose() { }\n}\n//# sourceMappingURL=webgpuComputePipelineContext.js.map","import { ComputeEffect } from \"../../../Compute/computeEffect.js\";\nimport { WebGPUEngine } from \"../../webgpuEngine.js\";\nimport { WebGPUComputeContext } from \"../webgpuComputeContext.js\";\nimport { WebGPUComputePipelineContext } from \"../webgpuComputePipelineContext.js\";\nimport * as WebGPUConstants from \"../webgpuConstants.js\";\nWebGPUEngine.prototype.createComputeContext = function () {\n    return new WebGPUComputeContext(this._device, this._cacheSampler);\n};\nWebGPUEngine.prototype.createComputeEffect = function (baseName, options) {\n    const compute = baseName.computeElement || baseName.compute || baseName.computeToken || baseName.computeSource || baseName;\n    const name = compute + \"@\" + options.defines;\n    if (this._compiledComputeEffects[name]) {\n        const compiledEffect = this._compiledComputeEffects[name];\n        if (options.onCompiled && compiledEffect.isReady()) {\n            options.onCompiled(compiledEffect);\n        }\n        return compiledEffect;\n    }\n    const effect = new ComputeEffect(baseName, options, this, name);\n    this._compiledComputeEffects[name] = effect;\n    return effect;\n};\nWebGPUEngine.prototype.createComputePipelineContext = function () {\n    return new WebGPUComputePipelineContext(this);\n};\nWebGPUEngine.prototype.areAllComputeEffectsReady = function () {\n    for (const key in this._compiledComputeEffects) {\n        const effect = this._compiledComputeEffects[key];\n        if (!effect.isReady()) {\n            return false;\n        }\n    }\n    return true;\n};\nWebGPUEngine.prototype.computeDispatch = function (effect, context, bindings, x, y, z, bindingsMapping) {\n    if (this._currentRenderTarget) {\n        // A render target pass is currently in effect (meaning beingRenderPass has been called on the command encoder this._renderTargetEncoder): we are not allowed to open\n        // another pass on this command encoder (even if it's a compute pass) until endPass has been called, so we need to defer the compute pass for after the current render target pass is closed\n        this._onAfterUnbindFrameBufferObservable.addOnce(() => {\n            this.computeDispatch(effect, context, bindings, x, y, z, bindingsMapping);\n        });\n        return;\n    }\n    const contextPipeline = effect._pipelineContext;\n    const computeContext = context;\n    if (!contextPipeline.computePipeline) {\n        contextPipeline.computePipeline = this._device.createComputePipeline({\n            layout: WebGPUConstants.AutoLayoutMode.Auto,\n            compute: contextPipeline.stage,\n        });\n    }\n    const commandEncoder = this._renderTargetEncoder;\n    const computePass = commandEncoder.beginComputePass();\n    computePass.setPipeline(contextPipeline.computePipeline);\n    const bindGroups = computeContext.getBindGroups(bindings, contextPipeline.computePipeline, bindingsMapping);\n    for (let i = 0; i < bindGroups.length; ++i) {\n        const bindGroup = bindGroups[i];\n        if (!bindGroup) {\n            continue;\n        }\n        computePass.setBindGroup(i, bindGroup);\n    }\n    computePass.dispatchWorkgroups(x, y, z);\n    computePass.end();\n};\nWebGPUEngine.prototype.releaseComputeEffects = function () {\n    for (const name in this._compiledComputeEffects) {\n        const webGPUPipelineContextCompute = this._compiledComputeEffects[name].getPipelineContext();\n        this._deleteComputePipelineContext(webGPUPipelineContextCompute);\n    }\n    this._compiledComputeEffects = {};\n};\nWebGPUEngine.prototype._prepareComputePipelineContext = function (pipelineContext, computeSourceCode, rawComputeSourceCode, defines, entryPoint) {\n    const webGpuContext = pipelineContext;\n    if (this.dbgShowShaderCode) {\n        console.log(defines);\n        console.log(computeSourceCode);\n    }\n    webGpuContext.sources = {\n        compute: computeSourceCode,\n        rawCompute: rawComputeSourceCode,\n    };\n    webGpuContext.stage = this._createComputePipelineStageDescriptor(computeSourceCode, defines, entryPoint);\n};\nWebGPUEngine.prototype._releaseComputeEffect = function (effect) {\n    if (this._compiledComputeEffects[effect._key]) {\n        delete this._compiledComputeEffects[effect._key];\n        this._deleteComputePipelineContext(effect.getPipelineContext());\n    }\n};\nWebGPUEngine.prototype._rebuildComputeEffects = function () {\n    for (const key in this._compiledComputeEffects) {\n        const effect = this._compiledComputeEffects[key];\n        effect._pipelineContext = null;\n        effect._wasPreviouslyReady = false;\n        effect._prepareEffect();\n    }\n};\nWebGPUEngine.prototype._deleteComputePipelineContext = function (pipelineContext) {\n    const webgpuPipelineContext = pipelineContext;\n    if (webgpuPipelineContext) {\n        pipelineContext.dispose();\n    }\n};\nWebGPUEngine.prototype._createComputePipelineStageDescriptor = function (computeShader, defines, entryPoint) {\n    if (defines) {\n        defines = \"//\" + defines.split(\"\\n\").join(\"\\n//\") + \"\\n\";\n    }\n    else {\n        defines = \"\";\n    }\n    return {\n        module: this._device.createShaderModule({\n            code: defines + computeShader,\n        }),\n        entryPoint,\n    };\n};\n//# sourceMappingURL=engine.computeShader.js.map","import { InternalTexture, InternalTextureSource } from \"../../../Materials/Textures/internalTexture.js\";\n\nimport { WebGPUEngine } from \"../../webgpuEngine.js\";\nWebGPUEngine.prototype._createDepthStencilCubeTexture = function (size, options) {\n    const internalTexture = new InternalTexture(this, InternalTextureSource.DepthStencil);\n    internalTexture.isCube = true;\n    const internalOptions = {\n        bilinearFiltering: false,\n        comparisonFunction: 0,\n        generateStencil: false,\n        samples: 1,\n        ...options,\n    };\n    // TODO WEBGPU allow to choose the format?\n    internalTexture.format = internalOptions.generateStencil ? 13 : 14;\n    this._setupDepthStencilTexture(internalTexture, size, internalOptions.generateStencil, internalOptions.bilinearFiltering, internalOptions.comparisonFunction, internalOptions.samples);\n    this._textureHelper.createGPUTextureForInternalTexture(internalTexture);\n    this._internalTexturesCache.push(internalTexture);\n    return internalTexture;\n};\nWebGPUEngine.prototype.createCubeTexture = function (rootUrl, scene, files, noMipmap, onLoad = null, onError = null, format, forcedExtension = null, createPolynomials = false, lodScale = 0, lodOffset = 0, fallback = null, useSRGBBuffer = false) {\n    return this.createCubeTextureBase(rootUrl, scene, files, !!noMipmap, onLoad, onError, format, forcedExtension, createPolynomials, lodScale, lodOffset, fallback, null, (texture, imgs) => {\n        const imageBitmaps = imgs; // we will always get an ImageBitmap array in WebGPU\n        const width = imageBitmaps[0].width;\n        const height = width;\n        this._setCubeMapTextureParams(texture, !noMipmap);\n        texture.format = format !== null && format !== void 0 ? format : -1;\n        const gpuTextureWrapper = this._textureHelper.createGPUTextureForInternalTexture(texture, width, height);\n        this._textureHelper.updateCubeTextures(imageBitmaps, gpuTextureWrapper.underlyingResource, width, height, gpuTextureWrapper.format, false, false, 0, 0);\n        if (!noMipmap) {\n            this._generateMipmaps(texture, this._uploadEncoder);\n        }\n        texture.isReady = true;\n        texture.onLoadedObservable.notifyObservers(texture);\n        texture.onLoadedObservable.clear();\n        if (onLoad) {\n            onLoad();\n        }\n    }, !!useSRGBBuffer);\n};\nWebGPUEngine.prototype._setCubeMapTextureParams = function (texture, loadMipmap, maxLevel) {\n    texture.samplingMode = loadMipmap ? 3 : 2;\n    texture._cachedWrapU = 0;\n    texture._cachedWrapV = 0;\n    if (maxLevel) {\n        texture._maxLodLevel = maxLevel;\n    }\n};\n//# sourceMappingURL=engine.cubeTexture.js.map","import { WebGPUEngine } from \"../../webgpuEngine.js\";\nWebGPUEngine.prototype._debugPushGroup = function (groupName, targetObject) {\n    if (!this._options.enableGPUDebugMarkers) {\n        return;\n    }\n    if (targetObject === 0 || targetObject === 1) {\n        const encoder = targetObject === 0 ? this._renderEncoder : this._renderTargetEncoder;\n        encoder.pushDebugGroup(groupName);\n    }\n    else if (this._currentRenderPass) {\n        this._currentRenderPass.pushDebugGroup(groupName);\n    }\n    else {\n        this._pendingDebugCommands.push([\"push\", groupName]);\n    }\n};\nWebGPUEngine.prototype._debugPopGroup = function (targetObject) {\n    if (!this._options.enableGPUDebugMarkers) {\n        return;\n    }\n    if (targetObject === 0 || targetObject === 1) {\n        const encoder = targetObject === 0 ? this._renderEncoder : this._renderTargetEncoder;\n        encoder.popDebugGroup();\n    }\n    else if (this._currentRenderPass) {\n        this._currentRenderPass.popDebugGroup();\n    }\n    else {\n        this._pendingDebugCommands.push([\"pop\", null]);\n    }\n};\nWebGPUEngine.prototype._debugInsertMarker = function (text, targetObject) {\n    if (!this._options.enableGPUDebugMarkers) {\n        return;\n    }\n    if (targetObject === 0 || targetObject === 1) {\n        const encoder = targetObject === 0 ? this._renderEncoder : this._renderTargetEncoder;\n        encoder.insertDebugMarker(text);\n    }\n    else if (this._currentRenderPass) {\n        this._currentRenderPass.insertDebugMarker(text);\n    }\n    else {\n        this._pendingDebugCommands.push([\"insert\", text]);\n    }\n};\nWebGPUEngine.prototype._debugFlushPendingCommands = function () {\n    for (let i = 0; i < this._pendingDebugCommands.length; ++i) {\n        const [name, param] = this._pendingDebugCommands[i];\n        switch (name) {\n            case \"push\":\n                this._debugPushGroup(param);\n                break;\n            case \"pop\":\n                this._debugPopGroup();\n                break;\n            case \"insert\":\n                this._debugInsertMarker(param);\n                break;\n        }\n    }\n    this._pendingDebugCommands.length = 0;\n};\n//# sourceMappingURL=engine.debugging.js.map","import { WebGPUEngine } from \"../../webgpuEngine.js\";\nWebGPUEngine.prototype.updateDynamicIndexBuffer = function (indexBuffer, indices, offset = 0) {\n    const gpuBuffer = indexBuffer;\n    let view;\n    if (indexBuffer.is32Bits) {\n        view = indices instanceof Uint32Array ? indices : new Uint32Array(indices);\n    }\n    else {\n        view = indices instanceof Uint16Array ? indices : new Uint16Array(indices);\n    }\n    this._bufferManager.setSubData(gpuBuffer, offset, view);\n};\nWebGPUEngine.prototype.updateDynamicVertexBuffer = function (vertexBuffer, data, byteOffset, byteLength) {\n    const dataBuffer = vertexBuffer;\n    if (byteOffset === undefined) {\n        byteOffset = 0;\n    }\n    let view;\n    if (byteLength === undefined) {\n        if (data instanceof Array) {\n            view = new Float32Array(data);\n        }\n        else if (data instanceof ArrayBuffer) {\n            view = new Uint8Array(data);\n        }\n        else {\n            view = data;\n        }\n        byteLength = view.byteLength;\n    }\n    else {\n        if (data instanceof Array) {\n            view = new Float32Array(data);\n        }\n        else if (data instanceof ArrayBuffer) {\n            view = new Uint8Array(data);\n        }\n        else {\n            view = data;\n        }\n    }\n    this._bufferManager.setSubData(dataBuffer, byteOffset, view, 0, byteLength);\n};\n//# sourceMappingURL=engine.dynamicBuffer.js.map","import { WebGPUEngine } from \"../../webgpuEngine.js\";\nWebGPUEngine.prototype.updateDynamicTexture = function (texture, canvas, invertY, premulAlpha = false, format, forceBindTexture, allowGPUOptimization) {\n    var _a;\n    if (!texture) {\n        return;\n    }\n    const width = canvas.width, height = canvas.height;\n    let gpuTextureWrapper = texture._hardwareTexture;\n    if (!((_a = texture._hardwareTexture) === null || _a === void 0 ? void 0 : _a.underlyingResource)) {\n        gpuTextureWrapper = this._textureHelper.createGPUTextureForInternalTexture(texture, width, height);\n    }\n    this._textureHelper.updateTexture(canvas, texture, width, height, texture.depth, gpuTextureWrapper.format, 0, 0, invertY, premulAlpha, 0, 0, allowGPUOptimization);\n    if (texture.generateMipMaps) {\n        this._generateMipmaps(texture, this._uploadEncoder);\n    }\n    texture.isReady = true;\n};\n//# sourceMappingURL=engine.dynamicTexture.js.map","import { ExternalTexture } from \"../../Materials/Textures/externalTexture.js\";\n/**\n * Nothing specific to WebGPU in this class, but the spec is not final yet so let's remove it later on\n * if it is not needed\n * @internal\n **/\nexport class WebGPUExternalTexture extends ExternalTexture {\n    constructor(video) {\n        super(video);\n    }\n}\n//# sourceMappingURL=webgpuExternalTexture.js.map","import { WebGPUEngine } from \"../../webgpuEngine.js\";\nimport { WebGPUExternalTexture } from \"../webgpuExternalTexture.js\";\nimport { Effect } from \"../../../Materials/effect.js\";\nEffect.prototype.setExternalTexture = function (name, texture) {\n    this._engine.setExternalTexture(name, texture);\n};\nWebGPUEngine.prototype.createExternalTexture = function (video) {\n    const texture = new WebGPUExternalTexture(video);\n    return texture;\n};\nWebGPUEngine.prototype.setExternalTexture = function (name, texture) {\n    if (!texture) {\n        this._currentMaterialContext.setTexture(name, null);\n        return;\n    }\n    this._setInternalTexture(name, texture);\n};\n//# sourceMappingURL=engine.externalTexture.js.map","import { InternalTexture, InternalTextureSource } from \"../../../Materials/Textures/internalTexture.js\";\nimport { Logger } from \"../../../Misc/logger.js\";\n\nimport { WebGPUEngine } from \"../../webgpuEngine.js\";\nWebGPUEngine.prototype.unBindMultiColorAttachmentFramebuffer = function (rtWrapper, disableGenerateMipMaps = false, onBeforeUnbind) {\n    if (onBeforeUnbind) {\n        onBeforeUnbind();\n    }\n    const attachments = rtWrapper._attachments;\n    const count = attachments.length;\n    if (this._currentRenderPass && this._currentRenderPass !== this._mainRenderPassWrapper.renderPass) {\n        this._endRenderTargetRenderPass();\n    }\n    for (let i = 0; i < count; i++) {\n        const texture = rtWrapper.textures[i];\n        if (texture.generateMipMaps && !disableGenerateMipMaps && !texture.isCube) {\n            this._generateMipmaps(texture);\n        }\n    }\n    this._currentRenderTarget = null;\n    this._mrtAttachments = [];\n    this._cacheRenderPipeline.setMRT([]);\n    this._cacheRenderPipeline.setMRTAttachments(this._mrtAttachments);\n    this._currentRenderPass = this._mainRenderPassWrapper.renderPass;\n    this._setDepthTextureFormat(this._mainRenderPassWrapper);\n    this._setColorFormat(this._mainRenderPassWrapper);\n};\nWebGPUEngine.prototype.createMultipleRenderTarget = function (size, options, initializeBuffers) {\n    var _a;\n    let generateMipMaps = false;\n    let generateDepthBuffer = true;\n    let generateStencilBuffer = false;\n    let generateDepthTexture = false;\n    let depthTextureFormat = 15;\n    let textureCount = 1;\n    const defaultType = 0;\n    const defaultSamplingMode = 3;\n    const defaultUseSRGBBuffer = false;\n    let types = new Array();\n    let samplingModes = new Array();\n    let useSRGBBuffers = new Array();\n    const rtWrapper = this._createHardwareRenderTargetWrapper(true, false, size);\n    if (options !== undefined) {\n        generateMipMaps = options.generateMipMaps === undefined ? false : options.generateMipMaps;\n        generateDepthBuffer = options.generateDepthBuffer === undefined ? true : options.generateDepthBuffer;\n        generateStencilBuffer = options.generateStencilBuffer === undefined ? false : options.generateStencilBuffer;\n        generateDepthTexture = options.generateDepthTexture === undefined ? false : options.generateDepthTexture;\n        textureCount = options.textureCount || 1;\n        depthTextureFormat = (_a = options.depthTextureFormat) !== null && _a !== void 0 ? _a : 15;\n        if (options.types) {\n            types = options.types;\n        }\n        if (options.samplingModes) {\n            samplingModes = options.samplingModes;\n        }\n        if (options.useSRGBBuffers) {\n            useSRGBBuffers = options.useSRGBBuffers;\n        }\n    }\n    const width = size.width || size;\n    const height = size.height || size;\n    let depthStencilTexture = null;\n    if (generateDepthBuffer || generateStencilBuffer || generateDepthTexture) {\n        depthStencilTexture = rtWrapper.createDepthStencilTexture(0, false, generateStencilBuffer, 1, depthTextureFormat);\n    }\n    const textures = [];\n    const attachments = [];\n    const defaultAttachments = [];\n    rtWrapper._generateDepthBuffer = generateDepthBuffer;\n    rtWrapper._generateStencilBuffer = generateStencilBuffer;\n    rtWrapper._attachments = attachments;\n    rtWrapper._defaultAttachments = defaultAttachments;\n    for (let i = 0; i < textureCount; i++) {\n        let samplingMode = samplingModes[i] || defaultSamplingMode;\n        let type = types[i] || defaultType;\n        const useSRGBBuffer = useSRGBBuffers[i] || defaultUseSRGBBuffer;\n        if (type === 1 && !this._caps.textureFloatLinearFiltering) {\n            // if floating point linear (gl.FLOAT) then force to NEAREST_SAMPLINGMODE\n            samplingMode = 1;\n        }\n        else if (type === 2 && !this._caps.textureHalfFloatLinearFiltering) {\n            // if floating point linear (HALF_FLOAT) then force to NEAREST_SAMPLINGMODE\n            samplingMode = 1;\n        }\n        if (type === 1 && !this._caps.textureFloat) {\n            type = 0;\n            Logger.Warn(\"Float textures are not supported. Render target forced to TEXTURETYPE_UNSIGNED_BYTE type\");\n        }\n        const texture = new InternalTexture(this, InternalTextureSource.MultiRenderTarget);\n        textures.push(texture);\n        attachments.push(i + 1);\n        defaultAttachments.push(initializeBuffers ? i + 1 : i === 0 ? 1 : 0);\n        texture.baseWidth = width;\n        texture.baseHeight = height;\n        texture.width = width;\n        texture.height = height;\n        texture.isReady = true;\n        texture.samples = 1;\n        texture.generateMipMaps = generateMipMaps;\n        texture.samplingMode = samplingMode;\n        texture.type = type;\n        texture._cachedWrapU = 0;\n        texture._cachedWrapV = 0;\n        texture._useSRGBBuffer = useSRGBBuffer;\n        this._internalTexturesCache.push(texture);\n        this._textureHelper.createGPUTextureForInternalTexture(texture);\n    }\n    if (depthStencilTexture) {\n        depthStencilTexture.incrementReferences();\n        textures.push(depthStencilTexture);\n        this._internalTexturesCache.push(depthStencilTexture);\n    }\n    rtWrapper.setTextures(textures);\n    return rtWrapper;\n};\nWebGPUEngine.prototype.updateMultipleRenderTargetTextureSampleCount = function (rtWrapper, samples) {\n    if (!rtWrapper || !rtWrapper.textures || rtWrapper.textures[0].samples === samples) {\n        return samples;\n    }\n    const count = rtWrapper.textures.length;\n    if (count === 0) {\n        return 1;\n    }\n    samples = Math.min(samples, this.getCaps().maxMSAASamples);\n    for (let i = 0; i < count; ++i) {\n        const texture = rtWrapper.textures[i];\n        this._textureHelper.createMSAATexture(texture, samples);\n        texture.samples = samples;\n    }\n    // Note that the last texture of textures is the depth texture if the depth texture has been generated by the MRT class and so the MSAA texture\n    // will be recreated for this texture by the loop above: in that case, there's no need to create the MSAA texture for rtWrapper._depthStencilTexture\n    // because rtWrapper._depthStencilTexture is the same texture than the depth texture\n    if (rtWrapper._depthStencilTexture && rtWrapper._depthStencilTexture !== rtWrapper.textures[rtWrapper.textures.length - 1]) {\n        this._textureHelper.createMSAATexture(rtWrapper._depthStencilTexture, samples);\n        rtWrapper._depthStencilTexture.samples = samples;\n    }\n    return samples;\n};\nWebGPUEngine.prototype.bindAttachments = function (attachments) {\n    if (attachments.length === 0 || !this._currentRenderTarget) {\n        return;\n    }\n    this._mrtAttachments = attachments;\n    if (this._currentRenderPass) {\n        // the render pass has already been created, we need to call setMRTAttachments to update the state of the attachments\n        this._cacheRenderPipeline.setMRTAttachments(attachments);\n    }\n    else {\n        // the render pass is not created yet so we don't need to call setMRTAttachments: it will be called as part of the render pass creation (see WebGPUEngine._startRenderTargetRenderPass)\n    }\n};\nWebGPUEngine.prototype.buildTextureLayout = function (textureStatus) {\n    const result = [];\n    for (let i = 0; i < textureStatus.length; i++) {\n        if (textureStatus[i]) {\n            result.push(i + 1);\n        }\n        else {\n            result.push(0);\n        }\n    }\n    return result;\n};\nWebGPUEngine.prototype.restoreSingleAttachment = function () {\n    // not sure what to do, probably nothing... This function and restoreSingleAttachmentForRenderTarget are not called in Babylon.js so it's hard to know the use case\n};\nWebGPUEngine.prototype.restoreSingleAttachmentForRenderTarget = function () {\n    // not sure what to do, probably nothing... This function and restoreSingleAttachment are not called in Babylon.js so it's hard to know the use case\n};\n//# sourceMappingURL=engine.multiRender.js.map","import { InternalTexture, InternalTextureSource } from \"../../../Materials/Textures/internalTexture.js\";\n\nimport { WebGPUEngine } from \"../../webgpuEngine.js\";\nimport { Logger } from \"../../../Misc/logger.js\";\nWebGPUEngine.prototype.createRawTexture = function (data, width, height, format, generateMipMaps, invertY, samplingMode, compression = null, type = 0, creationFlags = 0, useSRGBBuffer = false) {\n    const texture = new InternalTexture(this, InternalTextureSource.Raw);\n    texture.baseWidth = width;\n    texture.baseHeight = height;\n    texture.width = width;\n    texture.height = height;\n    texture.format = format;\n    texture.generateMipMaps = generateMipMaps;\n    texture.samplingMode = samplingMode;\n    texture.invertY = invertY;\n    texture._compression = compression;\n    texture.type = type;\n    texture._useSRGBBuffer = useSRGBBuffer;\n    if (!this._doNotHandleContextLost) {\n        texture._bufferView = data;\n    }\n    this._textureHelper.createGPUTextureForInternalTexture(texture, width, height, undefined, creationFlags);\n    this.updateRawTexture(texture, data, format, invertY, compression, type, useSRGBBuffer);\n    this._internalTexturesCache.push(texture);\n    return texture;\n};\nWebGPUEngine.prototype.updateRawTexture = function (texture, bufferView, format, invertY, compression = null, type = 0, useSRGBBuffer = false) {\n    if (!texture) {\n        return;\n    }\n    if (!this._doNotHandleContextLost) {\n        texture._bufferView = bufferView;\n        texture.invertY = invertY;\n        texture._compression = compression;\n        texture._useSRGBBuffer = useSRGBBuffer;\n    }\n    if (bufferView) {\n        const gpuTextureWrapper = texture._hardwareTexture;\n        const needConversion = format === 4;\n        if (needConversion) {\n            bufferView = _convertRGBtoRGBATextureData(bufferView, texture.width, texture.height, type);\n        }\n        const data = new Uint8Array(bufferView.buffer, bufferView.byteOffset, bufferView.byteLength);\n        this._textureHelper.updateTexture(data, texture, texture.width, texture.height, texture.depth, gpuTextureWrapper.format, 0, 0, invertY, false, 0, 0);\n        if (texture.generateMipMaps) {\n            this._generateMipmaps(texture, this._uploadEncoder);\n        }\n    }\n    texture.isReady = true;\n};\nWebGPUEngine.prototype.createRawCubeTexture = function (data, size, format, type, generateMipMaps, invertY, samplingMode, compression = null) {\n    const texture = new InternalTexture(this, InternalTextureSource.CubeRaw);\n    if (type === 1 && !this._caps.textureFloatLinearFiltering) {\n        generateMipMaps = false;\n        samplingMode = 1;\n        Logger.Warn(\"Float texture filtering is not supported. Mipmap generation and sampling mode are forced to false and TEXTURE_NEAREST_SAMPLINGMODE, respectively.\");\n    }\n    else if (type === 2 && !this._caps.textureHalfFloatLinearFiltering) {\n        generateMipMaps = false;\n        samplingMode = 1;\n        Logger.Warn(\"Half float texture filtering is not supported. Mipmap generation and sampling mode are forced to false and TEXTURE_NEAREST_SAMPLINGMODE, respectively.\");\n    }\n    else if (type === 1 && !this._caps.textureFloatRender) {\n        generateMipMaps = false;\n        Logger.Warn(\"Render to float textures is not supported. Mipmap generation forced to false.\");\n    }\n    else if (type === 2 && !this._caps.colorBufferFloat) {\n        generateMipMaps = false;\n        Logger.Warn(\"Render to half float textures is not supported. Mipmap generation forced to false.\");\n    }\n    texture.isCube = true;\n    texture.format = format === 4 ? 5 : format;\n    texture.type = type;\n    texture.generateMipMaps = generateMipMaps;\n    texture.width = size;\n    texture.height = size;\n    texture.samplingMode = samplingMode;\n    if (!this._doNotHandleContextLost) {\n        texture._bufferViewArray = data;\n    }\n    texture.invertY = invertY;\n    texture._compression = compression;\n    texture._cachedWrapU = 0;\n    texture._cachedWrapV = 0;\n    this._textureHelper.createGPUTextureForInternalTexture(texture);\n    if (data) {\n        this.updateRawCubeTexture(texture, data, format, type, invertY, compression);\n    }\n    texture.isReady = true;\n    return texture;\n};\nWebGPUEngine.prototype.updateRawCubeTexture = function (texture, bufferView, format, type, invertY, compression = null) {\n    texture._bufferViewArray = bufferView;\n    texture.invertY = invertY;\n    texture._compression = compression;\n    const gpuTextureWrapper = texture._hardwareTexture;\n    const needConversion = format === 4;\n    const data = [];\n    for (let i = 0; i < bufferView.length; ++i) {\n        let faceData = bufferView[i];\n        if (needConversion) {\n            faceData = _convertRGBtoRGBATextureData(bufferView[i], texture.width, texture.height, type);\n        }\n        data.push(new Uint8Array(faceData.buffer, faceData.byteOffset, faceData.byteLength));\n    }\n    this._textureHelper.updateCubeTextures(data, gpuTextureWrapper.underlyingResource, texture.width, texture.height, gpuTextureWrapper.format, invertY, false, 0, 0);\n    if (texture.generateMipMaps) {\n        this._generateMipmaps(texture, this._uploadEncoder);\n    }\n    texture.isReady = true;\n};\nWebGPUEngine.prototype.createRawCubeTextureFromUrl = function (url, scene, size, format, type, noMipmap, callback, mipmapGenerator, onLoad = null, onError = null, samplingMode = 3, invertY = false) {\n    const texture = this.createRawCubeTexture(null, size, format, type, !noMipmap, invertY, samplingMode, null);\n    scene === null || scene === void 0 ? void 0 : scene.addPendingData(texture);\n    texture.url = url;\n    this._internalTexturesCache.push(texture);\n    const onerror = (request, exception) => {\n        scene === null || scene === void 0 ? void 0 : scene.removePendingData(texture);\n        if (onError && request) {\n            onError(request.status + \" \" + request.statusText, exception);\n        }\n    };\n    const internalCallback = (data) => {\n        const width = texture.width;\n        const faceDataArrays = callback(data);\n        if (!faceDataArrays) {\n            return;\n        }\n        const faces = [0, 2, 4, 1, 3, 5];\n        if (mipmapGenerator) {\n            const needConversion = format === 4;\n            const mipData = mipmapGenerator(faceDataArrays);\n            const gpuTextureWrapper = texture._hardwareTexture;\n            const faces = [0, 1, 2, 3, 4, 5];\n            for (let level = 0; level < mipData.length; level++) {\n                const mipSize = width >> level;\n                const allFaces = [];\n                for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n                    let mipFaceData = mipData[level][faces[faceIndex]];\n                    if (needConversion) {\n                        mipFaceData = _convertRGBtoRGBATextureData(mipFaceData, mipSize, mipSize, type);\n                    }\n                    allFaces.push(new Uint8Array(mipFaceData.buffer, mipFaceData.byteOffset, mipFaceData.byteLength));\n                }\n                this._textureHelper.updateCubeTextures(allFaces, gpuTextureWrapper.underlyingResource, mipSize, mipSize, gpuTextureWrapper.format, invertY, false, 0, 0);\n            }\n        }\n        else {\n            const allFaces = [];\n            for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n                allFaces.push(faceDataArrays[faces[faceIndex]]);\n            }\n            this.updateRawCubeTexture(texture, allFaces, format, type, invertY);\n        }\n        texture.isReady = true;\n        scene === null || scene === void 0 ? void 0 : scene.removePendingData(texture);\n        if (onLoad) {\n            onLoad();\n        }\n    };\n    this._loadFile(url, (data) => {\n        internalCallback(data);\n    }, undefined, scene === null || scene === void 0 ? void 0 : scene.offlineProvider, true, onerror);\n    return texture;\n};\nWebGPUEngine.prototype.createRawTexture3D = function (data, width, height, depth, format, generateMipMaps, invertY, samplingMode, compression = null, textureType = 0, creationFlags = 0) {\n    const source = InternalTextureSource.Raw3D;\n    const texture = new InternalTexture(this, source);\n    texture.baseWidth = width;\n    texture.baseHeight = height;\n    texture.baseDepth = depth;\n    texture.width = width;\n    texture.height = height;\n    texture.depth = depth;\n    texture.format = format;\n    texture.type = textureType;\n    texture.generateMipMaps = generateMipMaps;\n    texture.samplingMode = samplingMode;\n    texture.is3D = true;\n    if (!this._doNotHandleContextLost) {\n        texture._bufferView = data;\n    }\n    this._textureHelper.createGPUTextureForInternalTexture(texture, width, height, undefined, creationFlags);\n    this.updateRawTexture3D(texture, data, format, invertY, compression, textureType);\n    this._internalTexturesCache.push(texture);\n    return texture;\n};\nWebGPUEngine.prototype.updateRawTexture3D = function (texture, bufferView, format, invertY, compression = null, textureType = 0) {\n    if (!this._doNotHandleContextLost) {\n        texture._bufferView = bufferView;\n        texture.format = format;\n        texture.invertY = invertY;\n        texture._compression = compression;\n    }\n    if (bufferView) {\n        const gpuTextureWrapper = texture._hardwareTexture;\n        const needConversion = format === 4;\n        if (needConversion) {\n            bufferView = _convertRGBtoRGBATextureData(bufferView, texture.width, texture.height, textureType);\n        }\n        const data = new Uint8Array(bufferView.buffer, bufferView.byteOffset, bufferView.byteLength);\n        this._textureHelper.updateTexture(data, texture, texture.width, texture.height, texture.depth, gpuTextureWrapper.format, 0, 0, invertY, false, 0, 0);\n        if (texture.generateMipMaps) {\n            this._generateMipmaps(texture, this._uploadEncoder);\n        }\n    }\n    texture.isReady = true;\n};\nWebGPUEngine.prototype.createRawTexture2DArray = function (data, width, height, depth, format, generateMipMaps, invertY, samplingMode, compression = null, textureType = 0, creationFlags = 0) {\n    const source = InternalTextureSource.Raw2DArray;\n    const texture = new InternalTexture(this, source);\n    texture.baseWidth = width;\n    texture.baseHeight = height;\n    texture.baseDepth = depth;\n    texture.width = width;\n    texture.height = height;\n    texture.depth = depth;\n    texture.format = format;\n    texture.type = textureType;\n    texture.generateMipMaps = generateMipMaps;\n    texture.samplingMode = samplingMode;\n    texture.is2DArray = true;\n    if (!this._doNotHandleContextLost) {\n        texture._bufferView = data;\n    }\n    this._textureHelper.createGPUTextureForInternalTexture(texture, width, height, depth, creationFlags);\n    this.updateRawTexture2DArray(texture, data, format, invertY, compression, textureType);\n    this._internalTexturesCache.push(texture);\n    return texture;\n};\nWebGPUEngine.prototype.updateRawTexture2DArray = function (texture, bufferView, format, invertY, compression = null, textureType = 0) {\n    if (!this._doNotHandleContextLost) {\n        texture._bufferView = bufferView;\n        texture.format = format;\n        texture.invertY = invertY;\n        texture._compression = compression;\n    }\n    if (bufferView) {\n        const gpuTextureWrapper = texture._hardwareTexture;\n        const needConversion = format === 4;\n        if (needConversion) {\n            bufferView = _convertRGBtoRGBATextureData(bufferView, texture.width, texture.height, textureType);\n        }\n        const data = new Uint8Array(bufferView.buffer, bufferView.byteOffset, bufferView.byteLength);\n        this._textureHelper.updateTexture(data, texture, texture.width, texture.height, texture.depth, gpuTextureWrapper.format, 0, 0, invertY, false, 0, 0);\n        if (texture.generateMipMaps) {\n            this._generateMipmaps(texture, this._uploadEncoder);\n        }\n    }\n    texture.isReady = true;\n};\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _convertRGBtoRGBATextureData(rgbData, width, height, textureType) {\n    // Create new RGBA data container.\n    let rgbaData;\n    let val1 = 1;\n    if (textureType === 1) {\n        rgbaData = new Float32Array(width * height * 4);\n    }\n    else if (textureType === 2) {\n        rgbaData = new Uint16Array(width * height * 4);\n        val1 = 15360; // 15360 is the encoding of 1 in half float\n    }\n    else if (textureType === 7) {\n        rgbaData = new Uint32Array(width * height * 4);\n    }\n    else {\n        rgbaData = new Uint8Array(width * height * 4);\n    }\n    // Convert each pixel.\n    for (let x = 0; x < width; x++) {\n        for (let y = 0; y < height; y++) {\n            const index = (y * width + x) * 3;\n            const newIndex = (y * width + x) * 4;\n            // Map Old Value to new value.\n            rgbaData[newIndex + 0] = rgbData[index + 0];\n            rgbaData[newIndex + 1] = rgbData[index + 1];\n            rgbaData[newIndex + 2] = rgbData[index + 2];\n            // Add fully opaque alpha channel.\n            rgbaData[newIndex + 3] = val1;\n        }\n    }\n    return rgbaData;\n}\n//# sourceMappingURL=engine.rawTexture.js.map","import { WebGPUEngine } from \"../../webgpuEngine.js\";\nimport { WebGPURenderItemBeginOcclusionQuery, WebGPURenderItemEndOcclusionQuery } from \"../webgpuBundleList.js\";\nWebGPUEngine.prototype.getGPUFrameTimeCounter = function () {\n    return this._timestampQuery.gpuFrameTimeCounter;\n};\nWebGPUEngine.prototype.captureGPUFrameTime = function (value) {\n    this._timestampQuery.enable = value && !!this._caps.timerQuery;\n};\nWebGPUEngine.prototype.createQuery = function () {\n    return this._occlusionQuery.createQuery();\n};\nWebGPUEngine.prototype.deleteQuery = function (query) {\n    this._occlusionQuery.deleteQuery(query);\n    return this;\n};\nWebGPUEngine.prototype.isQueryResultAvailable = function (query) {\n    return this._occlusionQuery.isQueryResultAvailable(query);\n};\nWebGPUEngine.prototype.getQueryResult = function (query) {\n    return this._occlusionQuery.getQueryResult(query);\n};\nWebGPUEngine.prototype.beginOcclusionQuery = function (algorithmType, query) {\n    var _a;\n    if (this.compatibilityMode) {\n        if (this._occlusionQuery.canBeginQuery) {\n            (_a = this._currentRenderPass) === null || _a === void 0 ? void 0 : _a.beginOcclusionQuery(query);\n            return true;\n        }\n    }\n    else {\n        const renderPassIndex = this._getCurrentRenderPassIndex();\n        const bundleList = renderPassIndex === 0 ? this._bundleList : this._bundleListRenderTarget;\n        bundleList.addItem(new WebGPURenderItemBeginOcclusionQuery(query));\n        return true;\n    }\n    return false;\n};\nWebGPUEngine.prototype.endOcclusionQuery = function () {\n    var _a;\n    if (this.compatibilityMode) {\n        (_a = this._currentRenderPass) === null || _a === void 0 ? void 0 : _a.endOcclusionQuery();\n    }\n    else {\n        const renderPassIndex = this._getCurrentRenderPassIndex();\n        const bundleList = renderPassIndex === 0 ? this._bundleList : this._bundleListRenderTarget;\n        bundleList.addItem(new WebGPURenderItemEndOcclusionQuery());\n    }\n    return this;\n};\n//# sourceMappingURL=engine.query.js.map","import { WebGPUEngine } from \"../../webgpuEngine.js\";\nWebGPUEngine.prototype._readTexturePixels = function (texture, width, height, faceIndex = -1, level = 0, buffer = null, flushRenderer = true, noDataConversion = false, x = 0, y = 0) {\n    const gpuTextureWrapper = texture._hardwareTexture;\n    if (flushRenderer) {\n        this.flushFramebuffer();\n    }\n    return this._textureHelper.readPixels(gpuTextureWrapper.underlyingResource, x, y, width, height, gpuTextureWrapper.format, faceIndex, level, buffer, noDataConversion);\n};\nWebGPUEngine.prototype._readTexturePixelsSync = function () {\n    throw \"_readTexturePixelsSync is unsupported in WebGPU!\";\n};\n//# sourceMappingURL=engine.readTexture.js.map","import { RenderTargetWrapper } from \"../renderTargetWrapper.js\";\n/** @internal */\nexport class WebGPURenderTargetWrapper extends RenderTargetWrapper {\n}\n//# sourceMappingURL=webgpuRenderTargetWrapper.js.map","import { InternalTexture, InternalTextureSource } from \"../../../Materials/Textures/internalTexture.js\";\n\nimport { WebGPUEngine } from \"../../webgpuEngine.js\";\nimport { WebGPURenderTargetWrapper } from \"../webgpuRenderTargetWrapper.js\";\nWebGPUEngine.prototype._createHardwareRenderTargetWrapper = function (isMulti, isCube, size) {\n    const rtWrapper = new WebGPURenderTargetWrapper(isMulti, isCube, size, this);\n    this._renderTargetWrapperCache.push(rtWrapper);\n    return rtWrapper;\n};\nWebGPUEngine.prototype.createRenderTargetTexture = function (size, options) {\n    var _a, _b;\n    const rtWrapper = this._createHardwareRenderTargetWrapper(false, false, size);\n    const fullOptions = {};\n    if (options !== undefined && typeof options === \"object\") {\n        fullOptions.generateMipMaps = options.generateMipMaps;\n        fullOptions.generateDepthBuffer = options.generateDepthBuffer === undefined ? true : options.generateDepthBuffer;\n        fullOptions.generateStencilBuffer = fullOptions.generateDepthBuffer && options.generateStencilBuffer;\n        fullOptions.samplingMode = options.samplingMode === undefined ? 3 : options.samplingMode;\n        fullOptions.creationFlags = (_a = options.creationFlags) !== null && _a !== void 0 ? _a : 0;\n        fullOptions.noColorAttachment = !!options.noColorAttachment;\n        fullOptions.samples = options.samples;\n    }\n    else {\n        fullOptions.generateMipMaps = options;\n        fullOptions.generateDepthBuffer = true;\n        fullOptions.generateStencilBuffer = false;\n        fullOptions.samplingMode = 3;\n        fullOptions.creationFlags = 0;\n        fullOptions.noColorAttachment = false;\n    }\n    const texture = fullOptions.noColorAttachment ? null : this._createInternalTexture(size, options, true, InternalTextureSource.RenderTarget);\n    rtWrapper._samples = (_b = fullOptions.samples) !== null && _b !== void 0 ? _b : 1;\n    rtWrapper._generateDepthBuffer = fullOptions.generateDepthBuffer;\n    rtWrapper._generateStencilBuffer = fullOptions.generateStencilBuffer ? true : false;\n    rtWrapper.setTextures(texture);\n    if (rtWrapper._generateDepthBuffer || rtWrapper._generateStencilBuffer) {\n        rtWrapper.createDepthStencilTexture(0, this._caps.textureFloatLinearFiltering &&\n            (fullOptions.samplingMode === undefined ||\n                fullOptions.samplingMode === 2 ||\n                fullOptions.samplingMode === 2 ||\n                fullOptions.samplingMode === 3 ||\n                fullOptions.samplingMode === 3 ||\n                fullOptions.samplingMode === 5 ||\n                fullOptions.samplingMode === 6 ||\n                fullOptions.samplingMode === 7 ||\n                fullOptions.samplingMode === 11), rtWrapper._generateStencilBuffer, rtWrapper.samples, fullOptions.generateStencilBuffer ? 13 : 14);\n    }\n    if (texture) {\n        if (options !== undefined && typeof options === \"object\" && options.createMipMaps && !fullOptions.generateMipMaps) {\n            texture.generateMipMaps = true;\n        }\n        this._textureHelper.createGPUTextureForInternalTexture(texture, undefined, undefined, undefined, fullOptions.creationFlags);\n        if (options !== undefined && typeof options === \"object\" && options.createMipMaps && !fullOptions.generateMipMaps) {\n            texture.generateMipMaps = false;\n        }\n    }\n    return rtWrapper;\n};\nWebGPUEngine.prototype._createDepthStencilTexture = function (size, options) {\n    const internalTexture = new InternalTexture(this, InternalTextureSource.DepthStencil);\n    const internalOptions = {\n        bilinearFiltering: false,\n        comparisonFunction: 0,\n        generateStencil: false,\n        samples: 1,\n        depthTextureFormat: options.generateStencil ? 13 : 14,\n        ...options,\n    };\n    internalTexture.format = internalOptions.depthTextureFormat;\n    this._setupDepthStencilTexture(internalTexture, size, internalOptions.generateStencil, internalOptions.bilinearFiltering, internalOptions.comparisonFunction, internalOptions.samples);\n    this._textureHelper.createGPUTextureForInternalTexture(internalTexture);\n    this._internalTexturesCache.push(internalTexture);\n    return internalTexture;\n};\nWebGPUEngine.prototype._setupDepthStencilTexture = function (internalTexture, size, generateStencil, bilinearFiltering, comparisonFunction, samples = 1) {\n    const width = size.width || size;\n    const height = size.height || size;\n    const layers = size.layers || 0;\n    internalTexture.baseWidth = width;\n    internalTexture.baseHeight = height;\n    internalTexture.width = width;\n    internalTexture.height = height;\n    internalTexture.is2DArray = layers > 0;\n    internalTexture.depth = layers;\n    internalTexture.isReady = true;\n    internalTexture.samples = samples;\n    internalTexture.generateMipMaps = false;\n    internalTexture.samplingMode = bilinearFiltering ? 2 : 1;\n    internalTexture.type = 1;\n    internalTexture._comparisonFunction = comparisonFunction;\n    internalTexture._cachedWrapU = 0;\n    internalTexture._cachedWrapV = 0;\n};\nWebGPUEngine.prototype.updateRenderTargetTextureSampleCount = function (rtWrapper, samples) {\n    if (!rtWrapper || !rtWrapper.texture || rtWrapper.samples === samples) {\n        return samples;\n    }\n    samples = Math.min(samples, this.getCaps().maxMSAASamples);\n    this._textureHelper.createMSAATexture(rtWrapper.texture, samples);\n    if (rtWrapper._depthStencilTexture) {\n        this._textureHelper.createMSAATexture(rtWrapper._depthStencilTexture, samples);\n        rtWrapper._depthStencilTexture.samples = samples;\n    }\n    rtWrapper._samples = samples;\n    rtWrapper.texture.samples = samples;\n    return samples;\n};\n//# sourceMappingURL=engine.renderTarget.js.map","import { InternalTexture, InternalTextureSource } from \"../../../Materials/Textures/internalTexture.js\";\n\nimport { WebGPUEngine } from \"../../webgpuEngine.js\";\nWebGPUEngine.prototype.createRenderTargetCubeTexture = function (size, options) {\n    const rtWrapper = this._createHardwareRenderTargetWrapper(false, true, size);\n    const fullOptions = {\n        generateMipMaps: true,\n        generateDepthBuffer: true,\n        generateStencilBuffer: false,\n        type: 0,\n        samplingMode: 3,\n        format: 5,\n        samples: 1,\n        ...options,\n    };\n    fullOptions.generateStencilBuffer = fullOptions.generateDepthBuffer && fullOptions.generateStencilBuffer;\n    rtWrapper._generateDepthBuffer = fullOptions.generateDepthBuffer;\n    rtWrapper._generateStencilBuffer = fullOptions.generateStencilBuffer;\n    const texture = new InternalTexture(this, InternalTextureSource.RenderTarget);\n    texture.width = size;\n    texture.height = size;\n    texture.depth = 0;\n    texture.isReady = true;\n    texture.isCube = true;\n    texture.samples = fullOptions.samples;\n    texture.generateMipMaps = fullOptions.generateMipMaps;\n    texture.samplingMode = fullOptions.samplingMode;\n    texture.type = fullOptions.type;\n    texture.format = fullOptions.format;\n    this._internalTexturesCache.push(texture);\n    rtWrapper.setTextures(texture);\n    if (rtWrapper._generateDepthBuffer || rtWrapper._generateStencilBuffer) {\n        rtWrapper.createDepthStencilTexture(0, fullOptions.samplingMode === undefined ||\n            fullOptions.samplingMode === 2 ||\n            fullOptions.samplingMode === 2 ||\n            fullOptions.samplingMode === 3 ||\n            fullOptions.samplingMode === 3 ||\n            fullOptions.samplingMode === 5 ||\n            fullOptions.samplingMode === 6 ||\n            fullOptions.samplingMode === 7 ||\n            fullOptions.samplingMode === 11, rtWrapper._generateStencilBuffer, rtWrapper.samples);\n    }\n    if (options && options.createMipMaps && !fullOptions.generateMipMaps) {\n        texture.generateMipMaps = true;\n    }\n    this._textureHelper.createGPUTextureForInternalTexture(texture);\n    if (options && options.createMipMaps && !fullOptions.generateMipMaps) {\n        texture.generateMipMaps = false;\n    }\n    return rtWrapper;\n};\n//# sourceMappingURL=engine.renderTargetCube.js.map","import { WebGPUEngine } from \"../../webgpuEngine.js\";\nimport { Effect } from \"../../../Materials/effect.js\";\nEffect.prototype.setTextureSampler = function (name, sampler) {\n    this._engine.setTextureSampler(name, sampler);\n};\nWebGPUEngine.prototype.setTextureSampler = function (name, sampler) {\n    var _a;\n    (_a = this._currentMaterialContext) === null || _a === void 0 ? void 0 : _a.setSampler(name, sampler);\n};\n//# sourceMappingURL=engine.textureSampler.js.map","\nimport { WebGPUEngine } from \"../../webgpuEngine.js\";\nimport * as WebGPUConstants from \"../webgpuConstants.js\";\nimport { Effect } from \"../../../Materials/effect.js\";\nEffect.prototype.setStorageBuffer = function (name, buffer) {\n    this._engine.setStorageBuffer(name, buffer);\n};\nWebGPUEngine.prototype.createStorageBuffer = function (data, creationFlags) {\n    return this._createBuffer(data, creationFlags | 32);\n};\nWebGPUEngine.prototype.updateStorageBuffer = function (buffer, data, byteOffset, byteLength) {\n    const dataBuffer = buffer;\n    if (byteOffset === undefined) {\n        byteOffset = 0;\n    }\n    let view;\n    if (byteLength === undefined) {\n        if (data instanceof Array) {\n            view = new Float32Array(data);\n        }\n        else if (data instanceof ArrayBuffer) {\n            view = new Uint8Array(data);\n        }\n        else {\n            view = data;\n        }\n        byteLength = view.byteLength;\n    }\n    else {\n        if (data instanceof Array) {\n            view = new Float32Array(data);\n        }\n        else if (data instanceof ArrayBuffer) {\n            view = new Uint8Array(data);\n        }\n        else {\n            view = data;\n        }\n    }\n    this._bufferManager.setSubData(dataBuffer, byteOffset, view, 0, byteLength);\n};\nWebGPUEngine.prototype.readFromStorageBuffer = function (storageBuffer, offset, size, buffer) {\n    size = size || storageBuffer.capacity;\n    const gpuBuffer = this._bufferManager.createRawBuffer(size, WebGPUConstants.BufferUsage.MapRead | WebGPUConstants.BufferUsage.CopyDst);\n    this._renderTargetEncoder.copyBufferToBuffer(storageBuffer.underlyingResource, offset !== null && offset !== void 0 ? offset : 0, gpuBuffer, 0, size);\n    return new Promise((resolve, reject) => {\n        // we are using onEndFrameObservable because we need to map the gpuBuffer AFTER the command buffers\n        // have been submitted, else we get the error: \"Buffer used in a submit while mapped\"\n        this.onEndFrameObservable.addOnce(() => {\n            gpuBuffer.mapAsync(WebGPUConstants.MapMode.Read, 0, size).then(() => {\n                const copyArrayBuffer = gpuBuffer.getMappedRange(0, size);\n                let data = buffer;\n                if (data === undefined) {\n                    data = new Uint8Array(size);\n                    data.set(new Uint8Array(copyArrayBuffer));\n                }\n                else {\n                    const ctor = data.constructor; // we want to create result data with the same type as buffer (Uint8Array, Float32Array, ...)\n                    data = new ctor(data.buffer);\n                    data.set(new ctor(copyArrayBuffer));\n                }\n                gpuBuffer.unmap();\n                this._bufferManager.releaseBuffer(gpuBuffer);\n                resolve(data);\n            }, (reason) => reject(reason));\n        });\n    });\n};\nWebGPUEngine.prototype.setStorageBuffer = function (name, buffer) {\n    var _a, _b;\n    (_a = this._currentDrawContext) === null || _a === void 0 ? void 0 : _a.setBuffer(name, (_b = buffer === null || buffer === void 0 ? void 0 : buffer.getBuffer()) !== null && _b !== void 0 ? _b : null);\n};\n//# sourceMappingURL=engine.storageBuffer.js.map","import { WebGPUEngine } from \"../../webgpuEngine.js\";\nimport * as WebGPUConstants from \"../webgpuConstants.js\";\nWebGPUEngine.prototype.createUniformBuffer = function (elements) {\n    let view;\n    if (elements instanceof Array) {\n        view = new Float32Array(elements);\n    }\n    else {\n        view = elements;\n    }\n    const dataBuffer = this._bufferManager.createBuffer(view, WebGPUConstants.BufferUsage.Uniform | WebGPUConstants.BufferUsage.CopyDst);\n    return dataBuffer;\n};\nWebGPUEngine.prototype.createDynamicUniformBuffer = function (elements) {\n    return this.createUniformBuffer(elements);\n};\nWebGPUEngine.prototype.updateUniformBuffer = function (uniformBuffer, elements, offset, count) {\n    if (offset === undefined) {\n        offset = 0;\n    }\n    const dataBuffer = uniformBuffer;\n    let view;\n    if (count === undefined) {\n        if (elements instanceof Float32Array) {\n            view = elements;\n        }\n        else {\n            view = new Float32Array(elements);\n        }\n        count = view.byteLength;\n    }\n    else {\n        if (elements instanceof Float32Array) {\n            view = elements;\n        }\n        else {\n            view = new Float32Array(elements);\n        }\n    }\n    this._bufferManager.setSubData(dataBuffer, offset, view, 0, count);\n};\nWebGPUEngine.prototype.bindUniformBufferBase = function (buffer, location, name) {\n    this._currentDrawContext.setBuffer(name, buffer);\n};\nWebGPUEngine.prototype.bindUniformBlock = function () { };\n//# sourceMappingURL=engine.uniformBuffer.js.map","import { WebGPUEngine } from \"../../webgpuEngine.js\";\nfunction IsExternalTexture(texture) {\n    return texture && texture.underlyingResource !== undefined ? true : false;\n}\nWebGPUEngine.prototype.updateVideoTexture = function (texture, video, invertY) {\n    var _a;\n    if (!texture || texture._isDisabled) {\n        return;\n    }\n    if (this._videoTextureSupported === undefined) {\n        this._videoTextureSupported = true;\n    }\n    let gpuTextureWrapper = texture._hardwareTexture;\n    if (!((_a = texture._hardwareTexture) === null || _a === void 0 ? void 0 : _a.underlyingResource)) {\n        gpuTextureWrapper = this._textureHelper.createGPUTextureForInternalTexture(texture);\n    }\n    if (IsExternalTexture(video)) {\n        this._textureHelper.copyVideoToTexture(video, texture, gpuTextureWrapper.format, !invertY);\n        if (texture.generateMipMaps) {\n            this._generateMipmaps(texture, this._uploadEncoder);\n        }\n        texture.isReady = true;\n    }\n    else if (video) {\n        this.createImageBitmap(video)\n            .then((bitmap) => {\n            this._textureHelper.updateTexture(bitmap, texture, texture.width, texture.height, texture.depth, gpuTextureWrapper.format, 0, 0, !invertY, false, 0, 0);\n            if (texture.generateMipMaps) {\n                this._generateMipmaps(texture, this._uploadEncoder);\n            }\n            texture.isReady = true;\n        })\n            .catch(() => {\n            // Sometimes createImageBitmap(video) fails with \"Failed to execute 'createImageBitmap' on 'Window': The provided element's player has no current data.\"\n            // Just keep going on\n            texture.isReady = true;\n        });\n    }\n};\n//# sourceMappingURL=engine.videoTexture.js.map"],"names":["AxesViewer","xAxis","this","_xAxis","yAxis","_yAxis","zAxis","_zAxis","constructor","scene","scaleLines","renderingGroupId","lineThickness","_scaleLinesFactor","_instanced","redColoredMaterial","disableLighting","emissiveColor","scale","greenColoredMaterial","blueColoredMaterial","scaling","setAll","_SetRenderingGroupId","update","position","xaxis","yaxis","zaxis","copyFrom","setDirection","createInstance","axesViewer","dispose","static","node","id","getChildMeshes","forEach","mesh","DebugLayerTab","Object","defineProperty","get","_debugLayer","DebugLayer","enumerable","configurable","onPropertyChangedObservable","BJSINSPECTOR","Inspector","OnPropertyChangedObservable","_onPropertyChangedObservable","onSelectionChangedObservable","OnSelectionChangeObservable","_onSelectionChangedObservable","_getGlobalInspector","_scene","onDisposeObservable","add","hide","_createInspector","config","isVisible","observer","observers","clear","undefined","OnSelectionChangedObservable","userOptions","overlay","showExplorer","showInspector","embedMode","handleResize","enablePopup","Show","select","entity","lineContainerTitles","prototype","toString","call","MarkLineContainerTitleForHighlighting","MarkMultipleLineContainerTitlesForHighlighting","notifyObservers","INSPECTOR","BABYLON","IsVisible","Hide","setAsActiveScene","_SetNewScene","show","Promise","resolve","inspectorUrl","inspectorURL","InspectorURL","SkeletonViewer","options","_a","_c","_d","_e","_f","_g","skeleton","colorBase","colorZero","colorQuarter","colorHalf","colorFull","targetBoneIndex","name","shader","vertex","fragment","attributes","uniforms","setColor3","setFloat","getClassName","transparencyMode","colorMap","color","location","bufferWidth","bones","length","colorMapBuffer","_CreateBoneMapColorBuffer","vertexSource","fragmentSource","setFloats","size","tempGrad","width","height","ctx","getContext","grad","createLinearGradient","stop","addColorStop","toHexString","fillStyle","fillRect","buffer","data","getImageData","i","push","utilityLayer","_utilityLayer","isReady","_ready","ready","value","debugMesh","_debugMesh","displayMode","DISPLAY_LINES","DISPLAY_SPHERE_AND_SPURS","autoUpdateBonesMatrices","_h","_j","_k","_l","_m","_o","_p","_q","_debugLines","Array","_localAxes","_isEnabled","_obs","pauseAnimations","returnToRest","displayOptions","midStep","midStepFactor","sphereBaseSize","sphereScaleUnit","sphereFactor","spurFollowsChild","showLocalAxes","localAxesSize","computeBonesUsingShaders","useAllBones","initialMeshBoneIndices","getVerticesData","initialMeshBoneWeights","_boneIndices","Set","index","pickUtilitySceneFirst","utilityLayerScene","autoClearDepthAndStencil","_bindObs","onBeforeRenderObservable","_displayLinesUpdate","DISPLAY_SPHERES","_buildSpheresAndSpurs","_buildLocalAxes","isEnabled","setEnabled","remove","_getBonePosition","bone","meshMat","x","y","z","tmat","parentBone","getParent","getLocalMatrix","tmat2","setTranslationFromFloats","multiplyToRef","getAbsoluteTransform","m","_getLinesForBonesWithLength","len","meshPos","idx","points","_index","has","getIndex","subtractInPlace","_getLinesForBonesNoLength","boneNum","childBone","getAbsolutePositionToRef","_revert","animationState","animationsEnabled","_getAbsoluteBindPoseToRef","matrix","getBaseMatrix","spheresOnly","spheres","spurs","computeAbsoluteTransforms","longestBoneLength","Number","NEGATIVE_INFINITY","boneAbsoluteBindPoseTransform","anchorPoint","decompose","children","bc","childAbsoluteBindPoseTransform","childPoint","distanceFromParent","dir","clone","subtract","h","up","normalize","up0","spur","shape","path","scaleFunction","sideOrientation","updatable","numVertices","getTotalVertices","mwk","mik","setVerticesData","convertToFlatShadedMesh","sphere","segments","diameter","meshes","_stepsOut","_b","scaleInPlace","Math","pow","concat","parent","alwaysSelectAsActiveMesh","_getSharedGizmoLight","intensity","err","console","error","targetScene","lines","colors","red","green","blue","boneOrigin","boneAxisX","boneAxisY","boneAxisZ","linePoints","lineColors","j","getWorldMatrix","instance","changeDisplayMode","mode","wasEnabled","changeDisplayOptions","option","DeviceType","PointerInput","NativePointerInput","DualShockInput","DualSenseInput","XboxInput","SwitchInput","DeviceSource","deviceInputSystem","deviceType","deviceSlot","onInputChangedObservable","_deviceInputSystem","getInput","inputIndex","pollInput","DeviceEventFactory","currentState","elementToAttachTo","pointerId","_CreateKeyboardEvent","_CreateWheelEvent","_CreatePointerEvent","evt","_CreateMouseEvent","pointerType","type","button","deltaMode","deltaX","deltaY","deltaZ","_CreateEvent","pointerX","pointerY","movementX","movementY","offsetX","getBoundingClientRect","offsetY","_CheckNonCharacterKeys","clientX","clientY","key","String","fromCharCode","keyCode","isKeyboardActive","isDeviceAvailable","altKey","ctrlKey","metaKey","shiftKey","target","NativeDeviceInputSystem","onDeviceConnected","onDeviceDisconnected","onInputChanged","_nativeInput","_native","DeviceInputSystem","CreateDeviceEvent","_createDummyNativeInput","MAX_POINTER_INPUTS","keys","WebDeviceInputSystem","engine","_inputs","_keyboardActive","_pointerActive","_usingSafari","_usingMacOS","test","navigator","platform","_keyboardDownEvent","_keyboardUpEvent","_keyboardBlurEvent","_pointerMoveEvent","_pointerDownEvent","_pointerUpEvent","_pointerCancelEvent","_pointerWheelEvent","_pointerBlurEvent","_eventsAttached","_mouseId","_isUsingFirefox","userAgent","indexOf","_maxTouchPoints","_pointerInputClearObserver","_gamepadConnectedEvent","_gamepadDisconnectedEvent","_eventPrefix","_engine","_onDeviceConnected","_onDeviceDisconnected","_onInputChanged","_enableEvents","_metaKeys","_onEngineViewChanged","device","_updateDevice","currentValue","_elementToAttachTo","_disableEvents","inputElement","getInputElement","inputs","deviceSlotKey","tabIndex","canvasTabIndex","_handleKeyActions","_handlePointerActions","_handleGamepadActions","_checkForConnectedDevices","removeEventListener","_wheelEventName","window","onEndFrameObservable","getGamepads","gamepads","gamepad","_addGamePad","matchMedia","matches","_addPointerDevice","_getGamepadDeviceType","_gamepads","_registerDevice","buttons","axes","currentX","currentY","pointer","numberOfInputs","fill","_unregisterDevice","kbKey","deviceEvent","includes","splice","addEventListener","maxTouchPoints","_activeTouchIds","_getPointerType","previousHorizontal","previousVertical","document","pointerLockElement","setPointerCapture","e","hasPointerCapture","releasePointerCapture","createElement","onmousewheel","passiveSupported","noop","wheelDelta","passive","gp","valueOf","deviceName","search","touches","InternalDeviceSourceManager","_registeredManagers","_refCount","registerManager","manager","_devices","_addDevice","unregisterManager","numberOfDeviceTypes","deviceSource","_removeDevice","eventData","DeviceSourceManager","getDeviceSource","_firstDevice","getDeviceSources","filter","source","_deviceSourceManager","onDeviceConnectedObservable","devices","notifyObserver","onDeviceDisconnectedObservable","_onDisposeObserver","_updateFirstDevices","r","g","b","a","_alphaState","setAlphaBlendConstants","noDepthWriteChange","_alphaMode","alphaBlend","setAlphaBlendFunctionParameters","_gl","ONE","ONE_MINUS_SRC_ALPHA","SRC_ALPHA","ZERO","ONE_MINUS_SRC_COLOR","DST_COLOR","CONSTANT_COLOR","ONE_MINUS_CONSTANT_COLOR","CONSTANT_ALPHA","ONE_MINUS_CONSTANT_ALPHA","DST_ALPHA","ONE_MINUS_DST_COLOR","ONE_MINUS_DST_ALPHA","depthCullingState","depthMask","equation","_alphaEquation","setAlphaEquationParameters","ComputeBindingType","baseName","Error","effect","context","bindings","bindingsMapping","pipelineContext","computeSourceCode","rawComputeSourceCode","defines","entryPoint","action","rtWrapper","internalTexture","isCube","webGLVersion","internalOptions","bilinearFiltering","comparisonFunction","generateStencil","gl","_bindTextureDirectly","TEXTURE_CUBE_MAP","_setupDepthStencilTexture","_depthStencilTexture","_depthStencilTextureWithStencil","face","texImage2D","TEXTURE_CUBE_MAP_POSITIVE_X","DEPTH24_STENCIL8","DEPTH_STENCIL","UNSIGNED_INT_24_8","DEPTH_COMPONENT24","DEPTH_COMPONENT","UNSIGNED_INT","_internalTexturesCache","url","loadedFiles","onfinish","onErrorCallBack","_loadFile","_internalCount","request","exception","status","statusText","files","onError","_partialLoadFile","texture","mimeType","loadedImages","_partialLoadImg","tokenPendingData","img","removePendingData","message","offlineProvider","addPendingData","loadMipmap","maxLevel","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","samplingMode","getCaps","textureMaxLevel","TEXTURE_MAX_LEVEL","_maxLodLevel","rootUrl","noMipmap","onLoad","format","forcedExtension","createPolynomials","lodScale","lodOffset","fallback","beforeLoadCubeDataCallback","imageHandler","useSRGBBuffer","generateMipMaps","_lodGenerationScale","_lodGenerationOffset","_useSRGBBuffer","_caps","supportSRGBBuffers","isWebGPU","_doNotHandleContextLost","_extension","_files","originalRootUrl","_transformTextureUrl","rootUrlWithoutUriParams","split","lastDot","lastIndexOf","extension","substring","toLowerCase","loader","availableLoader","canLoad","onInternalError","createCubeTextureBase","onloaddata","loadCubeData","supportCascades","_cascadeLoadFiles","images","map","image","Uint8Array","_cascadeLoadImgs","imgs","loaderOptions","needPOTTextures","maxCubemapTextureSize","faces","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Z","_unpackFlipY","internalFormat","_getInternalFormat","SRGB8_ALPHA8","RGBA","texelFormat","_prepareWorkingCanvas","_workingCanvas","_workingContext","drawImage","UNSIGNED_BYTE","generateMipmap","_setCubeMapTextureParams","onLoadedObservable","indexBuffer","indices","offset","view","_currentBoundBuffer","ELEMENT_ARRAY_BUFFER","bindIndexBuffer","is32Bits","Uint32Array","Uint16Array","bufferData","DYNAMIC_DRAW","_resetIndexBufferBinding","vertexBuffer","byteOffset","byteLength","bindArrayBuffer","dataLength","bufferSubData","ARRAY_BUFFER","Float32Array","subarray","ArrayBuffer","_resetVertexBufferBinding","baseWidth","baseHeight","maxTextureSize","updateTextureSamplingMode","invertY","premulAlpha","forceBindTexture","allowGPUOptimization","TEXTURE_2D","wasPreviouslyBound","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","textureType","_getWebGLTextureType","glformat","_getRGBABufferInternalSizedFormat","video","bindAttachments","BACK","COLOR_ATTACHMENT0","textureStatus","result","NONE","attachments","drawBuffers","disableGenerateMipMaps","onBeforeUnbind","_currentRenderTarget","_attachments","count","_MSAAFramebuffer","bindFramebuffer","READ_FRAMEBUFFER","DRAW_FRAMEBUFFER","_framebuffer","textures","readBuffer","blitFramebuffer","COLOR_BUFFER_BIT","NEAREST","_bindUnboundFramebuffer","initializeBuffers","generateDepthBuffer","generateStencilBuffer","generateDepthTexture","depthTextureFormat","textureCount","types","samplingModes","useSRGBBuffers","_createHardwareRenderTargetWrapper","framebuffer","createFramebuffer","useStencilTexture","depthStencilBuffer","_setupFramebufferDepthAttachments","_depthStencilBuffer","_generateDepthBuffer","_generateStencilBuffer","textureFloatLinearFiltering","textureHalfFloatLinearFiltering","filters","_getSamplingParameters","textureFloat","attachment","activeTexture","bindTexture","_hardwareTexture","underlyingResource","mag","min","internalSizedFormat","framebufferTexture2D","samples","depthTextureExtension","depthTexture","depthTextureType","glDepthTextureInternalFormat","DEPTH_COMPONENT16","glDepthTextureFormat","glDepthTextureType","UNSIGNED_SHORT","glDepthTextureAttachment","DEPTH_ATTACHMENT","FLOAT","DEPTH_COMPONENT32F","FLOAT_32_UNSIGNED_INT_24_8_REV","DEPTH32F_STENCIL8","DEPTH_STENCIL_ATTACHMENT","TEXTURE0","FRAMEBUFFER","setTextures","resetTextureCache","maxMSAASamples","useDepthStencil","deleteRenderbuffer","deleteFramebuffer","renderbufferStorageMultisample","hardwareTexture","colorRenderbuffer","_MSAARenderBuffer","_updateRenderBuffer","_getRGBAMultiSampleBufferFormat","_createRenderBuffer","createMultiviewUbo","ubo","addUniform","multiview","isMultiview","_colorTextureArray","createTexture","TEXTURE_2D_ARRAY","texStorage3D","RGBA8","_depthStencilTextureArray","_multiviewTexture","multiviewTexture","ext","oculusMultiview","framebufferTextureMultisampleMultiviewOVR","framebufferTextureMultiviewOVR","getRenderWidth","getRenderHeight","getScene","currentCreateSceneUniformBuffer","_multiviewSceneUbo","getEngine","bind","viewR","projectionR","_transformMatrixR","_frustumPlanes","updateMatrix","getTransformMatrix","_viewMatrix","_projectionMatrix","camera","_resizeOrCreateMultiviewTexture","_rigPostProcess","_createMultiviewUbo","outputRenderTarget","_renderForCamera","_rigCameras","_activeCamera","setViewport","viewport","postProcessManager","_prepareFrame","_finalizeFrame","isIntermediate","_convertRGBtoRGBATextureData","rgbData","rgbaData","val1","newIndex","_makeCreateRawTextureFunction","is3D","depth","compression","TEXTURE_3D","baseDepth","is2DArray","_bufferView","updateRawTexture3D","updateRawTexture2DArray","_makeUpdateRawTextureFunction","internalType","internalSizedFomat","_compression","UNPACK_ALIGNMENT","compressedTexImage3D","s3tc","texImage3D","compressedTexImage2D","creationFlags","_getUseSRGBBuffer","updateRawTexture","_bufferViewArray","RGB","HALF_FLOAT_OES","textureFloatRender","HALF_FLOAT","colorBufferFloat","updateRawCubeTexture","level","faceIndex","needConversion","faceData","callback","mipmapGenerator","createRawCubeTexture","internalCallback","faceDataArrays","mipData","mipSize","mipFaceData","allocateAndCopyTypedBuffer","sizeOrDstBuffer","sizeInBytes","copyBuffer","Int8Array","set","Int16Array","Int32Array","flushRenderer","noDataConversion","_dummyFramebuffer","dummy","readType","flushFramebuffer","readPixels","_currentFramebuffer","_readTexturePixelsSync","WebGLRenderTargetWrapper","isMulti","super","_context","_cloneRenderTargetWrapper","rtw","createMultiviewRenderTargetTexture","_swapRenderTargetWrapper","_shareDepth","renderTarget","depthbuffer","framebufferRenderbuffer","RENDERBUFFER","_bindTextureRenderTarget","attachmentIndex","lodLevel","currentFB","setTexture","disposePrevious","disposeOnlyFramebuffers","deleteTexture","_renderTargetWrapperCache","colorAttachment","noColorAttachment","_createInternalTexture","currentFrameBuffer","updateRenderTargetTextureSampleCount","_createDepthStencilCubeTexture","_createDepthStencilTexture","layers","hasStencil","glRtWrapper","STENCIL_ATTACHMENT","_samples","fullOptions","elements","createBuffer","bindUniformBuffer","UNIFORM_BUFFER","STATIC_DRAW","references","uniformBuffer","bindBuffer","bindBufferBase","blockName","program","uniformLocation","getUniformBlockIndex","uniformBlockBinding","_isDisabled","_videoTextureSupported","getError","createCanvas","clearRect","videoWidth","videoHeight","ex","_vrExclusivePointerMode","_vrSupported","onVRDisplayChangedObservable","onVRRequestPresentComplete","onVRRequestPresentStart","_vrDisplay","initWebVRAsync","eventArgs","vrDisplay","vrSupported","_webVRInitPromise","res","_onVrDisplayConnect","event","display","_onVrDisplayDisconnect","cancelAnimationFrame","_frameHandler","_boundRenderFunction","_onVrDisplayPresentChange","isPresenting","hostWindow","getHostWindow","_getVRDisplaysAsync","then","getVRDisplays","onResolved","_onVRFullScreenTriggered","onRejected","presentationAttributes","highRefreshRate","vrPresentationAttributes","foveationLevel","useMultiview","requestPresent","getRenderingCanvas","catch","_oldSize","_oldHardwareScaleFactor","getHardwareScalingLevel","leftEye","getEyeParameters","setHardwareScalingLevel","setSize","renderWidth","renderHeight","exitPresent","_onVRDisplayPointerRestricted","_onVRDisplayPointerUnrestricted","canvas","requestPointerLock","exitPointerLock","submitFrame","NativeDataStream","DEFAULT_BUFFER_SIZE","_uint32s","_int32s","_float32s","_length","_position","_nativeDataStream","_flush","writeUint32","_flushIfNecessary","writeInt32","writeFloat32","writeUint32Array","values","writeInt32Array","writeFloat32Array","writeNativeData","handle","writeBoolean","required","writeBuffer","NativeHardwareTexture","_nativeTexture","existingTexture","setUsage","reset","release","NativePipelineContext","_getVertexShaderCode","_getFragmentShaderCode","_handlesSpectorRebuildCallback","onCompiled","isAsync","_valueCache","_fillEffectInformation","uniformBuffersNames","uniformsNames","samplerList","samplers","attributesNames","supportsUniformBuffers","bindUniformBlock","getUniforms","uniform","_uniforms","getUniform","getAttributes","_cacheMatrix","uniformName","cache","flag","updateFlag","_cacheFloat2","changed","_cacheFloat3","_cacheFloat4","w","setInt","setInt2","setInt3","setInt4","setIntArray","array","setIntArray2","setIntArray3","setIntArray4","setUInt","setUInt2","setUInt3","setUInt4","setUIntArray","setUIntArray2","setUIntArray3","setUIntArray4","setFloatArray","setFloatArray2","setFloatArray3","setFloatArray4","setArray","setArray2","setArray3","setArray4","setMatrices","matrices","setMatrix","toArray","setMatrix3x3","setMatrix2x2","setBool","bool","setVector2","vector2","setFloat2","setVector3","vector3","setFloat3","setVector4","vector4","setFloat4","setQuaternion","quaternion","color3","setColor4","alpha","setDirectColor4","color4","NativeRenderTargetWrapper","__framebuffer","_releaseFramebufferObjects","_framebufferDepthStencil","__framebufferDepthStencil","framebufferDepthStencil","ShaderCodeInliner","code","_sourceCode","sourceCode","numMaxIterations","debug","_numMaxIterations","_functionDescr","inlineToken","processCode","_collectFunctions","_processInlining","startIndex","inlineTokenIndex","funcParamsStartIndex","warn","funcNameMatch","_RegexpFindFunctionNameAndType","exec","funcType","funcName","funcParamsEndIndex","funcParams","funcBodyStartIndex","funcBodyEndIndex","funcBody","params","paramNames","p","param","trim","parameters","body","callIndex","partBefore","partAfter","_replaceFunctionCallsByCode","doAgain","func","functionCallIndex","charAt","callParamsStartIndex","callParamsEndIndex","callParams","splitParameterCall","s","curIdx","startParamIdx","idx2","retParamName","_replaceNames","injectDeclarationIndex","partBetween","sources","destinations","RegExp","sourceLen","destination","replace","match","args","ShaderCodeNode","isValid","preprocessors","process","line","processor","lineProcessor","isFragment","processingContext","attributeKeyword","attributeKeywordName","varyingKeyword","varyingFragmentKeywordName","varyingVertexKeywordName","attributeProcessor","startsWith","varyingProcessor","uniformProcessor","uniformRegexp","lookForClosingBracketForUniformBuffer","uniformBufferProcessor","uniformBufferRegexp","textureProcessor","textureRegexp","endOfUniformBufferProcessor","child","additionalDefineKey","additionalDefineValue","ShaderCodeCursor","_lines","currentLine","lineIndex","canRead","subLine","ShaderCodeConditionNode","ShaderCodeTestNode","testExpression","isTrue","ShaderDefineExpression","postfix","stack","c","_OperatorPriority","v1","v2","infix","stackIdx","pushOperand","operand","_Stack","peek","pop","token","substr","ShaderDefineIsDefinedOperator","define","not","condition","ShaderDefineOrOperator","leftOperand","rightOperand","ShaderDefineAndOperator","ShaderDefineArithmeticOperator","testValue","left","parseInt","right","regexSE","regexSERevert","regexShaderInclude","ShaderProcessor","initializeShaders","preProcessShaderCode","_ProcessIncludes","codeWithIncludes","processCodeAfterIncludes","migratedCode","_ProcessShaderConversion","_ApplyPreProcessing","vertexCode","fragmentCode","finalizeShaders","noPrecision","shouldUseHighPrecisionShader","expression","operators","operator","indexOperator","infixToPostfix","_ExtractOperation","start","command","_BuildSubExpression","cursor","rootNode","ifNode","_MoveCursor","first5","elseNode","elifNode","_BuildExpression","newRootNode","_MoveCursorWithinIf","newNode","shaderLanguage","version","platformName","_getGlobalDefines","preparedSourceCode","_ProcessPrecision","parseGLES3","_PreparePreProcessors","preProcessor","_EvaluatePreProcessors","postProcessor","_features","needShaderCodeInlining","inlineShaderCode","returnValue","keepProcessing","includeFile","includesShadersStore","includeShaderUrl","shadersRepository","_FileToolsLoadFile","fileContent","includeContent","splits","dest","indexString","indexSplits","minIndex","maxIndex","sourceIncludeContent","slice","isNaN","indexParameters","str","p1","onSuccess","onProgress","useArrayBuffer","WebGL2ShaderProcessor","attribute","varying","hasDrawBuffersExtension","WebGLHardwareTexture","_webGLTexture","floatNCache","WebGLPipelineContext","vertexCompilationError","fragmentCompilationError","programLinkError","programValidationError","prepareArray","apply","arguments","proxyFunction","functionName","cacheFunction","cacheFunc","endsWith","n","isParallelCompiled","_isRenderingStateCompiled","attr","_cacheFloatN","_uniformName","_x","_y","_z","_w","vertexShader","_getShaderSource","fragmentShader","WebGLShaderProcessor","drawBuffersExtension","regex","WebGPUBufferManager","_deferredReleaseBuffers","_device","createRawBuffer","viewOrSize","flags","mappedAtCreation","verticesBufferDescriptor","usage","isView","dataBuffer","capacity","setSubData","setRawData","dstByteOffset","src","srcByteOffset","queue","chunkStart","chunkEnd","alignedLength","tempView","maxChunk","_getHalfFloatAsFloatRGBAArrayBuffer","arrayBuffer","destArray","srcData","readDataFromBuffer","gpuBuffer","bytesPerRow","bytesPerRowAligned","destroyBuffer","floatFormat","reject","mapAsync","copyArrayBuffer","getMappedRange","data2","offset2","unmap","releaseBuffer","reason","_IsGPUBuffer","destroyDeferredBuffers","destroy","WebGPURenderItemViewport","floor","run","renderPass","WebGPURenderItemScissor","setScissorRect","WebGPURenderItemStencilRef","ref","setStencilReference","WebGPURenderItemBlendColor","setBlendConstant","WebGPURenderItemBeginOcclusionQuery","query","beginOcclusionQuery","WebGPURenderItemEndOcclusionQuery","endOcclusionQuery","WebGPURenderItemBundles","bundles","executeBundles","cloned","WebGPUBundleList","numDrawCalls","_list","_listLength","addBundle","bundle","_currentItemIsBundle","item","_currentBundleList","_finishBundle","_bundleEncoder","finish","addItem","getBundleEncoder","colorFormats","depthStencilFormat","sampleCount","createRenderBundleEncoder","close","WebGPUBindGroupCacheNode","WebGPUCacheBindGroups","Statistics","totalCreated","NumBindGroupsCreatedTotal","lastFrameCreated","NumBindGroupsCreatedLastFrame","lookupLastFrame","NumBindGroupsLookupLastFrame","noLookupLastFrame","NumBindGroupsNoLookupLastFrame","cacheSampler","disabled","_cacheSampler","endFrame","_NumBindGroupsCreatedCurrentFrame","_NumBindGroupsLookupCurrentFrame","_NumBindGroupsNoLookupCurrentFrame","getBindGroups","webgpuPipelineContext","drawContext","materialContext","bindGroups","_Cache","cacheIsDisabled","forceBindGroupCreation","isDirty","updateId","bufferName","shaderProcessingContext","bufferNames","uboId","buffers","uniqueId","nextNode","samplerName","samplerNames","samplerHashCode","hashCode","textureName","textureNames","textureId","resetIsDirty","bindGroupLayouts","bindGroupLayoutEntries","setDefinition","entries","bindGroupEntries","entry","entryInfo","bindGroupLayoutEntryInfo","binding","nameInArrayOfTexture","sampler","bindingInfo","dbgSanityChecks","JSON","stringify","resource","getSampler","storageTexture","viewForWriting","externalTexture","importExternalTexture","webgpuBuffer","groupLayout","createBindGroup","layout","StatePosition","alphaBlendFactorToIndex","stencilOpToIndex","WebGPUCacheRenderPipeline","emptyVertexBuffer","useTextureStage","mrtTextureCount","_useTextureStage","_states","_statesLength","_stateDirtyLowestIndex","_emptyVertexBuffer","_mrtFormats","_parameter","pipeline","vertexBuffers","_kMaxVertexBufferStride","limits","maxVertexBufferArrayStride","_isDirty","setAlphaToCoverage","resetDepthCullingState","setClampDepth","setDepthBias","_webgpuColorFormat","setColorFormat","setMRT","setAlphaBlendEnabled","setAlphaBlendFactors","setWriteMask","setDepthStencilFormat","setStencilEnabled","resetStencilState","setBuffers","_setTextureState","_mrtAttachments1","getRenderPipeline","fillMode","textureState","topology","_GetTopology","_setVertexState","_createRenderPipeline","NumCacheMiss","_NumPipelineCreationCurrentFrame","_setShaderStage","_setRasterizationState","_setColorStates","_setDepthStencilState","lastStateDirtyLowestIndex","NumCacheHitWithoutHash","_getRenderPipeline","NumCacheHitWithHash","_setRenderPipeline","NumPipelineCreationLastFrame","enabled","_alphaToCoverageEnabled","setFrontFace","frontFace","_frontFace","setCullEnabled","_cullEnabled","setCullFace","cullFace","_cullFace","clampDepth","_clampDepth","setDepthCullingState","cullEnabled","zOffset","zOffsetUnits","depthTestEnabled","depthWriteEnabled","depthCompare","_depthWriteEnabled","_depthTestEnabled","_depthCompare","setDepthBiasSlopeScale","depthBias","_depthBias","DepthBias","depthBiasSlopeScale","_depthBiasSlopeScale","DepthBiasSlopeScale","_colorFormat","setMRTAttachments","mrtAttachments","mask","_mrtEnabledMask","MRTAttachments1","textureArray","mrtTextureArray","bits","indexBits","numRT","gpuWrapper","_mrtAttachments2","MRTAttachments2","_alphaBlendEnabled","factors","operations","_alphaBlendFuncParams","_alphaBlendEqParams","_writeMask","_webgpuDepthStencilFormat","_depthStencilFormat","setDepthTestEnabled","setDepthWriteEnabled","setDepthCompare","_stencilEnabled","setStencilCompare","_stencilFrontCompare","setStencilDepthFailOp","op","_stencilFrontDepthFailOp","setStencilPassOp","_stencilFrontPassOp","setStencilFailOp","_stencilFrontFailOp","setStencilReadMask","_stencilReadMask","StencilReadMask","setStencilWriteMask","_stencilWriteMask","StencilWriteMask","setStencilState","stencilEnabled","compare","depthFailOp","passOp","failOp","readMask","writeMask","overrideVertexBuffers","_vertexBuffers","_overrideVertexBuffers","_indexBuffer","operation","factor","compareFunction","normalized","getSize","getKind","_getAphaBlendState","srcFactor","_GetAphaBlendFactor","dstFactor","_GetAphaBlendOperation","_getColorBlendState","_shaderId","ShaderStage","rasterizationState","_rasterizationState","RasterizationState","colorStates","_colorStates","ColorStates","stencilState","depthStencilState","_depthStencilState","DepthStencilState","currStateLen","newNumStates","VertexState","_pipelineContext","attributeNamesFromEffect","locations","attributeLocationsFromEffect","currentGPUBuffer","numVertexBuffers","getBuffer","_validOffsetRange","formatSize","byteStride","vid","_textureState","TextureStage","_createPipelineLayout","_createPipelineLayoutWithTextureStage","createBindGroupLayout","createPipelineLayout","bitVal","textureInfo","availableTextures","samplerInfo","autoBindSampler","availableSamplers","sampleType","samplerType","groupIndex","bindingIndex","_getVertexInputDescriptor","descriptors","currentGPUAttributes","invalidOffsetRange","vertexBufferDescriptor","arrayStride","stepMode","getIsInstanced","shaderLocation","_GetVertexInputDescriptorFormat","inputStateDescriptor","pipelineLayout","colorBlend","descr","blend","stencilFrontBack","_GetCompareFunction","_GetStencilOpFunction","stripIndexFormat","depthStencilFormatHasStencil","createRenderPipeline","label","module","stages","vertexStage","primitive","cullMode","fragmentStage","targets","multisample","depthStencil","stencilFront","stencilBack","stencilReadMask","stencilWriteMask","depthBiasClamp","_depthBiasClamp","NodeState","countNode","countPipeline","childCountNodes","childCoundPipeline","WebGPUCacheRenderPipelineTree","counts","nodeCount","pipelineCount","pipelines","curPath","curPathLen","nnode","_GetPipelines","_nodeStack","nn","filterToBits","comparisonFunctionToBits","filterNoMipToBits","WebGPUCacheSampler","_samplers","anisotropy","_cachedAnisotropicFilteringLevel","_comparisonFunction","_cachedWrapU","_cachedWrapV","_cachedWrapR","useMipMaps","magFilter","minFilter","mipmapFilter","lodMinClamp","lodMaxClamp","anisotropyEnabled","addressModeU","_GetWrappingMode","addressModeV","addressModeW","filterDescriptor","_GetSamplerFilterDescriptor","_GetSamplerWrappingDescriptor","GetCompareFunction","maxAnisotropy","bypassCache","hash","createSampler","_GetSamplerDescriptor","GetSamplerHashCode","gpuSampler","WebGPUClearQuad","_depthTextureFormat","_cacheRenderPipeline","_bindGroups","_bundleCache","_keyTemp","_effect","createEffect","clearColor","clearDepth","clearStencil","renderPass2","bundleKey","isRTTPass","depthStencilFormatIndex","useReverseDepthBuffer","join","_clearReverseDepthValue","_clearDepthValue","bufferInternals","_ubInvertY","_ubDontInvertY","bufferLeftOver","setPipeline","setBindGroup","draw","PredefinedColorSpace","PowerPreference","FeatureName","BufferUsage","MapMode","TextureDimension","TextureUsage","TextureViewDimension","TextureAspect","TextureFormat","AddressMode","FilterMode","CompareFunction","BufferBindingType","SamplerBindingType","TextureSampleType","StorageTextureAccess","CompilationMessageType","AutoLayoutMode","PrimitiveTopology","FrontFace","CullMode","ColorWriteFlags","BlendFactor","BlendOperation","StencilOperation","IndexFormat","VertexFormat","InputStepMode","ComputePassTimestampLocation","RenderPassTimestampLocation","LoadOp","StoreOp","QueryType","CanvasAlphaMode","DeviceLostReason","ErrorFilter","WebGPUDepthCullingState","_cache","_zOffset","_isZOffsetDirty","_zOffsetUnits","_isCullFaceDirty","cull","_cull","_isCullDirty","depthFunc","_depthFunc","_isDepthFuncDirty","_depthMask","_isDepthMaskDirty","depthTest","_depthTest","_isDepthTestDirty","_isFrontFaceDirty","WebGPUDrawContext","materialContextUpdateId","_materialContextUpdateId","useInstancing","_useInstancing","use","indirectDrawBuffer","_bufferManager","_indirectDrawData","_currentInstanceCount","bufferManager","_Counter","fastBundle","setBuffer","setIndirectData","indexOrVertexCount","instanceCount","firstIndexOrVertex","WebGPUHardwareTexture","_webgpuTexture","msaaTexture","_webgpuMSAATexture","textureUsages","textureAdditionalUsages","textureSource","createView","dimension","mipLevelCount","max","baseArrayLayer","baseMipLevel","arrayLayerCount","aspect","descriptor","createViewForWriting","saveNumMipMaps","_copyInvertYTempTexture","WebGPUMaterialContext","_numExternalTextures","hasFloatTextures","_numFloatTextures","setSampler","samplerCache","currentHashCode","W","textureCache","currentTextureId","isFloatTexture","isExternalTexture","WebGPUOcclusionQuery","querySet","_querySet","hasQueries","_currentTotalIndices","_availableIndices","canBeginQuery","_getCurrentRenderPassIndex","_mainRenderPassWrapper","renderPassDescriptor","occlusionQuerySet","_rttRenderPassWrapper","startCount","incrementCount","_frameLastBuffer","_countIncrement","_allocateNewIndices","createQuery","deleteQuery","isQueryResultAvailable","_retrieveQueryBuffer","_lastBuffer","getQueryResult","frameId","readValues","numIndices","_delayQuerySetDispose","setTimeout","WebGPUPipelineContext","_name","_leftOverUniformsByName","_fragmentSourceCode","_vertexSourceCode","foundSamplers","buildUniformLayout","leftOverUniforms","leftOverUniform","create","updateInt","updateInt2","updateInt3","updateInt4","updateIntArray","updateUInt","updateUInt2","updateUInt3","updateUInt4","updateUIntArray","updateArray","updateMatrices","updateMatrix3x3","updateMatrix2x2","updateFloat","updateFloat2","updateFloat3","updateFloat4","WebGPUQuerySet","canUseMultipleBuffers","_dstBuffers","_count","_canUseMultipleBuffers","createQuerySet","_queryBuffer","_getBuffer","firstQuery","queryCount","encoderResult","createCommandEncoder","resolveQuerySet","copyBufferToBuffer","submit","async","arrayBuf","BigUint64Array","WebGPURenderPassWrapper","colorAttachmentGPUTextures","fullReset","colorAttachmentViewDescriptor","depthAttachmentViewDescriptor","_typeToLocationSize","mat2","mat3","mat4","mat2x2","mat3x3","mat4x4","WebGPUShaderProcessingContext","KnownUBOs","_SimplifiedKnownBindings","_SimplifiedKnownUBOs","_KnownUBOs","_attributeNextLocation","_varyingNextLocation","freeGroupIndex","freeBindingIndex","availableVaryings","availableAttributes","availableBuffers","orderedAttributes","_findStartingGroupBinding","knownUBOs","groups","getAttributeNextLocation","dataType","arrayLength","getVaryingNextLocation","getNextFreeUBOBinding","_getNextFreeBinding","bindingCount","Scene","Light0","Light1","Light2","Light3","Light4","Light5","Light6","Light7","Light8","Light9","Light10","Light11","Light12","Light13","Light14","Light15","Light16","Light17","Light18","Light19","Light20","Light21","Light22","Light23","Light24","Light25","Light26","Light27","Light28","Light29","Light30","Light31","Material","Mesh","Internals","WebGPUShaderProcessor","_addUniformToLeftOverUBO","uniformType","preProcessors","_getArraySize","_webgpuProcessingContext","_buildLeftOverUBO","LeftOvertUBOName","availableUBO","_addBufferBindingDescription","_generateLeftOverUBOCode","_collectBindingNames","_preCreateBindGroupEntries","_addTextureBindingDescription","textureIndex","isVertex","visibility","access","viewDimension","multisampled","isTextureArray","_addSamplerBindingDescription","uniformBufferInfo","bufferType","_injectStartingAndEndingCode","mainFuncDecl","startingCode","endingCode","part1","part2","lastClosingCurly","AutoSamplerSuffix","InternalsUBOName","UniformSizes","int","float","vec2","ivec2","vec3","ivec3","vec4","ivec4","i32","u32","f32","_SamplerFunctionByWebGLSamplerType","sampler2D","sampler2DArray","sampler2DShadow","sampler2DArrayShadow","samplerCube","sampler3D","_TextureTypeByWebGLSamplerType","samplerCubeArray","_GpuTextureViewDimensionByWebGPUTextureType","textureCube","textureCubeArray","texture2D","texture2DArray","texture3D","_SamplerTypeByWebGLSamplerType","_IsComparisonSamplerByWebGPUSamplerType","samplerShadow","samplerArrayShadow","WebGPUShaderProcessorGLSL","_missingVaryings","_textureArrayProcessing","_vertexIsGLES3","_fragmentIsGLES3","startArray","endArray","lengthInString","ubDeclaration","alreadyInjected","_preProcessors","varyingType","attributeType","arraySize","isStorageTexture","isComparisonSampler","samplerBindingType","componentType","samplerGroupIndex","samplerBindingIndex","samplerFunction","textureDimension","layouts","textureSetIndex","textureBindingIndex","knownUBO","hasFragCoord","fragCoordCode","injectCode","isNDCHalfZRange","_applyTextureArrayProcessing","iindex","uniformBufferDescription","decl","leftOverUBO","builtInName_frag_depth","gpuTextureViewDimensionByWebGPUTextureFunction","texture_1d","texture_2d","texture_2d_array","texture_3d","texture_cube","texture_cube_array","texture_multisampled_2d","texture_depth_2d","texture_depth_2d_array","texture_depth_cube","texture_depth_cube_array","texture_depth_multisampled_2d","texture_storage_1d","texture_storage_2d","texture_storage_2d_array","texture_storage_3d","texture_external","WebGPUShaderProcessorWGSL","_attributesWGSL","_attributesDeclWGSL","_attributeNamesWGSL","_varyingsWGSL","_varyingsDeclWGSL","_varyingNamesWGSL","_stridedUniformArrays","isArrayOfTexture","textureFunc","storageTextureFormat","isDepthTexture","_processSamplers","_processCustomBuffers","_processStridedUniformArrays","varyingsDecl","vertexAttributesDecl","vertexInputs","vertexFragmentInputs","vertexStartingCode","vertexEndingCode","fragmentFragmentInputs","fragmentOutputs","hasFragDepth","saveIndex","fragmentStartingCode","fragmentEndingCode","stridedArrays","stridedArrayType","samplerRegexp","insertPart","lastIndex","instantiateBufferRegexp","decoration","structName","bufferInfo","uniformArrayName","WebGPUSnapshotRendering","renderingMode","bundleList","bundleListRenderTarget","_record","_play","_mainPassBundleList","_enabled","_mode","_bundleList","_bundleListRenderTarget","play","record","activate","_modeSaved","endMainRenderPass","endRenderTargetPass","currentRenderPass","_bundleLists","_currentLayer","_reportDrawCall","mainRenderPass","WebGPUStencilStateComposer","_func","funcMask","_funcMask","opStencilFail","_opStencilFail","opDepthFail","_opDepthFail","opStencilDepthPass","_opStencilDepthPass","_mask","stencilMaterialEnabled","stencilMaterial","stencilGlobal","funcRef","invertYPreMultiplyAlphaVertexSource","PipelineType","VideoPipelineType","shadersForPipelineType","renderableTextureFormatToIndex","r8unorm","r8uint","r8sint","r16uint","r16sint","r16float","rg8unorm","rg8uint","rg8sint","r32uint","r32sint","r32float","rg16uint","rg16sint","rg16float","rgba8unorm","rgba8uint","rgba8sint","bgra8unorm","rgb10a2unorm","rg32uint","rg32sint","rg32float","rgba16uint","rgba16sint","rgba16float","rgba32uint","rgba32sint","rgba32float","stencil8","depth16unorm","depth24plus","depth32float","WebGPUTextureHelper","glslang","tintWASM","_pipelines","_compiledShaders","_videoPipelines","_videoCompiledShaders","_deferredReleaseTextures","_glslang","_tintWASM","_mipmapSampler","_videoSampler","_ubCopyWithOfst","_getPipeline","_getVideoPipeline","MipMap","InvertYPremultiplyAlpha","premultiplyAlpha","Clear","InvertYPremultiplyAlphaWithOfst","pipelineAndBGL","modules","compileGLSL","convertSpirV2WGSL","vertexModule","createShaderModule","fragmentModule","getBindGroupLayout","DontInvertY","InvertY","imageBitmap","isArray","setCommandEncoder","encoder","_commandEncoderForCreation","copyVideoToTexture","commandEncoder","useOwnCommandEncoder","bindGroupLayout","pushDebugGroup","colorAttachments","loadOp","storeOp","passEncoder","beginRenderPass","bindGroup","end","popDebugGroup","invertYPreMultiplyAlpha","gpuOrHdwTexture","mipLevel","ofstX","ofstY","rectWidth","rectHeight","useRect","gpuTexture","_IsHardwareTexture","webgpuHardwareTexture","outputTexture","_copyInvertYRenderPassDescr","_copyInvertYBindGroupWithOfst","_copyInvertYBindGroup","copyTextureToTexture","origin","depthOrArrayLayers","copyWithInvertY","srcTextureView","hasMipmaps","generateMipmaps","additionalUsages","layerCount","textureSize","isCompressedFormat","IsCompressedFormat","ComputeNumMipmapLevels","usages","IsImageBitmap","updateTexture","createCubeTexture","imageBitmaps","IsImageBitmapArray","updateCubeTextures","generateCubeMipmaps","f","_mipmapGenRenderPassDescr","_mipmapGenBindGroup","createGPUTextureForInternalTexture","gpuTextureWrapper","GetWebGPUTextureFormat","_source","hasMipMaps","mipmapCount","HasDepthAndStencilAspects","createMSAATexture","releaseTexture","gpuMSAATexture","_IsInternalTexture","blockInformation","_GetBlockInformationFromFormat","textureCopyView","premultipliedAlpha","textureExtent","ceil","copyBufferToTexture","rowsPerImage","writeTexture","dontUseRect","copyExternalImageToTexture","srcTexture","copyTextureToBuffer","_GetTextureTypeFromFormat","irradianceTexture","_irradianceTexture","destroyDeferredTextures","WebGPUTimestampQuery","gpuFrameTimeCounter","_gpuFrameTimeCounter","_measureDurationState","enable","_measureDuration","WebGPUDurationMeasure","startFrame","duration","fetchNewFrame","addCount","writeTimestamp","readTwoValuesAndSubtract","WebGPUTintWASM","_twgsl","twgslOptions","_TWgslDefaultOptions","twgsl","jsPath","wasmPath","importScripts","self","ccode","ShowWGSLShaderCode","Constants","ALPHA_DISABLE","ALPHA_ADD","ALPHA_COMBINE","ALPHA_SUBTRACT","ALPHA_MULTIPLY","ALPHA_MAXIMIZED","ALPHA_ONEONE","ALPHA_PREMULTIPLIED","ALPHA_PREMULTIPLIED_PORTERDUFF","ALPHA_INTERPOLATE","ALPHA_SCREENMODE","ALPHA_ONEONE_ONEONE","ALPHA_ALPHATOCOLOR","ALPHA_REVERSEONEMINUS","ALPHA_SRC_DSTONEMINUSSRCALPHA","ALPHA_ONEONE_ONEZERO","ALPHA_EXCLUSION","ALPHA_LAYER_ACCUMULATE","ALPHA_EQUATION_ADD","ALPHA_EQUATION_SUBSTRACT","ALPHA_EQUATION_REVERSE_SUBTRACT","ALPHA_EQUATION_MAX","ALPHA_EQUATION_MIN","ALPHA_EQUATION_DARKEN","DELAYLOADSTATE_NONE","DELAYLOADSTATE_LOADED","DELAYLOADSTATE_LOADING","DELAYLOADSTATE_NOTLOADED","NEVER","ALWAYS","LESS","EQUAL","LEQUAL","GREATER","GEQUAL","NOTEQUAL","KEEP","REPLACE","INCR","DECR","INVERT","INCR_WRAP","DECR_WRAP","TEXTURE_CLAMP_ADDRESSMODE","TEXTURE_WRAP_ADDRESSMODE","TEXTURE_MIRROR_ADDRESSMODE","TEXTURE_CREATIONFLAG_STORAGE","TEXTUREFORMAT_ALPHA","TEXTUREFORMAT_LUMINANCE","TEXTUREFORMAT_LUMINANCE_ALPHA","TEXTUREFORMAT_RGB","TEXTUREFORMAT_RGBA","TEXTUREFORMAT_RED","TEXTUREFORMAT_R","TEXTUREFORMAT_RG","TEXTUREFORMAT_RED_INTEGER","TEXTUREFORMAT_R_INTEGER","TEXTUREFORMAT_RG_INTEGER","TEXTUREFORMAT_RGB_INTEGER","TEXTUREFORMAT_RGBA_INTEGER","TEXTUREFORMAT_BGRA","TEXTUREFORMAT_DEPTH24_STENCIL8","TEXTUREFORMAT_DEPTH32_FLOAT","TEXTUREFORMAT_DEPTH16","TEXTUREFORMAT_DEPTH24","TEXTUREFORMAT_DEPTH24UNORM_STENCIL8","TEXTUREFORMAT_DEPTH32FLOAT_STENCIL8","TEXTUREFORMAT_COMPRESSED_RGBA_BPTC_UNORM","TEXTUREFORMAT_COMPRESSED_SRGB_ALPHA_BPTC_UNORM","TEXTUREFORMAT_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT","TEXTUREFORMAT_COMPRESSED_RGB_BPTC_SIGNED_FLOAT","TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT5","TEXTUREFORMAT_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT","TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT3","TEXTUREFORMAT_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT","TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT1","TEXTUREFORMAT_COMPRESSED_RGB_S3TC_DXT1","TEXTUREFORMAT_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT","TEXTUREFORMAT_COMPRESSED_SRGB_S3TC_DXT1_EXT","TEXTUREFORMAT_COMPRESSED_RGBA_ASTC_4x4","TEXTUREFORMAT_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR","TEXTUREFORMAT_COMPRESSED_RGB_ETC1_WEBGL","TEXTUREFORMAT_COMPRESSED_RGB8_ETC2","TEXTUREFORMAT_COMPRESSED_SRGB8_ETC2","TEXTUREFORMAT_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2","TEXTUREFORMAT_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2","TEXTUREFORMAT_COMPRESSED_RGBA8_ETC2_EAC","TEXTUREFORMAT_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC","TEXTURETYPE_UNSIGNED_BYTE","TEXTURETYPE_UNSIGNED_INT","TEXTURETYPE_FLOAT","TEXTURETYPE_HALF_FLOAT","TEXTURETYPE_BYTE","TEXTURETYPE_SHORT","TEXTURETYPE_UNSIGNED_SHORT","TEXTURETYPE_INT","TEXTURETYPE_UNSIGNED_INTEGER","TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4","TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1","TEXTURETYPE_UNSIGNED_SHORT_5_6_5","TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV","TEXTURETYPE_UNSIGNED_INT_24_8","TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV","TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV","TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV","TEXTURETYPE_UNDEFINED","TEXTURE_NEAREST_SAMPLINGMODE","TEXTURE_NEAREST_NEAREST","TEXTURE_BILINEAR_SAMPLINGMODE","TEXTURE_LINEAR_LINEAR","TEXTURE_TRILINEAR_SAMPLINGMODE","TEXTURE_LINEAR_LINEAR_MIPLINEAR","TEXTURE_NEAREST_NEAREST_MIPNEAREST","TEXTURE_NEAREST_LINEAR_MIPNEAREST","TEXTURE_NEAREST_LINEAR_MIPLINEAR","TEXTURE_NEAREST_LINEAR","TEXTURE_NEAREST_NEAREST_MIPLINEAR","TEXTURE_LINEAR_NEAREST_MIPNEAREST","TEXTURE_LINEAR_NEAREST_MIPLINEAR","TEXTURE_LINEAR_LINEAR_MIPNEAREST","TEXTURE_LINEAR_NEAREST","TEXTURE_EXPLICIT_MODE","TEXTURE_SPHERICAL_MODE","TEXTURE_PLANAR_MODE","TEXTURE_CUBIC_MODE","TEXTURE_PROJECTION_MODE","TEXTURE_SKYBOX_MODE","TEXTURE_INVCUBIC_MODE","TEXTURE_EQUIRECTANGULAR_MODE","TEXTURE_FIXED_EQUIRECTANGULAR_MODE","TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE","TEXTURE_FILTERING_QUALITY_OFFLINE","TEXTURE_FILTERING_QUALITY_HIGH","TEXTURE_FILTERING_QUALITY_MEDIUM","TEXTURE_FILTERING_QUALITY_LOW","SCALEMODE_FLOOR","SCALEMODE_NEAREST","SCALEMODE_CEILING","MATERIAL_TextureDirtyFlag","MATERIAL_LightDirtyFlag","MATERIAL_FresnelDirtyFlag","MATERIAL_AttributesDirtyFlag","MATERIAL_MiscDirtyFlag","MATERIAL_PrePassDirtyFlag","MATERIAL_AllDirtyFlag","MATERIAL_TriangleFillMode","MATERIAL_WireFrameFillMode","MATERIAL_PointFillMode","MATERIAL_PointListDrawMode","MATERIAL_LineListDrawMode","MATERIAL_LineLoopDrawMode","MATERIAL_LineStripDrawMode","MATERIAL_TriangleStripDrawMode","MATERIAL_TriangleFanDrawMode","MATERIAL_ClockWiseSideOrientation","MATERIAL_CounterClockWiseSideOrientation","ACTION_NothingTrigger","ACTION_OnPickTrigger","ACTION_OnLeftPickTrigger","ACTION_OnRightPickTrigger","ACTION_OnCenterPickTrigger","ACTION_OnPickDownTrigger","ACTION_OnDoublePickTrigger","ACTION_OnPickUpTrigger","ACTION_OnPickOutTrigger","ACTION_OnLongPressTrigger","ACTION_OnPointerOverTrigger","ACTION_OnPointerOutTrigger","ACTION_OnEveryFrameTrigger","ACTION_OnIntersectionEnterTrigger","ACTION_OnIntersectionExitTrigger","ACTION_OnKeyDownTrigger","ACTION_OnKeyUpTrigger","PARTICLES_BILLBOARDMODE_Y","PARTICLES_BILLBOARDMODE_ALL","PARTICLES_BILLBOARDMODE_STRETCHED","PARTICLES_BILLBOARDMODE_STRETCHED_LOCAL","MESHES_CULLINGSTRATEGY_STANDARD","MESHES_CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY","MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION","MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY","SCENELOADER_NO_LOGGING","SCENELOADER_MINIMAL_LOGGING","SCENELOADER_SUMMARY_LOGGING","SCENELOADER_DETAILED_LOGGING","PREPASS_IRRADIANCE_TEXTURE_TYPE","PREPASS_POSITION_TEXTURE_TYPE","PREPASS_VELOCITY_TEXTURE_TYPE","PREPASS_REFLECTIVITY_TEXTURE_TYPE","PREPASS_COLOR_TEXTURE_TYPE","PREPASS_DEPTH_TEXTURE_TYPE","PREPASS_NORMAL_TEXTURE_TYPE","PREPASS_ALBEDO_SQRT_TEXTURE_TYPE","BUFFER_CREATIONFLAG_READ","BUFFER_CREATIONFLAG_WRITE","BUFFER_CREATIONFLAG_READWRITE","BUFFER_CREATIONFLAG_UNIFORM","BUFFER_CREATIONFLAG_VERTEX","BUFFER_CREATIONFLAG_INDEX","BUFFER_CREATIONFLAG_STORAGE","RENDERPASS_MAIN","INPUT_ALT_KEY","INPUT_CTRL_KEY","INPUT_META_KEY1","INPUT_META_KEY2","INPUT_META_KEY3","INPUT_SHIFT_KEY","SNAPSHOTRENDERING_STANDARD","SNAPSHOTRENDERING_FAST","PERSPECTIVE_CAMERA","ORTHOGRAPHIC_CAMERA","FOVMODE_VERTICAL_FIXED","FOVMODE_HORIZONTAL_FIXED","RIG_MODE_NONE","RIG_MODE_STEREOSCOPIC_ANAGLYPH","RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL","RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED","RIG_MODE_STEREOSCOPIC_OVERUNDER","RIG_MODE_STEREOSCOPIC_INTERLACED","RIG_MODE_VR","RIG_MODE_WEBVR","RIG_MODE_CUSTOM","MAX_SUPPORTED_UV_SETS","GL_ALPHA_EQUATION_ADD","GL_ALPHA_EQUATION_MIN","GL_ALPHA_EQUATION_MAX","GL_ALPHA_EQUATION_SUBTRACT","GL_ALPHA_EQUATION_REVERSE_SUBTRACT","GL_ALPHA_FUNCTION_SRC","GL_ALPHA_FUNCTION_ONE_MINUS_SRC_COLOR","GL_ALPHA_FUNCTION_SRC_ALPHA","GL_ALPHA_FUNCTION_ONE_MINUS_SRC_ALPHA","GL_ALPHA_FUNCTION_DST_ALPHA","GL_ALPHA_FUNCTION_ONE_MINUS_DST_ALPHA","GL_ALPHA_FUNCTION_DST_COLOR","GL_ALPHA_FUNCTION_ONE_MINUS_DST_COLOR","GL_ALPHA_FUNCTION_SRC_ALPHA_SATURATED","GL_ALPHA_FUNCTION_CONSTANT_COLOR","GL_ALPHA_FUNCTION_ONE_MINUS_CONSTANT_COLOR","GL_ALPHA_FUNCTION_CONSTANT_ALPHA","GL_ALPHA_FUNCTION_ONE_MINUS_CONSTANT_ALPHA","SnippetUrl","Engine","NpmPackage","Version","Instances","LastCreatedEngine","LastCreatedScene","_createImageBitmapFromSource","imageSource","Image","onload","decode","createImageBitmap","onerror","resizeImageBitmap","bufferHeight","predicate","engineIndex","sceneIndex","scenes","markAllMaterialsAsDirty","_supportsHardwareTextureRescaling","_RescalePostProcessFactory","performanceMonitor","_performanceMonitor","compatibilityMode","_compatibilityMode","_renderingCanvas","canvasOrContext","antialias","adaptToDeviceRatio","enableOfflineSupport","disableManifestCheck","disableContextMenu","_virtualScenes","onNewSceneAddedObservable","postProcesses","isPointerLock","onResizeObservable","onCanvasBlurObservable","onCanvasFocusObservable","onCanvasPointerOutObservable","onBeginFrameObservable","customAnimationFrameRequester","onBeforeShaderCompilationObservable","onAfterShaderCompilationObservable","_deterministicLockstep","_lockstepMaxSteps","_timeStep","_fps","_deltaTime","_drawCalls","disablePerformanceMonitorInBackground","currentRenderPassId","_renderPassNames","supportRenderPasses","_creationOptions","_sharedInit","_connectVREvents","_prepareVRComponent","autoEnableWebVR","initWebVR","_initGLContext","_rescalePostProcess","_onCanvasFocus","_onCanvasBlur","_onCanvasContextMenu","preventDefault","_onBlur","disable","_windowIsBackground","_onFocus","_onCanvasPointerOut","ev","elementFromPoint","doNotHandleTouchAction","_disableTouchAction","audioEngine","AudioEngineFactory","getAudioContext","getAudioDestination","_onFullscreenChange","isFullscreen","fullscreenElement","_pointerLockRequested","_RequestPointerlock","_onPointerLockChange","OfflineProviderFactory","deterministicLockstep","lockstepMaxSteps","timeStep","getAspectRatio","viewportOwner","useScreen","getScreenAspectRatio","getRenderingCanvasClientRect","getInputElementClientRect","isDeterministicLockStep","getLockstepMaxSteps","getTimeStep","generateMipMapsForCubemap","unbind","getDepthWrite","_depthCullingState","setDepthWrite","getStencilBuffer","_stencilState","stencilTest","setStencilBuffer","getStencilMask","stencilMask","setStencilMask","getStencilFunction","stencilFunc","getStencilFunctionReference","stencilFuncRef","getStencilFunctionMask","stencilFuncMask","setStencilFunction","setStencilFunctionReference","reference","setStencilFunctionMask","getStencilOperationFail","stencilOpStencilFail","getStencilOperationDepthFail","stencilOpDepthFail","getStencilOperationPass","stencilOpStencilDepthPass","setStencilOperationFail","setStencilOperationDepthFail","setStencilOperationPass","setDitheringState","DITHER","setRasterizerState","RASTERIZER_DISCARD","getDepthFunction","setDepthFunction","setDepthFunctionToGreater","setDepthFunctionToGreaterOrEqual","setDepthFunctionToLess","setDepthFunctionToLessOrEqual","cacheStencilState","_cachedStencilBuffer","_cachedStencilFunction","_cachedStencilMask","_cachedStencilOperationPass","_cachedStencilOperationFail","_cachedStencilOperationDepthFail","_cachedStencilReference","restoreStencilState","setDirectViewport","currentViewport","_cachedViewport","_viewport","scissorClear","enableScissor","disableScissor","SCISSOR_TEST","scissor","_submitVRFrame","disableVR","isVRPresenting","_requestVRFrame","_loadFileAsync","getVertexShaderSource","shaders","getAttachedShaders","getShaderSource","getFragmentShaderSource","setDepthStencilTexture","channel","_boundUniforms","depthStencilTexture","_setTexture","setTextureFromPostProcess","postProcess","postProcessInput","_textures","_currentRenderTextureInd","_forcedOutputTexture","_bindTexture","setTextureFromPostProcessOutput","_outputTexture","_rebuildBuffers","resetCachedMaterial","_rebuildGeometries","_rebuildTextures","_renderFrame","_activeRenderLoops","renderFunction","_renderLoop","_contextWasLost","shouldRender","renderEvenInBackground","beginFrame","_renderViews","requestID","_queueNewFrame","_renderingQueueLaunched","switchFullscreen","exitFullscreen","enterFullscreen","_RequestFullscreen","_ExitFullscreen","enterPointerlock","exitPointerlock","_ExitPointerlock","_measureFps","resize","forceSetSize","camIndex","cameras","_currentRenderId","hasObservers","_deletePipelineContext","webGLPipelineContext","transformFeedback","deleteTransformFeedback","createShaderProgram","transformFeedbackVaryings","_createShaderProgram","shaderProgram","createProgram","attachShader","createTransformFeedback","bindTransformFeedback","setTranformFeedbackVaryings","linkProgram","_finalizePipelineContext","_releaseTexture","_releaseRenderTargetWrapper","_postProcesses","getRenderPassNames","getCurrentRenderPassName","createRenderPassId","_RenderPassIdCounter","releaseRenderPassId","subMeshes","_removeDrawWrapper","_rescaleTexture","onComplete","rtt","createRenderTargetTexture","externalTextureSamplerBinding","getEffect","executeWhenCompiled","onApply","hostingScene","directRender","copyTexImage2D","unBindFramebuffer","getFps","getDeltaTime","sampleFrame","averageFPS","instantaneousFrameTime","wrapWebGLTexture","_uploadImageToTexture","lod","bindTarget","updateTextureComparisonFunction","TEXTURE_COMPARE_FUNC","TEXTURE_COMPARE_MODE","COMPARE_REF_TO_TEXTURE","createInstancesBuffer","deleteInstancesBuffer","deleteBuffer","_clientWaitAsync","sync","intervalms","check","clientWaitSync","WAIT_FAILED","TIMEOUT_EXPIRED","_readPixelsAsync","outputBuffer","_webGLVersion","buf","PIXEL_PACK_BUFFER","STREAM_READ","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","deleteSync","getBufferSubData","hideLoadingUI","setAttribute","style","touchAction","webkitTapHighlightColor","displayLoadingUI","loadingScreen","_loadingScreen","DefaultLoadingScreenFactory","loadingUIText","text","loadingUIBackgroundColor","createVideoElement","constraints","element","promise","focus","requestFunction","requestFullscreen","webkitRequestFullscreen","anyDoc","webkitCancelFullScreen","getFontOffset","font","innerHTML","block","verticalAlign","div","whiteSpace","appendChild","fontAscent","fontHeight","top","removeChild","ascent","descent","EngineStore","_LastCreatedScene","UseFallbackTexture","FallbackTexture","groupName","targetObject","_OcclusionDataStorage","occlusionInternalRetryCounter","isOcclusionQueryInProgress","isOccluded","occlusionRetryCount","occlusionType","occlusionQueryAlgorithmType","forceRenderingWhenOccluded","getQueryParameter","QUERY_RESULT_AVAILABLE","QUERY_RESULT","algorithmType","glAlgorithm","_getGlAlgorithmType","beginQuery","endQuery","timerQuery","createQueryEXT","deleteQueryEXT","getQueryObjectEXT","QUERY_RESULT_EXT","QUERY_RESULT_AVAILABLE_EXT","caps","getParameter","GPU_DISJOINT_EXT","canUseTimestampForTimerQuery","_startTimeQuery","_createTimeQuery","queryCounterEXT","TIMESTAMP_EXT","_currentNonTimestampToken","_timeElapsedQuery","beginQueryEXT","TIME_ELAPSED_EXT","_endTimeQuery","_timeElapsedQueryEnded","endQueryEXT","disjoint","available","_getTimeQueryAvailability","timeStart","_getTimeQueryResult","_deleteTimeQuery","_gpuFrameTime","_captureGPUFrameTime","_onBeginFrameObserver","_gpuFrameTimeToken","startTimeQuery","_onEndFrameObserver","time","endTimeQuery","ANY_SAMPLES_PASSED_CONSERVATIVE","ANY_SAMPLES_PASSED","_occlusionDataStorage","__occlusionDataStorage","dataStorage","supportOcclusionQuery","_occlusionQuery","occlusionQueryResult","getBoundingBoxRenderer","occlusionBoundingBoxRenderer","renderOcclusionBoundingBox","TRANSFORM_FEEDBACK","usePoints","beginTransformFeedback","POINTS","TRIANGLES","endTransformFeedback","INTERLEAVED_ATTRIBS","TRANSFORM_FEEDBACK_BUFFER","_onBeforeViewRenderObservable","_onAfterViewRenderObservable","_inputElement","clearBeforeCopy","views","masterCanvas","newView","random","toFixed","unRegisterView","previewCamera","activeCameras","activeView","activeCamera","customResize","clientWidth","_hardwareScalingLevel","clientHeight","dimsChanged","inputElementView","_renderViewStep","transformTextureUrl","_excludedCompressedTextures","some","strRegExPattern","lastQuestionMark","querystring","_textureFormatInUse","storageBuffer","texturesSupported","astc","pvrtc","etc2","etc1","skippedFiles","formatsAvailable","len1","len2","VALIDATION_ENABLED","ValidatedNativeDataStream","VALIDATION_UINT_32","VALIDATION_INT_32","VALIDATION_FLOAT_32","VALIDATION_UINT_32_ARRAY","VALIDATION_INT_32_ARRAY","VALIDATION_FLOAT_32_ARRAY","VALIDATION_NATIVE_DATA","VALIDATION_BOOLEAN","_blendFunctionParameters","_blendEquationParameters","WebGPUComputeContext","computePipeline","bindGroupEntriesExist","_bindGroupEntries","group","object","indexInGroupEntries","_texture","WebGPUComputePipelineContext","stage","_getComputeShaderCode","compute","computeElement","computeToken","computeSource","_compiledComputeEffects","compiledEffect","_onAfterUnbindFrameBufferObservable","addOnce","computeDispatch","contextPipeline","computeContext","createComputePipeline","computePass","_renderTargetEncoder","beginComputePass","dispatchWorkgroups","webGPUPipelineContextCompute","getPipelineContext","_deleteComputePipelineContext","webGpuContext","dbgShowShaderCode","rawCompute","_createComputePipelineStageDescriptor","_key","_wasPreviouslyReady","_prepareEffect","computeShader","_textureHelper","_generateMipmaps","_uploadEncoder","_options","enableGPUDebugMarkers","_renderEncoder","_currentRenderPass","_pendingDebugCommands","insertDebugMarker","_debugPushGroup","_debugPopGroup","_debugInsertMarker","WebGPUExternalTexture","setExternalTexture","_setInternalTexture","_currentMaterialContext","_endRenderTargetRenderPass","_mrtAttachments","_setDepthTextureFormat","_setColorFormat","createDepthStencilTexture","defaultAttachments","_defaultAttachments","incrementReferences","_timestampQuery","bufferView","allFaces","WebGPURenderTargetWrapper","createMipMaps","setTextureSampler","setStorageBuffer","_createBuffer","ctor","_currentDrawContext","createUniformBuffer","IsExternalTexture","bitmap"],"sourceRoot":""}