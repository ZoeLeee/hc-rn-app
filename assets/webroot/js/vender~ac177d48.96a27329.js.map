{"version":3,"file":"js/vender~ac177d48.96a27329.js","mappings":"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","sources":["webpack:///../../../node_modules/@babylonjs/core/XR/motionController/webXRGenericHandController.js","webpack:///../../../node_modules/@babylonjs/core/XR/motionController/webXRMicrosoftMixedRealityController.js","webpack:///../../../node_modules/@babylonjs/core/XR/motionController/webXROculusTouchMotionController.js","webpack:///../../../node_modules/@babylonjs/core/XR/motionController/webXRHTCViveMotionController.js","webpack:///../../../node_modules/@babylonjs/core/XR/motionController/webXRAbstractMotionController.js","webpack:///../../../node_modules/@babylonjs/core/XR/motionController/webXRControllerComponent.js","webpack:///../../../node_modules/@babylonjs/core/XR/motionController/webXRGenericMotionController.js","webpack:///../../../node_modules/@babylonjs/core/XR/motionController/webXRMotionControllerManager.js","webpack:///../../../node_modules/@babylonjs/core/XR/motionController/webXRProfiledMotionController.js","webpack:///../../../node_modules/@babylonjs/core/XR/native/nativeXRFrame.js","webpack:///../../../node_modules/@babylonjs/core/XR/native/nativeXRRenderTarget.js","webpack:///../../../node_modules/@babylonjs/core/XR/webXRCamera.js","webpack:///../../../node_modules/@babylonjs/core/XR/webXRDefaultExperience.js","webpack:///../../../node_modules/@babylonjs/core/XR/webXREnterExitUI.js","webpack:///../../../node_modules/@babylonjs/core/XR/webXRExperienceHelper.js","webpack:///../../../node_modules/@babylonjs/core/XR/webXRFeaturesManager.js","webpack:///../../../node_modules/@babylonjs/core/XR/webXRInput.js","webpack:///../../../node_modules/@babylonjs/core/XR/webXRInputSource.js","webpack:///../../../node_modules/@babylonjs/core/XR/webXRLayerWrapper.js","webpack:///../../../node_modules/@babylonjs/core/XR/webXRManagedOutputCanvas.js","webpack:///../../../node_modules/@babylonjs/core/XR/webXRRenderTargetTextureProvider.js","webpack:///../../../node_modules/@babylonjs/core/XR/webXRSessionManager.js","webpack:///../../../node_modules/@babylonjs/core/XR/webXRTypes.js","webpack:///../../../node_modules/@babylonjs/core/XR/webXRWebGLLayer.js","webpack:///../../../node_modules/@babylonjs/core/abstractScene.js","webpack:///../../../node_modules/@babylonjs/core/assetContainer.js","webpack:///../../../node_modules/@babylonjs/core/node.js","webpack:///../../../node_modules/@babylonjs/core/scene.js","webpack:///../../../node_modules/@babylonjs/core/sceneComponent.js","webpack:///../../../node_modules/@babylonjs/core/tslib.es6.js","webpack:///../../../node_modules/@babylonjs/gui/2D/style.js","webpack:///../../../node_modules/@babylonjs/gui/2D/advancedDynamicTexture.js","webpack:///../../../node_modules/@babylonjs/gui/2D/controls/container.js","webpack:///../../../node_modules/@babylonjs/gui/2D/math2D.js","webpack:///../../../node_modules/@babylonjs/gui/2D/controls/control.js","webpack:///../../../node_modules/@babylonjs/gui/2D/controls/ellipse.js","webpack:///../../../node_modules/@babylonjs/gui/2D/controls/image.js","webpack:///../../../node_modules/@babylonjs/gui/2D/controls/multiLine.js","webpack:///../../../node_modules/@babylonjs/gui/2D/controls/stackPanel.js","webpack:///../../../node_modules/@babylonjs/gui/2D/controls/textBlock.js","webpack:///../../../node_modules/@babylonjs/gui/2D/measure.js","webpack:///../../../node_modules/@babylonjs/gui/2D/multiLinePoint.js","webpack:///../../../node_modules/@babylonjs/gui/2D/valueAndUnit.js"],"sourcesContent":["import { WebXRAbstractMotionController } from \"./webXRAbstractMotionController.js\";\nimport { WebXRMotionControllerManager } from \"./webXRMotionControllerManager.js\";\n/**\n * A generic hand controller class that supports select and a secondary grasp\n */\nexport class WebXRGenericHandController extends WebXRAbstractMotionController {\n    /**\n     * Create a new hand controller object, without loading a controller model\n     * @param scene the scene to use to create this controller\n     * @param gamepadObject the corresponding gamepad object\n     * @param handedness the handedness of the controller\n     */\n    constructor(scene, gamepadObject, handedness) {\n        // Don't load the controller model - for now, hands have no real model.\n        super(scene, GenericHandSelectGraspProfile[handedness], gamepadObject, handedness, true);\n        this.profileId = \"generic-hand-select-grasp\";\n    }\n    _getFilenameAndPath() {\n        return {\n            filename: \"generic.babylon\",\n            path: \"https://controllers.babylonjs.com/generic/\",\n        };\n    }\n    _getModelLoadingConstraints() {\n        return true;\n    }\n    _processLoadedModel(_meshes) {\n        // no-op\n    }\n    _setRootMesh(meshes) {\n        // no-op\n    }\n    _updateModel() {\n        // no-op\n    }\n}\n// register the profiles\nWebXRMotionControllerManager.RegisterController(\"generic-hand-select-grasp\", (xrInput, scene) => {\n    return new WebXRGenericHandController(scene, xrInput.gamepad, xrInput.handedness);\n});\n// https://github.com/immersive-web/webxr-input-profiles/blob/main/packages/registry/profiles/generic/generic-hand-select-grasp.json\nconst GenericHandSelectGraspProfile = {\n    left: {\n        selectComponentId: \"xr-standard-trigger\",\n        components: {\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            \"xr-standard-trigger\": {\n                type: \"trigger\",\n                gamepadIndices: {\n                    button: 0,\n                },\n                rootNodeName: \"xr-standard-trigger\",\n                visualResponses: {},\n            },\n            grasp: {\n                type: \"trigger\",\n                gamepadIndices: {\n                    button: 4,\n                },\n                rootNodeName: \"grasp\",\n                visualResponses: {},\n            },\n        },\n        gamepadMapping: \"xr-standard\",\n        rootNodeName: \"generic-hand-select-grasp-left\",\n        assetPath: \"left.glb\",\n    },\n    right: {\n        selectComponentId: \"xr-standard-trigger\",\n        components: {\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            \"xr-standard-trigger\": {\n                type: \"trigger\",\n                gamepadIndices: {\n                    button: 0,\n                },\n                rootNodeName: \"xr-standard-trigger\",\n                visualResponses: {},\n            },\n            grasp: {\n                type: \"trigger\",\n                gamepadIndices: {\n                    button: 4,\n                },\n                rootNodeName: \"grasp\",\n                visualResponses: {},\n            },\n        },\n        gamepadMapping: \"xr-standard\",\n        rootNodeName: \"generic-hand-select-grasp-right\",\n        assetPath: \"right.glb\",\n    },\n    none: {\n        selectComponentId: \"xr-standard-trigger\",\n        components: {\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            \"xr-standard-trigger\": {\n                type: \"trigger\",\n                gamepadIndices: {\n                    button: 0,\n                },\n                rootNodeName: \"xr-standard-trigger\",\n                visualResponses: {},\n            },\n            grasp: {\n                type: \"trigger\",\n                gamepadIndices: {\n                    button: 4,\n                },\n                rootNodeName: \"grasp\",\n                visualResponses: {},\n            },\n        },\n        gamepadMapping: \"xr-standard\",\n        rootNodeName: \"generic-hand-select-grasp-none\",\n        assetPath: \"none.glb\",\n    },\n};\n//# sourceMappingURL=webXRGenericHandController.js.map","import { WebXRAbstractMotionController } from \"./webXRAbstractMotionController.js\";\nimport { WebXRMotionControllerManager } from \"./webXRMotionControllerManager.js\";\nimport { Mesh } from \"../../Meshes/mesh.js\";\nimport { Quaternion } from \"../../Maths/math.vector.js\";\nimport { SceneLoader } from \"../../Loading/sceneLoader.js\";\nimport { Logger } from \"../../Misc/logger.js\";\n/**\n * The motion controller class for all microsoft mixed reality controllers\n */\nexport class WebXRMicrosoftMixedRealityController extends WebXRAbstractMotionController {\n    constructor(scene, gamepadObject, handedness) {\n        super(scene, MixedRealityProfile[\"left-right\"], gamepadObject, handedness);\n        // use this in the future - https://github.com/immersive-web/webxr-input-profiles/tree/master/packages/assets/profiles/microsoft\n        this._mapping = {\n            defaultButton: {\n                valueNodeName: \"VALUE\",\n                unpressedNodeName: \"UNPRESSED\",\n                pressedNodeName: \"PRESSED\",\n            },\n            defaultAxis: {\n                valueNodeName: \"VALUE\",\n                minNodeName: \"MIN\",\n                maxNodeName: \"MAX\",\n            },\n            buttons: {\n                \"xr-standard-trigger\": {\n                    rootNodeName: \"SELECT\",\n                    componentProperty: \"button\",\n                    states: [\"default\", \"touched\", \"pressed\"],\n                },\n                \"xr-standard-squeeze\": {\n                    rootNodeName: \"GRASP\",\n                    componentProperty: \"state\",\n                    states: [\"pressed\"],\n                },\n                \"xr-standard-touchpad\": {\n                    rootNodeName: \"TOUCHPAD_PRESS\",\n                    labelAnchorNodeName: \"squeeze-label\",\n                    touchPointNodeName: \"TOUCH\", // TODO - use this for visual feedback\n                },\n                \"xr-standard-thumbstick\": {\n                    rootNodeName: \"THUMBSTICK_PRESS\",\n                    componentProperty: \"state\",\n                    states: [\"pressed\"],\n                },\n            },\n            axes: {\n                \"xr-standard-touchpad\": {\n                    \"x-axis\": {\n                        rootNodeName: \"TOUCHPAD_TOUCH_X\",\n                    },\n                    \"y-axis\": {\n                        rootNodeName: \"TOUCHPAD_TOUCH_Y\",\n                    },\n                },\n                \"xr-standard-thumbstick\": {\n                    \"x-axis\": {\n                        rootNodeName: \"THUMBSTICK_X\",\n                    },\n                    \"y-axis\": {\n                        rootNodeName: \"THUMBSTICK_Y\",\n                    },\n                },\n            },\n        };\n        this.profileId = \"microsoft-mixed-reality\";\n    }\n    _getFilenameAndPath() {\n        let filename = \"\";\n        if (this.handedness === \"left\") {\n            filename = WebXRMicrosoftMixedRealityController.MODEL_LEFT_FILENAME;\n        }\n        else {\n            // Right is the default if no hand is specified\n            filename = WebXRMicrosoftMixedRealityController.MODEL_RIGHT_FILENAME;\n        }\n        const device = \"default\";\n        const path = WebXRMicrosoftMixedRealityController.MODEL_BASE_URL + device + \"/\";\n        return {\n            filename,\n            path,\n        };\n    }\n    _getModelLoadingConstraints() {\n        const glbLoaded = SceneLoader.IsPluginForExtensionAvailable(\".glb\");\n        if (!glbLoaded) {\n            Logger.Warn(\"glTF / glb loaded was not registered, using generic controller instead\");\n        }\n        return glbLoaded;\n    }\n    _processLoadedModel(_meshes) {\n        if (!this.rootMesh) {\n            return;\n        }\n        // Button Meshes\n        this.getComponentIds().forEach((id, i) => {\n            if (this.disableAnimation) {\n                return;\n            }\n            if (id && this.rootMesh) {\n                const buttonMap = this._mapping.buttons[id];\n                const buttonMeshName = buttonMap.rootNodeName;\n                if (!buttonMeshName) {\n                    Logger.Log(\"Skipping unknown button at index: \" + i + \" with mapped name: \" + id);\n                    return;\n                }\n                const buttonMesh = this._getChildByName(this.rootMesh, buttonMeshName);\n                if (!buttonMesh) {\n                    Logger.Warn(\"Missing button mesh with name: \" + buttonMeshName);\n                    return;\n                }\n                buttonMap.valueMesh = this._getImmediateChildByName(buttonMesh, this._mapping.defaultButton.valueNodeName);\n                buttonMap.pressedMesh = this._getImmediateChildByName(buttonMesh, this._mapping.defaultButton.pressedNodeName);\n                buttonMap.unpressedMesh = this._getImmediateChildByName(buttonMesh, this._mapping.defaultButton.unpressedNodeName);\n                if (buttonMap.valueMesh && buttonMap.pressedMesh && buttonMap.unpressedMesh) {\n                    const comp = this.getComponent(id);\n                    if (comp) {\n                        comp.onButtonStateChangedObservable.add((component) => {\n                            this._lerpTransform(buttonMap, component.value);\n                        }, undefined, true);\n                    }\n                }\n                else {\n                    // If we didn't find the mesh, it simply means this button won't have transforms applied as mapped button value changes.\n                    Logger.Warn(\"Missing button submesh under mesh with name: \" + buttonMeshName);\n                }\n            }\n        });\n        // Axis Meshes\n        this.getComponentIds().forEach((id) => {\n            const comp = this.getComponent(id);\n            if (!comp.isAxes()) {\n                return;\n            }\n            [\"x-axis\", \"y-axis\"].forEach((axis) => {\n                if (!this.rootMesh) {\n                    return;\n                }\n                const axisMap = this._mapping.axes[id][axis];\n                const axisMesh = this._getChildByName(this.rootMesh, axisMap.rootNodeName);\n                if (!axisMesh) {\n                    Logger.Warn(\"Missing axis mesh with name: \" + axisMap.rootNodeName);\n                    return;\n                }\n                axisMap.valueMesh = this._getImmediateChildByName(axisMesh, this._mapping.defaultAxis.valueNodeName);\n                axisMap.minMesh = this._getImmediateChildByName(axisMesh, this._mapping.defaultAxis.minNodeName);\n                axisMap.maxMesh = this._getImmediateChildByName(axisMesh, this._mapping.defaultAxis.maxNodeName);\n                if (axisMap.valueMesh && axisMap.minMesh && axisMap.maxMesh) {\n                    if (comp) {\n                        comp.onAxisValueChangedObservable.add((axisValues) => {\n                            const value = axis === \"x-axis\" ? axisValues.x : axisValues.y;\n                            this._lerpTransform(axisMap, value, true);\n                        }, undefined, true);\n                    }\n                }\n                else {\n                    // If we didn't find the mesh, it simply means this button won't have transforms applied as mapped button value changes.\n                    Logger.Warn(\"Missing axis submesh under mesh with name: \" + axisMap.rootNodeName);\n                }\n            });\n        });\n    }\n    _setRootMesh(meshes) {\n        this.rootMesh = new Mesh(this.profileId + \" \" + this.handedness, this.scene);\n        this.rootMesh.isPickable = false;\n        let rootMesh;\n        // Find the root node in the loaded glTF scene, and attach it as a child of 'parentMesh'\n        for (let i = 0; i < meshes.length; i++) {\n            const mesh = meshes[i];\n            mesh.isPickable = false;\n            if (!mesh.parent) {\n                // Handle root node, attach to the new parentMesh\n                rootMesh = mesh;\n            }\n        }\n        if (rootMesh) {\n            rootMesh.setParent(this.rootMesh);\n        }\n        if (!this.scene.useRightHandedSystem) {\n            this.rootMesh.rotationQuaternion = Quaternion.FromEulerAngles(0, Math.PI, 0);\n        }\n    }\n    _updateModel() {\n        // no-op. model is updated using observables.\n    }\n}\n/**\n * The base url used to load the left and right controller models\n */\nWebXRMicrosoftMixedRealityController.MODEL_BASE_URL = \"https://controllers.babylonjs.com/microsoft/\";\n/**\n * The name of the left controller model file\n */\nWebXRMicrosoftMixedRealityController.MODEL_LEFT_FILENAME = \"left.glb\";\n/**\n * The name of the right controller model file\n */\nWebXRMicrosoftMixedRealityController.MODEL_RIGHT_FILENAME = \"right.glb\";\n// register the profile\nWebXRMotionControllerManager.RegisterController(\"windows-mixed-reality\", (xrInput, scene) => {\n    return new WebXRMicrosoftMixedRealityController(scene, xrInput.gamepad, xrInput.handedness);\n});\n// https://github.com/immersive-web/webxr-input-profiles/blob/master/packages/registry/profiles/microsoft/microsoft-mixed-reality.json\nconst MixedRealityProfile = {\n    left: {\n        selectComponentId: \"xr-standard-trigger\",\n        components: {\n            \"xr-standard-trigger\": {\n                type: \"trigger\",\n                gamepadIndices: {\n                    button: 0,\n                },\n                rootNodeName: \"xr_standard_trigger\",\n                visualResponses: {\n                    xr_standard_trigger_pressed: {\n                        componentProperty: \"button\",\n                        states: [\"default\", \"touched\", \"pressed\"],\n                        valueNodeProperty: \"transform\",\n                        valueNodeName: \"xr_standard_trigger_pressed_value\",\n                        minNodeName: \"xr_standard_trigger_pressed_min\",\n                        maxNodeName: \"xr_standard_trigger_pressed_max\",\n                    },\n                },\n            },\n            \"xr-standard-squeeze\": {\n                type: \"squeeze\",\n                gamepadIndices: {\n                    button: 1,\n                },\n                rootNodeName: \"xr_standard_squeeze\",\n                visualResponses: {\n                    xr_standard_squeeze_pressed: {\n                        componentProperty: \"button\",\n                        states: [\"default\", \"touched\", \"pressed\"],\n                        valueNodeProperty: \"transform\",\n                        valueNodeName: \"xr_standard_squeeze_pressed_value\",\n                        minNodeName: \"xr_standard_squeeze_pressed_min\",\n                        maxNodeName: \"xr_standard_squeeze_pressed_max\",\n                    },\n                },\n            },\n            \"xr-standard-touchpad\": {\n                type: \"touchpad\",\n                gamepadIndices: {\n                    button: 2,\n                    xAxis: 0,\n                    yAxis: 1,\n                },\n                rootNodeName: \"xr_standard_touchpad\",\n                visualResponses: {\n                    xr_standard_touchpad_pressed: {\n                        componentProperty: \"button\",\n                        states: [\"default\", \"touched\", \"pressed\"],\n                        valueNodeProperty: \"transform\",\n                        valueNodeName: \"xr_standard_touchpad_pressed_value\",\n                        minNodeName: \"xr_standard_touchpad_pressed_min\",\n                        maxNodeName: \"xr_standard_touchpad_pressed_max\",\n                    },\n                    xr_standard_touchpad_xaxis_pressed: {\n                        componentProperty: \"xAxis\",\n                        states: [\"default\", \"touched\", \"pressed\"],\n                        valueNodeProperty: \"transform\",\n                        valueNodeName: \"xr_standard_touchpad_xaxis_pressed_value\",\n                        minNodeName: \"xr_standard_touchpad_xaxis_pressed_min\",\n                        maxNodeName: \"xr_standard_touchpad_xaxis_pressed_max\",\n                    },\n                    xr_standard_touchpad_yaxis_pressed: {\n                        componentProperty: \"yAxis\",\n                        states: [\"default\", \"touched\", \"pressed\"],\n                        valueNodeProperty: \"transform\",\n                        valueNodeName: \"xr_standard_touchpad_yaxis_pressed_value\",\n                        minNodeName: \"xr_standard_touchpad_yaxis_pressed_min\",\n                        maxNodeName: \"xr_standard_touchpad_yaxis_pressed_max\",\n                    },\n                    xr_standard_touchpad_xaxis_touched: {\n                        componentProperty: \"xAxis\",\n                        states: [\"default\", \"touched\", \"pressed\"],\n                        valueNodeProperty: \"transform\",\n                        valueNodeName: \"xr_standard_touchpad_xaxis_touched_value\",\n                        minNodeName: \"xr_standard_touchpad_xaxis_touched_min\",\n                        maxNodeName: \"xr_standard_touchpad_xaxis_touched_max\",\n                    },\n                    xr_standard_touchpad_yaxis_touched: {\n                        componentProperty: \"yAxis\",\n                        states: [\"default\", \"touched\", \"pressed\"],\n                        valueNodeProperty: \"transform\",\n                        valueNodeName: \"xr_standard_touchpad_yaxis_touched_value\",\n                        minNodeName: \"xr_standard_touchpad_yaxis_touched_min\",\n                        maxNodeName: \"xr_standard_touchpad_yaxis_touched_max\",\n                    },\n                    xr_standard_touchpad_axes_touched: {\n                        componentProperty: \"state\",\n                        states: [\"touched\", \"pressed\"],\n                        valueNodeProperty: \"visibility\",\n                        valueNodeName: \"xr_standard_touchpad_axes_touched_value\",\n                    },\n                },\n                touchPointNodeName: \"xr_standard_touchpad_axes_touched_value\",\n            },\n            \"xr-standard-thumbstick\": {\n                type: \"thumbstick\",\n                gamepadIndices: {\n                    button: 3,\n                    xAxis: 2,\n                    yAxis: 3,\n                },\n                rootNodeName: \"xr_standard_thumbstick\",\n                visualResponses: {\n                    xr_standard_thumbstick_pressed: {\n                        componentProperty: \"button\",\n                        states: [\"default\", \"touched\", \"pressed\"],\n                        valueNodeProperty: \"transform\",\n                        valueNodeName: \"xr_standard_thumbstick_pressed_value\",\n                        minNodeName: \"xr_standard_thumbstick_pressed_min\",\n                        maxNodeName: \"xr_standard_thumbstick_pressed_max\",\n                    },\n                    xr_standard_thumbstick_xaxis_pressed: {\n                        componentProperty: \"xAxis\",\n                        states: [\"default\", \"touched\", \"pressed\"],\n                        valueNodeProperty: \"transform\",\n                        valueNodeName: \"xr_standard_thumbstick_xaxis_pressed_value\",\n                        minNodeName: \"xr_standard_thumbstick_xaxis_pressed_min\",\n                        maxNodeName: \"xr_standard_thumbstick_xaxis_pressed_max\",\n                    },\n                    xr_standard_thumbstick_yaxis_pressed: {\n                        componentProperty: \"yAxis\",\n                        states: [\"default\", \"touched\", \"pressed\"],\n                        valueNodeProperty: \"transform\",\n                        valueNodeName: \"xr_standard_thumbstick_yaxis_pressed_value\",\n                        minNodeName: \"xr_standard_thumbstick_yaxis_pressed_min\",\n                        maxNodeName: \"xr_standard_thumbstick_yaxis_pressed_max\",\n                    },\n                },\n            },\n        },\n        gamepadMapping: \"xr-standard\",\n        rootNodeName: \"microsoft-mixed-reality-left\",\n        assetPath: \"left.glb\",\n    },\n    right: {\n        selectComponentId: \"xr-standard-trigger\",\n        components: {\n            \"xr-standard-trigger\": {\n                type: \"trigger\",\n                gamepadIndices: {\n                    button: 0,\n                },\n                rootNodeName: \"xr_standard_trigger\",\n                visualResponses: {\n                    xr_standard_trigger_pressed: {\n                        componentProperty: \"button\",\n                        states: [\"default\", \"touched\", \"pressed\"],\n                        valueNodeProperty: \"transform\",\n                        valueNodeName: \"xr_standard_trigger_pressed_value\",\n                        minNodeName: \"xr_standard_trigger_pressed_min\",\n                        maxNodeName: \"xr_standard_trigger_pressed_max\",\n                    },\n                },\n            },\n            \"xr-standard-squeeze\": {\n                type: \"squeeze\",\n                gamepadIndices: {\n                    button: 1,\n                },\n                rootNodeName: \"xr_standard_squeeze\",\n                visualResponses: {\n                    xr_standard_squeeze_pressed: {\n                        componentProperty: \"button\",\n                        states: [\"default\", \"touched\", \"pressed\"],\n                        valueNodeProperty: \"transform\",\n                        valueNodeName: \"xr_standard_squeeze_pressed_value\",\n                        minNodeName: \"xr_standard_squeeze_pressed_min\",\n                        maxNodeName: \"xr_standard_squeeze_pressed_max\",\n                    },\n                },\n            },\n            \"xr-standard-touchpad\": {\n                type: \"touchpad\",\n                gamepadIndices: {\n                    button: 2,\n                    xAxis: 0,\n                    yAxis: 1,\n                },\n                rootNodeName: \"xr_standard_touchpad\",\n                visualResponses: {\n                    xr_standard_touchpad_pressed: {\n                        componentProperty: \"button\",\n                        states: [\"default\", \"touched\", \"pressed\"],\n                        valueNodeProperty: \"transform\",\n                        valueNodeName: \"xr_standard_touchpad_pressed_value\",\n                        minNodeName: \"xr_standard_touchpad_pressed_min\",\n                        maxNodeName: \"xr_standard_touchpad_pressed_max\",\n                    },\n                    xr_standard_touchpad_xaxis_pressed: {\n                        componentProperty: \"xAxis\",\n                        states: [\"default\", \"touched\", \"pressed\"],\n                        valueNodeProperty: \"transform\",\n                        valueNodeName: \"xr_standard_touchpad_xaxis_pressed_value\",\n                        minNodeName: \"xr_standard_touchpad_xaxis_pressed_min\",\n                        maxNodeName: \"xr_standard_touchpad_xaxis_pressed_max\",\n                    },\n                    xr_standard_touchpad_yaxis_pressed: {\n                        componentProperty: \"yAxis\",\n                        states: [\"default\", \"touched\", \"pressed\"],\n                        valueNodeProperty: \"transform\",\n                        valueNodeName: \"xr_standard_touchpad_yaxis_pressed_value\",\n                        minNodeName: \"xr_standard_touchpad_yaxis_pressed_min\",\n                        maxNodeName: \"xr_standard_touchpad_yaxis_pressed_max\",\n                    },\n                    xr_standard_touchpad_xaxis_touched: {\n                        componentProperty: \"xAxis\",\n                        states: [\"default\", \"touched\", \"pressed\"],\n                        valueNodeProperty: \"transform\",\n                        valueNodeName: \"xr_standard_touchpad_xaxis_touched_value\",\n                        minNodeName: \"xr_standard_touchpad_xaxis_touched_min\",\n                        maxNodeName: \"xr_standard_touchpad_xaxis_touched_max\",\n                    },\n                    xr_standard_touchpad_yaxis_touched: {\n                        componentProperty: \"yAxis\",\n                        states: [\"default\", \"touched\", \"pressed\"],\n                        valueNodeProperty: \"transform\",\n                        valueNodeName: \"xr_standard_touchpad_yaxis_touched_value\",\n                        minNodeName: \"xr_standard_touchpad_yaxis_touched_min\",\n                        maxNodeName: \"xr_standard_touchpad_yaxis_touched_max\",\n                    },\n                    xr_standard_touchpad_axes_touched: {\n                        componentProperty: \"state\",\n                        states: [\"touched\", \"pressed\"],\n                        valueNodeProperty: \"visibility\",\n                        valueNodeName: \"xr_standard_touchpad_axes_touched_value\",\n                    },\n                },\n                touchPointNodeName: \"xr_standard_touchpad_axes_touched_value\",\n            },\n            \"xr-standard-thumbstick\": {\n                type: \"thumbstick\",\n                gamepadIndices: {\n                    button: 3,\n                    xAxis: 2,\n                    yAxis: 3,\n                },\n                rootNodeName: \"xr_standard_thumbstick\",\n                visualResponses: {\n                    xr_standard_thumbstick_pressed: {\n                        componentProperty: \"button\",\n                        states: [\"default\", \"touched\", \"pressed\"],\n                        valueNodeProperty: \"transform\",\n                        valueNodeName: \"xr_standard_thumbstick_pressed_value\",\n                        minNodeName: \"xr_standard_thumbstick_pressed_min\",\n                        maxNodeName: \"xr_standard_thumbstick_pressed_max\",\n                    },\n                    xr_standard_thumbstick_xaxis_pressed: {\n                        componentProperty: \"xAxis\",\n                        states: [\"default\", \"touched\", \"pressed\"],\n                        valueNodeProperty: \"transform\",\n                        valueNodeName: \"xr_standard_thumbstick_xaxis_pressed_value\",\n                        minNodeName: \"xr_standard_thumbstick_xaxis_pressed_min\",\n                        maxNodeName: \"xr_standard_thumbstick_xaxis_pressed_max\",\n                    },\n                    xr_standard_thumbstick_yaxis_pressed: {\n                        componentProperty: \"yAxis\",\n                        states: [\"default\", \"touched\", \"pressed\"],\n                        valueNodeProperty: \"transform\",\n                        valueNodeName: \"xr_standard_thumbstick_yaxis_pressed_value\",\n                        minNodeName: \"xr_standard_thumbstick_yaxis_pressed_min\",\n                        maxNodeName: \"xr_standard_thumbstick_yaxis_pressed_max\",\n                    },\n                },\n            },\n        },\n        gamepadMapping: \"xr-standard\",\n        rootNodeName: \"microsoft-mixed-reality-right\",\n        assetPath: \"right.glb\",\n    },\n};\n//# sourceMappingURL=webXRMicrosoftMixedRealityController.js.map","import { WebXRAbstractMotionController } from \"./webXRAbstractMotionController.js\";\nimport { WebXRMotionControllerManager } from \"./webXRMotionControllerManager.js\";\nimport { Mesh } from \"../../Meshes/mesh.js\";\nimport { Quaternion } from \"../../Maths/math.vector.js\";\n/**\n * The motion controller class for oculus touch (quest, rift).\n * This class supports legacy mapping as well the standard xr mapping\n */\nexport class WebXROculusTouchMotionController extends WebXRAbstractMotionController {\n    constructor(scene, gamepadObject, handedness, _legacyMapping = false, _forceLegacyControllers = false) {\n        super(scene, OculusTouchLayouts[handedness], gamepadObject, handedness);\n        this._forceLegacyControllers = _forceLegacyControllers;\n        this.profileId = \"oculus-touch\";\n    }\n    _getFilenameAndPath() {\n        let filename = \"\";\n        if (this.handedness === \"left\") {\n            filename = WebXROculusTouchMotionController.MODEL_LEFT_FILENAME;\n        }\n        else {\n            // Right is the default if no hand is specified\n            filename = WebXROculusTouchMotionController.MODEL_RIGHT_FILENAME;\n        }\n        const path = this._isQuest() ? WebXROculusTouchMotionController.QUEST_MODEL_BASE_URL : WebXROculusTouchMotionController.MODEL_BASE_URL;\n        return {\n            filename,\n            path,\n        };\n    }\n    _getModelLoadingConstraints() {\n        return true;\n    }\n    _processLoadedModel(_meshes) {\n        const isQuest = this._isQuest();\n        const triggerDirection = this.handedness === \"right\" ? -1 : 1;\n        this.getComponentIds().forEach((id) => {\n            const comp = id && this.getComponent(id);\n            if (comp) {\n                comp.onButtonStateChangedObservable.add((component) => {\n                    if (!this.rootMesh || this.disableAnimation) {\n                        return;\n                    }\n                    switch (id) {\n                        case \"xr-standard-trigger\": // index trigger\n                            if (!isQuest) {\n                                this._modelRootNode.getChildren()[3].rotation.x = -component.value * 0.2;\n                                this._modelRootNode.getChildren()[3].position.y = -component.value * 0.005;\n                                this._modelRootNode.getChildren()[3].position.z = -component.value * 0.005;\n                            }\n                            return;\n                        case \"xr-standard-squeeze\": // secondary trigger\n                            if (!isQuest) {\n                                this._modelRootNode.getChildren()[4].position.x = triggerDirection * component.value * 0.0035;\n                            }\n                            return;\n                        case \"xr-standard-thumbstick\": // thumbstick\n                            return;\n                        case \"a-button\":\n                        case \"x-button\":\n                            if (!isQuest) {\n                                if (component.pressed) {\n                                    this._modelRootNode.getChildren()[1].position.y = -0.001;\n                                }\n                                else {\n                                    this._modelRootNode.getChildren()[1].position.y = 0;\n                                }\n                            }\n                            return;\n                        case \"b-button\":\n                        case \"y-button\":\n                            if (!isQuest) {\n                                if (component.pressed) {\n                                    this._modelRootNode.getChildren()[2].position.y = -0.001;\n                                }\n                                else {\n                                    this._modelRootNode.getChildren()[2].position.y = 0;\n                                }\n                            }\n                            return;\n                    }\n                }, undefined, true);\n            }\n        });\n    }\n    _setRootMesh(meshes) {\n        this.rootMesh = new Mesh(this.profileId + \" \" + this.handedness, this.scene);\n        if (!this.scene.useRightHandedSystem) {\n            this.rootMesh.rotationQuaternion = Quaternion.FromEulerAngles(0, Math.PI, 0);\n        }\n        meshes.forEach((mesh) => {\n            mesh.isPickable = false;\n        });\n        if (this._isQuest()) {\n            this._modelRootNode = meshes[0];\n        }\n        else {\n            this._modelRootNode = meshes[1];\n            this.rootMesh.position.y = 0.034;\n            this.rootMesh.position.z = 0.052;\n        }\n        this._modelRootNode.parent = this.rootMesh;\n    }\n    _updateModel() {\n        // no-op. model is updated using observables.\n    }\n    /**\n     * Is this the new type of oculus touch. At the moment both have the same profile and it is impossible to differentiate\n     * between the touch and touch 2.\n     */\n    _isQuest() {\n        // this is SADLY the only way to currently check. Until proper profiles will be available.\n        return !!navigator.userAgent.match(/Quest/gi) && !this._forceLegacyControllers;\n    }\n}\n/**\n * The base url used to load the left and right controller models\n */\nWebXROculusTouchMotionController.MODEL_BASE_URL = \"https://controllers.babylonjs.com/oculus/\";\n/**\n * The name of the left controller model file\n */\nWebXROculusTouchMotionController.MODEL_LEFT_FILENAME = \"left.babylon\";\n/**\n * The name of the right controller model file\n */\nWebXROculusTouchMotionController.MODEL_RIGHT_FILENAME = \"right.babylon\";\n/**\n * Base Url for the Quest controller model.\n */\nWebXROculusTouchMotionController.QUEST_MODEL_BASE_URL = \"https://controllers.babylonjs.com/oculusQuest/\";\n// register the profile\nWebXRMotionControllerManager.RegisterController(\"oculus-touch\", (xrInput, scene) => {\n    return new WebXROculusTouchMotionController(scene, xrInput.gamepad, xrInput.handedness);\n});\nWebXRMotionControllerManager.RegisterController(\"oculus-touch-legacy\", (xrInput, scene) => {\n    return new WebXROculusTouchMotionController(scene, xrInput.gamepad, xrInput.handedness, true);\n});\nconst OculusTouchLayouts = {\n    left: {\n        selectComponentId: \"xr-standard-trigger\",\n        components: {\n            \"xr-standard-trigger\": {\n                type: \"trigger\",\n                gamepadIndices: {\n                    button: 0,\n                },\n                rootNodeName: \"xr_standard_trigger\",\n                visualResponses: {},\n            },\n            \"xr-standard-squeeze\": {\n                type: \"squeeze\",\n                gamepadIndices: {\n                    button: 1,\n                },\n                rootNodeName: \"xr_standard_squeeze\",\n                visualResponses: {},\n            },\n            \"xr-standard-thumbstick\": {\n                type: \"thumbstick\",\n                gamepadIndices: {\n                    button: 3,\n                    xAxis: 2,\n                    yAxis: 3,\n                },\n                rootNodeName: \"xr_standard_thumbstick\",\n                visualResponses: {},\n            },\n            \"x-button\": {\n                type: \"button\",\n                gamepadIndices: {\n                    button: 4,\n                },\n                rootNodeName: \"x_button\",\n                visualResponses: {},\n            },\n            \"y-button\": {\n                type: \"button\",\n                gamepadIndices: {\n                    button: 5,\n                },\n                rootNodeName: \"y_button\",\n                visualResponses: {},\n            },\n            thumbrest: {\n                type: \"button\",\n                gamepadIndices: {\n                    button: 6,\n                },\n                rootNodeName: \"thumbrest\",\n                visualResponses: {},\n            },\n        },\n        gamepadMapping: \"xr-standard\",\n        rootNodeName: \"oculus-touch-v2-left\",\n        assetPath: \"left.glb\",\n    },\n    right: {\n        selectComponentId: \"xr-standard-trigger\",\n        components: {\n            \"xr-standard-trigger\": {\n                type: \"trigger\",\n                gamepadIndices: {\n                    button: 0,\n                },\n                rootNodeName: \"xr_standard_trigger\",\n                visualResponses: {},\n            },\n            \"xr-standard-squeeze\": {\n                type: \"squeeze\",\n                gamepadIndices: {\n                    button: 1,\n                },\n                rootNodeName: \"xr_standard_squeeze\",\n                visualResponses: {},\n            },\n            \"xr-standard-thumbstick\": {\n                type: \"thumbstick\",\n                gamepadIndices: {\n                    button: 3,\n                    xAxis: 2,\n                    yAxis: 3,\n                },\n                rootNodeName: \"xr_standard_thumbstick\",\n                visualResponses: {},\n            },\n            \"a-button\": {\n                type: \"button\",\n                gamepadIndices: {\n                    button: 4,\n                },\n                rootNodeName: \"a_button\",\n                visualResponses: {},\n            },\n            \"b-button\": {\n                type: \"button\",\n                gamepadIndices: {\n                    button: 5,\n                },\n                rootNodeName: \"b_button\",\n                visualResponses: {},\n            },\n            thumbrest: {\n                type: \"button\",\n                gamepadIndices: {\n                    button: 6,\n                },\n                rootNodeName: \"thumbrest\",\n                visualResponses: {},\n            },\n        },\n        gamepadMapping: \"xr-standard\",\n        rootNodeName: \"oculus-touch-v2-right\",\n        assetPath: \"right.glb\",\n    },\n};\n//# sourceMappingURL=webXROculusTouchMotionController.js.map","import { WebXRAbstractMotionController } from \"./webXRAbstractMotionController.js\";\nimport { Mesh } from \"../../Meshes/mesh.js\";\nimport { Quaternion } from \"../../Maths/math.vector.js\";\nimport { WebXRMotionControllerManager } from \"./webXRMotionControllerManager.js\";\n/**\n * The motion controller class for the standard HTC-Vive controllers\n */\nexport class WebXRHTCViveMotionController extends WebXRAbstractMotionController {\n    /**\n     * Create a new Vive motion controller object\n     * @param scene the scene to use to create this controller\n     * @param gamepadObject the corresponding gamepad object\n     * @param handedness the handedness of the controller\n     */\n    constructor(scene, gamepadObject, handedness) {\n        super(scene, HTCViveLayout[handedness], gamepadObject, handedness);\n        this.profileId = \"htc-vive\";\n    }\n    _getFilenameAndPath() {\n        const filename = WebXRHTCViveMotionController.MODEL_FILENAME;\n        const path = WebXRHTCViveMotionController.MODEL_BASE_URL;\n        return {\n            filename,\n            path,\n        };\n    }\n    _getModelLoadingConstraints() {\n        return true;\n    }\n    _processLoadedModel(_meshes) {\n        this.getComponentIds().forEach((id) => {\n            const comp = id && this.getComponent(id);\n            if (comp) {\n                comp.onButtonStateChangedObservable.add((component) => {\n                    if (!this.rootMesh || this.disableAnimation) {\n                        return;\n                    }\n                    switch (id) {\n                        case \"xr-standard-trigger\":\n                            this._modelRootNode.getChildren()[6].rotation.x = -component.value * 0.15;\n                            return;\n                        case \"xr-standard-touchpad\":\n                            return;\n                        case \"xr-standard-squeeze\":\n                            return;\n                    }\n                }, undefined, true);\n            }\n        });\n    }\n    _setRootMesh(meshes) {\n        this.rootMesh = new Mesh(this.profileId + \" \" + this.handedness, this.scene);\n        meshes.forEach((mesh) => {\n            mesh.isPickable = false;\n        });\n        this._modelRootNode = meshes[1];\n        this._modelRootNode.parent = this.rootMesh;\n        if (!this.scene.useRightHandedSystem) {\n            this.rootMesh.rotationQuaternion = Quaternion.FromEulerAngles(0, Math.PI, 0);\n        }\n    }\n    _updateModel() {\n        // no-op. model is updated using observables.\n    }\n}\n/**\n * The base url used to load the left and right controller models\n */\nWebXRHTCViveMotionController.MODEL_BASE_URL = \"https://controllers.babylonjs.com/vive/\";\n/**\n * File name for the controller model.\n */\nWebXRHTCViveMotionController.MODEL_FILENAME = \"wand.babylon\";\n// register the profile\nWebXRMotionControllerManager.RegisterController(\"htc-vive\", (xrInput, scene) => {\n    return new WebXRHTCViveMotionController(scene, xrInput.gamepad, xrInput.handedness);\n});\n// WebXRMotionControllerManager.RegisterController(\"htc-vive-legacy\", (xrInput: XRInputSource, scene: Scene) => {\n//     return new WebXRHTCViveMotionController(scene, <any>(xrInput.gamepad), xrInput.handedness, true);\n// });\nconst HTCViveLayout = {\n    left: {\n        selectComponentId: \"xr-standard-trigger\",\n        components: {\n            \"xr-standard-trigger\": {\n                type: \"trigger\",\n                gamepadIndices: {\n                    button: 0,\n                },\n                rootNodeName: \"xr_standard_trigger\",\n                visualResponses: {},\n            },\n            \"xr-standard-squeeze\": {\n                type: \"squeeze\",\n                gamepadIndices: {\n                    button: 1,\n                },\n                rootNodeName: \"xr_standard_squeeze\",\n                visualResponses: {},\n            },\n            \"xr-standard-touchpad\": {\n                type: \"touchpad\",\n                gamepadIndices: {\n                    button: 2,\n                    xAxis: 0,\n                    yAxis: 1,\n                },\n                rootNodeName: \"xr_standard_touchpad\",\n                visualResponses: {},\n            },\n            menu: {\n                type: \"button\",\n                gamepadIndices: {\n                    button: 4,\n                },\n                rootNodeName: \"menu\",\n                visualResponses: {},\n            },\n        },\n        gamepadMapping: \"xr-standard\",\n        rootNodeName: \"htc_vive_none\",\n        assetPath: \"none.glb\",\n    },\n    right: {\n        selectComponentId: \"xr-standard-trigger\",\n        components: {\n            \"xr-standard-trigger\": {\n                type: \"trigger\",\n                gamepadIndices: {\n                    button: 0,\n                },\n                rootNodeName: \"xr_standard_trigger\",\n                visualResponses: {},\n            },\n            \"xr-standard-squeeze\": {\n                type: \"squeeze\",\n                gamepadIndices: {\n                    button: 1,\n                },\n                rootNodeName: \"xr_standard_squeeze\",\n                visualResponses: {},\n            },\n            \"xr-standard-touchpad\": {\n                type: \"touchpad\",\n                gamepadIndices: {\n                    button: 2,\n                    xAxis: 0,\n                    yAxis: 1,\n                },\n                rootNodeName: \"xr_standard_touchpad\",\n                visualResponses: {},\n            },\n            menu: {\n                type: \"button\",\n                gamepadIndices: {\n                    button: 4,\n                },\n                rootNodeName: \"menu\",\n                visualResponses: {},\n            },\n        },\n        gamepadMapping: \"xr-standard\",\n        rootNodeName: \"htc_vive_none\",\n        assetPath: \"none.glb\",\n    },\n    none: {\n        selectComponentId: \"xr-standard-trigger\",\n        components: {\n            \"xr-standard-trigger\": {\n                type: \"trigger\",\n                gamepadIndices: {\n                    button: 0,\n                },\n                rootNodeName: \"xr_standard_trigger\",\n                visualResponses: {},\n            },\n            \"xr-standard-squeeze\": {\n                type: \"squeeze\",\n                gamepadIndices: {\n                    button: 1,\n                },\n                rootNodeName: \"xr_standard_squeeze\",\n                visualResponses: {},\n            },\n            \"xr-standard-touchpad\": {\n                type: \"touchpad\",\n                gamepadIndices: {\n                    button: 2,\n                    xAxis: 0,\n                    yAxis: 1,\n                },\n                rootNodeName: \"xr_standard_touchpad\",\n                visualResponses: {},\n            },\n            menu: {\n                type: \"button\",\n                gamepadIndices: {\n                    button: 4,\n                },\n                rootNodeName: \"menu\",\n                visualResponses: {},\n            },\n        },\n        gamepadMapping: \"xr-standard\",\n        rootNodeName: \"htc-vive-none\",\n        assetPath: \"none.glb\",\n    },\n};\n//# sourceMappingURL=webXRHTCViveMotionController.js.map","import { WebXRControllerComponent } from \"./webXRControllerComponent.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { SceneLoader } from \"../../Loading/sceneLoader.js\";\nimport { Quaternion, Vector3 } from \"../../Maths/math.vector.js\";\nimport { Mesh } from \"../../Meshes/mesh.js\";\n/**\n * An Abstract Motion controller\n * This class receives an xrInput and a profile layout and uses those to initialize the components\n * Each component has an observable to check for changes in value and state\n */\nexport class WebXRAbstractMotionController {\n    /**\n     * constructs a new abstract motion controller\n     * @param scene the scene to which the model of the controller will be added\n     * @param layout The profile layout to load\n     * @param gamepadObject The gamepad object correlating to this controller\n     * @param handedness handedness (left/right/none) of this controller\n     * @param _doNotLoadControllerMesh set this flag to ignore the mesh loading\n     * @param _controllerCache a cache holding controller models already loaded in this session\n     */\n    constructor(\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    scene, \n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    layout, \n    /**\n     * The gamepad object correlating to this controller\n     */\n    gamepadObject, \n    /**\n     * handedness (left/right/none) of this controller\n     */\n    handedness, \n    /**\n     * @internal\n     */\n    _doNotLoadControllerMesh = false, _controllerCache) {\n        this.scene = scene;\n        this.layout = layout;\n        this.gamepadObject = gamepadObject;\n        this.handedness = handedness;\n        this._doNotLoadControllerMesh = _doNotLoadControllerMesh;\n        this._controllerCache = _controllerCache;\n        this._initComponent = (id) => {\n            if (!id) {\n                return;\n            }\n            const componentDef = this.layout.components[id];\n            const type = componentDef.type;\n            const buttonIndex = componentDef.gamepadIndices.button;\n            // search for axes\n            const axes = [];\n            if (componentDef.gamepadIndices.xAxis !== undefined && componentDef.gamepadIndices.yAxis !== undefined) {\n                axes.push(componentDef.gamepadIndices.xAxis, componentDef.gamepadIndices.yAxis);\n            }\n            this.components[id] = new WebXRControllerComponent(id, type, buttonIndex, axes);\n        };\n        this._modelReady = false;\n        /**\n         * A map of components (WebXRControllerComponent) in this motion controller\n         * Components have a ComponentType and can also have both button and axis definitions\n         */\n        this.components = {};\n        /**\n         * Disable the model's animation. Can be set at any time.\n         */\n        this.disableAnimation = false;\n        /**\n         * Observers registered here will be triggered when the model of this controller is done loading\n         */\n        this.onModelLoadedObservable = new Observable();\n        // initialize the components\n        if (layout.components) {\n            Object.keys(layout.components).forEach(this._initComponent);\n        }\n        // Model is loaded in WebXRInput\n    }\n    /**\n     * Dispose this controller, the model mesh and all its components\n     */\n    dispose() {\n        this.getComponentIds().forEach((id) => this.getComponent(id).dispose());\n        if (this.rootMesh) {\n            this.rootMesh.getChildren(undefined, true).forEach((node) => {\n                node.setEnabled(false);\n            });\n            this.rootMesh.dispose(!!this._controllerCache, !this._controllerCache);\n        }\n    }\n    /**\n     * Returns all components of specific type\n     * @param type the type to search for\n     * @returns an array of components with this type\n     */\n    getAllComponentsOfType(type) {\n        return this.getComponentIds()\n            .map((id) => this.components[id])\n            .filter((component) => component.type === type);\n    }\n    /**\n     * get a component based an its component id as defined in layout.components\n     * @param id the id of the component\n     * @returns the component correlates to the id or undefined if not found\n     */\n    getComponent(id) {\n        return this.components[id];\n    }\n    /**\n     * Get the list of components available in this motion controller\n     * @returns an array of strings correlating to available components\n     */\n    getComponentIds() {\n        return Object.keys(this.components);\n    }\n    /**\n     * Get the first component of specific type\n     * @param type type of component to find\n     * @returns a controller component or null if not found\n     */\n    getComponentOfType(type) {\n        return this.getAllComponentsOfType(type)[0] || null;\n    }\n    /**\n     * Get the main (Select) component of this controller as defined in the layout\n     * @returns the main component of this controller\n     */\n    getMainComponent() {\n        return this.getComponent(this.layout.selectComponentId);\n    }\n    /**\n     * Loads the model correlating to this controller\n     * When the mesh is loaded, the onModelLoadedObservable will be triggered\n     * @returns A promise fulfilled with the result of the model loading\n     */\n    async loadModel() {\n        const useGeneric = !this._getModelLoadingConstraints();\n        let loadingParams = this._getGenericFilenameAndPath();\n        // Checking if GLB loader is present\n        if (useGeneric) {\n            Logger.Warn(\"Falling back to generic models\");\n        }\n        else {\n            loadingParams = this._getFilenameAndPath();\n        }\n        return new Promise((resolve, reject) => {\n            const meshesLoaded = (meshes) => {\n                if (useGeneric) {\n                    this._getGenericParentMesh(meshes);\n                }\n                else {\n                    this._setRootMesh(meshes);\n                }\n                this._processLoadedModel(meshes);\n                this._modelReady = true;\n                this.onModelLoadedObservable.notifyObservers(this);\n                resolve(true);\n            };\n            if (this._controllerCache) {\n                // look for it in the cache\n                const found = this._controllerCache.filter((c) => {\n                    return c.filename === loadingParams.filename && c.path === loadingParams.path;\n                });\n                if (found[0]) {\n                    found[0].meshes.forEach((mesh) => mesh.setEnabled(true));\n                    meshesLoaded(found[0].meshes);\n                    return;\n                    // found, don't continue to load\n                }\n            }\n            SceneLoader.ImportMesh(\"\", loadingParams.path, loadingParams.filename, this.scene, (meshes) => {\n                if (this._controllerCache) {\n                    this._controllerCache.push({\n                        ...loadingParams,\n                        meshes,\n                    });\n                }\n                meshesLoaded(meshes);\n            }, null, (_scene, message) => {\n                Logger.Log(message);\n                Logger.Warn(`Failed to retrieve controller model of type ${this.profileId} from the remote server: ${loadingParams.path}${loadingParams.filename}`);\n                reject(message);\n            });\n        });\n    }\n    /**\n     * Update this model using the current XRFrame\n     * @param xrFrame the current xr frame to use and update the model\n     */\n    updateFromXRFrame(xrFrame) {\n        this.getComponentIds().forEach((id) => this.getComponent(id).update(this.gamepadObject));\n        this.updateModel(xrFrame);\n    }\n    /**\n     * Backwards compatibility due to a deeply-integrated typo\n     */\n    get handness() {\n        return this.handedness;\n    }\n    /**\n     * Pulse (vibrate) this controller\n     * If the controller does not support pulses, this function will fail silently and return Promise<false> directly after called\n     * Consecutive calls to this function will cancel the last pulse call\n     *\n     * @param value the strength of the pulse in 0.0...1.0 range\n     * @param duration Duration of the pulse in milliseconds\n     * @param hapticActuatorIndex optional index of actuator (will usually be 0)\n     * @returns a promise that will send true when the pulse has ended and false if the device doesn't support pulse or an error accrued\n     */\n    pulse(value, duration, hapticActuatorIndex = 0) {\n        if (this.gamepadObject.hapticActuators && this.gamepadObject.hapticActuators[hapticActuatorIndex]) {\n            return this.gamepadObject.hapticActuators[hapticActuatorIndex].pulse(value, duration);\n        }\n        else {\n            return Promise.resolve(false);\n        }\n    }\n    // Look through all children recursively. This will return null if no mesh exists with the given name.\n    _getChildByName(node, name) {\n        return node.getChildren((n) => n.name === name, false)[0];\n    }\n    // Look through only immediate children. This will return null if no mesh exists with the given name.\n    _getImmediateChildByName(node, name) {\n        return node.getChildren((n) => n.name == name, true)[0];\n    }\n    /**\n     * Moves the axis on the controller mesh based on its current state\n     * @param axisMap\n     * @param axisValue the value of the axis which determines the meshes new position\n     * @internal\n     */\n    _lerpTransform(axisMap, axisValue, fixValueCoordinates) {\n        if (!axisMap.minMesh || !axisMap.maxMesh || !axisMap.valueMesh) {\n            return;\n        }\n        if (!axisMap.minMesh.rotationQuaternion || !axisMap.maxMesh.rotationQuaternion || !axisMap.valueMesh.rotationQuaternion) {\n            return;\n        }\n        // Convert from gamepad value range (-1 to +1) to lerp range (0 to 1)\n        const lerpValue = fixValueCoordinates ? axisValue * 0.5 + 0.5 : axisValue;\n        Quaternion.SlerpToRef(axisMap.minMesh.rotationQuaternion, axisMap.maxMesh.rotationQuaternion, lerpValue, axisMap.valueMesh.rotationQuaternion);\n        Vector3.LerpToRef(axisMap.minMesh.position, axisMap.maxMesh.position, lerpValue, axisMap.valueMesh.position);\n    }\n    /**\n     * Update the model itself with the current frame data\n     * @param xrFrame the frame to use for updating the model mesh\n     */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    updateModel(xrFrame) {\n        if (!this._modelReady) {\n            return;\n        }\n        this._updateModel(xrFrame);\n    }\n    _getGenericFilenameAndPath() {\n        return {\n            filename: \"generic.babylon\",\n            path: \"https://controllers.babylonjs.com/generic/\",\n        };\n    }\n    _getGenericParentMesh(meshes) {\n        this.rootMesh = new Mesh(this.profileId + \" \" + this.handedness, this.scene);\n        meshes.forEach((mesh) => {\n            if (!mesh.parent) {\n                mesh.isPickable = false;\n                mesh.setParent(this.rootMesh);\n            }\n        });\n        this.rootMesh.rotationQuaternion = Quaternion.FromEulerAngles(0, Math.PI, 0);\n    }\n}\n//# sourceMappingURL=webXRAbstractMotionController.js.map","import { Observable } from \"../../Misc/observable.js\";\n/**\n * This class represents a single component (for example button or thumbstick) of a motion controller\n */\nexport class WebXRControllerComponent {\n    /**\n     * Creates a new component for a motion controller.\n     * It is created by the motion controller itself\n     *\n     * @param id the id of this component\n     * @param type the type of the component\n     * @param _buttonIndex index in the buttons array of the gamepad\n     * @param _axesIndices indices of the values in the axes array of the gamepad\n     */\n    constructor(\n    /**\n     * the id of this component\n     */\n    id, \n    /**\n     * the type of the component\n     */\n    type, _buttonIndex = -1, _axesIndices = []) {\n        this.id = id;\n        this.type = type;\n        this._buttonIndex = _buttonIndex;\n        this._axesIndices = _axesIndices;\n        this._axes = {\n            x: 0,\n            y: 0,\n        };\n        this._changes = {};\n        this._currentValue = 0;\n        this._hasChanges = false;\n        this._pressed = false;\n        this._touched = false;\n        /**\n         * If axes are available for this component (like a touchpad or thumbstick) the observers will be notified when\n         * the axes data changes\n         */\n        this.onAxisValueChangedObservable = new Observable();\n        /**\n         * Observers registered here will be triggered when the state of a button changes\n         * State change is either pressed / touched / value\n         */\n        this.onButtonStateChangedObservable = new Observable();\n    }\n    /**\n     * The current axes data. If this component has no axes it will still return an object { x: 0, y: 0 }\n     */\n    get axes() {\n        return this._axes;\n    }\n    /**\n     * Get the changes. Elements will be populated only if they changed with their previous and current value\n     */\n    get changes() {\n        return this._changes;\n    }\n    /**\n     * Return whether or not the component changed the last frame\n     */\n    get hasChanges() {\n        return this._hasChanges;\n    }\n    /**\n     * is the button currently pressed\n     */\n    get pressed() {\n        return this._pressed;\n    }\n    /**\n     * is the button currently touched\n     */\n    get touched() {\n        return this._touched;\n    }\n    /**\n     * Get the current value of this component\n     */\n    get value() {\n        return this._currentValue;\n    }\n    /**\n     * Dispose this component\n     */\n    dispose() {\n        this.onAxisValueChangedObservable.clear();\n        this.onButtonStateChangedObservable.clear();\n    }\n    /**\n     * Are there axes correlating to this component\n     * @returns true is axes data is available\n     */\n    isAxes() {\n        return this._axesIndices.length !== 0;\n    }\n    /**\n     * Is this component a button (hence - pressable)\n     * @returns true if can be pressed\n     */\n    isButton() {\n        return this._buttonIndex !== -1;\n    }\n    /**\n     * update this component using the gamepad object it is in. Called on every frame\n     * @param nativeController the native gamepad controller object\n     */\n    update(nativeController) {\n        let buttonUpdated = false;\n        let axesUpdate = false;\n        this._hasChanges = false;\n        this._changes = {};\n        if (this.isButton()) {\n            const button = nativeController.buttons[this._buttonIndex];\n            // defensive, in case a profile was forced\n            if (!button) {\n                return;\n            }\n            if (this._currentValue !== button.value) {\n                this.changes.value = {\n                    current: button.value,\n                    previous: this._currentValue,\n                };\n                buttonUpdated = true;\n                this._currentValue = button.value;\n            }\n            if (this._touched !== button.touched) {\n                this.changes.touched = {\n                    current: button.touched,\n                    previous: this._touched,\n                };\n                buttonUpdated = true;\n                this._touched = button.touched;\n            }\n            if (this._pressed !== button.pressed) {\n                this.changes.pressed = {\n                    current: button.pressed,\n                    previous: this._pressed,\n                };\n                buttonUpdated = true;\n                this._pressed = button.pressed;\n            }\n        }\n        if (this.isAxes()) {\n            if (this._axes.x !== nativeController.axes[this._axesIndices[0]]) {\n                this.changes.axes = {\n                    current: {\n                        x: nativeController.axes[this._axesIndices[0]],\n                        y: this._axes.y,\n                    },\n                    previous: {\n                        x: this._axes.x,\n                        y: this._axes.y,\n                    },\n                };\n                this._axes.x = nativeController.axes[this._axesIndices[0]];\n                axesUpdate = true;\n            }\n            if (this._axes.y !== nativeController.axes[this._axesIndices[1]]) {\n                if (this.changes.axes) {\n                    this.changes.axes.current.y = nativeController.axes[this._axesIndices[1]];\n                }\n                else {\n                    this.changes.axes = {\n                        current: {\n                            x: this._axes.x,\n                            y: nativeController.axes[this._axesIndices[1]],\n                        },\n                        previous: {\n                            x: this._axes.x,\n                            y: this._axes.y,\n                        },\n                    };\n                }\n                this._axes.y = nativeController.axes[this._axesIndices[1]];\n                axesUpdate = true;\n            }\n        }\n        if (buttonUpdated) {\n            this._hasChanges = true;\n            this.onButtonStateChangedObservable.notifyObservers(this);\n        }\n        if (axesUpdate) {\n            this._hasChanges = true;\n            this.onAxisValueChangedObservable.notifyObservers(this._axes);\n        }\n    }\n}\n/**\n * button component type\n */\nWebXRControllerComponent.BUTTON_TYPE = \"button\";\n/**\n * squeeze component type\n */\nWebXRControllerComponent.SQUEEZE_TYPE = \"squeeze\";\n/**\n * Thumbstick component type\n */\nWebXRControllerComponent.THUMBSTICK_TYPE = \"thumbstick\";\n/**\n * Touchpad component type\n */\nWebXRControllerComponent.TOUCHPAD_TYPE = \"touchpad\";\n/**\n * trigger component type\n */\nWebXRControllerComponent.TRIGGER_TYPE = \"trigger\";\n//# sourceMappingURL=webXRControllerComponent.js.map","import { WebXRAbstractMotionController } from \"./webXRAbstractMotionController.js\";\nimport { Mesh } from \"../../Meshes/mesh.js\";\nimport { Quaternion } from \"../../Maths/math.vector.js\";\n/**\n * A generic trigger-only motion controller for WebXR\n */\nexport class WebXRGenericTriggerMotionController extends WebXRAbstractMotionController {\n    constructor(scene, gamepadObject, handedness) {\n        super(scene, GenericTriggerLayout[handedness], gamepadObject, handedness);\n        this.profileId = WebXRGenericTriggerMotionController.ProfileId;\n    }\n    _getFilenameAndPath() {\n        return {\n            filename: \"generic.babylon\",\n            path: \"https://controllers.babylonjs.com/generic/\",\n        };\n    }\n    _getModelLoadingConstraints() {\n        return true;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _processLoadedModel(meshes) {\n        // nothing to do\n    }\n    _setRootMesh(meshes) {\n        this.rootMesh = new Mesh(this.profileId + \" \" + this.handedness, this.scene);\n        meshes.forEach((mesh) => {\n            mesh.isPickable = false;\n            if (!mesh.parent) {\n                mesh.setParent(this.rootMesh);\n            }\n        });\n        this.rootMesh.rotationQuaternion = Quaternion.FromEulerAngles(0, Math.PI, 0);\n    }\n    _updateModel() {\n        // no-op\n    }\n}\n/**\n * Static version of the profile id of this controller\n */\nWebXRGenericTriggerMotionController.ProfileId = \"generic-trigger\";\n// https://github.com/immersive-web/webxr-input-profiles/blob/master/packages/registry/profiles/generic/generic-trigger-touchpad-thumbstick.json\nconst GenericTriggerLayout = {\n    left: {\n        selectComponentId: \"xr-standard-trigger\",\n        components: {\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            \"xr-standard-trigger\": {\n                type: \"trigger\",\n                gamepadIndices: {\n                    button: 0,\n                },\n                rootNodeName: \"xr_standard_trigger\",\n                visualResponses: {},\n            },\n        },\n        gamepadMapping: \"xr-standard\",\n        rootNodeName: \"generic-trigger-left\",\n        assetPath: \"left.glb\",\n    },\n    right: {\n        selectComponentId: \"xr-standard-trigger\",\n        components: {\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            \"xr-standard-trigger\": {\n                type: \"trigger\",\n                gamepadIndices: {\n                    button: 0,\n                },\n                rootNodeName: \"xr_standard_trigger\",\n                visualResponses: {},\n            },\n        },\n        gamepadMapping: \"xr-standard\",\n        rootNodeName: \"generic-trigger-right\",\n        assetPath: \"right.glb\",\n    },\n    none: {\n        selectComponentId: \"xr-standard-trigger\",\n        components: {\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            \"xr-standard-trigger\": {\n                type: \"trigger\",\n                gamepadIndices: {\n                    button: 0,\n                },\n                rootNodeName: \"xr_standard_trigger\",\n                visualResponses: {},\n            },\n        },\n        gamepadMapping: \"xr-standard\",\n        rootNodeName: \"generic-trigger-none\",\n        assetPath: \"none.glb\",\n    },\n};\n//# sourceMappingURL=webXRGenericMotionController.js.map","import { WebXRGenericTriggerMotionController } from \"./webXRGenericMotionController.js\";\nimport { Tools } from \"../../Misc/tools.js\";\nimport { WebXRProfiledMotionController } from \"./webXRProfiledMotionController.js\";\n/**\n * The MotionController Manager manages all registered motion controllers and loads the right one when needed.\n *\n * When this repository is complete: https://github.com/immersive-web/webxr-input-profiles/tree/master/packages/assets\n * it should be replaced with auto-loaded controllers.\n *\n * When using a model try to stay as generic as possible. Eventually there will be no need in any of the controller classes\n */\nconst controllerCache = [];\n/**\n * Motion controller manager is managing the different webxr profiles and makes sure the right\n * controller is being loaded.\n */\nexport class WebXRMotionControllerManager {\n    /**\n     * Clear the cache used for profile loading and reload when requested again\n     */\n    static ClearProfilesCache() {\n        this._ProfilesList = null;\n        this._ProfileLoadingPromises = {};\n    }\n    /**\n     * Register the default fallbacks.\n     * This function is called automatically when this file is imported.\n     */\n    static DefaultFallbacks() {\n        this.RegisterFallbacksForProfileId(\"google-daydream\", [\"generic-touchpad\"]);\n        this.RegisterFallbacksForProfileId(\"htc-vive-focus\", [\"generic-trigger-touchpad\"]);\n        this.RegisterFallbacksForProfileId(\"htc-vive\", [\"generic-trigger-squeeze-touchpad\"]);\n        this.RegisterFallbacksForProfileId(\"magicleap-one\", [\"generic-trigger-squeeze-touchpad\"]);\n        this.RegisterFallbacksForProfileId(\"windows-mixed-reality\", [\"generic-trigger-squeeze-touchpad-thumbstick\"]);\n        this.RegisterFallbacksForProfileId(\"microsoft-mixed-reality\", [\"windows-mixed-reality\", \"generic-trigger-squeeze-touchpad-thumbstick\"]);\n        this.RegisterFallbacksForProfileId(\"oculus-go\", [\"generic-trigger-touchpad\"]);\n        this.RegisterFallbacksForProfileId(\"oculus-touch-v2\", [\"oculus-touch\", \"generic-trigger-squeeze-thumbstick\"]);\n        this.RegisterFallbacksForProfileId(\"oculus-touch\", [\"generic-trigger-squeeze-thumbstick\"]);\n        this.RegisterFallbacksForProfileId(\"samsung-gearvr\", [\"windows-mixed-reality\", \"generic-trigger-squeeze-touchpad-thumbstick\"]);\n        this.RegisterFallbacksForProfileId(\"samsung-odyssey\", [\"generic-touchpad\"]);\n        this.RegisterFallbacksForProfileId(\"valve-index\", [\"generic-trigger-squeeze-touchpad-thumbstick\"]);\n        this.RegisterFallbacksForProfileId(\"generic-hand-select\", [\"generic-trigger\"]);\n    }\n    /**\n     * Find a fallback profile if the profile was not found. There are a few predefined generic profiles.\n     * @param profileId the profile to which a fallback needs to be found\n     * @returns an array with corresponding fallback profiles\n     */\n    static FindFallbackWithProfileId(profileId) {\n        const returnArray = this._Fallbacks[profileId] || [];\n        returnArray.unshift(profileId);\n        return returnArray;\n    }\n    /**\n     * When acquiring a new xrInput object (usually by the WebXRInput class), match it with the correct profile.\n     * The order of search:\n     *\n     * 1) Iterate the profiles array of the xr input and try finding a corresponding motion controller\n     * 2) (If not found) search in the gamepad id and try using it (legacy versions only)\n     * 3) search for registered fallbacks (should be redundant, nonetheless it makes sense to check)\n     * 4) return the generic trigger controller if none were found\n     *\n     * @param xrInput the xrInput to which a new controller is initialized\n     * @param scene the scene to which the model will be added\n     * @param forceProfile force a certain profile for this controller\n     * @returns A promise that fulfils with the motion controller class for this profile id or the generic standard class if none was found\n     */\n    static GetMotionControllerWithXRInput(xrInput, scene, forceProfile) {\n        const profileArray = [];\n        if (forceProfile) {\n            profileArray.push(forceProfile);\n        }\n        profileArray.push(...(xrInput.profiles || []));\n        // emulator support\n        if (profileArray.length && !profileArray[0]) {\n            // remove the first \"undefined\" that the emulator is adding\n            profileArray.pop();\n        }\n        // legacy support - try using the gamepad id\n        if (xrInput.gamepad && xrInput.gamepad.id) {\n            switch (xrInput.gamepad.id) {\n                case xrInput.gamepad.id.match(/oculus touch/gi) ? xrInput.gamepad.id : undefined:\n                    // oculus in gamepad id\n                    profileArray.push(\"oculus-touch-v2\");\n                    break;\n            }\n        }\n        // make sure microsoft/windows mixed reality works correctly\n        const windowsMRIdx = profileArray.indexOf(\"windows-mixed-reality\");\n        if (windowsMRIdx !== -1) {\n            profileArray.splice(windowsMRIdx, 0, \"microsoft-mixed-reality\");\n        }\n        if (!profileArray.length) {\n            profileArray.push(\"generic-trigger\");\n        }\n        if (this.UseOnlineRepository) {\n            const firstFunction = this.PrioritizeOnlineRepository ? this._LoadProfileFromRepository : this._LoadProfilesFromAvailableControllers;\n            const secondFunction = this.PrioritizeOnlineRepository ? this._LoadProfilesFromAvailableControllers : this._LoadProfileFromRepository;\n            return firstFunction.call(this, profileArray, xrInput, scene).catch(() => {\n                return secondFunction.call(this, profileArray, xrInput, scene);\n            });\n        }\n        else {\n            // use only available functions\n            return this._LoadProfilesFromAvailableControllers(profileArray, xrInput, scene);\n        }\n    }\n    /**\n     * Register a new controller based on its profile. This function will be called by the controller classes themselves.\n     *\n     * If you are missing a profile, make sure it is imported in your source, otherwise it will not register.\n     *\n     * @param type the profile type to register\n     * @param constructFunction the function to be called when loading this profile\n     */\n    static RegisterController(type, constructFunction) {\n        this._AvailableControllers[type] = constructFunction;\n    }\n    /**\n     * Register a fallback to a specific profile.\n     * @param profileId the profileId that will receive the fallbacks\n     * @param fallbacks A list of fallback profiles\n     */\n    static RegisterFallbacksForProfileId(profileId, fallbacks) {\n        if (this._Fallbacks[profileId]) {\n            this._Fallbacks[profileId].push(...fallbacks);\n        }\n        else {\n            this._Fallbacks[profileId] = fallbacks;\n        }\n    }\n    /**\n     * Will update the list of profiles available in the repository\n     * @returns a promise that resolves to a map of profiles available online\n     */\n    static UpdateProfilesList() {\n        this._ProfilesList = Tools.LoadFileAsync(this.BaseRepositoryUrl + \"/profiles/profilesList.json\", false).then((data) => {\n            return JSON.parse(data.toString());\n        });\n        return this._ProfilesList;\n    }\n    /**\n     * Clear the controller's cache (usually happens at the end of a session)\n     */\n    static ClearControllerCache() {\n        controllerCache.forEach((cacheItem) => {\n            cacheItem.meshes.forEach((mesh) => {\n                mesh.dispose(false, true);\n            });\n        });\n        controllerCache.length = 0;\n    }\n    static _LoadProfileFromRepository(profileArray, xrInput, scene) {\n        return Promise.resolve()\n            .then(() => {\n            if (!this._ProfilesList) {\n                return this.UpdateProfilesList();\n            }\n            else {\n                return this._ProfilesList;\n            }\n        })\n            .then((profilesList) => {\n            // load the right profile\n            for (let i = 0; i < profileArray.length; ++i) {\n                // defensive\n                if (!profileArray[i]) {\n                    continue;\n                }\n                if (profilesList[profileArray[i]]) {\n                    return profileArray[i];\n                }\n            }\n            throw new Error(`neither controller ${profileArray[0]} nor all fallbacks were found in the repository,`);\n        })\n            .then((profileToLoad) => {\n            // load the profile\n            if (!this._ProfileLoadingPromises[profileToLoad]) {\n                this._ProfileLoadingPromises[profileToLoad] = Tools.LoadFileAsync(`${this.BaseRepositoryUrl}/profiles/${profileToLoad}/profile.json`, false).then((data) => JSON.parse(data));\n            }\n            return this._ProfileLoadingPromises[profileToLoad];\n        })\n            .then((profile) => {\n            return new WebXRProfiledMotionController(scene, xrInput, profile, this.BaseRepositoryUrl, this.DisableControllerCache ? undefined : controllerCache);\n        });\n    }\n    static _LoadProfilesFromAvailableControllers(profileArray, xrInput, scene) {\n        // check fallbacks\n        for (let i = 0; i < profileArray.length; ++i) {\n            // defensive\n            if (!profileArray[i]) {\n                continue;\n            }\n            const fallbacks = this.FindFallbackWithProfileId(profileArray[i]);\n            for (let j = 0; j < fallbacks.length; ++j) {\n                const constructionFunction = this._AvailableControllers[fallbacks[j]];\n                if (constructionFunction) {\n                    return Promise.resolve(constructionFunction(xrInput, scene));\n                }\n            }\n        }\n        throw new Error(`no controller requested was found in the available controllers list`);\n    }\n}\nWebXRMotionControllerManager._AvailableControllers = {};\nWebXRMotionControllerManager._Fallbacks = {};\n// cache for loading\nWebXRMotionControllerManager._ProfileLoadingPromises = {};\n/**\n * The base URL of the online controller repository. Can be changed at any time.\n */\nWebXRMotionControllerManager.BaseRepositoryUrl = \"https://immersive-web.github.io/webxr-input-profiles/packages/viewer/dist\";\n/**\n * Which repository gets priority - local or online\n */\nWebXRMotionControllerManager.PrioritizeOnlineRepository = true;\n/**\n * Use the online repository, or use only locally-defined controllers\n */\nWebXRMotionControllerManager.UseOnlineRepository = true;\n/**\n * Disable the controller cache and load the models each time a new WebXRProfileMotionController is loaded.\n * Defaults to true.\n */\nWebXRMotionControllerManager.DisableControllerCache = true;\n// register the generic profile(s) here so we will at least have them\nWebXRMotionControllerManager.RegisterController(WebXRGenericTriggerMotionController.ProfileId, (xrInput, scene) => {\n    return new WebXRGenericTriggerMotionController(scene, xrInput.gamepad, xrInput.handedness);\n});\n// register fallbacks\nWebXRMotionControllerManager.DefaultFallbacks();\n//# sourceMappingURL=webXRMotionControllerManager.js.map","import { WebXRAbstractMotionController } from \"./webXRAbstractMotionController.js\";\nimport { SceneLoader } from \"../../Loading/sceneLoader.js\";\nimport { Mesh } from \"../../Meshes/mesh.js\";\nimport { Axis, Space } from \"../../Maths/math.axis.js\";\nimport { Color3 } from \"../../Maths/math.color.js\";\nimport { WebXRControllerComponent } from \"./webXRControllerComponent.js\";\nimport { CreateSphere } from \"../../Meshes/Builders/sphereBuilder.js\";\nimport { StandardMaterial } from \"../../Materials/standardMaterial.js\";\nimport { Logger } from \"../../Misc/logger.js\";\n/**\n * A profiled motion controller has its profile loaded from an online repository.\n * The class is responsible of loading the model, mapping the keys and enabling model-animations\n */\nexport class WebXRProfiledMotionController extends WebXRAbstractMotionController {\n    constructor(scene, xrInput, _profile, _repositoryUrl, \n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    controllerCache) {\n        super(scene, _profile.layouts[xrInput.handedness || \"none\"], xrInput.gamepad, xrInput.handedness, undefined, controllerCache);\n        this._repositoryUrl = _repositoryUrl;\n        this.controllerCache = controllerCache;\n        this._buttonMeshMapping = {};\n        this._touchDots = {};\n        this.profileId = _profile.profileId;\n    }\n    dispose() {\n        super.dispose();\n        if (!this.controllerCache) {\n            Object.keys(this._touchDots).forEach((visResKey) => {\n                this._touchDots[visResKey].dispose();\n            });\n        }\n    }\n    _getFilenameAndPath() {\n        return {\n            filename: this.layout.assetPath,\n            path: `${this._repositoryUrl}/profiles/${this.profileId}/`,\n        };\n    }\n    _getModelLoadingConstraints() {\n        const glbLoaded = SceneLoader.IsPluginForExtensionAvailable(\".glb\");\n        if (!glbLoaded) {\n            Logger.Warn(\"glTF / glb loader was not registered, using generic controller instead\");\n        }\n        return glbLoaded;\n    }\n    _processLoadedModel(_meshes) {\n        this.getComponentIds().forEach((type) => {\n            const componentInLayout = this.layout.components[type];\n            this._buttonMeshMapping[type] = {\n                mainMesh: this._getChildByName(this.rootMesh, componentInLayout.rootNodeName),\n                states: {},\n            };\n            Object.keys(componentInLayout.visualResponses).forEach((visualResponseKey) => {\n                const visResponse = componentInLayout.visualResponses[visualResponseKey];\n                if (visResponse.valueNodeProperty === \"transform\") {\n                    this._buttonMeshMapping[type].states[visualResponseKey] = {\n                        valueMesh: this._getChildByName(this.rootMesh, visResponse.valueNodeName),\n                        minMesh: this._getChildByName(this.rootMesh, visResponse.minNodeName),\n                        maxMesh: this._getChildByName(this.rootMesh, visResponse.maxNodeName),\n                    };\n                }\n                else {\n                    // visibility, usually for touchpads\n                    const nameOfMesh = componentInLayout.type === WebXRControllerComponent.TOUCHPAD_TYPE && componentInLayout.touchPointNodeName\n                        ? componentInLayout.touchPointNodeName\n                        : visResponse.valueNodeName;\n                    this._buttonMeshMapping[type].states[visualResponseKey] = {\n                        valueMesh: this._getChildByName(this.rootMesh, nameOfMesh),\n                    };\n                    if (componentInLayout.type === WebXRControllerComponent.TOUCHPAD_TYPE && !this._touchDots[visualResponseKey]) {\n                        const dot = CreateSphere(visualResponseKey + \"dot\", {\n                            diameter: 0.0015,\n                            segments: 8,\n                        }, this.scene);\n                        dot.material = new StandardMaterial(visualResponseKey + \"mat\", this.scene);\n                        dot.material.diffuseColor = Color3.Red();\n                        dot.parent = this._buttonMeshMapping[type].states[visualResponseKey].valueMesh || null;\n                        dot.isVisible = false;\n                        this._touchDots[visualResponseKey] = dot;\n                    }\n                }\n            });\n        });\n    }\n    _setRootMesh(meshes) {\n        this.rootMesh = new Mesh(this.profileId + \"-\" + this.handedness, this.scene);\n        this.rootMesh.isPickable = false;\n        let rootMesh;\n        // Find the root node in the loaded glTF scene, and attach it as a child of 'parentMesh'\n        for (let i = 0; i < meshes.length; i++) {\n            const mesh = meshes[i];\n            mesh.isPickable = false;\n            if (!mesh.parent) {\n                // Handle root node, attach to the new parentMesh\n                rootMesh = mesh;\n            }\n        }\n        if (rootMesh) {\n            rootMesh.setParent(this.rootMesh);\n        }\n        if (!this.scene.useRightHandedSystem) {\n            this.rootMesh.rotate(Axis.Y, Math.PI, Space.WORLD);\n        }\n    }\n    _updateModel(_xrFrame) {\n        if (this.disableAnimation) {\n            return;\n        }\n        this.getComponentIds().forEach((id) => {\n            const component = this.getComponent(id);\n            if (!component.hasChanges) {\n                return;\n            }\n            const meshes = this._buttonMeshMapping[id];\n            const componentInLayout = this.layout.components[id];\n            Object.keys(componentInLayout.visualResponses).forEach((visualResponseKey) => {\n                const visResponse = componentInLayout.visualResponses[visualResponseKey];\n                let value = component.value;\n                if (visResponse.componentProperty === \"xAxis\") {\n                    value = component.axes.x;\n                }\n                else if (visResponse.componentProperty === \"yAxis\") {\n                    value = component.axes.y;\n                }\n                if (visResponse.valueNodeProperty === \"transform\") {\n                    this._lerpTransform(meshes.states[visualResponseKey], value, visResponse.componentProperty !== \"button\");\n                }\n                else {\n                    // visibility\n                    const valueMesh = meshes.states[visualResponseKey].valueMesh;\n                    if (valueMesh) {\n                        valueMesh.isVisible = component.touched || component.pressed;\n                    }\n                    if (this._touchDots[visualResponseKey]) {\n                        this._touchDots[visualResponseKey].isVisible = component.touched || component.pressed;\n                    }\n                }\n            });\n        });\n    }\n}\n//# sourceMappingURL=webXRProfiledMotionController.js.map","import { RegisterNativeTypeAsync } from \"../../Engines/nativeEngine.js\";\n/** @internal */\nexport class NativeXRFrame {\n    get session() {\n        return this._nativeImpl.session;\n    }\n    constructor(_nativeImpl) {\n        this._nativeImpl = _nativeImpl;\n        this._xrTransform = new XRRigidTransform();\n        this._xrPose = {\n            transform: this._xrTransform,\n            emulatedPosition: false,\n        };\n        // Enough space for position, orientation\n        this._xrPoseVectorData = new Float32Array(4 + 4);\n        this.fillPoses = this._nativeImpl.fillPoses.bind(this._nativeImpl);\n        this.getViewerPose = this._nativeImpl.getViewerPose.bind(this._nativeImpl);\n        this.getHitTestResults = this._nativeImpl.getHitTestResults.bind(this._nativeImpl);\n        this.getHitTestResultsForTransientInput = () => {\n            throw new Error(\"XRFrame.getHitTestResultsForTransientInput not supported on native.\");\n        };\n        this.createAnchor = this._nativeImpl.createAnchor.bind(this._nativeImpl);\n        this.getJointPose = this._nativeImpl.getJointPose.bind(this._nativeImpl);\n        this.fillJointRadii = this._nativeImpl.fillJointRadii.bind(this._nativeImpl);\n        this.getLightEstimate = () => {\n            throw new Error(\"XRFrame.getLightEstimate not supported on native.\");\n        };\n        this.getImageTrackingResults = () => {\n            var _a;\n            return (_a = this._nativeImpl._imageTrackingResults) !== null && _a !== void 0 ? _a : [];\n        };\n    }\n    getPose(space, baseSpace) {\n        if (!this._nativeImpl.getPoseData(space, baseSpace, this._xrPoseVectorData.buffer, this._xrTransform.matrix.buffer)) {\n            return undefined;\n        }\n        const position = this._xrTransform.position;\n        position.x = this._xrPoseVectorData[0];\n        position.y = this._xrPoseVectorData[1];\n        position.z = this._xrPoseVectorData[2];\n        position.w = this._xrPoseVectorData[3];\n        const orientation = this._xrTransform.orientation;\n        orientation.x = this._xrPoseVectorData[4];\n        orientation.y = this._xrPoseVectorData[5];\n        orientation.z = this._xrPoseVectorData[6];\n        orientation.w = this._xrPoseVectorData[7];\n        return this._xrPose;\n    }\n    get trackedAnchors() {\n        return this._nativeImpl.trackedAnchors;\n    }\n    get worldInformation() {\n        return this._nativeImpl.worldInformation;\n    }\n    get detectedPlanes() {\n        return this._nativeImpl.detectedPlanes;\n    }\n    get featurePointCloud() {\n        return this._nativeImpl.featurePointCloud;\n    }\n}\nRegisterNativeTypeAsync(\"NativeXRFrame\", NativeXRFrame);\n//# sourceMappingURL=nativeXRFrame.js.map","import { WebXRLayerWrapper } from \"../webXRLayerWrapper.js\";\nimport { WebXRLayerRenderTargetTextureProvider } from \"../webXRRenderTargetTextureProvider.js\";\n/**\n * Wraps XRWebGLLayer's created by Babylon Native.\n * @internal\n */\nexport class NativeXRLayerWrapper extends WebXRLayerWrapper {\n    constructor(layer) {\n        super(() => layer.framebufferWidth, () => layer.framebufferHeight, layer, \"XRWebGLLayer\", (sessionManager) => new NativeXRLayerRenderTargetTextureProvider(sessionManager, this));\n        this.layer = layer;\n    }\n}\n/**\n * Provides render target textures for layers created by Babylon Native.\n * @internal\n */\nexport class NativeXRLayerRenderTargetTextureProvider extends WebXRLayerRenderTargetTextureProvider {\n    constructor(sessionManager, layerWrapper) {\n        super(sessionManager.scene, layerWrapper);\n        this.layerWrapper = layerWrapper;\n        this._nativeRTTProvider = navigator.xr.getNativeRenderTargetProvider(sessionManager.session, this._createRenderTargetTexture.bind(this), this._destroyRenderTargetTexture.bind(this));\n        this._nativeLayer = layerWrapper.layer;\n    }\n    trySetViewportForView(viewport) {\n        viewport.x = 0;\n        viewport.y = 0;\n        viewport.width = 1;\n        viewport.height = 1;\n        return true;\n    }\n    getRenderTargetTextureForEye(eye) {\n        // TODO (rgerd): Update the contract on the BabylonNative side to call this \"getRenderTargetTextureForEye\"\n        return this._nativeRTTProvider.getRenderTargetForEye(eye);\n    }\n    getRenderTargetTextureForView(view) {\n        return this._nativeRTTProvider.getRenderTargetForEye(view.eye);\n    }\n    getFramebufferDimensions() {\n        return {\n            framebufferWidth: this._nativeLayer.framebufferWidth,\n            framebufferHeight: this._nativeLayer.framebufferHeight,\n        };\n    }\n}\n/**\n * Creates the xr layer that will be used as the xr session's base layer.\n * @internal\n */\nexport class NativeXRRenderTarget {\n    constructor(_xrSessionManager) {\n        this._nativeRenderTarget = navigator.xr.getWebXRRenderTarget(_xrSessionManager.scene.getEngine());\n    }\n    async initializeXRLayerAsync(xrSession) {\n        await this._nativeRenderTarget.initializeXRLayerAsync(xrSession);\n        this.xrLayer = this._nativeRenderTarget.xrLayer;\n        return this.xrLayer;\n    }\n    dispose() {\n        /* empty */\n    }\n}\n//# sourceMappingURL=nativeXRRenderTarget.js.map","import { Vector3, Matrix, Quaternion, TmpVectors } from \"../Maths/math.vector.js\";\nimport { Camera } from \"../Cameras/camera.js\";\nimport { FreeCamera } from \"../Cameras/freeCamera.js\";\nimport { TargetCamera } from \"../Cameras/targetCamera.js\";\nimport { Viewport } from \"../Maths/math.viewport.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { WebXRTrackingState } from \"./webXRTypes.js\";\n/**\n * WebXR Camera which holds the views for the xrSession\n * @see https://doc.babylonjs.com/features/featuresDeepDive/webXR/webXRCamera\n */\nexport class WebXRCamera extends FreeCamera {\n    /**\n     * Creates a new webXRCamera, this should only be set at the camera after it has been updated by the xrSessionManager\n     * @param name the name of the camera\n     * @param scene the scene to add the camera to\n     * @param _xrSessionManager a constructed xr session manager\n     */\n    constructor(name, scene, _xrSessionManager) {\n        super(name, Vector3.Zero(), scene);\n        this._xrSessionManager = _xrSessionManager;\n        this._firstFrame = false;\n        this._referenceQuaternion = Quaternion.Identity();\n        this._referencedPosition = new Vector3();\n        this._trackingState = WebXRTrackingState.NOT_TRACKING;\n        /**\n         * Observable raised before camera teleportation\n         */\n        this.onBeforeCameraTeleport = new Observable();\n        /**\n         *  Observable raised after camera teleportation\n         */\n        this.onAfterCameraTeleport = new Observable();\n        /**\n         * Notifies when the camera's tracking state has changed.\n         * Notice - will also be triggered when tracking has started (at the beginning of the session)\n         */\n        this.onTrackingStateChanged = new Observable();\n        /**\n         * Should position compensation execute on first frame.\n         * This is used when copying the position from a native (non XR) camera\n         */\n        this.compensateOnFirstFrame = true;\n        // Initial camera configuration\n        this.minZ = 0.1;\n        this.rotationQuaternion = new Quaternion();\n        this.cameraRigMode = Camera.RIG_MODE_CUSTOM;\n        this.updateUpVectorFromRotation = true;\n        this._updateNumberOfRigCameras(1);\n        // freeze projection matrix, which will be copied later\n        this.freezeProjectionMatrix();\n        this._xrSessionManager.onXRSessionInit.add(() => {\n            this._referencedPosition.copyFromFloats(0, 0, 0);\n            this._referenceQuaternion.copyFromFloats(0, 0, 0, 1);\n            // first frame - camera's y position should be 0 for the correct offset\n            this._firstFrame = this.compensateOnFirstFrame;\n        });\n        // Check transformation changes on each frame. Callback is added to be first so that the transformation will be\n        // applied to the rest of the elements using the referenceSpace object\n        this._xrSessionManager.onXRFrameObservable.add(() => {\n            if (this._firstFrame) {\n                this._updateFromXRSession();\n            }\n            this._updateReferenceSpace();\n            this._updateFromXRSession();\n        }, undefined, true);\n    }\n    /**\n     * Get the current XR tracking state of the camera\n     */\n    get trackingState() {\n        return this._trackingState;\n    }\n    _setTrackingState(newState) {\n        if (this._trackingState !== newState) {\n            this._trackingState = newState;\n            this.onTrackingStateChanged.notifyObservers(newState);\n        }\n    }\n    /**\n     * Return the user's height, unrelated to the current ground.\n     * This will be the y position of this camera, when ground level is 0.\n     */\n    get realWorldHeight() {\n        const basePose = this._xrSessionManager.currentFrame && this._xrSessionManager.currentFrame.getViewerPose(this._xrSessionManager.baseReferenceSpace);\n        if (basePose && basePose.transform) {\n            return basePose.transform.position.y;\n        }\n        else {\n            return 0;\n        }\n    }\n    /** @internal */\n    _updateForDualEyeDebugging( /*pupilDistance = 0.01*/) {\n        // Create initial camera rigs\n        this._updateNumberOfRigCameras(2);\n        this.rigCameras[0].viewport = new Viewport(0, 0, 0.5, 1.0);\n        // this.rigCameras[0].position.x = -pupilDistance / 2;\n        this.rigCameras[0].outputRenderTarget = null;\n        this.rigCameras[1].viewport = new Viewport(0.5, 0, 0.5, 1.0);\n        // this.rigCameras[1].position.x = pupilDistance / 2;\n        this.rigCameras[1].outputRenderTarget = null;\n    }\n    /**\n     * Sets this camera's transformation based on a non-vr camera\n     * @param otherCamera the non-vr camera to copy the transformation from\n     * @param resetToBaseReferenceSpace should XR reset to the base reference space\n     */\n    setTransformationFromNonVRCamera(otherCamera = this.getScene().activeCamera, resetToBaseReferenceSpace = true) {\n        if (!otherCamera || otherCamera === this) {\n            return;\n        }\n        const mat = otherCamera.computeWorldMatrix();\n        mat.decompose(undefined, this.rotationQuaternion, this.position);\n        // set the ground level\n        this.position.y = 0;\n        Quaternion.FromEulerAnglesToRef(0, this.rotationQuaternion.toEulerAngles().y, 0, this.rotationQuaternion);\n        this._firstFrame = true;\n        if (resetToBaseReferenceSpace) {\n            this._xrSessionManager.resetReferenceSpace();\n        }\n    }\n    /**\n     * Gets the current instance class name (\"WebXRCamera\").\n     * @returns the class name\n     */\n    getClassName() {\n        return \"WebXRCamera\";\n    }\n    /**\n     * Set the target for the camera to look at.\n     * Note that this only rotates around the Y axis, as opposed to the default behavior of other cameras\n     * @param target the target to set the camera to look at\n     */\n    setTarget(target) {\n        // only rotate around the y axis!\n        const tmpVector = TmpVectors.Vector3[1];\n        target.subtractToRef(this.position, tmpVector);\n        tmpVector.y = 0;\n        tmpVector.normalize();\n        const yRotation = Math.atan2(tmpVector.x, tmpVector.z);\n        this.rotationQuaternion.toEulerAnglesToRef(tmpVector);\n        Quaternion.FromEulerAnglesToRef(tmpVector.x, yRotation, tmpVector.z, this.rotationQuaternion);\n    }\n    dispose() {\n        super.dispose();\n        this._lastXRViewerPose = undefined;\n    }\n    _updateFromXRSession() {\n        const pose = this._xrSessionManager.currentFrame && this._xrSessionManager.currentFrame.getViewerPose(this._xrSessionManager.referenceSpace);\n        this._lastXRViewerPose = pose || undefined;\n        if (!pose) {\n            this._setTrackingState(WebXRTrackingState.NOT_TRACKING);\n            return;\n        }\n        // Set the tracking state. if it didn't change it is a no-op\n        const trackingState = pose.emulatedPosition ? WebXRTrackingState.TRACKING_LOST : WebXRTrackingState.TRACKING;\n        this._setTrackingState(trackingState);\n        // check min/max Z and update if not the same as in cache\n        if (this.minZ !== this._cache.minZ || this.maxZ !== this._cache.maxZ) {\n            const xrRenderState = {\n                // if maxZ is 0 it should be \"Infinity\", but it doesn't work with the WebXR API. Setting to a large number.\n                depthFar: this.maxZ || 10000,\n                depthNear: this.minZ,\n            };\n            this._xrSessionManager.updateRenderState(xrRenderState);\n            this._cache.minZ = this.minZ;\n            this._cache.maxZ = this.maxZ;\n        }\n        if (pose.transform) {\n            const orientation = pose.transform.orientation;\n            if (pose.transform.orientation.x === undefined) {\n                // Babylon native polyfill can return an undefined orientation value\n                // When not initialized\n                return;\n            }\n            const pos = pose.transform.position;\n            this._referencedPosition.set(pos.x, pos.y, pos.z);\n            this._referenceQuaternion.set(orientation.x, orientation.y, orientation.z, orientation.w);\n            if (!this._scene.useRightHandedSystem) {\n                this._referencedPosition.z *= -1;\n                this._referenceQuaternion.z *= -1;\n                this._referenceQuaternion.w *= -1;\n            }\n            if (this._firstFrame) {\n                this._firstFrame = false;\n                // we have the XR reference, now use this to find the offset to get the camera to be\n                // in the right position\n                // set the height to correlate to the current height\n                this.position.y += this._referencedPosition.y;\n                // avoid using the head rotation on the first frame.\n                this._referenceQuaternion.copyFromFloats(0, 0, 0, 1);\n            }\n            else {\n                // update position and rotation as reference\n                this.rotationQuaternion.copyFrom(this._referenceQuaternion);\n                this.position.copyFrom(this._referencedPosition);\n            }\n        }\n        // Update camera rigs\n        if (this.rigCameras.length !== pose.views.length) {\n            this._updateNumberOfRigCameras(pose.views.length);\n        }\n        pose.views.forEach((view, i) => {\n            var _a;\n            const currentRig = this.rigCameras[i];\n            // update right and left, where applicable\n            if (!currentRig.isLeftCamera && !currentRig.isRightCamera) {\n                if (view.eye === \"right\") {\n                    currentRig._isRightCamera = true;\n                }\n                else if (view.eye === \"left\") {\n                    currentRig._isLeftCamera = true;\n                }\n            }\n            // Update view/projection matrix\n            const pos = view.transform.position;\n            const orientation = view.transform.orientation;\n            currentRig.parent = this.parent;\n            currentRig.position.set(pos.x, pos.y, pos.z);\n            currentRig.rotationQuaternion.set(orientation.x, orientation.y, orientation.z, orientation.w);\n            if (!this._scene.useRightHandedSystem) {\n                currentRig.position.z *= -1;\n                currentRig.rotationQuaternion.z *= -1;\n                currentRig.rotationQuaternion.w *= -1;\n            }\n            Matrix.FromFloat32ArrayToRefScaled(view.projectionMatrix, 0, 1, currentRig._projectionMatrix);\n            if (!this._scene.useRightHandedSystem) {\n                currentRig._projectionMatrix.toggleProjectionMatrixHandInPlace();\n            }\n            // first camera?\n            if (i === 0) {\n                this._projectionMatrix.copyFrom(currentRig._projectionMatrix);\n            }\n            const renderTargetTexture = this._xrSessionManager.getRenderTargetTextureForView(view);\n            this._renderingMultiview = ((_a = renderTargetTexture === null || renderTargetTexture === void 0 ? void 0 : renderTargetTexture._texture) === null || _a === void 0 ? void 0 : _a.isMultiview) || false;\n            if (this._renderingMultiview) {\n                // For multiview, the render target texture is the same per-view (just the slice index is different),\n                // so we only need to set the output render target once for the rig parent.\n                if (i == 0) {\n                    this._xrSessionManager.trySetViewportForView(this.viewport, view);\n                    this.outputRenderTarget = renderTargetTexture;\n                }\n            }\n            else {\n                // Update viewport\n                this._xrSessionManager.trySetViewportForView(currentRig.viewport, view);\n                // Set cameras to render to the session's render target\n                currentRig.outputRenderTarget = renderTargetTexture || this._xrSessionManager.getRenderTargetTextureForView(view);\n            }\n            // Replicate parent rig camera behavior\n            currentRig.layerMask = this.layerMask;\n        });\n    }\n    _updateNumberOfRigCameras(viewCount = 1) {\n        while (this.rigCameras.length < viewCount) {\n            const newCamera = new TargetCamera(\"XR-RigCamera: \" + this.rigCameras.length, Vector3.Zero(), this.getScene());\n            newCamera.minZ = 0.1;\n            newCamera.rotationQuaternion = new Quaternion();\n            newCamera.updateUpVectorFromRotation = true;\n            newCamera.isRigCamera = true;\n            newCamera.rigParent = this;\n            // do not compute projection matrix, provided by XR\n            newCamera.freezeProjectionMatrix();\n            this.rigCameras.push(newCamera);\n        }\n        while (this.rigCameras.length > viewCount) {\n            const removedCamera = this.rigCameras.pop();\n            if (removedCamera) {\n                removedCamera.dispose();\n            }\n        }\n    }\n    _updateReferenceSpace() {\n        // were position & rotation updated OUTSIDE of the xr update loop\n        if (!this.position.equals(this._referencedPosition) || !this.rotationQuaternion.equals(this._referenceQuaternion)) {\n            const referencedMat = TmpVectors.Matrix[0];\n            const poseMat = TmpVectors.Matrix[1];\n            const transformMat = TmpVectors.Matrix[2];\n            Matrix.ComposeToRef(WebXRCamera._ScaleReadOnly, this._referenceQuaternion, this._referencedPosition, referencedMat);\n            Matrix.ComposeToRef(WebXRCamera._ScaleReadOnly, this.rotationQuaternion, this.position, poseMat);\n            referencedMat.invert().multiplyToRef(poseMat, transformMat);\n            transformMat.invert();\n            if (!this._scene.useRightHandedSystem) {\n                transformMat.toggleModelMatrixHandInPlace();\n            }\n            transformMat.decompose(undefined, this._referenceQuaternion, this._referencedPosition);\n            const transform = new XRRigidTransform({\n                x: this._referencedPosition.x,\n                y: this._referencedPosition.y,\n                z: this._referencedPosition.z,\n            }, {\n                x: this._referenceQuaternion.x,\n                y: this._referenceQuaternion.y,\n                z: this._referenceQuaternion.z,\n                w: this._referenceQuaternion.w,\n            });\n            this._xrSessionManager.referenceSpace = this._xrSessionManager.referenceSpace.getOffsetReferenceSpace(transform);\n        }\n    }\n}\nWebXRCamera._ScaleReadOnly = Vector3.One();\n//# sourceMappingURL=webXRCamera.js.map","import { WebXRExperienceHelper } from \"./webXRExperienceHelper.js\";\nimport { WebXRInput } from \"./webXRInput.js\";\nimport { WebXRControllerPointerSelection } from \"./features/WebXRControllerPointerSelection.js\";\nimport { WebXRNearInteraction } from \"./features/WebXRNearInteraction.js\";\nimport { WebXREnterExitUI } from \"./webXREnterExitUI.js\";\nimport { WebXRMotionControllerTeleportation } from \"./features/WebXRControllerTeleportation.js\";\nimport { Logger } from \"../Misc/logger.js\";\n/**\n * Options for the default xr helper\n */\nexport class WebXRDefaultExperienceOptions {\n}\n/**\n * Default experience which provides a similar setup to the previous webVRExperience\n */\nexport class WebXRDefaultExperience {\n    constructor() { }\n    /**\n     * Creates the default xr experience\n     * @param scene scene\n     * @param options options for basic configuration\n     * @returns resulting WebXRDefaultExperience\n     */\n    static CreateAsync(scene, options = {}) {\n        const result = new WebXRDefaultExperience();\n        scene.onDisposeObservable.addOnce(() => {\n            result.dispose();\n        });\n        // init the UI right after construction\n        if (!options.disableDefaultUI) {\n            const uiOptions = {\n                renderTarget: result.renderTarget,\n                ...(options.uiOptions || {}),\n            };\n            if (options.optionalFeatures) {\n                if (typeof options.optionalFeatures === \"boolean\") {\n                    uiOptions.optionalFeatures = [\"hit-test\", \"anchors\", \"plane-detection\", \"hand-tracking\"];\n                }\n                else {\n                    uiOptions.optionalFeatures = options.optionalFeatures;\n                }\n            }\n            result.enterExitUI = new WebXREnterExitUI(scene, uiOptions);\n        }\n        // Create base experience\n        return WebXRExperienceHelper.CreateAsync(scene)\n            .then((xrHelper) => {\n            result.baseExperience = xrHelper;\n            if (options.ignoreNativeCameraTransformation) {\n                result.baseExperience.camera.compensateOnFirstFrame = false;\n            }\n            // Add controller support\n            result.input = new WebXRInput(xrHelper.sessionManager, xrHelper.camera, {\n                controllerOptions: {\n                    renderingGroupId: options.renderingGroupId,\n                },\n                ...(options.inputOptions || {}),\n            });\n            if (!options.disablePointerSelection) {\n                // Add default pointer selection\n                const pointerSelectionOptions = {\n                    ...options.pointerSelectionOptions,\n                    xrInput: result.input,\n                    renderingGroupId: options.renderingGroupId,\n                };\n                result.pointerSelection = (result.baseExperience.featuresManager.enableFeature(WebXRControllerPointerSelection.Name, options.useStablePlugins ? \"stable\" : \"latest\", pointerSelectionOptions));\n                if (!options.disableTeleportation) {\n                    // Add default teleportation, including rotation\n                    result.teleportation = result.baseExperience.featuresManager.enableFeature(WebXRMotionControllerTeleportation.Name, options.useStablePlugins ? \"stable\" : \"latest\", {\n                        floorMeshes: options.floorMeshes,\n                        xrInput: result.input,\n                        renderingGroupId: options.renderingGroupId,\n                        ...options.teleportationOptions,\n                    });\n                    result.teleportation.setSelectionFeature(result.pointerSelection);\n                }\n            }\n            if (!options.disableNearInteraction) {\n                // Add default pointer selection\n                result.nearInteraction = result.baseExperience.featuresManager.enableFeature(WebXRNearInteraction.Name, options.useStablePlugins ? \"stable\" : \"latest\", {\n                    xrInput: result.input,\n                    farInteractionFeature: result.pointerSelection,\n                    renderingGroupId: options.renderingGroupId,\n                    useUtilityLayer: true,\n                    enableNearInteractionOnAllControllers: true,\n                    ...options.nearInteractionOptions,\n                });\n            }\n            // Create the WebXR output target\n            result.renderTarget = result.baseExperience.sessionManager.getWebXRRenderTarget(options.outputCanvasOptions);\n            if (!options.disableDefaultUI) {\n                // Create ui for entering/exiting xr\n                return result.enterExitUI.setHelperAsync(result.baseExperience, result.renderTarget);\n            }\n            else {\n                return;\n            }\n        })\n            .then(() => {\n            return result;\n        })\n            .catch((error) => {\n            Logger.Error(\"Error initializing XR\");\n            Logger.Error(error);\n            return result;\n        });\n    }\n    /**\n     * Disposes of the experience helper\n     */\n    dispose() {\n        if (this.baseExperience) {\n            this.baseExperience.dispose();\n        }\n        if (this.input) {\n            this.input.dispose();\n        }\n        if (this.enterExitUI) {\n            this.enterExitUI.dispose();\n        }\n        if (this.renderTarget) {\n            this.renderTarget.dispose();\n        }\n    }\n}\n//# sourceMappingURL=webXRDefaultExperience.js.map","import { Observable } from \"../Misc/observable.js\";\nimport { WebXRState } from \"./webXRTypes.js\";\nimport { Tools } from \"../Misc/tools.js\";\n/**\n * Button which can be used to enter a different mode of XR\n */\nexport class WebXREnterExitUIButton {\n    /**\n     * Creates a WebXREnterExitUIButton\n     * @param element button element\n     * @param sessionMode XR initialization session mode\n     * @param referenceSpaceType the type of reference space to be used\n     */\n    constructor(\n    /** button element */\n    element, \n    /** XR initialization options for the button */\n    sessionMode, \n    /** Reference space type */\n    referenceSpaceType) {\n        this.element = element;\n        this.sessionMode = sessionMode;\n        this.referenceSpaceType = referenceSpaceType;\n    }\n    /**\n     * Extendable function which can be used to update the button's visuals when the state changes\n     * @param activeButton the current active button in the UI\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    update(activeButton) { }\n}\n/**\n * Options to create the webXR UI\n */\nexport class WebXREnterExitUIOptions {\n}\n/**\n * UI to allow the user to enter/exit XR mode\n */\nexport class WebXREnterExitUI {\n    /**\n     * Construct a new EnterExit UI class\n     *\n     * @param _scene babylon scene object to use\n     * @param options (read-only) version of the options passed to this UI\n     */\n    constructor(_scene, \n    /** version of the options passed to this UI */\n    options) {\n        this._scene = _scene;\n        this.options = options;\n        this._activeButton = null;\n        this._buttons = [];\n        /**\n         * Fired every time the active button is changed.\n         *\n         * When xr is entered via a button that launches xr that button will be the callback parameter\n         *\n         * When exiting xr the callback parameter will be null)\n         */\n        this.activeButtonChangedObservable = new Observable();\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        this._onSessionGranted = (evt) => {\n            // This section is for future reference.\n            // As per specs, evt.session.mode should have the supported session mode, but no browser supports it for now.\n            // // check if the session granted is the same as the one requested\n            // const grantedMode = (evt.session as any).mode;\n            // if (grantedMode) {\n            //     this._buttons.some((btn, idx) => {\n            //         if (btn.sessionMode === grantedMode) {\n            //             this._enterXRWithButtonIndex(idx);\n            //             return true;\n            //         }\n            //         return false;\n            //     });\n            // } else\n            if (this._helper) {\n                this._enterXRWithButtonIndex(0);\n            }\n        };\n        this.overlay = document.createElement(\"div\");\n        this.overlay.classList.add(\"xr-button-overlay\");\n        // prepare for session granted event\n        if (!options.ignoreSessionGrantedEvent && navigator.xr) {\n            navigator.xr.addEventListener(\"sessiongranted\", this._onSessionGranted);\n        }\n        // if served over HTTP, warn people.\n        // Hopefully the browsers will catch up\n        if (typeof window !== \"undefined\") {\n            if (window.location && window.location.protocol === \"http:\" && window.location.hostname !== \"localhost\") {\n                Tools.Warn(\"WebXR can only be served over HTTPS\");\n                throw new Error(\"WebXR can only be served over HTTPS\");\n            }\n        }\n        if (options.customButtons) {\n            this._buttons = options.customButtons;\n        }\n        else {\n            this.overlay.style.cssText = \"z-index:11;position: absolute; right: 20px;bottom: 50px;\";\n            const sessionMode = options.sessionMode || \"immersive-vr\";\n            const referenceSpaceType = options.referenceSpaceType || \"local-floor\";\n            const url = typeof SVGSVGElement === \"undefined\"\n                ? \"https://cdn.babylonjs.com/Assets/vrButton.png\"\n                : \"data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20width%3D%222048%22%20height%3D%221152%22%20viewBox%3D%220%200%202048%201152%22%20version%3D%221.1%22%3E%3Cpath%20transform%3D%22rotate%28180%201024%2C576.0000000000001%29%22%20d%3D%22m1109%2C896q17%2C0%2030%2C-12t13%2C-30t-12.5%2C-30.5t-30.5%2C-12.5l-170%2C0q-18%2C0%20-30.5%2C12.5t-12.5%2C30.5t13%2C30t30%2C12l170%2C0zm-85%2C256q59%2C0%20132.5%2C-1.5t154.5%2C-5.5t164.5%2C-11.5t163%2C-20t150%2C-30t124.5%2C-41.5q23%2C-11%2042%2C-24t38%2C-30q27%2C-25%2041%2C-61.5t14%2C-72.5l0%2C-257q0%2C-123%20-47%2C-232t-128%2C-190t-190%2C-128t-232%2C-47l-81%2C0q-37%2C0%20-68.5%2C14t-60.5%2C34.5t-55.5%2C45t-53%2C45t-53%2C34.5t-55.5%2C14t-55.5%2C-14t-53%2C-34.5t-53%2C-45t-55.5%2C-45t-60.5%2C-34.5t-68.5%2C-14l-81%2C0q-123%2C0%20-232%2C47t-190%2C128t-128%2C190t-47%2C232l0%2C257q0%2C68%2038%2C115t97%2C73q54%2C24%20124.5%2C41.5t150%2C30t163%2C20t164.5%2C11.5t154.5%2C5.5t132.5%2C1.5zm939%2C-298q0%2C39%20-24.5%2C67t-58.5%2C42q-54%2C23%20-122%2C39.5t-143.5%2C28t-155.5%2C19t-157%2C11t-148.5%2C5t-129.5%2C1.5q-59%2C0%20-130%2C-1.5t-148%2C-5t-157%2C-11t-155.5%2C-19t-143.5%2C-28t-122%2C-39.5q-34%2C-14%20-58.5%2C-42t-24.5%2C-67l0%2C-257q0%2C-106%2040.5%2C-199t110%2C-162.5t162.5%2C-109.5t199%2C-40l81%2C0q27%2C0%2052%2C14t50%2C34.5t51%2C44.5t55.5%2C44.5t63.5%2C34.5t74%2C14t74%2C-14t63.5%2C-34.5t55.5%2C-44.5t51%2C-44.5t50%2C-34.5t52%2C-14l14%2C0q37%2C0%2070%2C0.5t64.5%2C4.5t63.5%2C12t68%2C23q71%2C30%20128.5%2C78.5t98.5%2C110t63.5%2C133.5t22.5%2C149l0%2C257z%22%20fill%3D%22white%22%20/%3E%3C/svg%3E%0A\";\n            let css = \".babylonVRicon { color: #868686; border-color: #868686; border-style: solid; margin-left: 10px; height: 50px; width: 80px; background-color: rgba(51,51,51,0.7); background-image: url(\" +\n                url +\n                \"); background-size: 80%; background-repeat:no-repeat; background-position: center; border: none; outline: none; transition: transform 0.125s ease-out } .babylonVRicon:hover { transform: scale(1.05) } .babylonVRicon:active {background-color: rgba(51,51,51,1) } .babylonVRicon:focus {background-color: rgba(51,51,51,1) }\";\n            css += '.babylonVRicon.vrdisplaypresenting { background-image: none;} .vrdisplaypresenting::after { content: \"EXIT\"} .xr-error::after { content: \"ERROR\"}';\n            const style = document.createElement(\"style\");\n            style.appendChild(document.createTextNode(css));\n            document.getElementsByTagName(\"head\")[0].appendChild(style);\n            const hmdBtn = document.createElement(\"button\");\n            hmdBtn.className = \"babylonVRicon\";\n            hmdBtn.title = `${sessionMode} - ${referenceSpaceType}`;\n            this._buttons.push(new WebXREnterExitUIButton(hmdBtn, sessionMode, referenceSpaceType));\n            this._buttons[this._buttons.length - 1].update = function (activeButton) {\n                this.element.style.display = activeButton === null || activeButton === this ? \"\" : \"none\";\n                hmdBtn.className = \"babylonVRicon\" + (activeButton === this ? \" vrdisplaypresenting\" : \"\");\n            };\n            this._updateButtons(null);\n        }\n        const renderCanvas = _scene.getEngine().getInputElement();\n        if (renderCanvas && renderCanvas.parentNode) {\n            renderCanvas.parentNode.appendChild(this.overlay);\n            _scene.onDisposeObservable.addOnce(() => {\n                this.dispose();\n            });\n        }\n    }\n    /**\n     * Set the helper to be used with this UI component.\n     * The UI is bound to an experience helper. If not provided the UI can still be used but the events should be registered by the developer.\n     *\n     * @param helper the experience helper to attach\n     * @param renderTarget an optional render target (in case it is created outside of the helper scope)\n     * @returns a promise that resolves when the ui is ready\n     */\n    async setHelperAsync(helper, renderTarget) {\n        this._helper = helper;\n        this._renderTarget = renderTarget;\n        const supportedPromises = this._buttons.map((btn) => {\n            return helper.sessionManager.isSessionSupportedAsync(btn.sessionMode);\n        });\n        helper.onStateChangedObservable.add((state) => {\n            if (state == WebXRState.NOT_IN_XR) {\n                this._updateButtons(null);\n            }\n        });\n        const results = await Promise.all(supportedPromises);\n        results.forEach((supported, i) => {\n            if (supported) {\n                this.overlay.appendChild(this._buttons[i].element);\n                this._buttons[i].element.onclick = this._enterXRWithButtonIndex.bind(this, i);\n            }\n            else {\n                Tools.Warn(`Session mode \"${this._buttons[i].sessionMode}\" not supported in browser`);\n            }\n        });\n    }\n    /**\n     * Creates UI to allow the user to enter/exit XR mode\n     * @param scene the scene to add the ui to\n     * @param helper the xr experience helper to enter/exit xr with\n     * @param options options to configure the UI\n     * @returns the created ui\n     */\n    static async CreateAsync(scene, helper, options) {\n        const ui = new WebXREnterExitUI(scene, options);\n        await ui.setHelperAsync(helper, options.renderTarget || undefined);\n        return ui;\n    }\n    async _enterXRWithButtonIndex(idx = 0) {\n        if (this._helper.state == WebXRState.IN_XR) {\n            await this._helper.exitXRAsync();\n            this._updateButtons(null);\n        }\n        else if (this._helper.state == WebXRState.NOT_IN_XR) {\n            try {\n                await this._helper.enterXRAsync(this._buttons[idx].sessionMode, this._buttons[idx].referenceSpaceType, this._renderTarget, {\n                    optionalFeatures: this.options.optionalFeatures,\n                    requiredFeatures: this.options.requiredFeatures,\n                });\n                this._updateButtons(this._buttons[idx]);\n            }\n            catch (e) {\n                // make sure button is visible\n                this._updateButtons(null);\n                const element = this._buttons[idx].element;\n                const prevTitle = element.title;\n                element.title = \"Error entering XR session : \" + prevTitle;\n                element.classList.add(\"xr-error\");\n                if (this.options.onError) {\n                    this.options.onError(e);\n                }\n            }\n        }\n    }\n    /**\n     * Disposes of the XR UI component\n     */\n    dispose() {\n        const renderCanvas = this._scene.getEngine().getInputElement();\n        if (renderCanvas && renderCanvas.parentNode && renderCanvas.parentNode.contains(this.overlay)) {\n            renderCanvas.parentNode.removeChild(this.overlay);\n        }\n        this.activeButtonChangedObservable.clear();\n        navigator.xr.removeEventListener(\"sessiongranted\", this._onSessionGranted);\n    }\n    _updateButtons(activeButton) {\n        this._activeButton = activeButton;\n        this._buttons.forEach((b) => {\n            b.update(this._activeButton);\n        });\n        this.activeButtonChangedObservable.notifyObservers(this._activeButton);\n    }\n}\n//# sourceMappingURL=webXREnterExitUI.js.map","import { Observable } from \"../Misc/observable.js\";\nimport { WebXRSessionManager } from \"./webXRSessionManager.js\";\nimport { WebXRCamera } from \"./webXRCamera.js\";\nimport { WebXRState } from \"./webXRTypes.js\";\nimport { WebXRFeatureName, WebXRFeaturesManager } from \"./webXRFeaturesManager.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { UniversalCamera } from \"../Cameras/universalCamera.js\";\nimport { Quaternion, Vector3 } from \"../Maths/math.vector.js\";\n/**\n * Base set of functionality needed to create an XR experience (WebXRSessionManager, Camera, StateManagement, etc.)\n * @see https://doc.babylonjs.com/features/featuresDeepDive/webXR/webXRExperienceHelpers\n */\nexport class WebXRExperienceHelper {\n    /**\n     * Creates a WebXRExperienceHelper\n     * @param _scene The scene the helper should be created in\n     */\n    constructor(_scene) {\n        this._scene = _scene;\n        this._nonVRCamera = null;\n        this._attachedToElement = false;\n        this._spectatorCamera = null;\n        this._originalSceneAutoClear = true;\n        this._supported = false;\n        this._spectatorMode = false;\n        this._lastTimestamp = 0;\n        /**\n         * Observers registered here will be triggered after the camera's initial transformation is set\n         * This can be used to set a different ground level or an extra rotation.\n         *\n         * Note that ground level is considered to be at 0. The height defined by the XR camera will be added\n         * to the position set after this observable is done executing.\n         */\n        this.onInitialXRPoseSetObservable = new Observable();\n        /**\n         * Fires when the state of the experience helper has changed\n         */\n        this.onStateChangedObservable = new Observable();\n        /**\n         * The current state of the XR experience (eg. transitioning, in XR or not in XR)\n         */\n        this.state = WebXRState.NOT_IN_XR;\n        this.sessionManager = new WebXRSessionManager(_scene);\n        this.camera = new WebXRCamera(\"webxr\", _scene, this.sessionManager);\n        this.featuresManager = new WebXRFeaturesManager(this.sessionManager);\n        _scene.onDisposeObservable.addOnce(() => {\n            this.dispose();\n        });\n    }\n    /**\n     * Creates the experience helper\n     * @param scene the scene to attach the experience helper to\n     * @returns a promise for the experience helper\n     */\n    static CreateAsync(scene) {\n        const helper = new WebXRExperienceHelper(scene);\n        return helper.sessionManager\n            .initializeAsync()\n            .then(() => {\n            helper._supported = true;\n            return helper;\n        })\n            .catch((e) => {\n            helper._setState(WebXRState.NOT_IN_XR);\n            helper.dispose();\n            throw e;\n        });\n    }\n    /**\n     * Disposes of the experience helper\n     */\n    dispose() {\n        var _a;\n        this.exitXRAsync();\n        this.camera.dispose();\n        this.onStateChangedObservable.clear();\n        this.onInitialXRPoseSetObservable.clear();\n        this.sessionManager.dispose();\n        (_a = this._spectatorCamera) === null || _a === void 0 ? void 0 : _a.dispose();\n        if (this._nonVRCamera) {\n            this._scene.activeCamera = this._nonVRCamera;\n        }\n    }\n    /**\n     * Enters XR mode (This must be done within a user interaction in most browsers eg. button click)\n     * @param sessionMode options for the XR session\n     * @param referenceSpaceType frame of reference of the XR session\n     * @param renderTarget the output canvas that will be used to enter XR mode\n     * @param sessionCreationOptions optional XRSessionInit object to init the session with\n     * @returns promise that resolves after xr mode has entered\n     */\n    async enterXRAsync(sessionMode, referenceSpaceType, renderTarget = this.sessionManager.getWebXRRenderTarget(), sessionCreationOptions = {}) {\n        var _a, _b, _c;\n        if (!this._supported) {\n            throw \"WebXR not supported in this browser or environment\";\n        }\n        this._setState(WebXRState.ENTERING_XR);\n        if (referenceSpaceType !== \"viewer\" && referenceSpaceType !== \"local\") {\n            sessionCreationOptions.optionalFeatures = sessionCreationOptions.optionalFeatures || [];\n            sessionCreationOptions.optionalFeatures.push(referenceSpaceType);\n        }\n        sessionCreationOptions = await this.featuresManager._extendXRSessionInitObject(sessionCreationOptions);\n        // we currently recommend \"unbounded\" space in AR (#7959)\n        if (sessionMode === \"immersive-ar\" && referenceSpaceType !== \"unbounded\") {\n            Logger.Warn(\"We recommend using 'unbounded' reference space type when using 'immersive-ar' session mode\");\n        }\n        // make sure that the session mode is supported\n        try {\n            await this.sessionManager.initializeSessionAsync(sessionMode, sessionCreationOptions);\n            await this.sessionManager.setReferenceSpaceTypeAsync(referenceSpaceType);\n            const baseLayer = await renderTarget.initializeXRLayerAsync(this.sessionManager.session);\n            const xrRenderState = {\n                // if maxZ is 0 it should be \"Infinity\", but it doesn't work with the WebXR API. Setting to a large number.\n                depthFar: this.camera.maxZ || 10000,\n                depthNear: this.camera.minZ,\n            };\n            // The layers feature will have already initialized the xr session's layers on session init.\n            if (!this.featuresManager.getEnabledFeature(WebXRFeatureName.LAYERS)) {\n                xrRenderState.baseLayer = baseLayer;\n            }\n            this.sessionManager.updateRenderState(xrRenderState);\n            // run the render loop\n            this.sessionManager.runXRRenderLoop();\n            // Cache pre xr scene settings\n            this._originalSceneAutoClear = this._scene.autoClear;\n            this._nonVRCamera = this._scene.activeCamera;\n            this._attachedToElement = !!((_b = (_a = this._nonVRCamera) === null || _a === void 0 ? void 0 : _a.inputs) === null || _b === void 0 ? void 0 : _b.attachedToElement);\n            (_c = this._nonVRCamera) === null || _c === void 0 ? void 0 : _c.detachControl();\n            this._scene.activeCamera = this.camera;\n            // do not compensate when AR session is used\n            if (sessionMode !== \"immersive-ar\") {\n                this._nonXRToXRCamera();\n            }\n            else {\n                // Kept here, TODO - check if needed\n                this._scene.autoClear = false;\n                this.camera.compensateOnFirstFrame = false;\n                // reset the camera's position to the origin\n                this.camera.position.set(0, 0, 0);\n                this.camera.rotationQuaternion.set(0, 0, 0, 1);\n            }\n            this.sessionManager.onXRSessionEnded.addOnce(() => {\n                // when using the back button and not the exit button (default on mobile), the session is ending but the EXITING state was not set\n                if (this.state !== WebXRState.EXITING_XR) {\n                    this._setState(WebXRState.EXITING_XR);\n                }\n                // Reset camera rigs output render target to ensure sessions render target is not drawn after it ends\n                this.camera.rigCameras.forEach((c) => {\n                    c.outputRenderTarget = null;\n                });\n                // Restore scene settings\n                this._scene.autoClear = this._originalSceneAutoClear;\n                this._scene.activeCamera = this._nonVRCamera;\n                if (this._attachedToElement && this._nonVRCamera) {\n                    this._nonVRCamera.attachControl(!!this._nonVRCamera.inputs.noPreventDefault);\n                }\n                if (sessionMode !== \"immersive-ar\" && this.camera.compensateOnFirstFrame) {\n                    if (this._nonVRCamera.setPosition) {\n                        this._nonVRCamera.setPosition(this.camera.position);\n                    }\n                    else {\n                        this._nonVRCamera.position.copyFrom(this.camera.position);\n                    }\n                }\n                this._setState(WebXRState.NOT_IN_XR);\n            });\n            // Wait until the first frame arrives before setting state to in xr\n            this.sessionManager.onXRFrameObservable.addOnce(() => {\n                this._setState(WebXRState.IN_XR);\n            });\n            return this.sessionManager;\n        }\n        catch (e) {\n            console.log(e);\n            console.log(e.message);\n            this._setState(WebXRState.NOT_IN_XR);\n            throw e;\n        }\n    }\n    /**\n     * Exits XR mode and returns the scene to its original state\n     * @returns promise that resolves after xr mode has exited\n     */\n    exitXRAsync() {\n        // only exit if state is IN_XR\n        if (this.state !== WebXRState.IN_XR) {\n            return Promise.resolve();\n        }\n        this._setState(WebXRState.EXITING_XR);\n        return this.sessionManager.exitXRAsync();\n    }\n    /**\n     * Enable spectator mode for desktop VR experiences.\n     * When spectator mode is enabled a camera will be attached to the desktop canvas and will\n     * display the first rig camera's view on the desktop canvas.\n     * Please note that this will degrade performance, as it requires another camera render.\n     * It is also not recommended to enable this in devices like the quest, as it brings no benefit there.\n     * @param options giving WebXRSpectatorModeOption for specutator camera to setup when the spectator mode is enabled.\n     */\n    enableSpectatorMode(options) {\n        if (!this._spectatorMode) {\n            this._spectatorMode = true;\n            this._switchSpectatorMode(options);\n        }\n    }\n    /**\n     * Disable spectator mode for desktop VR experiences.\n     */\n    disableSpecatatorMode() {\n        if (this._spectatorMode) {\n            this._spectatorMode = false;\n            this._switchSpectatorMode();\n        }\n    }\n    _switchSpectatorMode(options) {\n        const fps = (options === null || options === void 0 ? void 0 : options.fps) ? options.fps : 1000.0;\n        const refreshRate = (1.0 / fps) * 1000.0;\n        const cameraIndex = (options === null || options === void 0 ? void 0 : options.preferredCameraIndex) ? options === null || options === void 0 ? void 0 : options.preferredCameraIndex : 0;\n        const updateSpectatorCamera = () => {\n            if (this._spectatorCamera) {\n                const delta = this.sessionManager.currentTimestamp - this._lastTimestamp;\n                if (delta >= refreshRate) {\n                    this._lastTimestamp = this.sessionManager.currentTimestamp;\n                    this._spectatorCamera.position.copyFrom(this.camera.rigCameras[cameraIndex].globalPosition);\n                    this._spectatorCamera.rotationQuaternion.copyFrom(this.camera.rigCameras[cameraIndex].absoluteRotation);\n                }\n            }\n        };\n        if (this._spectatorMode) {\n            if (cameraIndex >= this.camera.rigCameras.length) {\n                throw new Error(\"the preferred camera index is beyond the length of rig camera array.\");\n            }\n            const onStateChanged = () => {\n                if (this.state === WebXRState.IN_XR) {\n                    this._spectatorCamera = new UniversalCamera(\"webxr-spectator\", Vector3.Zero(), this._scene);\n                    this._spectatorCamera.rotationQuaternion = new Quaternion();\n                    this._scene.activeCameras = [this.camera, this._spectatorCamera];\n                    this.sessionManager.onXRFrameObservable.add(updateSpectatorCamera);\n                    this._scene.onAfterRenderCameraObservable.add((camera) => {\n                        if (camera === this.camera) {\n                            // reset the dimensions object for correct resizing\n                            this._scene.getEngine().framebufferDimensionsObject = null;\n                        }\n                    });\n                }\n                else if (this.state === WebXRState.EXITING_XR) {\n                    this.sessionManager.onXRFrameObservable.removeCallback(updateSpectatorCamera);\n                    this._scene.activeCameras = null;\n                }\n            };\n            this.onStateChangedObservable.add(onStateChanged);\n            onStateChanged();\n        }\n        else {\n            this.sessionManager.onXRFrameObservable.removeCallback(updateSpectatorCamera);\n            this._scene.activeCameras = [this.camera];\n        }\n    }\n    _nonXRToXRCamera() {\n        this.camera.setTransformationFromNonVRCamera(this._nonVRCamera);\n        this.onInitialXRPoseSetObservable.notifyObservers(this.camera);\n    }\n    _setState(val) {\n        if (this.state === val) {\n            return;\n        }\n        this.state = val;\n        this.onStateChangedObservable.notifyObservers(this.state);\n    }\n}\n//# sourceMappingURL=webXRExperienceHelper.js.map","import { Tools } from \"../Misc/tools.js\";\n/**\n * A list of the currently available features without referencing them\n */\nexport class WebXRFeatureName {\n}\n/**\n * The name of the anchor system feature\n */\nWebXRFeatureName.ANCHOR_SYSTEM = \"xr-anchor-system\";\n/**\n * The name of the background remover feature\n */\nWebXRFeatureName.BACKGROUND_REMOVER = \"xr-background-remover\";\n/**\n * The name of the hit test feature\n */\nWebXRFeatureName.HIT_TEST = \"xr-hit-test\";\n/**\n * The name of the mesh detection feature\n */\nWebXRFeatureName.MESH_DETECTION = \"xr-mesh-detection\";\n/**\n * physics impostors for xr controllers feature\n */\nWebXRFeatureName.PHYSICS_CONTROLLERS = \"xr-physics-controller\";\n/**\n * The name of the plane detection feature\n */\nWebXRFeatureName.PLANE_DETECTION = \"xr-plane-detection\";\n/**\n * The name of the pointer selection feature\n */\nWebXRFeatureName.POINTER_SELECTION = \"xr-controller-pointer-selection\";\n/**\n * The name of the teleportation feature\n */\nWebXRFeatureName.TELEPORTATION = \"xr-controller-teleportation\";\n/**\n * The name of the feature points feature.\n */\nWebXRFeatureName.FEATURE_POINTS = \"xr-feature-points\";\n/**\n * The name of the hand tracking feature.\n */\nWebXRFeatureName.HAND_TRACKING = \"xr-hand-tracking\";\n/**\n * The name of the image tracking feature\n */\nWebXRFeatureName.IMAGE_TRACKING = \"xr-image-tracking\";\n/**\n * The name of the near interaction feature\n */\nWebXRFeatureName.NEAR_INTERACTION = \"xr-near-interaction\";\n/**\n * The name of the DOM overlay feature\n */\nWebXRFeatureName.DOM_OVERLAY = \"xr-dom-overlay\";\n/**\n * The name of the movement feature\n */\nWebXRFeatureName.MOVEMENT = \"xr-controller-movement\";\n/**\n * The name of the light estimation feature\n */\nWebXRFeatureName.LIGHT_ESTIMATION = \"xr-light-estimation\";\n/**\n * The name of the eye tracking feature\n */\nWebXRFeatureName.EYE_TRACKING = \"xr-eye-tracking\";\n/**\n * The name of the walking locomotion feature\n */\nWebXRFeatureName.WALKING_LOCOMOTION = \"xr-walking-locomotion\";\n/**\n * The name of the composition layers feature\n */\nWebXRFeatureName.LAYERS = \"xr-layers\";\n/**\n * The WebXR features manager is responsible of enabling or disabling features required for the current XR session.\n * It is mainly used in AR sessions.\n *\n * A feature can have a version that is defined by Babylon (and does not correspond with the webxr version).\n */\nexport class WebXRFeaturesManager {\n    /**\n     * constructs a new features manages.\n     *\n     * @param _xrSessionManager an instance of WebXRSessionManager\n     */\n    constructor(_xrSessionManager) {\n        this._xrSessionManager = _xrSessionManager;\n        this._features = {};\n        // when session starts / initialized - attach\n        this._xrSessionManager.onXRSessionInit.add(() => {\n            this.getEnabledFeatures().forEach((featureName) => {\n                const feature = this._features[featureName];\n                if (feature.enabled && !feature.featureImplementation.attached && !feature.featureImplementation.disableAutoAttach) {\n                    this.attachFeature(featureName);\n                }\n            });\n        });\n        // when session ends - detach\n        this._xrSessionManager.onXRSessionEnded.add(() => {\n            this.getEnabledFeatures().forEach((featureName) => {\n                const feature = this._features[featureName];\n                if (feature.enabled && feature.featureImplementation.attached) {\n                    // detach, but don't disable!\n                    this.detachFeature(featureName);\n                }\n            });\n        });\n    }\n    /**\n     * Used to register a module. After calling this function a developer can use this feature in the scene.\n     * Mainly used internally.\n     *\n     * @param featureName the name of the feature to register\n     * @param constructorFunction the function used to construct the module\n     * @param version the (babylon) version of the module\n     * @param stable is that a stable version of this module\n     */\n    static AddWebXRFeature(featureName, constructorFunction, version = 1, stable = false) {\n        this._AvailableFeatures[featureName] = this._AvailableFeatures[featureName] || { latest: version };\n        if (version > this._AvailableFeatures[featureName].latest) {\n            this._AvailableFeatures[featureName].latest = version;\n        }\n        if (stable) {\n            this._AvailableFeatures[featureName].stable = version;\n        }\n        this._AvailableFeatures[featureName][version] = constructorFunction;\n    }\n    /**\n     * Returns a constructor of a specific feature.\n     *\n     * @param featureName the name of the feature to construct\n     * @param version the version of the feature to load\n     * @param xrSessionManager the xrSessionManager. Used to construct the module\n     * @param options optional options provided to the module.\n     * @returns a function that, when called, will return a new instance of this feature\n     */\n    static ConstructFeature(featureName, version = 1, xrSessionManager, options) {\n        const constructorFunction = this._AvailableFeatures[featureName][version];\n        if (!constructorFunction) {\n            // throw an error? return nothing?\n            throw new Error(\"feature not found\");\n        }\n        return constructorFunction(xrSessionManager, options);\n    }\n    /**\n     * Can be used to return the list of features currently registered\n     *\n     * @returns an Array of available features\n     */\n    static GetAvailableFeatures() {\n        return Object.keys(this._AvailableFeatures);\n    }\n    /**\n     * Gets the versions available for a specific feature\n     * @param featureName the name of the feature\n     * @returns an array with the available versions\n     */\n    static GetAvailableVersions(featureName) {\n        return Object.keys(this._AvailableFeatures[featureName]);\n    }\n    /**\n     * Return the latest unstable version of this feature\n     * @param featureName the name of the feature to search\n     * @returns the version number. if not found will return -1\n     */\n    static GetLatestVersionOfFeature(featureName) {\n        return (this._AvailableFeatures[featureName] && this._AvailableFeatures[featureName].latest) || -1;\n    }\n    /**\n     * Return the latest stable version of this feature\n     * @param featureName the name of the feature to search\n     * @returns the version number. if not found will return -1\n     */\n    static GetStableVersionOfFeature(featureName) {\n        return (this._AvailableFeatures[featureName] && this._AvailableFeatures[featureName].stable) || -1;\n    }\n    /**\n     * Attach a feature to the current session. Mainly used when session started to start the feature effect.\n     * Can be used during a session to start a feature\n     * @param featureName the name of feature to attach\n     */\n    attachFeature(featureName) {\n        const feature = this._features[featureName];\n        if (feature && feature.enabled && !feature.featureImplementation.attached) {\n            feature.featureImplementation.attach();\n        }\n    }\n    /**\n     * Can be used inside a session or when the session ends to detach a specific feature\n     * @param featureName the name of the feature to detach\n     */\n    detachFeature(featureName) {\n        const feature = this._features[featureName];\n        if (feature && feature.featureImplementation.attached) {\n            feature.featureImplementation.detach();\n        }\n    }\n    /**\n     * Used to disable an already-enabled feature\n     * The feature will be disposed and will be recreated once enabled.\n     * @param featureName the feature to disable\n     * @returns true if disable was successful\n     */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    disableFeature(featureName) {\n        const name = typeof featureName === \"string\" ? featureName : featureName.Name;\n        const feature = this._features[name];\n        if (feature && feature.enabled) {\n            feature.enabled = false;\n            this.detachFeature(name);\n            feature.featureImplementation.dispose();\n            delete this._features[name];\n            return true;\n        }\n        return false;\n    }\n    /**\n     * dispose this features manager\n     */\n    dispose() {\n        this.getEnabledFeatures().forEach((feature) => {\n            this.disableFeature(feature);\n        });\n    }\n    /**\n     * Enable a feature using its name and a version. This will enable it in the scene, and will be responsible to attach it when the session starts.\n     * If used twice, the old version will be disposed and a new one will be constructed. This way you can re-enable with different configuration.\n     *\n     * @param featureName the name of the feature to load or the class of the feature\n     * @param version optional version to load. if not provided the latest version will be enabled\n     * @param moduleOptions options provided to the module. Ses the module documentation / constructor\n     * @param attachIfPossible if set to true (default) the feature will be automatically attached, if it is currently possible\n     * @param required is this feature required to the app. If set to true the session init will fail if the feature is not available.\n     * @returns a new constructed feature or throws an error if feature not found or conflicts with another enabled feature.\n     */\n    enableFeature(\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    featureName, version = \"latest\", moduleOptions = {}, attachIfPossible = true, required = true) {\n        const name = typeof featureName === \"string\" ? featureName : featureName.Name;\n        let versionToLoad = 0;\n        if (typeof version === \"string\") {\n            if (!version) {\n                throw new Error(`Error in provided version - ${name} (${version})`);\n            }\n            if (version === \"stable\") {\n                versionToLoad = WebXRFeaturesManager.GetStableVersionOfFeature(name);\n            }\n            else if (version === \"latest\") {\n                versionToLoad = WebXRFeaturesManager.GetLatestVersionOfFeature(name);\n            }\n            else {\n                // try loading the number the string represents\n                versionToLoad = +version;\n            }\n            if (versionToLoad === -1 || isNaN(versionToLoad)) {\n                throw new Error(`feature not found - ${name} (${version})`);\n            }\n        }\n        else {\n            versionToLoad = version;\n        }\n        // check if there is a feature conflict\n        const conflictingFeature = WebXRFeaturesManager._ConflictingFeatures[name];\n        if (conflictingFeature !== undefined && this.getEnabledFeatures().indexOf(conflictingFeature) !== -1) {\n            throw new Error(`Feature ${name} cannot be enabled while ${conflictingFeature} is enabled.`);\n        }\n        // check if already initialized\n        const feature = this._features[name];\n        const constructFunction = WebXRFeaturesManager.ConstructFeature(name, versionToLoad, this._xrSessionManager, moduleOptions);\n        if (!constructFunction) {\n            // report error?\n            throw new Error(`feature not found - ${name}`);\n        }\n        /* If the feature is already enabled, detach and dispose it, and create a new one */\n        if (feature) {\n            this.disableFeature(name);\n        }\n        const constructed = constructFunction();\n        if (constructed.dependsOn) {\n            const dependentsFound = constructed.dependsOn.every((featureName) => !!this._features[featureName]);\n            if (!dependentsFound) {\n                throw new Error(`Dependant features missing. Make sure the following features are enabled - ${constructed.dependsOn.join(\", \")}`);\n            }\n        }\n        if (constructed.isCompatible()) {\n            this._features[name] = {\n                featureImplementation: constructed,\n                enabled: true,\n                version: versionToLoad,\n                required,\n            };\n            if (attachIfPossible) {\n                // if session started already, request and enable\n                if (this._xrSessionManager.session && !this._features[name].featureImplementation.attached) {\n                    // enable feature\n                    this.attachFeature(name);\n                }\n            }\n            else {\n                // disable auto-attach when session starts\n                this._features[name].featureImplementation.disableAutoAttach = true;\n            }\n            return this._features[name].featureImplementation;\n        }\n        else {\n            if (required) {\n                throw new Error(\"required feature not compatible\");\n            }\n            else {\n                Tools.Warn(`Feature ${name} not compatible with the current environment/browser and was not enabled.`);\n                return constructed;\n            }\n        }\n    }\n    /**\n     * get the implementation of an enabled feature.\n     * @param featureName the name of the feature to load\n     * @returns the feature class, if found\n     */\n    getEnabledFeature(featureName) {\n        return this._features[featureName] && this._features[featureName].featureImplementation;\n    }\n    /**\n     * Get the list of enabled features\n     * @returns an array of enabled features\n     */\n    getEnabledFeatures() {\n        return Object.keys(this._features);\n    }\n    /**\n     * This function will extend the session creation configuration object with enabled features.\n     * If, for example, the anchors feature is enabled, it will be automatically added to the optional or required features list,\n     * according to the defined \"required\" variable, provided during enableFeature call\n     * @param xrSessionInit the xr Session init object to extend\n     *\n     * @returns an extended XRSessionInit object\n     */\n    async _extendXRSessionInitObject(xrSessionInit) {\n        const enabledFeatures = this.getEnabledFeatures();\n        for (const featureName of enabledFeatures) {\n            const feature = this._features[featureName];\n            const nativeName = feature.featureImplementation.xrNativeFeatureName;\n            if (nativeName) {\n                if (feature.required) {\n                    xrSessionInit.requiredFeatures = xrSessionInit.requiredFeatures || [];\n                    if (xrSessionInit.requiredFeatures.indexOf(nativeName) === -1) {\n                        xrSessionInit.requiredFeatures.push(nativeName);\n                    }\n                }\n                else {\n                    xrSessionInit.optionalFeatures = xrSessionInit.optionalFeatures || [];\n                    if (xrSessionInit.optionalFeatures.indexOf(nativeName) === -1) {\n                        xrSessionInit.optionalFeatures.push(nativeName);\n                    }\n                }\n            }\n            if (feature.featureImplementation.getXRSessionInitExtension) {\n                const extended = await feature.featureImplementation.getXRSessionInitExtension();\n                xrSessionInit = {\n                    ...xrSessionInit,\n                    ...extended,\n                };\n            }\n        }\n        return xrSessionInit;\n    }\n}\nWebXRFeaturesManager._AvailableFeatures = {};\n/**\n * The key is the feature to check and the value is the feature that conflicts.\n */\nWebXRFeaturesManager._ConflictingFeatures = {\n    [WebXRFeatureName.TELEPORTATION]: WebXRFeatureName.MOVEMENT,\n    [WebXRFeatureName.MOVEMENT]: WebXRFeatureName.TELEPORTATION,\n};\n//# sourceMappingURL=webXRFeaturesManager.js.map","import { Observable } from \"../Misc/observable.js\";\nimport { WebXRInputSource } from \"./webXRInputSource.js\";\nimport { WebXRMotionControllerManager } from \"./motionController/webXRMotionControllerManager.js\";\n/**\n * XR input used to track XR inputs such as controllers/rays\n */\nexport class WebXRInput {\n    /**\n     * Initializes the WebXRInput\n     * @param xrSessionManager the xr session manager for this session\n     * @param xrCamera the WebXR camera for this session. Mainly used for teleportation\n     * @param _options = initialization options for this xr input\n     */\n    constructor(\n    /**\n     * the xr session manager for this session\n     */\n    xrSessionManager, \n    /**\n     * the WebXR camera for this session. Mainly used for teleportation\n     */\n    xrCamera, _options = {}) {\n        this.xrSessionManager = xrSessionManager;\n        this.xrCamera = xrCamera;\n        this._options = _options;\n        /**\n         * XR controllers being tracked\n         */\n        this.controllers = [];\n        /**\n         * Event when a controller has been connected/added\n         */\n        this.onControllerAddedObservable = new Observable();\n        /**\n         * Event when a controller has been removed/disconnected\n         */\n        this.onControllerRemovedObservable = new Observable();\n        this._onInputSourcesChange = (event) => {\n            this._addAndRemoveControllers(event.added, event.removed);\n        };\n        // Remove controllers when exiting XR\n        this._sessionEndedObserver = this.xrSessionManager.onXRSessionEnded.add(() => {\n            this._addAndRemoveControllers([], this.controllers.map((c) => {\n                return c.inputSource;\n            }));\n        });\n        this._sessionInitObserver = this.xrSessionManager.onXRSessionInit.add((session) => {\n            session.addEventListener(\"inputsourceschange\", this._onInputSourcesChange);\n        });\n        this._frameObserver = this.xrSessionManager.onXRFrameObservable.add((frame) => {\n            // Update controller pose info\n            this.controllers.forEach((controller) => {\n                controller.updateFromXRFrame(frame, this.xrSessionManager.referenceSpace, this.xrCamera);\n            });\n        });\n        if (this._options.customControllersRepositoryURL) {\n            WebXRMotionControllerManager.BaseRepositoryUrl = this._options.customControllersRepositoryURL;\n        }\n        WebXRMotionControllerManager.UseOnlineRepository = !this._options.disableOnlineControllerRepository;\n        if (WebXRMotionControllerManager.UseOnlineRepository) {\n            // pre-load the profiles list to load the controllers quicker afterwards\n            try {\n                WebXRMotionControllerManager.UpdateProfilesList().catch(() => {\n                    WebXRMotionControllerManager.UseOnlineRepository = false;\n                });\n            }\n            catch (e) {\n                WebXRMotionControllerManager.UseOnlineRepository = false;\n            }\n        }\n    }\n    _addAndRemoveControllers(addInputs, removeInputs) {\n        // Add controllers if they don't already exist\n        const sources = this.controllers.map((c) => {\n            return c.inputSource;\n        });\n        for (const input of addInputs) {\n            if (sources.indexOf(input) === -1) {\n                const controller = new WebXRInputSource(this.xrSessionManager.scene, input, {\n                    ...(this._options.controllerOptions || {}),\n                    forceControllerProfile: this._options.forceInputProfile,\n                    doNotLoadControllerMesh: this._options.doNotLoadControllerMeshes,\n                    disableMotionControllerAnimation: this._options.disableControllerAnimation,\n                });\n                this.controllers.push(controller);\n                this.onControllerAddedObservable.notifyObservers(controller);\n            }\n        }\n        // Remove and dispose of controllers to be disposed\n        const keepControllers = [];\n        const removedControllers = [];\n        this.controllers.forEach((c) => {\n            if (removeInputs.indexOf(c.inputSource) === -1) {\n                keepControllers.push(c);\n            }\n            else {\n                removedControllers.push(c);\n            }\n        });\n        this.controllers = keepControllers;\n        removedControllers.forEach((c) => {\n            this.onControllerRemovedObservable.notifyObservers(c);\n            c.dispose();\n        });\n    }\n    /**\n     * Disposes of the object\n     */\n    dispose() {\n        this.controllers.forEach((c) => {\n            c.dispose();\n        });\n        this.xrSessionManager.onXRFrameObservable.remove(this._frameObserver);\n        this.xrSessionManager.onXRSessionInit.remove(this._sessionInitObserver);\n        this.xrSessionManager.onXRSessionEnded.remove(this._sessionEndedObserver);\n        this.onControllerAddedObservable.clear();\n        this.onControllerRemovedObservable.clear();\n        // clear the controller cache\n        WebXRMotionControllerManager.ClearControllerCache();\n    }\n}\n//# sourceMappingURL=webXRInput.js.map","import { Observable } from \"../Misc/observable.js\";\nimport { AbstractMesh } from \"../Meshes/abstractMesh.js\";\nimport { Quaternion, Vector3 } from \"../Maths/math.vector.js\";\nimport { WebXRMotionControllerManager } from \"./motionController/webXRMotionControllerManager.js\";\nimport { Tools } from \"../Misc/tools.js\";\nlet idCount = 0;\n/**\n * Represents an XR controller\n */\nexport class WebXRInputSource {\n    /**\n     * Creates the input source object\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/webXR/webXRInputControllerSupport\n     * @param _scene the scene which the controller should be associated to\n     * @param inputSource the underlying input source for the controller\n     * @param _options options for this controller creation\n     */\n    constructor(_scene, \n    /** The underlying input source for the controller  */\n    inputSource, _options = {}) {\n        this._scene = _scene;\n        this.inputSource = inputSource;\n        this._options = _options;\n        this._tmpVector = new Vector3();\n        this._disposed = false;\n        /**\n         * Event that fires when the controller is removed/disposed.\n         * The object provided as event data is this controller, after associated assets were disposed.\n         * uniqueId is still available.\n         */\n        this.onDisposeObservable = new Observable();\n        /**\n         * Will be triggered when the mesh associated with the motion controller is done loading.\n         * It is also possible that this will never trigger (!) if no mesh was loaded, or if the developer decides to load a different mesh\n         * A shortened version of controller -> motion controller -> on mesh loaded.\n         */\n        this.onMeshLoadedObservable = new Observable();\n        /**\n         * Observers registered here will trigger when a motion controller profile was assigned to this xr controller\n         */\n        this.onMotionControllerInitObservable = new Observable();\n        this._uniqueId = `controller-${idCount++}-${inputSource.targetRayMode}-${inputSource.handedness}`;\n        this.pointer = new AbstractMesh(`${this._uniqueId}-pointer`, _scene);\n        this.pointer.rotationQuaternion = new Quaternion();\n        if (this.inputSource.gripSpace) {\n            this.grip = new AbstractMesh(`${this._uniqueId}-grip`, this._scene);\n            this.grip.rotationQuaternion = new Quaternion();\n        }\n        this._tmpVector.set(0, 0, this._scene.useRightHandedSystem ? -1.0 : 1.0);\n        // for now only load motion controllers if gamepad object available\n        if (this.inputSource.gamepad && this.inputSource.targetRayMode === \"tracked-pointer\") {\n            WebXRMotionControllerManager.GetMotionControllerWithXRInput(inputSource, _scene, this._options.forceControllerProfile).then((motionController) => {\n                this.motionController = motionController;\n                this.onMotionControllerInitObservable.notifyObservers(motionController);\n                // should the model be loaded?\n                if (!this._options.doNotLoadControllerMesh && !this.motionController._doNotLoadControllerMesh) {\n                    this.motionController.loadModel().then((success) => {\n                        var _a;\n                        if (success && this.motionController && this.motionController.rootMesh) {\n                            if (this._options.renderingGroupId) {\n                                // anything other than 0?\n                                this.motionController.rootMesh.renderingGroupId = this._options.renderingGroupId;\n                                this.motionController.rootMesh.getChildMeshes(false).forEach((mesh) => (mesh.renderingGroupId = this._options.renderingGroupId));\n                            }\n                            this.onMeshLoadedObservable.notifyObservers(this.motionController.rootMesh);\n                            this.motionController.rootMesh.parent = this.grip || this.pointer;\n                            this.motionController.disableAnimation = !!this._options.disableMotionControllerAnimation;\n                        }\n                        // make sure to dispose is the controller is already disposed\n                        if (this._disposed) {\n                            (_a = this.motionController) === null || _a === void 0 ? void 0 : _a.dispose();\n                        }\n                    });\n                }\n            }, () => {\n                Tools.Warn(`Could not find a matching motion controller for the registered input source`);\n            });\n        }\n    }\n    /**\n     * Get this controllers unique id\n     */\n    get uniqueId() {\n        return this._uniqueId;\n    }\n    /**\n     * Disposes of the object\n     */\n    dispose() {\n        if (this.grip) {\n            this.grip.dispose(true);\n        }\n        if (this.motionController) {\n            this.motionController.dispose();\n        }\n        this.pointer.dispose(true);\n        this.onMotionControllerInitObservable.clear();\n        this.onMeshLoadedObservable.clear();\n        this.onDisposeObservable.notifyObservers(this);\n        this.onDisposeObservable.clear();\n        this._disposed = true;\n    }\n    /**\n     * Gets a world space ray coming from the pointer or grip\n     * @param result the resulting ray\n     * @param gripIfAvailable use the grip mesh instead of the pointer, if available\n     */\n    getWorldPointerRayToRef(result, gripIfAvailable = false) {\n        const object = gripIfAvailable && this.grip ? this.grip : this.pointer;\n        Vector3.TransformNormalToRef(this._tmpVector, object.getWorldMatrix(), result.direction);\n        result.direction.normalize();\n        result.origin.copyFrom(object.absolutePosition);\n        result.length = 1000;\n    }\n    /**\n     * Updates the controller pose based on the given XRFrame\n     * @param xrFrame xr frame to update the pose with\n     * @param referenceSpace reference space to use\n     * @param xrCamera the xr camera, used for parenting\n     */\n    updateFromXRFrame(xrFrame, referenceSpace, xrCamera) {\n        const pose = xrFrame.getPose(this.inputSource.targetRaySpace, referenceSpace);\n        this._lastXRPose = pose;\n        // Update the pointer mesh\n        if (pose) {\n            const pos = pose.transform.position;\n            this.pointer.position.set(pos.x, pos.y, pos.z);\n            const orientation = pose.transform.orientation;\n            this.pointer.rotationQuaternion.set(orientation.x, orientation.y, orientation.z, orientation.w);\n            if (!this._scene.useRightHandedSystem) {\n                this.pointer.position.z *= -1;\n                this.pointer.rotationQuaternion.z *= -1;\n                this.pointer.rotationQuaternion.w *= -1;\n            }\n            this.pointer.parent = xrCamera.parent;\n        }\n        // Update the grip mesh if it exists\n        if (this.inputSource.gripSpace && this.grip) {\n            const pose = xrFrame.getPose(this.inputSource.gripSpace, referenceSpace);\n            if (pose) {\n                const pos = pose.transform.position;\n                const orientation = pose.transform.orientation;\n                this.grip.position.set(pos.x, pos.y, pos.z);\n                this.grip.rotationQuaternion.set(orientation.x, orientation.y, orientation.z, orientation.w);\n                if (!this._scene.useRightHandedSystem) {\n                    this.grip.position.z *= -1;\n                    this.grip.rotationQuaternion.z *= -1;\n                    this.grip.rotationQuaternion.w *= -1;\n                }\n            }\n            this.grip.parent = xrCamera.parent;\n        }\n        if (this.motionController) {\n            // either update buttons only or also position, if in gamepad mode\n            this.motionController.updateFromXRFrame(xrFrame);\n        }\n    }\n}\n//# sourceMappingURL=webXRInputSource.js.map","/**\n * Wrapper over subclasses of XRLayer.\n * @internal\n */\nexport class WebXRLayerWrapper {\n    /**\n     * Check if fixed foveation is supported on this device\n     */\n    get isFixedFoveationSupported() {\n        return this.layerType == \"XRWebGLLayer\" && typeof this.layer.fixedFoveation == \"number\";\n    }\n    /**\n     * Get the fixed foveation currently set, as specified by the webxr specs\n     * If this returns null, then fixed foveation is not supported\n     */\n    get fixedFoveation() {\n        if (this.isFixedFoveationSupported) {\n            return this.layer.fixedFoveation;\n        }\n        return null;\n    }\n    /**\n     * Set the fixed foveation to the specified value, as specified by the webxr specs\n     * This value will be normalized to be between 0 and 1, 1 being max foveation, 0 being no foveation\n     */\n    set fixedFoveation(value) {\n        if (this.isFixedFoveationSupported) {\n            const val = Math.max(0, Math.min(1, value || 0));\n            this.layer.fixedFoveation = val;\n        }\n    }\n    constructor(\n    /** The width of the layer's framebuffer. */\n    getWidth, \n    /** The height of the layer's framebuffer. */\n    getHeight, \n    /** The XR layer that this WebXRLayerWrapper wraps. */\n    layer, \n    /** The type of XR layer that is being wrapped. */\n    layerType, \n    /** Create a render target provider for the wrapped layer. */\n    createRenderTargetTextureProvider) {\n        this.getWidth = getWidth;\n        this.getHeight = getHeight;\n        this.layer = layer;\n        this.layerType = layerType;\n        this.createRenderTargetTextureProvider = createRenderTargetTextureProvider;\n    }\n}\n//# sourceMappingURL=webXRLayerWrapper.js.map","import { Observable } from \"../Misc/observable.js\";\nimport { Tools } from \"../Misc/tools.js\";\nimport { WebXRWebGLLayerWrapper } from \"./webXRWebGLLayer.js\";\n/**\n * Configuration object for WebXR output canvas\n */\nexport class WebXRManagedOutputCanvasOptions {\n    /**\n     * Get the default values of the configuration object\n     * @param engine defines the engine to use (can be null)\n     * @returns default values of this configuration object\n     */\n    static GetDefaults(engine) {\n        const defaults = new WebXRManagedOutputCanvasOptions();\n        defaults.canvasOptions = {\n            antialias: true,\n            depth: true,\n            stencil: engine ? engine.isStencilEnable : true,\n            alpha: true,\n            framebufferScaleFactor: 1,\n        };\n        defaults.newCanvasCssStyle = \"position:absolute; bottom:0px;right:0px;z-index:10;width:90%;height:100%;background-color: #000000;\";\n        return defaults;\n    }\n}\n/**\n * Creates a canvas that is added/removed from the webpage when entering/exiting XR\n */\nexport class WebXRManagedOutputCanvas {\n    /**\n     * Initializes the canvas to be added/removed upon entering/exiting xr\n     * @param _xrSessionManager The XR Session manager\n     * @param _options optional configuration for this canvas output. defaults will be used if not provided\n     */\n    constructor(_xrSessionManager, _options = WebXRManagedOutputCanvasOptions.GetDefaults()) {\n        this._options = _options;\n        this._canvas = null;\n        this._engine = null;\n        /**\n         * xr layer for the canvas\n         */\n        this.xrLayer = null;\n        this._xrLayerWrapper = null;\n        /**\n         * Observers registered here will be triggered when the xr layer was initialized\n         */\n        this.onXRLayerInitObservable = new Observable();\n        this._engine = _xrSessionManager.scene.getEngine();\n        this._engine.onDisposeObservable.addOnce(() => {\n            this._engine = null;\n        });\n        if (!_options.canvasElement) {\n            const canvas = document.createElement(\"canvas\");\n            canvas.style.cssText = this._options.newCanvasCssStyle || \"position:absolute; bottom:0px;right:0px;\";\n            this._setManagedOutputCanvas(canvas);\n        }\n        else {\n            this._setManagedOutputCanvas(_options.canvasElement);\n        }\n        _xrSessionManager.onXRSessionInit.add(() => {\n            this._addCanvas();\n        });\n        _xrSessionManager.onXRSessionEnded.add(() => {\n            this._removeCanvas();\n        });\n    }\n    /**\n     * Disposes of the object\n     */\n    dispose() {\n        this._removeCanvas();\n        this._setManagedOutputCanvas(null);\n    }\n    /**\n     * Initializes a XRWebGLLayer to be used as the session's baseLayer.\n     * @param xrSession xr session\n     * @returns a promise that will resolve once the XR Layer has been created\n     */\n    async initializeXRLayerAsync(xrSession) {\n        const createLayer = () => {\n            this.xrLayer = new XRWebGLLayer(xrSession, this.canvasContext, this._options.canvasOptions);\n            this._xrLayerWrapper = new WebXRWebGLLayerWrapper(this.xrLayer);\n            this.onXRLayerInitObservable.notifyObservers(this.xrLayer);\n            return this.xrLayer;\n        };\n        // support canvases without makeXRCompatible\n        if (!this.canvasContext.makeXRCompatible) {\n            return Promise.resolve(createLayer());\n        }\n        return this.canvasContext\n            .makeXRCompatible()\n            .then(\n        // catch any error and continue. When using the emulator is throws this error for no apparent reason.\n        () => { }, () => {\n            // log the error, continue nonetheless!\n            Tools.Warn(\"Error executing makeXRCompatible. This does not mean that the session will work incorrectly.\");\n        })\n            .then(() => {\n            return createLayer();\n        });\n    }\n    _addCanvas() {\n        if (this._canvas && this._engine && this._canvas !== this._engine.getRenderingCanvas()) {\n            document.body.appendChild(this._canvas);\n        }\n        if (this.xrLayer) {\n            this._setCanvasSize(true);\n        }\n        else {\n            this.onXRLayerInitObservable.addOnce(() => {\n                this._setCanvasSize(true);\n            });\n        }\n    }\n    _removeCanvas() {\n        if (this._canvas && this._engine && document.body.contains(this._canvas) && this._canvas !== this._engine.getRenderingCanvas()) {\n            document.body.removeChild(this._canvas);\n        }\n        this._setCanvasSize(false);\n    }\n    _setCanvasSize(init = true, xrLayer = this._xrLayerWrapper) {\n        if (!this._canvas || !this._engine) {\n            return;\n        }\n        if (init) {\n            if (xrLayer) {\n                if (this._canvas !== this._engine.getRenderingCanvas()) {\n                    this._canvas.style.width = xrLayer.getWidth() + \"px\";\n                    this._canvas.style.height = xrLayer.getHeight() + \"px\";\n                }\n                else {\n                    this._engine.setSize(xrLayer.getWidth(), xrLayer.getHeight());\n                }\n            }\n        }\n        else {\n            if (this._originalCanvasSize) {\n                if (this._canvas !== this._engine.getRenderingCanvas()) {\n                    this._canvas.style.width = this._originalCanvasSize.width + \"px\";\n                    this._canvas.style.height = this._originalCanvasSize.height + \"px\";\n                }\n                else {\n                    this._engine.setSize(this._originalCanvasSize.width, this._originalCanvasSize.height);\n                }\n            }\n        }\n    }\n    _setManagedOutputCanvas(canvas) {\n        this._removeCanvas();\n        if (!canvas) {\n            this._canvas = null;\n            this.canvasContext = null;\n        }\n        else {\n            this._originalCanvasSize = {\n                width: canvas.offsetWidth,\n                height: canvas.offsetHeight,\n            };\n            this._canvas = canvas;\n            this.canvasContext = this._canvas.getContext(\"webgl2\");\n            if (!this.canvasContext) {\n                this.canvasContext = this._canvas.getContext(\"webgl\");\n            }\n        }\n    }\n}\n//# sourceMappingURL=webXRManagedOutputCanvas.js.map","import { WebGLHardwareTexture } from \"../Engines/WebGL/webGLHardwareTexture.js\";\nimport { InternalTexture, InternalTextureSource } from \"../Materials/Textures/internalTexture.js\";\nimport { MultiviewRenderTarget } from \"../Materials/Textures/MultiviewRenderTarget.js\";\nimport { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture.js\";\n/**\n * Provides render target textures and other important rendering information for a given XRLayer.\n * @internal\n */\nexport class WebXRLayerRenderTargetTextureProvider {\n    constructor(_scene, layerWrapper) {\n        this._scene = _scene;\n        this.layerWrapper = layerWrapper;\n        this._renderTargetTextures = new Array();\n        this._engine = _scene.getEngine();\n    }\n    _createInternalTexture(textureSize, texture) {\n        const internalTexture = new InternalTexture(this._engine, InternalTextureSource.Unknown, true);\n        internalTexture.width = textureSize.width;\n        internalTexture.height = textureSize.height;\n        internalTexture._hardwareTexture = new WebGLHardwareTexture(texture, this._engine._gl);\n        internalTexture.isReady = true;\n        return internalTexture;\n    }\n    _createRenderTargetTexture(width, height, framebuffer, colorTexture, depthStencilTexture, multiview) {\n        if (!this._engine) {\n            throw new Error(\"Engine is disposed\");\n        }\n        const textureSize = { width, height };\n        // Create render target texture from the internal texture\n        const renderTargetTexture = multiview ? new MultiviewRenderTarget(this._scene, textureSize) : new RenderTargetTexture(\"XR renderTargetTexture\", textureSize, this._scene);\n        const renderTargetWrapper = renderTargetTexture.renderTarget;\n        renderTargetWrapper._samples = renderTargetTexture.samples;\n        // Set the framebuffer, make sure it works in all scenarios - emulator, no layers and layers\n        if (framebuffer || !colorTexture) {\n            renderTargetWrapper._framebuffer = framebuffer;\n        }\n        // Create internal texture\n        if (colorTexture) {\n            if (multiview) {\n                renderTargetWrapper._colorTextureArray = colorTexture;\n            }\n            else {\n                const internalTexture = this._createInternalTexture(textureSize, colorTexture);\n                renderTargetWrapper.setTexture(internalTexture, 0);\n                renderTargetTexture._texture = internalTexture;\n            }\n        }\n        if (depthStencilTexture) {\n            if (multiview) {\n                renderTargetWrapper._depthStencilTextureArray = depthStencilTexture;\n            }\n            else {\n                renderTargetWrapper._depthStencilTexture = this._createInternalTexture(textureSize, depthStencilTexture);\n            }\n        }\n        renderTargetTexture.disableRescaling();\n        // Firefox reality fails if skipInitialClear is set to true, so make sure only modern XR implementations set it.\n        if (typeof XRWebGLBinding !== \"undefined\") {\n            // WebXR pre-clears textures\n            renderTargetTexture.skipInitialClear = true;\n        }\n        this._renderTargetTextures.push(renderTargetTexture);\n        return renderTargetTexture;\n    }\n    _destroyRenderTargetTexture(renderTargetTexture) {\n        this._renderTargetTextures.splice(this._renderTargetTextures.indexOf(renderTargetTexture), 1);\n        renderTargetTexture.dispose();\n    }\n    getFramebufferDimensions() {\n        return this._framebufferDimensions;\n    }\n    dispose() {\n        this._renderTargetTextures.forEach((rtt) => rtt.dispose());\n        this._renderTargetTextures.length = 0;\n    }\n}\n//# sourceMappingURL=webXRRenderTargetTextureProvider.js.map","import { Logger } from \"../Misc/logger.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { WebXRManagedOutputCanvas, WebXRManagedOutputCanvasOptions } from \"./webXRManagedOutputCanvas.js\";\nimport { NativeXRLayerWrapper, NativeXRRenderTarget } from \"./native/nativeXRRenderTarget.js\";\nimport { WebXRWebGLLayerWrapper } from \"./webXRWebGLLayer.js\";\n/**\n * Manages an XRSession to work with Babylon's engine\n * @see https://doc.babylonjs.com/features/featuresDeepDive/webXR/webXRSessionManagers\n */\nexport class WebXRSessionManager {\n    /**\n     * Constructs a WebXRSessionManager, this must be initialized within a user action before usage\n     * @param scene The scene which the session should be created for\n     */\n    constructor(\n    /** The scene which the session should be created for */\n    scene) {\n        this.scene = scene;\n        /** WebXR timestamp updated every frame */\n        this.currentTimestamp = -1;\n        /**\n         * Used just in case of a failure to initialize an immersive session.\n         * The viewer reference space is compensated using this height, creating a kind of \"viewer-floor\" reference space\n         */\n        this.defaultHeightCompensation = 1.7;\n        /**\n         * Fires every time a new xrFrame arrives which can be used to update the camera\n         */\n        this.onXRFrameObservable = new Observable();\n        /**\n         * Fires when the reference space changed\n         */\n        this.onXRReferenceSpaceChanged = new Observable();\n        /**\n         * Fires when the xr session is ended either by the device or manually done\n         */\n        this.onXRSessionEnded = new Observable();\n        /**\n         * Fires when the xr session is initialized: right after requestSession was called and returned with a successful result\n         */\n        this.onXRSessionInit = new Observable();\n        /**\n         * Are we currently in the XR loop?\n         */\n        this.inXRFrameLoop = false;\n        /**\n         * Are we in an XR session?\n         */\n        this.inXRSession = false;\n        this._engine = scene.getEngine();\n        this._onEngineDisposedObserver = this._engine.onDisposeObservable.addOnce(() => {\n            this._engine = null;\n        });\n        scene.onDisposeObservable.addOnce(() => {\n            this.dispose();\n        });\n    }\n    /**\n     * The current reference space used in this session. This reference space can constantly change!\n     * It is mainly used to offset the camera's position.\n     */\n    get referenceSpace() {\n        return this._referenceSpace;\n    }\n    /**\n     * Set a new reference space and triggers the observable\n     */\n    set referenceSpace(newReferenceSpace) {\n        this._referenceSpace = newReferenceSpace;\n        this.onXRReferenceSpaceChanged.notifyObservers(this._referenceSpace);\n    }\n    /**\n     * The mode for the managed XR session\n     */\n    get sessionMode() {\n        return this._sessionMode;\n    }\n    /**\n     * Disposes of the session manager\n     * This should be called explicitly by the dev, if required.\n     */\n    dispose() {\n        var _a;\n        // disposing without leaving XR? Exit XR first\n        if (this.inXRSession) {\n            this.exitXRAsync();\n        }\n        this.onXRFrameObservable.clear();\n        this.onXRSessionEnded.clear();\n        this.onXRReferenceSpaceChanged.clear();\n        this.onXRSessionInit.clear();\n        (_a = this._engine) === null || _a === void 0 ? void 0 : _a.onDisposeObservable.remove(this._onEngineDisposedObserver);\n        this._engine = null;\n    }\n    /**\n     * Stops the xrSession and restores the render loop\n     * @returns Promise which resolves after it exits XR\n     */\n    exitXRAsync() {\n        if (this.session && this.inXRSession) {\n            this.inXRSession = false;\n            return this.session.end().catch(() => {\n                Logger.Warn(\"Could not end XR session.\");\n            });\n        }\n        return Promise.resolve();\n    }\n    /**\n     * Attempts to set the framebuffer-size-normalized viewport to be rendered this frame for this view.\n     * In the event of a failure, the supplied viewport is not updated.\n     * @param viewport the viewport to which the view will be rendered\n     * @param view the view for which to set the viewport\n     * @returns whether the operation was successful\n     */\n    trySetViewportForView(viewport, view) {\n        var _a;\n        return ((_a = this._baseLayerRTTProvider) === null || _a === void 0 ? void 0 : _a.trySetViewportForView(viewport, view)) || false;\n    }\n    /**\n     * Gets the correct render target texture to be rendered this frame for this eye\n     * @param eye the eye for which to get the render target\n     * @returns the render target for the specified eye or null if not available\n     */\n    getRenderTargetTextureForEye(eye) {\n        var _a;\n        return ((_a = this._baseLayerRTTProvider) === null || _a === void 0 ? void 0 : _a.getRenderTargetTextureForEye(eye)) || null;\n    }\n    /**\n     * Gets the correct render target texture to be rendered this frame for this view\n     * @param view the view for which to get the render target\n     * @returns the render target for the specified view or null if not available\n     */\n    getRenderTargetTextureForView(view) {\n        var _a;\n        return ((_a = this._baseLayerRTTProvider) === null || _a === void 0 ? void 0 : _a.getRenderTargetTextureForView(view)) || null;\n    }\n    /**\n     * Creates a WebXRRenderTarget object for the XR session\n     * @param options optional options to provide when creating a new render target\n     * @returns a WebXR render target to which the session can render\n     */\n    getWebXRRenderTarget(options) {\n        const engine = this.scene.getEngine();\n        if (this._xrNavigator.xr.native) {\n            return new NativeXRRenderTarget(this);\n        }\n        else {\n            options = options || WebXRManagedOutputCanvasOptions.GetDefaults(engine);\n            options.canvasElement = options.canvasElement || engine.getRenderingCanvas() || undefined;\n            return new WebXRManagedOutputCanvas(this, options);\n        }\n    }\n    /**\n     * Initializes the manager\n     * After initialization enterXR can be called to start an XR session\n     * @returns Promise which resolves after it is initialized\n     */\n    initializeAsync() {\n        // Check if the browser supports webXR\n        this._xrNavigator = navigator;\n        if (!this._xrNavigator.xr) {\n            return Promise.reject(\"WebXR not available\");\n        }\n        return Promise.resolve();\n    }\n    /**\n     * Initializes an xr session\n     * @param xrSessionMode mode to initialize\n     * @param xrSessionInit defines optional and required values to pass to the session builder\n     * @returns a promise which will resolve once the session has been initialized\n     */\n    initializeSessionAsync(xrSessionMode = \"immersive-vr\", xrSessionInit = {}) {\n        return this._xrNavigator.xr.requestSession(xrSessionMode, xrSessionInit).then((session) => {\n            this.session = session;\n            this._sessionMode = xrSessionMode;\n            this.onXRSessionInit.notifyObservers(session);\n            this.inXRSession = true;\n            // handle when the session is ended (By calling session.end or device ends its own session eg. pressing home button on phone)\n            this.session.addEventListener(\"end\", () => {\n                var _a;\n                this.inXRSession = false;\n                // Notify frame observers\n                this.onXRSessionEnded.notifyObservers(null);\n                if (this._engine) {\n                    // make sure dimensions object is restored\n                    this._engine.framebufferDimensionsObject = null;\n                    // Restore frame buffer to avoid clear on xr framebuffer after session end\n                    this._engine.restoreDefaultFramebuffer();\n                    // Need to restart render loop as after the session is ended the last request for new frame will never call callback\n                    this._engine.customAnimationFrameRequester = null;\n                    this._engine._renderLoop();\n                }\n                // Dispose render target textures.\n                // Only dispose on native because we can't destroy opaque textures on browser.\n                if (this.isNative) {\n                    (_a = this._baseLayerRTTProvider) === null || _a === void 0 ? void 0 : _a.dispose();\n                }\n                this._baseLayerRTTProvider = null;\n                this._baseLayerWrapper = null;\n            }, { once: true });\n            return this.session;\n        });\n    }\n    /**\n     * Checks if a session would be supported for the creation options specified\n     * @param sessionMode session mode to check if supported eg. immersive-vr\n     * @returns A Promise that resolves to true if supported and false if not\n     */\n    isSessionSupportedAsync(sessionMode) {\n        return WebXRSessionManager.IsSessionSupportedAsync(sessionMode);\n    }\n    /**\n     * Resets the reference space to the one started the session\n     */\n    resetReferenceSpace() {\n        this.referenceSpace = this.baseReferenceSpace;\n    }\n    /**\n     * Starts rendering to the xr layer\n     */\n    runXRRenderLoop() {\n        var _a;\n        if (!this.inXRSession || !this._engine) {\n            return;\n        }\n        // Tell the engine's render loop to be driven by the xr session's refresh rate and provide xr pose information\n        this._engine.customAnimationFrameRequester = {\n            requestAnimationFrame: this.session.requestAnimationFrame.bind(this.session),\n            renderFunction: (timestamp, xrFrame) => {\n                var _a;\n                if (!this.inXRSession || !this._engine) {\n                    return;\n                }\n                // Store the XR frame and timestamp in the session manager\n                this.currentFrame = xrFrame;\n                this.currentTimestamp = timestamp;\n                if (xrFrame) {\n                    this.inXRFrameLoop = true;\n                    this._engine.framebufferDimensionsObject = ((_a = this._baseLayerRTTProvider) === null || _a === void 0 ? void 0 : _a.getFramebufferDimensions()) || null;\n                    this.onXRFrameObservable.notifyObservers(xrFrame);\n                    this._engine._renderLoop();\n                    this._engine.framebufferDimensionsObject = null;\n                    this.inXRFrameLoop = false;\n                }\n            },\n        };\n        this._engine.framebufferDimensionsObject = ((_a = this._baseLayerRTTProvider) === null || _a === void 0 ? void 0 : _a.getFramebufferDimensions()) || null;\n        // Stop window's animation frame and trigger sessions animation frame\n        if (typeof window !== \"undefined\" && window.cancelAnimationFrame) {\n            window.cancelAnimationFrame(this._engine._frameHandler);\n        }\n        this._engine._renderLoop();\n    }\n    /**\n     * Sets the reference space on the xr session\n     * @param referenceSpaceType space to set\n     * @returns a promise that will resolve once the reference space has been set\n     */\n    setReferenceSpaceTypeAsync(referenceSpaceType = \"local-floor\") {\n        return this.session\n            .requestReferenceSpace(referenceSpaceType)\n            .then((referenceSpace) => {\n            return referenceSpace;\n        }, (rejectionReason) => {\n            Logger.Error(\"XR.requestReferenceSpace failed for the following reason: \");\n            Logger.Error(rejectionReason);\n            Logger.Log('Defaulting to universally-supported \"viewer\" reference space type.');\n            return this.session.requestReferenceSpace(\"viewer\").then((referenceSpace) => {\n                const heightCompensation = new XRRigidTransform({ x: 0, y: -this.defaultHeightCompensation, z: 0 });\n                return referenceSpace.getOffsetReferenceSpace(heightCompensation);\n            }, (rejectionReason) => {\n                Logger.Error(rejectionReason);\n                throw 'XR initialization failed: required \"viewer\" reference space type not supported.';\n            });\n        })\n            .then((referenceSpace) => {\n            // create viewer reference space before setting the first reference space\n            return this.session.requestReferenceSpace(\"viewer\").then((viewerReferenceSpace) => {\n                this.viewerReferenceSpace = viewerReferenceSpace;\n                return referenceSpace;\n            });\n        })\n            .then((referenceSpace) => {\n            // initialize the base and offset (currently the same)\n            this.referenceSpace = this.baseReferenceSpace = referenceSpace;\n            return this.referenceSpace;\n        });\n    }\n    /**\n     * Updates the render state of the session.\n     * Note that this is deprecated in favor of WebXRSessionManager.updateRenderState().\n     * @param state state to set\n     * @returns a promise that resolves once the render state has been updated\n     * @deprecated\n     */\n    updateRenderStateAsync(state) {\n        return Promise.resolve(this.session.updateRenderState(state));\n    }\n    /**\n     * @internal\n     */\n    _setBaseLayerWrapper(baseLayerWrapper) {\n        var _a, _b;\n        if (this.isNative) {\n            (_a = this._baseLayerRTTProvider) === null || _a === void 0 ? void 0 : _a.dispose();\n        }\n        this._baseLayerWrapper = baseLayerWrapper;\n        this._baseLayerRTTProvider = ((_b = this._baseLayerWrapper) === null || _b === void 0 ? void 0 : _b.createRenderTargetTextureProvider(this)) || null;\n    }\n    /**\n     * Updates the render state of the session\n     * @param state state to set\n     */\n    updateRenderState(state) {\n        if (state.baseLayer) {\n            this._setBaseLayerWrapper(this.isNative ? new NativeXRLayerWrapper(state.baseLayer) : new WebXRWebGLLayerWrapper(state.baseLayer));\n        }\n        this.session.updateRenderState(state);\n    }\n    /**\n     * Returns a promise that resolves with a boolean indicating if the provided session mode is supported by this browser\n     * @param sessionMode defines the session to test\n     * @returns a promise with boolean as final value\n     */\n    static IsSessionSupportedAsync(sessionMode) {\n        if (!navigator.xr) {\n            return Promise.resolve(false);\n        }\n        // When the specs are final, remove supportsSession!\n        const functionToUse = navigator.xr.isSessionSupported || navigator.xr.supportsSession;\n        if (!functionToUse) {\n            return Promise.resolve(false);\n        }\n        else {\n            return functionToUse\n                .call(navigator.xr, sessionMode)\n                .then((result) => {\n                const returnValue = typeof result === \"undefined\" ? true : result;\n                return Promise.resolve(returnValue);\n            })\n                .catch((e) => {\n                Logger.Warn(e);\n                return Promise.resolve(false);\n            });\n        }\n    }\n    /**\n     * Returns true if Babylon.js is using the BabylonNative backend, otherwise false\n     */\n    get isNative() {\n        var _a;\n        return (_a = this._xrNavigator.xr.native) !== null && _a !== void 0 ? _a : false;\n    }\n    /**\n     * The current frame rate as reported by the device\n     */\n    get currentFrameRate() {\n        var _a;\n        return (_a = this.session) === null || _a === void 0 ? void 0 : _a.frameRate;\n    }\n    /**\n     * A list of supported frame rates (only available in-session!\n     */\n    get supportedFrameRates() {\n        var _a;\n        return (_a = this.session) === null || _a === void 0 ? void 0 : _a.supportedFrameRates;\n    }\n    /**\n     * Set the framerate of the session.\n     * @param rate the new framerate. This value needs to be in the supportedFrameRates array\n     * @returns a promise that resolves once the framerate has been set\n     */\n    updateTargetFrameRate(rate) {\n        return this.session.updateTargetFrameRate(rate);\n    }\n    /**\n     * Run a callback in the xr render loop\n     * @param callback the callback to call when in XR Frame\n     * @param ignoreIfNotInSession if no session is currently running, run it first thing on the next session\n     */\n    runInXRFrame(callback, ignoreIfNotInSession = true) {\n        if (this.inXRFrameLoop) {\n            callback();\n        }\n        else if (this.inXRSession || !ignoreIfNotInSession) {\n            this.onXRFrameObservable.addOnce(callback);\n        }\n    }\n    /**\n     * Check if fixed foveation is supported on this device\n     */\n    get isFixedFoveationSupported() {\n        var _a;\n        return ((_a = this._baseLayerWrapper) === null || _a === void 0 ? void 0 : _a.isFixedFoveationSupported) || false;\n    }\n    /**\n     * Get the fixed foveation currently set, as specified by the webxr specs\n     * If this returns null, then fixed foveation is not supported\n     */\n    get fixedFoveation() {\n        var _a;\n        return ((_a = this._baseLayerWrapper) === null || _a === void 0 ? void 0 : _a.fixedFoveation) || null;\n    }\n    /**\n     * Set the fixed foveation to the specified value, as specified by the webxr specs\n     * This value will be normalized to be between 0 and 1, 1 being max foveation, 0 being no foveation\n     */\n    set fixedFoveation(value) {\n        const val = Math.max(0, Math.min(1, value || 0));\n        if (this._baseLayerWrapper) {\n            this._baseLayerWrapper.fixedFoveation = val;\n        }\n    }\n}\n//# sourceMappingURL=webXRSessionManager.js.map","/**\n * States of the webXR experience\n */\nexport var WebXRState;\n(function (WebXRState) {\n    /**\n     * Transitioning to being in XR mode\n     */\n    WebXRState[WebXRState[\"ENTERING_XR\"] = 0] = \"ENTERING_XR\";\n    /**\n     * Transitioning to non XR mode\n     */\n    WebXRState[WebXRState[\"EXITING_XR\"] = 1] = \"EXITING_XR\";\n    /**\n     * In XR mode and presenting\n     */\n    WebXRState[WebXRState[\"IN_XR\"] = 2] = \"IN_XR\";\n    /**\n     * Not entered XR mode\n     */\n    WebXRState[WebXRState[\"NOT_IN_XR\"] = 3] = \"NOT_IN_XR\";\n})(WebXRState || (WebXRState = {}));\n/**\n * The state of the XR camera's tracking\n */\nexport var WebXRTrackingState;\n(function (WebXRTrackingState) {\n    /**\n     * No transformation received, device is not being tracked\n     */\n    WebXRTrackingState[WebXRTrackingState[\"NOT_TRACKING\"] = 0] = \"NOT_TRACKING\";\n    /**\n     * Tracking lost - using emulated position\n     */\n    WebXRTrackingState[WebXRTrackingState[\"TRACKING_LOST\"] = 1] = \"TRACKING_LOST\";\n    /**\n     * Transformation tracking works normally\n     */\n    WebXRTrackingState[WebXRTrackingState[\"TRACKING\"] = 2] = \"TRACKING\";\n})(WebXRTrackingState || (WebXRTrackingState = {}));\n//# sourceMappingURL=webXRTypes.js.map","import { WebXRLayerWrapper } from \"./webXRLayerWrapper.js\";\nimport { WebXRLayerRenderTargetTextureProvider } from \"./webXRRenderTargetTextureProvider.js\";\n/**\n * Wraps xr webgl layers.\n * @internal\n */\nexport class WebXRWebGLLayerWrapper extends WebXRLayerWrapper {\n    /**\n     * @param layer is the layer to be wrapped.\n     * @returns a new WebXRLayerWrapper wrapping the provided XRWebGLLayer.\n     */\n    constructor(layer) {\n        super(() => layer.framebufferWidth, () => layer.framebufferHeight, layer, \"XRWebGLLayer\", (sessionManager) => new WebXRWebGLLayerRenderTargetTextureProvider(sessionManager.scene, this));\n        this.layer = layer;\n    }\n}\n/**\n * Provides render target textures and other important rendering information for a given XRWebGLLayer.\n * @internal\n */\nexport class WebXRWebGLLayerRenderTargetTextureProvider extends WebXRLayerRenderTargetTextureProvider {\n    constructor(scene, layerWrapper) {\n        super(scene, layerWrapper);\n        this.layerWrapper = layerWrapper;\n        this._layer = layerWrapper.layer;\n        this._framebufferDimensions = {\n            framebufferWidth: this._layer.framebufferWidth,\n            framebufferHeight: this._layer.framebufferHeight,\n        };\n    }\n    trySetViewportForView(viewport, view) {\n        const xrViewport = this._layer.getViewport(view);\n        if (!xrViewport) {\n            return false;\n        }\n        const framebufferWidth = this._framebufferDimensions.framebufferWidth;\n        const framebufferHeight = this._framebufferDimensions.framebufferHeight;\n        viewport.x = xrViewport.x / framebufferWidth;\n        viewport.y = xrViewport.y / framebufferHeight;\n        viewport.width = xrViewport.width / framebufferWidth;\n        viewport.height = xrViewport.height / framebufferHeight;\n        return true;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getRenderTargetTextureForEye(eye) {\n        const layerWidth = this._layer.framebufferWidth;\n        const layerHeight = this._layer.framebufferHeight;\n        const framebuffer = this._layer.framebuffer;\n        if (!this._rtt ||\n            layerWidth !== this._framebufferDimensions.framebufferWidth ||\n            layerHeight !== this._framebufferDimensions.framebufferHeight ||\n            framebuffer !== this._framebuffer) {\n            this._rtt = this._createRenderTargetTexture(layerWidth, layerHeight, framebuffer);\n            this._framebufferDimensions.framebufferWidth = layerWidth;\n            this._framebufferDimensions.framebufferHeight = layerHeight;\n            this._framebuffer = framebuffer;\n        }\n        return this._rtt;\n    }\n    getRenderTargetTextureForView(view) {\n        return this.getRenderTargetTextureForEye(view.eye);\n    }\n}\n//# sourceMappingURL=webXRWebGLLayer.js.map","/**\n * Base class of the scene acting as a container for the different elements composing a scene.\n * This class is dynamically extended by the different components of the scene increasing\n * flexibility and reducing coupling\n */\nexport class AbstractScene {\n    constructor() {\n        /**\n         * Gets the list of root nodes (ie. nodes with no parent)\n         */\n        this.rootNodes = new Array();\n        /** All of the cameras added to this scene\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras\n         */\n        this.cameras = new Array();\n        /**\n         * All of the lights added to this scene\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\n         */\n        this.lights = new Array();\n        /**\n         * All of the (abstract) meshes added to this scene\n         */\n        this.meshes = new Array();\n        /**\n         * The list of skeletons added to the scene\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/bonesSkeletons\n         */\n        this.skeletons = new Array();\n        /**\n         * All of the particle systems added to this scene\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/particles/particle_system/particle_system_intro\n         */\n        this.particleSystems = new Array();\n        /**\n         * Gets a list of Animations associated with the scene\n         */\n        this.animations = [];\n        /**\n         * All of the animation groups added to this scene\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/groupAnimations\n         */\n        this.animationGroups = new Array();\n        /**\n         * All of the multi-materials added to this scene\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/multiMaterials\n         */\n        this.multiMaterials = new Array();\n        /**\n         * All of the materials added to this scene\n         * In the context of a Scene, it is not supposed to be modified manually.\n         * Any addition or removal should be done using the addMaterial and removeMaterial Scene methods.\n         * Note also that the order of the Material within the array is not significant and might change.\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction\n         */\n        this.materials = new Array();\n        /**\n         * The list of morph target managers added to the scene\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/dynamicMeshMorph\n         */\n        this.morphTargetManagers = new Array();\n        /**\n         * The list of geometries used in the scene.\n         */\n        this.geometries = new Array();\n        /**\n         * All of the transform nodes added to this scene\n         * In the context of a Scene, it is not supposed to be modified manually.\n         * Any addition or removal should be done using the addTransformNode and removeTransformNode Scene methods.\n         * Note also that the order of the TransformNode within the array is not significant and might change.\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/parent_pivot/transform_node\n         */\n        this.transformNodes = new Array();\n        /**\n         * ActionManagers available on the scene.\n         * @deprecated\n         */\n        this.actionManagers = new Array();\n        /**\n         * Textures to keep.\n         */\n        this.textures = new Array();\n        /** @internal */\n        this._environmentTexture = null;\n        /**\n         * The list of postprocesses added to the scene\n         */\n        this.postProcesses = new Array();\n    }\n    /**\n     * Adds a parser in the list of available ones\n     * @param name Defines the name of the parser\n     * @param parser Defines the parser to add\n     */\n    static AddParser(name, parser) {\n        this._BabylonFileParsers[name] = parser;\n    }\n    /**\n     * Gets a general parser from the list of available ones\n     * @param name Defines the name of the parser\n     * @returns the requested parser or null\n     */\n    static GetParser(name) {\n        if (this._BabylonFileParsers[name]) {\n            return this._BabylonFileParsers[name];\n        }\n        return null;\n    }\n    /**\n     * Adds n individual parser in the list of available ones\n     * @param name Defines the name of the parser\n     * @param parser Defines the parser to add\n     */\n    static AddIndividualParser(name, parser) {\n        this._IndividualBabylonFileParsers[name] = parser;\n    }\n    /**\n     * Gets an individual parser from the list of available ones\n     * @param name Defines the name of the parser\n     * @returns the requested parser or null\n     */\n    static GetIndividualParser(name) {\n        if (this._IndividualBabylonFileParsers[name]) {\n            return this._IndividualBabylonFileParsers[name];\n        }\n        return null;\n    }\n    /**\n     * Parser json data and populate both a scene and its associated container object\n     * @param jsonData Defines the data to parse\n     * @param scene Defines the scene to parse the data for\n     * @param container Defines the container attached to the parsing sequence\n     * @param rootUrl Defines the root url of the data\n     */\n    static Parse(jsonData, scene, container, rootUrl) {\n        for (const parserName in this._BabylonFileParsers) {\n            if (Object.prototype.hasOwnProperty.call(this._BabylonFileParsers, parserName)) {\n                this._BabylonFileParsers[parserName](jsonData, scene, container, rootUrl);\n            }\n        }\n    }\n    /**\n     * Texture used in all pbr material as the reflection texture.\n     * As in the majority of the scene they are the same (exception for multi room and so on),\n     * this is easier to reference from here than from all the materials.\n     */\n    get environmentTexture() {\n        return this._environmentTexture;\n    }\n    set environmentTexture(value) {\n        this._environmentTexture = value;\n    }\n    /**\n     * @returns all meshes, lights, cameras, transformNodes and bones\n     */\n    getNodes() {\n        let nodes = new Array();\n        nodes = nodes.concat(this.meshes);\n        nodes = nodes.concat(this.lights);\n        nodes = nodes.concat(this.cameras);\n        nodes = nodes.concat(this.transformNodes); // dummies\n        this.skeletons.forEach((skeleton) => (nodes = nodes.concat(skeleton.bones)));\n        return nodes;\n    }\n}\n/**\n * Stores the list of available parsers in the application.\n */\nAbstractScene._BabylonFileParsers = {};\n/**\n * Stores the list of available individual parsers in the application.\n */\nAbstractScene._IndividualBabylonFileParsers = {};\n//# sourceMappingURL=abstractScene.js.map","import { AbstractScene } from \"./abstractScene.js\";\nimport { Mesh } from \"./Meshes/mesh.js\";\nimport { TransformNode } from \"./Meshes/transformNode.js\";\nimport { Logger } from \"./Misc/logger.js\";\nimport { EngineStore } from \"./Engines/engineStore.js\";\nimport { InstancedMesh } from \"./Meshes/instancedMesh.js\";\nimport { Light } from \"./Lights/light.js\";\nimport { Camera } from \"./Cameras/camera.js\";\nimport { Tools } from \"./Misc/tools.js\";\n/**\n * Set of assets to keep when moving a scene into an asset container.\n */\nexport class KeepAssets extends AbstractScene {\n}\n/**\n * Class used to store the output of the AssetContainer.instantiateAllMeshesToScene function\n */\nexport class InstantiatedEntries {\n    constructor() {\n        /**\n         * List of new root nodes (eg. nodes with no parent)\n         */\n        this.rootNodes = [];\n        /**\n         * List of new skeletons\n         */\n        this.skeletons = [];\n        /**\n         * List of new animation groups\n         */\n        this.animationGroups = [];\n    }\n    /**\n     * Disposes the instantiated entries from the scene\n     */\n    dispose() {\n        this.rootNodes.slice(0).forEach((o) => {\n            o.dispose();\n        });\n        this.rootNodes.length = 0;\n        this.skeletons.slice(0).forEach((o) => {\n            o.dispose();\n        });\n        this.skeletons.length = 0;\n        this.animationGroups.slice(0).forEach((o) => {\n            o.dispose();\n        });\n        this.animationGroups.length = 0;\n    }\n}\n/**\n * Container with a set of assets that can be added or removed from a scene.\n */\nexport class AssetContainer extends AbstractScene {\n    /**\n     * Instantiates an AssetContainer.\n     * @param scene The scene the AssetContainer belongs to.\n     */\n    constructor(scene) {\n        super();\n        this._wasAddedToScene = false;\n        scene = scene || EngineStore.LastCreatedScene;\n        if (!scene) {\n            return;\n        }\n        this.scene = scene;\n        this[\"sounds\"] = [];\n        this[\"effectLayers\"] = [];\n        this[\"layers\"] = [];\n        this[\"lensFlareSystems\"] = [];\n        this[\"proceduralTextures\"] = [];\n        this[\"reflectionProbes\"] = [];\n        scene.onDisposeObservable.add(() => {\n            if (!this._wasAddedToScene) {\n                this.dispose();\n            }\n        });\n        this._onContextRestoredObserver = scene.getEngine().onContextRestoredObservable.add(() => {\n            for (const geometry of this.geometries) {\n                geometry._rebuild();\n            }\n            for (const mesh of this.meshes) {\n                mesh._rebuild();\n            }\n            for (const system of this.particleSystems) {\n                system.rebuild();\n            }\n            for (const texture of this.textures) {\n                texture._rebuild();\n            }\n        });\n    }\n    /**\n     * Given a list of nodes, return a topological sorting of them.\n     * @param nodes\n     */\n    _topologicalSort(nodes) {\n        const nodesUidMap = new Map();\n        for (const node of nodes) {\n            nodesUidMap.set(node.uniqueId, node);\n        }\n        const dependencyGraph = {\n            dependsOn: new Map(),\n            dependedBy: new Map(), // given a node id, what are the ids of the nodes that depend on it\n        };\n        // Build the dependency graph given the list of nodes\n        // First pass: Initialize the empty dependency graph\n        for (const node of nodes) {\n            const nodeId = node.uniqueId;\n            dependencyGraph.dependsOn.set(nodeId, new Set());\n            dependencyGraph.dependedBy.set(nodeId, new Set());\n        }\n        // Second pass: Populate the dependency graph. We assume that we\n        // don't need to check for cycles here, as the scene graph cannot\n        // contain cycles. Our graph also already contains all transitive\n        // dependencies because getDescendants returns the transitive\n        // dependencies by default.\n        for (const node of nodes) {\n            const nodeId = node.uniqueId;\n            const dependsOn = dependencyGraph.dependsOn.get(nodeId);\n            if (node instanceof InstancedMesh) {\n                const masterMesh = node.sourceMesh;\n                if (nodesUidMap.has(masterMesh.uniqueId)) {\n                    dependsOn.add(masterMesh.uniqueId);\n                    dependencyGraph.dependedBy.get(masterMesh.uniqueId).add(nodeId);\n                }\n            }\n            const dependedBy = dependencyGraph.dependedBy.get(nodeId);\n            for (const child of node.getDescendants()) {\n                const childId = child.uniqueId;\n                if (nodesUidMap.has(childId)) {\n                    dependedBy.add(childId);\n                    const childDependsOn = dependencyGraph.dependsOn.get(childId);\n                    childDependsOn.add(nodeId);\n                }\n            }\n        }\n        // Third pass: Topological sort\n        const sortedNodes = [];\n        // First: Find all nodes that have no dependencies\n        const leaves = [];\n        for (const node of nodes) {\n            const nodeId = node.uniqueId;\n            if (dependencyGraph.dependsOn.get(nodeId).size === 0) {\n                leaves.push(node);\n                nodesUidMap.delete(nodeId);\n            }\n        }\n        const visitList = leaves;\n        while (visitList.length > 0) {\n            const nodeToVisit = visitList.shift();\n            sortedNodes.push(nodeToVisit);\n            // Remove the node from the dependency graph\n            // When a node is visited, we know that dependsOn is empty.\n            // So we only need to remove the node from dependedBy.\n            const dependedByVisitedNode = dependencyGraph.dependedBy.get(nodeToVisit.uniqueId);\n            // Array.from(x.values()) is to make the TS compiler happy\n            for (const dependedByVisitedNodeId of Array.from(dependedByVisitedNode.values())) {\n                const dependsOnDependedByVisitedNode = dependencyGraph.dependsOn.get(dependedByVisitedNodeId);\n                dependsOnDependedByVisitedNode.delete(nodeToVisit.uniqueId);\n                if (dependsOnDependedByVisitedNode.size === 0 && nodesUidMap.get(dependedByVisitedNodeId)) {\n                    visitList.push(nodesUidMap.get(dependedByVisitedNodeId));\n                    nodesUidMap.delete(dependedByVisitedNodeId);\n                }\n            }\n        }\n        if (nodesUidMap.size > 0) {\n            console.error(\"SceneSerializer._topologicalSort: There were unvisited nodes:\");\n            nodesUidMap.forEach((node) => console.error(node.name));\n        }\n        return sortedNodes;\n    }\n    _addNodeAndDescendantsToList(list, addedIds, rootNode, predicate) {\n        if ((predicate && !predicate(rootNode)) || addedIds.has(rootNode.uniqueId)) {\n            return;\n        }\n        list.push(rootNode);\n        addedIds.add(rootNode.uniqueId);\n        for (const child of rootNode.getDescendants(true)) {\n            this._addNodeAndDescendantsToList(list, addedIds, child, predicate);\n        }\n    }\n    /**\n     * Check if a specific node is contained in this asset container.\n     * @param node\n     */\n    _isNodeInContainer(node) {\n        if (node instanceof Mesh && this.meshes.indexOf(node) !== -1) {\n            return true;\n        }\n        if (node instanceof TransformNode && this.transformNodes.indexOf(node) !== -1) {\n            return true;\n        }\n        if (node instanceof Light && this.lights.indexOf(node) !== -1) {\n            return true;\n        }\n        if (node instanceof Camera && this.cameras.indexOf(node) !== -1) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * For every node in the scene, check if its parent node is also in the scene.\n     */\n    _isValidHierarchy() {\n        for (const node of this.meshes) {\n            if (node.parent && !this._isNodeInContainer(node.parent)) {\n                Logger.Warn(`Node ${node.name} has a parent that is not in the container.`);\n                return false;\n            }\n        }\n        for (const node of this.transformNodes) {\n            if (node.parent && !this._isNodeInContainer(node.parent)) {\n                Logger.Warn(`Node ${node.name} has a parent that is not in the container.`);\n                return false;\n            }\n        }\n        for (const node of this.lights) {\n            if (node.parent && !this._isNodeInContainer(node.parent)) {\n                Logger.Warn(`Node ${node.name} has a parent that is not in the container.`);\n                return false;\n            }\n        }\n        for (const node of this.cameras) {\n            if (node.parent && !this._isNodeInContainer(node.parent)) {\n                Logger.Warn(`Node ${node.name} has a parent that is not in the container.`);\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Instantiate or clone all meshes and add the new ones to the scene.\n     * Skeletons and animation groups will all be cloned\n     * @param nameFunction defines an optional function used to get new names for clones\n     * @param cloneMaterials defines an optional boolean that defines if materials must be cloned as well (false by default)\n     * @param options defines an optional list of options to control how to instantiate / clone models\n     * @param options.doNotInstantiate defines if the model must be instantiated or just cloned\n     * @param options.predicate defines a predicate used to filter whih mesh to instantiate/clone\n     * @returns a list of rootNodes, skeletons and animation groups that were duplicated\n     */\n    instantiateModelsToScene(nameFunction, cloneMaterials = false, options) {\n        if (!this._isValidHierarchy()) {\n            Tools.Warn(\"SceneSerializer.InstantiateModelsToScene: The Asset Container hierarchy is not valid.\");\n        }\n        const conversionMap = {};\n        const storeMap = {};\n        const result = new InstantiatedEntries();\n        const alreadySwappedSkeletons = [];\n        const alreadySwappedMaterials = [];\n        const localOptions = {\n            doNotInstantiate: true,\n            ...options,\n        };\n        if (!localOptions.doNotInstantiate) {\n            // Always clone skinned meshes.\n            localOptions.doNotInstantiate = (node) => !!node.skeleton;\n        }\n        const onClone = (source, clone) => {\n            conversionMap[source.uniqueId] = clone.uniqueId;\n            storeMap[clone.uniqueId] = clone;\n            if (nameFunction) {\n                clone.name = nameFunction(source.name);\n            }\n            if (clone instanceof Mesh) {\n                const clonedMesh = clone;\n                if (clonedMesh.morphTargetManager) {\n                    const oldMorphTargetManager = source.morphTargetManager;\n                    clonedMesh.morphTargetManager = oldMorphTargetManager.clone();\n                    for (let index = 0; index < oldMorphTargetManager.numTargets; index++) {\n                        const oldTarget = oldMorphTargetManager.getTarget(index);\n                        const newTarget = clonedMesh.morphTargetManager.getTarget(index);\n                        conversionMap[oldTarget.uniqueId] = newTarget.uniqueId;\n                        storeMap[newTarget.uniqueId] = newTarget;\n                    }\n                }\n            }\n        };\n        const nodesToSort = [];\n        const idsOnSortList = new Set();\n        for (const transformNode of this.transformNodes) {\n            if (transformNode.parent === null) {\n                this._addNodeAndDescendantsToList(nodesToSort, idsOnSortList, transformNode, localOptions.predicate);\n            }\n        }\n        for (const mesh of this.meshes) {\n            if (mesh.parent === null) {\n                this._addNodeAndDescendantsToList(nodesToSort, idsOnSortList, mesh, localOptions.predicate);\n            }\n        }\n        // Topologically sort nodes by parenting/instancing relationships so that all resources are in place\n        // when a given node is instantiated.\n        const sortedNodes = this._topologicalSort(nodesToSort);\n        const onNewCreated = (source, clone) => {\n            onClone(source, clone);\n            if (source.parent) {\n                const replicatedParentId = conversionMap[source.parent.uniqueId];\n                const replicatedParent = storeMap[replicatedParentId];\n                if (replicatedParent) {\n                    clone.parent = replicatedParent;\n                }\n                else {\n                    clone.parent = source.parent;\n                }\n            }\n            clone.position.copyFrom(source.position);\n            clone.rotation.copyFrom(source.rotation);\n            clone.scaling.copyFrom(source.scaling);\n            if (clone.material) {\n                const mesh = clone;\n                if (mesh.material) {\n                    if (cloneMaterials) {\n                        const sourceMaterial = source.material;\n                        if (alreadySwappedMaterials.indexOf(sourceMaterial) === -1) {\n                            let swap = sourceMaterial.clone(nameFunction ? nameFunction(sourceMaterial.name) : \"Clone of \" + sourceMaterial.name);\n                            alreadySwappedMaterials.push(sourceMaterial);\n                            conversionMap[sourceMaterial.uniqueId] = swap.uniqueId;\n                            storeMap[swap.uniqueId] = swap;\n                            if (sourceMaterial.getClassName() === \"MultiMaterial\") {\n                                const multi = sourceMaterial;\n                                for (const material of multi.subMaterials) {\n                                    if (!material) {\n                                        continue;\n                                    }\n                                    swap = material.clone(nameFunction ? nameFunction(material.name) : \"Clone of \" + material.name);\n                                    alreadySwappedMaterials.push(material);\n                                    conversionMap[material.uniqueId] = swap.uniqueId;\n                                    storeMap[swap.uniqueId] = swap;\n                                }\n                                multi.subMaterials = multi.subMaterials.map((m) => m && storeMap[conversionMap[m.uniqueId]]);\n                            }\n                        }\n                        if (mesh.getClassName() !== \"InstancedMesh\") {\n                            mesh.material = storeMap[conversionMap[sourceMaterial.uniqueId]];\n                        }\n                    }\n                    else {\n                        if (mesh.material.getClassName() === \"MultiMaterial\") {\n                            if (this.scene.multiMaterials.indexOf(mesh.material) === -1) {\n                                this.scene.addMultiMaterial(mesh.material);\n                            }\n                        }\n                        else {\n                            if (this.scene.materials.indexOf(mesh.material) === -1) {\n                                this.scene.addMaterial(mesh.material);\n                            }\n                        }\n                    }\n                }\n            }\n            if (clone.parent === null) {\n                result.rootNodes.push(clone);\n            }\n        };\n        sortedNodes.forEach((node) => {\n            if (node.getClassName() === \"InstancedMesh\") {\n                const instancedNode = node;\n                const sourceMesh = instancedNode.sourceMesh;\n                const replicatedSourceId = conversionMap[sourceMesh.uniqueId];\n                const replicatedSource = typeof replicatedSourceId === \"number\" ? storeMap[replicatedSourceId] : sourceMesh;\n                const replicatedInstancedNode = replicatedSource.createInstance(instancedNode.name);\n                onNewCreated(instancedNode, replicatedInstancedNode);\n            }\n            else {\n                // Mesh or TransformNode\n                const canInstance = !(localOptions === null || localOptions === void 0 ? void 0 : localOptions.doNotInstantiate) && node.getTotalVertices() > 0;\n                const replicatedNode = canInstance ? node.createInstance(`instance of ${node.name}`) : node.clone(`Clone of ${node.name}`, null, true);\n                if (!replicatedNode) {\n                    throw new Error(`Could not clone or instantiate node on Asset Container ${node.name}`);\n                }\n                onNewCreated(node, replicatedNode);\n            }\n        });\n        this.skeletons.forEach((s) => {\n            if (localOptions.predicate && !localOptions.predicate(s)) {\n                return;\n            }\n            const clone = s.clone(nameFunction ? nameFunction(s.name) : \"Clone of \" + s.name);\n            for (const m of this.meshes) {\n                if (m.skeleton === s && !m.isAnInstance) {\n                    const copy = storeMap[conversionMap[m.uniqueId]];\n                    if (copy.isAnInstance) {\n                        continue;\n                    }\n                    copy.skeleton = clone;\n                    if (alreadySwappedSkeletons.indexOf(clone) !== -1) {\n                        continue;\n                    }\n                    alreadySwappedSkeletons.push(clone);\n                    // Check if bones are mesh linked\n                    for (const bone of clone.bones) {\n                        if (bone._linkedTransformNode) {\n                            bone._linkedTransformNode = storeMap[conversionMap[bone._linkedTransformNode.uniqueId]];\n                        }\n                    }\n                }\n            }\n            result.skeletons.push(clone);\n        });\n        this.animationGroups.forEach((o) => {\n            if (localOptions.predicate && !localOptions.predicate(o)) {\n                return;\n            }\n            const clone = o.clone(nameFunction ? nameFunction(o.name) : \"Clone of \" + o.name, (oldTarget) => {\n                const newTarget = storeMap[conversionMap[oldTarget.uniqueId]];\n                return newTarget || oldTarget;\n            });\n            result.animationGroups.push(clone);\n        });\n        return result;\n    }\n    /**\n     * Adds all the assets from the container to the scene.\n     */\n    addAllToScene() {\n        if (this._wasAddedToScene) {\n            return;\n        }\n        if (!this._isValidHierarchy()) {\n            Tools.Warn(\"SceneSerializer.addAllToScene: The Asset Container hierarchy is not valid.\");\n        }\n        this._wasAddedToScene = true;\n        this.addToScene(null);\n        if (this.environmentTexture) {\n            this.scene.environmentTexture = this.environmentTexture;\n        }\n        for (const component of this.scene._serializableComponents) {\n            component.addFromContainer(this);\n        }\n        this.scene.getEngine().onContextRestoredObservable.remove(this._onContextRestoredObserver);\n        this._onContextRestoredObserver = null;\n    }\n    /**\n     * Adds assets from the container to the scene.\n     * @param predicate defines a predicate used to select which entity will be added (can be null)\n     */\n    addToScene(predicate = null) {\n        this.cameras.forEach((o) => {\n            if (predicate && !predicate(o)) {\n                return;\n            }\n            this.scene.addCamera(o);\n        });\n        this.lights.forEach((o) => {\n            if (predicate && !predicate(o)) {\n                return;\n            }\n            this.scene.addLight(o);\n        });\n        this.meshes.forEach((o) => {\n            if (predicate && !predicate(o)) {\n                return;\n            }\n            this.scene.addMesh(o);\n        });\n        this.skeletons.forEach((o) => {\n            if (predicate && !predicate(o)) {\n                return;\n            }\n            this.scene.addSkeleton(o);\n        });\n        this.animations.forEach((o) => {\n            if (predicate && !predicate(o)) {\n                return;\n            }\n            this.scene.addAnimation(o);\n        });\n        this.animationGroups.forEach((o) => {\n            if (predicate && !predicate(o)) {\n                return;\n            }\n            this.scene.addAnimationGroup(o);\n        });\n        this.multiMaterials.forEach((o) => {\n            if (predicate && !predicate(o)) {\n                return;\n            }\n            this.scene.addMultiMaterial(o);\n        });\n        this.materials.forEach((o) => {\n            if (predicate && !predicate(o)) {\n                return;\n            }\n            this.scene.addMaterial(o);\n        });\n        this.morphTargetManagers.forEach((o) => {\n            if (predicate && !predicate(o)) {\n                return;\n            }\n            this.scene.addMorphTargetManager(o);\n        });\n        this.geometries.forEach((o) => {\n            if (predicate && !predicate(o)) {\n                return;\n            }\n            this.scene.addGeometry(o);\n        });\n        this.transformNodes.forEach((o) => {\n            if (predicate && !predicate(o)) {\n                return;\n            }\n            this.scene.addTransformNode(o);\n        });\n        this.actionManagers.forEach((o) => {\n            if (predicate && !predicate(o)) {\n                return;\n            }\n            this.scene.addActionManager(o);\n        });\n        this.textures.forEach((o) => {\n            if (predicate && !predicate(o)) {\n                return;\n            }\n            this.scene.addTexture(o);\n        });\n        this.reflectionProbes.forEach((o) => {\n            if (predicate && !predicate(o)) {\n                return;\n            }\n            this.scene.addReflectionProbe(o);\n        });\n    }\n    /**\n     * Removes all the assets in the container from the scene\n     */\n    removeAllFromScene() {\n        if (!this._isValidHierarchy()) {\n            Tools.Warn(\"SceneSerializer.removeAllFromScene: The Asset Container hierarchy is not valid.\");\n        }\n        this._wasAddedToScene = false;\n        this.removeFromScene(null);\n        if (this.environmentTexture === this.scene.environmentTexture) {\n            this.scene.environmentTexture = null;\n        }\n        for (const component of this.scene._serializableComponents) {\n            component.removeFromContainer(this);\n        }\n    }\n    /**\n     * Removes assets in the container from the scene\n     * @param predicate defines a predicate used to select which entity will be added (can be null)\n     */\n    removeFromScene(predicate = null) {\n        this.cameras.forEach((o) => {\n            if (predicate && !predicate(o)) {\n                return;\n            }\n            this.scene.removeCamera(o);\n        });\n        this.lights.forEach((o) => {\n            if (predicate && !predicate(o)) {\n                return;\n            }\n            this.scene.removeLight(o);\n        });\n        this.meshes.forEach((o) => {\n            if (predicate && !predicate(o)) {\n                return;\n            }\n            this.scene.removeMesh(o);\n        });\n        this.skeletons.forEach((o) => {\n            if (predicate && !predicate(o)) {\n                return;\n            }\n            this.scene.removeSkeleton(o);\n        });\n        this.animations.forEach((o) => {\n            if (predicate && !predicate(o)) {\n                return;\n            }\n            this.scene.removeAnimation(o);\n        });\n        this.animationGroups.forEach((o) => {\n            if (predicate && !predicate(o)) {\n                return;\n            }\n            this.scene.removeAnimationGroup(o);\n        });\n        this.multiMaterials.forEach((o) => {\n            if (predicate && !predicate(o)) {\n                return;\n            }\n            this.scene.removeMultiMaterial(o);\n        });\n        this.materials.forEach((o) => {\n            if (predicate && !predicate(o)) {\n                return;\n            }\n            this.scene.removeMaterial(o);\n        });\n        this.morphTargetManagers.forEach((o) => {\n            if (predicate && !predicate(o)) {\n                return;\n            }\n            this.scene.removeMorphTargetManager(o);\n        });\n        this.geometries.forEach((o) => {\n            if (predicate && !predicate(o)) {\n                return;\n            }\n            this.scene.removeGeometry(o);\n        });\n        this.transformNodes.forEach((o) => {\n            if (predicate && !predicate(o)) {\n                return;\n            }\n            this.scene.removeTransformNode(o);\n        });\n        this.actionManagers.forEach((o) => {\n            if (predicate && !predicate(o)) {\n                return;\n            }\n            this.scene.removeActionManager(o);\n        });\n        this.textures.forEach((o) => {\n            if (predicate && !predicate(o)) {\n                return;\n            }\n            this.scene.removeTexture(o);\n        });\n        this.reflectionProbes.forEach((o) => {\n            if (predicate && !predicate(o)) {\n                return;\n            }\n            this.scene.removeReflectionProbe(o);\n        });\n    }\n    /**\n     * Disposes all the assets in the container\n     */\n    dispose() {\n        this.cameras.slice(0).forEach((o) => {\n            o.dispose();\n        });\n        this.cameras.length = 0;\n        this.lights.slice(0).forEach((o) => {\n            o.dispose();\n        });\n        this.lights.length = 0;\n        this.meshes.slice(0).forEach((o) => {\n            o.dispose();\n        });\n        this.meshes.length = 0;\n        this.skeletons.slice(0).forEach((o) => {\n            o.dispose();\n        });\n        this.skeletons.length = 0;\n        this.animationGroups.slice(0).forEach((o) => {\n            o.dispose();\n        });\n        this.animationGroups.length = 0;\n        this.multiMaterials.slice(0).forEach((o) => {\n            o.dispose();\n        });\n        this.multiMaterials.length = 0;\n        this.materials.slice(0).forEach((o) => {\n            o.dispose();\n        });\n        this.materials.length = 0;\n        this.geometries.slice(0).forEach((o) => {\n            o.dispose();\n        });\n        this.geometries.length = 0;\n        this.transformNodes.slice(0).forEach((o) => {\n            o.dispose();\n        });\n        this.transformNodes.length = 0;\n        this.actionManagers.slice(0).forEach((o) => {\n            o.dispose();\n        });\n        this.actionManagers.length = 0;\n        this.textures.slice(0).forEach((o) => {\n            o.dispose();\n        });\n        this.textures.length = 0;\n        this.reflectionProbes.slice(0).forEach((o) => {\n            o.dispose();\n        });\n        this.reflectionProbes.length = 0;\n        if (this.environmentTexture) {\n            this.environmentTexture.dispose();\n            this.environmentTexture = null;\n        }\n        for (const component of this.scene._serializableComponents) {\n            component.removeFromContainer(this, true);\n        }\n        if (this._onContextRestoredObserver) {\n            this.scene.getEngine().onContextRestoredObservable.remove(this._onContextRestoredObserver);\n            this._onContextRestoredObserver = null;\n        }\n    }\n    _moveAssets(sourceAssets, targetAssets, keepAssets) {\n        if (!sourceAssets || !targetAssets) {\n            return;\n        }\n        for (const asset of sourceAssets) {\n            let move = true;\n            if (keepAssets) {\n                for (const keepAsset of keepAssets) {\n                    if (asset === keepAsset) {\n                        move = false;\n                        break;\n                    }\n                }\n            }\n            if (move) {\n                targetAssets.push(asset);\n                asset._parentContainer = this;\n            }\n        }\n    }\n    /**\n     * Removes all the assets contained in the scene and adds them to the container.\n     * @param keepAssets Set of assets to keep in the scene. (default: empty)\n     */\n    moveAllFromScene(keepAssets) {\n        this._wasAddedToScene = false;\n        if (keepAssets === undefined) {\n            keepAssets = new KeepAssets();\n        }\n        for (const key in this) {\n            if (Object.prototype.hasOwnProperty.call(this, key)) {\n                this[key] = this[key] || (key === \"_environmentTexture\" ? null : []);\n                this._moveAssets(this.scene[key], this[key], keepAssets[key]);\n            }\n        }\n        this.environmentTexture = this.scene.environmentTexture;\n        this.removeAllFromScene();\n    }\n    /**\n     * Adds all meshes in the asset container to a root mesh that can be used to position all the contained meshes. The root mesh is then added to the front of the meshes in the assetContainer.\n     * @returns the root mesh\n     */\n    createRootMesh() {\n        const rootMesh = new Mesh(\"assetContainerRootMesh\", this.scene);\n        this.meshes.forEach((m) => {\n            if (!m.parent) {\n                rootMesh.addChild(m);\n            }\n        });\n        this.meshes.unshift(rootMesh);\n        return rootMesh;\n    }\n    /**\n     * Merge animations (direct and animation groups) from this asset container into a scene\n     * @param scene is the instance of BABYLON.Scene to append to (default: last created scene)\n     * @param animatables set of animatables to retarget to a node from the scene\n     * @param targetConverter defines a function used to convert animation targets from the asset container to the scene (default: search node by name)\n     * @returns an array of the new AnimationGroup added to the scene (empty array if none)\n     */\n    mergeAnimationsTo(scene = EngineStore.LastCreatedScene, animatables, targetConverter = null) {\n        if (!scene) {\n            Logger.Error(\"No scene available to merge animations to\");\n            return [];\n        }\n        const _targetConverter = targetConverter\n            ? targetConverter\n            : (target) => {\n                let node = null;\n                const targetProperty = target.animations.length ? target.animations[0].targetProperty : \"\";\n                /*\n            BabylonJS adds special naming to targets that are children of nodes.\n            This name attempts to remove that special naming to get the parent nodes name in case the target\n            can't be found in the node tree\n\n            Ex: Torso_primitive0 likely points to a Mesh primitive. We take away primitive0 and are left with \"Torso\" which is the name\n            of the primitive's parent.\n        */\n                const name = target.name.split(\".\").join(\"\").split(\"_primitive\")[0];\n                switch (targetProperty) {\n                    case \"position\":\n                    case \"rotationQuaternion\":\n                        node = scene.getTransformNodeByName(target.name) || scene.getTransformNodeByName(name);\n                        break;\n                    case \"influence\":\n                        node = scene.getMorphTargetByName(target.name) || scene.getMorphTargetByName(name);\n                        break;\n                    default:\n                        node = scene.getNodeByName(target.name) || scene.getNodeByName(name);\n                }\n                return node;\n            };\n        // Copy new node animations\n        const nodesInAC = this.getNodes();\n        nodesInAC.forEach((nodeInAC) => {\n            const nodeInScene = _targetConverter(nodeInAC);\n            if (nodeInScene !== null) {\n                // Remove old animations with same target property as a new one\n                for (const animationInAC of nodeInAC.animations) {\n                    // Doing treatment on an array for safety measure\n                    const animationsWithSameProperty = nodeInScene.animations.filter((animationInScene) => {\n                        return animationInScene.targetProperty === animationInAC.targetProperty;\n                    });\n                    for (const animationWithSameProperty of animationsWithSameProperty) {\n                        const index = nodeInScene.animations.indexOf(animationWithSameProperty, 0);\n                        if (index > -1) {\n                            nodeInScene.animations.splice(index, 1);\n                        }\n                    }\n                }\n                // Append new animations\n                nodeInScene.animations = nodeInScene.animations.concat(nodeInAC.animations);\n            }\n        });\n        const newAnimationGroups = new Array();\n        // Copy new animation groups\n        this.animationGroups.slice().forEach((animationGroupInAC) => {\n            // Clone the animation group and all its animatables\n            newAnimationGroups.push(animationGroupInAC.clone(animationGroupInAC.name, _targetConverter));\n            // Remove animatables related to the asset container\n            animationGroupInAC.animatables.forEach((animatable) => {\n                animatable.stop();\n            });\n        });\n        // Retarget animatables\n        animatables.forEach((animatable) => {\n            const target = _targetConverter(animatable.target);\n            if (target) {\n                // Clone the animatable and retarget it\n                scene.beginAnimation(target, animatable.fromFrame, animatable.toFrame, animatable.loopAnimation, animatable.speedRatio, animatable.onAnimationEnd ? animatable.onAnimationEnd : undefined, undefined, true, undefined, animatable.onAnimationLoop ? animatable.onAnimationLoop : undefined);\n                // Stop animation for the target in the asset container\n                scene.stopAnimation(animatable.target);\n            }\n        });\n        return newAnimationGroups;\n    }\n}\n//# sourceMappingURL=assetContainer.js.map","import { __decorate } from \"./tslib.es6.js\";\nimport { Matrix, Vector3 } from \"./Maths/math.vector.js\";\nimport { serialize } from \"./Misc/decorators.js\";\nimport { Observable } from \"./Misc/observable.js\";\nimport { EngineStore } from \"./Engines/engineStore.js\";\nimport { _WarnImport } from \"./Misc/devTools.js\";\n/** @internal */\nclass _InternalNodeDataInfo {\n    constructor() {\n        this._doNotSerialize = false;\n        this._isDisposed = false;\n        this._sceneRootNodesIndex = -1;\n        this._isEnabled = true;\n        this._isParentEnabled = true;\n        this._isReady = true;\n        this._onEnabledStateChangedObservable = new Observable();\n        this._onClonedObservable = new Observable();\n    }\n}\n/**\n * Node is the basic class for all scene objects (Mesh, Light, Camera.)\n */\nexport class Node {\n    /**\n     * Add a new node constructor\n     * @param type defines the type name of the node to construct\n     * @param constructorFunc defines the constructor function\n     */\n    static AddNodeConstructor(type, constructorFunc) {\n        this._NodeConstructors[type] = constructorFunc;\n    }\n    /**\n     * Returns a node constructor based on type name\n     * @param type defines the type name\n     * @param name defines the new node name\n     * @param scene defines the hosting scene\n     * @param options defines optional options to transmit to constructors\n     * @returns the new constructor or null\n     */\n    static Construct(type, name, scene, options) {\n        const constructorFunc = this._NodeConstructors[type];\n        if (!constructorFunc) {\n            return null;\n        }\n        return constructorFunc(name, scene, options);\n    }\n    /**\n     * Gets or sets the accessibility tag to describe the node for accessibility purpose.\n     */\n    set accessibilityTag(value) {\n        this._accessibilityTag = value;\n        this.onAccessibilityTagChangedObservable.notifyObservers(value);\n    }\n    get accessibilityTag() {\n        return this._accessibilityTag;\n    }\n    /**\n     * Gets or sets a boolean used to define if the node must be serialized\n     */\n    get doNotSerialize() {\n        if (this._nodeDataStorage._doNotSerialize) {\n            return true;\n        }\n        if (this._parentNode) {\n            return this._parentNode.doNotSerialize;\n        }\n        return false;\n    }\n    set doNotSerialize(value) {\n        this._nodeDataStorage._doNotSerialize = value;\n    }\n    /**\n     * Gets a boolean indicating if the node has been disposed\n     * @returns true if the node was disposed\n     */\n    isDisposed() {\n        return this._nodeDataStorage._isDisposed;\n    }\n    /**\n     * Gets or sets the parent of the node (without keeping the current position in the scene)\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/parent_pivot/parent\n     */\n    set parent(parent) {\n        if (this._parentNode === parent) {\n            return;\n        }\n        const previousParentNode = this._parentNode;\n        // Remove self from list of children of parent\n        if (this._parentNode && this._parentNode._children !== undefined && this._parentNode._children !== null) {\n            const index = this._parentNode._children.indexOf(this);\n            if (index !== -1) {\n                this._parentNode._children.splice(index, 1);\n            }\n            if (!parent && !this._nodeDataStorage._isDisposed) {\n                this._addToSceneRootNodes();\n            }\n        }\n        // Store new parent\n        this._parentNode = parent;\n        // Add as child to new parent\n        if (this._parentNode) {\n            if (this._parentNode._children === undefined || this._parentNode._children === null) {\n                this._parentNode._children = new Array();\n            }\n            this._parentNode._children.push(this);\n            if (!previousParentNode) {\n                this._removeFromSceneRootNodes();\n            }\n        }\n        // Enabled state\n        this._syncParentEnabledState();\n    }\n    get parent() {\n        return this._parentNode;\n    }\n    /**\n     * @internal\n     */\n    _serializeAsParent(serializationObject) {\n        serializationObject.parentId = this.uniqueId;\n    }\n    /** @internal */\n    _addToSceneRootNodes() {\n        if (this._nodeDataStorage._sceneRootNodesIndex === -1) {\n            this._nodeDataStorage._sceneRootNodesIndex = this._scene.rootNodes.length;\n            this._scene.rootNodes.push(this);\n        }\n    }\n    /** @internal */\n    _removeFromSceneRootNodes() {\n        if (this._nodeDataStorage._sceneRootNodesIndex !== -1) {\n            const rootNodes = this._scene.rootNodes;\n            const lastIdx = rootNodes.length - 1;\n            rootNodes[this._nodeDataStorage._sceneRootNodesIndex] = rootNodes[lastIdx];\n            rootNodes[this._nodeDataStorage._sceneRootNodesIndex]._nodeDataStorage._sceneRootNodesIndex = this._nodeDataStorage._sceneRootNodesIndex;\n            this._scene.rootNodes.pop();\n            this._nodeDataStorage._sceneRootNodesIndex = -1;\n        }\n    }\n    /**\n     * Gets or sets the animation properties override\n     */\n    get animationPropertiesOverride() {\n        if (!this._animationPropertiesOverride) {\n            return this._scene.animationPropertiesOverride;\n        }\n        return this._animationPropertiesOverride;\n    }\n    set animationPropertiesOverride(value) {\n        this._animationPropertiesOverride = value;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"Node\" string\n     */\n    getClassName() {\n        return \"Node\";\n    }\n    /**\n     * Sets a callback that will be raised when the node will be disposed\n     */\n    set onDispose(callback) {\n        if (this._onDisposeObserver) {\n            this.onDisposeObservable.remove(this._onDisposeObserver);\n        }\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\n    }\n    /**\n     * An event triggered when the enabled state of the node changes\n     */\n    get onEnabledStateChangedObservable() {\n        return this._nodeDataStorage._onEnabledStateChangedObservable;\n    }\n    /**\n     * An event triggered when the node is cloned\n     */\n    get onClonedObservable() {\n        return this._nodeDataStorage._onClonedObservable;\n    }\n    /**\n     * Creates a new Node\n     * @param name the name and id to be given to this node\n     * @param scene the scene this node will be added to\n     */\n    constructor(name, scene = null) {\n        this._isDirty = false;\n        this._nodeDataStorage = new _InternalNodeDataInfo();\n        /**\n         * Gets or sets a string used to store user defined state for the node\n         */\n        this.state = \"\";\n        /**\n         * Gets or sets an object used to store user defined information for the node\n         */\n        this.metadata = null;\n        /**\n         * For internal use only. Please do not use.\n         */\n        this.reservedDataStore = null;\n        this._accessibilityTag = null;\n        this.onAccessibilityTagChangedObservable = new Observable();\n        /** @internal */\n        this._parentContainer = null;\n        /**\n         * Gets a list of Animations associated with the node\n         */\n        this.animations = new Array();\n        this._ranges = {};\n        /**\n         * Callback raised when the node is ready to be used\n         */\n        this.onReady = null;\n        /** @internal */\n        this._currentRenderId = -1;\n        this._parentUpdateId = -1;\n        /** @internal */\n        this._childUpdateId = -1;\n        /** @internal */\n        this._waitingParentId = null;\n        /** @internal */\n        this._waitingParentInstanceIndex = null;\n        /** @internal */\n        this._waitingParsedUniqueId = null;\n        /** @internal */\n        this._cache = {};\n        this._parentNode = null;\n        /** @internal */\n        this._children = null;\n        /** @internal */\n        this._worldMatrix = Matrix.Identity();\n        /** @internal */\n        this._worldMatrixDeterminant = 0;\n        /** @internal */\n        this._worldMatrixDeterminantIsDirty = true;\n        this._animationPropertiesOverride = null;\n        /** @internal */\n        this._isNode = true;\n        /**\n         * An event triggered when the mesh is disposed\n         */\n        this.onDisposeObservable = new Observable();\n        this._onDisposeObserver = null;\n        // Behaviors\n        this._behaviors = new Array();\n        this.name = name;\n        this.id = name;\n        this._scene = (scene || EngineStore.LastCreatedScene);\n        this.uniqueId = this._scene.getUniqueId();\n        this._initCache();\n    }\n    /**\n     * Gets the scene of the node\n     * @returns a scene\n     */\n    getScene() {\n        return this._scene;\n    }\n    /**\n     * Gets the engine of the node\n     * @returns a Engine\n     */\n    getEngine() {\n        return this._scene.getEngine();\n    }\n    /**\n     * Attach a behavior to the node\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\n     * @param behavior defines the behavior to attach\n     * @param attachImmediately defines that the behavior must be attached even if the scene is still loading\n     * @returns the current Node\n     */\n    addBehavior(behavior, attachImmediately = false) {\n        const index = this._behaviors.indexOf(behavior);\n        if (index !== -1) {\n            return this;\n        }\n        behavior.init();\n        if (this._scene.isLoading && !attachImmediately) {\n            // We defer the attach when the scene will be loaded\n            this._scene.onDataLoadedObservable.addOnce(() => {\n                behavior.attach(this);\n            });\n        }\n        else {\n            behavior.attach(this);\n        }\n        this._behaviors.push(behavior);\n        return this;\n    }\n    /**\n     * Remove an attached behavior\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\n     * @param behavior defines the behavior to attach\n     * @returns the current Node\n     */\n    removeBehavior(behavior) {\n        const index = this._behaviors.indexOf(behavior);\n        if (index === -1) {\n            return this;\n        }\n        this._behaviors[index].detach();\n        this._behaviors.splice(index, 1);\n        return this;\n    }\n    /**\n     * Gets the list of attached behaviors\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\n     */\n    get behaviors() {\n        return this._behaviors;\n    }\n    /**\n     * Gets an attached behavior by name\n     * @param name defines the name of the behavior to look for\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\n     * @returns null if behavior was not found else the requested behavior\n     */\n    getBehaviorByName(name) {\n        for (const behavior of this._behaviors) {\n            if (behavior.name === name) {\n                return behavior;\n            }\n        }\n        return null;\n    }\n    /**\n     * Returns the latest update of the World matrix\n     * @returns a Matrix\n     */\n    getWorldMatrix() {\n        if (this._currentRenderId !== this._scene.getRenderId()) {\n            this.computeWorldMatrix();\n        }\n        return this._worldMatrix;\n    }\n    /** @internal */\n    _getWorldMatrixDeterminant() {\n        if (this._worldMatrixDeterminantIsDirty) {\n            this._worldMatrixDeterminantIsDirty = false;\n            this._worldMatrixDeterminant = this._worldMatrix.determinant();\n        }\n        return this._worldMatrixDeterminant;\n    }\n    /**\n     * Returns directly the latest state of the mesh World matrix.\n     * A Matrix is returned.\n     */\n    get worldMatrixFromCache() {\n        return this._worldMatrix;\n    }\n    // override it in derived class if you add new variables to the cache\n    // and call the parent class method\n    /** @internal */\n    _initCache() {\n        this._cache = {};\n        this._cache.parent = undefined;\n    }\n    /**\n     * @internal\n     */\n    updateCache(force) {\n        if (!force && this.isSynchronized()) {\n            return;\n        }\n        this._cache.parent = this.parent;\n        this._updateCache();\n    }\n    /**\n     * @internal\n     */\n    _getActionManagerForTrigger(trigger, _initialCall = true) {\n        if (!this.parent) {\n            return null;\n        }\n        return this.parent._getActionManagerForTrigger(trigger, false);\n    }\n    // override it in derived class if you add new variables to the cache\n    // and call the parent class method if !ignoreParentClass\n    /**\n     * @internal\n     */\n    _updateCache(_ignoreParentClass) { }\n    // override it in derived class if you add new variables to the cache\n    /** @internal */\n    _isSynchronized() {\n        return true;\n    }\n    /** @internal */\n    _markSyncedWithParent() {\n        if (this._parentNode) {\n            this._parentUpdateId = this._parentNode._childUpdateId;\n        }\n    }\n    /** @internal */\n    isSynchronizedWithParent() {\n        if (!this._parentNode) {\n            return true;\n        }\n        if (this._parentNode._isDirty || this._parentUpdateId !== this._parentNode._childUpdateId) {\n            return false;\n        }\n        return this._parentNode.isSynchronized();\n    }\n    /** @internal */\n    isSynchronized() {\n        if (this._cache.parent !== this._parentNode) {\n            this._cache.parent = this._parentNode;\n            return false;\n        }\n        if (this._parentNode && !this.isSynchronizedWithParent()) {\n            return false;\n        }\n        return this._isSynchronized();\n    }\n    /**\n     * Is this node ready to be used/rendered\n     * @param _completeCheck defines if a complete check (including materials and lights) has to be done (false by default)\n     * @returns true if the node is ready\n     */\n    isReady(_completeCheck = false) {\n        return this._nodeDataStorage._isReady;\n    }\n    /**\n     * Flag the  node as dirty (Forcing it to update everything)\n     * @param _property helps children apply precise \"dirtyfication\"\n     * @returns this node\n     */\n    markAsDirty(_property) {\n        this._currentRenderId = Number.MAX_VALUE;\n        this._isDirty = true;\n        return this;\n    }\n    /**\n     * Is this node enabled?\n     * If the node has a parent, all ancestors will be checked and false will be returned if any are false (not enabled), otherwise will return true\n     * @param checkAncestors indicates if this method should check the ancestors. The default is to check the ancestors. If set to false, the method will return the value of this node without checking ancestors\n     * @returns whether this node (and its parent) is enabled\n     */\n    isEnabled(checkAncestors = true) {\n        if (checkAncestors === false) {\n            return this._nodeDataStorage._isEnabled;\n        }\n        if (!this._nodeDataStorage._isEnabled) {\n            return false;\n        }\n        return this._nodeDataStorage._isParentEnabled;\n    }\n    /** @internal */\n    _syncParentEnabledState() {\n        this._nodeDataStorage._isParentEnabled = this._parentNode ? this._parentNode.isEnabled() : true;\n        if (this._children) {\n            this._children.forEach((c) => {\n                c._syncParentEnabledState(); // Force children to update accordingly\n            });\n        }\n    }\n    /**\n     * Set the enabled state of this node\n     * @param value defines the new enabled state\n     */\n    setEnabled(value) {\n        if (this._nodeDataStorage._isEnabled === value) {\n            return;\n        }\n        this._nodeDataStorage._isEnabled = value;\n        this._syncParentEnabledState();\n        this._nodeDataStorage._onEnabledStateChangedObservable.notifyObservers(value);\n    }\n    /**\n     * Is this node a descendant of the given node?\n     * The function will iterate up the hierarchy until the ancestor was found or no more parents defined\n     * @param ancestor defines the parent node to inspect\n     * @returns a boolean indicating if this node is a descendant of the given node\n     */\n    isDescendantOf(ancestor) {\n        if (this.parent) {\n            if (this.parent === ancestor) {\n                return true;\n            }\n            return this.parent.isDescendantOf(ancestor);\n        }\n        return false;\n    }\n    /**\n     * @internal\n     */\n    _getDescendants(results, directDescendantsOnly = false, predicate) {\n        if (!this._children) {\n            return;\n        }\n        for (let index = 0; index < this._children.length; index++) {\n            const item = this._children[index];\n            if (!predicate || predicate(item)) {\n                results.push(item);\n            }\n            if (!directDescendantsOnly) {\n                item._getDescendants(results, false, predicate);\n            }\n        }\n    }\n    /**\n     * Will return all nodes that have this node as ascendant\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\n     * @returns all children nodes of all types\n     */\n    getDescendants(directDescendantsOnly, predicate) {\n        const results = new Array();\n        this._getDescendants(results, directDescendantsOnly, predicate);\n        return results;\n    }\n    /**\n     * Get all child-meshes of this node\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered (Default: false)\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\n     * @returns an array of AbstractMesh\n     */\n    getChildMeshes(directDescendantsOnly, predicate) {\n        const results = [];\n        this._getDescendants(results, directDescendantsOnly, (node) => {\n            return (!predicate || predicate(node)) && node.cullingStrategy !== undefined;\n        });\n        return results;\n    }\n    /**\n     * Get all direct children of this node\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered (Default: true)\n     * @returns an array of Node\n     */\n    getChildren(predicate, directDescendantsOnly = true) {\n        return this.getDescendants(directDescendantsOnly, predicate);\n    }\n    /**\n     * @internal\n     */\n    _setReady(state) {\n        if (state === this._nodeDataStorage._isReady) {\n            return;\n        }\n        if (!state) {\n            this._nodeDataStorage._isReady = false;\n            return;\n        }\n        if (this.onReady) {\n            this.onReady(this);\n        }\n        this._nodeDataStorage._isReady = true;\n    }\n    /**\n     * Get an animation by name\n     * @param name defines the name of the animation to look for\n     * @returns null if not found else the requested animation\n     */\n    getAnimationByName(name) {\n        for (let i = 0; i < this.animations.length; i++) {\n            const animation = this.animations[i];\n            if (animation.name === name) {\n                return animation;\n            }\n        }\n        return null;\n    }\n    /**\n     * Creates an animation range for this node\n     * @param name defines the name of the range\n     * @param from defines the starting key\n     * @param to defines the end key\n     */\n    createAnimationRange(name, from, to) {\n        // check name not already in use\n        if (!this._ranges[name]) {\n            this._ranges[name] = Node._AnimationRangeFactory(name, from, to);\n            for (let i = 0, nAnimations = this.animations.length; i < nAnimations; i++) {\n                if (this.animations[i]) {\n                    this.animations[i].createRange(name, from, to);\n                }\n            }\n        }\n    }\n    /**\n     * Delete a specific animation range\n     * @param name defines the name of the range to delete\n     * @param deleteFrames defines if animation frames from the range must be deleted as well\n     */\n    deleteAnimationRange(name, deleteFrames = true) {\n        for (let i = 0, nAnimations = this.animations.length; i < nAnimations; i++) {\n            if (this.animations[i]) {\n                this.animations[i].deleteRange(name, deleteFrames);\n            }\n        }\n        this._ranges[name] = null; // said much faster than 'delete this._range[name]'\n    }\n    /**\n     * Get an animation range by name\n     * @param name defines the name of the animation range to look for\n     * @returns null if not found else the requested animation range\n     */\n    getAnimationRange(name) {\n        return this._ranges[name] || null;\n    }\n    /**\n     * Gets the list of all animation ranges defined on this node\n     * @returns an array\n     */\n    getAnimationRanges() {\n        const animationRanges = [];\n        let name;\n        for (name in this._ranges) {\n            animationRanges.push(this._ranges[name]);\n        }\n        return animationRanges;\n    }\n    /**\n     * Will start the animation sequence\n     * @param name defines the range frames for animation sequence\n     * @param loop defines if the animation should loop (false by default)\n     * @param speedRatio defines the speed factor in which to run the animation (1 by default)\n     * @param onAnimationEnd defines a function to be executed when the animation ended (undefined by default)\n     * @returns the object created for this animation. If range does not exist, it will return null\n     */\n    beginAnimation(name, loop, speedRatio, onAnimationEnd) {\n        const range = this.getAnimationRange(name);\n        if (!range) {\n            return null;\n        }\n        return this._scene.beginAnimation(this, range.from, range.to, loop, speedRatio, onAnimationEnd);\n    }\n    /**\n     * Serialize animation ranges into a JSON compatible object\n     * @returns serialization object\n     */\n    serializeAnimationRanges() {\n        const serializationRanges = [];\n        for (const name in this._ranges) {\n            const localRange = this._ranges[name];\n            if (!localRange) {\n                continue;\n            }\n            const range = {};\n            range.name = name;\n            range.from = localRange.from;\n            range.to = localRange.to;\n            serializationRanges.push(range);\n        }\n        return serializationRanges;\n    }\n    /**\n     * Computes the world matrix of the node\n     * @param _force defines if the cache version should be invalidated forcing the world matrix to be created from scratch\n     * @returns the world matrix\n     */\n    computeWorldMatrix(_force) {\n        if (!this._worldMatrix) {\n            this._worldMatrix = Matrix.Identity();\n        }\n        return this._worldMatrix;\n    }\n    /**\n     * Releases resources associated with this node.\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\n     */\n    dispose(doNotRecurse, disposeMaterialAndTextures = false) {\n        this._nodeDataStorage._isDisposed = true;\n        if (!doNotRecurse) {\n            const nodes = this.getDescendants(true);\n            for (const node of nodes) {\n                node.dispose(doNotRecurse, disposeMaterialAndTextures);\n            }\n        }\n        if (!this.parent) {\n            this._removeFromSceneRootNodes();\n        }\n        else {\n            this.parent = null;\n        }\n        // Callback\n        this.onDisposeObservable.notifyObservers(this);\n        this.onDisposeObservable.clear();\n        this.onEnabledStateChangedObservable.clear();\n        this.onClonedObservable.clear();\n        // Behaviors\n        for (const behavior of this._behaviors) {\n            behavior.detach();\n        }\n        this._behaviors.length = 0;\n        this.metadata = null;\n    }\n    /**\n     * Parse animation range data from a serialization object and store them into a given node\n     * @param node defines where to store the animation ranges\n     * @param parsedNode defines the serialization object to read data from\n     * @param _scene defines the hosting scene\n     */\n    static ParseAnimationRanges(node, parsedNode, _scene) {\n        if (parsedNode.ranges) {\n            for (let index = 0; index < parsedNode.ranges.length; index++) {\n                const data = parsedNode.ranges[index];\n                node.createAnimationRange(data.name, data.from, data.to);\n            }\n        }\n    }\n    /**\n     * Return the minimum and maximum world vectors of the entire hierarchy under current node\n     * @param includeDescendants Include bounding info from descendants as well (true by default)\n     * @param predicate defines a callback function that can be customize to filter what meshes should be included in the list used to compute the bounding vectors\n     * @returns the new bounding vectors\n     */\n    getHierarchyBoundingVectors(includeDescendants = true, predicate = null) {\n        // Ensures that all world matrix will be recomputed.\n        this.getScene().incrementRenderId();\n        this.computeWorldMatrix(true);\n        let min;\n        let max;\n        const thisAbstractMesh = this;\n        if (thisAbstractMesh.getBoundingInfo && thisAbstractMesh.subMeshes) {\n            // If this is an abstract mesh get its bounding info\n            const boundingInfo = thisAbstractMesh.getBoundingInfo();\n            min = boundingInfo.boundingBox.minimumWorld.clone();\n            max = boundingInfo.boundingBox.maximumWorld.clone();\n        }\n        else {\n            min = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n            max = new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n        }\n        if (includeDescendants) {\n            const descendants = this.getDescendants(false);\n            for (const descendant of descendants) {\n                const childMesh = descendant;\n                childMesh.computeWorldMatrix(true);\n                // Filters meshes based on custom predicate function.\n                if (predicate && !predicate(childMesh)) {\n                    continue;\n                }\n                //make sure we have the needed params to get mix and max\n                if (!childMesh.getBoundingInfo || childMesh.getTotalVertices() === 0) {\n                    continue;\n                }\n                const childBoundingInfo = childMesh.getBoundingInfo();\n                const boundingBox = childBoundingInfo.boundingBox;\n                const minBox = boundingBox.minimumWorld;\n                const maxBox = boundingBox.maximumWorld;\n                Vector3.CheckExtends(minBox, min, max);\n                Vector3.CheckExtends(maxBox, min, max);\n            }\n        }\n        return {\n            min: min,\n            max: max,\n        };\n    }\n}\n/**\n * @internal\n */\nNode._AnimationRangeFactory = (_name, _from, _to) => {\n    throw _WarnImport(\"AnimationRange\");\n};\nNode._NodeConstructors = {};\n__decorate([\n    serialize()\n], Node.prototype, \"name\", void 0);\n__decorate([\n    serialize()\n], Node.prototype, \"id\", void 0);\n__decorate([\n    serialize()\n], Node.prototype, \"uniqueId\", void 0);\n__decorate([\n    serialize()\n], Node.prototype, \"state\", void 0);\n__decorate([\n    serialize()\n], Node.prototype, \"metadata\", void 0);\n//# sourceMappingURL=node.js.map","import { Tools } from \"./Misc/tools.js\";\nimport { PrecisionDate } from \"./Misc/precisionDate.js\";\nimport { Observable } from \"./Misc/observable.js\";\nimport { SmartArrayNoDuplicate, SmartArray } from \"./Misc/smartArray.js\";\nimport { StringDictionary } from \"./Misc/stringDictionary.js\";\nimport { Tags } from \"./Misc/tags.js\";\nimport { Vector3, Matrix, TmpVectors } from \"./Maths/math.vector.js\";\nimport { AbstractScene } from \"./abstractScene.js\";\nimport { ImageProcessingConfiguration } from \"./Materials/imageProcessingConfiguration.js\";\nimport { UniformBuffer } from \"./Materials/uniformBuffer.js\";\nimport { PickingInfo } from \"./Collisions/pickingInfo.js\";\nimport { ActionEvent } from \"./Actions/actionEvent.js\";\nimport { PostProcessManager } from \"./PostProcesses/postProcessManager.js\";\nimport { RenderingManager } from \"./Rendering/renderingManager.js\";\nimport { Stage } from \"./sceneComponent.js\";\n\nimport { IsWindowObjectExist } from \"./Misc/domManagement.js\";\nimport { EngineStore } from \"./Engines/engineStore.js\";\nimport { _WarnImport } from \"./Misc/devTools.js\";\nimport { InputManager } from \"./Inputs/scene.inputManager.js\";\nimport { PerfCounter } from \"./Misc/perfCounter.js\";\nimport { Color4, Color3 } from \"./Maths/math.color.js\";\nimport { Frustum } from \"./Maths/math.frustum.js\";\nimport { UniqueIdGenerator } from \"./Misc/uniqueIdGenerator.js\";\nimport { ReadFile, RequestFile, LoadFile } from \"./Misc/fileTools.js\";\nimport { LightConstants } from \"./Lights/lightConstants.js\";\nimport { _ObserveArray } from \"./Misc/arrayTools.js\";\n/**\n * Define how the scene should favor performance over ease of use\n */\nexport var ScenePerformancePriority;\n(function (ScenePerformancePriority) {\n    /** Default mode. No change. Performance will be treated as less important than backward compatibility */\n    ScenePerformancePriority[ScenePerformancePriority[\"BackwardCompatible\"] = 0] = \"BackwardCompatible\";\n    /** Some performance options will be turned on trying to strike a balance between perf and ease of use */\n    ScenePerformancePriority[ScenePerformancePriority[\"Intermediate\"] = 1] = \"Intermediate\";\n    /** Performance will be top priority */\n    ScenePerformancePriority[ScenePerformancePriority[\"Aggressive\"] = 2] = \"Aggressive\";\n})(ScenePerformancePriority || (ScenePerformancePriority = {}));\n/**\n * Represents a scene to be rendered by the engine.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/scene\n */\nexport class Scene extends AbstractScene {\n    /**\n     * Factory used to create the default material.\n     * @param scene The scene to create the material for\n     * @returns The default material\n     */\n    static DefaultMaterialFactory(scene) {\n        throw _WarnImport(\"StandardMaterial\");\n    }\n    /**\n     * Factory used to create the a collision coordinator.\n     * @returns The collision coordinator\n     */\n    static CollisionCoordinatorFactory() {\n        throw _WarnImport(\"DefaultCollisionCoordinator\");\n    }\n    /**\n     * Texture used in all pbr material as the reflection texture.\n     * As in the majority of the scene they are the same (exception for multi room and so on),\n     * this is easier to reference from here than from all the materials.\n     */\n    get environmentTexture() {\n        return this._environmentTexture;\n    }\n    /**\n     * Texture used in all pbr material as the reflection texture.\n     * As in the majority of the scene they are the same (exception for multi room and so on),\n     * this is easier to set here than in all the materials.\n     */\n    set environmentTexture(value) {\n        if (this._environmentTexture === value) {\n            return;\n        }\n        this._environmentTexture = value;\n        this.markAllMaterialsAsDirty(1);\n    }\n    /**\n     * Default image processing configuration used either in the rendering\n     * Forward main pass or through the imageProcessingPostProcess if present.\n     * As in the majority of the scene they are the same (exception for multi camera),\n     * this is easier to reference from here than from all the materials and post process.\n     *\n     * No setter as we it is a shared configuration, you can set the values instead.\n     */\n    get imageProcessingConfiguration() {\n        return this._imageProcessingConfiguration;\n    }\n    /**\n     * Gets or sets a value indicating how to treat performance relatively to ease of use and backward compatibility\n     */\n    get performancePriority() {\n        return this._performancePriority;\n    }\n    set performancePriority(value) {\n        if (value === this._performancePriority) {\n            return;\n        }\n        this._performancePriority = value;\n        switch (value) {\n            case ScenePerformancePriority.BackwardCompatible:\n                this.skipFrustumClipping = false;\n                this._renderingManager.maintainStateBetweenFrames = false;\n                this.skipPointerMovePicking = false;\n                this.autoClear = true;\n                break;\n            case ScenePerformancePriority.Intermediate:\n                this.skipFrustumClipping = false;\n                this._renderingManager.maintainStateBetweenFrames = false;\n                this.skipPointerMovePicking = true;\n                this.autoClear = false;\n                break;\n            case ScenePerformancePriority.Aggressive:\n                this.skipFrustumClipping = true;\n                this._renderingManager.maintainStateBetweenFrames = true;\n                this.skipPointerMovePicking = true;\n                this.autoClear = false;\n                break;\n        }\n    }\n    /**\n     * Gets or sets a boolean indicating if all rendering must be done in wireframe\n     */\n    set forceWireframe(value) {\n        if (this._forceWireframe === value) {\n            return;\n        }\n        this._forceWireframe = value;\n        this.markAllMaterialsAsDirty(16);\n    }\n    get forceWireframe() {\n        return this._forceWireframe;\n    }\n    /**\n     * Gets or sets a boolean indicating if we should skip the frustum clipping part of the active meshes selection\n     */\n    set skipFrustumClipping(value) {\n        if (this._skipFrustumClipping === value) {\n            return;\n        }\n        this._skipFrustumClipping = value;\n    }\n    get skipFrustumClipping() {\n        return this._skipFrustumClipping;\n    }\n    /**\n     * Gets or sets a boolean indicating if all rendering must be done in point cloud\n     */\n    set forcePointsCloud(value) {\n        if (this._forcePointsCloud === value) {\n            return;\n        }\n        this._forcePointsCloud = value;\n        this.markAllMaterialsAsDirty(16);\n    }\n    get forcePointsCloud() {\n        return this._forcePointsCloud;\n    }\n    /**\n     * Gets or sets the animation properties override\n     */\n    get animationPropertiesOverride() {\n        return this._animationPropertiesOverride;\n    }\n    set animationPropertiesOverride(value) {\n        this._animationPropertiesOverride = value;\n    }\n    /** Sets a function to be executed when this scene is disposed. */\n    set onDispose(callback) {\n        if (this._onDisposeObserver) {\n            this.onDisposeObservable.remove(this._onDisposeObserver);\n        }\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\n    }\n    /** Sets a function to be executed before rendering this scene */\n    set beforeRender(callback) {\n        if (this._onBeforeRenderObserver) {\n            this.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\n        }\n        if (callback) {\n            this._onBeforeRenderObserver = this.onBeforeRenderObservable.add(callback);\n        }\n    }\n    /** Sets a function to be executed after rendering this scene */\n    set afterRender(callback) {\n        if (this._onAfterRenderObserver) {\n            this.onAfterRenderObservable.remove(this._onAfterRenderObserver);\n        }\n        if (callback) {\n            this._onAfterRenderObserver = this.onAfterRenderObservable.add(callback);\n        }\n    }\n    /** Sets a function to be executed before rendering a camera*/\n    set beforeCameraRender(callback) {\n        if (this._onBeforeCameraRenderObserver) {\n            this.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\n        }\n        this._onBeforeCameraRenderObserver = this.onBeforeCameraRenderObservable.add(callback);\n    }\n    /** Sets a function to be executed after rendering a camera*/\n    set afterCameraRender(callback) {\n        if (this._onAfterCameraRenderObserver) {\n            this.onAfterCameraRenderObservable.remove(this._onAfterCameraRenderObserver);\n        }\n        this._onAfterCameraRenderObserver = this.onAfterCameraRenderObservable.add(callback);\n    }\n    /**\n     * Gets the pointer coordinates without any translation (ie. straight out of the pointer event)\n     */\n    get unTranslatedPointer() {\n        return this._inputManager.unTranslatedPointer;\n    }\n    /**\n     * Gets or sets the distance in pixel that you have to move to prevent some events. Default is 10 pixels\n     */\n    static get DragMovementThreshold() {\n        return InputManager.DragMovementThreshold;\n    }\n    static set DragMovementThreshold(value) {\n        InputManager.DragMovementThreshold = value;\n    }\n    /**\n     * Time in milliseconds to wait to raise long press events if button is still pressed. Default is 500 ms\n     */\n    static get LongPressDelay() {\n        return InputManager.LongPressDelay;\n    }\n    static set LongPressDelay(value) {\n        InputManager.LongPressDelay = value;\n    }\n    /**\n     * Time in milliseconds to wait to raise long press events if button is still pressed. Default is 300 ms\n     */\n    static get DoubleClickDelay() {\n        return InputManager.DoubleClickDelay;\n    }\n    static set DoubleClickDelay(value) {\n        InputManager.DoubleClickDelay = value;\n    }\n    /** If you need to check double click without raising a single click at first click, enable this flag */\n    static get ExclusiveDoubleClickMode() {\n        return InputManager.ExclusiveDoubleClickMode;\n    }\n    static set ExclusiveDoubleClickMode(value) {\n        InputManager.ExclusiveDoubleClickMode = value;\n    }\n    /**\n     * Bind the current view position to an effect.\n     * @param effect The effect to be bound\n     * @param variableName name of the shader variable that will hold the eye position\n     * @param isVector3 true to indicates that variableName is a Vector3 and not a Vector4\n     * @returns the computed eye position\n     */\n    bindEyePosition(effect, variableName = \"vEyePosition\", isVector3 = false) {\n        var _a;\n        const eyePosition = this._forcedViewPosition\n            ? this._forcedViewPosition\n            : this._mirroredCameraPosition\n                ? this._mirroredCameraPosition\n                : (_a = this.activeCamera.globalPosition) !== null && _a !== void 0 ? _a : this.activeCamera.devicePosition;\n        const invertNormal = this.useRightHandedSystem === (this._mirroredCameraPosition != null);\n        TmpVectors.Vector4[0].set(eyePosition.x, eyePosition.y, eyePosition.z, invertNormal ? -1 : 1);\n        if (effect) {\n            if (isVector3) {\n                effect.setFloat3(variableName, TmpVectors.Vector4[0].x, TmpVectors.Vector4[0].y, TmpVectors.Vector4[0].z);\n            }\n            else {\n                effect.setVector4(variableName, TmpVectors.Vector4[0]);\n            }\n        }\n        return TmpVectors.Vector4[0];\n    }\n    /**\n     * Update the scene ubo before it can be used in rendering processing\n     * @returns the scene UniformBuffer\n     */\n    finalizeSceneUbo() {\n        const ubo = this.getSceneUniformBuffer();\n        const eyePosition = this.bindEyePosition(null);\n        ubo.updateFloat4(\"vEyePosition\", eyePosition.x, eyePosition.y, eyePosition.z, eyePosition.w);\n        ubo.update();\n        return ubo;\n    }\n    /**\n     * Gets or sets a boolean indicating if the scene must use right-handed coordinates system\n     */\n    set useRightHandedSystem(value) {\n        if (this._useRightHandedSystem === value) {\n            return;\n        }\n        this._useRightHandedSystem = value;\n        this.markAllMaterialsAsDirty(16);\n    }\n    get useRightHandedSystem() {\n        return this._useRightHandedSystem;\n    }\n    /**\n     * Sets the step Id used by deterministic lock step\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\n     * @param newStepId defines the step Id\n     */\n    setStepId(newStepId) {\n        this._currentStepId = newStepId;\n    }\n    /**\n     * Gets the step Id used by deterministic lock step\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\n     * @returns the step Id\n     */\n    getStepId() {\n        return this._currentStepId;\n    }\n    /**\n     * Gets the internal step used by deterministic lock step\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\n     * @returns the internal step\n     */\n    getInternalStep() {\n        return this._currentInternalStep;\n    }\n    /**\n     * Gets or sets a boolean indicating if fog is enabled on this scene\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\n     * (Default is true)\n     */\n    set fogEnabled(value) {\n        if (this._fogEnabled === value) {\n            return;\n        }\n        this._fogEnabled = value;\n        this.markAllMaterialsAsDirty(16);\n    }\n    get fogEnabled() {\n        return this._fogEnabled;\n    }\n    /**\n     * Gets or sets the fog mode to use\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\n     * | mode | value |\n     * | --- | --- |\n     * | FOGMODE_NONE | 0 |\n     * | FOGMODE_EXP | 1 |\n     * | FOGMODE_EXP2 | 2 |\n     * | FOGMODE_LINEAR | 3 |\n     */\n    set fogMode(value) {\n        if (this._fogMode === value) {\n            return;\n        }\n        this._fogMode = value;\n        this.markAllMaterialsAsDirty(16);\n    }\n    get fogMode() {\n        return this._fogMode;\n    }\n    /**\n     * Flag indicating that the frame buffer binding is handled by another component\n     */\n    get prePass() {\n        return !!this.prePassRenderer && this.prePassRenderer.defaultRT.enabled;\n    }\n    /**\n     * Gets or sets a boolean indicating if shadows are enabled on this scene\n     */\n    set shadowsEnabled(value) {\n        if (this._shadowsEnabled === value) {\n            return;\n        }\n        this._shadowsEnabled = value;\n        this.markAllMaterialsAsDirty(2);\n    }\n    get shadowsEnabled() {\n        return this._shadowsEnabled;\n    }\n    /**\n     * Gets or sets a boolean indicating if lights are enabled on this scene\n     */\n    set lightsEnabled(value) {\n        if (this._lightsEnabled === value) {\n            return;\n        }\n        this._lightsEnabled = value;\n        this.markAllMaterialsAsDirty(2);\n    }\n    get lightsEnabled() {\n        return this._lightsEnabled;\n    }\n    /** All of the active cameras added to this scene. */\n    get activeCameras() {\n        return this._activeCameras;\n    }\n    set activeCameras(cameras) {\n        if (this._unObserveActiveCameras) {\n            this._unObserveActiveCameras();\n            this._unObserveActiveCameras = null;\n        }\n        if (cameras) {\n            this._unObserveActiveCameras = _ObserveArray(cameras, () => {\n                this.onActiveCamerasChanged.notifyObservers(this);\n            });\n        }\n        this._activeCameras = cameras;\n    }\n    /** Gets or sets the current active camera */\n    get activeCamera() {\n        return this._activeCamera;\n    }\n    set activeCamera(value) {\n        if (value === this._activeCamera) {\n            return;\n        }\n        this._activeCamera = value;\n        this.onActiveCameraChanged.notifyObservers(this);\n    }\n    /** The default material used on meshes when no material is affected */\n    get defaultMaterial() {\n        if (!this._defaultMaterial) {\n            this._defaultMaterial = Scene.DefaultMaterialFactory(this);\n        }\n        return this._defaultMaterial;\n    }\n    /** The default material used on meshes when no material is affected */\n    set defaultMaterial(value) {\n        this._defaultMaterial = value;\n    }\n    /**\n     * Gets or sets a boolean indicating if textures are enabled on this scene\n     */\n    set texturesEnabled(value) {\n        if (this._texturesEnabled === value) {\n            return;\n        }\n        this._texturesEnabled = value;\n        this.markAllMaterialsAsDirty(1);\n    }\n    get texturesEnabled() {\n        return this._texturesEnabled;\n    }\n    /**\n     * Gets or sets a boolean indicating if skeletons are enabled on this scene\n     */\n    set skeletonsEnabled(value) {\n        if (this._skeletonsEnabled === value) {\n            return;\n        }\n        this._skeletonsEnabled = value;\n        this.markAllMaterialsAsDirty(8);\n    }\n    get skeletonsEnabled() {\n        return this._skeletonsEnabled;\n    }\n    /** @internal */\n    get collisionCoordinator() {\n        if (!this._collisionCoordinator) {\n            this._collisionCoordinator = Scene.CollisionCoordinatorFactory();\n            this._collisionCoordinator.init(this);\n        }\n        return this._collisionCoordinator;\n    }\n    /**\n     * Gets the scene's rendering manager\n     */\n    get renderingManager() {\n        return this._renderingManager;\n    }\n    /**\n     * Gets the list of frustum planes (built from the active camera)\n     */\n    get frustumPlanes() {\n        return this._frustumPlanes;\n    }\n    /**\n     * Registers the transient components if needed.\n     */\n    _registerTransientComponents() {\n        // Register components that have been associated lately to the scene.\n        if (this._transientComponents.length > 0) {\n            for (const component of this._transientComponents) {\n                component.register();\n            }\n            this._transientComponents.length = 0;\n        }\n    }\n    /**\n     * @internal\n     * Add a component to the scene.\n     * Note that the ccomponent could be registered on th next frame if this is called after\n     * the register component stage.\n     * @param component Defines the component to add to the scene\n     */\n    _addComponent(component) {\n        this._components.push(component);\n        this._transientComponents.push(component);\n        const serializableComponent = component;\n        if (serializableComponent.addFromContainer && serializableComponent.serialize) {\n            this._serializableComponents.push(serializableComponent);\n        }\n    }\n    /**\n     * @internal\n     * Gets a component from the scene.\n     * @param name defines the name of the component to retrieve\n     * @returns the component or null if not present\n     */\n    _getComponent(name) {\n        for (const component of this._components) {\n            if (component.name === name) {\n                return component;\n            }\n        }\n        return null;\n    }\n    /**\n     * Creates a new Scene\n     * @param engine defines the engine to use to render this scene\n     * @param options defines the scene options\n     */\n    constructor(engine, options) {\n        super();\n        // Members\n        /** @internal */\n        this._inputManager = new InputManager(this);\n        /** Define this parameter if you are using multiple cameras and you want to specify which one should be used for pointer position */\n        this.cameraToUseForPointers = null;\n        /** @internal */\n        this._isScene = true;\n        /** @internal */\n        this._blockEntityCollection = false;\n        /**\n         * Gets or sets a boolean that indicates if the scene must clear the render buffer before rendering a frame\n         */\n        this.autoClear = true;\n        /**\n         * Gets or sets a boolean that indicates if the scene must clear the depth and stencil buffers before rendering a frame\n         */\n        this.autoClearDepthAndStencil = true;\n        /**\n         * Defines the color used to clear the render buffer (Default is (0.2, 0.2, 0.3, 1.0))\n         */\n        this.clearColor = new Color4(0.2, 0.2, 0.3, 1.0);\n        /**\n         * Defines the color used to simulate the ambient color (Default is (0, 0, 0))\n         */\n        this.ambientColor = new Color3(0, 0, 0);\n        /**\n         * Intensity of the environment in all pbr material.\n         * This dims or reinforces the IBL lighting overall (reflection and diffuse).\n         * As in the majority of the scene they are the same (exception for multi room and so on),\n         * this is easier to reference from here than from all the materials.\n         */\n        this.environmentIntensity = 1;\n        this._performancePriority = ScenePerformancePriority.BackwardCompatible;\n        this._forceWireframe = false;\n        this._skipFrustumClipping = false;\n        this._forcePointsCloud = false;\n        /**\n         * Gets or sets a boolean indicating if animations are enabled\n         */\n        this.animationsEnabled = true;\n        this._animationPropertiesOverride = null;\n        /**\n         * Gets or sets a boolean indicating if a constant deltatime has to be used\n         * This is mostly useful for testing purposes when you do not want the animations to scale with the framerate\n         */\n        this.useConstantAnimationDeltaTime = false;\n        /**\n         * Gets or sets a boolean indicating if the scene must keep the meshUnderPointer property updated\n         * Please note that it requires to run a ray cast through the scene on every frame\n         */\n        this.constantlyUpdateMeshUnderPointer = false;\n        /**\n         * Defines the HTML cursor to use when hovering over interactive elements\n         */\n        this.hoverCursor = \"pointer\";\n        /**\n         * Defines the HTML default cursor to use (empty by default)\n         */\n        this.defaultCursor = \"\";\n        /**\n         * Defines whether cursors are handled by the scene.\n         */\n        this.doNotHandleCursors = false;\n        /**\n         * This is used to call preventDefault() on pointer down\n         * in order to block unwanted artifacts like system double clicks\n         */\n        this.preventDefaultOnPointerDown = true;\n        /**\n         * This is used to call preventDefault() on pointer up\n         * in order to block unwanted artifacts like system double clicks\n         */\n        this.preventDefaultOnPointerUp = true;\n        // Metadata\n        /**\n         * Gets or sets user defined metadata\n         */\n        this.metadata = null;\n        /**\n         * For internal use only. Please do not use.\n         */\n        this.reservedDataStore = null;\n        /**\n         * Use this array to add regular expressions used to disable offline support for specific urls\n         */\n        this.disableOfflineSupportExceptionRules = new Array();\n        /**\n         * An event triggered when the scene is disposed.\n         */\n        this.onDisposeObservable = new Observable();\n        this._onDisposeObserver = null;\n        /**\n         * An event triggered before rendering the scene (right after animations and physics)\n         */\n        this.onBeforeRenderObservable = new Observable();\n        this._onBeforeRenderObserver = null;\n        /**\n         * An event triggered after rendering the scene\n         */\n        this.onAfterRenderObservable = new Observable();\n        /**\n         * An event triggered after rendering the scene for an active camera (When scene.render is called this will be called after each camera)\n         * This is triggered for each \"sub\" camera in a Camera Rig unlike onAfterCameraRenderObservable\n         */\n        this.onAfterRenderCameraObservable = new Observable();\n        this._onAfterRenderObserver = null;\n        /**\n         * An event triggered before animating the scene\n         */\n        this.onBeforeAnimationsObservable = new Observable();\n        /**\n         * An event triggered after animations processing\n         */\n        this.onAfterAnimationsObservable = new Observable();\n        /**\n         * An event triggered before draw calls are ready to be sent\n         */\n        this.onBeforeDrawPhaseObservable = new Observable();\n        /**\n         * An event triggered after draw calls have been sent\n         */\n        this.onAfterDrawPhaseObservable = new Observable();\n        /**\n         * An event triggered when the scene is ready\n         */\n        this.onReadyObservable = new Observable();\n        /**\n         * An event triggered before rendering a camera\n         */\n        this.onBeforeCameraRenderObservable = new Observable();\n        this._onBeforeCameraRenderObserver = null;\n        /**\n         * An event triggered after rendering a camera\n         * This is triggered for the full rig Camera only unlike onAfterRenderCameraObservable\n         */\n        this.onAfterCameraRenderObservable = new Observable();\n        this._onAfterCameraRenderObserver = null;\n        /**\n         * An event triggered when active meshes evaluation is about to start\n         */\n        this.onBeforeActiveMeshesEvaluationObservable = new Observable();\n        /**\n         * An event triggered when active meshes evaluation is done\n         */\n        this.onAfterActiveMeshesEvaluationObservable = new Observable();\n        /**\n         * An event triggered when particles rendering is about to start\n         * Note: This event can be trigger more than once per frame (because particles can be rendered by render target textures as well)\n         */\n        this.onBeforeParticlesRenderingObservable = new Observable();\n        /**\n         * An event triggered when particles rendering is done\n         * Note: This event can be trigger more than once per frame (because particles can be rendered by render target textures as well)\n         */\n        this.onAfterParticlesRenderingObservable = new Observable();\n        /**\n         * An event triggered when SceneLoader.Append or SceneLoader.Load or SceneLoader.ImportMesh were successfully executed\n         */\n        this.onDataLoadedObservable = new Observable();\n        /**\n         * An event triggered when a camera is created\n         */\n        this.onNewCameraAddedObservable = new Observable();\n        /**\n         * An event triggered when a camera is removed\n         */\n        this.onCameraRemovedObservable = new Observable();\n        /**\n         * An event triggered when a light is created\n         */\n        this.onNewLightAddedObservable = new Observable();\n        /**\n         * An event triggered when a light is removed\n         */\n        this.onLightRemovedObservable = new Observable();\n        /**\n         * An event triggered when a geometry is created\n         */\n        this.onNewGeometryAddedObservable = new Observable();\n        /**\n         * An event triggered when a geometry is removed\n         */\n        this.onGeometryRemovedObservable = new Observable();\n        /**\n         * An event triggered when a transform node is created\n         */\n        this.onNewTransformNodeAddedObservable = new Observable();\n        /**\n         * An event triggered when a transform node is removed\n         */\n        this.onTransformNodeRemovedObservable = new Observable();\n        /**\n         * An event triggered when a mesh is created\n         */\n        this.onNewMeshAddedObservable = new Observable();\n        /**\n         * An event triggered when a mesh is removed\n         */\n        this.onMeshRemovedObservable = new Observable();\n        /**\n         * An event triggered when a skeleton is created\n         */\n        this.onNewSkeletonAddedObservable = new Observable();\n        /**\n         * An event triggered when a skeleton is removed\n         */\n        this.onSkeletonRemovedObservable = new Observable();\n        /**\n         * An event triggered when a material is created\n         */\n        this.onNewMaterialAddedObservable = new Observable();\n        /**\n         * An event triggered when a multi material is created\n         */\n        this.onNewMultiMaterialAddedObservable = new Observable();\n        /**\n         * An event triggered when a material is removed\n         */\n        this.onMaterialRemovedObservable = new Observable();\n        /**\n         * An event triggered when a multi material is removed\n         */\n        this.onMultiMaterialRemovedObservable = new Observable();\n        /**\n         * An event triggered when a texture is created\n         */\n        this.onNewTextureAddedObservable = new Observable();\n        /**\n         * An event triggered when a texture is removed\n         */\n        this.onTextureRemovedObservable = new Observable();\n        /**\n         * An event triggered when render targets are about to be rendered\n         * Can happen multiple times per frame.\n         */\n        this.onBeforeRenderTargetsRenderObservable = new Observable();\n        /**\n         * An event triggered when render targets were rendered.\n         * Can happen multiple times per frame.\n         */\n        this.onAfterRenderTargetsRenderObservable = new Observable();\n        /**\n         * An event triggered before calculating deterministic simulation step\n         */\n        this.onBeforeStepObservable = new Observable();\n        /**\n         * An event triggered after calculating deterministic simulation step\n         */\n        this.onAfterStepObservable = new Observable();\n        /**\n         * An event triggered when the activeCamera property is updated\n         */\n        this.onActiveCameraChanged = new Observable();\n        /**\n         * An event triggered when the activeCameras property is updated\n         */\n        this.onActiveCamerasChanged = new Observable();\n        /**\n         * This Observable will be triggered before rendering each renderingGroup of each rendered camera.\n         * The RenderingGroupInfo class contains all the information about the context in which the observable is called\n         * If you wish to register an Observer only for a given set of renderingGroup, use the mask with a combination of the renderingGroup index elevated to the power of two (1 for renderingGroup 0, 2 for renderingrOup1, 4 for 2 and 8 for 3)\n         */\n        this.onBeforeRenderingGroupObservable = new Observable();\n        /**\n         * This Observable will be triggered after rendering each renderingGroup of each rendered camera.\n         * The RenderingGroupInfo class contains all the information about the context in which the observable is called\n         * If you wish to register an Observer only for a given set of renderingGroup, use the mask with a combination of the renderingGroup index elevated to the power of two (1 for renderingGroup 0, 2 for renderingrOup1, 4 for 2 and 8 for 3)\n         */\n        this.onAfterRenderingGroupObservable = new Observable();\n        /**\n         * This Observable will when a mesh has been imported into the scene.\n         */\n        this.onMeshImportedObservable = new Observable();\n        /**\n         * This Observable will when an animation file has been imported into the scene.\n         */\n        this.onAnimationFileImportedObservable = new Observable();\n        // Animations\n        /** @internal */\n        this._registeredForLateAnimationBindings = new SmartArrayNoDuplicate(256);\n        /**\n         * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer move event occurs.\n         */\n        this.skipPointerMovePicking = false;\n        /**\n         * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer down event occurs.\n         */\n        this.skipPointerDownPicking = false;\n        /**\n         * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer up event occurs.  Off by default.\n         */\n        this.skipPointerUpPicking = false;\n        /**\n         * This observable event is triggered when any ponter event is triggered. It is registered during Scene.attachControl() and it is called BEFORE the 3D engine process anything (mesh/sprite picking for instance).\n         * You have the possibility to skip the process and the call to onPointerObservable by setting PointerInfoPre.skipOnPointerObservable to true\n         */\n        this.onPrePointerObservable = new Observable();\n        /**\n         * Observable event triggered each time an input event is received from the rendering canvas\n         */\n        this.onPointerObservable = new Observable();\n        // Keyboard\n        /**\n         * This observable event is triggered when any keyboard event si raised and registered during Scene.attachControl()\n         * You have the possibility to skip the process and the call to onKeyboardObservable by setting KeyboardInfoPre.skipOnPointerObservable to true\n         */\n        this.onPreKeyboardObservable = new Observable();\n        /**\n         * Observable event triggered each time an keyboard event is received from the hosting window\n         */\n        this.onKeyboardObservable = new Observable();\n        // Coordinates system\n        this._useRightHandedSystem = false;\n        // Deterministic lockstep\n        this._timeAccumulator = 0;\n        this._currentStepId = 0;\n        this._currentInternalStep = 0;\n        // Fog\n        this._fogEnabled = true;\n        this._fogMode = Scene.FOGMODE_NONE;\n        /**\n         * Gets or sets the fog color to use\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\n         * (Default is Color3(0.2, 0.2, 0.3))\n         */\n        this.fogColor = new Color3(0.2, 0.2, 0.3);\n        /**\n         * Gets or sets the fog density to use\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\n         * (Default is 0.1)\n         */\n        this.fogDensity = 0.1;\n        /**\n         * Gets or sets the fog start distance to use\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\n         * (Default is 0)\n         */\n        this.fogStart = 0;\n        /**\n         * Gets or sets the fog end distance to use\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\n         * (Default is 1000)\n         */\n        this.fogEnd = 1000.0;\n        /**\n         * Flag indicating if we need to store previous matrices when rendering\n         */\n        this.needsPreviousWorldMatrices = false;\n        // Lights\n        this._shadowsEnabled = true;\n        this._lightsEnabled = true;\n        this._unObserveActiveCameras = null;\n        // Textures\n        this._texturesEnabled = true;\n        // Physics\n        /**\n         * Gets or sets a boolean indicating if physic engines are enabled on this scene\n         */\n        this.physicsEnabled = true;\n        // Particles\n        /**\n         * Gets or sets a boolean indicating if particles are enabled on this scene\n         */\n        this.particlesEnabled = true;\n        // Sprites\n        /**\n         * Gets or sets a boolean indicating if sprites are enabled on this scene\n         */\n        this.spritesEnabled = true;\n        // Skeletons\n        this._skeletonsEnabled = true;\n        // Lens flares\n        /**\n         * Gets or sets a boolean indicating if lens flares are enabled on this scene\n         */\n        this.lensFlaresEnabled = true;\n        // Collisions\n        /**\n         * Gets or sets a boolean indicating if collisions are enabled on this scene\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions\n         */\n        this.collisionsEnabled = true;\n        /**\n         * Defines the gravity applied to this scene (used only for collisions)\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions\n         */\n        this.gravity = new Vector3(0, -9.807, 0);\n        // Postprocesses\n        /**\n         * Gets or sets a boolean indicating if postprocesses are enabled on this scene\n         */\n        this.postProcessesEnabled = true;\n        // Customs render targets\n        /**\n         * Gets or sets a boolean indicating if render targets are enabled on this scene\n         */\n        this.renderTargetsEnabled = true;\n        /**\n         * Gets or sets a boolean indicating if next render targets must be dumped as image for debugging purposes\n         * We recommend not using it and instead rely on Spector.js: http://spector.babylonjs.com\n         */\n        this.dumpNextRenderTargets = false;\n        /**\n         * The list of user defined render targets added to the scene\n         */\n        this.customRenderTargets = new Array();\n        /**\n         * Gets the list of meshes imported to the scene through SceneLoader\n         */\n        this.importedMeshesFiles = new Array();\n        // Probes\n        /**\n         * Gets or sets a boolean indicating if probes are enabled on this scene\n         */\n        this.probesEnabled = true;\n        this._meshesForIntersections = new SmartArrayNoDuplicate(256);\n        // Procedural textures\n        /**\n         * Gets or sets a boolean indicating if procedural textures are enabled on this scene\n         */\n        this.proceduralTexturesEnabled = true;\n        // Performance counters\n        this._totalVertices = new PerfCounter();\n        /** @internal */\n        this._activeIndices = new PerfCounter();\n        /** @internal */\n        this._activeParticles = new PerfCounter();\n        /** @internal */\n        this._activeBones = new PerfCounter();\n        /** @internal */\n        this._animationTime = 0;\n        /**\n         * Gets or sets a general scale for animation speed\n         * @see https://www.babylonjs-playground.com/#IBU2W7#3\n         */\n        this.animationTimeScale = 1;\n        this._renderId = 0;\n        this._frameId = 0;\n        this._executeWhenReadyTimeoutId = null;\n        this._intermediateRendering = false;\n        this._defaultFrameBufferCleared = false;\n        this._viewUpdateFlag = -1;\n        this._projectionUpdateFlag = -1;\n        /** @internal */\n        this._toBeDisposed = new Array(256);\n        this._activeRequests = new Array();\n        /** @internal */\n        this._pendingData = new Array();\n        this._isDisposed = false;\n        /**\n         * Gets or sets a boolean indicating that all submeshes of active meshes must be rendered\n         * Use this boolean to avoid computing frustum clipping on submeshes (This could help when you are CPU bound)\n         */\n        this.dispatchAllSubMeshesOfActiveMeshes = false;\n        this._activeMeshes = new SmartArray(256);\n        this._processedMaterials = new SmartArray(256);\n        this._renderTargets = new SmartArrayNoDuplicate(256);\n        this._materialsRenderTargets = new SmartArrayNoDuplicate(256);\n        /** @internal */\n        this._activeParticleSystems = new SmartArray(256);\n        this._activeSkeletons = new SmartArrayNoDuplicate(32);\n        this._softwareSkinnedMeshes = new SmartArrayNoDuplicate(32);\n        /** @internal */\n        this._activeAnimatables = new Array();\n        this._transformMatrix = Matrix.Zero();\n        /**\n         * Gets or sets a boolean indicating if lights must be sorted by priority (off by default)\n         * This is useful if there are more lights that the maximum simulteanous authorized\n         */\n        this.requireLightSorting = false;\n        /**\n         * @internal\n         * Backing store of defined scene components.\n         */\n        this._components = [];\n        /**\n         * @internal\n         * Backing store of defined scene components.\n         */\n        this._serializableComponents = [];\n        /**\n         * List of components to register on the next registration step.\n         */\n        this._transientComponents = [];\n        /**\n         * @internal\n         * Defines the actions happening before camera updates.\n         */\n        this._beforeCameraUpdateStage = Stage.Create();\n        /**\n         * @internal\n         * Defines the actions happening before clear the canvas.\n         */\n        this._beforeClearStage = Stage.Create();\n        /**\n         * @internal\n         * Defines the actions happening before clear the canvas.\n         */\n        this._beforeRenderTargetClearStage = Stage.Create();\n        /**\n         * @internal\n         * Defines the actions when collecting render targets for the frame.\n         */\n        this._gatherRenderTargetsStage = Stage.Create();\n        /**\n         * @internal\n         * Defines the actions happening for one camera in the frame.\n         */\n        this._gatherActiveCameraRenderTargetsStage = Stage.Create();\n        /**\n         * @internal\n         * Defines the actions happening during the per mesh ready checks.\n         */\n        this._isReadyForMeshStage = Stage.Create();\n        /**\n         * @internal\n         * Defines the actions happening before evaluate active mesh checks.\n         */\n        this._beforeEvaluateActiveMeshStage = Stage.Create();\n        /**\n         * @internal\n         * Defines the actions happening during the evaluate sub mesh checks.\n         */\n        this._evaluateSubMeshStage = Stage.Create();\n        /**\n         * @internal\n         * Defines the actions happening during the active mesh stage.\n         */\n        this._preActiveMeshStage = Stage.Create();\n        /**\n         * @internal\n         * Defines the actions happening during the per camera render target step.\n         */\n        this._cameraDrawRenderTargetStage = Stage.Create();\n        /**\n         * @internal\n         * Defines the actions happening just before the active camera is drawing.\n         */\n        this._beforeCameraDrawStage = Stage.Create();\n        /**\n         * @internal\n         * Defines the actions happening just before a render target is drawing.\n         */\n        this._beforeRenderTargetDrawStage = Stage.Create();\n        /**\n         * @internal\n         * Defines the actions happening just before a rendering group is drawing.\n         */\n        this._beforeRenderingGroupDrawStage = Stage.Create();\n        /**\n         * @internal\n         * Defines the actions happening just before a mesh is drawing.\n         */\n        this._beforeRenderingMeshStage = Stage.Create();\n        /**\n         * @internal\n         * Defines the actions happening just after a mesh has been drawn.\n         */\n        this._afterRenderingMeshStage = Stage.Create();\n        /**\n         * @internal\n         * Defines the actions happening just after a rendering group has been drawn.\n         */\n        this._afterRenderingGroupDrawStage = Stage.Create();\n        /**\n         * @internal\n         * Defines the actions happening just after the active camera has been drawn.\n         */\n        this._afterCameraDrawStage = Stage.Create();\n        /**\n         * @internal\n         * Defines the actions happening just after the post processing\n         */\n        this._afterCameraPostProcessStage = Stage.Create();\n        /**\n         * @internal\n         * Defines the actions happening just after a render target has been drawn.\n         */\n        this._afterRenderTargetDrawStage = Stage.Create();\n        /**\n         * Defines the actions happening just after the post processing on a render target\n         */\n        this._afterRenderTargetPostProcessStage = Stage.Create();\n        /**\n         * @internal\n         * Defines the actions happening just after rendering all cameras and computing intersections.\n         */\n        this._afterRenderStage = Stage.Create();\n        /**\n         * @internal\n         * Defines the actions happening when a pointer move event happens.\n         */\n        this._pointerMoveStage = Stage.Create();\n        /**\n         * @internal\n         * Defines the actions happening when a pointer down event happens.\n         */\n        this._pointerDownStage = Stage.Create();\n        /**\n         * @internal\n         * Defines the actions happening when a pointer up event happens.\n         */\n        this._pointerUpStage = Stage.Create();\n        /**\n         * an optional map from Geometry Id to Geometry index in the 'geometries' array\n         */\n        this._geometriesByUniqueId = null;\n        this._defaultMeshCandidates = {\n            data: [],\n            length: 0\n        };\n        this._defaultSubMeshCandidates = {\n            data: [],\n            length: 0\n        };\n        this._preventFreeActiveMeshesAndRenderingGroups = false;\n        /** @internal */\n        this._activeMeshesFrozen = false;\n        /** @internal */\n        this._activeMeshesFrozenButKeepClipping = false;\n        this._skipEvaluateActiveMeshesCompletely = false;\n        /** @internal */\n        this._allowPostProcessClearColor = true;\n        /**\n         * User updatable function that will return a deterministic frame time when engine is in deterministic lock step mode\n         */\n        this.getDeterministicFrameTime = () => {\n            return this._engine.getTimeStep();\n        };\n        /** @internal */\n        this._registeredActions = 0;\n        this._blockMaterialDirtyMechanism = false;\n        /**\n         * Internal perfCollector instance used for sharing between inspector and playground.\n         * Marked as protected to allow sharing between prototype extensions, but disallow access at toplevel.\n         */\n        this._perfCollector = null;\n        this.activeCameras = new Array();\n        const fullOptions = {\n            useGeometryUniqueIdsMap: true,\n            useMaterialMeshMap: true,\n            useClonedMeshMap: true,\n            virtual: false,\n            ...options\n        };\n        this._engine = engine || EngineStore.LastCreatedEngine;\n        if (!fullOptions.virtual) {\n            EngineStore._LastCreatedScene = this;\n            this._engine.scenes.push(this);\n        }\n        else {\n            this._engine._virtualScenes.push(this);\n        }\n        this._uid = null;\n        this._renderingManager = new RenderingManager(this);\n        if (PostProcessManager) {\n            this.postProcessManager = new PostProcessManager(this);\n        }\n        if (IsWindowObjectExist()) {\n            this.attachControl();\n        }\n        // Uniform Buffer\n        this._createUbo();\n        // Default Image processing definition\n        if (ImageProcessingConfiguration) {\n            this._imageProcessingConfiguration = new ImageProcessingConfiguration();\n        }\n        this.setDefaultCandidateProviders();\n        if (fullOptions.useGeometryUniqueIdsMap) {\n            this._geometriesByUniqueId = {};\n        }\n        this.useMaterialMeshMap = fullOptions.useMaterialMeshMap;\n        this.useClonedMeshMap = fullOptions.useClonedMeshMap;\n        if (!options || !options.virtual) {\n            this._engine.onNewSceneAddedObservable.notifyObservers(this);\n        }\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"Scene\" string\n     */\n    getClassName() {\n        return \"Scene\";\n    }\n    /**\n     * @internal\n     */\n    _getDefaultMeshCandidates() {\n        this._defaultMeshCandidates.data = this.meshes;\n        this._defaultMeshCandidates.length = this.meshes.length;\n        return this._defaultMeshCandidates;\n    }\n    /**\n     * @internal\n     */\n    _getDefaultSubMeshCandidates(mesh) {\n        this._defaultSubMeshCandidates.data = mesh.subMeshes;\n        this._defaultSubMeshCandidates.length = mesh.subMeshes.length;\n        return this._defaultSubMeshCandidates;\n    }\n    /**\n     * Sets the default candidate providers for the scene.\n     * This sets the getActiveMeshCandidates, getActiveSubMeshCandidates, getIntersectingSubMeshCandidates\n     * and getCollidingSubMeshCandidates to their default function\n     */\n    setDefaultCandidateProviders() {\n        this.getActiveMeshCandidates = this._getDefaultMeshCandidates.bind(this);\n        this.getActiveSubMeshCandidates = this._getDefaultSubMeshCandidates.bind(this);\n        this.getIntersectingSubMeshCandidates = this._getDefaultSubMeshCandidates.bind(this);\n        this.getCollidingSubMeshCandidates = this._getDefaultSubMeshCandidates.bind(this);\n    }\n    /**\n     * Gets the mesh that is currently under the pointer\n     */\n    get meshUnderPointer() {\n        return this._inputManager.meshUnderPointer;\n    }\n    /**\n     * Gets or sets the current on-screen X position of the pointer\n     */\n    get pointerX() {\n        return this._inputManager.pointerX;\n    }\n    set pointerX(value) {\n        this._inputManager.pointerX = value;\n    }\n    /**\n     * Gets or sets the current on-screen Y position of the pointer\n     */\n    get pointerY() {\n        return this._inputManager.pointerY;\n    }\n    set pointerY(value) {\n        this._inputManager.pointerY = value;\n    }\n    /**\n     * Gets the cached material (ie. the latest rendered one)\n     * @returns the cached material\n     */\n    getCachedMaterial() {\n        return this._cachedMaterial;\n    }\n    /**\n     * Gets the cached effect (ie. the latest rendered one)\n     * @returns the cached effect\n     */\n    getCachedEffect() {\n        return this._cachedEffect;\n    }\n    /**\n     * Gets the cached visibility state (ie. the latest rendered one)\n     * @returns the cached visibility state\n     */\n    getCachedVisibility() {\n        return this._cachedVisibility;\n    }\n    /**\n     * Gets a boolean indicating if the current material / effect / visibility must be bind again\n     * @param material defines the current material\n     * @param effect defines the current effect\n     * @param visibility defines the current visibility state\n     * @returns true if one parameter is not cached\n     */\n    isCachedMaterialInvalid(material, effect, visibility = 1) {\n        return this._cachedEffect !== effect || this._cachedMaterial !== material || this._cachedVisibility !== visibility;\n    }\n    /**\n     * Gets the engine associated with the scene\n     * @returns an Engine\n     */\n    getEngine() {\n        return this._engine;\n    }\n    /**\n     * Gets the total number of vertices rendered per frame\n     * @returns the total number of vertices rendered per frame\n     */\n    getTotalVertices() {\n        return this._totalVertices.current;\n    }\n    /**\n     * Gets the performance counter for total vertices\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#instrumentation\n     */\n    get totalVerticesPerfCounter() {\n        return this._totalVertices;\n    }\n    /**\n     * Gets the total number of active indices rendered per frame (You can deduce the number of rendered triangles by dividing this number by 3)\n     * @returns the total number of active indices rendered per frame\n     */\n    getActiveIndices() {\n        return this._activeIndices.current;\n    }\n    /**\n     * Gets the performance counter for active indices\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#instrumentation\n     */\n    get totalActiveIndicesPerfCounter() {\n        return this._activeIndices;\n    }\n    /**\n     * Gets the total number of active particles rendered per frame\n     * @returns the total number of active particles rendered per frame\n     */\n    getActiveParticles() {\n        return this._activeParticles.current;\n    }\n    /**\n     * Gets the performance counter for active particles\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#instrumentation\n     */\n    get activeParticlesPerfCounter() {\n        return this._activeParticles;\n    }\n    /**\n     * Gets the total number of active bones rendered per frame\n     * @returns the total number of active bones rendered per frame\n     */\n    getActiveBones() {\n        return this._activeBones.current;\n    }\n    /**\n     * Gets the performance counter for active bones\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#instrumentation\n     */\n    get activeBonesPerfCounter() {\n        return this._activeBones;\n    }\n    /**\n     * Gets the array of active meshes\n     * @returns an array of AbstractMesh\n     */\n    getActiveMeshes() {\n        return this._activeMeshes;\n    }\n    /**\n     * Gets the animation ratio (which is 1.0 is the scene renders at 60fps and 2 if the scene renders at 30fps, etc.)\n     * @returns a number\n     */\n    getAnimationRatio() {\n        return this._animationRatio !== undefined ? this._animationRatio : 1;\n    }\n    /**\n     * Gets an unique Id for the current render phase\n     * @returns a number\n     */\n    getRenderId() {\n        return this._renderId;\n    }\n    /**\n     * Gets an unique Id for the current frame\n     * @returns a number\n     */\n    getFrameId() {\n        return this._frameId;\n    }\n    /** Call this function if you want to manually increment the render Id*/\n    incrementRenderId() {\n        this._renderId++;\n    }\n    _createUbo() {\n        this.setSceneUniformBuffer(this.createSceneUniformBuffer());\n    }\n    /**\n     * Use this method to simulate a pointer move on a mesh\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\n     * @param pickResult pickingInfo of the object wished to simulate pointer event on\n     * @param pointerEventInit pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\n     * @returns the current scene\n     */\n    simulatePointerMove(pickResult, pointerEventInit) {\n        this._inputManager.simulatePointerMove(pickResult, pointerEventInit);\n        return this;\n    }\n    /**\n     * Use this method to simulate a pointer down on a mesh\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\n     * @param pickResult pickingInfo of the object wished to simulate pointer event on\n     * @param pointerEventInit pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\n     * @returns the current scene\n     */\n    simulatePointerDown(pickResult, pointerEventInit) {\n        this._inputManager.simulatePointerDown(pickResult, pointerEventInit);\n        return this;\n    }\n    /**\n     * Use this method to simulate a pointer up on a mesh\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\n     * @param pickResult pickingInfo of the object wished to simulate pointer event on\n     * @param pointerEventInit pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\n     * @param doubleTap indicates that the pointer up event should be considered as part of a double click (false by default)\n     * @returns the current scene\n     */\n    simulatePointerUp(pickResult, pointerEventInit, doubleTap) {\n        this._inputManager.simulatePointerUp(pickResult, pointerEventInit, doubleTap);\n        return this;\n    }\n    /**\n     * Gets a boolean indicating if the current pointer event is captured (meaning that the scene has already handled the pointer down)\n     * @param pointerId defines the pointer id to use in a multi-touch scenario (0 by default)\n     * @returns true if the pointer was captured\n     */\n    isPointerCaptured(pointerId = 0) {\n        return this._inputManager.isPointerCaptured(pointerId);\n    }\n    /**\n     * Attach events to the canvas (To handle actionManagers triggers and raise onPointerMove, onPointerDown and onPointerUp\n     * @param attachUp defines if you want to attach events to pointerup\n     * @param attachDown defines if you want to attach events to pointerdown\n     * @param attachMove defines if you want to attach events to pointermove\n     */\n    attachControl(attachUp = true, attachDown = true, attachMove = true) {\n        this._inputManager.attachControl(attachUp, attachDown, attachMove);\n    }\n    /** Detaches all event handlers*/\n    detachControl() {\n        this._inputManager.detachControl();\n    }\n    /**\n     * This function will check if the scene can be rendered (textures are loaded, shaders are compiled)\n     * Delay loaded resources are not taking in account\n     * @param checkRenderTargets true to also check that the meshes rendered as part of a render target are ready (default: true)\n     * @returns true if all required resources are ready\n     */\n    isReady(checkRenderTargets = true) {\n        if (this._isDisposed) {\n            return false;\n        }\n        let index;\n        const engine = this.getEngine();\n        let isReady = true;\n        // Pending data\n        if (this._pendingData.length > 0) {\n            isReady = false;\n        }\n        // Meshes\n        if (checkRenderTargets) {\n            this._processedMaterials.reset();\n            this._materialsRenderTargets.reset();\n        }\n        for (index = 0; index < this.meshes.length; index++) {\n            const mesh = this.meshes[index];\n            if (!mesh.subMeshes || mesh.subMeshes.length === 0) {\n                continue;\n            }\n            // Do not stop at the first encountered \"unready\" object as we want to ensure\n            // all materials are starting off their compilation in parallel.\n            if (!mesh.isReady(true)) {\n                isReady = false;\n                continue;\n            }\n            const hardwareInstancedRendering = mesh.hasThinInstances ||\n                mesh.getClassName() === \"InstancedMesh\" ||\n                mesh.getClassName() === \"InstancedLinesMesh\" ||\n                (engine.getCaps().instancedArrays && mesh.instances.length > 0);\n            // Is Ready For Mesh\n            for (const step of this._isReadyForMeshStage) {\n                if (!step.action(mesh, hardwareInstancedRendering)) {\n                    isReady = false;\n                }\n            }\n            if (!checkRenderTargets) {\n                continue;\n            }\n            const mat = mesh.material || this.defaultMaterial;\n            if (mat) {\n                if (mat._storeEffectOnSubMeshes) {\n                    for (const subMesh of mesh.subMeshes) {\n                        const material = subMesh.getMaterial();\n                        if (material && material.hasRenderTargetTextures && material.getRenderTargetTextures != null) {\n                            if (this._processedMaterials.indexOf(material) === -1) {\n                                this._processedMaterials.push(material);\n                                this._materialsRenderTargets.concatWithNoDuplicate(material.getRenderTargetTextures());\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (mat.hasRenderTargetTextures && mat.getRenderTargetTextures != null) {\n                        if (this._processedMaterials.indexOf(mat) === -1) {\n                            this._processedMaterials.push(mat);\n                            this._materialsRenderTargets.concatWithNoDuplicate(mat.getRenderTargetTextures());\n                        }\n                    }\n                }\n            }\n        }\n        if (!isReady) {\n            return false;\n        }\n        // Effects\n        if (!engine.areAllEffectsReady()) {\n            return false;\n        }\n        // Render targets\n        if (checkRenderTargets) {\n            for (index = 0; index < this._materialsRenderTargets.length; ++index) {\n                const rtt = this._materialsRenderTargets.data[index];\n                if (!rtt.isReadyForRendering()) {\n                    return false;\n                }\n            }\n        }\n        // Geometries\n        for (index = 0; index < this.geometries.length; index++) {\n            const geometry = this.geometries[index];\n            if (geometry.delayLoadState === 2) {\n                return false;\n            }\n        }\n        // Post-processes\n        if (this.activeCameras && this.activeCameras.length > 0) {\n            for (const camera of this.activeCameras) {\n                if (!camera.isReady(true)) {\n                    return false;\n                }\n            }\n        }\n        else if (this.activeCamera) {\n            if (!this.activeCamera.isReady(true)) {\n                return false;\n            }\n        }\n        // Particles\n        for (const particleSystem of this.particleSystems) {\n            if (!particleSystem.isReady()) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /** Resets all cached information relative to material (including effect and visibility) */\n    resetCachedMaterial() {\n        this._cachedMaterial = null;\n        this._cachedEffect = null;\n        this._cachedVisibility = null;\n    }\n    /**\n     * Registers a function to be called before every frame render\n     * @param func defines the function to register\n     */\n    registerBeforeRender(func) {\n        this.onBeforeRenderObservable.add(func);\n    }\n    /**\n     * Unregisters a function called before every frame render\n     * @param func defines the function to unregister\n     */\n    unregisterBeforeRender(func) {\n        this.onBeforeRenderObservable.removeCallback(func);\n    }\n    /**\n     * Registers a function to be called after every frame render\n     * @param func defines the function to register\n     */\n    registerAfterRender(func) {\n        this.onAfterRenderObservable.add(func);\n    }\n    /**\n     * Unregisters a function called after every frame render\n     * @param func defines the function to unregister\n     */\n    unregisterAfterRender(func) {\n        this.onAfterRenderObservable.removeCallback(func);\n    }\n    _executeOnceBeforeRender(func) {\n        const execFunc = () => {\n            func();\n            setTimeout(() => {\n                this.unregisterBeforeRender(execFunc);\n            });\n        };\n        this.registerBeforeRender(execFunc);\n    }\n    /**\n     * The provided function will run before render once and will be disposed afterwards.\n     * A timeout delay can be provided so that the function will be executed in N ms.\n     * The timeout is using the browser's native setTimeout so time percision cannot be guaranteed.\n     * @param func The function to be executed.\n     * @param timeout optional delay in ms\n     */\n    executeOnceBeforeRender(func, timeout) {\n        if (timeout !== undefined) {\n            setTimeout(() => {\n                this._executeOnceBeforeRender(func);\n            }, timeout);\n        }\n        else {\n            this._executeOnceBeforeRender(func);\n        }\n    }\n    /**\n     * This function can help adding any object to the list of data awaited to be ready in order to check for a complete scene loading.\n     * @param data defines the object to wait for\n     */\n    addPendingData(data) {\n        this._pendingData.push(data);\n    }\n    /**\n     * Remove a pending data from the loading list which has previously been added with addPendingData.\n     * @param data defines the object to remove from the pending list\n     */\n    removePendingData(data) {\n        const wasLoading = this.isLoading;\n        const index = this._pendingData.indexOf(data);\n        if (index !== -1) {\n            this._pendingData.splice(index, 1);\n        }\n        if (wasLoading && !this.isLoading) {\n            this.onDataLoadedObservable.notifyObservers(this);\n        }\n    }\n    /**\n     * Returns the number of items waiting to be loaded\n     * @returns the number of items waiting to be loaded\n     */\n    getWaitingItemsCount() {\n        return this._pendingData.length;\n    }\n    /**\n     * Returns a boolean indicating if the scene is still loading data\n     */\n    get isLoading() {\n        return this._pendingData.length > 0;\n    }\n    /**\n     * Registers a function to be executed when the scene is ready\n     * @param {Function} func - the function to be executed\n     * @param checkRenderTargets true to also check that the meshes rendered as part of a render target are ready (default: false)\n     */\n    executeWhenReady(func, checkRenderTargets = false) {\n        this.onReadyObservable.addOnce(func);\n        if (this._executeWhenReadyTimeoutId !== null) {\n            return;\n        }\n        this._checkIsReady(checkRenderTargets);\n    }\n    /**\n     * Returns a promise that resolves when the scene is ready\n     * @param checkRenderTargets true to also check that the meshes rendered as part of a render target are ready (default: false)\n     * @returns A promise that resolves when the scene is ready\n     */\n    whenReadyAsync(checkRenderTargets = false) {\n        return new Promise((resolve) => {\n            this.executeWhenReady(() => {\n                resolve();\n            }, checkRenderTargets);\n        });\n    }\n    /**\n     * @internal\n     */\n    _checkIsReady(checkRenderTargets = false) {\n        this._registerTransientComponents();\n        if (this.isReady(checkRenderTargets)) {\n            this.onReadyObservable.notifyObservers(this);\n            this.onReadyObservable.clear();\n            this._executeWhenReadyTimeoutId = null;\n            return;\n        }\n        if (this._isDisposed) {\n            this.onReadyObservable.clear();\n            this._executeWhenReadyTimeoutId = null;\n            return;\n        }\n        this._executeWhenReadyTimeoutId = setTimeout(() => {\n            // Ensure materials effects are checked outside render loops\n            this.incrementRenderId();\n            this._checkIsReady(checkRenderTargets);\n        }, 100);\n    }\n    /**\n     * Gets all animatable attached to the scene\n     */\n    get animatables() {\n        return this._activeAnimatables;\n    }\n    /**\n     * Resets the last animation time frame.\n     * Useful to override when animations start running when loading a scene for the first time.\n     */\n    resetLastAnimationTimeFrame() {\n        this._animationTimeLast = PrecisionDate.Now;\n    }\n    // Matrix\n    /**\n     * Gets the current view matrix\n     * @returns a Matrix\n     */\n    getViewMatrix() {\n        return this._viewMatrix;\n    }\n    /**\n     * Gets the current projection matrix\n     * @returns a Matrix\n     */\n    getProjectionMatrix() {\n        return this._projectionMatrix;\n    }\n    /**\n     * Gets the current transform matrix\n     * @returns a Matrix made of View * Projection\n     */\n    getTransformMatrix() {\n        return this._transformMatrix;\n    }\n    /**\n     * Sets the current transform matrix\n     * @param viewL defines the View matrix to use\n     * @param projectionL defines the Projection matrix to use\n     * @param viewR defines the right View matrix to use (if provided)\n     * @param projectionR defines the right Projection matrix to use (if provided)\n     */\n    setTransformMatrix(viewL, projectionL, viewR, projectionR) {\n        // clear the multiviewSceneUbo if no viewR and projectionR are defined\n        if (!viewR && !projectionR && this._multiviewSceneUbo) {\n            this._multiviewSceneUbo.dispose();\n            this._multiviewSceneUbo = null;\n        }\n        if (this._viewUpdateFlag === viewL.updateFlag && this._projectionUpdateFlag === projectionL.updateFlag) {\n            return;\n        }\n        this._viewUpdateFlag = viewL.updateFlag;\n        this._projectionUpdateFlag = projectionL.updateFlag;\n        this._viewMatrix = viewL;\n        this._projectionMatrix = projectionL;\n        this._viewMatrix.multiplyToRef(this._projectionMatrix, this._transformMatrix);\n        // Update frustum\n        if (!this._frustumPlanes) {\n            this._frustumPlanes = Frustum.GetPlanes(this._transformMatrix);\n        }\n        else {\n            Frustum.GetPlanesToRef(this._transformMatrix, this._frustumPlanes);\n        }\n        if (this._multiviewSceneUbo && this._multiviewSceneUbo.useUbo) {\n            this._updateMultiviewUbo(viewR, projectionR);\n        }\n        else if (this._sceneUbo.useUbo) {\n            this._sceneUbo.updateMatrix(\"viewProjection\", this._transformMatrix);\n            this._sceneUbo.updateMatrix(\"view\", this._viewMatrix);\n            this._sceneUbo.updateMatrix(\"projection\", this._projectionMatrix);\n        }\n    }\n    /**\n     * Gets the uniform buffer used to store scene data\n     * @returns a UniformBuffer\n     */\n    getSceneUniformBuffer() {\n        return this._multiviewSceneUbo ? this._multiviewSceneUbo : this._sceneUbo;\n    }\n    /**\n     * Creates a scene UBO\n     * @param name name of the uniform buffer (optional, for debugging purpose only)\n     * @returns a new ubo\n     */\n    createSceneUniformBuffer(name) {\n        const sceneUbo = new UniformBuffer(this._engine, undefined, false, name !== null && name !== void 0 ? name : \"scene\");\n        sceneUbo.addUniform(\"viewProjection\", 16);\n        sceneUbo.addUniform(\"view\", 16);\n        sceneUbo.addUniform(\"projection\", 16);\n        sceneUbo.addUniform(\"vEyePosition\", 4);\n        return sceneUbo;\n    }\n    /**\n     * Sets the scene ubo\n     * @param ubo the ubo to set for the scene\n     */\n    setSceneUniformBuffer(ubo) {\n        this._sceneUbo = ubo;\n        this._viewUpdateFlag = -1;\n        this._projectionUpdateFlag = -1;\n    }\n    /**\n     * Gets an unique (relatively to the current scene) Id\n     * @returns an unique number for the scene\n     */\n    getUniqueId() {\n        return UniqueIdGenerator.UniqueId;\n    }\n    /**\n     * Add a mesh to the list of scene's meshes\n     * @param newMesh defines the mesh to add\n     * @param recursive if all child meshes should also be added to the scene\n     */\n    addMesh(newMesh, recursive = false) {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.meshes.push(newMesh);\n        newMesh._resyncLightSources();\n        if (!newMesh.parent) {\n            newMesh._addToSceneRootNodes();\n        }\n        this.onNewMeshAddedObservable.notifyObservers(newMesh);\n        if (recursive) {\n            newMesh.getChildMeshes().forEach((m) => {\n                this.addMesh(m);\n            });\n        }\n    }\n    /**\n     * Remove a mesh for the list of scene's meshes\n     * @param toRemove defines the mesh to remove\n     * @param recursive if all child meshes should also be removed from the scene\n     * @returns the index where the mesh was in the mesh list\n     */\n    removeMesh(toRemove, recursive = false) {\n        const index = this.meshes.indexOf(toRemove);\n        if (index !== -1) {\n            // Remove from the scene if mesh found\n            this.meshes[index] = this.meshes[this.meshes.length - 1];\n            this.meshes.pop();\n            if (!toRemove.parent) {\n                toRemove._removeFromSceneRootNodes();\n            }\n        }\n        this._inputManager._invalidateMesh(toRemove);\n        this.onMeshRemovedObservable.notifyObservers(toRemove);\n        if (recursive) {\n            toRemove.getChildMeshes().forEach((m) => {\n                this.removeMesh(m);\n            });\n        }\n        return index;\n    }\n    /**\n     * Add a transform node to the list of scene's transform nodes\n     * @param newTransformNode defines the transform node to add\n     */\n    addTransformNode(newTransformNode) {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        if (newTransformNode.getScene() === this && newTransformNode._indexInSceneTransformNodesArray !== -1) {\n            // Already there?\n            return;\n        }\n        newTransformNode._indexInSceneTransformNodesArray = this.transformNodes.length;\n        this.transformNodes.push(newTransformNode);\n        if (!newTransformNode.parent) {\n            newTransformNode._addToSceneRootNodes();\n        }\n        this.onNewTransformNodeAddedObservable.notifyObservers(newTransformNode);\n    }\n    /**\n     * Remove a transform node for the list of scene's transform nodes\n     * @param toRemove defines the transform node to remove\n     * @returns the index where the transform node was in the transform node list\n     */\n    removeTransformNode(toRemove) {\n        const index = toRemove._indexInSceneTransformNodesArray;\n        if (index !== -1) {\n            if (index !== this.transformNodes.length - 1) {\n                const lastNode = this.transformNodes[this.transformNodes.length - 1];\n                this.transformNodes[index] = lastNode;\n                lastNode._indexInSceneTransformNodesArray = index;\n            }\n            toRemove._indexInSceneTransformNodesArray = -1;\n            this.transformNodes.pop();\n            if (!toRemove.parent) {\n                toRemove._removeFromSceneRootNodes();\n            }\n        }\n        this.onTransformNodeRemovedObservable.notifyObservers(toRemove);\n        return index;\n    }\n    /**\n     * Remove a skeleton for the list of scene's skeletons\n     * @param toRemove defines the skeleton to remove\n     * @returns the index where the skeleton was in the skeleton list\n     */\n    removeSkeleton(toRemove) {\n        const index = this.skeletons.indexOf(toRemove);\n        if (index !== -1) {\n            // Remove from the scene if found\n            this.skeletons.splice(index, 1);\n            this.onSkeletonRemovedObservable.notifyObservers(toRemove);\n            // Clean active container\n            this._executeActiveContainerCleanup(this._activeSkeletons);\n        }\n        return index;\n    }\n    /**\n     * Remove a morph target for the list of scene's morph targets\n     * @param toRemove defines the morph target to remove\n     * @returns the index where the morph target was in the morph target list\n     */\n    removeMorphTargetManager(toRemove) {\n        const index = this.morphTargetManagers.indexOf(toRemove);\n        if (index !== -1) {\n            // Remove from the scene if found\n            this.morphTargetManagers.splice(index, 1);\n        }\n        return index;\n    }\n    /**\n     * Remove a light for the list of scene's lights\n     * @param toRemove defines the light to remove\n     * @returns the index where the light was in the light list\n     */\n    removeLight(toRemove) {\n        const index = this.lights.indexOf(toRemove);\n        if (index !== -1) {\n            // Remove from meshes\n            for (const mesh of this.meshes) {\n                mesh._removeLightSource(toRemove, false);\n            }\n            // Remove from the scene if mesh found\n            this.lights.splice(index, 1);\n            this.sortLightsByPriority();\n            if (!toRemove.parent) {\n                toRemove._removeFromSceneRootNodes();\n            }\n        }\n        this.onLightRemovedObservable.notifyObservers(toRemove);\n        return index;\n    }\n    /**\n     * Remove a camera for the list of scene's cameras\n     * @param toRemove defines the camera to remove\n     * @returns the index where the camera was in the camera list\n     */\n    removeCamera(toRemove) {\n        const index = this.cameras.indexOf(toRemove);\n        if (index !== -1) {\n            // Remove from the scene if mesh found\n            this.cameras.splice(index, 1);\n            if (!toRemove.parent) {\n                toRemove._removeFromSceneRootNodes();\n            }\n        }\n        // Remove from activeCameras\n        if (this.activeCameras) {\n            const index2 = this.activeCameras.indexOf(toRemove);\n            if (index2 !== -1) {\n                // Remove from the scene if mesh found\n                this.activeCameras.splice(index2, 1);\n            }\n        }\n        // Reset the activeCamera\n        if (this.activeCamera === toRemove) {\n            if (this.cameras.length > 0) {\n                this.activeCamera = this.cameras[0];\n            }\n            else {\n                this.activeCamera = null;\n            }\n        }\n        this.onCameraRemovedObservable.notifyObservers(toRemove);\n        return index;\n    }\n    /**\n     * Remove a particle system for the list of scene's particle systems\n     * @param toRemove defines the particle system to remove\n     * @returns the index where the particle system was in the particle system list\n     */\n    removeParticleSystem(toRemove) {\n        const index = this.particleSystems.indexOf(toRemove);\n        if (index !== -1) {\n            this.particleSystems.splice(index, 1);\n            // Clean active container\n            this._executeActiveContainerCleanup(this._activeParticleSystems);\n        }\n        return index;\n    }\n    /**\n     * Remove a animation for the list of scene's animations\n     * @param toRemove defines the animation to remove\n     * @returns the index where the animation was in the animation list\n     */\n    removeAnimation(toRemove) {\n        const index = this.animations.indexOf(toRemove);\n        if (index !== -1) {\n            this.animations.splice(index, 1);\n        }\n        return index;\n    }\n    /**\n     * Will stop the animation of the given target\n     * @param target - the target\n     * @param animationName - the name of the animation to stop (all animations will be stopped if both this and targetMask are empty)\n     * @param targetMask - a function that determines if the animation should be stopped based on its target (all animations will be stopped if both this and animationName are empty)\n     */\n    stopAnimation(target, animationName, targetMask) {\n        // Do nothing as code will be provided by animation component\n    }\n    /**\n     * Removes the given animation group from this scene.\n     * @param toRemove The animation group to remove\n     * @returns The index of the removed animation group\n     */\n    removeAnimationGroup(toRemove) {\n        const index = this.animationGroups.indexOf(toRemove);\n        if (index !== -1) {\n            this.animationGroups.splice(index, 1);\n        }\n        return index;\n    }\n    /**\n     * Removes the given multi-material from this scene.\n     * @param toRemove The multi-material to remove\n     * @returns The index of the removed multi-material\n     */\n    removeMultiMaterial(toRemove) {\n        const index = this.multiMaterials.indexOf(toRemove);\n        if (index !== -1) {\n            this.multiMaterials.splice(index, 1);\n        }\n        this.onMultiMaterialRemovedObservable.notifyObservers(toRemove);\n        return index;\n    }\n    /**\n     * Removes the given material from this scene.\n     * @param toRemove The material to remove\n     * @returns The index of the removed material\n     */\n    removeMaterial(toRemove) {\n        const index = toRemove._indexInSceneMaterialArray;\n        if (index !== -1 && index < this.materials.length) {\n            if (index !== this.materials.length - 1) {\n                const lastMaterial = this.materials[this.materials.length - 1];\n                this.materials[index] = lastMaterial;\n                lastMaterial._indexInSceneMaterialArray = index;\n            }\n            toRemove._indexInSceneMaterialArray = -1;\n            this.materials.pop();\n        }\n        this.onMaterialRemovedObservable.notifyObservers(toRemove);\n        return index;\n    }\n    /**\n     * Removes the given action manager from this scene.\n     * @deprecated\n     * @param toRemove The action manager to remove\n     * @returns The index of the removed action manager\n     */\n    removeActionManager(toRemove) {\n        const index = this.actionManagers.indexOf(toRemove);\n        if (index !== -1) {\n            this.actionManagers.splice(index, 1);\n        }\n        return index;\n    }\n    /**\n     * Removes the given texture from this scene.\n     * @param toRemove The texture to remove\n     * @returns The index of the removed texture\n     */\n    removeTexture(toRemove) {\n        const index = this.textures.indexOf(toRemove);\n        if (index !== -1) {\n            this.textures.splice(index, 1);\n        }\n        this.onTextureRemovedObservable.notifyObservers(toRemove);\n        return index;\n    }\n    /**\n     * Adds the given light to this scene\n     * @param newLight The light to add\n     */\n    addLight(newLight) {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.lights.push(newLight);\n        this.sortLightsByPriority();\n        if (!newLight.parent) {\n            newLight._addToSceneRootNodes();\n        }\n        // Add light to all meshes (To support if the light is removed and then re-added)\n        for (const mesh of this.meshes) {\n            if (mesh.lightSources.indexOf(newLight) === -1) {\n                mesh.lightSources.push(newLight);\n                mesh._resyncLightSources();\n            }\n        }\n        this.onNewLightAddedObservable.notifyObservers(newLight);\n    }\n    /**\n     * Sorts the list list based on light priorities\n     */\n    sortLightsByPriority() {\n        if (this.requireLightSorting) {\n            this.lights.sort(LightConstants.CompareLightsPriority);\n        }\n    }\n    /**\n     * Adds the given camera to this scene\n     * @param newCamera The camera to add\n     */\n    addCamera(newCamera) {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.cameras.push(newCamera);\n        this.onNewCameraAddedObservable.notifyObservers(newCamera);\n        if (!newCamera.parent) {\n            newCamera._addToSceneRootNodes();\n        }\n    }\n    /**\n     * Adds the given skeleton to this scene\n     * @param newSkeleton The skeleton to add\n     */\n    addSkeleton(newSkeleton) {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.skeletons.push(newSkeleton);\n        this.onNewSkeletonAddedObservable.notifyObservers(newSkeleton);\n    }\n    /**\n     * Adds the given particle system to this scene\n     * @param newParticleSystem The particle system to add\n     */\n    addParticleSystem(newParticleSystem) {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.particleSystems.push(newParticleSystem);\n    }\n    /**\n     * Adds the given animation to this scene\n     * @param newAnimation The animation to add\n     */\n    addAnimation(newAnimation) {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.animations.push(newAnimation);\n    }\n    /**\n     * Adds the given animation group to this scene.\n     * @param newAnimationGroup The animation group to add\n     */\n    addAnimationGroup(newAnimationGroup) {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.animationGroups.push(newAnimationGroup);\n    }\n    /**\n     * Adds the given multi-material to this scene\n     * @param newMultiMaterial The multi-material to add\n     */\n    addMultiMaterial(newMultiMaterial) {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.multiMaterials.push(newMultiMaterial);\n        this.onNewMultiMaterialAddedObservable.notifyObservers(newMultiMaterial);\n    }\n    /**\n     * Adds the given material to this scene\n     * @param newMaterial The material to add\n     */\n    addMaterial(newMaterial) {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        if (newMaterial.getScene() === this && newMaterial._indexInSceneMaterialArray !== -1) {\n            // Already there??\n            return;\n        }\n        newMaterial._indexInSceneMaterialArray = this.materials.length;\n        this.materials.push(newMaterial);\n        this.onNewMaterialAddedObservable.notifyObservers(newMaterial);\n    }\n    /**\n     * Adds the given morph target to this scene\n     * @param newMorphTargetManager The morph target to add\n     */\n    addMorphTargetManager(newMorphTargetManager) {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.morphTargetManagers.push(newMorphTargetManager);\n    }\n    /**\n     * Adds the given geometry to this scene\n     * @param newGeometry The geometry to add\n     */\n    addGeometry(newGeometry) {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        if (this._geometriesByUniqueId) {\n            this._geometriesByUniqueId[newGeometry.uniqueId] = this.geometries.length;\n        }\n        this.geometries.push(newGeometry);\n    }\n    /**\n     * Adds the given action manager to this scene\n     * @deprecated\n     * @param newActionManager The action manager to add\n     */\n    addActionManager(newActionManager) {\n        this.actionManagers.push(newActionManager);\n    }\n    /**\n     * Adds the given texture to this scene.\n     * @param newTexture The texture to add\n     */\n    addTexture(newTexture) {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.textures.push(newTexture);\n        this.onNewTextureAddedObservable.notifyObservers(newTexture);\n    }\n    /**\n     * Switch active camera\n     * @param newCamera defines the new active camera\n     * @param attachControl defines if attachControl must be called for the new active camera (default: true)\n     */\n    switchActiveCamera(newCamera, attachControl = true) {\n        const canvas = this._engine.getInputElement();\n        if (!canvas) {\n            return;\n        }\n        if (this.activeCamera) {\n            this.activeCamera.detachControl();\n        }\n        this.activeCamera = newCamera;\n        if (attachControl) {\n            newCamera.attachControl();\n        }\n    }\n    /**\n     * sets the active camera of the scene using its Id\n     * @param id defines the camera's Id\n     * @returns the new active camera or null if none found.\n     */\n    setActiveCameraById(id) {\n        const camera = this.getCameraById(id);\n        if (camera) {\n            this.activeCamera = camera;\n            return camera;\n        }\n        return null;\n    }\n    /**\n     * sets the active camera of the scene using its name\n     * @param name defines the camera's name\n     * @returns the new active camera or null if none found.\n     */\n    setActiveCameraByName(name) {\n        const camera = this.getCameraByName(name);\n        if (camera) {\n            this.activeCamera = camera;\n            return camera;\n        }\n        return null;\n    }\n    /**\n     * get an animation group using its name\n     * @param name defines the material's name\n     * @returns the animation group or null if none found.\n     */\n    getAnimationGroupByName(name) {\n        for (let index = 0; index < this.animationGroups.length; index++) {\n            if (this.animationGroups[index].name === name) {\n                return this.animationGroups[index];\n            }\n        }\n        return null;\n    }\n    _getMaterial(allowMultiMaterials, predicate) {\n        for (let index = 0; index < this.materials.length; index++) {\n            const material = this.materials[index];\n            if (predicate(material)) {\n                return material;\n            }\n        }\n        if (allowMultiMaterials) {\n            for (let index = 0; index < this.multiMaterials.length; index++) {\n                const material = this.multiMaterials[index];\n                if (predicate(material)) {\n                    return material;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Get a material using its unique id\n     * @param uniqueId defines the material's unique id\n     * @param allowMultiMaterials determines whether multimaterials should be considered\n     * @returns the material or null if none found.\n     */\n    getMaterialByUniqueID(uniqueId, allowMultiMaterials = false) {\n        return this._getMaterial(allowMultiMaterials, (m) => m.uniqueId === uniqueId);\n    }\n    /**\n     * get a material using its id\n     * @param id defines the material's Id\n     * @param allowMultiMaterials determines whether multimaterials should be considered\n     * @returns the material or null if none found.\n     */\n    getMaterialById(id, allowMultiMaterials = false) {\n        return this._getMaterial(allowMultiMaterials, (m) => m.id === id);\n    }\n    /**\n     * Gets a material using its name\n     * @param name defines the material's name\n     * @param allowMultiMaterials determines whether multimaterials should be considered\n     * @returns the material or null if none found.\n     */\n    getMaterialByName(name, allowMultiMaterials = false) {\n        return this._getMaterial(allowMultiMaterials, (m) => m.name === name);\n    }\n    /**\n     * Gets a last added material using a given id\n     * @param id defines the material's id\n     * @param allowMultiMaterials determines whether multimaterials should be considered\n     * @returns the last material with the given id or null if none found.\n     */\n    getLastMaterialById(id, allowMultiMaterials = false) {\n        for (let index = this.materials.length - 1; index >= 0; index--) {\n            if (this.materials[index].id === id) {\n                return this.materials[index];\n            }\n        }\n        if (allowMultiMaterials) {\n            for (let index = this.multiMaterials.length - 1; index >= 0; index--) {\n                if (this.multiMaterials[index].id === id) {\n                    return this.multiMaterials[index];\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Get a texture using its unique id\n     * @param uniqueId defines the texture's unique id\n     * @returns the texture or null if none found.\n     */\n    getTextureByUniqueId(uniqueId) {\n        for (let index = 0; index < this.textures.length; index++) {\n            if (this.textures[index].uniqueId === uniqueId) {\n                return this.textures[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a texture using its name\n     * @param name defines the texture's name\n     * @returns the texture or null if none found.\n     */\n    getTextureByName(name) {\n        for (let index = 0; index < this.textures.length; index++) {\n            if (this.textures[index].name === name) {\n                return this.textures[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a camera using its Id\n     * @param id defines the Id to look for\n     * @returns the camera or null if not found\n     */\n    getCameraById(id) {\n        for (let index = 0; index < this.cameras.length; index++) {\n            if (this.cameras[index].id === id) {\n                return this.cameras[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a camera using its unique Id\n     * @param uniqueId defines the unique Id to look for\n     * @returns the camera or null if not found\n     */\n    getCameraByUniqueId(uniqueId) {\n        for (let index = 0; index < this.cameras.length; index++) {\n            if (this.cameras[index].uniqueId === uniqueId) {\n                return this.cameras[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a camera using its name\n     * @param name defines the camera's name\n     * @returns the camera or null if none found.\n     */\n    getCameraByName(name) {\n        for (let index = 0; index < this.cameras.length; index++) {\n            if (this.cameras[index].name === name) {\n                return this.cameras[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a bone using its Id\n     * @param id defines the bone's Id\n     * @returns the bone or null if not found\n     */\n    getBoneById(id) {\n        for (let skeletonIndex = 0; skeletonIndex < this.skeletons.length; skeletonIndex++) {\n            const skeleton = this.skeletons[skeletonIndex];\n            for (let boneIndex = 0; boneIndex < skeleton.bones.length; boneIndex++) {\n                if (skeleton.bones[boneIndex].id === id) {\n                    return skeleton.bones[boneIndex];\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a bone using its id\n     * @param name defines the bone's name\n     * @returns the bone or null if not found\n     */\n    getBoneByName(name) {\n        for (let skeletonIndex = 0; skeletonIndex < this.skeletons.length; skeletonIndex++) {\n            const skeleton = this.skeletons[skeletonIndex];\n            for (let boneIndex = 0; boneIndex < skeleton.bones.length; boneIndex++) {\n                if (skeleton.bones[boneIndex].name === name) {\n                    return skeleton.bones[boneIndex];\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a light node using its name\n     * @param name defines the the light's name\n     * @returns the light or null if none found.\n     */\n    getLightByName(name) {\n        for (let index = 0; index < this.lights.length; index++) {\n            if (this.lights[index].name === name) {\n                return this.lights[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a light node using its Id\n     * @param id defines the light's Id\n     * @returns the light or null if none found.\n     */\n    getLightById(id) {\n        for (let index = 0; index < this.lights.length; index++) {\n            if (this.lights[index].id === id) {\n                return this.lights[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a light node using its scene-generated unique Id\n     * @param uniqueId defines the light's unique Id\n     * @returns the light or null if none found.\n     */\n    getLightByUniqueId(uniqueId) {\n        for (let index = 0; index < this.lights.length; index++) {\n            if (this.lights[index].uniqueId === uniqueId) {\n                return this.lights[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a particle system by Id\n     * @param id defines the particle system Id\n     * @returns the corresponding system or null if none found\n     */\n    getParticleSystemById(id) {\n        for (let index = 0; index < this.particleSystems.length; index++) {\n            if (this.particleSystems[index].id === id) {\n                return this.particleSystems[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a geometry using its Id\n     * @param id defines the geometry's Id\n     * @returns the geometry or null if none found.\n     */\n    getGeometryById(id) {\n        for (let index = 0; index < this.geometries.length; index++) {\n            if (this.geometries[index].id === id) {\n                return this.geometries[index];\n            }\n        }\n        return null;\n    }\n    _getGeometryByUniqueId(uniqueId) {\n        if (this._geometriesByUniqueId) {\n            const index = this._geometriesByUniqueId[uniqueId];\n            if (index !== undefined) {\n                return this.geometries[index];\n            }\n        }\n        else {\n            for (let index = 0; index < this.geometries.length; index++) {\n                if (this.geometries[index].uniqueId === uniqueId) {\n                    return this.geometries[index];\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Add a new geometry to this scene\n     * @param geometry defines the geometry to be added to the scene.\n     * @param force defines if the geometry must be pushed even if a geometry with this id already exists\n     * @returns a boolean defining if the geometry was added or not\n     */\n    pushGeometry(geometry, force) {\n        if (!force && this._getGeometryByUniqueId(geometry.uniqueId)) {\n            return false;\n        }\n        this.addGeometry(geometry);\n        this.onNewGeometryAddedObservable.notifyObservers(geometry);\n        return true;\n    }\n    /**\n     * Removes an existing geometry\n     * @param geometry defines the geometry to be removed from the scene\n     * @returns a boolean defining if the geometry was removed or not\n     */\n    removeGeometry(geometry) {\n        let index;\n        if (this._geometriesByUniqueId) {\n            index = this._geometriesByUniqueId[geometry.uniqueId];\n            if (index === undefined) {\n                return false;\n            }\n        }\n        else {\n            index = this.geometries.indexOf(geometry);\n            if (index < 0) {\n                return false;\n            }\n        }\n        if (index !== this.geometries.length - 1) {\n            const lastGeometry = this.geometries[this.geometries.length - 1];\n            if (lastGeometry) {\n                this.geometries[index] = lastGeometry;\n                if (this._geometriesByUniqueId) {\n                    this._geometriesByUniqueId[lastGeometry.uniqueId] = index;\n                }\n            }\n        }\n        if (this._geometriesByUniqueId) {\n            this._geometriesByUniqueId[geometry.uniqueId] = undefined;\n        }\n        this.geometries.pop();\n        this.onGeometryRemovedObservable.notifyObservers(geometry);\n        return true;\n    }\n    /**\n     * Gets the list of geometries attached to the scene\n     * @returns an array of Geometry\n     */\n    getGeometries() {\n        return this.geometries;\n    }\n    /**\n     * Gets the first added mesh found of a given Id\n     * @param id defines the Id to search for\n     * @returns the mesh found or null if not found at all\n     */\n    getMeshById(id) {\n        for (let index = 0; index < this.meshes.length; index++) {\n            if (this.meshes[index].id === id) {\n                return this.meshes[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a list of meshes using their Id\n     * @param id defines the Id to search for\n     * @returns a list of meshes\n     */\n    getMeshesById(id) {\n        return this.meshes.filter(function (m) {\n            return m.id === id;\n        });\n    }\n    /**\n     * Gets the first added transform node found of a given Id\n     * @param id defines the Id to search for\n     * @returns the found transform node or null if not found at all.\n     */\n    getTransformNodeById(id) {\n        for (let index = 0; index < this.transformNodes.length; index++) {\n            if (this.transformNodes[index].id === id) {\n                return this.transformNodes[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a transform node with its auto-generated unique Id\n     * @param uniqueId defines the unique Id to search for\n     * @returns the found transform node or null if not found at all.\n     */\n    getTransformNodeByUniqueId(uniqueId) {\n        for (let index = 0; index < this.transformNodes.length; index++) {\n            if (this.transformNodes[index].uniqueId === uniqueId) {\n                return this.transformNodes[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a list of transform nodes using their Id\n     * @param id defines the Id to search for\n     * @returns a list of transform nodes\n     */\n    getTransformNodesById(id) {\n        return this.transformNodes.filter(function (m) {\n            return m.id === id;\n        });\n    }\n    /**\n     * Gets a mesh with its auto-generated unique Id\n     * @param uniqueId defines the unique Id to search for\n     * @returns the found mesh or null if not found at all.\n     */\n    getMeshByUniqueId(uniqueId) {\n        for (let index = 0; index < this.meshes.length; index++) {\n            if (this.meshes[index].uniqueId === uniqueId) {\n                return this.meshes[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a the last added mesh using a given Id\n     * @param id defines the Id to search for\n     * @returns the found mesh or null if not found at all.\n     */\n    getLastMeshById(id) {\n        for (let index = this.meshes.length - 1; index >= 0; index--) {\n            if (this.meshes[index].id === id) {\n                return this.meshes[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a the last added node (Mesh, Camera, Light) using a given Id\n     * @param id defines the Id to search for\n     * @returns the found node or null if not found at all\n     */\n    getLastEntryById(id) {\n        let index;\n        for (index = this.meshes.length - 1; index >= 0; index--) {\n            if (this.meshes[index].id === id) {\n                return this.meshes[index];\n            }\n        }\n        for (index = this.transformNodes.length - 1; index >= 0; index--) {\n            if (this.transformNodes[index].id === id) {\n                return this.transformNodes[index];\n            }\n        }\n        for (index = this.cameras.length - 1; index >= 0; index--) {\n            if (this.cameras[index].id === id) {\n                return this.cameras[index];\n            }\n        }\n        for (index = this.lights.length - 1; index >= 0; index--) {\n            if (this.lights[index].id === id) {\n                return this.lights[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a node (Mesh, Camera, Light) using a given Id\n     * @param id defines the Id to search for\n     * @returns the found node or null if not found at all\n     */\n    getNodeById(id) {\n        const mesh = this.getMeshById(id);\n        if (mesh) {\n            return mesh;\n        }\n        const transformNode = this.getTransformNodeById(id);\n        if (transformNode) {\n            return transformNode;\n        }\n        const light = this.getLightById(id);\n        if (light) {\n            return light;\n        }\n        const camera = this.getCameraById(id);\n        if (camera) {\n            return camera;\n        }\n        const bone = this.getBoneById(id);\n        if (bone) {\n            return bone;\n        }\n        return null;\n    }\n    /**\n     * Gets a node (Mesh, Camera, Light) using a given name\n     * @param name defines the name to search for\n     * @returns the found node or null if not found at all.\n     */\n    getNodeByName(name) {\n        const mesh = this.getMeshByName(name);\n        if (mesh) {\n            return mesh;\n        }\n        const transformNode = this.getTransformNodeByName(name);\n        if (transformNode) {\n            return transformNode;\n        }\n        const light = this.getLightByName(name);\n        if (light) {\n            return light;\n        }\n        const camera = this.getCameraByName(name);\n        if (camera) {\n            return camera;\n        }\n        const bone = this.getBoneByName(name);\n        if (bone) {\n            return bone;\n        }\n        return null;\n    }\n    /**\n     * Gets a mesh using a given name\n     * @param name defines the name to search for\n     * @returns the found mesh or null if not found at all.\n     */\n    getMeshByName(name) {\n        for (let index = 0; index < this.meshes.length; index++) {\n            if (this.meshes[index].name === name) {\n                return this.meshes[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a transform node using a given name\n     * @param name defines the name to search for\n     * @returns the found transform node or null if not found at all.\n     */\n    getTransformNodeByName(name) {\n        for (let index = 0; index < this.transformNodes.length; index++) {\n            if (this.transformNodes[index].name === name) {\n                return this.transformNodes[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a skeleton using a given Id (if many are found, this function will pick the last one)\n     * @param id defines the Id to search for\n     * @returns the found skeleton or null if not found at all.\n     */\n    getLastSkeletonById(id) {\n        for (let index = this.skeletons.length - 1; index >= 0; index--) {\n            if (this.skeletons[index].id === id) {\n                return this.skeletons[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a skeleton using a given auto generated unique id\n     * @param  uniqueId defines the unique id to search for\n     * @returns the found skeleton or null if not found at all.\n     */\n    getSkeletonByUniqueId(uniqueId) {\n        for (let index = 0; index < this.skeletons.length; index++) {\n            if (this.skeletons[index].uniqueId === uniqueId) {\n                return this.skeletons[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a skeleton using a given id (if many are found, this function will pick the first one)\n     * @param id defines the id to search for\n     * @returns the found skeleton or null if not found at all.\n     */\n    getSkeletonById(id) {\n        for (let index = 0; index < this.skeletons.length; index++) {\n            if (this.skeletons[index].id === id) {\n                return this.skeletons[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a skeleton using a given name\n     * @param name defines the name to search for\n     * @returns the found skeleton or null if not found at all.\n     */\n    getSkeletonByName(name) {\n        for (let index = 0; index < this.skeletons.length; index++) {\n            if (this.skeletons[index].name === name) {\n                return this.skeletons[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a morph target manager  using a given id (if many are found, this function will pick the last one)\n     * @param id defines the id to search for\n     * @returns the found morph target manager or null if not found at all.\n     */\n    getMorphTargetManagerById(id) {\n        for (let index = 0; index < this.morphTargetManagers.length; index++) {\n            if (this.morphTargetManagers[index].uniqueId === id) {\n                return this.morphTargetManagers[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a morph target using a given id (if many are found, this function will pick the first one)\n     * @param id defines the id to search for\n     * @returns the found morph target or null if not found at all.\n     */\n    getMorphTargetById(id) {\n        for (let managerIndex = 0; managerIndex < this.morphTargetManagers.length; ++managerIndex) {\n            const morphTargetManager = this.morphTargetManagers[managerIndex];\n            for (let index = 0; index < morphTargetManager.numTargets; ++index) {\n                const target = morphTargetManager.getTarget(index);\n                if (target.id === id) {\n                    return target;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a morph target using a given name (if many are found, this function will pick the first one)\n     * @param name defines the name to search for\n     * @returns the found morph target or null if not found at all.\n     */\n    getMorphTargetByName(name) {\n        for (let managerIndex = 0; managerIndex < this.morphTargetManagers.length; ++managerIndex) {\n            const morphTargetManager = this.morphTargetManagers[managerIndex];\n            for (let index = 0; index < morphTargetManager.numTargets; ++index) {\n                const target = morphTargetManager.getTarget(index);\n                if (target.name === name) {\n                    return target;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a post process using a given name (if many are found, this function will pick the first one)\n     * @param name defines the name to search for\n     * @returns the found post process or null if not found at all.\n     */\n    getPostProcessByName(name) {\n        for (let postProcessIndex = 0; postProcessIndex < this.postProcesses.length; ++postProcessIndex) {\n            const postProcess = this.postProcesses[postProcessIndex];\n            if (postProcess.name === name) {\n                return postProcess;\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a boolean indicating if the given mesh is active\n     * @param mesh defines the mesh to look for\n     * @returns true if the mesh is in the active list\n     */\n    isActiveMesh(mesh) {\n        return this._activeMeshes.indexOf(mesh) !== -1;\n    }\n    /**\n     * Return a unique id as a string which can serve as an identifier for the scene\n     */\n    get uid() {\n        if (!this._uid) {\n            this._uid = Tools.RandomId();\n        }\n        return this._uid;\n    }\n    /**\n     * Add an externally attached data from its key.\n     * This method call will fail and return false, if such key already exists.\n     * If you don't care and just want to get the data no matter what, use the more convenient getOrAddExternalDataWithFactory() method.\n     * @param key the unique key that identifies the data\n     * @param data the data object to associate to the key for this Engine instance\n     * @returns true if no such key were already present and the data was added successfully, false otherwise\n     */\n    addExternalData(key, data) {\n        if (!this._externalData) {\n            this._externalData = new StringDictionary();\n        }\n        return this._externalData.add(key, data);\n    }\n    /**\n     * Get an externally attached data from its key\n     * @param key the unique key that identifies the data\n     * @returns the associated data, if present (can be null), or undefined if not present\n     */\n    getExternalData(key) {\n        if (!this._externalData) {\n            return null;\n        }\n        return this._externalData.get(key);\n    }\n    /**\n     * Get an externally attached data from its key, create it using a factory if it's not already present\n     * @param key the unique key that identifies the data\n     * @param factory the factory that will be called to create the instance if and only if it doesn't exists\n     * @returns the associated data, can be null if the factory returned null.\n     */\n    getOrAddExternalDataWithFactory(key, factory) {\n        if (!this._externalData) {\n            this._externalData = new StringDictionary();\n        }\n        return this._externalData.getOrAddWithFactory(key, factory);\n    }\n    /**\n     * Remove an externally attached data from the Engine instance\n     * @param key the unique key that identifies the data\n     * @returns true if the data was successfully removed, false if it doesn't exist\n     */\n    removeExternalData(key) {\n        return this._externalData.remove(key);\n    }\n    _evaluateSubMesh(subMesh, mesh, initialMesh, forcePush) {\n        if (forcePush || subMesh.isInFrustum(this._frustumPlanes)) {\n            for (const step of this._evaluateSubMeshStage) {\n                step.action(mesh, subMesh);\n            }\n            const material = subMesh.getMaterial();\n            if (material !== null && material !== undefined) {\n                // Render targets\n                if (material.hasRenderTargetTextures && material.getRenderTargetTextures != null) {\n                    if (this._processedMaterials.indexOf(material) === -1) {\n                        this._processedMaterials.push(material);\n                        this._materialsRenderTargets.concatWithNoDuplicate(material.getRenderTargetTextures());\n                    }\n                }\n                // Dispatch\n                this._renderingManager.dispatch(subMesh, mesh, material);\n            }\n        }\n    }\n    /**\n     * Clear the processed materials smart array preventing retention point in material dispose.\n     */\n    freeProcessedMaterials() {\n        this._processedMaterials.dispose();\n    }\n    /** Gets or sets a boolean blocking all the calls to freeActiveMeshes and freeRenderingGroups\n     * It can be used in order to prevent going through methods freeRenderingGroups and freeActiveMeshes several times to improve performance\n     * when disposing several meshes in a row or a hierarchy of meshes.\n     * When used, it is the responsibility of the user to blockfreeActiveMeshesAndRenderingGroups back to false.\n     */\n    get blockfreeActiveMeshesAndRenderingGroups() {\n        return this._preventFreeActiveMeshesAndRenderingGroups;\n    }\n    set blockfreeActiveMeshesAndRenderingGroups(value) {\n        if (this._preventFreeActiveMeshesAndRenderingGroups === value) {\n            return;\n        }\n        if (value) {\n            this.freeActiveMeshes();\n            this.freeRenderingGroups();\n        }\n        this._preventFreeActiveMeshesAndRenderingGroups = value;\n    }\n    /**\n     * Clear the active meshes smart array preventing retention point in mesh dispose.\n     */\n    freeActiveMeshes() {\n        if (this.blockfreeActiveMeshesAndRenderingGroups) {\n            return;\n        }\n        this._activeMeshes.dispose();\n        if (this.activeCamera && this.activeCamera._activeMeshes) {\n            this.activeCamera._activeMeshes.dispose();\n        }\n        if (this.activeCameras) {\n            for (let i = 0; i < this.activeCameras.length; i++) {\n                const activeCamera = this.activeCameras[i];\n                if (activeCamera && activeCamera._activeMeshes) {\n                    activeCamera._activeMeshes.dispose();\n                }\n            }\n        }\n    }\n    /**\n     * Clear the info related to rendering groups preventing retention points during dispose.\n     */\n    freeRenderingGroups() {\n        if (this.blockfreeActiveMeshesAndRenderingGroups) {\n            return;\n        }\n        if (this._renderingManager) {\n            this._renderingManager.freeRenderingGroups();\n        }\n        if (this.textures) {\n            for (let i = 0; i < this.textures.length; i++) {\n                const texture = this.textures[i];\n                if (texture && texture.renderList) {\n                    texture.freeRenderingGroups();\n                }\n            }\n        }\n    }\n    /** @internal */\n    _isInIntermediateRendering() {\n        return this._intermediateRendering;\n    }\n    /**\n     * Use this function to stop evaluating active meshes. The current list will be keep alive between frames\n     * @param skipEvaluateActiveMeshes defines an optional boolean indicating that the evaluate active meshes step must be completely skipped\n     * @param onSuccess optional success callback\n     * @param onError optional error callback\n     * @param freezeMeshes defines if meshes should be frozen (true by default)\n     * @param keepFrustumCulling defines if you want to keep running the frustum clipping (false by default)\n     * @returns the current scene\n     */\n    freezeActiveMeshes(skipEvaluateActiveMeshes = false, onSuccess, onError, freezeMeshes = true, keepFrustumCulling = false) {\n        this.executeWhenReady(() => {\n            if (!this.activeCamera) {\n                onError && onError(\"No active camera found\");\n                return;\n            }\n            if (!this._frustumPlanes) {\n                this.updateTransformMatrix();\n            }\n            this._evaluateActiveMeshes();\n            this._activeMeshesFrozen = true;\n            this._activeMeshesFrozenButKeepClipping = keepFrustumCulling;\n            this._skipEvaluateActiveMeshesCompletely = skipEvaluateActiveMeshes;\n            if (freezeMeshes) {\n                for (let index = 0; index < this._activeMeshes.length; index++) {\n                    this._activeMeshes.data[index]._freeze();\n                }\n            }\n            onSuccess && onSuccess();\n        });\n        return this;\n    }\n    /**\n     * Use this function to restart evaluating active meshes on every frame\n     * @returns the current scene\n     */\n    unfreezeActiveMeshes() {\n        for (let index = 0; index < this.meshes.length; index++) {\n            const mesh = this.meshes[index];\n            if (mesh._internalAbstractMeshDataInfo) {\n                mesh._internalAbstractMeshDataInfo._isActive = false;\n            }\n        }\n        for (let index = 0; index < this._activeMeshes.length; index++) {\n            this._activeMeshes.data[index]._unFreeze();\n        }\n        this._activeMeshesFrozen = false;\n        return this;\n    }\n    _executeActiveContainerCleanup(container) {\n        const isInFastMode = this._engine.snapshotRendering && this._engine.snapshotRenderingMode === 1;\n        if (!isInFastMode && this._activeMeshesFrozen && this._activeMeshes.length) {\n            return; // Do not execute in frozen mode\n        }\n        // We need to ensure we are not in the rendering loop\n        this.onBeforeRenderObservable.addOnce(() => container.dispose());\n    }\n    _evaluateActiveMeshes() {\n        var _a;\n        if (this._engine.snapshotRendering && this._engine.snapshotRenderingMode === 1) {\n            if (this._activeMeshes.length > 0) {\n                (_a = this.activeCamera) === null || _a === void 0 ? void 0 : _a._activeMeshes.reset();\n                this._activeMeshes.reset();\n                this._renderingManager.reset();\n                this._processedMaterials.reset();\n                this._activeParticleSystems.reset();\n                this._activeSkeletons.reset();\n                this._softwareSkinnedMeshes.reset();\n            }\n            return;\n        }\n        if (this._activeMeshesFrozen && this._activeMeshes.length) {\n            if (!this._skipEvaluateActiveMeshesCompletely) {\n                const len = this._activeMeshes.length;\n                for (let i = 0; i < len; i++) {\n                    const mesh = this._activeMeshes.data[i];\n                    mesh.computeWorldMatrix();\n                }\n            }\n            if (this._activeParticleSystems) {\n                const psLength = this._activeParticleSystems.length;\n                for (let i = 0; i < psLength; i++) {\n                    this._activeParticleSystems.data[i].animate();\n                }\n            }\n            this._renderingManager.resetSprites();\n            return;\n        }\n        if (!this.activeCamera) {\n            return;\n        }\n        this.onBeforeActiveMeshesEvaluationObservable.notifyObservers(this);\n        this.activeCamera._activeMeshes.reset();\n        this._activeMeshes.reset();\n        this._renderingManager.reset();\n        this._processedMaterials.reset();\n        this._activeParticleSystems.reset();\n        this._activeSkeletons.reset();\n        this._softwareSkinnedMeshes.reset();\n        this._materialsRenderTargets.reset();\n        for (const step of this._beforeEvaluateActiveMeshStage) {\n            step.action();\n        }\n        // Determine mesh candidates\n        const meshes = this.getActiveMeshCandidates();\n        // Check each mesh\n        const len = meshes.length;\n        for (let i = 0; i < len; i++) {\n            const mesh = meshes.data[i];\n            mesh._internalAbstractMeshDataInfo._currentLODIsUpToDate = false;\n            if (mesh.isBlocked) {\n                continue;\n            }\n            this._totalVertices.addCount(mesh.getTotalVertices(), false);\n            if (!mesh.isReady() || !mesh.isEnabled() || mesh.scaling.hasAZeroComponent) {\n                continue;\n            }\n            mesh.computeWorldMatrix();\n            // Intersections\n            if (mesh.actionManager && mesh.actionManager.hasSpecificTriggers2(12, 13)) {\n                this._meshesForIntersections.pushNoDuplicate(mesh);\n            }\n            // Switch to current LOD\n            let meshToRender = this.customLODSelector ? this.customLODSelector(mesh, this.activeCamera) : mesh.getLOD(this.activeCamera);\n            mesh._internalAbstractMeshDataInfo._currentLOD = meshToRender;\n            mesh._internalAbstractMeshDataInfo._currentLODIsUpToDate = true;\n            if (meshToRender === undefined || meshToRender === null) {\n                continue;\n            }\n            // Compute world matrix if LOD is billboard\n            if (meshToRender !== mesh && meshToRender.billboardMode !== 0) {\n                meshToRender.computeWorldMatrix();\n            }\n            mesh._preActivate();\n            if (mesh.isVisible &&\n                mesh.visibility > 0 &&\n                (mesh.layerMask & this.activeCamera.layerMask) !== 0 &&\n                (this._skipFrustumClipping || mesh.alwaysSelectAsActiveMesh || mesh.isInFrustum(this._frustumPlanes))) {\n                this._activeMeshes.push(mesh);\n                this.activeCamera._activeMeshes.push(mesh);\n                if (meshToRender !== mesh) {\n                    meshToRender._activate(this._renderId, false);\n                }\n                for (const step of this._preActiveMeshStage) {\n                    step.action(mesh);\n                }\n                if (mesh._activate(this._renderId, false)) {\n                    if (!mesh.isAnInstance) {\n                        meshToRender._internalAbstractMeshDataInfo._onlyForInstances = false;\n                    }\n                    else {\n                        if (mesh._internalAbstractMeshDataInfo._actAsRegularMesh) {\n                            meshToRender = mesh;\n                        }\n                    }\n                    meshToRender._internalAbstractMeshDataInfo._isActive = true;\n                    this._activeMesh(mesh, meshToRender);\n                }\n                mesh._postActivate();\n            }\n        }\n        // Particle systems\n        if (this.particlesEnabled) {\n            this.onBeforeParticlesRenderingObservable.notifyObservers(this);\n            for (let particleIndex = 0; particleIndex < this.particleSystems.length; particleIndex++) {\n                const particleSystem = this.particleSystems[particleIndex];\n                if (!particleSystem.isStarted() || !particleSystem.emitter) {\n                    continue;\n                }\n                const emitter = particleSystem.emitter;\n                if (!emitter.position || emitter.isEnabled()) {\n                    this._activeParticleSystems.push(particleSystem);\n                    particleSystem.animate();\n                    this._renderingManager.dispatchParticles(particleSystem);\n                }\n            }\n            this.onAfterParticlesRenderingObservable.notifyObservers(this);\n        }\n    }\n    _activeMesh(sourceMesh, mesh) {\n        if (this._skeletonsEnabled && mesh.skeleton !== null && mesh.skeleton !== undefined) {\n            if (this._activeSkeletons.pushNoDuplicate(mesh.skeleton)) {\n                mesh.skeleton.prepare();\n                this._activeBones.addCount(mesh.skeleton.bones.length, false);\n            }\n            if (!mesh.computeBonesUsingShaders) {\n                this._softwareSkinnedMeshes.pushNoDuplicate(mesh);\n            }\n        }\n        let forcePush = sourceMesh.hasInstances || sourceMesh.isAnInstance || this.dispatchAllSubMeshesOfActiveMeshes || this._skipFrustumClipping || mesh.alwaysSelectAsActiveMesh;\n        if (mesh && mesh.subMeshes && mesh.subMeshes.length > 0) {\n            const subMeshes = this.getActiveSubMeshCandidates(mesh);\n            const len = subMeshes.length;\n            forcePush = forcePush || len === 1;\n            for (let i = 0; i < len; i++) {\n                const subMesh = subMeshes.data[i];\n                this._evaluateSubMesh(subMesh, mesh, sourceMesh, forcePush);\n            }\n        }\n    }\n    /**\n     * Update the transform matrix to update from the current active camera\n     * @param force defines a boolean used to force the update even if cache is up to date\n     */\n    updateTransformMatrix(force) {\n        if (!this.activeCamera) {\n            return;\n        }\n        if (this.activeCamera._renderingMultiview) {\n            const leftCamera = this.activeCamera._rigCameras[0];\n            const rightCamera = this.activeCamera._rigCameras[1];\n            this.setTransformMatrix(leftCamera.getViewMatrix(), leftCamera.getProjectionMatrix(force), rightCamera.getViewMatrix(), rightCamera.getProjectionMatrix(force));\n        }\n        else {\n            this.setTransformMatrix(this.activeCamera.getViewMatrix(), this.activeCamera.getProjectionMatrix(force));\n        }\n    }\n    _bindFrameBuffer(camera, clear = true) {\n        if (camera && camera._multiviewTexture) {\n            camera._multiviewTexture._bindFrameBuffer();\n        }\n        else if (camera && camera.outputRenderTarget) {\n            camera.outputRenderTarget._bindFrameBuffer();\n        }\n        else {\n            if (!this._engine._currentFrameBufferIsDefaultFrameBuffer()) {\n                this._engine.restoreDefaultFramebuffer();\n            }\n        }\n        if (clear) {\n            this._clearFrameBuffer(camera);\n        }\n    }\n    _clearFrameBuffer(camera) {\n        // we assume the framebuffer currently bound is the right one\n        if (camera && camera._multiviewTexture) {\n            // no clearing?\n        }\n        else if (camera && camera.outputRenderTarget && !camera._renderingMultiview) {\n            const rtt = camera.outputRenderTarget;\n            if (rtt.onClearObservable.hasObservers()) {\n                rtt.onClearObservable.notifyObservers(this._engine);\n            }\n            else if (!rtt.skipInitialClear) {\n                if (this.autoClear) {\n                    this._engine.clear(rtt.clearColor || this.clearColor, !rtt._cleared, true, true);\n                }\n                rtt._cleared = true;\n            }\n        }\n        else {\n            if (!this._defaultFrameBufferCleared) {\n                this._defaultFrameBufferCleared = true;\n                this._clear();\n            }\n            else {\n                this._engine.clear(null, false, true, true);\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    _renderForCamera(camera, rigParent, bindFrameBuffer = true) {\n        var _a, _b, _c;\n        if (camera && camera._skipRendering) {\n            return;\n        }\n        const engine = this._engine;\n        // Use _activeCamera instead of activeCamera to avoid onActiveCameraChanged\n        this._activeCamera = camera;\n        if (!this.activeCamera) {\n            throw new Error(\"Active camera not set\");\n        }\n        // Viewport\n        engine.setViewport(this.activeCamera.viewport);\n        // Camera\n        this.resetCachedMaterial();\n        this._renderId++;\n        if (!this.prePass && bindFrameBuffer) {\n            let skipInitialClear = true;\n            if (camera._renderingMultiview && camera.outputRenderTarget) {\n                skipInitialClear = camera.outputRenderTarget.skipInitialClear;\n                if (this.autoClear) {\n                    this._defaultFrameBufferCleared = false;\n                    camera.outputRenderTarget.skipInitialClear = false;\n                }\n            }\n            this._bindFrameBuffer(this._activeCamera);\n            if (camera._renderingMultiview && camera.outputRenderTarget) {\n                camera.outputRenderTarget.skipInitialClear = skipInitialClear;\n            }\n        }\n        this.updateTransformMatrix();\n        this.onBeforeCameraRenderObservable.notifyObservers(this.activeCamera);\n        // Meshes\n        this._evaluateActiveMeshes();\n        // Software skinning\n        for (let softwareSkinnedMeshIndex = 0; softwareSkinnedMeshIndex < this._softwareSkinnedMeshes.length; softwareSkinnedMeshIndex++) {\n            const mesh = this._softwareSkinnedMeshes.data[softwareSkinnedMeshIndex];\n            mesh.applySkeleton(mesh.skeleton);\n        }\n        // Render targets\n        this.onBeforeRenderTargetsRenderObservable.notifyObservers(this);\n        this._renderTargets.concatWithNoDuplicate(this._materialsRenderTargets);\n        if (camera.customRenderTargets && camera.customRenderTargets.length > 0) {\n            this._renderTargets.concatWithNoDuplicate(camera.customRenderTargets);\n        }\n        if (rigParent && rigParent.customRenderTargets && rigParent.customRenderTargets.length > 0) {\n            this._renderTargets.concatWithNoDuplicate(rigParent.customRenderTargets);\n        }\n        if (this.environmentTexture && this.environmentTexture.isRenderTarget) {\n            this._renderTargets.pushNoDuplicate(this.environmentTexture);\n        }\n        // Collects render targets from external components.\n        for (const step of this._gatherActiveCameraRenderTargetsStage) {\n            step.action(this._renderTargets);\n        }\n        let needRebind = false;\n        if (this.renderTargetsEnabled) {\n            this._intermediateRendering = true;\n            if (this._renderTargets.length > 0) {\n                Tools.StartPerformanceCounter(\"Render targets\", this._renderTargets.length > 0);\n                for (let renderIndex = 0; renderIndex < this._renderTargets.length; renderIndex++) {\n                    const renderTarget = this._renderTargets.data[renderIndex];\n                    if (renderTarget._shouldRender()) {\n                        this._renderId++;\n                        const hasSpecialRenderTargetCamera = renderTarget.activeCamera && renderTarget.activeCamera !== this.activeCamera;\n                        renderTarget.render(hasSpecialRenderTargetCamera, this.dumpNextRenderTargets);\n                        needRebind = true;\n                    }\n                }\n                Tools.EndPerformanceCounter(\"Render targets\", this._renderTargets.length > 0);\n                this._renderId++;\n            }\n            for (const step of this._cameraDrawRenderTargetStage) {\n                needRebind = step.action(this.activeCamera) || needRebind;\n            }\n            this._intermediateRendering = false;\n        }\n        this._engine.currentRenderPassId = (_c = (_b = (_a = camera.outputRenderTarget) === null || _a === void 0 ? void 0 : _a.renderPassId) !== null && _b !== void 0 ? _b : camera.renderPassId) !== null && _c !== void 0 ? _c : 0;\n        // Restore framebuffer after rendering to targets\n        if (needRebind && !this.prePass) {\n            this._bindFrameBuffer(this._activeCamera, false);\n        }\n        this.onAfterRenderTargetsRenderObservable.notifyObservers(this);\n        // Prepare Frame\n        if (this.postProcessManager && !camera._multiviewTexture && !this.prePass) {\n            this.postProcessManager._prepareFrame();\n        }\n        // Before Camera Draw\n        for (const step of this._beforeCameraDrawStage) {\n            step.action(this.activeCamera);\n        }\n        // Render\n        this.onBeforeDrawPhaseObservable.notifyObservers(this);\n        if (engine.snapshotRendering && engine.snapshotRenderingMode === 1) {\n            this.finalizeSceneUbo();\n        }\n        this._renderingManager.render(null, null, true, true);\n        this.onAfterDrawPhaseObservable.notifyObservers(this);\n        // After Camera Draw\n        for (const step of this._afterCameraDrawStage) {\n            step.action(this.activeCamera);\n        }\n        // Finalize frame\n        if (this.postProcessManager && !camera._multiviewTexture) {\n            // if the camera has an output render target, render the post process to the render target\n            const texture = camera.outputRenderTarget ? camera.outputRenderTarget.renderTarget : undefined;\n            this.postProcessManager._finalizeFrame(camera.isIntermediate, texture);\n        }\n        // After post process\n        for (const step of this._afterCameraPostProcessStage) {\n            step.action(this.activeCamera);\n        }\n        // Reset some special arrays\n        this._renderTargets.reset();\n        this.onAfterCameraRenderObservable.notifyObservers(this.activeCamera);\n    }\n    _processSubCameras(camera, bindFrameBuffer = true) {\n        if (camera.cameraRigMode === 0 || camera._renderingMultiview) {\n            if (camera._renderingMultiview && !this._multiviewSceneUbo) {\n                this._createMultiviewUbo();\n            }\n            this._renderForCamera(camera, undefined, bindFrameBuffer);\n            this.onAfterRenderCameraObservable.notifyObservers(camera);\n            return;\n        }\n        if (camera._useMultiviewToSingleView) {\n            this._renderMultiviewToSingleView(camera);\n        }\n        else {\n            // rig cameras\n            this.onBeforeCameraRenderObservable.notifyObservers(camera);\n            for (let index = 0; index < camera._rigCameras.length; index++) {\n                this._renderForCamera(camera._rigCameras[index], camera);\n            }\n        }\n        // Use _activeCamera instead of activeCamera to avoid onActiveCameraChanged\n        this._activeCamera = camera;\n        this.updateTransformMatrix();\n        this.onAfterRenderCameraObservable.notifyObservers(camera);\n    }\n    _checkIntersections() {\n        for (let index = 0; index < this._meshesForIntersections.length; index++) {\n            const sourceMesh = this._meshesForIntersections.data[index];\n            if (!sourceMesh.actionManager) {\n                continue;\n            }\n            for (let actionIndex = 0; sourceMesh.actionManager && actionIndex < sourceMesh.actionManager.actions.length; actionIndex++) {\n                const action = sourceMesh.actionManager.actions[actionIndex];\n                if (action.trigger === 12 || action.trigger === 13) {\n                    const parameters = action.getTriggerParameter();\n                    const otherMesh = parameters.mesh ? parameters.mesh : parameters;\n                    const areIntersecting = otherMesh.intersectsMesh(sourceMesh, parameters.usePreciseIntersection);\n                    const currentIntersectionInProgress = sourceMesh._intersectionsInProgress.indexOf(otherMesh);\n                    if (areIntersecting && currentIntersectionInProgress === -1) {\n                        if (action.trigger === 12) {\n                            action._executeCurrent(ActionEvent.CreateNew(sourceMesh, undefined, otherMesh));\n                            sourceMesh._intersectionsInProgress.push(otherMesh);\n                        }\n                        else if (action.trigger === 13) {\n                            sourceMesh._intersectionsInProgress.push(otherMesh);\n                        }\n                    }\n                    else if (!areIntersecting && currentIntersectionInProgress > -1) {\n                        //They intersected, and now they don't.\n                        //is this trigger an exit trigger? execute an event.\n                        if (action.trigger === 13) {\n                            action._executeCurrent(ActionEvent.CreateNew(sourceMesh, undefined, otherMesh));\n                        }\n                        //if this is an exit trigger, or no exit trigger exists, remove the id from the intersection in progress array.\n                        if (!sourceMesh.actionManager.hasSpecificTrigger(13, (parameter) => {\n                            const parameterMesh = parameter.mesh ? parameter.mesh : parameter;\n                            return otherMesh === parameterMesh;\n                        }) ||\n                            action.trigger === 13) {\n                            sourceMesh._intersectionsInProgress.splice(currentIntersectionInProgress, 1);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    _advancePhysicsEngineStep(step) {\n        // Do nothing. Code will be replaced if physics engine component is referenced\n    }\n    /** @internal */\n    _animate() {\n        // Nothing to do as long as Animatable have not been imported.\n    }\n    /** Execute all animations (for a frame) */\n    animate() {\n        if (this._engine.isDeterministicLockStep()) {\n            let deltaTime = Math.max(Scene.MinDeltaTime, Math.min(this._engine.getDeltaTime(), Scene.MaxDeltaTime)) + this._timeAccumulator;\n            const defaultFrameTime = this._engine.getTimeStep();\n            const defaultFPS = 1000.0 / defaultFrameTime / 1000.0;\n            let stepsTaken = 0;\n            const maxSubSteps = this._engine.getLockstepMaxSteps();\n            let internalSteps = Math.floor(deltaTime / defaultFrameTime);\n            internalSteps = Math.min(internalSteps, maxSubSteps);\n            while (deltaTime > 0 && stepsTaken < internalSteps) {\n                this.onBeforeStepObservable.notifyObservers(this);\n                // Animations\n                this._animationRatio = defaultFrameTime * defaultFPS;\n                this._animate();\n                this.onAfterAnimationsObservable.notifyObservers(this);\n                // Physics\n                if (this.physicsEnabled) {\n                    this._advancePhysicsEngineStep(defaultFrameTime);\n                }\n                this.onAfterStepObservable.notifyObservers(this);\n                this._currentStepId++;\n                stepsTaken++;\n                deltaTime -= defaultFrameTime;\n            }\n            this._timeAccumulator = deltaTime < 0 ? 0 : deltaTime;\n        }\n        else {\n            // Animations\n            const deltaTime = this.useConstantAnimationDeltaTime ? 16 : Math.max(Scene.MinDeltaTime, Math.min(this._engine.getDeltaTime(), Scene.MaxDeltaTime));\n            this._animationRatio = deltaTime * (60.0 / 1000.0);\n            this._animate();\n            this.onAfterAnimationsObservable.notifyObservers(this);\n            // Physics\n            if (this.physicsEnabled) {\n                this._advancePhysicsEngineStep(deltaTime);\n            }\n        }\n    }\n    _clear() {\n        if (this.autoClearDepthAndStencil || this.autoClear) {\n            this._engine.clear(this.clearColor, this.autoClear || this.forceWireframe || this.forcePointsCloud, this.autoClearDepthAndStencil, this.autoClearDepthAndStencil);\n        }\n    }\n    _checkCameraRenderTarget(camera) {\n        var _a;\n        if ((camera === null || camera === void 0 ? void 0 : camera.outputRenderTarget) && !(camera === null || camera === void 0 ? void 0 : camera.isRigCamera)) {\n            camera.outputRenderTarget._cleared = false;\n        }\n        if ((_a = camera === null || camera === void 0 ? void 0 : camera.rigCameras) === null || _a === void 0 ? void 0 : _a.length) {\n            for (let i = 0; i < camera.rigCameras.length; ++i) {\n                const rtt = camera.rigCameras[i].outputRenderTarget;\n                if (rtt) {\n                    rtt._cleared = false;\n                }\n            }\n        }\n    }\n    /**\n     * Resets the draw wrappers cache of all meshes\n     * @param passId If provided, releases only the draw wrapper corresponding to this render pass id\n     */\n    resetDrawCache(passId) {\n        if (!this.meshes) {\n            return;\n        }\n        for (const mesh of this.meshes) {\n            mesh.resetDrawCache(passId);\n        }\n    }\n    /**\n     * Render the scene\n     * @param updateCameras defines a boolean indicating if cameras must update according to their inputs (true by default)\n     * @param ignoreAnimations defines a boolean indicating if animations should not be executed (false by default)\n     */\n    render(updateCameras = true, ignoreAnimations = false) {\n        var _a, _b, _c;\n        if (this.isDisposed) {\n            return;\n        }\n        if (this.onReadyObservable.hasObservers() && this._executeWhenReadyTimeoutId === null) {\n            this._checkIsReady();\n        }\n        this._frameId++;\n        this._defaultFrameBufferCleared = false;\n        this._checkCameraRenderTarget(this.activeCamera);\n        if ((_a = this.activeCameras) === null || _a === void 0 ? void 0 : _a.length) {\n            this.activeCameras.forEach(this._checkCameraRenderTarget);\n        }\n        // Register components that have been associated lately to the scene.\n        this._registerTransientComponents();\n        this._activeParticles.fetchNewFrame();\n        this._totalVertices.fetchNewFrame();\n        this._activeIndices.fetchNewFrame();\n        this._activeBones.fetchNewFrame();\n        this._meshesForIntersections.reset();\n        this.resetCachedMaterial();\n        this.onBeforeAnimationsObservable.notifyObservers(this);\n        // Actions\n        if (this.actionManager) {\n            this.actionManager.processTrigger(11);\n        }\n        // Animations\n        if (!ignoreAnimations) {\n            this.animate();\n        }\n        // Before camera update steps\n        for (const step of this._beforeCameraUpdateStage) {\n            step.action();\n        }\n        // Update Cameras\n        if (updateCameras) {\n            if (this.activeCameras && this.activeCameras.length > 0) {\n                for (let cameraIndex = 0; cameraIndex < this.activeCameras.length; cameraIndex++) {\n                    const camera = this.activeCameras[cameraIndex];\n                    camera.update();\n                    if (camera.cameraRigMode !== 0) {\n                        // rig cameras\n                        for (let index = 0; index < camera._rigCameras.length; index++) {\n                            camera._rigCameras[index].update();\n                        }\n                    }\n                }\n            }\n            else if (this.activeCamera) {\n                this.activeCamera.update();\n                if (this.activeCamera.cameraRigMode !== 0) {\n                    // rig cameras\n                    for (let index = 0; index < this.activeCamera._rigCameras.length; index++) {\n                        this.activeCamera._rigCameras[index].update();\n                    }\n                }\n            }\n        }\n        // Before render\n        this.onBeforeRenderObservable.notifyObservers(this);\n        const engine = this.getEngine();\n        // Customs render targets\n        this.onBeforeRenderTargetsRenderObservable.notifyObservers(this);\n        const currentActiveCamera = ((_b = this.activeCameras) === null || _b === void 0 ? void 0 : _b.length) ? this.activeCameras[0] : this.activeCamera;\n        if (this.renderTargetsEnabled) {\n            Tools.StartPerformanceCounter(\"Custom render targets\", this.customRenderTargets.length > 0);\n            this._intermediateRendering = true;\n            for (let customIndex = 0; customIndex < this.customRenderTargets.length; customIndex++) {\n                const renderTarget = this.customRenderTargets[customIndex];\n                if (renderTarget._shouldRender()) {\n                    this._renderId++;\n                    this.activeCamera = renderTarget.activeCamera || this.activeCamera;\n                    if (!this.activeCamera) {\n                        throw new Error(\"Active camera not set\");\n                    }\n                    // Viewport\n                    engine.setViewport(this.activeCamera.viewport);\n                    // Camera\n                    this.updateTransformMatrix();\n                    renderTarget.render(currentActiveCamera !== this.activeCamera, this.dumpNextRenderTargets);\n                }\n            }\n            Tools.EndPerformanceCounter(\"Custom render targets\", this.customRenderTargets.length > 0);\n            this._intermediateRendering = false;\n            this._renderId++;\n        }\n        this._engine.currentRenderPassId = (_c = currentActiveCamera === null || currentActiveCamera === void 0 ? void 0 : currentActiveCamera.renderPassId) !== null && _c !== void 0 ? _c : 0;\n        // Restore back buffer\n        this.activeCamera = currentActiveCamera;\n        if (this._activeCamera && this._activeCamera.cameraRigMode !== 22 && !this.prePass) {\n            this._bindFrameBuffer(this._activeCamera, false);\n        }\n        this.onAfterRenderTargetsRenderObservable.notifyObservers(this);\n        for (const step of this._beforeClearStage) {\n            step.action();\n        }\n        // Clear\n        this._clearFrameBuffer(this.activeCamera);\n        // Collects render targets from external components.\n        for (const step of this._gatherRenderTargetsStage) {\n            step.action(this._renderTargets);\n        }\n        // Multi-cameras?\n        if (this.activeCameras && this.activeCameras.length > 0) {\n            for (let cameraIndex = 0; cameraIndex < this.activeCameras.length; cameraIndex++) {\n                this._processSubCameras(this.activeCameras[cameraIndex], cameraIndex > 0);\n            }\n        }\n        else {\n            if (!this.activeCamera) {\n                throw new Error(\"No camera defined\");\n            }\n            this._processSubCameras(this.activeCamera, !!this.activeCamera.outputRenderTarget);\n        }\n        // Intersection checks\n        this._checkIntersections();\n        // Executes the after render stage actions.\n        for (const step of this._afterRenderStage) {\n            step.action();\n        }\n        // After render\n        if (this.afterRender) {\n            this.afterRender();\n        }\n        this.onAfterRenderObservable.notifyObservers(this);\n        // Cleaning\n        if (this._toBeDisposed.length) {\n            for (let index = 0; index < this._toBeDisposed.length; index++) {\n                const data = this._toBeDisposed[index];\n                if (data) {\n                    data.dispose();\n                }\n            }\n            this._toBeDisposed.length = 0;\n        }\n        if (this.dumpNextRenderTargets) {\n            this.dumpNextRenderTargets = false;\n        }\n        this._activeBones.addCount(0, true);\n        this._activeIndices.addCount(0, true);\n        this._activeParticles.addCount(0, true);\n        this._engine.restoreDefaultFramebuffer();\n    }\n    /**\n     * Freeze all materials\n     * A frozen material will not be updatable but should be faster to render\n     * Note: multimaterials will not be frozen, but their submaterials will\n     */\n    freezeMaterials() {\n        for (let i = 0; i < this.materials.length; i++) {\n            this.materials[i].freeze();\n        }\n    }\n    /**\n     * Unfreeze all materials\n     * A frozen material will not be updatable but should be faster to render\n     */\n    unfreezeMaterials() {\n        for (let i = 0; i < this.materials.length; i++) {\n            this.materials[i].unfreeze();\n        }\n    }\n    /**\n     * Releases all held resources\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this.beforeRender = null;\n        this.afterRender = null;\n        this.metadata = null;\n        this.skeletons.length = 0;\n        this.morphTargetManagers.length = 0;\n        this._transientComponents.length = 0;\n        this._isReadyForMeshStage.clear();\n        this._beforeEvaluateActiveMeshStage.clear();\n        this._evaluateSubMeshStage.clear();\n        this._preActiveMeshStage.clear();\n        this._cameraDrawRenderTargetStage.clear();\n        this._beforeCameraDrawStage.clear();\n        this._beforeRenderTargetDrawStage.clear();\n        this._beforeRenderingGroupDrawStage.clear();\n        this._beforeRenderingMeshStage.clear();\n        this._afterRenderingMeshStage.clear();\n        this._afterRenderingGroupDrawStage.clear();\n        this._afterCameraDrawStage.clear();\n        this._afterRenderTargetDrawStage.clear();\n        this._afterRenderStage.clear();\n        this._beforeCameraUpdateStage.clear();\n        this._beforeClearStage.clear();\n        this._gatherRenderTargetsStage.clear();\n        this._gatherActiveCameraRenderTargetsStage.clear();\n        this._pointerMoveStage.clear();\n        this._pointerDownStage.clear();\n        this._pointerUpStage.clear();\n        this.importedMeshesFiles = new Array();\n        if (this.stopAllAnimations) {\n            this.stopAllAnimations();\n        }\n        this.resetCachedMaterial();\n        // Smart arrays\n        if (this.activeCamera) {\n            this.activeCamera._activeMeshes.dispose();\n            this.activeCamera = null;\n        }\n        this.activeCameras = null;\n        this._activeMeshes.dispose();\n        this._renderingManager.dispose();\n        this._processedMaterials.dispose();\n        this._activeParticleSystems.dispose();\n        this._activeSkeletons.dispose();\n        this._softwareSkinnedMeshes.dispose();\n        this._renderTargets.dispose();\n        this._materialsRenderTargets.dispose();\n        this._registeredForLateAnimationBindings.dispose();\n        this._meshesForIntersections.dispose();\n        this._toBeDisposed.length = 0;\n        // Abort active requests\n        const activeRequests = this._activeRequests.slice();\n        for (const request of activeRequests) {\n            request.abort();\n        }\n        this._activeRequests.length = 0;\n        // Events\n        try {\n            this.onDisposeObservable.notifyObservers(this);\n        }\n        catch (e) {\n            console.error(\"An error occurred while calling onDisposeObservable!\", e);\n        }\n        this.onDisposeObservable.clear();\n        this.onBeforeRenderObservable.clear();\n        this.onAfterRenderObservable.clear();\n        this.onBeforeRenderTargetsRenderObservable.clear();\n        this.onAfterRenderTargetsRenderObservable.clear();\n        this.onAfterStepObservable.clear();\n        this.onBeforeStepObservable.clear();\n        this.onBeforeActiveMeshesEvaluationObservable.clear();\n        this.onAfterActiveMeshesEvaluationObservable.clear();\n        this.onBeforeParticlesRenderingObservable.clear();\n        this.onAfterParticlesRenderingObservable.clear();\n        this.onBeforeDrawPhaseObservable.clear();\n        this.onAfterDrawPhaseObservable.clear();\n        this.onBeforeAnimationsObservable.clear();\n        this.onAfterAnimationsObservable.clear();\n        this.onDataLoadedObservable.clear();\n        this.onBeforeRenderingGroupObservable.clear();\n        this.onAfterRenderingGroupObservable.clear();\n        this.onMeshImportedObservable.clear();\n        this.onBeforeCameraRenderObservable.clear();\n        this.onAfterCameraRenderObservable.clear();\n        this.onReadyObservable.clear();\n        this.onNewCameraAddedObservable.clear();\n        this.onCameraRemovedObservable.clear();\n        this.onNewLightAddedObservable.clear();\n        this.onLightRemovedObservable.clear();\n        this.onNewGeometryAddedObservable.clear();\n        this.onGeometryRemovedObservable.clear();\n        this.onNewTransformNodeAddedObservable.clear();\n        this.onTransformNodeRemovedObservable.clear();\n        this.onNewMeshAddedObservable.clear();\n        this.onMeshRemovedObservable.clear();\n        this.onNewSkeletonAddedObservable.clear();\n        this.onSkeletonRemovedObservable.clear();\n        this.onNewMaterialAddedObservable.clear();\n        this.onNewMultiMaterialAddedObservable.clear();\n        this.onMaterialRemovedObservable.clear();\n        this.onMultiMaterialRemovedObservable.clear();\n        this.onNewTextureAddedObservable.clear();\n        this.onTextureRemovedObservable.clear();\n        this.onPrePointerObservable.clear();\n        this.onPointerObservable.clear();\n        this.onPreKeyboardObservable.clear();\n        this.onKeyboardObservable.clear();\n        this.onActiveCameraChanged.clear();\n        this.detachControl();\n        // Detach cameras\n        const canvas = this._engine.getInputElement();\n        if (canvas) {\n            for (let index = 0; index < this.cameras.length; index++) {\n                this.cameras[index].detachControl();\n            }\n        }\n        // Release animation groups\n        this._disposeList(this.animationGroups);\n        // Release lights\n        this._disposeList(this.lights);\n        // Release meshes\n        this._disposeList(this.meshes, (item) => item.dispose(true));\n        this._disposeList(this.transformNodes, (item) => item.dispose(true));\n        // Release cameras\n        const cameras = this.cameras;\n        this._disposeList(cameras);\n        // Release materials\n        if (this._defaultMaterial) {\n            this._defaultMaterial.dispose();\n        }\n        this._disposeList(this.multiMaterials);\n        this._disposeList(this.materials);\n        // Release particles\n        this._disposeList(this.particleSystems);\n        // Release postProcesses\n        this._disposeList(this.postProcesses);\n        // Release textures\n        this._disposeList(this.textures);\n        // Release morph targets\n        this._disposeList(this.morphTargetManagers);\n        // Release UBO\n        this._sceneUbo.dispose();\n        if (this._multiviewSceneUbo) {\n            this._multiviewSceneUbo.dispose();\n        }\n        // Post-processes\n        this.postProcessManager.dispose();\n        // Components\n        this._disposeList(this._components);\n        // Remove from engine\n        let index = this._engine.scenes.indexOf(this);\n        if (index > -1) {\n            this._engine.scenes.splice(index, 1);\n        }\n        if (EngineStore._LastCreatedScene === this) {\n            if (this._engine.scenes.length > 0) {\n                EngineStore._LastCreatedScene = this._engine.scenes[this._engine.scenes.length - 1];\n            }\n            else {\n                EngineStore._LastCreatedScene = null;\n            }\n        }\n        index = this._engine._virtualScenes.indexOf(this);\n        if (index > -1) {\n            this._engine._virtualScenes.splice(index, 1);\n        }\n        this._engine.wipeCaches(true);\n        this._isDisposed = true;\n    }\n    _disposeList(items, callback) {\n        const itemsCopy = items.slice(0);\n        callback = callback !== null && callback !== void 0 ? callback : ((item) => item.dispose());\n        for (const item of itemsCopy) {\n            callback(item);\n        }\n        items.length = 0;\n    }\n    /**\n     * Gets if the scene is already disposed\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Call this function to reduce memory footprint of the scene.\n     * Vertex buffers will not store CPU data anymore (this will prevent picking, collisions or physics to work correctly)\n     */\n    clearCachedVertexData() {\n        for (let meshIndex = 0; meshIndex < this.meshes.length; meshIndex++) {\n            const mesh = this.meshes[meshIndex];\n            const geometry = mesh.geometry;\n            if (geometry) {\n                geometry.clearCachedData();\n            }\n        }\n    }\n    /**\n     * This function will remove the local cached buffer data from texture.\n     * It will save memory but will prevent the texture from being rebuilt\n     */\n    cleanCachedTextureBuffer() {\n        for (const baseTexture of this.textures) {\n            const buffer = baseTexture._buffer;\n            if (buffer) {\n                baseTexture._buffer = null;\n            }\n        }\n    }\n    /**\n     * Get the world extend vectors with an optional filter\n     *\n     * @param filterPredicate the predicate - which meshes should be included when calculating the world size\n     * @returns {{ min: Vector3; max: Vector3 }} min and max vectors\n     */\n    getWorldExtends(filterPredicate) {\n        const min = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        const max = new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n        filterPredicate = filterPredicate || (() => true);\n        this.meshes.filter(filterPredicate).forEach((mesh) => {\n            mesh.computeWorldMatrix(true);\n            if (!mesh.subMeshes || mesh.subMeshes.length === 0 || mesh.infiniteDistance) {\n                return;\n            }\n            const boundingInfo = mesh.getBoundingInfo();\n            const minBox = boundingInfo.boundingBox.minimumWorld;\n            const maxBox = boundingInfo.boundingBox.maximumWorld;\n            Vector3.CheckExtends(minBox, min, max);\n            Vector3.CheckExtends(maxBox, min, max);\n        });\n        return {\n            min: min,\n            max: max\n        };\n    }\n    // Picking\n    /**\n     * Creates a ray that can be used to pick in the scene\n     * @param x defines the x coordinate of the origin (on-screen)\n     * @param y defines the y coordinate of the origin (on-screen)\n     * @param world defines the world matrix to use if you want to pick in object space (instead of world space)\n     * @param camera defines the camera to use for the picking\n     * @param cameraViewSpace defines if picking will be done in view space (false by default)\n     * @returns a Ray\n     */\n    createPickingRay(x, y, world, camera, cameraViewSpace = false) {\n        throw _WarnImport(\"Ray\");\n    }\n    /**\n     * Creates a ray that can be used to pick in the scene\n     * @param x defines the x coordinate of the origin (on-screen)\n     * @param y defines the y coordinate of the origin (on-screen)\n     * @param world defines the world matrix to use if you want to pick in object space (instead of world space)\n     * @param result defines the ray where to store the picking ray\n     * @param camera defines the camera to use for the picking\n     * @param cameraViewSpace defines if picking will be done in view space (false by default)\n     * @param enableDistantPicking defines if picking should handle large values for mesh position/scaling (false by default)\n     * @returns the current scene\n     */\n    createPickingRayToRef(x, y, world, result, camera, cameraViewSpace = false, enableDistantPicking = false) {\n        throw _WarnImport(\"Ray\");\n    }\n    /**\n     * Creates a ray that can be used to pick in the scene\n     * @param x defines the x coordinate of the origin (on-screen)\n     * @param y defines the y coordinate of the origin (on-screen)\n     * @param camera defines the camera to use for the picking\n     * @returns a Ray\n     */\n    createPickingRayInCameraSpace(x, y, camera) {\n        throw _WarnImport(\"Ray\");\n    }\n    /**\n     * Creates a ray that can be used to pick in the scene\n     * @param x defines the x coordinate of the origin (on-screen)\n     * @param y defines the y coordinate of the origin (on-screen)\n     * @param result defines the ray where to store the picking ray\n     * @param camera defines the camera to use for the picking\n     * @returns the current scene\n     */\n    createPickingRayInCameraSpaceToRef(x, y, result, camera) {\n        throw _WarnImport(\"Ray\");\n    }\n    /** @internal */\n    get _pickingAvailable() {\n        return false;\n    }\n    /** Launch a ray to try to pick a mesh in the scene\n     * @param x position on screen\n     * @param y position on screen\n     * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true\n     * @param fastCheck defines if the first intersection will be used (and not the closest)\n     * @param camera to use for computing the picking ray. Can be set to null. In this case, the scene.activeCamera will be used\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\n     * @returns a PickingInfo\n     */\n    pick(x, y, predicate, fastCheck, camera, trianglePredicate) {\n        // Dummy info if picking as not been imported\n        return new PickingInfo();\n    }\n    /** Launch a ray to try to pick a mesh in the scene using only bounding information of the main mesh (not using submeshes)\n     * @param x position on screen\n     * @param y position on screen\n     * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true\n     * @param fastCheck defines if the first intersection will be used (and not the closest)\n     * @param camera to use for computing the picking ray. Can be set to null. In this case, the scene.activeCamera will be used\n     * @returns a PickingInfo (Please note that some info will not be set like distance, bv, bu and everything that cannot be capture by only using bounding infos)\n     */\n    pickWithBoundingInfo(x, y, predicate, fastCheck, camera) {\n        // Dummy info if picking as not been imported\n        return new PickingInfo();\n    }\n    /** Use the given ray to pick a mesh in the scene\n     * @param ray The ray to use to pick meshes\n     * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must have isPickable set to true\n     * @param fastCheck defines if the first intersection will be used (and not the closest)\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\n     * @returns a PickingInfo\n     */\n    pickWithRay(ray, predicate, fastCheck, trianglePredicate) {\n        throw _WarnImport(\"Ray\");\n    }\n    /**\n     * Launch a ray to try to pick a mesh in the scene\n     * @param x X position on screen\n     * @param y Y position on screen\n     * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true\n     * @param camera camera to use for computing the picking ray. Can be set to null. In this case, the scene.activeCamera will be used\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\n     * @returns an array of PickingInfo\n     */\n    multiPick(x, y, predicate, camera, trianglePredicate) {\n        throw _WarnImport(\"Ray\");\n    }\n    /**\n     * Launch a ray to try to pick a mesh in the scene\n     * @param ray Ray to use\n     * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\n     * @returns an array of PickingInfo\n     */\n    multiPickWithRay(ray, predicate, trianglePredicate) {\n        throw _WarnImport(\"Ray\");\n    }\n    /**\n     * Force the value of meshUnderPointer\n     * @param mesh defines the mesh to use\n     * @param pointerId optional pointer id when using more than one pointer\n     * @param pickResult optional pickingInfo data used to find mesh\n     */\n    setPointerOverMesh(mesh, pointerId, pickResult) {\n        this._inputManager.setPointerOverMesh(mesh, pointerId, pickResult);\n    }\n    /**\n     * Gets the mesh under the pointer\n     * @returns a Mesh or null if no mesh is under the pointer\n     */\n    getPointerOverMesh() {\n        return this._inputManager.getPointerOverMesh();\n    }\n    // Misc.\n    /** @internal */\n    _rebuildGeometries() {\n        for (const geometry of this.geometries) {\n            geometry._rebuild();\n        }\n        for (const mesh of this.meshes) {\n            mesh._rebuild();\n        }\n        if (this.postProcessManager) {\n            this.postProcessManager._rebuild();\n        }\n        for (const component of this._components) {\n            component.rebuild();\n        }\n        for (const system of this.particleSystems) {\n            system.rebuild();\n        }\n        if (this.spriteManagers) {\n            for (const spriteMgr of this.spriteManagers) {\n                spriteMgr.rebuild();\n            }\n        }\n    }\n    /** @internal */\n    _rebuildTextures() {\n        for (const texture of this.textures) {\n            texture._rebuild();\n        }\n        this.markAllMaterialsAsDirty(1);\n    }\n    // Tags\n    _getByTags(list, tagsQuery, forEach) {\n        if (tagsQuery === undefined) {\n            // returns the complete list (could be done with Tags.MatchesQuery but no need to have a for-loop here)\n            return list;\n        }\n        const listByTags = [];\n        forEach =\n            forEach ||\n                ((item) => {\n                    return;\n                });\n        for (const i in list) {\n            const item = list[i];\n            if (Tags && Tags.MatchesQuery(item, tagsQuery)) {\n                listByTags.push(item);\n                forEach(item);\n            }\n        }\n        return listByTags;\n    }\n    /**\n     * Get a list of meshes by tags\n     * @param tagsQuery defines the tags query to use\n     * @param forEach defines a predicate used to filter results\n     * @returns an array of Mesh\n     */\n    getMeshesByTags(tagsQuery, forEach) {\n        return this._getByTags(this.meshes, tagsQuery, forEach);\n    }\n    /**\n     * Get a list of cameras by tags\n     * @param tagsQuery defines the tags query to use\n     * @param forEach defines a predicate used to filter results\n     * @returns an array of Camera\n     */\n    getCamerasByTags(tagsQuery, forEach) {\n        return this._getByTags(this.cameras, tagsQuery, forEach);\n    }\n    /**\n     * Get a list of lights by tags\n     * @param tagsQuery defines the tags query to use\n     * @param forEach defines a predicate used to filter results\n     * @returns an array of Light\n     */\n    getLightsByTags(tagsQuery, forEach) {\n        return this._getByTags(this.lights, tagsQuery, forEach);\n    }\n    /**\n     * Get a list of materials by tags\n     * @param tagsQuery defines the tags query to use\n     * @param forEach defines a predicate used to filter results\n     * @returns an array of Material\n     */\n    getMaterialByTags(tagsQuery, forEach) {\n        return this._getByTags(this.materials, tagsQuery, forEach).concat(this._getByTags(this.multiMaterials, tagsQuery, forEach));\n    }\n    /**\n     * Get a list of transform nodes by tags\n     * @param tagsQuery defines the tags query to use\n     * @param forEach defines a predicate used to filter results\n     * @returns an array of TransformNode\n     */\n    getTransformNodesByTags(tagsQuery, forEach) {\n        return this._getByTags(this.transformNodes, tagsQuery, forEach);\n    }\n    /**\n     * Overrides the default sort function applied in the rendering group to prepare the meshes.\n     * This allowed control for front to back rendering or reversly depending of the special needs.\n     *\n     * @param renderingGroupId The rendering group id corresponding to its index\n     * @param opaqueSortCompareFn The opaque queue comparison function use to sort.\n     * @param alphaTestSortCompareFn The alpha test queue comparison function use to sort.\n     * @param transparentSortCompareFn The transparent queue comparison function use to sort.\n     */\n    setRenderingOrder(renderingGroupId, opaqueSortCompareFn = null, alphaTestSortCompareFn = null, transparentSortCompareFn = null) {\n        this._renderingManager.setRenderingOrder(renderingGroupId, opaqueSortCompareFn, alphaTestSortCompareFn, transparentSortCompareFn);\n    }\n    /**\n     * Specifies whether or not the stencil and depth buffer are cleared between two rendering groups.\n     *\n     * @param renderingGroupId The rendering group id corresponding to its index\n     * @param autoClearDepthStencil Automatically clears depth and stencil between groups if true.\n     * @param depth Automatically clears depth between groups if true and autoClear is true.\n     * @param stencil Automatically clears stencil between groups if true and autoClear is true.\n     */\n    setRenderingAutoClearDepthStencil(renderingGroupId, autoClearDepthStencil, depth = true, stencil = true) {\n        this._renderingManager.setRenderingAutoClearDepthStencil(renderingGroupId, autoClearDepthStencil, depth, stencil);\n    }\n    /**\n     * Gets the current auto clear configuration for one rendering group of the rendering\n     * manager.\n     * @param index the rendering group index to get the information for\n     * @returns The auto clear setup for the requested rendering group\n     */\n    getAutoClearDepthStencilSetup(index) {\n        return this._renderingManager.getAutoClearDepthStencilSetup(index);\n    }\n    /** Gets or sets a boolean blocking all the calls to markAllMaterialsAsDirty (ie. the materials won't be updated if they are out of sync) */\n    get blockMaterialDirtyMechanism() {\n        return this._blockMaterialDirtyMechanism;\n    }\n    set blockMaterialDirtyMechanism(value) {\n        if (this._blockMaterialDirtyMechanism === value) {\n            return;\n        }\n        this._blockMaterialDirtyMechanism = value;\n        if (!value) {\n            // Do a complete update\n            this.markAllMaterialsAsDirty(63);\n        }\n    }\n    /**\n     * Will flag all materials as dirty to trigger new shader compilation\n     * @param flag defines the flag used to specify which material part must be marked as dirty\n     * @param predicate If not null, it will be used to specify if a material has to be marked as dirty\n     */\n    markAllMaterialsAsDirty(flag, predicate) {\n        if (this._blockMaterialDirtyMechanism) {\n            return;\n        }\n        for (const material of this.materials) {\n            if (predicate && !predicate(material)) {\n                continue;\n            }\n            material.markAsDirty(flag);\n        }\n    }\n    /**\n     * @internal\n     */\n    _loadFile(fileOrUrl, onSuccess, onProgress, useOfflineSupport, useArrayBuffer, onError, onOpened) {\n        const request = LoadFile(fileOrUrl, onSuccess, onProgress, useOfflineSupport ? this.offlineProvider : undefined, useArrayBuffer, onError, onOpened);\n        this._activeRequests.push(request);\n        request.onCompleteObservable.add((request) => {\n            this._activeRequests.splice(this._activeRequests.indexOf(request), 1);\n        });\n        return request;\n    }\n    /**\n     * @internal\n     */\n    _loadFileAsync(fileOrUrl, onProgress, useOfflineSupport, useArrayBuffer, onOpened) {\n        return new Promise((resolve, reject) => {\n            this._loadFile(fileOrUrl, (data) => {\n                resolve(data);\n            }, onProgress, useOfflineSupport, useArrayBuffer, (request, exception) => {\n                reject(exception);\n            }, onOpened);\n        });\n    }\n    /**\n     * @internal\n     */\n    _requestFile(url, onSuccess, onProgress, useOfflineSupport, useArrayBuffer, onError, onOpened) {\n        const request = RequestFile(url, onSuccess, onProgress, useOfflineSupport ? this.offlineProvider : undefined, useArrayBuffer, onError, onOpened);\n        this._activeRequests.push(request);\n        request.onCompleteObservable.add((request) => {\n            this._activeRequests.splice(this._activeRequests.indexOf(request), 1);\n        });\n        return request;\n    }\n    /**\n     * @internal\n     */\n    _requestFileAsync(url, onProgress, useOfflineSupport, useArrayBuffer, onOpened) {\n        return new Promise((resolve, reject) => {\n            this._requestFile(url, (data) => {\n                resolve(data);\n            }, onProgress, useOfflineSupport, useArrayBuffer, (error) => {\n                reject(error);\n            }, onOpened);\n        });\n    }\n    /**\n     * @internal\n     */\n    _readFile(file, onSuccess, onProgress, useArrayBuffer, onError) {\n        const request = ReadFile(file, onSuccess, onProgress, useArrayBuffer, onError);\n        this._activeRequests.push(request);\n        request.onCompleteObservable.add((request) => {\n            this._activeRequests.splice(this._activeRequests.indexOf(request), 1);\n        });\n        return request;\n    }\n    /**\n     * @internal\n     */\n    _readFileAsync(file, onProgress, useArrayBuffer) {\n        return new Promise((resolve, reject) => {\n            this._readFile(file, (data) => {\n                resolve(data);\n            }, onProgress, useArrayBuffer, (error) => {\n                reject(error);\n            });\n        });\n    }\n    /**\n     * This method gets the performance collector belonging to the scene, which is generally shared with the inspector.\n     * @returns the perf collector belonging to the scene.\n     */\n    getPerfCollector() {\n        throw _WarnImport(\"performanceViewerSceneExtension\");\n    }\n}\n/** The fog is deactivated */\nScene.FOGMODE_NONE = 0;\n/** The fog density is following an exponential function */\nScene.FOGMODE_EXP = 1;\n/** The fog density is following an exponential function faster than FOGMODE_EXP */\nScene.FOGMODE_EXP2 = 2;\n/** The fog density is following a linear function. */\nScene.FOGMODE_LINEAR = 3;\n/**\n * Gets or sets the minimum deltatime when deterministic lock step is enabled\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\n */\nScene.MinDeltaTime = 1.0;\n/**\n * Gets or sets the maximum deltatime when deterministic lock step is enabled\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\n */\nScene.MaxDeltaTime = 1000.0;\n/**\n * @internal\n */\nScene.prototype.setActiveCameraByID = function (id) {\n    return this.setActiveCameraById(id);\n};\nScene.prototype.getLastMaterialByID = function (id) {\n    return this.getLastMaterialById(id);\n};\nScene.prototype.getMaterialByID = function (id) {\n    return this.getMaterialById(id);\n};\nScene.prototype.getTextureByUniqueID = function (uniqueId) {\n    return this.getTextureByUniqueId(uniqueId);\n};\nScene.prototype.getCameraByID = function (id) {\n    return this.getCameraById(id);\n};\nScene.prototype.getCameraByUniqueID = function (uniqueId) {\n    return this.getCameraByUniqueId(uniqueId);\n};\nScene.prototype.getBoneByID = function (id) {\n    return this.getBoneById(id);\n};\nScene.prototype.getLightByID = function (id) {\n    return this.getLightById(id);\n};\nScene.prototype.getLightByUniqueID = function (uniqueId) {\n    return this.getLightByUniqueId(uniqueId);\n};\nScene.prototype.getParticleSystemByID = function (id) {\n    return this.getParticleSystemById(id);\n};\nScene.prototype.getGeometryByID = function (id) {\n    return this.getGeometryById(id);\n};\nScene.prototype.getMeshByID = function (id) {\n    return this.getMeshById(id);\n};\nScene.prototype.getMeshesByID = function (id) {\n    return this.getMeshesById(id);\n};\nScene.prototype.getTransformNodeByID = function (id) {\n    return this.getTransformNodeById(id);\n};\nScene.prototype.getTransformNodeByUniqueID = function (uniqueId) {\n    return this.getTransformNodeByUniqueId(uniqueId);\n};\nScene.prototype.getTransformNodesByID = function (id) {\n    return this.getTransformNodesById(id);\n};\nScene.prototype.getMeshByUniqueID = function (uniqueId) {\n    return this.getMeshByUniqueId(uniqueId);\n};\nScene.prototype.getLastMeshByID = function (id) {\n    return this.getLastMeshById(id);\n};\nScene.prototype.getLastEntryByID = function (id) {\n    return this.getLastEntryById(id);\n};\nScene.prototype.getNodeByID = function (id) {\n    return this.getNodeById(id);\n};\nScene.prototype.getLastSkeletonByID = function (id) {\n    return this.getLastSkeletonById(id);\n};\n//# sourceMappingURL=scene.js.map","/**\n * Groups all the scene component constants in one place to ease maintenance.\n * @internal\n */\nexport class SceneComponentConstants {\n}\nSceneComponentConstants.NAME_EFFECTLAYER = \"EffectLayer\";\nSceneComponentConstants.NAME_LAYER = \"Layer\";\nSceneComponentConstants.NAME_LENSFLARESYSTEM = \"LensFlareSystem\";\nSceneComponentConstants.NAME_BOUNDINGBOXRENDERER = \"BoundingBoxRenderer\";\nSceneComponentConstants.NAME_PARTICLESYSTEM = \"ParticleSystem\";\nSceneComponentConstants.NAME_GAMEPAD = \"Gamepad\";\nSceneComponentConstants.NAME_SIMPLIFICATIONQUEUE = \"SimplificationQueue\";\nSceneComponentConstants.NAME_GEOMETRYBUFFERRENDERER = \"GeometryBufferRenderer\";\nSceneComponentConstants.NAME_PREPASSRENDERER = \"PrePassRenderer\";\nSceneComponentConstants.NAME_DEPTHRENDERER = \"DepthRenderer\";\nSceneComponentConstants.NAME_DEPTHPEELINGRENDERER = \"DepthPeelingRenderer\";\nSceneComponentConstants.NAME_POSTPROCESSRENDERPIPELINEMANAGER = \"PostProcessRenderPipelineManager\";\nSceneComponentConstants.NAME_SPRITE = \"Sprite\";\nSceneComponentConstants.NAME_SUBSURFACE = \"SubSurface\";\nSceneComponentConstants.NAME_OUTLINERENDERER = \"Outline\";\nSceneComponentConstants.NAME_PROCEDURALTEXTURE = \"ProceduralTexture\";\nSceneComponentConstants.NAME_SHADOWGENERATOR = \"ShadowGenerator\";\nSceneComponentConstants.NAME_OCTREE = \"Octree\";\nSceneComponentConstants.NAME_PHYSICSENGINE = \"PhysicsEngine\";\nSceneComponentConstants.NAME_AUDIO = \"Audio\";\nSceneComponentConstants.NAME_FLUIDRENDERER = \"FluidRenderer\";\nSceneComponentConstants.STEP_ISREADYFORMESH_EFFECTLAYER = 0;\nSceneComponentConstants.STEP_BEFOREEVALUATEACTIVEMESH_BOUNDINGBOXRENDERER = 0;\nSceneComponentConstants.STEP_EVALUATESUBMESH_BOUNDINGBOXRENDERER = 0;\nSceneComponentConstants.STEP_PREACTIVEMESH_BOUNDINGBOXRENDERER = 0;\nSceneComponentConstants.STEP_CAMERADRAWRENDERTARGET_EFFECTLAYER = 1;\nSceneComponentConstants.STEP_BEFORECAMERADRAW_PREPASS = 0;\nSceneComponentConstants.STEP_BEFORECAMERADRAW_EFFECTLAYER = 1;\nSceneComponentConstants.STEP_BEFORECAMERADRAW_LAYER = 2;\nSceneComponentConstants.STEP_BEFORERENDERTARGETDRAW_PREPASS = 0;\nSceneComponentConstants.STEP_BEFORERENDERTARGETDRAW_LAYER = 1;\nSceneComponentConstants.STEP_BEFORERENDERINGMESH_PREPASS = 0;\nSceneComponentConstants.STEP_BEFORERENDERINGMESH_OUTLINE = 1;\nSceneComponentConstants.STEP_AFTERRENDERINGMESH_PREPASS = 0;\nSceneComponentConstants.STEP_AFTERRENDERINGMESH_OUTLINE = 1;\nSceneComponentConstants.STEP_AFTERRENDERINGGROUPDRAW_EFFECTLAYER_DRAW = 0;\nSceneComponentConstants.STEP_AFTERRENDERINGGROUPDRAW_BOUNDINGBOXRENDERER = 1;\nSceneComponentConstants.STEP_BEFORECAMERAUPDATE_SIMPLIFICATIONQUEUE = 0;\nSceneComponentConstants.STEP_BEFORECAMERAUPDATE_GAMEPAD = 1;\nSceneComponentConstants.STEP_BEFORECLEAR_PROCEDURALTEXTURE = 0;\nSceneComponentConstants.STEP_BEFORECLEAR_PREPASS = 1;\nSceneComponentConstants.STEP_BEFORERENDERTARGETCLEAR_PREPASS = 0;\nSceneComponentConstants.STEP_AFTERRENDERTARGETDRAW_PREPASS = 0;\nSceneComponentConstants.STEP_AFTERRENDERTARGETDRAW_LAYER = 1;\nSceneComponentConstants.STEP_AFTERCAMERADRAW_PREPASS = 0;\nSceneComponentConstants.STEP_AFTERCAMERADRAW_EFFECTLAYER = 1;\nSceneComponentConstants.STEP_AFTERCAMERADRAW_LENSFLARESYSTEM = 2;\nSceneComponentConstants.STEP_AFTERCAMERADRAW_EFFECTLAYER_DRAW = 3;\nSceneComponentConstants.STEP_AFTERCAMERADRAW_LAYER = 4;\nSceneComponentConstants.STEP_AFTERCAMERADRAW_FLUIDRENDERER = 5;\nSceneComponentConstants.STEP_AFTERCAMERAPOSTPROCESS_LAYER = 0;\nSceneComponentConstants.STEP_AFTERRENDERTARGETPOSTPROCESS_LAYER = 0;\nSceneComponentConstants.STEP_AFTERRENDER_AUDIO = 0;\nSceneComponentConstants.STEP_GATHERRENDERTARGETS_DEPTHRENDERER = 0;\nSceneComponentConstants.STEP_GATHERRENDERTARGETS_GEOMETRYBUFFERRENDERER = 1;\nSceneComponentConstants.STEP_GATHERRENDERTARGETS_SHADOWGENERATOR = 2;\nSceneComponentConstants.STEP_GATHERRENDERTARGETS_POSTPROCESSRENDERPIPELINEMANAGER = 3;\nSceneComponentConstants.STEP_GATHERACTIVECAMERARENDERTARGETS_DEPTHRENDERER = 0;\nSceneComponentConstants.STEP_GATHERACTIVECAMERARENDERTARGETS_FLUIDRENDERER = 1;\nSceneComponentConstants.STEP_POINTERMOVE_SPRITE = 0;\nSceneComponentConstants.STEP_POINTERDOWN_SPRITE = 0;\nSceneComponentConstants.STEP_POINTERUP_SPRITE = 0;\n/**\n * Representation of a stage in the scene (Basically a list of ordered steps)\n * @internal\n */\nexport class Stage extends Array {\n    /**\n     * Hide ctor from the rest of the world.\n     * @param items The items to add.\n     */\n    constructor(items) {\n        super(...items);\n    }\n    /**\n     * Creates a new Stage.\n     * @returns A new instance of a Stage\n     */\n    static Create() {\n        return Object.create(Stage.prototype);\n    }\n    /**\n     * Registers a step in an ordered way in the targeted stage.\n     * @param index Defines the position to register the step in\n     * @param component Defines the component attached to the step\n     * @param action Defines the action to launch during the step\n     */\n    registerStep(index, component, action) {\n        let i = 0;\n        let maxIndex = Number.MAX_VALUE;\n        for (; i < this.length; i++) {\n            const step = this[i];\n            maxIndex = step.index;\n            if (index < maxIndex) {\n                break;\n            }\n        }\n        this.splice(i, 0, { index, component, action: action.bind(component) });\n    }\n    /**\n     * Clears all the steps from the stage.\n     */\n    clear() {\n        this.length = 0;\n    }\n}\n//# sourceMappingURL=sceneComponent.js.map","\n/******************************************************************************\nCopyright (c) Microsoft Corporation.\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n    return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n    if (typeof b !== \"function\" && b !== null)\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    }\n    return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __metadata(metadataKey, metadataValue) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\n\nexport function __generator(thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n    for (var ar = [], i = 0; i < arguments.length; i++)\n        ar = ar.concat(__read(arguments[i]));\n    return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n    return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n}\n\nexport function __importDefault(mod) {\n    return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n","import { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { ValueAndUnit } from \"./valueAndUnit.js\";\n/**\n * Define a style used by control to automatically setup properties based on a template.\n * Only support font related properties so far\n */\nexport class Style {\n    /**\n     * Creates a new style object\n     * @param host defines the AdvancedDynamicTexture which hosts this style\n     */\n    constructor(host) {\n        this._fontFamily = \"Arial\";\n        this._fontStyle = \"\";\n        this._fontWeight = \"\";\n        /** @internal */\n        this._fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\n        /**\n         * Observable raised when the style values are changed\n         */\n        this.onChangedObservable = new Observable();\n        this._host = host;\n    }\n    /**\n     * Gets or sets the font size\n     */\n    get fontSize() {\n        return this._fontSize.toString(this._host);\n    }\n    set fontSize(value) {\n        if (this._fontSize.toString(this._host) === value) {\n            return;\n        }\n        if (this._fontSize.fromString(value)) {\n            this.onChangedObservable.notifyObservers(this);\n        }\n    }\n    /**\n     * Gets or sets the font family\n     */\n    get fontFamily() {\n        return this._fontFamily;\n    }\n    set fontFamily(value) {\n        if (this._fontFamily === value) {\n            return;\n        }\n        this._fontFamily = value;\n        this.onChangedObservable.notifyObservers(this);\n    }\n    /**\n     * Gets or sets the font style\n     */\n    get fontStyle() {\n        return this._fontStyle;\n    }\n    set fontStyle(value) {\n        if (this._fontStyle === value) {\n            return;\n        }\n        this._fontStyle = value;\n        this.onChangedObservable.notifyObservers(this);\n    }\n    /** Gets or sets font weight */\n    get fontWeight() {\n        return this._fontWeight;\n    }\n    set fontWeight(value) {\n        if (this._fontWeight === value) {\n            return;\n        }\n        this._fontWeight = value;\n        this.onChangedObservable.notifyObservers(this);\n    }\n    /** Dispose all associated resources */\n    dispose() {\n        this.onChangedObservable.clear();\n    }\n}\n//# sourceMappingURL=style.js.map","import { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { Vector2, Vector3, TmpVectors } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { Tools } from \"@babylonjs/core/Misc/tools.js\";\nimport { PointerEventTypes } from \"@babylonjs/core/Events/pointerEvents.js\";\nimport { ClipboardEventTypes, ClipboardInfo } from \"@babylonjs/core/Events/clipboardEvents.js\";\nimport { KeyboardEventTypes } from \"@babylonjs/core/Events/keyboardEvents.js\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture.js\";\nimport { DynamicTexture } from \"@babylonjs/core/Materials/Textures/dynamicTexture.js\";\nimport { Layer } from \"@babylonjs/core/Layers/layer.js\";\nimport { Container } from \"./controls/container.js\";\nimport { Control } from \"./controls/control.js\";\nimport { Style } from \"./style.js\";\nimport { Measure } from \"./measure.js\";\nimport { Constants } from \"@babylonjs/core/Engines/constants.js\";\nimport { Viewport } from \"@babylonjs/core/Maths/math.viewport.js\";\nimport { Color3 } from \"@babylonjs/core/Maths/math.color.js\";\nimport { WebRequest } from \"@babylonjs/core/Misc/webRequest.js\";\nimport { RandomGUID } from \"@babylonjs/core/Misc/guid.js\";\nimport { GetClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { DecodeBase64ToBinary } from \"@babylonjs/core/Misc/stringTools.js\";\n/**\n * Class used to create texture to support 2D GUI elements\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui\n */\nexport class AdvancedDynamicTexture extends DynamicTexture {\n    /** Gets the number of layout calls made the last time the ADT has been rendered */\n    get numLayoutCalls() {\n        return this._numLayoutCalls;\n    }\n    /** Gets the number of render calls made the last time the ADT has been rendered */\n    get numRenderCalls() {\n        return this._numRenderCalls;\n    }\n    /**\n     * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\n     * Useful when you want more antialiasing\n     */\n    get renderScale() {\n        return this._renderScale;\n    }\n    set renderScale(value) {\n        if (value === this._renderScale) {\n            return;\n        }\n        this._renderScale = value;\n        this._onResize();\n    }\n    /** Gets or sets the background color */\n    get background() {\n        return this._background;\n    }\n    set background(value) {\n        if (this._background === value) {\n            return;\n        }\n        this._background = value;\n        this.markAsDirty();\n    }\n    /**\n     * Gets or sets the ideal width used to design controls.\n     * The GUI will then rescale everything accordingly\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\n     */\n    get idealWidth() {\n        return this._idealWidth;\n    }\n    set idealWidth(value) {\n        if (this._idealWidth === value) {\n            return;\n        }\n        this._idealWidth = value;\n        this.markAsDirty();\n        this._rootContainer._markAllAsDirty();\n    }\n    /**\n     * Gets or sets the ideal height used to design controls.\n     * The GUI will then rescale everything accordingly\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\n     */\n    get idealHeight() {\n        return this._idealHeight;\n    }\n    set idealHeight(value) {\n        if (this._idealHeight === value) {\n            return;\n        }\n        this._idealHeight = value;\n        this.markAsDirty();\n        this._rootContainer._markAllAsDirty();\n    }\n    /**\n     * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\n     */\n    get useSmallestIdeal() {\n        return this._useSmallestIdeal;\n    }\n    set useSmallestIdeal(value) {\n        if (this._useSmallestIdeal === value) {\n            return;\n        }\n        this._useSmallestIdeal = value;\n        this.markAsDirty();\n        this._rootContainer._markAllAsDirty();\n    }\n    /**\n     * Gets or sets a boolean indicating if adaptive scaling must be used\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\n     */\n    get renderAtIdealSize() {\n        return this._renderAtIdealSize;\n    }\n    set renderAtIdealSize(value) {\n        if (this._renderAtIdealSize === value) {\n            return;\n        }\n        this._renderAtIdealSize = value;\n        this._onResize();\n    }\n    /**\n     * Gets the ratio used when in \"ideal mode\"\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\n     * */\n    get idealRatio() {\n        let rwidth = 0;\n        let rheight = 0;\n        if (this._idealWidth) {\n            rwidth = this.getSize().width / this._idealWidth;\n        }\n        if (this._idealHeight) {\n            rheight = this.getSize().height / this._idealHeight;\n        }\n        if (this._useSmallestIdeal && this._idealWidth && this._idealHeight) {\n            return window.innerWidth < window.innerHeight ? rwidth : rheight;\n        }\n        if (this._idealWidth) {\n            // horizontal\n            return rwidth;\n        }\n        if (this._idealHeight) {\n            // vertical\n            return rheight;\n        }\n        return 1;\n    }\n    /**\n     * Gets the underlying layer used to render the texture when in fullscreen mode\n     */\n    get layer() {\n        return this._layerToDispose;\n    }\n    /**\n     * Gets the root container control\n     */\n    get rootContainer() {\n        return this._rootContainer;\n    }\n    /**\n     * Returns an array containing the root container.\n     * This is mostly used to let the Inspector introspects the ADT\n     * @returns an array containing the rootContainer\n     */\n    getChildren() {\n        return [this._rootContainer];\n    }\n    /**\n     * Will return all controls that are inside this texture\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\n     * @returns all child controls\n     */\n    getDescendants(directDescendantsOnly, predicate) {\n        return this._rootContainer.getDescendants(directDescendantsOnly, predicate);\n    }\n    /**\n     * Will return all controls with the given type name\n     * @param typeName defines the type name to search for\n     * @returns an array of all controls found\n     */\n    getControlsByType(typeName) {\n        return this._rootContainer.getDescendants(false, (control) => control.typeName === typeName);\n    }\n    /**\n     * Will return the first control with the given name\n     * @param name defines the name to search for\n     * @returns the first control found or null\n     */\n    getControlByName(name) {\n        return this._getControlByKey(\"name\", name);\n    }\n    _getControlByKey(key, value) {\n        return this._rootContainer.getDescendants().find((control) => control[key] === value) || null;\n    }\n    /**\n     * Gets or sets the current focused control\n     */\n    get focusedControl() {\n        return this._focusedControl;\n    }\n    set focusedControl(control) {\n        if (this._focusedControl == control) {\n            return;\n        }\n        if (this._focusedControl) {\n            this._focusedControl.onBlur();\n        }\n        if (control) {\n            control.onFocus();\n        }\n        this._focusedControl = control;\n    }\n    /**\n     * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\n     */\n    get isForeground() {\n        if (!this.layer) {\n            return true;\n        }\n        return !this.layer.isBackground;\n    }\n    set isForeground(value) {\n        if (!this.layer) {\n            return;\n        }\n        if (this.layer.isBackground === !value) {\n            return;\n        }\n        this.layer.isBackground = !value;\n    }\n    /**\n     * Gets or set information about clipboardData\n     */\n    get clipboardData() {\n        return this._clipboardData;\n    }\n    set clipboardData(value) {\n        this._clipboardData = value;\n    }\n    /**\n     * Creates a new AdvancedDynamicTexture\n     * @param name defines the name of the texture\n     * @param width defines the width of the texture\n     * @param height defines the height of the texture\n     * @param scene defines the hosting scene\n     * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\n     * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading (true by default)\n     */\n    constructor(name, width = 0, height = 0, scene, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE, invertY = true) {\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Constants.TEXTUREFORMAT_RGBA, invertY);\n        /** Observable that fires when the GUI is ready */\n        this.onGuiReadyObservable = new Observable();\n        this._isDirty = false;\n        /** @internal */\n        this._rootContainer = new Container(\"root\");\n        /** @internal */\n        this._lastControlOver = {};\n        /** @internal */\n        this._lastControlDown = {};\n        /** @internal */\n        this._capturingControl = {};\n        /** @internal */\n        this._linkedControls = new Array();\n        this._isFullscreen = false;\n        this._fullscreenViewport = new Viewport(0, 0, 1, 1);\n        this._idealWidth = 0;\n        this._idealHeight = 0;\n        this._useSmallestIdeal = false;\n        this._renderAtIdealSize = false;\n        this._blockNextFocusCheck = false;\n        this._renderScale = 1;\n        this._cursorChanged = false;\n        this._defaultMousePointerId = 0;\n        this._rootChildrenHaveChanged = false;\n        /** @internal */\n        this._capturedPointerIds = new Set();\n        /** @internal */\n        this._numLayoutCalls = 0;\n        /** @internal */\n        this._numRenderCalls = 0;\n        /**\n         * Define type to string to ensure compatibility across browsers\n         * Safari doesn't support DataTransfer constructor\n         */\n        this._clipboardData = \"\";\n        /**\n         * Observable event triggered each time an clipboard event is received from the rendering canvas\n         */\n        this.onClipboardObservable = new Observable();\n        /**\n         * Observable event triggered each time a pointer down is intercepted by a control\n         */\n        this.onControlPickedObservable = new Observable();\n        /**\n         * Observable event triggered before layout is evaluated\n         */\n        this.onBeginLayoutObservable = new Observable();\n        /**\n         * Observable event triggered after the layout was evaluated\n         */\n        this.onEndLayoutObservable = new Observable();\n        /**\n         * Observable event triggered before the texture is rendered\n         */\n        this.onBeginRenderObservable = new Observable();\n        /**\n         * Observable event triggered after the texture was rendered\n         */\n        this.onEndRenderObservable = new Observable();\n        /**\n         * Gets or sets a boolean defining if alpha is stored as premultiplied\n         */\n        this.premulAlpha = false;\n        /**\n         * Gets or sets a boolean indicating that the canvas must be reverted on Y when updating the texture\n         */\n        this.applyYInversionOnUpdate = true;\n        /**\n         * If set to true, every scene render will trigger a pointer event for the GUI\n         * if it is linked to a mesh or has controls linked to a mesh. This will allow\n         * you to catch the pointer moving around the GUI due to camera or mesh movements,\n         * but it has a performance cost.\n         */\n        this.checkPointerEveryFrame = false;\n        this._useInvalidateRectOptimization = true;\n        // Invalidated rectangle which is the combination of all invalidated controls after they have been rotated into absolute position\n        this._invalidatedRectangle = null;\n        this._clearMeasure = new Measure(0, 0, 0, 0);\n        /**\n         * @internal\n         */\n        this._onClipboardCopy = (rawEvt) => {\n            const evt = rawEvt;\n            const ev = new ClipboardInfo(ClipboardEventTypes.COPY, evt);\n            this.onClipboardObservable.notifyObservers(ev);\n            evt.preventDefault();\n        };\n        /**\n         * @internal\n         */\n        this._onClipboardCut = (rawEvt) => {\n            const evt = rawEvt;\n            const ev = new ClipboardInfo(ClipboardEventTypes.CUT, evt);\n            this.onClipboardObservable.notifyObservers(ev);\n            evt.preventDefault();\n        };\n        /**\n         * @internal\n         */\n        this._onClipboardPaste = (rawEvt) => {\n            const evt = rawEvt;\n            const ev = new ClipboardInfo(ClipboardEventTypes.PASTE, evt);\n            this.onClipboardObservable.notifyObservers(ev);\n            evt.preventDefault();\n        };\n        /**\n         * Recreate the content of the ADT from a JSON object\n         * @param serializedObject define the JSON serialized object to restore from\n         * @param scaleToSize defines whether to scale to texture to the saved size\n         * @deprecated Please use parseSerializedObject instead\n         */\n        this.parseContent = this.parseSerializedObject;\n        scene = this.getScene();\n        if (!scene || !this._texture) {\n            return;\n        }\n        this.applyYInversionOnUpdate = invertY;\n        this._rootElement = scene.getEngine().getInputElement();\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera) => this._checkUpdate(camera));\n        /** Whenever a control is added or removed to the root, we have to recheck the camera projection as it can have changed  */\n        this._controlAddedObserver = this._rootContainer.onControlAddedObservable.add((control) => {\n            if (control) {\n                this._rootChildrenHaveChanged = true;\n            }\n        });\n        this._controlRemovedObserver = this._rootContainer.onControlRemovedObservable.add((control) => {\n            if (control) {\n                this._rootChildrenHaveChanged = true;\n            }\n        });\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add((info) => {\n            if (!this._focusedControl) {\n                return;\n            }\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\n                this._focusedControl.processKeyboard(info.event);\n            }\n            info.skipOnPointerObservable = true;\n        });\n        this._rootContainer._link(this);\n        this.hasAlpha = true;\n        if (!width || !height) {\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\n            this._onResize();\n        }\n        this._texture.isReady = true;\n    }\n    /**\n     * Get the current class name of the texture useful for serialization or dynamic coding.\n     * @returns \"AdvancedDynamicTexture\"\n     */\n    getClassName() {\n        return \"AdvancedDynamicTexture\";\n    }\n    /**\n     * Function used to execute a function on all controls\n     * @param func defines the function to execute\n     * @param container defines the container where controls belong. If null the root container will be used\n     */\n    executeOnAllControls(func, container) {\n        if (!container) {\n            container = this._rootContainer;\n        }\n        func(container);\n        for (const child of container.children) {\n            if (child.children) {\n                this.executeOnAllControls(func, child);\n                continue;\n            }\n            func(child);\n        }\n    }\n    /**\n     * Gets or sets a boolean indicating if the InvalidateRect optimization should be turned on\n     */\n    get useInvalidateRectOptimization() {\n        return this._useInvalidateRectOptimization;\n    }\n    set useInvalidateRectOptimization(value) {\n        this._useInvalidateRectOptimization = value;\n    }\n    /**\n     * Invalidates a rectangle area on the gui texture\n     * @param invalidMinX left most position of the rectangle to invalidate in the texture\n     * @param invalidMinY top most position of the rectangle to invalidate in the texture\n     * @param invalidMaxX right most position of the rectangle to invalidate in the texture\n     * @param invalidMaxY bottom most position of the rectangle to invalidate in the texture\n     */\n    invalidateRect(invalidMinX, invalidMinY, invalidMaxX, invalidMaxY) {\n        if (!this._useInvalidateRectOptimization) {\n            return;\n        }\n        if (!this._invalidatedRectangle) {\n            this._invalidatedRectangle = new Measure(invalidMinX, invalidMinY, invalidMaxX - invalidMinX + 1, invalidMaxY - invalidMinY + 1);\n        }\n        else {\n            // Compute intersection\n            const maxX = Math.ceil(Math.max(this._invalidatedRectangle.left + this._invalidatedRectangle.width - 1, invalidMaxX));\n            const maxY = Math.ceil(Math.max(this._invalidatedRectangle.top + this._invalidatedRectangle.height - 1, invalidMaxY));\n            this._invalidatedRectangle.left = Math.floor(Math.min(this._invalidatedRectangle.left, invalidMinX));\n            this._invalidatedRectangle.top = Math.floor(Math.min(this._invalidatedRectangle.top, invalidMinY));\n            this._invalidatedRectangle.width = maxX - this._invalidatedRectangle.left + 1;\n            this._invalidatedRectangle.height = maxY - this._invalidatedRectangle.top + 1;\n        }\n    }\n    /**\n     * Marks the texture as dirty forcing a complete update\n     */\n    markAsDirty() {\n        this._isDirty = true;\n    }\n    /**\n     * Helper function used to create a new style\n     * @returns a new style\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#styles\n     */\n    createStyle() {\n        return new Style(this);\n    }\n    /**\n     * Adds a new control to the root container\n     * @param control defines the control to add\n     * @returns the current texture\n     */\n    addControl(control) {\n        this._rootContainer.addControl(control);\n        return this;\n    }\n    /**\n     * Removes a control from the root container\n     * @param control defines the control to remove\n     * @returns the current texture\n     */\n    removeControl(control) {\n        this._rootContainer.removeControl(control);\n        return this;\n    }\n    /**\n     * Moves overlapped controls towards a position where it is not overlapping anymore.\n     * Please note that this method alters linkOffsetXInPixels and linkOffsetYInPixels.\n     * @param overlapGroup the overlap group which will be processed or undefined to process all overlap groups\n     * @param deltaStep the step size (speed) to reach the target non overlapping position (default 0.1)\n     * @param repelFactor how much is the control repelled by other controls\n     */\n    moveToNonOverlappedPosition(overlapGroup, deltaStep = 1, repelFactor = 1) {\n        let controlsForGroup;\n        if (Array.isArray(overlapGroup)) {\n            controlsForGroup = overlapGroup;\n        }\n        else {\n            const descendants = this.getDescendants(true);\n            // get only the controls with an overlapGroup property set\n            // if the overlapGroup parameter is set, filter the controls and get only the controls belonging to that overlapGroup\n            controlsForGroup = overlapGroup === undefined ? descendants.filter((c) => c.overlapGroup !== undefined) : descendants.filter((c) => c.overlapGroup === overlapGroup);\n        }\n        controlsForGroup.forEach((control1) => {\n            var _a;\n            let velocity = Vector2.Zero();\n            const center = new Vector2(control1.centerX, control1.centerY);\n            controlsForGroup.forEach((control2) => {\n                if (control1 !== control2 && AdvancedDynamicTexture._Overlaps(control1, control2)) {\n                    // if the two controls overlaps get a direction vector from one control's center to another control's center\n                    const diff = center.subtract(new Vector2(control2.centerX, control2.centerY));\n                    const diffLength = diff.length();\n                    if (diffLength > 0) {\n                        // calculate the velocity\n                        velocity = velocity.add(diff.normalize().scale(repelFactor / diffLength));\n                    }\n                }\n            });\n            if (velocity.length() > 0) {\n                // move the control along the direction vector away from the overlapping control\n                velocity = velocity.normalize().scale(deltaStep * ((_a = control1.overlapDeltaMultiplier) !== null && _a !== void 0 ? _a : 1));\n                control1.linkOffsetXInPixels += velocity.x;\n                control1.linkOffsetYInPixels += velocity.y;\n            }\n        });\n    }\n    /**\n     * Release all resources\n     */\n    dispose() {\n        const scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        this._rootElement = null;\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\n        if (this._resizeObserver) {\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\n        }\n        if (this._prePointerObserver) {\n            scene.onPrePointerObservable.remove(this._prePointerObserver);\n        }\n        if (this._sceneRenderObserver) {\n            scene.onBeforeRenderObservable.remove(this._sceneRenderObserver);\n        }\n        if (this._pointerObserver) {\n            scene.onPointerObservable.remove(this._pointerObserver);\n        }\n        if (this._preKeyboardObserver) {\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\n        }\n        if (this._canvasPointerOutObserver) {\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\n        }\n        if (this._canvasBlurObserver) {\n            scene.getEngine().onCanvasBlurObservable.remove(this._canvasBlurObserver);\n        }\n        if (this._controlAddedObserver) {\n            this._rootContainer.onControlAddedObservable.remove(this._controlAddedObserver);\n        }\n        if (this._controlRemovedObserver) {\n            this._rootContainer.onControlRemovedObservable.remove(this._controlRemovedObserver);\n        }\n        if (this._layerToDispose) {\n            this._layerToDispose.texture = null;\n            this._layerToDispose.dispose();\n            this._layerToDispose = null;\n        }\n        this._rootContainer.dispose();\n        this.onClipboardObservable.clear();\n        this.onControlPickedObservable.clear();\n        this.onBeginRenderObservable.clear();\n        this.onEndRenderObservable.clear();\n        this.onBeginLayoutObservable.clear();\n        this.onEndLayoutObservable.clear();\n        this.onGuiReadyObservable.clear();\n        super.dispose();\n    }\n    _onResize() {\n        const scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        // Check size\n        const engine = scene.getEngine();\n        const textureSize = this.getSize();\n        let renderWidth = engine.getRenderWidth() * this._renderScale;\n        let renderHeight = engine.getRenderHeight() * this._renderScale;\n        if (this._renderAtIdealSize) {\n            if (this._idealWidth) {\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\n                renderWidth = this._idealWidth;\n            }\n            else if (this._idealHeight) {\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\n                renderHeight = this._idealHeight;\n            }\n        }\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\n            this.scaleTo(renderWidth, renderHeight);\n            this.markAsDirty();\n            if (this._idealWidth || this._idealHeight) {\n                this._rootContainer._markAllAsDirty();\n            }\n        }\n        this.invalidateRect(0, 0, textureSize.width - 1, textureSize.height - 1);\n    }\n    /** @internal */\n    _getGlobalViewport() {\n        const size = this.getSize();\n        const globalViewPort = this._fullscreenViewport.toGlobal(size.width, size.height);\n        const targetX = Math.round(globalViewPort.width * (1 / this.rootContainer.scaleX));\n        const targetY = Math.round(globalViewPort.height * (1 / this.rootContainer.scaleY));\n        globalViewPort.x += (globalViewPort.width - targetX) / 2;\n        globalViewPort.y += (globalViewPort.height - targetY) / 2;\n        globalViewPort.width = targetX;\n        globalViewPort.height = targetY;\n        return globalViewPort;\n    }\n    /**\n     * Get screen coordinates for a vector3\n     * @param position defines the position to project\n     * @param worldMatrix defines the world matrix to use\n     * @returns the projected position\n     */\n    getProjectedPosition(position, worldMatrix) {\n        const result = this.getProjectedPositionWithZ(position, worldMatrix);\n        return new Vector2(result.x, result.y);\n    }\n    /**\n     * Get screen coordinates for a vector3\n     * @param position defines the position to project\n     * @param worldMatrix defines the world matrix to use\n     * @returns the projected position with Z\n     */\n    getProjectedPositionWithZ(position, worldMatrix) {\n        const scene = this.getScene();\n        if (!scene) {\n            return Vector3.Zero();\n        }\n        const globalViewport = this._getGlobalViewport();\n        const projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\n        return new Vector3(projectedPosition.x, projectedPosition.y, projectedPosition.z);\n    }\n    _checkUpdate(camera, skipUpdate) {\n        if (this._layerToDispose) {\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\n                return;\n            }\n        }\n        if (this._isFullscreen && this._linkedControls.length) {\n            const scene = this.getScene();\n            if (!scene) {\n                return;\n            }\n            const globalViewport = this._getGlobalViewport();\n            for (const control of this._linkedControls) {\n                if (!control.isVisible) {\n                    continue;\n                }\n                const mesh = control._linkedMesh;\n                if (!mesh || mesh.isDisposed()) {\n                    Tools.SetImmediate(() => {\n                        control.linkWithMesh(null);\n                    });\n                    continue;\n                }\n                const position = mesh.getBoundingInfo ? mesh.getBoundingInfo().boundingSphere.center : Vector3.ZeroReadOnly;\n                const projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\n                    control.notRenderable = true;\n                    continue;\n                }\n                control.notRenderable = false;\n                if (this.useInvalidateRectOptimization) {\n                    control.invalidateRect();\n                }\n                control._moveToProjectedPosition(projectedPosition);\n            }\n        }\n        if (!this._isDirty && !this._rootContainer.isDirty) {\n            return;\n        }\n        this._isDirty = false;\n        this._render(skipUpdate);\n        if (!skipUpdate) {\n            this.update(this.applyYInversionOnUpdate, this.premulAlpha, AdvancedDynamicTexture.AllowGPUOptimizations);\n        }\n    }\n    _render(skipRender) {\n        var _a;\n        const textureSize = this.getSize();\n        const renderWidth = textureSize.width;\n        const renderHeight = textureSize.height;\n        const context = this.getContext();\n        context.font = \"18px Arial\";\n        context.strokeStyle = \"white\";\n        if (this.onGuiReadyObservable.hasObservers()) {\n            this._checkGuiIsReady();\n        }\n        /** We have to recheck the camera projection in the case the root control's children have changed  */\n        if (this._rootChildrenHaveChanged) {\n            const camera = (_a = this.getScene()) === null || _a === void 0 ? void 0 : _a.activeCamera;\n            if (camera) {\n                this._rootChildrenHaveChanged = false;\n                this._checkUpdate(camera, true);\n            }\n        }\n        // Layout\n        this.onBeginLayoutObservable.notifyObservers(this);\n        const measure = new Measure(0, 0, renderWidth, renderHeight);\n        this._numLayoutCalls = 0;\n        this._rootContainer._layout(measure, context);\n        this.onEndLayoutObservable.notifyObservers(this);\n        this._isDirty = false; // Restoring the dirty state that could have been set by controls during layout processing\n        if (skipRender) {\n            return;\n        }\n        // Clear\n        if (this._invalidatedRectangle) {\n            this._clearMeasure.copyFrom(this._invalidatedRectangle);\n        }\n        else {\n            this._clearMeasure.copyFromFloats(0, 0, renderWidth, renderHeight);\n        }\n        context.clearRect(this._clearMeasure.left, this._clearMeasure.top, this._clearMeasure.width, this._clearMeasure.height);\n        if (this._background) {\n            context.save();\n            context.fillStyle = this._background;\n            context.fillRect(this._clearMeasure.left, this._clearMeasure.top, this._clearMeasure.width, this._clearMeasure.height);\n            context.restore();\n        }\n        // Render\n        this.onBeginRenderObservable.notifyObservers(this);\n        this._numRenderCalls = 0;\n        this._rootContainer._render(context, this._invalidatedRectangle);\n        this.onEndRenderObservable.notifyObservers(this);\n        this._invalidatedRectangle = null;\n    }\n    /**\n     * @internal\n     */\n    _changeCursor(cursor) {\n        if (this._rootElement) {\n            this._rootElement.style.cursor = cursor;\n            this._cursorChanged = true;\n        }\n    }\n    /**\n     * @internal\n     */\n    _registerLastControlDown(control, pointerId) {\n        this._lastControlDown[pointerId] = control;\n        this.onControlPickedObservable.notifyObservers(control);\n    }\n    _doPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY) {\n        const scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        const engine = scene.getEngine();\n        const textureSize = this.getSize();\n        if (this._isFullscreen) {\n            const camera = scene.cameraToUseForPointers || scene.activeCamera;\n            if (!camera) {\n                return;\n            }\n            const viewport = camera.viewport;\n            x = x * (textureSize.width / (engine.getRenderWidth() * viewport.width));\n            y = y * (textureSize.height / (engine.getRenderHeight() * viewport.height));\n        }\n        if (this._capturingControl[pointerId]) {\n            if (this._capturingControl[pointerId].isPointerBlocker) {\n                this._shouldBlockPointer = true;\n            }\n            this._capturingControl[pointerId]._processObservables(type, x, y, pi, pointerId, buttonIndex);\n            return;\n        }\n        this._cursorChanged = false;\n        if (!this._rootContainer._processPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY)) {\n            if (!scene.doNotHandleCursors) {\n                this._changeCursor(\"\");\n            }\n            if (type === PointerEventTypes.POINTERMOVE) {\n                if (this._lastControlOver[pointerId]) {\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId], pi);\n                    delete this._lastControlOver[pointerId];\n                }\n            }\n        }\n        if (!this._cursorChanged && !scene.doNotHandleCursors) {\n            this._changeCursor(\"\");\n        }\n        this._manageFocus();\n    }\n    /**\n     * @internal\n     */\n    _cleanControlAfterRemovalFromList(list, control) {\n        for (const pointerId in list) {\n            if (!Object.prototype.hasOwnProperty.call(list, pointerId)) {\n                continue;\n            }\n            const lastControlOver = list[pointerId];\n            if (lastControlOver === control) {\n                delete list[pointerId];\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    _cleanControlAfterRemoval(control) {\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\n    }\n    /**\n     * This function will run a pointer event on this ADT and will trigger any pointer events on any controls\n     * This will work on a fullscreen ADT only. For mesh based ADT, simulate pointer events using the scene directly.\n     * @param x pointer X on the canvas for the picking\n     * @param y pointer Y on the canvas for the picking\n     * @param pi optional pointer information\n     */\n    pick(x, y, pi = null) {\n        if (this._isFullscreen && this._scene) {\n            this._translateToPicking(this._scene, new Viewport(0, 0, 0, 0), pi, x, y);\n        }\n    }\n    _translateToPicking(scene, tempViewport, pi, x = scene.pointerX, y = scene.pointerY) {\n        const camera = scene.cameraToUseForPointers || scene.activeCamera;\n        const engine = scene.getEngine();\n        const originalCameraToUseForPointers = scene.cameraToUseForPointers;\n        if (!camera) {\n            tempViewport.x = 0;\n            tempViewport.y = 0;\n            tempViewport.width = engine.getRenderWidth();\n            tempViewport.height = engine.getRenderHeight();\n        }\n        else {\n            if (camera.rigCameras.length) {\n                // rig camera - we need to find the camera to use for this event\n                const rigViewport = new Viewport(0, 0, 1, 1);\n                camera.rigCameras.forEach((rigCamera) => {\n                    // generate the viewport of this camera\n                    rigCamera.viewport.toGlobalToRef(engine.getRenderWidth(), engine.getRenderHeight(), rigViewport);\n                    const transformedX = x / engine.getHardwareScalingLevel() - rigViewport.x;\n                    const transformedY = y / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - rigViewport.y - rigViewport.height);\n                    // check if the pointer is in the camera's viewport\n                    if (transformedX < 0 || transformedY < 0 || x > rigViewport.width || y > rigViewport.height) {\n                        // out of viewport - don't use this camera\n                        return;\n                    }\n                    // set the camera to use for pointers until this pointer loop is over\n                    scene.cameraToUseForPointers = rigCamera;\n                    // set the viewport\n                    tempViewport.x = rigViewport.x;\n                    tempViewport.y = rigViewport.y;\n                    tempViewport.width = rigViewport.width;\n                    tempViewport.height = rigViewport.height;\n                });\n            }\n            else {\n                camera.viewport.toGlobalToRef(engine.getRenderWidth(), engine.getRenderHeight(), tempViewport);\n            }\n        }\n        const transformedX = x / engine.getHardwareScalingLevel() - tempViewport.x;\n        const transformedY = y / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - tempViewport.y - tempViewport.height);\n        this._shouldBlockPointer = false;\n        // Do picking modifies _shouldBlockPointer\n        if (pi) {\n            const pointerId = pi.event.pointerId || this._defaultMousePointerId;\n            this._doPicking(transformedX, transformedY, pi, pi.type, pointerId, pi.event.button, pi.event.deltaX, pi.event.deltaY);\n            // Avoid overwriting a true skipOnPointerObservable to false\n            if (this._shouldBlockPointer || this._capturingControl[pointerId]) {\n                pi.skipOnPointerObservable = true;\n            }\n        }\n        else {\n            this._doPicking(transformedX, transformedY, null, PointerEventTypes.POINTERMOVE, this._defaultMousePointerId, 0);\n        }\n        // if overridden by a rig camera - reset back to the original value\n        scene.cameraToUseForPointers = originalCameraToUseForPointers;\n    }\n    /** Attach to all scene events required to support pointer events */\n    attach() {\n        const scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        const tempViewport = new Viewport(0, 0, 0, 0);\n        this._prePointerObserver = scene.onPrePointerObservable.add((pi) => {\n            if (scene.isPointerCaptured(pi.event.pointerId) &&\n                pi.type === PointerEventTypes.POINTERUP &&\n                !this._capturedPointerIds.has(pi.event.pointerId)) {\n                return;\n            }\n            if (pi.type !== PointerEventTypes.POINTERMOVE &&\n                pi.type !== PointerEventTypes.POINTERUP &&\n                pi.type !== PointerEventTypes.POINTERDOWN &&\n                pi.type !== PointerEventTypes.POINTERWHEEL) {\n                return;\n            }\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\n                // Avoid pointerMove events firing while the pointer is captured by the scene\n                if (scene.isPointerCaptured(pi.event.pointerId)) {\n                    return;\n                }\n                if (pi.event.pointerId) {\n                    this._defaultMousePointerId = pi.event.pointerId; // This is required to make sure we have the correct pointer ID for wheel\n                }\n            }\n            this._translateToPicking(scene, tempViewport, pi);\n        });\n        this._attachPickingToSceneRender(scene, () => this._translateToPicking(scene, tempViewport, null), false);\n        this._attachToOnPointerOut(scene);\n        this._attachToOnBlur(scene);\n    }\n    /**\n     * Register the clipboard Events onto the canvas\n     */\n    registerClipboardEvents() {\n        self.addEventListener(\"copy\", this._onClipboardCopy, false);\n        self.addEventListener(\"cut\", this._onClipboardCut, false);\n        self.addEventListener(\"paste\", this._onClipboardPaste, false);\n    }\n    /**\n     * Unregister the clipboard Events from the canvas\n     */\n    unRegisterClipboardEvents() {\n        self.removeEventListener(\"copy\", this._onClipboardCopy);\n        self.removeEventListener(\"cut\", this._onClipboardCut);\n        self.removeEventListener(\"paste\", this._onClipboardPaste);\n    }\n    /**\n     * Transform uvs from mesh space to texture space, taking the texture into account\n     * @param uv the uvs in mesh space\n     * @returns the uvs in texture space\n     */\n    _transformUvs(uv) {\n        const textureMatrix = this.getTextureMatrix();\n        let result;\n        if (textureMatrix.isIdentityAs3x2()) {\n            result = uv;\n        }\n        else {\n            const homogeneousTextureMatrix = TmpVectors.Matrix[0];\n            textureMatrix.getRowToRef(0, TmpVectors.Vector4[0]);\n            textureMatrix.getRowToRef(1, TmpVectors.Vector4[1]);\n            textureMatrix.getRowToRef(2, TmpVectors.Vector4[2]);\n            const r0 = TmpVectors.Vector4[0];\n            const r1 = TmpVectors.Vector4[1];\n            const r2 = TmpVectors.Vector4[2];\n            homogeneousTextureMatrix.setRowFromFloats(0, r0.x, r0.y, 0, 0);\n            homogeneousTextureMatrix.setRowFromFloats(1, r1.x, r1.y, 0, 0);\n            homogeneousTextureMatrix.setRowFromFloats(2, 0, 0, 1, 0);\n            homogeneousTextureMatrix.setRowFromFloats(3, r2.x, r2.y, 0, 1);\n            result = TmpVectors.Vector2[0];\n            Vector2.TransformToRef(uv, homogeneousTextureMatrix, result);\n        }\n        // In wrap and mirror mode, the texture coordinate for coordinates more than 1 is the fractional part of the coordinate\n        if (this.wrapU === Texture.WRAP_ADDRESSMODE || this.wrapU === Texture.MIRROR_ADDRESSMODE) {\n            if (result.x > 1) {\n                let fX = result.x - Math.trunc(result.x);\n                // In mirror mode, the sign of the texture coordinate depends on the integer part -\n                // odd integers means it is mirrored from the original coordinate\n                if (this.wrapU === Texture.MIRROR_ADDRESSMODE && Math.trunc(result.x) % 2 === 1) {\n                    fX = 1 - fX;\n                }\n                result.x = fX;\n            }\n        }\n        if (this.wrapV === Texture.WRAP_ADDRESSMODE || this.wrapV === Texture.MIRROR_ADDRESSMODE) {\n            if (result.y > 1) {\n                let fY = result.y - Math.trunc(result.y);\n                if (this.wrapV === Texture.MIRROR_ADDRESSMODE && Math.trunc(result.x) % 2 === 1) {\n                    fY = 1 - fY;\n                }\n                result.y = fY;\n            }\n        }\n        return result;\n    }\n    /**\n     * Connect the texture to a hosting mesh to enable interactions\n     * @param mesh defines the mesh to attach to\n     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\n     */\n    attachToMesh(mesh, supportPointerMove = true) {\n        const scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        if (this._pointerObserver) {\n            scene.onPointerObservable.remove(this._pointerObserver);\n        }\n        this._pointerObserver = scene.onPointerObservable.add((pi) => {\n            if (pi.type !== PointerEventTypes.POINTERMOVE &&\n                pi.type !== PointerEventTypes.POINTERUP &&\n                pi.type !== PointerEventTypes.POINTERDOWN &&\n                pi.type !== PointerEventTypes.POINTERWHEEL) {\n                return;\n            }\n            if (pi.type === PointerEventTypes.POINTERMOVE && pi.event.pointerId) {\n                this._defaultMousePointerId = pi.event.pointerId; // This is required to make sure we have the correct pointer ID for wheel\n            }\n            const pointerId = pi.event.pointerId || this._defaultMousePointerId;\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\n                let uv = pi.pickInfo.getTextureCoordinates();\n                if (uv) {\n                    uv = this._transformUvs(uv);\n                    const size = this.getSize();\n                    this._doPicking(uv.x * size.width, (this.applyYInversionOnUpdate ? 1.0 - uv.y : uv.y) * size.height, pi, pi.type, pointerId, pi.event.button, pi.event.deltaX, pi.event.deltaY);\n                }\n            }\n            else if (pi.type === PointerEventTypes.POINTERUP) {\n                if (this._lastControlDown[pointerId]) {\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\n                }\n                delete this._lastControlDown[pointerId];\n                if (this.focusedControl) {\n                    const friendlyControls = this.focusedControl.keepsFocusWith();\n                    let canMoveFocus = true;\n                    if (friendlyControls) {\n                        for (const control of friendlyControls) {\n                            // Same host, no need to keep the focus\n                            if (this === control._host) {\n                                continue;\n                            }\n                            // Different hosts\n                            const otherHost = control._host;\n                            if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].isAscendant(control)) {\n                                canMoveFocus = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (canMoveFocus) {\n                        this.focusedControl = null;\n                    }\n                }\n            }\n            else if (pi.type === PointerEventTypes.POINTERMOVE) {\n                if (this._lastControlOver[pointerId]) {\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId], pi, true);\n                }\n                delete this._lastControlOver[pointerId];\n            }\n        });\n        mesh.enablePointerMoveEvents = supportPointerMove;\n        this._attachPickingToSceneRender(scene, () => {\n            const pointerId = this._defaultMousePointerId;\n            const pick = scene === null || scene === void 0 ? void 0 : scene.pick(scene.pointerX, scene.pointerY);\n            if (pick && pick.hit && pick.pickedMesh === mesh) {\n                let uv = pick.getTextureCoordinates();\n                if (uv) {\n                    uv = this._transformUvs(uv);\n                    const size = this.getSize();\n                    this._doPicking(uv.x * size.width, (this.applyYInversionOnUpdate ? 1.0 - uv.y : uv.y) * size.height, null, PointerEventTypes.POINTERMOVE, pointerId, 0);\n                }\n            }\n            else {\n                if (this._lastControlOver[pointerId]) {\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId], null, true);\n                }\n                delete this._lastControlOver[pointerId];\n            }\n        }, true);\n        this._attachToOnPointerOut(scene);\n        this._attachToOnBlur(scene);\n    }\n    /**\n     * Move the focus to a specific control\n     * @param control defines the control which will receive the focus\n     */\n    moveFocusToControl(control) {\n        this.focusedControl = control;\n        this._lastPickedControl = control;\n        this._blockNextFocusCheck = true;\n    }\n    _manageFocus() {\n        if (this._blockNextFocusCheck) {\n            this._blockNextFocusCheck = false;\n            this._lastPickedControl = this._focusedControl;\n            return;\n        }\n        // Focus management\n        if (this._focusedControl) {\n            if (this._focusedControl !== this._lastPickedControl) {\n                if (this._lastPickedControl.isFocusInvisible) {\n                    return;\n                }\n                this.focusedControl = null;\n            }\n        }\n    }\n    _attachPickingToSceneRender(scene, pickFunction, forcePicking) {\n        this._sceneRenderObserver = scene.onBeforeRenderObservable.add(() => {\n            if (!this.checkPointerEveryFrame) {\n                return;\n            }\n            if (this._linkedControls.length > 0 || forcePicking) {\n                pickFunction();\n            }\n        });\n    }\n    _attachToOnPointerOut(scene) {\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\n            if (this._lastControlOver[pointerEvent.pointerId]) {\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId], null);\n            }\n            delete this._lastControlOver[pointerEvent.pointerId];\n            if (this._lastControlDown[pointerEvent.pointerId] && this._lastControlDown[pointerEvent.pointerId] !== this._capturingControl[pointerEvent.pointerId]) {\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp(pointerEvent.pointerId);\n                delete this._lastControlDown[pointerEvent.pointerId];\n            }\n        });\n    }\n    _attachToOnBlur(scene) {\n        this._canvasBlurObserver = scene.getEngine().onCanvasBlurObservable.add(() => {\n            Object.entries(this._lastControlDown).forEach(([, value]) => {\n                value._onCanvasBlur();\n            });\n            this.focusedControl = null;\n            this._lastControlDown = {};\n        });\n    }\n    /**\n     * Serializes the entire GUI system\n     * @returns an object with the JSON serialized data\n     */\n    serializeContent() {\n        const size = this.getSize();\n        const serializationObject = {\n            root: {},\n            width: size.width,\n            height: size.height,\n        };\n        this._rootContainer.serialize(serializationObject.root);\n        return serializationObject;\n    }\n    /**\n     * Recreate the content of the ADT from a JSON object\n     * @param serializedObject define the JSON serialized object to restore from\n     * @param scaleToSize defines whether to scale to texture to the saved size\n     */\n    parseSerializedObject(serializedObject, scaleToSize) {\n        this._rootContainer = Control.Parse(serializedObject.root, this);\n        if (scaleToSize) {\n            const width = serializedObject.width;\n            const height = serializedObject.height;\n            if (typeof width === \"number\" && typeof height === \"number\" && width >= 0 && height >= 0) {\n                this.scaleTo(width, height);\n            }\n            else {\n                // scales the GUI to a default size if none was available in the serialized content\n                this.scaleTo(1920, 1080);\n            }\n        }\n    }\n    /**\n     * Clones the ADT\n     * @param newName defines the name of the new ADT\n     * @returns the clone of the ADT\n     */\n    clone(newName) {\n        const scene = this.getScene();\n        if (!scene) {\n            return this;\n        }\n        const data = this.serializeContent();\n        const clone = AdvancedDynamicTexture.CreateFullscreenUI(newName || \"Clone of \" + this.name, this.isForeground, scene, this.samplingMode);\n        clone.parseSerializedObject(data);\n        return clone;\n    }\n    /**\n     * Recreate the content of the ADT from a snippet saved by the GUI editor\n     * @param snippetId defines the snippet to load\n     * @param scaleToSize defines whether to scale to texture to the saved size\n     * @param appendToAdt if provided the snippet will be appended to the adt. Otherwise a fullscreen ADT will be created.\n     * @returns a promise that will resolve on success\n     */\n    static async ParseFromSnippetAsync(snippetId, scaleToSize, appendToAdt) {\n        const adt = appendToAdt !== null && appendToAdt !== void 0 ? appendToAdt : AdvancedDynamicTexture.CreateFullscreenUI(\"ADT from snippet\");\n        if (snippetId === \"_BLANK\") {\n            return adt;\n        }\n        const serialized = await AdvancedDynamicTexture._LoadURLContentAsync(AdvancedDynamicTexture.SnippetUrl + \"/\" + snippetId.replace(/#/g, \"/\"), true);\n        adt.parseSerializedObject(serialized, scaleToSize);\n        return adt;\n    }\n    /**\n     * Recreate the content of the ADT from a snippet saved by the GUI editor\n     * @param snippetId defines the snippet to load\n     * @param scaleToSize defines whether to scale to texture to the saved size\n     * @returns a promise that will resolve on success\n     */\n    parseFromSnippetAsync(snippetId, scaleToSize) {\n        return AdvancedDynamicTexture.ParseFromSnippetAsync(snippetId, scaleToSize, this);\n    }\n    /**\n     * Recreate the content of the ADT from a url json\n     * @param url defines the url to load\n     * @param scaleToSize defines whether to scale to texture to the saved size\n     * @param appendToAdt if provided the snippet will be appended to the adt. Otherwise a fullscreen ADT will be created.\n     * @returns a promise that will resolve on success\n     */\n    static async ParseFromFileAsync(url, scaleToSize, appendToAdt) {\n        const adt = appendToAdt !== null && appendToAdt !== void 0 ? appendToAdt : AdvancedDynamicTexture.CreateFullscreenUI(\"ADT from URL\");\n        const serialized = await AdvancedDynamicTexture._LoadURLContentAsync(url);\n        adt.parseSerializedObject(serialized, scaleToSize);\n        return adt;\n    }\n    /**\n     * Recreate the content of the ADT from a url json\n     * @param url defines the url to load\n     * @param scaleToSize defines whether to scale to texture to the saved size\n     * @returns a promise that will resolve on success\n     */\n    parseFromURLAsync(url, scaleToSize) {\n        return AdvancedDynamicTexture.ParseFromFileAsync(url, scaleToSize, this);\n    }\n    static _LoadURLContentAsync(url, snippet = false) {\n        if (url === \"\") {\n            return Promise.reject(\"No URL provided\");\n        }\n        return new Promise((resolve, reject) => {\n            const request = new WebRequest();\n            request.addEventListener(\"readystatechange\", () => {\n                if (request.readyState == 4) {\n                    if (request.status == 200) {\n                        let gui;\n                        if (snippet) {\n                            const payload = JSON.parse(JSON.parse(request.responseText).jsonPayload);\n                            gui = payload.encodedGui ? new TextDecoder(\"utf-8\").decode(DecodeBase64ToBinary(payload.encodedGui)) : payload.gui;\n                        }\n                        else {\n                            gui = request.responseText;\n                        }\n                        const serializationObject = JSON.parse(gui);\n                        resolve(serializationObject);\n                    }\n                    else {\n                        reject(\"Unable to load\");\n                    }\n                }\n            });\n            request.open(\"GET\", url);\n            request.send();\n        });\n    }\n    // Statics\n    /**\n     * Compares two rectangle based controls for pixel overlap\n     * @param control1 The first control to compare\n     * @param control2 The second control to compare\n     * @returns true if overlaps, otherwise false\n     */\n    static _Overlaps(control1, control2) {\n        return !(control1.centerX > control2.centerX + control2.widthInPixels ||\n            control1.centerX + control1.widthInPixels < control2.centerX ||\n            control1.centerY + control1.heightInPixels < control2.centerY ||\n            control1.centerY > control2.centerY + control2.heightInPixels);\n    }\n    /**\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\n     * @param mesh defines the mesh which will receive the texture\n     * @param width defines the texture width (1024 by default)\n     * @param height defines the texture height (1024 by default)\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading (true by default)\n     * @param materialSetupCallback defines a custom way of creating and setting up the material on the mesh\n     * @returns a new AdvancedDynamicTexture\n     */\n    static CreateForMesh(mesh, width = 1024, height = 1024, supportPointerMove = true, onlyAlphaTesting = false, invertY, materialSetupCallback = this._CreateMaterial) {\n        // use a unique ID in name so serialization will work even if you create two ADTs for a single mesh\n        const uniqueId = RandomGUID();\n        const result = new AdvancedDynamicTexture(`AdvancedDynamicTexture for ${mesh.name} [${uniqueId}]`, width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE, invertY);\n        materialSetupCallback(mesh, uniqueId, result, onlyAlphaTesting);\n        result.attachToMesh(mesh, supportPointerMove);\n        return result;\n    }\n    static _CreateMaterial(mesh, uniqueId, texture, onlyAlphaTesting) {\n        const internalClassType = GetClass(\"BABYLON.StandardMaterial\");\n        if (!internalClassType) {\n            throw \"StandardMaterial needs to be imported before as it contains a side-effect required by your code.\";\n        }\n        const material = new internalClassType(`AdvancedDynamicTextureMaterial for ${mesh.name} [${uniqueId}]`, mesh.getScene());\n        material.backFaceCulling = false;\n        material.diffuseColor = Color3.Black();\n        material.specularColor = Color3.Black();\n        if (onlyAlphaTesting) {\n            material.diffuseTexture = texture;\n            material.emissiveTexture = texture;\n            texture.hasAlpha = true;\n        }\n        else {\n            material.emissiveTexture = texture;\n            material.opacityTexture = texture;\n        }\n        mesh.material = material;\n    }\n    /**\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh) BUT do not create a new material for the mesh. You will be responsible for connecting the texture\n     * @param mesh defines the mesh which will receive the texture\n     * @param width defines the texture width (1024 by default)\n     * @param height defines the texture height (1024 by default)\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading (true by default)\n     * @returns a new AdvancedDynamicTexture\n     */\n    static CreateForMeshTexture(mesh, width = 1024, height = 1024, supportPointerMove = true, invertY) {\n        const result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE, invertY);\n        result.attachToMesh(mesh, supportPointerMove);\n        return result;\n    }\n    /**\n     * Creates a new AdvancedDynamicTexture in fullscreen mode.\n     * In this mode the texture will rely on a layer for its rendering.\n     * This allows it to be treated like any other layer.\n     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\n     * LayerMask is set through advancedTexture.layer.layerMask\n     * @param name defines name for the texture\n     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\n     * @param scene defines the hosting scene\n     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\n     * @param adaptiveScaling defines whether to automatically scale root to match hardwarescaling (false by default)\n     * @returns a new AdvancedDynamicTexture\n     */\n    static CreateFullscreenUI(name, foreground = true, scene = null, sampling = Texture.BILINEAR_SAMPLINGMODE, adaptiveScaling = false) {\n        const result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\n        // Display\n        const resultScene = result.getScene();\n        const layer = new Layer(name + \"_layer\", null, resultScene, !foreground);\n        layer.texture = result;\n        result._layerToDispose = layer;\n        result._isFullscreen = true;\n        if (adaptiveScaling && resultScene) {\n            const newScale = 1 / resultScene.getEngine().getHardwareScalingLevel();\n            result._rootContainer.scaleX = newScale;\n            result._rootContainer.scaleY = newScale;\n        }\n        // Attach\n        result.attach();\n        return result;\n    }\n    /**\n     * Scales the texture\n     * @param ratio the scale factor to apply to both width and height\n     */\n    scale(ratio) {\n        super.scale(ratio);\n        this.markAsDirty();\n    }\n    /**\n     * Resizes the texture\n     * @param width the new width\n     * @param height the new height\n     */\n    scaleTo(width, height) {\n        super.scaleTo(width, height);\n        this.markAsDirty();\n    }\n    _checkGuiIsReady() {\n        if (this.guiIsReady()) {\n            this.onGuiReadyObservable.notifyObservers(this);\n            this.onGuiReadyObservable.clear();\n        }\n    }\n    /**\n     * Returns true if all the GUI components are ready to render\n     */\n    guiIsReady() {\n        return this._rootContainer.isReady();\n    }\n}\n/** Define the Uurl to load snippets */\nAdvancedDynamicTexture.SnippetUrl = Constants.SnippetUrl;\n/** Indicates if some optimizations can be performed in GUI GPU management (the downside is additional memory/GPU texture memory used) */\nAdvancedDynamicTexture.AllowGPUOptimizations = true;\n//# sourceMappingURL=advancedDynamicTexture.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Logger } from \"@babylonjs/core/Misc/logger.js\";\nimport { Control } from \"./control.js\";\nimport { Measure } from \"../measure.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\nimport { DynamicTexture } from \"@babylonjs/core/Materials/Textures/dynamicTexture.js\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture.js\";\nimport { Constants } from \"@babylonjs/core/Engines/constants.js\";\nimport { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { Tools } from \"@babylonjs/core/Misc/tools.js\";\n/**\n * Root class for 2D containers\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#containers\n */\nexport class Container extends Control {\n    /** Gets or sets boolean indicating if children should be rendered to an intermediate texture rather than directly to host, useful for alpha blending */\n    get renderToIntermediateTexture() {\n        return this._renderToIntermediateTexture;\n    }\n    set renderToIntermediateTexture(value) {\n        if (this._renderToIntermediateTexture === value) {\n            return;\n        }\n        this._renderToIntermediateTexture = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\n    get adaptHeightToChildren() {\n        return this._adaptHeightToChildren;\n    }\n    set adaptHeightToChildren(value) {\n        if (this._adaptHeightToChildren === value) {\n            return;\n        }\n        this._adaptHeightToChildren = value;\n        if (value) {\n            this.height = \"100%\";\n        }\n        this._markAsDirty();\n    }\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\n    get adaptWidthToChildren() {\n        return this._adaptWidthToChildren;\n    }\n    set adaptWidthToChildren(value) {\n        if (this._adaptWidthToChildren === value) {\n            return;\n        }\n        this._adaptWidthToChildren = value;\n        if (value) {\n            this.width = \"100%\";\n        }\n        this._markAsDirty();\n    }\n    /** Gets or sets background color */\n    get background() {\n        return this._background;\n    }\n    set background(value) {\n        if (this._background === value) {\n            return;\n        }\n        this._background = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets background gradient color. Takes precedence over background */\n    get backgroundGradient() {\n        return this._backgroundGradient;\n    }\n    set backgroundGradient(value) {\n        if (this._backgroundGradient === value) {\n            return;\n        }\n        this._backgroundGradient = value;\n        this._markAsDirty();\n    }\n    /** Gets the list of children */\n    get children() {\n        return this._children;\n    }\n    get isReadOnly() {\n        return this._isReadOnly;\n    }\n    set isReadOnly(value) {\n        this._isReadOnly = value;\n        for (const child of this._children) {\n            child.isReadOnly = value;\n        }\n    }\n    /**\n     * Creates a new Container\n     * @param name defines the name of the container\n     */\n    constructor(name) {\n        super(name);\n        this.name = name;\n        /** @internal */\n        this._children = new Array();\n        /** @internal */\n        this._measureForChildren = Measure.Empty();\n        /** @internal */\n        this._background = \"\";\n        /** @internal */\n        this._backgroundGradient = null;\n        /** @internal */\n        this._adaptWidthToChildren = false;\n        /** @internal */\n        this._adaptHeightToChildren = false;\n        /** @internal */\n        this._renderToIntermediateTexture = false;\n        /** @internal */\n        this._intermediateTexture = null;\n        /**\n         * Gets or sets a boolean indicating that layout cycle errors should be displayed on the console\n         */\n        this.logLayoutCycleErrors = false;\n        /**\n         * Gets or sets the number of layout cycles (a change involved by a control while evaluating the layout) allowed\n         */\n        this.maxLayoutCycle = 3;\n        /**\n         * An event triggered when any control is added to this container.\n         */\n        this.onControlAddedObservable = new Observable();\n        /**\n         * An event triggered when any control is removed from this container.\n         */\n        this.onControlRemovedObservable = new Observable();\n    }\n    _getTypeName() {\n        return \"Container\";\n    }\n    _flagDescendantsAsMatrixDirty() {\n        for (const child of this.children) {\n            child._isClipped = false;\n            child._markMatrixAsDirty();\n        }\n    }\n    /**\n     * Gets a child using its name\n     * @param name defines the child name to look for\n     * @returns the child control if found\n     */\n    getChildByName(name) {\n        for (const child of this.children) {\n            if (child.name === name) {\n                return child;\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a child using its type and its name\n     * @param name defines the child name to look for\n     * @param type defines the child type to look for\n     * @returns the child control if found\n     */\n    getChildByType(name, type) {\n        for (const child of this.children) {\n            if (child.typeName === type) {\n                return child;\n            }\n        }\n        return null;\n    }\n    /**\n     * Search for a specific control in children\n     * @param control defines the control to look for\n     * @returns true if the control is in child list\n     */\n    containsControl(control) {\n        return this.children.indexOf(control) !== -1;\n    }\n    /**\n     * Adds a new control to the current container\n     * @param control defines the control to add\n     * @returns the current container\n     */\n    addControl(control) {\n        if (!control) {\n            return this;\n        }\n        const index = this._children.indexOf(control);\n        if (index !== -1) {\n            return this;\n        }\n        control._link(this._host);\n        control._markAllAsDirty();\n        this._reOrderControl(control);\n        this._markAsDirty();\n        this.onControlAddedObservable.notifyObservers(control);\n        return this;\n    }\n    /**\n     * Removes all controls from the current container\n     * @returns the current container\n     */\n    clearControls() {\n        const children = this.children.slice();\n        for (const child of children) {\n            this.removeControl(child);\n        }\n        return this;\n    }\n    /**\n     * Removes a control from the current container\n     * @param control defines the control to remove\n     * @returns the current container\n     */\n    removeControl(control) {\n        const index = this._children.indexOf(control);\n        if (index !== -1) {\n            this._children.splice(index, 1);\n            control.parent = null;\n        }\n        control.linkWithMesh(null);\n        if (this._host) {\n            this._host._cleanControlAfterRemoval(control);\n        }\n        this._markAsDirty();\n        this.onControlRemovedObservable.notifyObservers(control);\n        return this;\n    }\n    /**\n     * @internal\n     */\n    _reOrderControl(control) {\n        const linkedMesh = control.linkedMesh;\n        this.removeControl(control);\n        let wasAdded = false;\n        for (let index = 0; index < this._children.length; index++) {\n            if (this._children[index].zIndex > control.zIndex) {\n                this._children.splice(index, 0, control);\n                wasAdded = true;\n                break;\n            }\n        }\n        if (!wasAdded) {\n            this._children.push(control);\n        }\n        control.parent = this;\n        if (linkedMesh) {\n            control.linkWithMesh(linkedMesh);\n        }\n        this._markAsDirty();\n    }\n    /**\n     * @internal\n     */\n    _offsetLeft(offset) {\n        super._offsetLeft(offset);\n        for (const child of this._children) {\n            child._offsetLeft(offset);\n        }\n    }\n    /**\n     * @internal\n     */\n    _offsetTop(offset) {\n        super._offsetTop(offset);\n        for (const child of this._children) {\n            child._offsetTop(offset);\n        }\n    }\n    /** @internal */\n    _markAllAsDirty() {\n        super._markAllAsDirty();\n        for (let index = 0; index < this._children.length; index++) {\n            this._children[index]._markAllAsDirty();\n        }\n    }\n    _getBackgroundColor(context) {\n        return this._backgroundGradient ? this._backgroundGradient.getCanvasGradient(context) : this._background;\n    }\n    /**\n     * @internal\n     */\n    _localDraw(context) {\n        if (this._background || this._backgroundGradient) {\n            context.save();\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n                context.shadowColor = this.shadowColor;\n                context.shadowBlur = this.shadowBlur;\n                context.shadowOffsetX = this.shadowOffsetX;\n                context.shadowOffsetY = this.shadowOffsetY;\n            }\n            context.fillStyle = this._getBackgroundColor(context);\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n            context.restore();\n        }\n    }\n    /**\n     * @internal\n     */\n    _link(host) {\n        super._link(host);\n        for (const child of this._children) {\n            child._link(host);\n        }\n    }\n    /** @internal */\n    _beforeLayout() {\n        // Do nothing\n    }\n    /**\n     * @internal\n     */\n    _processMeasures(parentMeasure, context) {\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\n            super._processMeasures(parentMeasure, context);\n            this._evaluateClippingState(parentMeasure);\n            if (this._renderToIntermediateTexture) {\n                if (this._intermediateTexture && this._host.getScene() != this._intermediateTexture.getScene()) {\n                    this._intermediateTexture.dispose();\n                    this._intermediateTexture = null;\n                }\n                if (!this._intermediateTexture) {\n                    this._intermediateTexture = new DynamicTexture(\"\", { width: this._currentMeasure.width, height: this._currentMeasure.height }, this._host.getScene(), false, Texture.NEAREST_SAMPLINGMODE, Constants.TEXTUREFORMAT_RGBA, false);\n                    this._intermediateTexture.hasAlpha = true;\n                }\n                else {\n                    this._intermediateTexture.scaleTo(this._currentMeasure.width, this._currentMeasure.height);\n                }\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    _layout(parentMeasure, context) {\n        var _a, _b;\n        if (!this.isDirty && (!this.isVisible || this.notRenderable)) {\n            return false;\n        }\n        this.host._numLayoutCalls++;\n        if (this._isDirty) {\n            this._currentMeasure.transformToRef(this._transformMatrix, this._prevCurrentMeasureTransformedIntoGlobalSpace);\n        }\n        let rebuildCount = 0;\n        context.save();\n        this._applyStates(context);\n        this._beforeLayout();\n        do {\n            let computedWidth = -1;\n            let computedHeight = -1;\n            this._rebuildLayout = false;\n            this._processMeasures(parentMeasure, context);\n            if (!this._isClipped) {\n                for (const child of this._children) {\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\n                    if (child._layout(this._measureForChildren, context)) {\n                        if (child.isVisible && !child.notRenderable) {\n                            if (this.adaptWidthToChildren && child._width.isPixel) {\n                                computedWidth = Math.max(computedWidth, child._currentMeasure.width + child._paddingLeftInPixels + child._paddingRightInPixels);\n                            }\n                            if (this.adaptHeightToChildren && child._height.isPixel) {\n                                computedHeight = Math.max(computedHeight, child._currentMeasure.height + child._paddingTopInPixels + child._paddingBottomInPixels);\n                            }\n                        }\n                    }\n                }\n                if (this.adaptWidthToChildren && computedWidth >= 0) {\n                    computedWidth += this.paddingLeftInPixels + this.paddingRightInPixels;\n                    if (this.width !== computedWidth + \"px\") {\n                        (_a = this.parent) === null || _a === void 0 ? void 0 : _a._markAsDirty();\n                        this.width = computedWidth + \"px\";\n                        this._width.ignoreAdaptiveScaling = true;\n                        this._rebuildLayout = true;\n                    }\n                }\n                if (this.adaptHeightToChildren && computedHeight >= 0) {\n                    computedHeight += this.paddingTopInPixels + this.paddingBottomInPixels;\n                    if (this.height !== computedHeight + \"px\") {\n                        (_b = this.parent) === null || _b === void 0 ? void 0 : _b._markAsDirty();\n                        this.height = computedHeight + \"px\";\n                        this._height.ignoreAdaptiveScaling = true;\n                        this._rebuildLayout = true;\n                    }\n                }\n                this._postMeasure();\n            }\n            rebuildCount++;\n        } while (this._rebuildLayout && rebuildCount < this.maxLayoutCycle);\n        if (rebuildCount >= 3 && this.logLayoutCycleErrors) {\n            Logger.Error(`Layout cycle detected in GUI (Container name=${this.name}, uniqueId=${this.uniqueId})`);\n        }\n        context.restore();\n        if (this._isDirty) {\n            this.invalidateRect();\n            this._isDirty = false;\n        }\n        return true;\n    }\n    _postMeasure() {\n        // Do nothing by default\n    }\n    /**\n     * @internal\n     */\n    _draw(context, invalidatedRectangle) {\n        const renderToIntermediateTextureThisDraw = this._renderToIntermediateTexture && this._intermediateTexture;\n        const contextToDrawTo = renderToIntermediateTextureThisDraw ? this._intermediateTexture.getContext() : context;\n        if (renderToIntermediateTextureThisDraw) {\n            contextToDrawTo.save();\n            contextToDrawTo.translate(-this._currentMeasure.left, -this._currentMeasure.top);\n            if (invalidatedRectangle) {\n                contextToDrawTo.clearRect(invalidatedRectangle.left, invalidatedRectangle.top, invalidatedRectangle.width, invalidatedRectangle.height);\n            }\n            else {\n                contextToDrawTo.clearRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n            }\n        }\n        this._localDraw(contextToDrawTo);\n        context.save();\n        if (this.clipChildren) {\n            this._clipForChildren(contextToDrawTo);\n        }\n        for (const child of this._children) {\n            // Only redraw parts of the screen that are invalidated\n            if (invalidatedRectangle) {\n                if (!child._intersectsRect(invalidatedRectangle)) {\n                    continue;\n                }\n            }\n            child._render(contextToDrawTo, invalidatedRectangle);\n        }\n        if (renderToIntermediateTextureThisDraw) {\n            contextToDrawTo.restore();\n            context.save();\n            context.globalAlpha = this.alpha;\n            context.drawImage(contextToDrawTo.canvas, this._currentMeasure.left, this._currentMeasure.top);\n            context.restore();\n        }\n        context.restore();\n    }\n    getDescendantsToRef(results, directDescendantsOnly = false, predicate) {\n        if (!this.children) {\n            return;\n        }\n        for (let index = 0; index < this.children.length; index++) {\n            const item = this.children[index];\n            if (!predicate || predicate(item)) {\n                results.push(item);\n            }\n            if (!directDescendantsOnly) {\n                item.getDescendantsToRef(results, false, predicate);\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    _processPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY) {\n        if (!this._isEnabled || !this.isVisible || this.notRenderable) {\n            return false;\n        }\n        // checks if the picking position is within the container\n        const contains = super.contains(x, y);\n        // if clipChildren is off, we should still pass picking events to children even if we don't contain the pointer\n        if (!contains && this.clipChildren) {\n            return false;\n        }\n        // Checking backwards to pick closest first\n        for (let index = this._children.length - 1; index >= 0; index--) {\n            const child = this._children[index];\n            if (child._processPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY)) {\n                if (child.hoverCursor) {\n                    this._host._changeCursor(child.hoverCursor);\n                }\n                return true;\n            }\n        }\n        if (!contains) {\n            return false;\n        }\n        if (!this.isHitTestVisible) {\n            return false;\n        }\n        return this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\n    }\n    /**\n     * @internal\n     */\n    _additionalProcessing(parentMeasure, context) {\n        super._additionalProcessing(parentMeasure, context);\n        this._measureForChildren.copyFrom(this._currentMeasure);\n    }\n    /**\n     * Serializes the current control\n     * @param serializationObject defined the JSON serialized object\n     */\n    serialize(serializationObject) {\n        super.serialize(serializationObject);\n        if (this.backgroundGradient) {\n            serializationObject.backgroundGradient = {};\n            this.backgroundGradient.serialize(serializationObject.backgroundGradient);\n        }\n        if (!this.children.length) {\n            return;\n        }\n        serializationObject.children = [];\n        for (const child of this.children) {\n            const childSerializationObject = {};\n            child.serialize(childSerializationObject);\n            serializationObject.children.push(childSerializationObject);\n        }\n    }\n    /** Releases associated resources */\n    dispose() {\n        var _a;\n        super.dispose();\n        for (let index = this.children.length - 1; index >= 0; index--) {\n            this.children[index].dispose();\n        }\n        (_a = this._intermediateTexture) === null || _a === void 0 ? void 0 : _a.dispose();\n    }\n    /**\n     * @internal\n     */\n    _parseFromContent(serializedObject, host) {\n        var _a;\n        super._parseFromContent(serializedObject, host);\n        this._link(host);\n        // Gradient\n        if (serializedObject.backgroundGradient) {\n            const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.backgroundGradient.className);\n            this._backgroundGradient = new className();\n            (_a = this._backgroundGradient) === null || _a === void 0 ? void 0 : _a.parse(serializedObject.backgroundGradient);\n        }\n        if (!serializedObject.children) {\n            return;\n        }\n        for (const childData of serializedObject.children) {\n            this.addControl(Control.Parse(childData, host));\n        }\n    }\n    isReady() {\n        for (const child of this.children) {\n            if (!child.isReady()) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n__decorate([\n    serialize()\n], Container.prototype, \"renderToIntermediateTexture\", null);\n__decorate([\n    serialize()\n], Container.prototype, \"maxLayoutCycle\", void 0);\n__decorate([\n    serialize()\n], Container.prototype, \"adaptHeightToChildren\", null);\n__decorate([\n    serialize()\n], Container.prototype, \"adaptWidthToChildren\", null);\n__decorate([\n    serialize()\n], Container.prototype, \"background\", null);\n__decorate([\n    serialize()\n], Container.prototype, \"backgroundGradient\", null);\nRegisterClass(\"BABYLON.GUI.Container\", Container);\n//# sourceMappingURL=container.js.map","import { Vector2 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { Epsilon } from \"@babylonjs/core/Maths/math.constants.js\";\n/**\n * Class used to transport Vector2 information for pointer events\n */\nexport class Vector2WithInfo extends Vector2 {\n    /**\n     * Creates a new Vector2WithInfo\n     * @param source defines the vector2 data to transport\n     * @param buttonIndex defines the current mouse button index\n     */\n    constructor(source, \n    /** defines the current mouse button index */\n    buttonIndex = 0) {\n        super(source.x, source.y);\n        this.buttonIndex = buttonIndex;\n    }\n}\n/** Class used to provide 2D matrix features */\nexport class Matrix2D {\n    /**\n     * Creates a new matrix\n     * @param m00 defines value for (0, 0)\n     * @param m01 defines value for (0, 1)\n     * @param m10 defines value for (1, 0)\n     * @param m11 defines value for (1, 1)\n     * @param m20 defines value for (2, 0)\n     * @param m21 defines value for (2, 1)\n     */\n    constructor(m00, m01, m10, m11, m20, m21) {\n        /** Gets the internal array of 6 floats used to store matrix data */\n        this.m = new Float32Array(6);\n        this.fromValues(m00, m01, m10, m11, m20, m21);\n    }\n    /**\n     * Fills the matrix from direct values\n     * @param m00 defines value for (0, 0)\n     * @param m01 defines value for (0, 1)\n     * @param m10 defines value for (1, 0)\n     * @param m11 defines value for (1, 1)\n     * @param m20 defines value for (2, 0)\n     * @param m21 defines value for (2, 1)\n     * @returns the current modified matrix\n     */\n    fromValues(m00, m01, m10, m11, m20, m21) {\n        this.m[0] = m00;\n        this.m[1] = m01;\n        this.m[2] = m10;\n        this.m[3] = m11;\n        this.m[4] = m20;\n        this.m[5] = m21;\n        return this;\n    }\n    /**\n     * Gets matrix determinant\n     * @returns the determinant\n     */\n    determinant() {\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\n    }\n    /**\n     * Inverses the matrix and stores it in a target matrix\n     * @param result defines the target matrix\n     * @returns the current matrix\n     */\n    invertToRef(result) {\n        const l0 = this.m[0];\n        const l1 = this.m[1];\n        const l2 = this.m[2];\n        const l3 = this.m[3];\n        const l4 = this.m[4];\n        const l5 = this.m[5];\n        const det = this.determinant();\n        if (det < Epsilon * Epsilon) {\n            result.m[0] = 0;\n            result.m[1] = 0;\n            result.m[2] = 0;\n            result.m[3] = 0;\n            result.m[4] = 0;\n            result.m[5] = 0;\n            return this;\n        }\n        const detDiv = 1 / det;\n        const det4 = l2 * l5 - l3 * l4;\n        const det5 = l1 * l4 - l0 * l5;\n        result.m[0] = l3 * detDiv;\n        result.m[1] = -l1 * detDiv;\n        result.m[2] = -l2 * detDiv;\n        result.m[3] = l0 * detDiv;\n        result.m[4] = det4 * detDiv;\n        result.m[5] = det5 * detDiv;\n        return this;\n    }\n    /**\n     * Multiplies the current matrix with another one\n     * @param other defines the second operand\n     * @param result defines the target matrix\n     * @returns the current matrix\n     */\n    multiplyToRef(other, result) {\n        const l0 = this.m[0];\n        const l1 = this.m[1];\n        const l2 = this.m[2];\n        const l3 = this.m[3];\n        const l4 = this.m[4];\n        const l5 = this.m[5];\n        const r0 = other.m[0];\n        const r1 = other.m[1];\n        const r2 = other.m[2];\n        const r3 = other.m[3];\n        const r4 = other.m[4];\n        const r5 = other.m[5];\n        result.m[0] = l0 * r0 + l1 * r2;\n        result.m[1] = l0 * r1 + l1 * r3;\n        result.m[2] = l2 * r0 + l3 * r2;\n        result.m[3] = l2 * r1 + l3 * r3;\n        result.m[4] = l4 * r0 + l5 * r2 + r4;\n        result.m[5] = l4 * r1 + l5 * r3 + r5;\n        return this;\n    }\n    /**\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\n     * @param x defines the x coordinate to transform\n     * @param y defines the x coordinate to transform\n     * @param result defines the target vector2\n     * @returns the current matrix\n     */\n    transformCoordinates(x, y, result) {\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\n        return this;\n    }\n    // Statics\n    /**\n     * Creates an identity matrix\n     * @returns a new matrix\n     */\n    static Identity() {\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\n    }\n    /**\n     * Creates an identity matrix and stores it in a target matrix\n     * @param result defines the target matrix\n     */\n    static IdentityToRef(result) {\n        result.m[0] = 1;\n        result.m[1] = 0;\n        result.m[2] = 0;\n        result.m[3] = 1;\n        result.m[4] = 0;\n        result.m[5] = 0;\n    }\n    /**\n     * Creates a translation matrix and stores it in a target matrix\n     * @param x defines the x coordinate of the translation\n     * @param y defines the y coordinate of the translation\n     * @param result defines the target matrix\n     */\n    static TranslationToRef(x, y, result) {\n        result.fromValues(1, 0, 0, 1, x, y);\n    }\n    /**\n     * Creates a scaling matrix and stores it in a target matrix\n     * @param x defines the x coordinate of the scaling\n     * @param y defines the y coordinate of the scaling\n     * @param result defines the target matrix\n     */\n    static ScalingToRef(x, y, result) {\n        result.fromValues(x, 0, 0, y, 0, 0);\n    }\n    /**\n     * Creates a rotation matrix and stores it in a target matrix\n     * @param angle defines the rotation angle\n     * @param result defines the target matrix\n     */\n    static RotationToRef(angle, result) {\n        const s = Math.sin(angle);\n        const c = Math.cos(angle);\n        result.fromValues(c, s, -s, c, 0, 0);\n    }\n    /**\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix\n     * @param tx defines the x coordinate of the translation\n     * @param ty defines the y coordinate of the translation\n     * @param angle defines the rotation angle\n     * @param scaleX defines the x coordinate of the scaling\n     * @param scaleY defines the y coordinate of the scaling\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\n     * @param result defines the target matrix\n     */\n    static ComposeToRef(tx, ty, angle, scaleX, scaleY, parentMatrix, result) {\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\n        if (parentMatrix) {\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\n        }\n        else {\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\n        }\n    }\n}\nMatrix2D._TempPreTranslationMatrix = Matrix2D.Identity();\nMatrix2D._TempPostTranslationMatrix = Matrix2D.Identity();\nMatrix2D._TempRotationMatrix = Matrix2D.Identity();\nMatrix2D._TempScalingMatrix = Matrix2D.Identity();\nMatrix2D._TempCompose0 = Matrix2D.Identity();\nMatrix2D._TempCompose1 = Matrix2D.Identity();\nMatrix2D._TempCompose2 = Matrix2D.Identity();\n/**\n * Useful math functions\n */\nexport class MathTools {\n    /**\n     * Rounds a number to the nearest multiple of a given precision\n     * @param value the value to be rounded\n     * @param precision the multiple to which the value will be rounded. Default is 100 (2 decimal digits)\n     * @returns\n     */\n    static Round(value, precision = MathTools.DefaultRoundingPrecision) {\n        return Math.round(value * precision) / precision;\n    }\n}\n/**\n * Default rounding precision for GUI elements. It should be\n * set to a power of ten, where the exponent means the number\n * of decimal digits to round to, i.e, 100 means 2 decimal digits,\n * 1000 means 3 decimal digits, etc. Default is 100 (2 decimal digits).\n */\nMathTools.DefaultRoundingPrecision = 100;\n//# sourceMappingURL=math2D.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { Vector2, Vector3, Matrix } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { PointerEventTypes } from \"@babylonjs/core/Events/pointerEvents.js\";\nimport { Logger } from \"@babylonjs/core/Misc/logger.js\";\nimport { Tools } from \"@babylonjs/core/Misc/tools.js\";\nimport { ValueAndUnit } from \"../valueAndUnit.js\";\nimport { Measure } from \"../measure.js\";\nimport { Matrix2D, Vector2WithInfo } from \"../math2D.js\";\nimport { GetClass, RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { SerializationHelper, serialize } from \"@babylonjs/core/Misc/decorators.js\";\nimport { EngineStore } from \"@babylonjs/core/Engines/engineStore.js\";\n/**\n * Root class used for all 2D controls\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#controls\n */\nexport class Control {\n    /**\n     * Gets or sets a boolean indicating if the control is readonly (default: false).\n     * A readonly control will still raise pointer events but will not react to them\n     */\n    get isReadOnly() {\n        return this._isReadOnly;\n    }\n    set isReadOnly(value) {\n        this._isReadOnly = value;\n    }\n    /**\n     * Gets the transformed measure, that is the bounding box of the control after applying all transformations\n     */\n    get transformedMeasure() {\n        return this._evaluatedMeasure;\n    }\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\n    get shadowOffsetX() {\n        return this._shadowOffsetX;\n    }\n    set shadowOffsetX(value) {\n        if (this._shadowOffsetX === value) {\n            return;\n        }\n        this._shadowOffsetX = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\n    get shadowOffsetY() {\n        return this._shadowOffsetY;\n    }\n    set shadowOffsetY(value) {\n        if (this._shadowOffsetY === value) {\n            return;\n        }\n        this._shadowOffsetY = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\n    get shadowBlur() {\n        return this._shadowBlur;\n    }\n    set shadowBlur(value) {\n        if (this._shadowBlur === value) {\n            return;\n        }\n        this._previousShadowBlur = this._shadowBlur;\n        this._shadowBlur = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\n    get shadowColor() {\n        return this._shadowColor;\n    }\n    set shadowColor(value) {\n        if (this._shadowColor === value) {\n            return;\n        }\n        this._shadowColor = value;\n        this._markAsDirty();\n    }\n    // Properties\n    /** Gets the control type name */\n    get typeName() {\n        return this._getTypeName();\n    }\n    /**\n     * Get the current class name of the control.\n     * @returns current class name\n     */\n    getClassName() {\n        return this._getTypeName();\n    }\n    /**\n     * Gets or sets the accessibility tag to describe the control for accessibility purpose.\n     * By default, GUI controls already indicate accessibility info, but one can override the info using this tag.\n     */\n    set accessibilityTag(value) {\n        this._accessibilityTag = value;\n        this.onAccessibilityTagChangedObservable.notifyObservers(value);\n    }\n    get accessibilityTag() {\n        return this._accessibilityTag;\n    }\n    /**\n     * Get the hosting AdvancedDynamicTexture\n     */\n    get host() {\n        return this._host;\n    }\n    /** Gets or set information about font offsets (used to render and align text) */\n    get fontOffset() {\n        return this._fontOffset;\n    }\n    set fontOffset(offset) {\n        this._fontOffset = offset;\n    }\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\n    get alpha() {\n        return this._alpha;\n    }\n    set alpha(value) {\n        if (this._alpha === value) {\n            return;\n        }\n        this._alphaSet = true;\n        this._alpha = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets a number indicating size of stroke we want to highlight the control with (mostly for debugging purpose)\n     */\n    get highlightLineWidth() {\n        return this._highlightLineWidth;\n    }\n    set highlightLineWidth(value) {\n        if (this._highlightLineWidth === value) {\n            return;\n        }\n        this._highlightLineWidth = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets a boolean indicating that we want to highlight the control (mostly for debugging purpose)\n     */\n    get isHighlighted() {\n        return this._isHighlighted;\n    }\n    set isHighlighted(value) {\n        if (this._isHighlighted === value) {\n            return;\n        }\n        this._isHighlighted = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets a string defining the color to use for highlighting this control\n     */\n    get highlightColor() {\n        return this._highlightColor;\n    }\n    set highlightColor(value) {\n        if (this._highlightColor === value) {\n            return;\n        }\n        this._highlightColor = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default)\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\n     */\n    get scaleX() {\n        return this._scaleX;\n    }\n    set scaleX(value) {\n        if (this._scaleX === value) {\n            return;\n        }\n        this._scaleX = value;\n        this._markAsDirty();\n        this._markMatrixAsDirty();\n    }\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default)\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\n     */\n    get scaleY() {\n        return this._scaleY;\n    }\n    set scaleY(value) {\n        if (this._scaleY === value) {\n            return;\n        }\n        this._scaleY = value;\n        this._markAsDirty();\n        this._markMatrixAsDirty();\n    }\n    /** Gets or sets the rotation angle (0 by default)\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\n     */\n    get rotation() {\n        return this._rotation;\n    }\n    set rotation(value) {\n        if (this._rotation === value) {\n            return;\n        }\n        this._rotation = value;\n        this._markAsDirty();\n        this._markMatrixAsDirty();\n    }\n    /** Gets or sets the transformation center on Y axis (0 by default)\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\n     */\n    get transformCenterY() {\n        return this._transformCenterY;\n    }\n    set transformCenterY(value) {\n        if (this._transformCenterY === value) {\n            return;\n        }\n        this._transformCenterY = value;\n        this._markAsDirty();\n        this._markMatrixAsDirty();\n    }\n    /** Gets or sets the transformation center on X axis (0 by default)\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\n     */\n    get transformCenterX() {\n        return this._transformCenterX;\n    }\n    set transformCenterX(value) {\n        if (this._transformCenterX === value) {\n            return;\n        }\n        this._transformCenterX = value;\n        this._markAsDirty();\n        this._markMatrixAsDirty();\n    }\n    /**\n     * Gets or sets the horizontal alignment\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#alignments\n     */\n    get horizontalAlignment() {\n        return this._horizontalAlignment;\n    }\n    set horizontalAlignment(value) {\n        if (this._horizontalAlignment === value) {\n            return;\n        }\n        this._horizontalAlignment = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets the vertical alignment\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#alignments\n     */\n    get verticalAlignment() {\n        return this._verticalAlignment;\n    }\n    set verticalAlignment(value) {\n        if (this._verticalAlignment === value) {\n            return;\n        }\n        this._verticalAlignment = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets control width\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get width() {\n        return this._width.toString(this._host);\n    }\n    set width(value) {\n        this._fixedRatioMasterIsWidth = true;\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n        if (this._width.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /**\n     * Gets or sets the control width in pixel\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get widthInPixels() {\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n    set widthInPixels(value) {\n        if (isNaN(value)) {\n            return;\n        }\n        this._fixedRatioMasterIsWidth = true;\n        this.width = value + \"px\";\n    }\n    /**\n     * Gets or sets control height\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get height() {\n        return this._height.toString(this._host);\n    }\n    set height(value) {\n        this._fixedRatioMasterIsWidth = false;\n        if (this._height.toString(this._host) === value) {\n            return;\n        }\n        if (this._height.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /**\n     * Gets or sets control height in pixel\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get heightInPixels() {\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\n    }\n    set heightInPixels(value) {\n        if (isNaN(value)) {\n            return;\n        }\n        this._fixedRatioMasterIsWidth = false;\n        this.height = value + \"px\";\n    }\n    /** Gets or set font family */\n    get fontFamily() {\n        return this._fontFamily;\n    }\n    set fontFamily(value) {\n        if (this._fontFamily === value) {\n            return;\n        }\n        this._fontFamily = value;\n        this._resetFontCache();\n    }\n    /** Gets or sets font style */\n    get fontStyle() {\n        return this._fontStyle;\n    }\n    set fontStyle(value) {\n        if (this._fontStyle === value) {\n            return;\n        }\n        this._fontStyle = value;\n        this._resetFontCache();\n    }\n    /** Gets or sets font weight */\n    get fontWeight() {\n        return this._fontWeight;\n    }\n    set fontWeight(value) {\n        if (this._fontWeight === value) {\n            return;\n        }\n        this._fontWeight = value;\n        this._resetFontCache();\n    }\n    /**\n     * Gets or sets style\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#styles\n     */\n    get style() {\n        return this._style;\n    }\n    set style(value) {\n        if (this._style) {\n            this._style.onChangedObservable.remove(this._styleObserver);\n            this._styleObserver = null;\n        }\n        this._style = value;\n        if (this._style) {\n            this._styleObserver = this._style.onChangedObservable.add(() => {\n                this._markAsDirty();\n                this._resetFontCache();\n            });\n        }\n        this._markAsDirty();\n        this._resetFontCache();\n    }\n    /** @internal */\n    get _isFontSizeInPercentage() {\n        return this._fontSize.isPercentage;\n    }\n    /** Gets or sets font size in pixels */\n    get fontSizeInPixels() {\n        const fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\n        if (fontSizeToUse.isPixel) {\n            return fontSizeToUse.getValue(this._host);\n        }\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\n    }\n    set fontSizeInPixels(value) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.fontSize = value + \"px\";\n    }\n    /** Gets or sets font size */\n    get fontSize() {\n        return this._fontSize.toString(this._host);\n    }\n    set fontSize(value) {\n        if (this._fontSize.toString(this._host) === value) {\n            return;\n        }\n        if (this._fontSize.fromString(value)) {\n            this._markAsDirty();\n            this._resetFontCache();\n        }\n    }\n    /** Gets or sets foreground color */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        if (this._color === value) {\n            return;\n        }\n        this._color = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets gradient. Setting a gradient will override the color */\n    get gradient() {\n        return this._gradient;\n    }\n    set gradient(value) {\n        if (this._gradient === value) {\n            return;\n        }\n        this._gradient = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets z index which is used to reorder controls on the z axis */\n    get zIndex() {\n        return this._zIndex;\n    }\n    set zIndex(value) {\n        if (this.zIndex === value) {\n            return;\n        }\n        this._zIndex = value;\n        if (this.parent) {\n            this.parent._reOrderControl(this);\n        }\n    }\n    /** Gets or sets a boolean indicating if the control can be rendered */\n    get notRenderable() {\n        return this._doNotRender;\n    }\n    set notRenderable(value) {\n        if (this._doNotRender === value) {\n            return;\n        }\n        this._doNotRender = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a boolean indicating if the control is visible */\n    get isVisible() {\n        return this._isVisible;\n    }\n    set isVisible(value) {\n        if (this._isVisible === value) {\n            return;\n        }\n        this._isVisible = value;\n        this._markAsDirty(true);\n        this.onIsVisibleChangedObservable.notifyObservers(value);\n    }\n    /** Gets a boolean indicating that the control needs to update its rendering */\n    get isDirty() {\n        return this._isDirty;\n    }\n    /**\n     * Gets the current linked mesh (or null if none)\n     */\n    get linkedMesh() {\n        return this._linkedMesh;\n    }\n    /**\n     * Gets or sets a value indicating the padding should work like in CSS.\n     * Basically, it will add the padding amount on each side of the parent control for its children.\n     */\n    get descendantsOnlyPadding() {\n        return this._descendantsOnlyPadding;\n    }\n    set descendantsOnlyPadding(value) {\n        if (this._descendantsOnlyPadding === value) {\n            return;\n        }\n        this._descendantsOnlyPadding = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets a value indicating the padding to use on the left of the control\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get paddingLeft() {\n        return this._paddingLeft.toString(this._host);\n    }\n    set paddingLeft(value) {\n        if (this._paddingLeft.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /**\n     * Gets or sets a value indicating the padding in pixels to use on the left of the control\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get paddingLeftInPixels() {\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n    set paddingLeftInPixels(value) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.paddingLeft = value + \"px\";\n    }\n    /** @internal */\n    get _paddingLeftInPixels() {\n        if (this._descendantsOnlyPadding) {\n            return 0;\n        }\n        return this.paddingLeftInPixels;\n    }\n    /**\n     * Gets or sets a value indicating the padding to use on the right of the control\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get paddingRight() {\n        return this._paddingRight.toString(this._host);\n    }\n    set paddingRight(value) {\n        if (this._paddingRight.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /**\n     * Gets or sets a value indicating the padding in pixels to use on the right of the control\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get paddingRightInPixels() {\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n    set paddingRightInPixels(value) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.paddingRight = value + \"px\";\n    }\n    /** @internal */\n    get _paddingRightInPixels() {\n        if (this._descendantsOnlyPadding) {\n            return 0;\n        }\n        return this.paddingRightInPixels;\n    }\n    /**\n     * Gets or sets a value indicating the padding to use on the top of the control\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get paddingTop() {\n        return this._paddingTop.toString(this._host);\n    }\n    set paddingTop(value) {\n        if (this._paddingTop.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /**\n     * Gets or sets a value indicating the padding in pixels to use on the top of the control\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get paddingTopInPixels() {\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\n    }\n    set paddingTopInPixels(value) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.paddingTop = value + \"px\";\n    }\n    /** @internal */\n    get _paddingTopInPixels() {\n        if (this._descendantsOnlyPadding) {\n            return 0;\n        }\n        return this.paddingTopInPixels;\n    }\n    /**\n     * Gets or sets a value indicating the padding to use on the bottom of the control\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get paddingBottom() {\n        return this._paddingBottom.toString(this._host);\n    }\n    set paddingBottom(value) {\n        if (this._paddingBottom.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /**\n     * Gets or sets a value indicating the padding in pixels to use on the bottom of the control\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get paddingBottomInPixels() {\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\n    }\n    set paddingBottomInPixels(value) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.paddingBottom = value + \"px\";\n    }\n    /** @internal */\n    get _paddingBottomInPixels() {\n        if (this._descendantsOnlyPadding) {\n            return 0;\n        }\n        return this.paddingBottomInPixels;\n    }\n    /**\n     * Gets or sets a value indicating the left coordinate of the control\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get left() {\n        return this._left.toString(this._host);\n    }\n    set left(value) {\n        if (this._left.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /**\n     * Gets or sets a value indicating the left coordinate in pixels of the control\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get leftInPixels() {\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n    set leftInPixels(value) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.left = value + \"px\";\n    }\n    /**\n     * Gets or sets a value indicating the top coordinate of the control\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get top() {\n        return this._top.toString(this._host);\n    }\n    set top(value) {\n        if (this._top.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /**\n     * Gets or sets a value indicating the top coordinate in pixels of the control\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get topInPixels() {\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\n    }\n    set topInPixels(value) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.top = value + \"px\";\n    }\n    /**\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\n     */\n    get linkOffsetX() {\n        return this._linkOffsetX.toString(this._host);\n    }\n    set linkOffsetX(value) {\n        if (this._linkOffsetX.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /**\n     * Gets or sets a value indicating the offset in pixels on X axis to the linked mesh\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\n     */\n    get linkOffsetXInPixels() {\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n    set linkOffsetXInPixels(value) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.linkOffsetX = value + \"px\";\n    }\n    /**\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\n     */\n    get linkOffsetY() {\n        return this._linkOffsetY.toString(this._host);\n    }\n    set linkOffsetY(value) {\n        if (this._linkOffsetY.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /**\n     * Gets or sets a value indicating the offset in pixels on Y axis to the linked mesh\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\n     */\n    get linkOffsetYInPixels() {\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\n    }\n    set linkOffsetYInPixels(value) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.linkOffsetY = value + \"px\";\n    }\n    /** Gets the center coordinate on X axis */\n    get centerX() {\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\n    }\n    /** Gets the center coordinate on Y axis */\n    get centerY() {\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\n    }\n    /** Gets or sets if control is Enabled */\n    get isEnabled() {\n        return this._isEnabled;\n    }\n    set isEnabled(value) {\n        if (this._isEnabled === value) {\n            return;\n        }\n        this._isEnabled = value;\n        this._markAsDirty();\n        // if this control or any of it's descendants are under a pointer, we need to fire a pointerOut event\n        const recursivelyFirePointerOut = (control) => {\n            if (!control.host) {\n                return;\n            }\n            for (const pointer in control.host._lastControlOver) {\n                if (control === this.host._lastControlOver[pointer]) {\n                    control._onPointerOut(control, null, true);\n                    delete control.host._lastControlOver[pointer];\n                }\n            }\n            if (control.children !== undefined) {\n                control.children.forEach(recursivelyFirePointerOut);\n            }\n        };\n        recursivelyFirePointerOut(this);\n    }\n    /** Gets or sets background color of control if it's disabled. Only applies to Button class. */\n    get disabledColor() {\n        return this._disabledColor;\n    }\n    set disabledColor(value) {\n        if (this._disabledColor === value) {\n            return;\n        }\n        this._disabledColor = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets front color of control if it's disabled. Only applies to Checkbox class. */\n    get disabledColorItem() {\n        return this._disabledColorItem;\n    }\n    set disabledColorItem(value) {\n        if (this._disabledColorItem === value) {\n            return;\n        }\n        this._disabledColorItem = value;\n        this._markAsDirty();\n    }\n    // Functions\n    /**\n     * Creates a new control\n     * @param name defines the name of the control\n     */\n    constructor(\n    /** defines the name of the control */\n    name) {\n        this.name = name;\n        this._alpha = 1;\n        this._alphaSet = false;\n        this._zIndex = 0;\n        /** @internal */\n        this._currentMeasure = Measure.Empty();\n        /** @internal */\n        this._tempPaddingMeasure = Measure.Empty();\n        this._fontFamily = \"Arial\";\n        this._fontStyle = \"\";\n        this._fontWeight = \"\";\n        this._fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\n        /** @internal */\n        this._width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\n        /** @internal */\n        this._height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\n        this._color = \"\";\n        this._style = null;\n        /** @internal */\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\n        /** @internal */\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n        /** @internal */\n        this._isDirty = true;\n        /** @internal */\n        this._wasDirty = false;\n        /** @internal */\n        this._tempParentMeasure = Measure.Empty();\n        /** @internal */\n        this._prevCurrentMeasureTransformedIntoGlobalSpace = Measure.Empty();\n        /** @internal */\n        this._cachedParentMeasure = Measure.Empty();\n        this._descendantsOnlyPadding = false;\n        this._paddingLeft = new ValueAndUnit(0);\n        this._paddingRight = new ValueAndUnit(0);\n        this._paddingTop = new ValueAndUnit(0);\n        this._paddingBottom = new ValueAndUnit(0);\n        /** @internal */\n        this._left = new ValueAndUnit(0);\n        /** @internal */\n        this._top = new ValueAndUnit(0);\n        this._scaleX = 1.0;\n        this._scaleY = 1.0;\n        this._rotation = 0;\n        this._transformCenterX = 0.5;\n        this._transformCenterY = 0.5;\n        /** @internal */\n        this._transformMatrix = Matrix2D.Identity();\n        /** @internal */\n        this._invertTransformMatrix = Matrix2D.Identity();\n        /** @internal */\n        this._transformedPosition = Vector2.Zero();\n        this._isMatrixDirty = true;\n        this._isVisible = true;\n        this._isHighlighted = false;\n        this._highlightColor = \"#4affff\";\n        this._highlightLineWidth = 2;\n        this._fontSet = false;\n        this._dummyVector2 = Vector2.Zero();\n        this._downCount = 0;\n        this._enterCount = -1;\n        this._doNotRender = false;\n        this._downPointerIds = {};\n        this._evaluatedMeasure = new Measure(0, 0, 0, 0);\n        this._evaluatedParentMeasure = new Measure(0, 0, 0, 0);\n        this._isEnabled = true;\n        this._disabledColor = \"#9a9a9a\";\n        this._disabledColorItem = \"#6a6a6a\";\n        this._isReadOnly = false;\n        this._gradient = null;\n        /** @internal */\n        this._rebuildLayout = false;\n        /** @internal */\n        this._customData = {};\n        /** @internal */\n        this._isClipped = false;\n        /** @internal */\n        this._automaticSize = false;\n        /**\n         * Gets or sets an object used to store user defined information for the node\n         */\n        this.metadata = null;\n        /** Gets or sets a boolean indicating if the control can be hit with pointer events */\n        this.isHitTestVisible = true;\n        /** Gets or sets a boolean indicating if the control can block pointer events. False by default except on the following controls:\n         * * Button controls (Button, RadioButton, ToggleButton)\n         * * Checkbox\n         * * ColorPicker\n         * * InputText\n         * * Slider\n         */\n        this.isPointerBlocker = false;\n        /** Gets or sets a boolean indicating if the control can be focusable */\n        this.isFocusInvisible = false;\n        /**\n         * Gets or sets a boolean indicating if the children are clipped to the current control bounds.\n         * Please note that not clipping children may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\n         */\n        this.clipChildren = true;\n        /**\n         * Gets or sets a boolean indicating that control content must be clipped\n         * Please note that not clipping children may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\n         */\n        this.clipContent = true;\n        /**\n         * Gets or sets a boolean indicating that the current control should cache its rendering (useful when the control does not change often)\n         */\n        this.useBitmapCache = false;\n        this._shadowOffsetX = 0;\n        this._shadowOffsetY = 0;\n        this._shadowBlur = 0;\n        this._previousShadowBlur = 0;\n        this._shadowColor = \"black\";\n        /** Gets or sets the cursor to use when the control is hovered */\n        this.hoverCursor = \"\";\n        /** @internal */\n        this._linkOffsetX = new ValueAndUnit(0);\n        /** @internal */\n        this._linkOffsetY = new ValueAndUnit(0);\n        this._accessibilityTag = null;\n        this.onAccessibilityTagChangedObservable = new Observable();\n        /**\n         * An event triggered when pointer wheel is scrolled\n         */\n        this.onWheelObservable = new Observable();\n        /**\n         * An event triggered when the pointer moves over the control.\n         */\n        this.onPointerMoveObservable = new Observable();\n        /**\n         * An event triggered when the pointer moves out of the control.\n         */\n        this.onPointerOutObservable = new Observable();\n        /**\n         * An event triggered when the pointer taps the control\n         */\n        this.onPointerDownObservable = new Observable();\n        /**\n         * An event triggered when pointer up\n         */\n        this.onPointerUpObservable = new Observable();\n        /**\n         * An event triggered when a control is clicked on\n         */\n        this.onPointerClickObservable = new Observable();\n        /**\n         * An event triggered when pointer enters the control\n         */\n        this.onPointerEnterObservable = new Observable();\n        /**\n         * An event triggered when the control is marked as dirty\n         */\n        this.onDirtyObservable = new Observable();\n        /**\n         * An event triggered before drawing the control\n         */\n        this.onBeforeDrawObservable = new Observable();\n        /**\n         * An event triggered after the control was drawn\n         */\n        this.onAfterDrawObservable = new Observable();\n        /**\n         * An event triggered when the control has been disposed\n         */\n        this.onDisposeObservable = new Observable();\n        /**\n         * An event triggered when the control isVisible is changed\n         */\n        this.onIsVisibleChangedObservable = new Observable();\n        /**\n         * Gets or sets a fixed ratio for this control.\n         * When different from 0, the ratio is used to compute the \"second\" dimension.\n         * The first dimension used in the computation is the last one set (by setting width / widthInPixels or height / heightInPixels), and the\n         * second dimension is computed as first dimension * fixedRatio\n         */\n        this.fixedRatio = 0;\n        this._fixedRatioMasterIsWidth = true;\n        /**\n         * Array of animations\n         */\n        this.animations = null;\n        this._tmpMeasureA = new Measure(0, 0, 0, 0);\n    }\n    /** @internal */\n    _getTypeName() {\n        return \"Control\";\n    }\n    /**\n     * Gets the first ascendant in the hierarchy of the given type\n     * @param className defines the required type\n     * @returns the ascendant or null if not found\n     */\n    getAscendantOfClass(className) {\n        if (!this.parent) {\n            return null;\n        }\n        if (this.parent.getClassName() === className) {\n            return this.parent;\n        }\n        return this.parent.getAscendantOfClass(className);\n    }\n    /**\n     * Mark control element as dirty\n     * @param force force non visible elements to be marked too\n     */\n    markAsDirty(force = false) {\n        this._markAsDirty(force);\n    }\n    /**\n     * Mark the element and its children as dirty\n     */\n    markAllAsDirty() {\n        this._markAllAsDirty();\n    }\n    /** @internal */\n    _resetFontCache() {\n        this._fontSet = true;\n        this._markAsDirty();\n    }\n    /**\n     * Determines if a container is an ascendant of the current control\n     * @param container defines the container to look for\n     * @returns true if the container is one of the ascendant of the control\n     */\n    isAscendant(container) {\n        if (!this.parent) {\n            return false;\n        }\n        if (this.parent === container) {\n            return true;\n        }\n        return this.parent.isAscendant(container);\n    }\n    /**\n     * Gets coordinates in local control space\n     * @param globalCoordinates defines the coordinates to transform\n     * @returns the new coordinates in local space\n     */\n    getLocalCoordinates(globalCoordinates) {\n        const result = Vector2.Zero();\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\n        return result;\n    }\n    /**\n     * Gets coordinates in local control space\n     * @param globalCoordinates defines the coordinates to transform\n     * @param result defines the target vector2 where to store the result\n     * @returns the current control\n     */\n    getLocalCoordinatesToRef(globalCoordinates, result) {\n        result.x = globalCoordinates.x - this._currentMeasure.left;\n        result.y = globalCoordinates.y - this._currentMeasure.top;\n        return this;\n    }\n    /**\n     * Gets coordinates in parent local control space\n     * @param globalCoordinates defines the coordinates to transform\n     * @returns the new coordinates in parent local space\n     */\n    getParentLocalCoordinates(globalCoordinates) {\n        const result = Vector2.Zero();\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\n        return result;\n    }\n    /**\n     * Move the current control to a vector3 position projected onto the screen.\n     * @param position defines the target position\n     * @param scene defines the hosting scene\n     */\n    moveToVector3(position, scene) {\n        if (!this._host || this.parent !== this._host._rootContainer) {\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\n            return;\n        }\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n        const globalViewport = this._host._getGlobalViewport();\n        const projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\n        this._moveToProjectedPosition(projectedPosition);\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\n            this.notRenderable = true;\n            return;\n        }\n        this.notRenderable = false;\n    }\n    /**\n     * Will store all controls that have this control as ascendant in a given array\n     * @param results defines the array where to store the descendants\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\n     */\n    getDescendantsToRef(results, directDescendantsOnly = false, predicate) {\n        // Do nothing by default\n    }\n    /**\n     * Will return all controls that have this control as ascendant\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\n     * @returns all child controls\n     */\n    getDescendants(directDescendantsOnly, predicate) {\n        const results = new Array();\n        this.getDescendantsToRef(results, directDescendantsOnly, predicate);\n        return results;\n    }\n    /**\n     * Link current control with a target mesh\n     * @param mesh defines the mesh to link with\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\n     */\n    linkWithMesh(mesh) {\n        if (!this._host || (this.parent && this.parent !== this._host._rootContainer)) {\n            if (mesh) {\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\n            }\n            return;\n        }\n        const index = this._host._linkedControls.indexOf(this);\n        if (index !== -1) {\n            this._linkedMesh = mesh;\n            if (!mesh) {\n                this._host._linkedControls.splice(index, 1);\n            }\n            return;\n        }\n        else if (!mesh) {\n            return;\n        }\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n        this._linkedMesh = mesh;\n        this._host._linkedControls.push(this);\n    }\n    /**\n     * Shorthand function to set the top, right, bottom, and left padding values on the control.\n     * @param { string | number} paddingTop - The value of the top padding.\n     * @param { string | number} paddingRight - The value of the right padding. If omitted, top is used.\n     * @param { string | number} paddingBottom - The value of the bottom padding. If omitted, top is used.\n     * @param { string | number} paddingLeft - The value of the left padding. If omitted, right is used.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    setPadding(paddingTop, paddingRight, paddingBottom, paddingLeft) {\n        const top = paddingTop;\n        const right = paddingRight !== null && paddingRight !== void 0 ? paddingRight : top;\n        const bottom = paddingBottom !== null && paddingBottom !== void 0 ? paddingBottom : top;\n        const left = paddingLeft !== null && paddingLeft !== void 0 ? paddingLeft : right;\n        this.paddingTop = top;\n        this.paddingRight = right;\n        this.paddingBottom = bottom;\n        this.paddingLeft = left;\n    }\n    /**\n     * Shorthand funtion to set the top, right, bottom, and left padding values in pixels on the control.\n     * @param { number} paddingTop - The value in pixels of the top padding.\n     * @param { number} paddingRight - The value in pixels of the right padding. If omitted, top is used.\n     * @param { number} paddingBottom - The value in pixels of the bottom padding. If omitted, top is used.\n     * @param { number} paddingLeft - The value in pixels of the left padding. If omitted, right is used.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    setPaddingInPixels(paddingTop, paddingRight, paddingBottom, paddingLeft) {\n        const top = paddingTop;\n        const right = paddingRight !== null && paddingRight !== void 0 ? paddingRight : top;\n        const bottom = paddingBottom !== null && paddingBottom !== void 0 ? paddingBottom : top;\n        const left = paddingLeft !== null && paddingLeft !== void 0 ? paddingLeft : right;\n        this.paddingTopInPixels = top;\n        this.paddingRightInPixels = right;\n        this.paddingBottomInPixels = bottom;\n        this.paddingLeftInPixels = left;\n    }\n    /**\n     * @internal\n     */\n    _moveToProjectedPosition(projectedPosition) {\n        var _a;\n        const oldLeft = this._left.getValue(this._host);\n        const oldTop = this._top.getValue(this._host);\n        const parentMeasure = (_a = this.parent) === null || _a === void 0 ? void 0 : _a._currentMeasure;\n        if (parentMeasure) {\n            this._processMeasures(parentMeasure, this._host.getContext());\n        }\n        let newLeft = projectedPosition.x + this._linkOffsetX.getValue(this._host) - this._currentMeasure.width / 2;\n        let newTop = projectedPosition.y + this._linkOffsetY.getValue(this._host) - this._currentMeasure.height / 2;\n        if (this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling) {\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\n                newLeft = oldLeft;\n            }\n            if (Math.abs(newTop - oldTop) < 0.5) {\n                newTop = oldTop;\n            }\n        }\n        if (oldLeft === newLeft && oldTop === newTop) {\n            return;\n        }\n        this.left = newLeft + \"px\";\n        this.top = newTop + \"px\";\n        this._left.ignoreAdaptiveScaling = true;\n        this._top.ignoreAdaptiveScaling = true;\n        this._markAsDirty();\n    }\n    /**\n     * @internal\n     */\n    _offsetLeft(offset) {\n        this._isDirty = true;\n        this._currentMeasure.left += offset;\n    }\n    /**\n     * @internal\n     */\n    _offsetTop(offset) {\n        this._isDirty = true;\n        this._currentMeasure.top += offset;\n    }\n    /** @internal */\n    _markMatrixAsDirty() {\n        this._isMatrixDirty = true;\n        this._flagDescendantsAsMatrixDirty();\n    }\n    /** @internal */\n    _flagDescendantsAsMatrixDirty() {\n        // No child\n    }\n    /**\n     * @internal\n     */\n    _intersectsRect(rect, context) {\n        // make sure we are transformed correctly before checking intersections. no-op if nothing is dirty.\n        this._transform(context);\n        if (this._evaluatedMeasure.left >= rect.left + rect.width) {\n            return false;\n        }\n        if (this._evaluatedMeasure.top >= rect.top + rect.height) {\n            return false;\n        }\n        if (this._evaluatedMeasure.left + this._evaluatedMeasure.width <= rect.left) {\n            return false;\n        }\n        if (this._evaluatedMeasure.top + this._evaluatedMeasure.height <= rect.top) {\n            return false;\n        }\n        return true;\n    }\n    /** @internal */\n    _computeAdditionnalOffsetX() {\n        return 0;\n    }\n    /** @internal */\n    _computeAdditionnalOffsetY() {\n        return 0;\n    }\n    /** @internal */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    invalidateRect() {\n        this._transform();\n        if (this.host && this.host.useInvalidateRectOptimization) {\n            // Rotate by transform to get the measure transformed to global space\n            this._currentMeasure.transformToRef(this._transformMatrix, this._tmpMeasureA);\n            // get the boudning box of the current measure and last frames measure in global space and invalidate it\n            // the previous measure is used to properly clear a control that is scaled down\n            Measure.CombineToRef(this._tmpMeasureA, this._prevCurrentMeasureTransformedIntoGlobalSpace, this._tmpMeasureA);\n            // Expand rect based on shadows\n            const shadowOffsetX = this.shadowOffsetX;\n            const shadowOffsetY = this.shadowOffsetY;\n            const shadowBlur = Math.max(this._previousShadowBlur, this.shadowBlur);\n            const leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\n            const rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\n            const topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\n            const bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\n            const offsetX = this._computeAdditionnalOffsetX();\n            const offsetY = this._computeAdditionnalOffsetY();\n            this.host.invalidateRect(Math.floor(this._tmpMeasureA.left + leftShadowOffset - offsetX), Math.floor(this._tmpMeasureA.top + topShadowOffset - offsetY), Math.ceil(this._tmpMeasureA.left + this._tmpMeasureA.width + rightShadowOffset + offsetX), Math.ceil(this._tmpMeasureA.top + this._tmpMeasureA.height + bottomShadowOffset + offsetY));\n        }\n    }\n    /**\n     * @internal\n     */\n    _markAsDirty(force = false) {\n        if (!this._isVisible && !force) {\n            return;\n        }\n        this._isDirty = true;\n        this._markMatrixAsDirty();\n        // Redraw only this rectangle\n        if (this._host) {\n            this._host.markAsDirty();\n        }\n    }\n    /** @internal */\n    _markAllAsDirty() {\n        this._markAsDirty();\n        if (this._font) {\n            this._prepareFont();\n        }\n    }\n    /**\n     * @internal\n     */\n    _link(host) {\n        this._host = host;\n        if (this._host) {\n            this.uniqueId = this._host.getScene().getUniqueId();\n        }\n    }\n    /**\n     * @internal\n     */\n    _transform(context) {\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\n            return;\n        }\n        // postTranslate\n        const offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\n        const offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\n        if (context) {\n            context.translate(offsetX, offsetY);\n            // rotate\n            context.rotate(this._rotation);\n            // scale\n            context.scale(this._scaleX, this._scaleY);\n            // preTranslate\n            context.translate(-offsetX, -offsetY);\n        }\n        // Need to update matrices?\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\n            this._cachedOffsetX = offsetX;\n            this._cachedOffsetY = offsetY;\n            this._isMatrixDirty = false;\n            this._flagDescendantsAsMatrixDirty();\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this.parent ? this.parent._transformMatrix : null, this._transformMatrix);\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\n            this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);\n        }\n    }\n    /**\n     * @internal\n     */\n    _renderHighlight(context) {\n        if (!this.isHighlighted) {\n            return;\n        }\n        context.save();\n        context.strokeStyle = this._highlightColor;\n        context.lineWidth = this._highlightLineWidth;\n        this._renderHighlightSpecific(context);\n        context.restore();\n    }\n    /**\n     * @internal\n     */\n    _renderHighlightSpecific(context) {\n        context.strokeRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n    }\n    _getColor(context) {\n        return this.gradient ? this.gradient.getCanvasGradient(context) : this.color;\n    }\n    /**\n     * @internal\n     */\n    _applyStates(context) {\n        if (this._isFontSizeInPercentage) {\n            this._fontSet = true;\n        }\n        if (this._host && this._host.useSmallestIdeal && !this._font) {\n            this._fontSet = true;\n        }\n        if (this._fontSet) {\n            this._prepareFont();\n            this._fontSet = false;\n        }\n        if (this._font) {\n            context.font = this._font;\n        }\n        if (this._color || this.gradient) {\n            context.fillStyle = this._getColor(context);\n        }\n        if (Control.AllowAlphaInheritance) {\n            context.globalAlpha *= this._alpha;\n        }\n        else if (this._alphaSet) {\n            context.globalAlpha = this.parent && !this.parent.renderToIntermediateTexture ? this.parent.alpha * this._alpha : this._alpha;\n        }\n    }\n    /**\n     * @internal\n     */\n    _layout(parentMeasure, context) {\n        if (!this.isDirty && (!this.isVisible || this.notRenderable)) {\n            return false;\n        }\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\n            this.host._numLayoutCalls++;\n            this._currentMeasure.addAndTransformToRef(this._transformMatrix, -this._paddingLeftInPixels | 0, -this._paddingTopInPixels | 0, this._paddingRightInPixels | 0, this._paddingBottomInPixels | 0, this._prevCurrentMeasureTransformedIntoGlobalSpace);\n            context.save();\n            this._applyStates(context);\n            let rebuildCount = 0;\n            do {\n                this._rebuildLayout = false;\n                this._processMeasures(parentMeasure, context);\n                rebuildCount++;\n            } while (this._rebuildLayout && rebuildCount < 3);\n            if (rebuildCount >= 3) {\n                Logger.Error(`Layout cycle detected in GUI (Control name=${this.name}, uniqueId=${this.uniqueId})`);\n            }\n            context.restore();\n            this.invalidateRect();\n            this._evaluateClippingState(parentMeasure);\n        }\n        this._wasDirty = this._isDirty;\n        this._isDirty = false;\n        return true;\n    }\n    /**\n     * @internal\n     */\n    _processMeasures(parentMeasure, context) {\n        this._tempPaddingMeasure.copyFrom(parentMeasure);\n        // Apply padding if in correct mode\n        if (this.parent && this.parent.descendantsOnlyPadding) {\n            this._tempPaddingMeasure.left += this.parent.paddingLeftInPixels;\n            this._tempPaddingMeasure.top += this.parent.paddingTopInPixels;\n            this._tempPaddingMeasure.width -= this.parent.paddingLeftInPixels + this.parent.paddingRightInPixels;\n            this._tempPaddingMeasure.height -= this.parent.paddingTopInPixels + this.parent.paddingBottomInPixels;\n        }\n        this._currentMeasure.copyFrom(this._tempPaddingMeasure);\n        // Let children take some pre-measurement actions\n        this._preMeasure(this._tempPaddingMeasure, context);\n        this._measure();\n        this._computeAlignment(this._tempPaddingMeasure, context);\n        // Convert to int values\n        this._currentMeasure.left = this._currentMeasure.left | 0;\n        this._currentMeasure.top = this._currentMeasure.top | 0;\n        this._currentMeasure.width = this._currentMeasure.width | 0;\n        this._currentMeasure.height = this._currentMeasure.height | 0;\n        // Let children add more features\n        this._additionalProcessing(this._tempPaddingMeasure, context);\n        this._cachedParentMeasure.copyFrom(this._tempPaddingMeasure);\n        this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);\n        if (this.onDirtyObservable.hasObservers()) {\n            this.onDirtyObservable.notifyObservers(this);\n        }\n    }\n    _evaluateClippingState(parentMeasure) {\n        this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);\n        if (this.parent && this.parent.clipChildren) {\n            parentMeasure.transformToRef(this.parent._transformMatrix, this._evaluatedParentMeasure);\n            // Early clip\n            if (this._evaluatedMeasure.left > this._evaluatedParentMeasure.left + this._evaluatedParentMeasure.width) {\n                this._isClipped = true;\n                return;\n            }\n            if (this._evaluatedMeasure.left + this._evaluatedMeasure.width < this._evaluatedParentMeasure.left) {\n                this._isClipped = true;\n                return;\n            }\n            if (this._evaluatedMeasure.top > this._evaluatedParentMeasure.top + this._evaluatedParentMeasure.height) {\n                this._isClipped = true;\n                return;\n            }\n            if (this._evaluatedMeasure.top + this._evaluatedMeasure.height < this._evaluatedParentMeasure.top) {\n                this._isClipped = true;\n                return;\n            }\n        }\n        this._isClipped = false;\n    }\n    /** @internal */\n    _measure() {\n        // Width / Height\n        if (this._width.isPixel) {\n            this._currentMeasure.width = this._width.getValue(this._host);\n        }\n        else {\n            this._currentMeasure.width *= this._width.getValue(this._host);\n        }\n        if (this._height.isPixel) {\n            this._currentMeasure.height = this._height.getValue(this._host);\n        }\n        else {\n            this._currentMeasure.height *= this._height.getValue(this._host);\n        }\n        if (this.fixedRatio !== 0) {\n            if (this._fixedRatioMasterIsWidth) {\n                this._currentMeasure.height = this._currentMeasure.width * this.fixedRatio;\n            }\n            else {\n                this._currentMeasure.width = this._currentMeasure.height * this.fixedRatio;\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    _computeAlignment(parentMeasure, context) {\n        const width = this._currentMeasure.width;\n        const height = this._currentMeasure.height;\n        const parentWidth = parentMeasure.width;\n        const parentHeight = parentMeasure.height;\n        // Left / top\n        let x = 0;\n        let y = 0;\n        switch (this.horizontalAlignment) {\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\n                x = 0;\n                break;\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\n                x = parentWidth - width;\n                break;\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\n                x = (parentWidth - width) / 2;\n                break;\n        }\n        switch (this.verticalAlignment) {\n            case Control.VERTICAL_ALIGNMENT_TOP:\n                y = 0;\n                break;\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\n                y = parentHeight - height;\n                break;\n            case Control.VERTICAL_ALIGNMENT_CENTER:\n                y = (parentHeight - height) / 2;\n                break;\n        }\n        if (!this.descendantsOnlyPadding) {\n            if (this._paddingLeft.isPixel) {\n                this._currentMeasure.left += this._paddingLeft.getValue(this._host);\n                this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\n            }\n            else {\n                this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\n                this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\n            }\n            if (this._paddingRight.isPixel) {\n                this._currentMeasure.width -= this._paddingRight.getValue(this._host);\n            }\n            else {\n                this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\n            }\n            if (this._paddingTop.isPixel) {\n                this._currentMeasure.top += this._paddingTop.getValue(this._host);\n                this._currentMeasure.height -= this._paddingTop.getValue(this._host);\n            }\n            else {\n                this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\n                this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\n            }\n            if (this._paddingBottom.isPixel) {\n                this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\n            }\n            else {\n                this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\n            }\n        }\n        if (this._left.isPixel) {\n            this._currentMeasure.left += this._left.getValue(this._host);\n        }\n        else {\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\n        }\n        if (this._top.isPixel) {\n            this._currentMeasure.top += this._top.getValue(this._host);\n        }\n        else {\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\n        }\n        this._currentMeasure.left += x;\n        this._currentMeasure.top += y;\n    }\n    /**\n     * @internal\n     */\n    _preMeasure(parentMeasure, context) {\n        // Do nothing\n    }\n    /**\n     * @internal\n     */\n    _additionalProcessing(parentMeasure, context) {\n        // Do nothing\n    }\n    /**\n     * @internal\n     */\n    _clipForChildren(context) {\n        // DO nothing\n    }\n    _clip(context, invalidatedRectangle) {\n        context.beginPath();\n        Control._ClipMeasure.copyFrom(this._currentMeasure);\n        if (invalidatedRectangle) {\n            // Rotate the invalidated rect into the control's space\n            invalidatedRectangle.transformToRef(this._invertTransformMatrix, this._tmpMeasureA);\n            // Get the intersection of the rect in context space and the current context\n            const intersection = new Measure(0, 0, 0, 0);\n            intersection.left = Math.max(this._tmpMeasureA.left, this._currentMeasure.left);\n            intersection.top = Math.max(this._tmpMeasureA.top, this._currentMeasure.top);\n            intersection.width = Math.min(this._tmpMeasureA.left + this._tmpMeasureA.width, this._currentMeasure.left + this._currentMeasure.width) - intersection.left;\n            intersection.height = Math.min(this._tmpMeasureA.top + this._tmpMeasureA.height, this._currentMeasure.top + this._currentMeasure.height) - intersection.top;\n            Control._ClipMeasure.copyFrom(intersection);\n        }\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            const shadowOffsetX = this.shadowOffsetX;\n            const shadowOffsetY = this.shadowOffsetY;\n            const shadowBlur = this.shadowBlur;\n            const leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\n            const rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\n            const topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\n            const bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\n            context.rect(Control._ClipMeasure.left + leftShadowOffset, Control._ClipMeasure.top + topShadowOffset, Control._ClipMeasure.width + rightShadowOffset - leftShadowOffset, Control._ClipMeasure.height + bottomShadowOffset - topShadowOffset);\n        }\n        else {\n            context.rect(Control._ClipMeasure.left, Control._ClipMeasure.top, Control._ClipMeasure.width, Control._ClipMeasure.height);\n        }\n        context.clip();\n    }\n    /**\n     * @internal\n     */\n    _render(context, invalidatedRectangle) {\n        if (!this.isVisible || this.notRenderable || this._isClipped) {\n            this._isDirty = false;\n            return false;\n        }\n        this.host._numRenderCalls++;\n        context.save();\n        this._applyStates(context);\n        // Transform\n        this._transform(context);\n        // Clip\n        if (this.clipContent) {\n            this._clip(context, invalidatedRectangle);\n        }\n        if (this.onBeforeDrawObservable.hasObservers()) {\n            this.onBeforeDrawObservable.notifyObservers(this);\n        }\n        if (this.useBitmapCache && !this._wasDirty && this._cacheData) {\n            context.putImageData(this._cacheData, this._currentMeasure.left, this._currentMeasure.top);\n        }\n        else {\n            this._draw(context, invalidatedRectangle);\n        }\n        if (this.useBitmapCache && this._wasDirty) {\n            this._cacheData = context.getImageData(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n        }\n        this._renderHighlight(context);\n        if (this.onAfterDrawObservable.hasObservers()) {\n            this.onAfterDrawObservable.notifyObservers(this);\n        }\n        context.restore();\n        return true;\n    }\n    /**\n     * @internal\n     */\n    _draw(context, invalidatedRectangle) {\n        // Do nothing\n    }\n    /**\n     * Tests if a given coordinates belong to the current control\n     * @param x defines x coordinate to test\n     * @param y defines y coordinate to test\n     * @returns true if the coordinates are inside the control\n     */\n    contains(x, y) {\n        // Invert transform\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\n        x = this._transformedPosition.x;\n        y = this._transformedPosition.y;\n        // Check\n        if (x < this._currentMeasure.left) {\n            return false;\n        }\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\n            return false;\n        }\n        if (y < this._currentMeasure.top) {\n            return false;\n        }\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\n            return false;\n        }\n        if (this.isPointerBlocker) {\n            this._host._shouldBlockPointer = true;\n        }\n        return true;\n    }\n    /**\n     * @internal\n     */\n    _processPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY) {\n        if (!this._isEnabled) {\n            return false;\n        }\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\n            return false;\n        }\n        if (!this.contains(x, y)) {\n            return false;\n        }\n        this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\n        return true;\n    }\n    /**\n     * @internal\n     */\n    _onPointerMove(target, coordinates, pointerId, pi) {\n        const canNotify = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this, pi);\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\n            this.parent._onPointerMove(target, coordinates, pointerId, pi);\n        }\n    }\n    /**\n     * @internal\n     */\n    _onPointerEnter(target, pi) {\n        if (!this._isEnabled) {\n            return false;\n        }\n        if (this._enterCount > 0) {\n            return false;\n        }\n        if (this._enterCount === -1) {\n            // -1 is for touch input, we are now sure we are with a mouse or pencil\n            this._enterCount = 0;\n        }\n        this._enterCount++;\n        const canNotify = this.onPointerEnterObservable.notifyObservers(this, -1, target, this, pi);\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\n            this.parent._onPointerEnter(target, pi);\n        }\n        return true;\n    }\n    /**\n     * @internal\n     */\n    _onPointerOut(target, pi, force = false) {\n        if (!force && (!this._isEnabled || target === this)) {\n            return;\n        }\n        this._enterCount = 0;\n        let canNotify = true;\n        if (!target.isAscendant(this)) {\n            canNotify = this.onPointerOutObservable.notifyObservers(this, -1, target, this, pi);\n        }\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\n            this.parent._onPointerOut(target, pi, force);\n        }\n    }\n    /**\n     * @internal\n     */\n    _onPointerDown(target, coordinates, pointerId, buttonIndex, pi) {\n        // Prevent pointerout to lose control context.\n        // Event redundancy is checked inside the function.\n        this._onPointerEnter(this, pi);\n        if (this._downCount !== 0) {\n            return false;\n        }\n        this._downCount++;\n        this._downPointerIds[pointerId] = true;\n        const canNotify = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\n            this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\n        }\n        if (pi && this.uniqueId !== this._host.rootContainer.uniqueId) {\n            this._host._capturedPointerIds.add(pi.event.pointerId);\n        }\n        return true;\n    }\n    /**\n     * @internal\n     */\n    _onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi) {\n        if (!this._isEnabled) {\n            return;\n        }\n        this._downCount = 0;\n        delete this._downPointerIds[pointerId];\n        let canNotifyClick = notifyClick;\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\n        }\n        const canNotify = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\n            this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick, pi);\n        }\n        if (pi && this.uniqueId !== this._host.rootContainer.uniqueId) {\n            this._host._capturedPointerIds.delete(pi.event.pointerId);\n        }\n    }\n    /**\n     * @internal\n     */\n    _forcePointerUp(pointerId = null) {\n        if (pointerId !== null) {\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\n        }\n        else {\n            for (const key in this._downPointerIds) {\n                this._onPointerUp(this, Vector2.Zero(), +key, 0, true);\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    _onWheelScroll(deltaX, deltaY) {\n        if (!this._isEnabled) {\n            return;\n        }\n        const canNotify = this.onWheelObservable.notifyObservers(new Vector2(deltaX, deltaY));\n        if (canNotify && this.parent != null) {\n            this.parent._onWheelScroll(deltaX, deltaY);\n        }\n    }\n    /** @internal */\n    _onCanvasBlur() { }\n    /**\n     * @internal\n     */\n    _processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY) {\n        if (!this._isEnabled) {\n            return false;\n        }\n        this._dummyVector2.copyFromFloats(x, y);\n        if (type === PointerEventTypes.POINTERMOVE) {\n            this._onPointerMove(this, this._dummyVector2, pointerId, pi);\n            const previousControlOver = this._host._lastControlOver[pointerId];\n            if (previousControlOver && previousControlOver !== this) {\n                previousControlOver._onPointerOut(this, pi);\n            }\n            if (previousControlOver !== this) {\n                this._onPointerEnter(this, pi);\n            }\n            this._host._lastControlOver[pointerId] = this;\n            return true;\n        }\n        if (type === PointerEventTypes.POINTERDOWN) {\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex, pi);\n            this._host._registerLastControlDown(this, pointerId);\n            this._host._lastPickedControl = this;\n            return true;\n        }\n        if (type === PointerEventTypes.POINTERUP) {\n            if (this._host._lastControlDown[pointerId]) {\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true, pi);\n            }\n            delete this._host._lastControlDown[pointerId];\n            return true;\n        }\n        if (type === PointerEventTypes.POINTERWHEEL) {\n            if (this._host._lastControlOver[pointerId]) {\n                this._host._lastControlOver[pointerId]._onWheelScroll(deltaX, deltaY);\n                return true;\n            }\n        }\n        return false;\n    }\n    _prepareFont() {\n        if (!this._font && !this._fontSet) {\n            return;\n        }\n        if (this._style) {\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\n        }\n        else {\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\n        }\n        this._fontOffset = Control._GetFontOffset(this._font);\n        //children need to be refreshed\n        this.getDescendants().forEach((child) => child._markAllAsDirty());\n    }\n    /**\n     * Clones a control and its descendants\n     * @param host the texture where the control will be instantiated. Can be empty, in which case the control will be created on the same texture\n     * @returns the cloned control\n     */\n    clone(host) {\n        const serialization = {};\n        this.serialize(serialization);\n        const controlType = Tools.Instantiate(\"BABYLON.GUI.\" + serialization.className);\n        const cloned = new controlType();\n        cloned.parse(serialization, host);\n        return cloned;\n    }\n    /**\n     * Parses a serialized object into this control\n     * @param serializedObject the object with the serialized properties\n     * @param host the texture where the control will be instantiated. Can be empty, in which case the control will be created on the same texture\n     * @returns this control\n     */\n    parse(serializedObject, host) {\n        SerializationHelper.Parse(() => this, serializedObject, null);\n        this.name = serializedObject.name;\n        this._parseFromContent(serializedObject, host !== null && host !== void 0 ? host : this._host);\n        return this;\n    }\n    /**\n     * Serializes the current control\n     * @param serializationObject defined the JSON serialized object\n     */\n    serialize(serializationObject) {\n        SerializationHelper.Serialize(this, serializationObject);\n        serializationObject.name = this.name;\n        serializationObject.className = this.getClassName();\n        if (this._font) {\n            serializationObject.fontFamily = this._fontFamily;\n            serializationObject.fontSize = this.fontSize;\n            serializationObject.fontWeight = this.fontWeight;\n            serializationObject.fontStyle = this.fontStyle;\n        }\n        if (this._gradient) {\n            serializationObject.gradient = {};\n            this._gradient.serialize(serializationObject.gradient);\n        }\n        // Animations\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\n    }\n    /**\n     * @internal\n     */\n    _parseFromContent(serializedObject, host) {\n        var _a;\n        if (serializedObject.fontFamily) {\n            this.fontFamily = serializedObject.fontFamily;\n        }\n        if (serializedObject.fontSize) {\n            this.fontSize = serializedObject.fontSize;\n        }\n        if (serializedObject.fontWeight) {\n            this.fontWeight = serializedObject.fontWeight;\n        }\n        if (serializedObject.fontStyle) {\n            this.fontStyle = serializedObject.fontStyle;\n        }\n        // Gradient\n        if (serializedObject.gradient) {\n            const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.gradient.className);\n            this._gradient = new className();\n            (_a = this._gradient) === null || _a === void 0 ? void 0 : _a.parse(serializedObject.gradient);\n        }\n        // Animations\n        if (serializedObject.animations) {\n            this.animations = [];\n            for (let animationIndex = 0; animationIndex < serializedObject.animations.length; animationIndex++) {\n                const parsedAnimation = serializedObject.animations[animationIndex];\n                const internalClass = GetClass(\"BABYLON.Animation\");\n                if (internalClass) {\n                    this.animations.push(internalClass.Parse(parsedAnimation));\n                }\n            }\n            if (serializedObject.autoAnimate && this._host && this._host.getScene()) {\n                this._host\n                    .getScene()\n                    .beginAnimation(this, serializedObject.autoAnimateFrom, serializedObject.autoAnimateTo, serializedObject.autoAnimateLoop, serializedObject.autoAnimateSpeed || 1.0);\n            }\n        }\n    }\n    /** Releases associated resources */\n    dispose() {\n        this.onDirtyObservable.clear();\n        this.onBeforeDrawObservable.clear();\n        this.onAfterDrawObservable.clear();\n        this.onPointerDownObservable.clear();\n        this.onPointerEnterObservable.clear();\n        this.onPointerMoveObservable.clear();\n        this.onPointerOutObservable.clear();\n        this.onPointerUpObservable.clear();\n        this.onPointerClickObservable.clear();\n        this.onWheelObservable.clear();\n        if (this._styleObserver && this._style) {\n            this._style.onChangedObservable.remove(this._styleObserver);\n            this._styleObserver = null;\n        }\n        if (this.parent) {\n            this.parent.removeControl(this);\n            this.parent = null;\n        }\n        if (this._host) {\n            const index = this._host._linkedControls.indexOf(this);\n            if (index > -1) {\n                this.linkWithMesh(null);\n            }\n        }\n        // Callback\n        this.onDisposeObservable.notifyObservers(this);\n        this.onDisposeObservable.clear();\n    }\n    /** HORIZONTAL_ALIGNMENT_LEFT */\n    static get HORIZONTAL_ALIGNMENT_LEFT() {\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\n    }\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\n    static get HORIZONTAL_ALIGNMENT_RIGHT() {\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\n    }\n    /** HORIZONTAL_ALIGNMENT_CENTER */\n    static get HORIZONTAL_ALIGNMENT_CENTER() {\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\n    }\n    /** VERTICAL_ALIGNMENT_TOP */\n    static get VERTICAL_ALIGNMENT_TOP() {\n        return Control._VERTICAL_ALIGNMENT_TOP;\n    }\n    /** VERTICAL_ALIGNMENT_BOTTOM */\n    static get VERTICAL_ALIGNMENT_BOTTOM() {\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\n    }\n    /** VERTICAL_ALIGNMENT_CENTER */\n    static get VERTICAL_ALIGNMENT_CENTER() {\n        return Control._VERTICAL_ALIGNMENT_CENTER;\n    }\n    /**\n     * @internal\n     */\n    static _GetFontOffset(font) {\n        if (Control._FontHeightSizes[font]) {\n            return Control._FontHeightSizes[font];\n        }\n        const engine = EngineStore.LastCreatedEngine;\n        if (!engine) {\n            throw new Error(\"Invalid engine. Unable to create a canvas.\");\n        }\n        const result = engine.getFontOffset(font);\n        Control._FontHeightSizes[font] = result;\n        return result;\n    }\n    /**\n     * Creates a Control from parsed data\n     * @param serializedObject defines parsed data\n     * @param host defines the hosting AdvancedDynamicTexture\n     * @returns a new Control\n     */\n    static Parse(serializedObject, host) {\n        const controlType = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.className);\n        const control = SerializationHelper.Parse(() => new controlType(), serializedObject, null);\n        control.name = serializedObject.name;\n        control._parseFromContent(serializedObject, host);\n        return control;\n    }\n    /**\n     * @internal\n     */\n    static drawEllipse(x, y, width, height, context) {\n        context.translate(x, y);\n        context.scale(width, height);\n        context.beginPath();\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\n        context.closePath();\n        context.scale(1 / width, 1 / height);\n        context.translate(-x, -y);\n    }\n    /**\n     * Returns true if the control is ready to be used\n     * @returns\n     */\n    isReady() {\n        // Most controls are ready by default, so the default implementation is to return true\n        return true;\n    }\n}\n/**\n * Gets or sets a boolean indicating if alpha must be an inherited value (false by default)\n */\nControl.AllowAlphaInheritance = false;\nControl._ClipMeasure = new Measure(0, 0, 0, 0);\n// Statics\nControl._HORIZONTAL_ALIGNMENT_LEFT = 0;\nControl._HORIZONTAL_ALIGNMENT_RIGHT = 1;\nControl._HORIZONTAL_ALIGNMENT_CENTER = 2;\nControl._VERTICAL_ALIGNMENT_TOP = 0;\nControl._VERTICAL_ALIGNMENT_BOTTOM = 1;\nControl._VERTICAL_ALIGNMENT_CENTER = 2;\nControl._FontHeightSizes = {};\nControl.AddHeader = () => { };\n__decorate([\n    serialize()\n], Control.prototype, \"metadata\", void 0);\n__decorate([\n    serialize()\n], Control.prototype, \"isHitTestVisible\", void 0);\n__decorate([\n    serialize()\n], Control.prototype, \"isPointerBlocker\", void 0);\n__decorate([\n    serialize()\n], Control.prototype, \"isFocusInvisible\", void 0);\n__decorate([\n    serialize()\n], Control.prototype, \"clipChildren\", void 0);\n__decorate([\n    serialize()\n], Control.prototype, \"clipContent\", void 0);\n__decorate([\n    serialize()\n], Control.prototype, \"useBitmapCache\", void 0);\n__decorate([\n    serialize()\n], Control.prototype, \"shadowOffsetX\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"shadowOffsetY\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"shadowBlur\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"shadowColor\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"hoverCursor\", void 0);\n__decorate([\n    serialize()\n], Control.prototype, \"fontOffset\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"alpha\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"scaleX\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"scaleY\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"rotation\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"transformCenterY\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"transformCenterX\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"horizontalAlignment\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"verticalAlignment\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"fixedRatio\", void 0);\n__decorate([\n    serialize()\n], Control.prototype, \"width\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"height\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"style\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"color\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"gradient\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"zIndex\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"notRenderable\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"isVisible\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"descendantsOnlyPadding\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"paddingLeft\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"paddingRight\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"paddingTop\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"paddingBottom\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"left\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"top\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"linkOffsetX\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"linkOffsetY\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"isEnabled\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"disabledColor\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"disabledColorItem\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"overlapGroup\", void 0);\n__decorate([\n    serialize()\n], Control.prototype, \"overlapDeltaMultiplier\", void 0);\nRegisterClass(\"BABYLON.GUI.Control\", Control);\n//# sourceMappingURL=control.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Container } from \"./container.js\";\nimport { Control } from \"./control.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\n/** Class used to create 2D ellipse containers */\nexport class Ellipse extends Container {\n    /** Gets or sets border thickness */\n    get thickness() {\n        return this._thickness;\n    }\n    set thickness(value) {\n        if (this._thickness === value) {\n            return;\n        }\n        this._thickness = value;\n        this._markAsDirty();\n    }\n    /**\n     * Creates a new Ellipse\n     * @param name defines the control name\n     */\n    constructor(name) {\n        super(name);\n        this.name = name;\n        this._thickness = 1;\n    }\n    _getTypeName() {\n        return \"Ellipse\";\n    }\n    _localDraw(context) {\n        context.save();\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n        }\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\n        if (this._backgroundGradient || this._background) {\n            context.fillStyle = this._getBackgroundColor(context);\n            context.fill();\n        }\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n        if (this._thickness) {\n            if (this.color) {\n                context.strokeStyle = this.color;\n            }\n            context.lineWidth = this._thickness;\n            context.stroke();\n        }\n        context.restore();\n    }\n    _additionalProcessing(parentMeasure, context) {\n        super._additionalProcessing(parentMeasure, context);\n        this._measureForChildren.width -= 2 * this._thickness;\n        this._measureForChildren.height -= 2 * this._thickness;\n        this._measureForChildren.left += this._thickness;\n        this._measureForChildren.top += this._thickness;\n    }\n    _clipForChildren(context) {\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\n        context.clip();\n    }\n    _renderHighlightSpecific(context) {\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2 - this._highlightLineWidth / 2, this._currentMeasure.height / 2 - this._highlightLineWidth / 2, context);\n        context.stroke();\n    }\n}\n__decorate([\n    serialize()\n], Ellipse.prototype, \"thickness\", null);\nRegisterClass(\"BABYLON.GUI.Ellipse\", Ellipse);\n//# sourceMappingURL=ellipse.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { Tools } from \"@babylonjs/core/Misc/tools.js\";\nimport { Control } from \"./control.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\nimport { EngineStore } from \"@babylonjs/core/Engines/engineStore.js\";\n/**\n * Class used to create 2D images\n */\nexport class Image extends Control {\n    /**\n     * Gets a boolean indicating that the content is loaded\n     */\n    get isLoaded() {\n        return this._loaded;\n    }\n    isReady() {\n        return this.isLoaded;\n    }\n    /**\n     * Gets or sets a boolean indicating if pointers should only be validated on pixels with alpha > 0.\n     * Beware using this as this will consume more memory as the image has to be stored twice\n     */\n    get detectPointerOnOpaqueOnly() {\n        return this._detectPointerOnOpaqueOnly;\n    }\n    set detectPointerOnOpaqueOnly(value) {\n        if (this._detectPointerOnOpaqueOnly === value) {\n            return;\n        }\n        this._detectPointerOnOpaqueOnly = value;\n    }\n    /**\n     * Gets or sets the left value for slicing (9-patch)\n     */\n    get sliceLeft() {\n        return this._sliceLeft;\n    }\n    set sliceLeft(value) {\n        if (this._sliceLeft === value) {\n            return;\n        }\n        this._sliceLeft = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets the right value for slicing (9-patch)\n     */\n    get sliceRight() {\n        return this._sliceRight;\n    }\n    set sliceRight(value) {\n        if (this._sliceRight === value) {\n            return;\n        }\n        this._sliceRight = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets the top value for slicing (9-patch)\n     */\n    get sliceTop() {\n        return this._sliceTop;\n    }\n    set sliceTop(value) {\n        if (this._sliceTop === value) {\n            return;\n        }\n        this._sliceTop = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets the bottom value for slicing (9-patch)\n     */\n    get sliceBottom() {\n        return this._sliceBottom;\n    }\n    set sliceBottom(value) {\n        if (this._sliceBottom === value) {\n            return;\n        }\n        this._sliceBottom = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets the left coordinate in the source image\n     */\n    get sourceLeft() {\n        return this._sourceLeft;\n    }\n    set sourceLeft(value) {\n        if (this._sourceLeft === value) {\n            return;\n        }\n        this._sourceLeft = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets the top coordinate in the source image\n     */\n    get sourceTop() {\n        return this._sourceTop;\n    }\n    set sourceTop(value) {\n        if (this._sourceTop === value) {\n            return;\n        }\n        this._sourceTop = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets the width to capture in the source image\n     */\n    get sourceWidth() {\n        return this._sourceWidth;\n    }\n    set sourceWidth(value) {\n        if (this._sourceWidth === value) {\n            return;\n        }\n        this._sourceWidth = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets the height to capture in the source image\n     */\n    get sourceHeight() {\n        return this._sourceHeight;\n    }\n    set sourceHeight(value) {\n        if (this._sourceHeight === value) {\n            return;\n        }\n        this._sourceHeight = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets the image width\n     */\n    get imageWidth() {\n        return this._imageWidth;\n    }\n    /**\n     * Gets the image height\n     */\n    get imageHeight() {\n        return this._imageHeight;\n    }\n    /**\n     * Gets or sets a boolean indicating if nine patch slices (left, top, right, bottom) should be read from image data\n     */\n    get populateNinePatchSlicesFromImage() {\n        return this._populateNinePatchSlicesFromImage;\n    }\n    set populateNinePatchSlicesFromImage(value) {\n        if (this._populateNinePatchSlicesFromImage === value) {\n            return;\n        }\n        this._populateNinePatchSlicesFromImage = value;\n        if (this._populateNinePatchSlicesFromImage && this._loaded) {\n            this._extractNinePatchSliceDataFromImage();\n        }\n    }\n    /** Indicates if the format of the image is SVG */\n    get isSVG() {\n        return this._isSVG;\n    }\n    /** Gets the status of the SVG attributes computation (sourceLeft, sourceTop, sourceWidth, sourceHeight) */\n    get svgAttributesComputationCompleted() {\n        return this._svgAttributesComputationCompleted;\n    }\n    /**\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image\n     */\n    get autoScale() {\n        return this._autoScale;\n    }\n    set autoScale(value) {\n        if (this._autoScale === value) {\n            return;\n        }\n        this._autoScale = value;\n        if (value && this._loaded) {\n            this.synchronizeSizeWithContent();\n        }\n    }\n    /** Gets or sets the stretching mode used by the image */\n    get stretch() {\n        return this._stretch;\n    }\n    set stretch(value) {\n        if (this._stretch === value) {\n            return;\n        }\n        this._stretch = value;\n        this._markAsDirty();\n    }\n    /**\n     * @internal\n     */\n    _rotate90(n, preserveProperties = false) {\n        var _a, _b;\n        const width = this._domImage.width;\n        const height = this._domImage.height;\n        // Should abstract platform instead of using LastCreatedEngine\n        const engine = ((_b = (_a = this._host) === null || _a === void 0 ? void 0 : _a.getScene()) === null || _b === void 0 ? void 0 : _b.getEngine()) || EngineStore.LastCreatedEngine;\n        if (!engine) {\n            throw new Error(\"Invalid engine. Unable to create a canvas.\");\n        }\n        const canvas = engine.createCanvas(height, width);\n        const context = canvas.getContext(\"2d\");\n        context.translate(canvas.width / 2, canvas.height / 2);\n        context.rotate((n * Math.PI) / 2);\n        context.drawImage(this._domImage, 0, 0, width, height, -width / 2, -height / 2, width, height);\n        const dataUrl = canvas.toDataURL(\"image/jpg\");\n        const rotatedImage = new Image(this.name + \"rotated\", dataUrl);\n        if (preserveProperties) {\n            rotatedImage._stretch = this._stretch;\n            rotatedImage._autoScale = this._autoScale;\n            rotatedImage._cellId = this._cellId;\n            rotatedImage._cellWidth = n % 1 ? this._cellHeight : this._cellWidth;\n            rotatedImage._cellHeight = n % 1 ? this._cellWidth : this._cellHeight;\n        }\n        this._handleRotationForSVGImage(this, rotatedImage, n);\n        this._imageDataCache.data = null;\n        return rotatedImage;\n    }\n    _handleRotationForSVGImage(srcImage, dstImage, n) {\n        if (!srcImage._isSVG) {\n            return;\n        }\n        if (srcImage._svgAttributesComputationCompleted) {\n            this._rotate90SourceProperties(srcImage, dstImage, n);\n            this._markAsDirty();\n        }\n        else {\n            srcImage.onSVGAttributesComputedObservable.addOnce(() => {\n                this._rotate90SourceProperties(srcImage, dstImage, n);\n                this._markAsDirty();\n            });\n        }\n    }\n    _rotate90SourceProperties(srcImage, dstImage, n) {\n        let srcLeft = srcImage.sourceLeft, srcTop = srcImage.sourceTop, srcWidth = srcImage.domImage.width, srcHeight = srcImage.domImage.height;\n        let dstLeft = srcLeft, dstTop = srcTop, dstWidth = srcImage.sourceWidth, dstHeight = srcImage.sourceHeight;\n        if (n != 0) {\n            const mult = n < 0 ? -1 : 1;\n            n = n % 4;\n            for (let i = 0; i < Math.abs(n); ++i) {\n                dstLeft = -(srcTop - srcHeight / 2) * mult + srcHeight / 2;\n                dstTop = (srcLeft - srcWidth / 2) * mult + srcWidth / 2;\n                [dstWidth, dstHeight] = [dstHeight, dstWidth];\n                if (n < 0) {\n                    dstTop -= dstHeight;\n                }\n                else {\n                    dstLeft -= dstWidth;\n                }\n                srcLeft = dstLeft;\n                srcTop = dstTop;\n                [srcWidth, srcHeight] = [srcHeight, srcWidth];\n            }\n        }\n        dstImage.sourceLeft = dstLeft;\n        dstImage.sourceTop = dstTop;\n        dstImage.sourceWidth = dstWidth;\n        dstImage.sourceHeight = dstHeight;\n    }\n    _extractNinePatchSliceDataFromImage() {\n        var _a, _b;\n        const width = this._domImage.width;\n        const height = this._domImage.height;\n        if (!this._workingCanvas) {\n            const engine = ((_b = (_a = this._host) === null || _a === void 0 ? void 0 : _a.getScene()) === null || _b === void 0 ? void 0 : _b.getEngine()) || EngineStore.LastCreatedEngine;\n            if (!engine) {\n                throw new Error(\"Invalid engine. Unable to create a canvas.\");\n            }\n            this._workingCanvas = engine.createCanvas(width, height);\n        }\n        const canvas = this._workingCanvas;\n        const context = canvas.getContext(\"2d\");\n        context.drawImage(this._domImage, 0, 0, width, height);\n        const imageData = context.getImageData(0, 0, width, height);\n        // Left and right\n        this._sliceLeft = -1;\n        this._sliceRight = -1;\n        for (let x = 0; x < width; x++) {\n            const alpha = imageData.data[x * 4 + 3];\n            if (alpha > 127 && this._sliceLeft === -1) {\n                this._sliceLeft = x;\n                continue;\n            }\n            if (alpha < 127 && this._sliceLeft > -1) {\n                this._sliceRight = x;\n                break;\n            }\n        }\n        // top and bottom\n        this._sliceTop = -1;\n        this._sliceBottom = -1;\n        for (let y = 0; y < height; y++) {\n            const alpha = imageData.data[y * width * 4 + 3];\n            if (alpha > 127 && this._sliceTop === -1) {\n                this._sliceTop = y;\n                continue;\n            }\n            if (alpha < 127 && this._sliceTop > -1) {\n                this._sliceBottom = y;\n                break;\n            }\n        }\n    }\n    /**\n     * Gets or sets the internal DOM image used to render the control\n     */\n    set domImage(value) {\n        this._domImage = value;\n        this._loaded = false;\n        this._imageDataCache.data = null;\n        if (this._domImage.width) {\n            this._onImageLoaded();\n        }\n        else {\n            this._domImage.onload = () => {\n                this._onImageLoaded();\n            };\n        }\n    }\n    get domImage() {\n        return this._domImage;\n    }\n    _onImageLoaded() {\n        this._imageDataCache.data = null;\n        this._imageWidth = this._domImage.width;\n        this._imageHeight = this._domImage.height;\n        this._loaded = true;\n        if (this._populateNinePatchSlicesFromImage) {\n            this._extractNinePatchSliceDataFromImage();\n        }\n        if (this._autoScale) {\n            this.synchronizeSizeWithContent();\n        }\n        this.onImageLoadedObservable.notifyObservers(this);\n        this._markAsDirty();\n    }\n    /**\n     * Gets the image source url\n     */\n    get source() {\n        return this._source;\n    }\n    /**\n     * Resets the internal Image Element cache. Can reduce memory usage.\n     */\n    static ResetImageCache() {\n        Image.SourceImgCache.clear();\n    }\n    _removeCacheUsage(source) {\n        const value = source && Image.SourceImgCache.get(source);\n        if (value) {\n            value.timesUsed -= 1;\n            // Since the image isn't being used anymore, we can clean it from the cache\n            if (value.timesUsed === 0) {\n                Image.SourceImgCache.delete(source);\n            }\n        }\n    }\n    /**\n     * Gets or sets image source url\n     */\n    set source(value) {\n        var _a, _b;\n        if (this._source === value) {\n            return;\n        }\n        this._removeCacheUsage(this._source);\n        this._loaded = false;\n        this._source = value;\n        this._imageDataCache.data = null;\n        if (value) {\n            value = this._svgCheck(value);\n        }\n        // Should abstract platform instead of using LastCreatedEngine\n        const engine = ((_b = (_a = this._host) === null || _a === void 0 ? void 0 : _a.getScene()) === null || _b === void 0 ? void 0 : _b.getEngine()) || EngineStore.LastCreatedEngine;\n        if (!engine) {\n            throw new Error(\"Invalid engine. Unable to create a canvas.\");\n        }\n        if (value && Image.SourceImgCache.has(value)) {\n            const cachedData = Image.SourceImgCache.get(value);\n            this._domImage = cachedData.img;\n            cachedData.timesUsed += 1;\n            if (cachedData.loaded) {\n                this._onImageLoaded();\n            }\n            else {\n                cachedData.waitingForLoadCallback.push(this._onImageLoaded.bind(this));\n            }\n            return;\n        }\n        this._domImage = engine.createCanvasImage();\n        if (value) {\n            Image.SourceImgCache.set(value, { img: this._domImage, timesUsed: 1, loaded: false, waitingForLoadCallback: [this._onImageLoaded.bind(this)] });\n        }\n        this._domImage.onload = () => {\n            if (value) {\n                const cachedData = Image.SourceImgCache.get(value);\n                if (cachedData) {\n                    cachedData.loaded = true;\n                    for (const waitingCallback of cachedData.waitingForLoadCallback) {\n                        waitingCallback();\n                    }\n                    cachedData.waitingForLoadCallback.length = 0;\n                    return;\n                }\n            }\n            this._onImageLoaded();\n        };\n        if (value) {\n            Tools.SetCorsBehavior(value, this._domImage);\n            Tools.SetReferrerPolicyBehavior(this.referrerPolicy, this._domImage);\n            this._domImage.src = value;\n        }\n    }\n    /**\n     * Checks for svg document with icon id present\n     * @param value\n     */\n    _svgCheck(value) {\n        if (window.SVGSVGElement && value.search(/.svg#/gi) !== -1 && value.indexOf(\"#\") === value.lastIndexOf(\"#\")) {\n            this._isSVG = true;\n            const svgsrc = value.split(\"#\")[0];\n            const elemid = value.split(\"#\")[1];\n            // check if object alr exist in document\n            const svgExist = document.body.querySelector('object[data=\"' + svgsrc + '\"]');\n            if (svgExist) {\n                const svgDoc = svgExist.contentDocument;\n                // get viewbox width and height, get svg document width and height in px\n                if (svgDoc && svgDoc.documentElement) {\n                    const vb = svgDoc.documentElement.getAttribute(\"viewBox\");\n                    const docwidth = Number(svgDoc.documentElement.getAttribute(\"width\"));\n                    const docheight = Number(svgDoc.documentElement.getAttribute(\"height\"));\n                    const elem = svgDoc.getElementById(elemid);\n                    if (elem && vb && docwidth && docheight) {\n                        this._getSVGAttribs(svgExist, elemid);\n                        return value;\n                    }\n                }\n                // wait for object to load\n                svgExist.addEventListener(\"load\", () => {\n                    this._getSVGAttribs(svgExist, elemid);\n                });\n            }\n            else {\n                // create document object\n                const svgImage = document.createElement(\"object\");\n                svgImage.data = svgsrc;\n                svgImage.type = \"image/svg+xml\";\n                svgImage.width = \"0%\";\n                svgImage.height = \"0%\";\n                document.body.appendChild(svgImage);\n                // when the object has loaded, get the element attribs\n                svgImage.onload = () => {\n                    const svgobj = document.body.querySelector('object[data=\"' + svgsrc + '\"]');\n                    if (svgobj) {\n                        this._getSVGAttribs(svgobj, elemid);\n                    }\n                };\n            }\n            return svgsrc;\n        }\n        else {\n            return value;\n        }\n    }\n    /**\n     * Sets sourceLeft, sourceTop, sourceWidth, sourceHeight automatically\n     * given external svg file and icon id\n     * @param svgsrc\n     * @param elemid\n     */\n    _getSVGAttribs(svgsrc, elemid) {\n        const svgDoc = svgsrc.contentDocument;\n        // get viewbox width and height, get svg document width and height in px\n        if (svgDoc && svgDoc.documentElement) {\n            const vb = svgDoc.documentElement.getAttribute(\"viewBox\");\n            const docwidth = Number(svgDoc.documentElement.getAttribute(\"width\"));\n            const docheight = Number(svgDoc.documentElement.getAttribute(\"height\"));\n            // get element bbox and matrix transform\n            const elem = svgDoc.getElementById(elemid);\n            if (vb && docwidth && docheight && elem) {\n                const vb_width = Number(vb.split(\" \")[2]);\n                const vb_height = Number(vb.split(\" \")[3]);\n                const elem_bbox = elem.getBBox();\n                let elem_matrix_a = 1;\n                let elem_matrix_d = 1;\n                let elem_matrix_e = 0;\n                let elem_matrix_f = 0;\n                const mainMatrix = elem.transform.baseVal.consolidate().matrix;\n                if (elem.transform && elem.transform.baseVal.consolidate()) {\n                    elem_matrix_a = mainMatrix.a;\n                    elem_matrix_d = mainMatrix.d;\n                    elem_matrix_e = mainMatrix.e;\n                    elem_matrix_f = mainMatrix.f;\n                }\n                // compute source coordinates and dimensions\n                this.sourceLeft = ((elem_matrix_a * elem_bbox.x + elem_matrix_e) * docwidth) / vb_width;\n                this.sourceTop = ((elem_matrix_d * elem_bbox.y + elem_matrix_f) * docheight) / vb_height;\n                this.sourceWidth = elem_bbox.width * elem_matrix_a * (docwidth / vb_width);\n                this.sourceHeight = elem_bbox.height * elem_matrix_d * (docheight / vb_height);\n                this._svgAttributesComputationCompleted = true;\n                this.onSVGAttributesComputedObservable.notifyObservers(this);\n            }\n        }\n    }\n    /**\n     * Gets or sets the cell width to use when animation sheet is enabled\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image\n     */\n    get cellWidth() {\n        return this._cellWidth;\n    }\n    set cellWidth(value) {\n        if (this._cellWidth === value) {\n            return;\n        }\n        this._cellWidth = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets the cell height to use when animation sheet is enabled\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image\n     */\n    get cellHeight() {\n        return this._cellHeight;\n    }\n    set cellHeight(value) {\n        if (this._cellHeight === value) {\n            return;\n        }\n        this._cellHeight = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image\n     */\n    get cellId() {\n        return this._cellId;\n    }\n    set cellId(value) {\n        if (this._cellId === value) {\n            return;\n        }\n        this._cellId = value;\n        this._markAsDirty();\n    }\n    /**\n     * Creates a new Image\n     * @param name defines the control name\n     * @param url defines the image url\n     */\n    constructor(name, url = null) {\n        super(name);\n        this.name = name;\n        this._workingCanvas = null;\n        this._loaded = false;\n        this._stretch = Image.STRETCH_FILL;\n        this._autoScale = false;\n        this._sourceLeft = 0;\n        this._sourceTop = 0;\n        this._sourceWidth = 0;\n        this._sourceHeight = 0;\n        this._svgAttributesComputationCompleted = false;\n        this._isSVG = false;\n        this._cellWidth = 0;\n        this._cellHeight = 0;\n        this._cellId = -1;\n        this._populateNinePatchSlicesFromImage = false;\n        this._imageDataCache = { data: null, key: \"\" };\n        /**\n         * Observable notified when the content is loaded\n         */\n        this.onImageLoadedObservable = new Observable();\n        /**\n         * Observable notified when _sourceLeft, _sourceTop, _sourceWidth and _sourceHeight are computed\n         */\n        this.onSVGAttributesComputedObservable = new Observable();\n        this.source = url;\n    }\n    /**\n     * Tests if a given coordinates belong to the current control\n     * @param x defines x coordinate to test\n     * @param y defines y coordinate to test\n     * @returns true if the coordinates are inside the control\n     */\n    contains(x, y) {\n        if (!super.contains(x, y)) {\n            return false;\n        }\n        if (!this._detectPointerOnOpaqueOnly || !this._workingCanvas) {\n            return true;\n        }\n        const width = this._currentMeasure.width | 0;\n        const height = this._currentMeasure.height | 0;\n        const key = width + \"_\" + height;\n        let imageData = this._imageDataCache.data;\n        if (!imageData || this._imageDataCache.key !== key) {\n            const canvas = this._workingCanvas;\n            const context = canvas.getContext(\"2d\");\n            this._imageDataCache.data = imageData = context.getImageData(0, 0, width, height).data;\n            this._imageDataCache.key = key;\n        }\n        x = (x - this._currentMeasure.left) | 0;\n        y = (y - this._currentMeasure.top) | 0;\n        const pickedPixel = imageData[(x + y * width) * 4 + 3];\n        return pickedPixel > 0;\n    }\n    _getTypeName() {\n        return \"Image\";\n    }\n    /** Force the control to synchronize with its content */\n    synchronizeSizeWithContent() {\n        if (!this._loaded) {\n            return;\n        }\n        this.width = this._domImage.width + \"px\";\n        this.height = this._domImage.height + \"px\";\n    }\n    _processMeasures(parentMeasure, context) {\n        if (this._loaded) {\n            switch (this._stretch) {\n                case Image.STRETCH_NONE:\n                    break;\n                case Image.STRETCH_FILL:\n                    break;\n                case Image.STRETCH_UNIFORM:\n                    break;\n                case Image.STRETCH_NINE_PATCH:\n                    break;\n                case Image.STRETCH_EXTEND:\n                    if (this._autoScale) {\n                        this.synchronizeSizeWithContent();\n                    }\n                    if (this.parent && this.parent.parent) {\n                        // Will update root size if root is not the top root\n                        this.parent.adaptWidthToChildren = true;\n                        this.parent.adaptHeightToChildren = true;\n                    }\n                    break;\n            }\n        }\n        super._processMeasures(parentMeasure, context);\n    }\n    _prepareWorkingCanvasForOpaqueDetection() {\n        var _a, _b;\n        if (!this._detectPointerOnOpaqueOnly) {\n            return;\n        }\n        const width = this._currentMeasure.width;\n        const height = this._currentMeasure.height;\n        if (!this._workingCanvas) {\n            const engine = ((_b = (_a = this._host) === null || _a === void 0 ? void 0 : _a.getScene()) === null || _b === void 0 ? void 0 : _b.getEngine()) || EngineStore.LastCreatedEngine;\n            if (!engine) {\n                throw new Error(\"Invalid engine. Unable to create a canvas.\");\n            }\n            this._workingCanvas = engine.createCanvas(width, height);\n        }\n        const canvas = this._workingCanvas;\n        const context = canvas.getContext(\"2d\");\n        context.clearRect(0, 0, width, height);\n    }\n    _drawImage(context, sx, sy, sw, sh, tx, ty, tw, th) {\n        context.drawImage(this._domImage, sx, sy, sw, sh, tx, ty, tw, th);\n        if (!this._detectPointerOnOpaqueOnly) {\n            return;\n        }\n        const canvas = this._workingCanvas;\n        context = canvas.getContext(\"2d\");\n        context.drawImage(this._domImage, sx, sy, sw, sh, tx - this._currentMeasure.left, ty - this._currentMeasure.top, tw, th);\n    }\n    _draw(context) {\n        context.save();\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n        }\n        let x, y, width, height;\n        if (this.cellId == -1) {\n            x = this._sourceLeft;\n            y = this._sourceTop;\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\n        }\n        else {\n            const rowCount = this._domImage.naturalWidth / this.cellWidth;\n            const column = (this.cellId / rowCount) >> 0;\n            const row = this.cellId % rowCount;\n            x = this.cellWidth * row;\n            y = this.cellHeight * column;\n            width = this.cellWidth;\n            height = this.cellHeight;\n        }\n        this._prepareWorkingCanvasForOpaqueDetection();\n        this._applyStates(context);\n        if (this._loaded) {\n            switch (this._stretch) {\n                case Image.STRETCH_NONE:\n                    this._drawImage(context, x, y, width, height, this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n                    break;\n                case Image.STRETCH_FILL:\n                    this._drawImage(context, x, y, width, height, this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n                    break;\n                case Image.STRETCH_UNIFORM: {\n                    const hRatio = this._currentMeasure.width / width;\n                    const vRatio = this._currentMeasure.height / height;\n                    const ratio = Math.min(hRatio, vRatio);\n                    const centerX = (this._currentMeasure.width - width * ratio) / 2;\n                    const centerY = (this._currentMeasure.height - height * ratio) / 2;\n                    this._drawImage(context, x, y, width, height, this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\n                    break;\n                }\n                case Image.STRETCH_EXTEND:\n                    this._drawImage(context, x, y, width, height, this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n                    break;\n                case Image.STRETCH_NINE_PATCH:\n                    this._renderNinePatch(context);\n                    break;\n            }\n        }\n        context.restore();\n    }\n    _renderNinePatch(context) {\n        const leftWidth = this._sliceLeft;\n        const topHeight = this._sliceTop;\n        const bottomHeight = this._imageHeight - this._sliceBottom;\n        const rightWidth = this._imageWidth - this._sliceRight;\n        const centerWidth = this._sliceRight - this._sliceLeft;\n        const centerHeight = this._sliceBottom - this._sliceTop;\n        const targetCenterWidth = this._currentMeasure.width - rightWidth - leftWidth + 2;\n        const targetCenterHeight = this._currentMeasure.height - bottomHeight - topHeight + 2;\n        const centerLeftOffset = this._currentMeasure.left + leftWidth - 1;\n        const centerTopOffset = this._currentMeasure.top + topHeight - 1;\n        const rightOffset = this._currentMeasure.left + this._currentMeasure.width - rightWidth;\n        const bottomOffset = this._currentMeasure.top + this._currentMeasure.height - bottomHeight;\n        //Top Left\n        this._drawImage(context, 0, 0, leftWidth, topHeight, this._currentMeasure.left, this._currentMeasure.top, leftWidth, topHeight);\n        //Top\n        context.clearRect(centerLeftOffset, this._currentMeasure.top, targetCenterWidth, topHeight);\n        this._drawImage(context, this._sliceLeft, 0, centerWidth, topHeight, centerLeftOffset, this._currentMeasure.top, targetCenterWidth, topHeight);\n        //Top Right\n        context.clearRect(rightOffset, this._currentMeasure.top, rightWidth, topHeight);\n        this._drawImage(context, this._sliceRight, 0, rightWidth, topHeight, rightOffset, this._currentMeasure.top, rightWidth, topHeight);\n        //Left\n        context.clearRect(this._currentMeasure.left, centerTopOffset, leftWidth, targetCenterHeight);\n        this._drawImage(context, 0, this._sliceTop, leftWidth, centerHeight, this._currentMeasure.left, centerTopOffset, leftWidth, targetCenterHeight);\n        // Center\n        context.clearRect(centerLeftOffset, centerTopOffset, targetCenterWidth, targetCenterHeight);\n        this._drawImage(context, this._sliceLeft, this._sliceTop, centerWidth, centerHeight, centerLeftOffset, centerTopOffset, targetCenterWidth, targetCenterHeight);\n        //Right\n        context.clearRect(rightOffset, centerTopOffset, rightWidth, targetCenterHeight);\n        this._drawImage(context, this._sliceRight, this._sliceTop, rightWidth, centerHeight, rightOffset, centerTopOffset, rightWidth, targetCenterHeight);\n        //Bottom Left\n        context.clearRect(this._currentMeasure.left, bottomOffset, leftWidth, bottomHeight);\n        this._drawImage(context, 0, this._sliceBottom, leftWidth, bottomHeight, this._currentMeasure.left, bottomOffset, leftWidth, bottomHeight);\n        //Bottom\n        context.clearRect(centerLeftOffset, bottomOffset, targetCenterWidth, bottomHeight);\n        this._drawImage(context, this.sliceLeft, this._sliceBottom, centerWidth, bottomHeight, centerLeftOffset, bottomOffset, targetCenterWidth, bottomHeight);\n        //Bottom Right\n        context.clearRect(rightOffset, bottomOffset, rightWidth, bottomHeight);\n        this._drawImage(context, this._sliceRight, this._sliceBottom, rightWidth, bottomHeight, rightOffset, bottomOffset, rightWidth, bottomHeight);\n    }\n    dispose() {\n        super.dispose();\n        this.onImageLoadedObservable.clear();\n        this.onSVGAttributesComputedObservable.clear();\n        this._removeCacheUsage(this._source);\n    }\n}\n/**\n * Cache of images to avoid loading the same image multiple times\n */\nImage.SourceImgCache = new Map();\n// Static\n/** STRETCH_NONE */\nImage.STRETCH_NONE = 0;\n/** STRETCH_FILL */\nImage.STRETCH_FILL = 1;\n/** STRETCH_UNIFORM */\nImage.STRETCH_UNIFORM = 2;\n/** STRETCH_EXTEND */\nImage.STRETCH_EXTEND = 3;\n/** NINE_PATCH */\nImage.STRETCH_NINE_PATCH = 4;\n__decorate([\n    serialize()\n], Image.prototype, \"detectPointerOnOpaqueOnly\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"sliceLeft\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"sliceRight\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"sliceTop\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"sliceBottom\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"sourceLeft\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"sourceTop\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"sourceWidth\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"sourceHeight\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"populateNinePatchSlicesFromImage\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"autoScale\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"stretch\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"source\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"cellWidth\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"cellHeight\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"cellId\", null);\nRegisterClass(\"BABYLON.GUI.Image\", Image);\n//# sourceMappingURL=image.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh.js\";\nimport { Control } from \"./control.js\";\nimport { MultiLinePoint } from \"../multiLinePoint.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\n/**\n * Class used to create multi line control\n */\nexport class MultiLine extends Control {\n    /**\n     * Creates a new MultiLine\n     * @param name defines the control name\n     */\n    constructor(name) {\n        super(name);\n        this.name = name;\n        this._lineWidth = 1;\n        /** Function called when a point is updated */\n        this.onPointUpdate = () => {\n            this._markAsDirty();\n        };\n        this._automaticSize = true;\n        this.isHitTestVisible = false;\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n        this._dash = [];\n        this._points = [];\n    }\n    /** Gets or sets dash pattern */\n    get dash() {\n        return this._dash;\n    }\n    set dash(value) {\n        if (this._dash === value) {\n            return;\n        }\n        this._dash = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets point stored at specified index\n     * @param index defines the index to look for\n     * @returns the requested point if found\n     */\n    getAt(index) {\n        if (!this._points[index]) {\n            this._points[index] = new MultiLinePoint(this);\n        }\n        return this._points[index];\n    }\n    /**\n     * Adds new points to the point collection\n     * @param items defines the list of items (mesh, control or 2d coordinates) to add\n     * @returns the list of created MultiLinePoint\n     */\n    add(...items) {\n        return items.map((item) => this.push(item));\n    }\n    /**\n     * Adds a new point to the point collection\n     * @param item defines the item (mesh, control or 2d coordinates) to add\n     * @returns the created MultiLinePoint\n     */\n    push(item) {\n        const point = this.getAt(this._points.length);\n        if (item == null) {\n            return point;\n        }\n        if (item instanceof AbstractMesh) {\n            point.mesh = item;\n        }\n        else if (item instanceof Control) {\n            point.control = item;\n        }\n        else if (item.x != null && item.y != null) {\n            point.x = item.x;\n            point.y = item.y;\n        }\n        return point;\n    }\n    /**\n     * Remove a specific value or point from the active point collection\n     * @param value defines the value or point to remove\n     */\n    remove(value) {\n        let index;\n        if (value instanceof MultiLinePoint) {\n            index = this._points.indexOf(value);\n            if (index === -1) {\n                return;\n            }\n        }\n        else {\n            index = value;\n        }\n        const point = this._points[index];\n        if (!point) {\n            return;\n        }\n        point.dispose();\n        this._points.splice(index, 1);\n    }\n    /**\n     * Resets this object to initial state (no point)\n     */\n    reset() {\n        while (this._points.length > 0) {\n            this.remove(this._points.length - 1);\n        }\n    }\n    /**\n     * Resets all links\n     */\n    resetLinks() {\n        this._points.forEach((point) => {\n            if (point != null) {\n                point.resetLinks();\n            }\n        });\n    }\n    /** Gets or sets line width */\n    get lineWidth() {\n        return this._lineWidth;\n    }\n    set lineWidth(value) {\n        if (this._lineWidth === value) {\n            return;\n        }\n        this._lineWidth = value;\n        this._markAsDirty();\n    }\n    set horizontalAlignment(value) {\n        return;\n    }\n    set verticalAlignment(value) {\n        return;\n    }\n    _getTypeName() {\n        return \"MultiLine\";\n    }\n    _draw(context) {\n        context.save();\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n        }\n        this._applyStates(context);\n        context.strokeStyle = this.color;\n        context.lineWidth = this._lineWidth;\n        context.setLineDash(this._dash);\n        context.beginPath();\n        let first = true; //first index is not necessarily 0\n        let previousPoint;\n        this._points.forEach((point) => {\n            if (!point) {\n                return;\n            }\n            if (first) {\n                context.moveTo(point._point.x, point._point.y);\n                first = false;\n            }\n            else {\n                if (point._point.z < 1 && previousPoint.z < 1) {\n                    context.lineTo(point._point.x, point._point.y);\n                }\n                else {\n                    context.moveTo(point._point.x, point._point.y);\n                }\n            }\n            previousPoint = point._point;\n        });\n        context.stroke();\n        context.restore();\n    }\n    _additionalProcessing() {\n        this._minX = null;\n        this._minY = null;\n        this._maxX = null;\n        this._maxY = null;\n        this._points.forEach((point) => {\n            if (!point) {\n                return;\n            }\n            point.translate();\n            if (this._minX == null || point._point.x < this._minX) {\n                this._minX = point._point.x;\n            }\n            if (this._minY == null || point._point.y < this._minY) {\n                this._minY = point._point.y;\n            }\n            if (this._maxX == null || point._point.x > this._maxX) {\n                this._maxX = point._point.x;\n            }\n            if (this._maxY == null || point._point.y > this._maxY) {\n                this._maxY = point._point.y;\n            }\n        });\n        if (this._minX == null) {\n            this._minX = 0;\n        }\n        if (this._minY == null) {\n            this._minY = 0;\n        }\n        if (this._maxX == null) {\n            this._maxX = 0;\n        }\n        if (this._maxY == null) {\n            this._maxY = 0;\n        }\n    }\n    _measure() {\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\n            return;\n        }\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\n    }\n    _computeAlignment() {\n        if (this._minX == null || this._minY == null) {\n            return;\n        }\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\n    }\n    dispose() {\n        this.reset();\n        super.dispose();\n    }\n}\n__decorate([\n    serialize()\n], MultiLine.prototype, \"dash\", null);\nRegisterClass(\"BABYLON.GUI.MultiLine\", MultiLine);\n//# sourceMappingURL=multiLine.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Tools } from \"@babylonjs/core/Misc/tools.js\";\nimport { Container } from \"./container.js\";\nimport { Control } from \"./control.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\n/**\n * Class used to create a 2D stack panel container\n */\nexport class StackPanel extends Container {\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\n    get isVertical() {\n        return this._isVertical;\n    }\n    set isVertical(value) {\n        if (this._isVertical === value) {\n            return;\n        }\n        this._isVertical = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets the spacing (in pixels) between each child.\n     */\n    get spacing() {\n        return this._spacing;\n    }\n    set spacing(value) {\n        if (this._spacing === value) {\n            return;\n        }\n        this._spacing = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets panel width.\n     * This value should not be set when in horizontal mode as it will be computed automatically\n     */\n    set width(value) {\n        if (!this._doNotTrackManualChanges) {\n            this._manualWidth = true;\n        }\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n        if (this._width.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    get width() {\n        return this._width.toString(this._host);\n    }\n    /**\n     * Gets or sets panel height.\n     * This value should not be set when in vertical mode as it will be computed automatically\n     */\n    set height(value) {\n        if (!this._doNotTrackManualChanges) {\n            this._manualHeight = true;\n        }\n        if (this._height.toString(this._host) === value) {\n            return;\n        }\n        if (this._height.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    get height() {\n        return this._height.toString(this._host);\n    }\n    /**\n     * Creates a new StackPanel\n     * @param name defines control name\n     */\n    constructor(name) {\n        super(name);\n        this.name = name;\n        this._isVertical = true;\n        this._manualWidth = false;\n        this._manualHeight = false;\n        this._doNotTrackManualChanges = false;\n        this._spacing = 0;\n        /**\n         * Gets or sets a boolean indicating that layout warnings should be ignored\n         */\n        this.ignoreLayoutWarnings = false;\n    }\n    _getTypeName() {\n        return \"StackPanel\";\n    }\n    /**\n     * @internal\n     */\n    _preMeasure(parentMeasure, context) {\n        for (const child of this._children) {\n            if (this._isVertical) {\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n            }\n            else {\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n            }\n        }\n        super._preMeasure(parentMeasure, context);\n    }\n    _additionalProcessing(parentMeasure, context) {\n        super._additionalProcessing(parentMeasure, context);\n        this._measureForChildren.copyFrom(parentMeasure);\n        this._measureForChildren.left = this._currentMeasure.left;\n        this._measureForChildren.top = this._currentMeasure.top;\n        if (!this.isVertical || this._manualWidth) {\n            this._measureForChildren.width = this._currentMeasure.width;\n        }\n        if (this.isVertical || this._manualHeight) {\n            this._measureForChildren.height = this._currentMeasure.height;\n        }\n    }\n    _postMeasure() {\n        let stackWidth = 0;\n        let stackHeight = 0;\n        const childrenCount = this._children.length;\n        for (let index = 0; index < childrenCount; index++) {\n            const child = this._children[index];\n            if (!child.isVisible || child.notRenderable) {\n                continue;\n            }\n            if (this._isVertical) {\n                if (child.top !== stackHeight + \"px\") {\n                    child.top = stackHeight + \"px\";\n                    this._rebuildLayout = true;\n                    child._top.ignoreAdaptiveScaling = true;\n                }\n                if (child._height.isPercentage && !child._automaticSize) {\n                    if (!this.ignoreLayoutWarnings) {\n                        Tools.Warn(`Control (Name:${child.name}, UniqueId:${child.uniqueId}) is using height in percentage mode inside a vertical StackPanel`);\n                    }\n                }\n                else {\n                    stackHeight += child._currentMeasure.height + child._paddingTopInPixels + child._paddingBottomInPixels + (index < childrenCount - 1 ? this._spacing : 0);\n                }\n            }\n            else {\n                if (child.left !== stackWidth + \"px\") {\n                    child.left = stackWidth + \"px\";\n                    this._rebuildLayout = true;\n                    child._left.ignoreAdaptiveScaling = true;\n                }\n                if (child._width.isPercentage && !child._automaticSize) {\n                    if (!this.ignoreLayoutWarnings) {\n                        Tools.Warn(`Control (Name:${child.name}, UniqueId:${child.uniqueId}) is using width in percentage mode inside a horizontal StackPanel`);\n                    }\n                }\n                else {\n                    stackWidth += child._currentMeasure.width + child._paddingLeftInPixels + child._paddingRightInPixels + (index < childrenCount - 1 ? this._spacing : 0);\n                }\n            }\n        }\n        stackWidth += this._paddingLeftInPixels + this._paddingRightInPixels;\n        stackHeight += this._paddingTopInPixels + this._paddingBottomInPixels;\n        this._doNotTrackManualChanges = true;\n        // Let stack panel width or height default to stackHeight and stackWidth if dimensions are not specified.\n        // User can now define their own height and width for stack panel.\n        let panelWidthChanged = false;\n        let panelHeightChanged = false;\n        if ((!this._manualHeight || this.adaptHeightToChildren) && this._isVertical) {\n            // do not specify height if strictly defined by user\n            const previousHeight = this.height;\n            this.height = stackHeight + \"px\";\n            panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\n        }\n        if ((!this._manualWidth || this.adaptWidthToChildren) && !this._isVertical) {\n            // do not specify width if strictly defined by user\n            const previousWidth = this.width;\n            this.width = stackWidth + \"px\";\n            panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\n        }\n        if (panelHeightChanged) {\n            this._height.ignoreAdaptiveScaling = true;\n        }\n        if (panelWidthChanged) {\n            this._width.ignoreAdaptiveScaling = true;\n        }\n        this._doNotTrackManualChanges = false;\n        if (panelWidthChanged || panelHeightChanged) {\n            this._rebuildLayout = true;\n        }\n        super._postMeasure();\n    }\n    /**\n     * Serializes the current control\n     * @param serializationObject defined the JSON serialized object\n     */\n    serialize(serializationObject) {\n        super.serialize(serializationObject);\n        serializationObject.manualWidth = this._manualWidth;\n        serializationObject.manualHeight = this._manualHeight;\n    }\n    /**\n     * @internal\n     */\n    _parseFromContent(serializedObject, host) {\n        this._manualWidth = serializedObject.manualWidth;\n        this._manualHeight = serializedObject.manualHeight;\n        super._parseFromContent(serializedObject, host);\n    }\n}\n__decorate([\n    serialize()\n], StackPanel.prototype, \"ignoreLayoutWarnings\", void 0);\n__decorate([\n    serialize()\n], StackPanel.prototype, \"isVertical\", null);\n__decorate([\n    serialize()\n], StackPanel.prototype, \"spacing\", null);\n__decorate([\n    serialize()\n], StackPanel.prototype, \"width\", null);\n__decorate([\n    serialize()\n], StackPanel.prototype, \"height\", null);\nRegisterClass(\"BABYLON.GUI.StackPanel\", StackPanel);\n//# sourceMappingURL=stackPanel.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { ValueAndUnit } from \"../valueAndUnit.js\";\nimport { Control } from \"./control.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\nimport { EngineStore } from \"@babylonjs/core/Engines/engineStore.js\";\n/**\n * Enum that determines the text-wrapping mode to use.\n */\nexport var TextWrapping;\n(function (TextWrapping) {\n    /**\n     * Clip the text when it's larger than Control.width; this is the default mode.\n     */\n    TextWrapping[TextWrapping[\"Clip\"] = 0] = \"Clip\";\n    /**\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\n     */\n    TextWrapping[TextWrapping[\"WordWrap\"] = 1] = \"WordWrap\";\n    /**\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\n     */\n    TextWrapping[TextWrapping[\"Ellipsis\"] = 2] = \"Ellipsis\";\n    /**\n     * Wrap the text word-wise and clip the text when the text's height is larger than the Control.height, and shrink the last line with trailing … .\n     */\n    TextWrapping[TextWrapping[\"WordWrapEllipsis\"] = 3] = \"WordWrapEllipsis\";\n})(TextWrapping || (TextWrapping = {}));\n/**\n * Class used to create text block control\n */\nexport class TextBlock extends Control {\n    /**\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\n     */\n    get lines() {\n        return this._lines;\n    }\n    /**\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\n     */\n    get resizeToFit() {\n        return this._resizeToFit;\n    }\n    /**\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\n     */\n    set resizeToFit(value) {\n        if (this._resizeToFit === value) {\n            return;\n        }\n        this._resizeToFit = value;\n        if (this._resizeToFit) {\n            this._width.ignoreAdaptiveScaling = true;\n            this._height.ignoreAdaptiveScaling = true;\n        }\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets a boolean indicating if text must be wrapped\n     */\n    get textWrapping() {\n        return this._textWrapping;\n    }\n    /**\n     * Gets or sets a boolean indicating if text must be wrapped\n     */\n    set textWrapping(value) {\n        if (this._textWrapping === value) {\n            return;\n        }\n        this._textWrapping = +value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets text to display\n     */\n    get text() {\n        return this._text;\n    }\n    /**\n     * Gets or sets text to display\n     */\n    set text(value) {\n        if (this._text === value) {\n            return;\n        }\n        this._text = value + \"\"; // Making sure it is a text\n        this._markAsDirty();\n        this.onTextChangedObservable.notifyObservers(this);\n    }\n    /**\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\n     */\n    get textHorizontalAlignment() {\n        return this._textHorizontalAlignment;\n    }\n    /**\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\n     */\n    set textHorizontalAlignment(value) {\n        if (this._textHorizontalAlignment === value) {\n            return;\n        }\n        this._textHorizontalAlignment = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\n     */\n    get textVerticalAlignment() {\n        return this._textVerticalAlignment;\n    }\n    /**\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\n     */\n    set textVerticalAlignment(value) {\n        if (this._textVerticalAlignment === value) {\n            return;\n        }\n        this._textVerticalAlignment = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets line spacing value\n     */\n    set lineSpacing(value) {\n        if (this._lineSpacing.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /**\n     * Gets or sets line spacing value\n     */\n    get lineSpacing() {\n        return this._lineSpacing.toString(this._host);\n    }\n    /**\n     * Gets or sets outlineWidth of the text to display\n     */\n    get outlineWidth() {\n        return this._outlineWidth;\n    }\n    /**\n     * Gets or sets outlineWidth of the text to display\n     */\n    set outlineWidth(value) {\n        if (this._outlineWidth === value) {\n            return;\n        }\n        this._outlineWidth = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets a boolean indicating that text must have underline\n     */\n    get underline() {\n        return this._underline;\n    }\n    /**\n     * Gets or sets a boolean indicating that text must have underline\n     */\n    set underline(value) {\n        if (this._underline === value) {\n            return;\n        }\n        this._underline = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets an boolean indicating that text must be crossed out\n     */\n    get lineThrough() {\n        return this._lineThrough;\n    }\n    /**\n     * Gets or sets an boolean indicating that text must be crossed out\n     */\n    set lineThrough(value) {\n        if (this._lineThrough === value) {\n            return;\n        }\n        this._lineThrough = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets outlineColor of the text to display\n     */\n    get outlineColor() {\n        return this._outlineColor;\n    }\n    /**\n     * Gets or sets outlineColor of the text to display\n     */\n    set outlineColor(value) {\n        if (this._outlineColor === value) {\n            return;\n        }\n        this._outlineColor = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets word divider\n     */\n    get wordDivider() {\n        return this._wordDivider;\n    }\n    /**\n     * Gets or sets word divider\n     */\n    set wordDivider(value) {\n        if (this._wordDivider === value) {\n            return;\n        }\n        this._wordDivider = value;\n        this._markAsDirty();\n    }\n    /**\n     * By default, if a text block has text wrapping other than Clip, its width\n     * is not resized even if resizeToFit = true. This parameter forces the width\n     * to be resized.\n     */\n    get forceResizeWidth() {\n        return this._forceResizeWidth;\n    }\n    set forceResizeWidth(value) {\n        if (this._forceResizeWidth === value) {\n            return;\n        }\n        this._forceResizeWidth = value;\n        this._markAsDirty();\n    }\n    /**\n     * Creates a new TextBlock object\n     * @param name defines the name of the control\n     * @param text defines the text to display (empty string by default)\n     */\n    constructor(\n    /**\n     * Defines the name of the control\n     */\n    name, text = \"\") {\n        super(name);\n        this.name = name;\n        this._text = \"\";\n        this._textWrapping = TextWrapping.Clip;\n        this._textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\n        this._textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n        this._resizeToFit = false;\n        this._lineSpacing = new ValueAndUnit(0);\n        this._outlineWidth = 0;\n        this._outlineColor = \"white\";\n        this._underline = false;\n        this._lineThrough = false;\n        this._wordDivider = \" \";\n        this._forceResizeWidth = false;\n        /**\n         * An event triggered after the text is changed\n         */\n        this.onTextChangedObservable = new Observable();\n        /**\n         * An event triggered after the text was broken up into lines\n         */\n        this.onLinesReadyObservable = new Observable();\n        this._linesTemp = [];\n        this.text = text;\n    }\n    _getTypeName() {\n        return \"TextBlock\";\n    }\n    _processMeasures(parentMeasure, context) {\n        if (!this._fontOffset || this.isDirty) {\n            this._fontOffset = Control._GetFontOffset(context.font);\n        }\n        super._processMeasures(parentMeasure, context);\n        // Prepare lines\n        this._lines = this._breakLines(this._currentMeasure.width, this._currentMeasure.height, context);\n        this.onLinesReadyObservable.notifyObservers(this);\n        let maxLineWidth = 0;\n        for (let i = 0; i < this._lines.length; i++) {\n            const line = this._lines[i];\n            if (line.width > maxLineWidth) {\n                maxLineWidth = line.width;\n            }\n        }\n        if (this._resizeToFit) {\n            if (this._textWrapping === TextWrapping.Clip || this._forceResizeWidth) {\n                const newWidth = Math.ceil(this._paddingLeftInPixels + this._paddingRightInPixels + maxLineWidth);\n                if (newWidth !== this._width.getValueInPixel(this._host, this._tempParentMeasure.width)) {\n                    this._width.updateInPlace(newWidth, ValueAndUnit.UNITMODE_PIXEL);\n                    this._rebuildLayout = true;\n                }\n            }\n            let newHeight = (this._paddingTopInPixels + this._paddingBottomInPixels + this._fontOffset.height * this._lines.length) | 0;\n            if (this._lines.length > 0 && this._lineSpacing.internalValue !== 0) {\n                let lineSpacing = 0;\n                if (this._lineSpacing.isPixel) {\n                    lineSpacing = this._lineSpacing.getValue(this._host);\n                }\n                else {\n                    lineSpacing = this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\n                }\n                newHeight += (this._lines.length - 1) * lineSpacing;\n            }\n            if (newHeight !== this._height.internalValue) {\n                this._height.updateInPlace(newHeight, ValueAndUnit.UNITMODE_PIXEL);\n                this._rebuildLayout = true;\n            }\n        }\n    }\n    _drawText(text, textWidth, y, context) {\n        const width = this._currentMeasure.width;\n        let x = 0;\n        switch (this._textHorizontalAlignment) {\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\n                x = 0;\n                break;\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\n                x = width - textWidth;\n                break;\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\n                x = (width - textWidth) / 2;\n                break;\n        }\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n        }\n        if (this.outlineWidth) {\n            context.strokeText(text, this._currentMeasure.left + x, y);\n        }\n        context.fillText(text, this._currentMeasure.left + x, y);\n        if (this._underline) {\n            context.beginPath();\n            context.lineWidth = Math.round(this.fontSizeInPixels * 0.05);\n            context.moveTo(this._currentMeasure.left + x, y + 3);\n            context.lineTo(this._currentMeasure.left + x + textWidth, y + 3);\n            context.stroke();\n            context.closePath();\n        }\n        if (this._lineThrough) {\n            context.beginPath();\n            context.lineWidth = Math.round(this.fontSizeInPixels * 0.05);\n            context.moveTo(this._currentMeasure.left + x, y - this.fontSizeInPixels / 3);\n            context.lineTo(this._currentMeasure.left + x + textWidth, y - this.fontSizeInPixels / 3);\n            context.stroke();\n            context.closePath();\n        }\n    }\n    /**\n     * @internal\n     */\n    _draw(context) {\n        context.save();\n        this._applyStates(context);\n        // Render lines\n        this._renderLines(context);\n        context.restore();\n    }\n    _applyStates(context) {\n        super._applyStates(context);\n        if (this.outlineWidth) {\n            context.lineWidth = this.outlineWidth;\n            context.strokeStyle = this.outlineColor;\n            context.lineJoin = \"miter\";\n            context.miterLimit = 2;\n        }\n    }\n    _breakLines(refWidth, refHeight, context) {\n        this._linesTemp.length = 0;\n        const _lines = this.text.split(\"\\n\");\n        if (this._textWrapping === TextWrapping.Ellipsis) {\n            for (const _line of _lines) {\n                this._linesTemp.push(this._parseLineEllipsis(_line, refWidth, context));\n            }\n        }\n        else if (this._textWrapping === TextWrapping.WordWrap) {\n            for (const _line of _lines) {\n                this._linesTemp.push(...this._parseLineWordWrap(_line, refWidth, context));\n            }\n        }\n        else if (this._textWrapping === TextWrapping.WordWrapEllipsis) {\n            for (const _line of _lines) {\n                this._linesTemp.push(...this._parseLineWordWrapEllipsis(_line, refWidth, refHeight, context));\n            }\n        }\n        else {\n            for (const _line of _lines) {\n                this._linesTemp.push(this._parseLine(_line, context));\n            }\n        }\n        return this._linesTemp;\n    }\n    _parseLine(line = \"\", context) {\n        return { text: line, width: this._getTextMetricsWidth(context.measureText(line)) };\n    }\n    //Calculate how many characters approximately we need to remove\n    _getCharsToRemove(lineWidth, width, lineLength) {\n        const diff = lineWidth > width ? lineWidth - width : 0;\n        // This isn't exact unless the font is monospaced\n        const charWidth = lineWidth / lineLength;\n        const removeChars = Math.max(Math.floor(diff / charWidth), 1);\n        return removeChars;\n    }\n    _parseLineEllipsis(line = \"\", width, context) {\n        let lineWidth = this._getTextMetricsWidth(context.measureText(line));\n        let removeChars = this._getCharsToRemove(lineWidth, width, line.length);\n        // unicode support. split('') does not work with unicode!\n        // make sure Array.from is available\n        const characters = Array.from && Array.from(line);\n        if (!characters) {\n            // no array.from, use the old method\n            while (line.length > 2 && lineWidth > width) {\n                line = line.slice(0, -removeChars);\n                lineWidth = this._getTextMetricsWidth(context.measureText(line + \"…\"));\n                removeChars = this._getCharsToRemove(lineWidth, width, line.length);\n            }\n            // Add on the end\n            line += \"…\";\n        }\n        else {\n            while (characters.length && lineWidth > width) {\n                characters.splice(characters.length - removeChars, removeChars);\n                line = `${characters.join(\"\")}…`;\n                lineWidth = this._getTextMetricsWidth(context.measureText(line));\n                removeChars = this._getCharsToRemove(lineWidth, width, line.length);\n            }\n        }\n        return { text: line, width: lineWidth };\n    }\n    _getTextMetricsWidth(textMetrics) {\n        if (textMetrics.actualBoundingBoxLeft !== undefined) {\n            return Math.abs(textMetrics.actualBoundingBoxLeft) + Math.abs(textMetrics.actualBoundingBoxRight);\n        }\n        return textMetrics.width;\n    }\n    _parseLineWordWrap(line = \"\", width, context) {\n        const lines = [];\n        const words = this.wordSplittingFunction ? this.wordSplittingFunction(line) : line.split(this._wordDivider);\n        let lineWidth = this._getTextMetricsWidth(context.measureText(line));\n        for (let n = 0; n < words.length; n++) {\n            const testLine = n > 0 ? line + this._wordDivider + words[n] : words[0];\n            const testWidth = this._getTextMetricsWidth(context.measureText(testLine));\n            if (testWidth > width && n > 0) {\n                lines.push({ text: line, width: lineWidth });\n                line = words[n];\n                lineWidth = this._getTextMetricsWidth(context.measureText(line));\n            }\n            else {\n                lineWidth = testWidth;\n                line = testLine;\n            }\n        }\n        lines.push({ text: line, width: lineWidth });\n        return lines;\n    }\n    _parseLineWordWrapEllipsis(line = \"\", width, height, context) {\n        const lines = this._parseLineWordWrap(line, width, context);\n        for (let n = 1; n <= lines.length; n++) {\n            const currentHeight = this._computeHeightForLinesOf(n);\n            if (currentHeight > height && n > 1) {\n                const lastLine = lines[n - 2];\n                const currentLine = lines[n - 1];\n                lines[n - 2] = this._parseLineEllipsis(`${lastLine.text + currentLine.text}`, width, context);\n                const linesToRemove = lines.length - n + 1;\n                for (let i = 0; i < linesToRemove; i++) {\n                    lines.pop();\n                }\n                return lines;\n            }\n        }\n        return lines;\n    }\n    _renderLines(context) {\n        if (!this._fontOffset || !this._lines) {\n            return;\n        }\n        const height = this._currentMeasure.height;\n        let rootY = 0;\n        switch (this._textVerticalAlignment) {\n            case Control.VERTICAL_ALIGNMENT_TOP:\n                rootY = this._fontOffset.ascent;\n                break;\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\n                break;\n            case Control.VERTICAL_ALIGNMENT_CENTER:\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\n                break;\n        }\n        rootY += this._currentMeasure.top;\n        for (let i = 0; i < this._lines.length; i++) {\n            const line = this._lines[i];\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\n                if (this._lineSpacing.isPixel) {\n                    rootY += this._lineSpacing.getValue(this._host);\n                }\n                else {\n                    rootY = rootY + this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\n                }\n            }\n            this._drawText(line.text, line.width, rootY, context);\n            rootY += this._fontOffset.height;\n        }\n    }\n    _computeHeightForLinesOf(lineCount) {\n        let newHeight = this._paddingTopInPixels + this._paddingBottomInPixels + this._fontOffset.height * lineCount;\n        if (lineCount > 0 && this._lineSpacing.internalValue !== 0) {\n            let lineSpacing = 0;\n            if (this._lineSpacing.isPixel) {\n                lineSpacing = this._lineSpacing.getValue(this._host);\n            }\n            else {\n                lineSpacing = this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\n            }\n            newHeight += (lineCount - 1) * lineSpacing;\n        }\n        return newHeight;\n    }\n    /**\n     * Given a width constraint applied on the text block, find the expected height\n     * @returns expected height\n     */\n    computeExpectedHeight() {\n        var _a;\n        if (this.text && this.widthInPixels) {\n            // Should abstract platform instead of using LastCreatedEngine\n            const context = (_a = EngineStore.LastCreatedEngine) === null || _a === void 0 ? void 0 : _a.createCanvas(0, 0).getContext(\"2d\");\n            if (context) {\n                this._applyStates(context);\n                if (!this._fontOffset) {\n                    this._fontOffset = Control._GetFontOffset(context.font);\n                }\n                const lines = this._lines\n                    ? this._lines\n                    : this._breakLines(this.widthInPixels - this._paddingLeftInPixels - this._paddingRightInPixels, this.heightInPixels - this._paddingTopInPixels - this._paddingBottomInPixels, context);\n                return this._computeHeightForLinesOf(lines.length);\n            }\n        }\n        return 0;\n    }\n    dispose() {\n        super.dispose();\n        this.onTextChangedObservable.clear();\n    }\n}\n__decorate([\n    serialize()\n], TextBlock.prototype, \"resizeToFit\", null);\n__decorate([\n    serialize()\n], TextBlock.prototype, \"textWrapping\", null);\n__decorate([\n    serialize()\n], TextBlock.prototype, \"text\", null);\n__decorate([\n    serialize()\n], TextBlock.prototype, \"textHorizontalAlignment\", null);\n__decorate([\n    serialize()\n], TextBlock.prototype, \"textVerticalAlignment\", null);\n__decorate([\n    serialize()\n], TextBlock.prototype, \"lineSpacing\", null);\n__decorate([\n    serialize()\n], TextBlock.prototype, \"outlineWidth\", null);\n__decorate([\n    serialize()\n], TextBlock.prototype, \"underline\", null);\n__decorate([\n    serialize()\n], TextBlock.prototype, \"lineThrough\", null);\n__decorate([\n    serialize()\n], TextBlock.prototype, \"outlineColor\", null);\n__decorate([\n    serialize()\n], TextBlock.prototype, \"wordDivider\", null);\n__decorate([\n    serialize()\n], TextBlock.prototype, \"forceResizeWidth\", null);\nRegisterClass(\"BABYLON.GUI.TextBlock\", TextBlock);\n//# sourceMappingURL=textBlock.js.map","import { Vector2 } from \"@babylonjs/core/Maths/math.vector.js\";\nconst tmpRect = [new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0)];\nconst tmpRect2 = [new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0)];\nconst tmpV1 = new Vector2(0, 0);\nconst tmpV2 = new Vector2(0, 0);\n/**\n * Class used to store 2D control sizes\n */\nexport class Measure {\n    /**\n     * Creates a new measure\n     * @param left defines left coordinate\n     * @param top defines top coordinate\n     * @param width defines width dimension\n     * @param height defines height dimension\n     */\n    constructor(\n    /** defines left coordinate */\n    left, \n    /** defines top coordinate  */\n    top, \n    /** defines width dimension  */\n    width, \n    /** defines height dimension */\n    height) {\n        this.left = left;\n        this.top = top;\n        this.width = width;\n        this.height = height;\n    }\n    /**\n     * Copy from another measure\n     * @param other defines the other measure to copy from\n     */\n    copyFrom(other) {\n        this.left = other.left;\n        this.top = other.top;\n        this.width = other.width;\n        this.height = other.height;\n    }\n    /**\n     * Copy from a group of 4 floats\n     * @param left defines left coordinate\n     * @param top defines top coordinate\n     * @param width defines width dimension\n     * @param height defines height dimension\n     */\n    copyFromFloats(left, top, width, height) {\n        this.left = left;\n        this.top = top;\n        this.width = width;\n        this.height = height;\n    }\n    /**\n     * Computes the axis aligned bounding box measure for two given measures\n     * @param a Input measure\n     * @param b Input measure\n     * @param result the resulting bounding measure\n     */\n    static CombineToRef(a, b, result) {\n        const left = Math.min(a.left, b.left);\n        const top = Math.min(a.top, b.top);\n        const right = Math.max(a.left + a.width, b.left + b.width);\n        const bottom = Math.max(a.top + a.height, b.top + b.height);\n        result.left = left;\n        result.top = top;\n        result.width = right - left;\n        result.height = bottom - top;\n    }\n    /**\n     * Computes the axis aligned bounding box of the measure after it is modified by a given transform\n     * @param transform the matrix to transform the measure before computing the AABB\n     * @param addX number to add to left\n     * @param addY number to add to top\n     * @param addWidth number to add to width\n     * @param addHeight number to add to height\n     * @param result the resulting AABB\n     */\n    addAndTransformToRef(transform, addX, addY, addWidth, addHeight, result) {\n        const left = this.left + addX;\n        const top = this.top + addY;\n        const width = this.width + addWidth;\n        const height = this.height + addHeight;\n        tmpRect[0].copyFromFloats(left, top);\n        tmpRect[1].copyFromFloats(left + width, top);\n        tmpRect[2].copyFromFloats(left + width, top + height);\n        tmpRect[3].copyFromFloats(left, top + height);\n        tmpV1.copyFromFloats(Number.MAX_VALUE, Number.MAX_VALUE);\n        tmpV2.copyFromFloats(0, 0);\n        for (let i = 0; i < 4; i++) {\n            transform.transformCoordinates(tmpRect[i].x, tmpRect[i].y, tmpRect2[i]);\n            tmpV1.x = Math.floor(Math.min(tmpV1.x, tmpRect2[i].x));\n            tmpV1.y = Math.floor(Math.min(tmpV1.y, tmpRect2[i].y));\n            tmpV2.x = Math.ceil(Math.max(tmpV2.x, tmpRect2[i].x));\n            tmpV2.y = Math.ceil(Math.max(tmpV2.y, tmpRect2[i].y));\n        }\n        result.left = tmpV1.x;\n        result.top = tmpV1.y;\n        result.width = tmpV2.x - tmpV1.x;\n        result.height = tmpV2.y - tmpV1.y;\n    }\n    /**\n     * Computes the axis aligned bounding box of the measure after it is modified by a given transform\n     * @param transform the matrix to transform the measure before computing the AABB\n     * @param result the resulting AABB\n     */\n    transformToRef(transform, result) {\n        this.addAndTransformToRef(transform, 0, 0, 0, 0, result);\n    }\n    /**\n     * Check equality between this measure and another one\n     * @param other defines the other measures\n     * @returns true if both measures are equals\n     */\n    isEqualsTo(other) {\n        if (this.left !== other.left) {\n            return false;\n        }\n        if (this.top !== other.top) {\n            return false;\n        }\n        if (this.width !== other.width) {\n            return false;\n        }\n        if (this.height !== other.height) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Creates an empty measure\n     * @returns a new measure\n     */\n    static Empty() {\n        return new Measure(0, 0, 0, 0);\n    }\n}\n//# sourceMappingURL=measure.js.map","import { Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { Epsilon } from \"@babylonjs/core/Maths/math.constants.js\";\nimport { ValueAndUnit } from \"./valueAndUnit.js\";\n/**\n * Class used to store a point for a MultiLine object.\n * The point can be pure 2D coordinates, a mesh or a control\n */\nexport class MultiLinePoint {\n    /**\n     * Creates a new MultiLinePoint\n     * @param multiLine defines the source MultiLine object\n     */\n    constructor(multiLine) {\n        this._multiLine = multiLine;\n        this._x = new ValueAndUnit(0);\n        this._y = new ValueAndUnit(0);\n        this._point = new Vector3(0, 0, 0);\n    }\n    /** Gets or sets x coordinate */\n    get x() {\n        return this._x.toString(this._multiLine._host);\n    }\n    set x(value) {\n        if (this._x.toString(this._multiLine._host) === value) {\n            return;\n        }\n        if (this._x.fromString(value)) {\n            this._multiLine._markAsDirty();\n        }\n    }\n    /** Gets or sets y coordinate */\n    get y() {\n        return this._y.toString(this._multiLine._host);\n    }\n    set y(value) {\n        if (this._y.toString(this._multiLine._host) === value) {\n            return;\n        }\n        if (this._y.fromString(value)) {\n            this._multiLine._markAsDirty();\n        }\n    }\n    /** Gets or sets the control associated with this point */\n    get control() {\n        return this._control;\n    }\n    set control(value) {\n        if (this._control === value) {\n            return;\n        }\n        if (this._control && this._controlObserver) {\n            this._control.onDirtyObservable.remove(this._controlObserver);\n            this._controlObserver = null;\n        }\n        this._control = value;\n        if (this._control) {\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\n        }\n        this._multiLine._markAsDirty();\n    }\n    /** Gets or sets the mesh associated with this point */\n    get mesh() {\n        return this._mesh;\n    }\n    set mesh(value) {\n        if (this._mesh === value) {\n            return;\n        }\n        if (this._mesh && this._meshObserver) {\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\n        }\n        this._mesh = value;\n        if (this._mesh) {\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\n        }\n        this._multiLine._markAsDirty();\n    }\n    /** Resets links */\n    resetLinks() {\n        this.control = null;\n        this.mesh = null;\n    }\n    /**\n     * Gets a translation vector with Z component\n     * @returns the translation vector\n     */\n    translate() {\n        this._point = this._translatePoint();\n        return this._point;\n    }\n    _translatePoint() {\n        if (this._mesh != null) {\n            return this._multiLine._host.getProjectedPositionWithZ(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\n        }\n        else if (this._control != null) {\n            return new Vector3(this._control.centerX, this._control.centerY, 1 - Epsilon);\n        }\n        else {\n            const host = this._multiLine._host;\n            const xValue = this._x.getValueInPixel(host, Number(host._canvas.width));\n            const yValue = this._y.getValueInPixel(host, Number(host._canvas.height));\n            return new Vector3(xValue, yValue, 1 - Epsilon);\n        }\n    }\n    /** Release associated resources */\n    dispose() {\n        this.resetLinks();\n    }\n}\n//# sourceMappingURL=multiLinePoint.js.map","import { Observable } from \"@babylonjs/core/Misc/observable.js\";\n/**\n * Class used to specific a value and its associated unit\n */\nexport class ValueAndUnit {\n    /**\n     * Creates a new ValueAndUnit\n     * @param value defines the value to store\n     * @param unit defines the unit to store - defaults to ValueAndUnit.UNITMODE_PIXEL\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\n     */\n    constructor(value, \n    /** defines the unit to store */\n    unit = ValueAndUnit.UNITMODE_PIXEL, \n    /** defines a boolean indicating if the value can be negative */\n    negativeValueAllowed = true) {\n        this.negativeValueAllowed = negativeValueAllowed;\n        this._value = 1;\n        this._unit = ValueAndUnit.UNITMODE_PIXEL;\n        /**\n         * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\n         */\n        this.ignoreAdaptiveScaling = false;\n        /**\n         * Observable event triggered each time the value or unit changes\n         */\n        this.onChangedObservable = new Observable();\n        this._value = value;\n        this._unit = unit;\n        this._originalUnit = unit;\n    }\n    /** Gets a boolean indicating if the value is a percentage */\n    get isPercentage() {\n        return this._unit === ValueAndUnit.UNITMODE_PERCENTAGE;\n    }\n    /** Gets a boolean indicating if the value is store as pixel */\n    get isPixel() {\n        return this._unit === ValueAndUnit.UNITMODE_PIXEL;\n    }\n    /**\n     * Gets value (without units)\n     * @deprecated use value property instead\n     */\n    get internalValue() {\n        return this._value;\n    }\n    /** Gets value (without units) */\n    get value() {\n        return this._value;\n    }\n    /** Sets value (without units) */\n    set value(value) {\n        if (value !== this._value) {\n            this._value = value;\n            this.onChangedObservable.notifyObservers();\n        }\n    }\n    /** Gets units (without value) */\n    get unit() {\n        return this._unit;\n    }\n    /** Sets units (without value) */\n    set unit(value) {\n        if (value !== this._unit) {\n            this._unit = value;\n            this.onChangedObservable.notifyObservers();\n        }\n    }\n    /**\n     * Gets value as pixel\n     * @param host defines the root host\n     * @param refValue defines the reference value for percentages\n     * @returns the value as pixel\n     */\n    getValueInPixel(host, refValue) {\n        if (this.isPixel) {\n            return this.getValue(host);\n        }\n        return this.getValue(host) * refValue;\n    }\n    /**\n     * Update the current value and unit.\n     * @param value defines the value to store\n     * @param unit defines the unit to store\n     * @returns the current ValueAndUnit\n     */\n    updateInPlace(value, unit = ValueAndUnit.UNITMODE_PIXEL) {\n        if (this.value !== value || this.unit !== unit) {\n            // set member variables to notify only once\n            this._value = value;\n            this._unit = unit;\n            this.onChangedObservable.notifyObservers();\n        }\n        return this;\n    }\n    /**\n     * Gets the value accordingly to its unit\n     * @param host  defines the root host\n     * @returns the value\n     */\n    getValue(host) {\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\n            let width = 0;\n            let height = 0;\n            if (host.idealWidth) {\n                width = (this._value * host.getSize().width) / host.idealWidth;\n            }\n            if (host.idealHeight) {\n                height = (this._value * host.getSize().height) / host.idealHeight;\n            }\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\n                return window.innerWidth < window.innerHeight ? width : height;\n            }\n            if (host.idealWidth) {\n                // horizontal\n                return width;\n            }\n            if (host.idealHeight) {\n                // vertical\n                return height;\n            }\n        }\n        return this._value;\n    }\n    /**\n     * Gets a string representation of the value\n     * @param host defines the root host\n     * @param decimals defines an optional number of decimals to display\n     * @returns a string\n     */\n    toString(host, decimals) {\n        switch (this._unit) {\n            case ValueAndUnit.UNITMODE_PERCENTAGE: {\n                const percentage = this.getValue(host) * 100;\n                return (decimals ? percentage.toFixed(decimals) : percentage) + \"%\";\n            }\n            case ValueAndUnit.UNITMODE_PIXEL: {\n                const pixels = this.getValue(host);\n                return (decimals ? pixels.toFixed(decimals) : pixels) + \"px\";\n            }\n        }\n        return this._unit.toString();\n    }\n    /**\n     * Store a value parsed from a string\n     * @param source defines the source string\n     * @returns true if the value was successfully parsed and updated\n     */\n    fromString(source) {\n        const match = ValueAndUnit._Regex.exec(source.toString());\n        if (!match || match.length === 0) {\n            return false;\n        }\n        let sourceValue = parseFloat(match[1]);\n        let sourceUnit = this._originalUnit;\n        if (!this.negativeValueAllowed) {\n            if (sourceValue < 0) {\n                sourceValue = 0;\n            }\n        }\n        if (match.length === 4) {\n            switch (match[3]) {\n                case \"px\":\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\n                    break;\n                case \"%\":\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\n                    sourceValue /= 100.0;\n                    break;\n            }\n        }\n        if (sourceValue === this._value && sourceUnit === this._unit) {\n            return false;\n        }\n        this._value = sourceValue;\n        this._unit = sourceUnit;\n        this.onChangedObservable.notifyObservers();\n        return true;\n    }\n    /** UNITMODE_PERCENTAGE */\n    static get UNITMODE_PERCENTAGE() {\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\n    }\n    /** UNITMODE_PIXEL */\n    static get UNITMODE_PIXEL() {\n        return ValueAndUnit._UNITMODE_PIXEL;\n    }\n}\n// Static\nValueAndUnit._Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\nValueAndUnit._UNITMODE_PERCENTAGE = 0;\nValueAndUnit._UNITMODE_PIXEL = 1;\n//# sourceMappingURL=valueAndUnit.js.map"],"names":["WebXRGenericHandController","constructor","scene","gamepadObject","handedness","super","GenericHandSelectGraspProfile","this","profileId","_getFilenameAndPath","filename","path","_getModelLoadingConstraints","_processLoadedModel","_meshes","_setRootMesh","meshes","_updateModel","xrInput","gamepad","left","selectComponentId","components","type","gamepadIndices","button","rootNodeName","visualResponses","grasp","gamepadMapping","assetPath","right","none","WebXRMicrosoftMixedRealityController","MixedRealityProfile","_mapping","defaultButton","valueNodeName","unpressedNodeName","pressedNodeName","defaultAxis","minNodeName","maxNodeName","buttons","componentProperty","states","labelAnchorNodeName","touchPointNodeName","axes","MODEL_LEFT_FILENAME","MODEL_RIGHT_FILENAME","MODEL_BASE_URL","glbLoaded","rootMesh","getComponentIds","forEach","id","i","disableAnimation","buttonMap","buttonMeshName","Log","buttonMesh","_getChildByName","valueMesh","_getImmediateChildByName","pressedMesh","unpressedMesh","comp","getComponent","onButtonStateChangedObservable","add","component","_lerpTransform","value","undefined","isAxes","axis","axisMap","axisMesh","minMesh","maxMesh","onAxisValueChangedObservable","axisValues","x","y","isPickable","length","mesh","parent","setParent","useRightHandedSystem","rotationQuaternion","Math","PI","xr_standard_trigger_pressed","valueNodeProperty","xr_standard_squeeze_pressed","xAxis","yAxis","xr_standard_touchpad_pressed","xr_standard_touchpad_xaxis_pressed","xr_standard_touchpad_yaxis_pressed","xr_standard_touchpad_xaxis_touched","xr_standard_touchpad_yaxis_touched","xr_standard_touchpad_axes_touched","xr_standard_thumbstick_pressed","xr_standard_thumbstick_xaxis_pressed","xr_standard_thumbstick_yaxis_pressed","WebXROculusTouchMotionController","_legacyMapping","_forceLegacyControllers","OculusTouchLayouts","_isQuest","QUEST_MODEL_BASE_URL","isQuest","triggerDirection","_modelRootNode","getChildren","rotation","position","z","pressed","navigator","userAgent","match","thumbrest","WebXRHTCViveMotionController","HTCViveLayout","MODEL_FILENAME","menu","WebXRAbstractMotionController","layout","_doNotLoadControllerMesh","_controllerCache","_initComponent","componentDef","buttonIndex","push","_modelReady","onModelLoadedObservable","Object","keys","dispose","node","setEnabled","getAllComponentsOfType","map","filter","getComponentOfType","getMainComponent","async","useGeneric","loadingParams","_getGenericFilenameAndPath","Promise","resolve","reject","meshesLoaded","_getGenericParentMesh","notifyObservers","found","c","_scene","message","updateFromXRFrame","xrFrame","update","updateModel","handness","pulse","duration","hapticActuatorIndex","hapticActuators","name","n","axisValue","fixValueCoordinates","lerpValue","WebXRControllerComponent","_buttonIndex","_axesIndices","_axes","_changes","_currentValue","_hasChanges","_pressed","_touched","changes","hasChanges","touched","clear","isButton","nativeController","buttonUpdated","axesUpdate","current","previous","BUTTON_TYPE","SQUEEZE_TYPE","THUMBSTICK_TYPE","TOUCHPAD_TYPE","TRIGGER_TYPE","WebXRGenericTriggerMotionController","GenericTriggerLayout","ProfileId","controllerCache","WebXRMotionControllerManager","static","_ProfilesList","_ProfileLoadingPromises","RegisterFallbacksForProfileId","returnArray","_Fallbacks","unshift","forceProfile","profileArray","profiles","pop","windowsMRIdx","indexOf","splice","UseOnlineRepository","firstFunction","PrioritizeOnlineRepository","_LoadProfileFromRepository","_LoadProfilesFromAvailableControllers","secondFunction","call","catch","constructFunction","_AvailableControllers","fallbacks","BaseRepositoryUrl","then","data","JSON","parse","toString","cacheItem","UpdateProfilesList","profilesList","Error","profileToLoad","profile","DisableControllerCache","FindFallbackWithProfileId","j","constructionFunction","RegisterController","DefaultFallbacks","WebXRProfiledMotionController","_profile","_repositoryUrl","layouts","_buttonMeshMapping","_touchDots","visResKey","componentInLayout","mainMesh","visualResponseKey","visResponse","nameOfMesh","dot","diameter","segments","material","diffuseColor","isVisible","rotate","_xrFrame","session","_nativeImpl","_xrTransform","XRRigidTransform","_xrPose","transform","emulatedPosition","_xrPoseVectorData","Float32Array","fillPoses","bind","getViewerPose","getHitTestResults","getHitTestResultsForTransientInput","createAnchor","getJointPose","fillJointRadii","getLightEstimate","getImageTrackingResults","_a","_imageTrackingResults","getPose","space","baseSpace","getPoseData","buffer","matrix","w","orientation","trackedAnchors","worldInformation","detectedPlanes","featurePointCloud","NativeXRLayerWrapper","layer","framebufferWidth","framebufferHeight","sessionManager","NativeXRLayerRenderTargetTextureProvider","layerWrapper","_nativeRTTProvider","xr","getNativeRenderTargetProvider","_createRenderTargetTexture","_destroyRenderTargetTexture","_nativeLayer","trySetViewportForView","viewport","width","height","getRenderTargetTextureForEye","eye","getRenderTargetForEye","getRenderTargetTextureForView","view","getFramebufferDimensions","NativeXRRenderTarget","_xrSessionManager","_nativeRenderTarget","getWebXRRenderTarget","getEngine","xrSession","initializeXRLayerAsync","xrLayer","WebXRCamera","_firstFrame","_referenceQuaternion","_referencedPosition","_trackingState","onBeforeCameraTeleport","onAfterCameraTeleport","onTrackingStateChanged","compensateOnFirstFrame","minZ","cameraRigMode","updateUpVectorFromRotation","_updateNumberOfRigCameras","freezeProjectionMatrix","onXRSessionInit","copyFromFloats","onXRFrameObservable","_updateFromXRSession","_updateReferenceSpace","trackingState","_setTrackingState","newState","realWorldHeight","basePose","currentFrame","baseReferenceSpace","_updateForDualEyeDebugging","rigCameras","outputRenderTarget","setTransformationFromNonVRCamera","otherCamera","getScene","activeCamera","resetToBaseReferenceSpace","computeWorldMatrix","decompose","toEulerAngles","resetReferenceSpace","getClassName","setTarget","target","tmpVector","subtractToRef","normalize","yRotation","atan2","toEulerAnglesToRef","_lastXRViewerPose","pose","referenceSpace","_cache","maxZ","xrRenderState","depthFar","depthNear","updateRenderState","pos","set","copyFrom","views","currentRig","isLeftCamera","isRightCamera","_isRightCamera","_isLeftCamera","projectionMatrix","_projectionMatrix","toggleProjectionMatrixHandInPlace","renderTargetTexture","_renderingMultiview","_texture","isMultiview","layerMask","viewCount","newCamera","isRigCamera","rigParent","removedCamera","equals","referencedMat","poseMat","transformMat","_ScaleReadOnly","invert","multiplyToRef","toggleModelMatrixHandInPlace","getOffsetReferenceSpace","WebXRDefaultExperience","options","result","onDisposeObservable","addOnce","disableDefaultUI","uiOptions","renderTarget","optionalFeatures","enterExitUI","xrHelper","baseExperience","ignoreNativeCameraTransformation","camera","input","controllerOptions","renderingGroupId","inputOptions","disablePointerSelection","pointerSelectionOptions","pointerSelection","featuresManager","enableFeature","useStablePlugins","disableTeleportation","teleportation","floorMeshes","teleportationOptions","setSelectionFeature","disableNearInteraction","nearInteraction","farInteractionFeature","useUtilityLayer","enableNearInteractionOnAllControllers","nearInteractionOptions","outputCanvasOptions","setHelperAsync","error","WebXREnterExitUIButton","element","sessionMode","referenceSpaceType","activeButton","WebXREnterExitUI","_activeButton","_buttons","activeButtonChangedObservable","_onSessionGranted","evt","_helper","_enterXRWithButtonIndex","overlay","document","createElement","classList","ignoreSessionGrantedEvent","addEventListener","window","location","protocol","hostname","customButtons","style","cssText","css","SVGSVGElement","appendChild","createTextNode","getElementsByTagName","hmdBtn","className","title","display","_updateButtons","renderCanvas","getInputElement","parentNode","helper","_renderTarget","supportedPromises","btn","isSessionSupportedAsync","onStateChangedObservable","state","all","supported","onclick","ui","idx","exitXRAsync","enterXRAsync","requiredFeatures","e","prevTitle","onError","contains","removeChild","removeEventListener","b","WebXRExperienceHelper","_nonVRCamera","_attachedToElement","_spectatorCamera","_originalSceneAutoClear","_supported","_spectatorMode","_lastTimestamp","onInitialXRPoseSetObservable","initializeAsync","_setState","sessionCreationOptions","_b","_c","_extendXRSessionInitObject","initializeSessionAsync","setReferenceSpaceTypeAsync","baseLayer","getEnabledFeature","runXRRenderLoop","autoClear","inputs","attachedToElement","detachControl","_nonXRToXRCamera","onXRSessionEnded","attachControl","noPreventDefault","setPosition","enableSpectatorMode","_switchSpectatorMode","disableSpecatatorMode","refreshRate","fps","cameraIndex","preferredCameraIndex","updateSpectatorCamera","currentTimestamp","globalPosition","absoluteRotation","onStateChanged","activeCameras","onAfterRenderCameraObservable","framebufferDimensionsObject","removeCallback","val","WebXRFeatureName","ANCHOR_SYSTEM","BACKGROUND_REMOVER","HIT_TEST","MESH_DETECTION","PHYSICS_CONTROLLERS","PLANE_DETECTION","POINTER_SELECTION","TELEPORTATION","FEATURE_POINTS","HAND_TRACKING","IMAGE_TRACKING","NEAR_INTERACTION","DOM_OVERLAY","MOVEMENT","LIGHT_ESTIMATION","EYE_TRACKING","WALKING_LOCOMOTION","LAYERS","WebXRFeaturesManager","_features","getEnabledFeatures","featureName","feature","enabled","featureImplementation","attached","disableAutoAttach","attachFeature","detachFeature","constructorFunction","version","stable","_AvailableFeatures","latest","xrSessionManager","attach","detach","disableFeature","Name","moduleOptions","attachIfPossible","required","versionToLoad","GetStableVersionOfFeature","GetLatestVersionOfFeature","isNaN","conflictingFeature","_ConflictingFeatures","ConstructFeature","constructed","dependsOn","dependentsFound","every","join","isCompatible","xrSessionInit","enabledFeatures","nativeName","xrNativeFeatureName","getXRSessionInitExtension","extended","WebXRInput","xrCamera","_options","controllers","onControllerAddedObservable","onControllerRemovedObservable","_onInputSourcesChange","event","_addAndRemoveControllers","added","removed","_sessionEndedObserver","inputSource","_sessionInitObserver","_frameObserver","frame","controller","customControllersRepositoryURL","disableOnlineControllerRepository","addInputs","removeInputs","sources","forceControllerProfile","forceInputProfile","doNotLoadControllerMesh","doNotLoadControllerMeshes","disableMotionControllerAnimation","disableControllerAnimation","keepControllers","removedControllers","remove","idCount","WebXRInputSource","_tmpVector","_disposed","onMeshLoadedObservable","onMotionControllerInitObservable","_uniqueId","targetRayMode","pointer","gripSpace","grip","motionController","loadModel","success","getChildMeshes","uniqueId","getWorldPointerRayToRef","gripIfAvailable","object","getWorldMatrix","direction","origin","absolutePosition","targetRaySpace","_lastXRPose","WebXRLayerWrapper","isFixedFoveationSupported","layerType","fixedFoveation","max","min","getWidth","getHeight","createRenderTargetTextureProvider","WebXRManagedOutputCanvasOptions","engine","defaults","canvasOptions","antialias","depth","stencil","isStencilEnable","alpha","framebufferScaleFactor","newCanvasCssStyle","WebXRManagedOutputCanvas","GetDefaults","_canvas","_engine","_xrLayerWrapper","onXRLayerInitObservable","canvasElement","_setManagedOutputCanvas","canvas","_addCanvas","_removeCanvas","createLayer","XRWebGLLayer","canvasContext","makeXRCompatible","getRenderingCanvas","body","_setCanvasSize","init","setSize","_originalCanvasSize","offsetWidth","offsetHeight","getContext","WebXRLayerRenderTargetTextureProvider","_renderTargetTextures","Array","_createInternalTexture","textureSize","texture","internalTexture","_hardwareTexture","_gl","isReady","framebuffer","colorTexture","depthStencilTexture","multiview","renderTargetWrapper","_samples","samples","_framebuffer","_colorTextureArray","setTexture","_depthStencilTextureArray","_depthStencilTexture","disableRescaling","XRWebGLBinding","skipInitialClear","_framebufferDimensions","rtt","WebXRSessionManager","defaultHeightCompensation","onXRReferenceSpaceChanged","inXRFrameLoop","inXRSession","_onEngineDisposedObserver","_referenceSpace","newReferenceSpace","_sessionMode","end","_baseLayerRTTProvider","_xrNavigator","native","xrSessionMode","requestSession","restoreDefaultFramebuffer","customAnimationFrameRequester","_renderLoop","isNative","_baseLayerWrapper","once","IsSessionSupportedAsync","requestAnimationFrame","renderFunction","timestamp","cancelAnimationFrame","_frameHandler","requestReferenceSpace","rejectionReason","heightCompensation","viewerReferenceSpace","updateRenderStateAsync","_setBaseLayerWrapper","baseLayerWrapper","functionToUse","isSessionSupported","supportsSession","returnValue","currentFrameRate","frameRate","supportedFrameRates","updateTargetFrameRate","rate","runInXRFrame","callback","ignoreIfNotInSession","WebXRState","WebXRTrackingState","WebXRWebGLLayerWrapper","WebXRWebGLLayerRenderTargetTextureProvider","_layer","xrViewport","getViewport","layerWidth","layerHeight","_rtt","AbstractScene","rootNodes","cameras","lights","skeletons","particleSystems","animations","animationGroups","multiMaterials","materials","morphTargetManagers","geometries","transformNodes","actionManagers","textures","_environmentTexture","postProcesses","parser","_BabylonFileParsers","_IndividualBabylonFileParsers","jsonData","container","rootUrl","parserName","prototype","hasOwnProperty","environmentTexture","getNodes","nodes","concat","skeleton","bones","KeepAssets","InstantiatedEntries","slice","o","AssetContainer","_wasAddedToScene","_onContextRestoredObserver","onContextRestoredObservable","geometry","_rebuild","system","rebuild","_topologicalSort","nodesUidMap","Map","dependencyGraph","dependedBy","nodeId","Set","get","masterMesh","sourceMesh","has","child","getDescendants","childId","sortedNodes","leaves","size","delete","visitList","nodeToVisit","shift","dependedByVisitedNode","dependedByVisitedNodeId","from","values","dependsOnDependedByVisitedNode","console","_addNodeAndDescendantsToList","list","addedIds","rootNode","predicate","_isNodeInContainer","_isValidHierarchy","instantiateModelsToScene","nameFunction","cloneMaterials","conversionMap","storeMap","alreadySwappedSkeletons","alreadySwappedMaterials","localOptions","doNotInstantiate","nodesToSort","idsOnSortList","transformNode","onNewCreated","source","clone","clonedMesh","morphTargetManager","oldMorphTargetManager","index","numTargets","oldTarget","getTarget","newTarget","onClone","replicatedParentId","replicatedParent","scaling","sourceMaterial","swap","multi","subMaterials","m","addMultiMaterial","addMaterial","instancedNode","replicatedSourceId","replicatedInstancedNode","createInstance","replicatedNode","getTotalVertices","s","isAnInstance","copy","bone","_linkedTransformNode","addAllToScene","addToScene","_serializableComponents","addFromContainer","addCamera","addLight","addMesh","addSkeleton","addAnimation","addAnimationGroup","addMorphTargetManager","addGeometry","addTransformNode","addActionManager","addTexture","reflectionProbes","addReflectionProbe","removeAllFromScene","removeFromScene","removeFromContainer","removeCamera","removeLight","removeMesh","removeSkeleton","removeAnimation","removeAnimationGroup","removeMultiMaterial","removeMaterial","removeMorphTargetManager","removeGeometry","removeTransformNode","removeActionManager","removeTexture","removeReflectionProbe","_moveAssets","sourceAssets","targetAssets","keepAssets","asset","move","keepAsset","_parentContainer","moveAllFromScene","key","createRootMesh","addChild","mergeAnimationsTo","animatables","targetConverter","_targetConverter","targetProperty","split","getTransformNodeByName","getMorphTargetByName","getNodeByName","nodeInAC","nodeInScene","animationInAC","animationsWithSameProperty","animationInScene","animationWithSameProperty","newAnimationGroups","animationGroupInAC","animatable","stop","beginAnimation","fromFrame","toFrame","loopAnimation","speedRatio","onAnimationEnd","onAnimationLoop","stopAnimation","_InternalNodeDataInfo","_doNotSerialize","_isDisposed","_sceneRootNodesIndex","_isEnabled","_isParentEnabled","_isReady","_onEnabledStateChangedObservable","_onClonedObservable","Node","constructorFunc","_NodeConstructors","accessibilityTag","_accessibilityTag","onAccessibilityTagChangedObservable","doNotSerialize","_nodeDataStorage","_parentNode","isDisposed","previousParentNode","_children","_addToSceneRootNodes","_removeFromSceneRootNodes","_syncParentEnabledState","_serializeAsParent","serializationObject","parentId","lastIdx","animationPropertiesOverride","_animationPropertiesOverride","onDispose","_onDisposeObserver","onEnabledStateChangedObservable","onClonedObservable","_isDirty","metadata","reservedDataStore","_ranges","onReady","_currentRenderId","_parentUpdateId","_childUpdateId","_waitingParentId","_waitingParentInstanceIndex","_waitingParsedUniqueId","_worldMatrix","_worldMatrixDeterminant","_worldMatrixDeterminantIsDirty","_isNode","_behaviors","getUniqueId","_initCache","addBehavior","behavior","attachImmediately","isLoading","onDataLoadedObservable","removeBehavior","behaviors","getBehaviorByName","getRenderId","_getWorldMatrixDeterminant","determinant","worldMatrixFromCache","updateCache","force","isSynchronized","_updateCache","_getActionManagerForTrigger","trigger","_initialCall","_ignoreParentClass","_isSynchronized","_markSyncedWithParent","isSynchronizedWithParent","_completeCheck","markAsDirty","_property","Number","MAX_VALUE","isEnabled","checkAncestors","isDescendantOf","ancestor","_getDescendants","results","directDescendantsOnly","item","cullingStrategy","_setReady","getAnimationByName","animation","createAnimationRange","to","_AnimationRangeFactory","nAnimations","createRange","deleteAnimationRange","deleteFrames","deleteRange","getAnimationRange","getAnimationRanges","animationRanges","loop","range","serializeAnimationRanges","serializationRanges","localRange","_force","doNotRecurse","disposeMaterialAndTextures","parsedNode","ranges","getHierarchyBoundingVectors","includeDescendants","incrementRenderId","thisAbstractMesh","getBoundingInfo","subMeshes","boundingInfo","boundingBox","minimumWorld","maximumWorld","descendants","descendant","childMesh","minBox","maxBox","_name","_from","_to","ScenePerformancePriority","Scene","markAllMaterialsAsDirty","imageProcessingConfiguration","_imageProcessingConfiguration","performancePriority","_performancePriority","BackwardCompatible","skipFrustumClipping","_renderingManager","maintainStateBetweenFrames","skipPointerMovePicking","Intermediate","Aggressive","forceWireframe","_forceWireframe","_skipFrustumClipping","forcePointsCloud","_forcePointsCloud","beforeRender","_onBeforeRenderObserver","onBeforeRenderObservable","afterRender","_onAfterRenderObserver","onAfterRenderObservable","beforeCameraRender","_onBeforeCameraRenderObserver","onBeforeCameraRenderObservable","afterCameraRender","_onAfterCameraRenderObserver","onAfterCameraRenderObservable","unTranslatedPointer","_inputManager","DragMovementThreshold","LongPressDelay","DoubleClickDelay","ExclusiveDoubleClickMode","bindEyePosition","effect","variableName","isVector3","eyePosition","_forcedViewPosition","_mirroredCameraPosition","devicePosition","invertNormal","setFloat3","setVector4","finalizeSceneUbo","ubo","getSceneUniformBuffer","updateFloat4","_useRightHandedSystem","setStepId","newStepId","_currentStepId","getStepId","getInternalStep","_currentInternalStep","fogEnabled","_fogEnabled","fogMode","_fogMode","prePass","prePassRenderer","defaultRT","shadowsEnabled","_shadowsEnabled","lightsEnabled","_lightsEnabled","_activeCameras","_unObserveActiveCameras","onActiveCamerasChanged","_activeCamera","onActiveCameraChanged","defaultMaterial","_defaultMaterial","DefaultMaterialFactory","texturesEnabled","_texturesEnabled","skeletonsEnabled","_skeletonsEnabled","collisionCoordinator","_collisionCoordinator","CollisionCoordinatorFactory","renderingManager","frustumPlanes","_frustumPlanes","_registerTransientComponents","_transientComponents","register","_addComponent","_components","serializableComponent","serialize","_getComponent","cameraToUseForPointers","_isScene","_blockEntityCollection","autoClearDepthAndStencil","clearColor","ambientColor","environmentIntensity","animationsEnabled","useConstantAnimationDeltaTime","constantlyUpdateMeshUnderPointer","hoverCursor","defaultCursor","doNotHandleCursors","preventDefaultOnPointerDown","preventDefaultOnPointerUp","disableOfflineSupportExceptionRules","onBeforeAnimationsObservable","onAfterAnimationsObservable","onBeforeDrawPhaseObservable","onAfterDrawPhaseObservable","onReadyObservable","onBeforeActiveMeshesEvaluationObservable","onAfterActiveMeshesEvaluationObservable","onBeforeParticlesRenderingObservable","onAfterParticlesRenderingObservable","onNewCameraAddedObservable","onCameraRemovedObservable","onNewLightAddedObservable","onLightRemovedObservable","onNewGeometryAddedObservable","onGeometryRemovedObservable","onNewTransformNodeAddedObservable","onTransformNodeRemovedObservable","onNewMeshAddedObservable","onMeshRemovedObservable","onNewSkeletonAddedObservable","onSkeletonRemovedObservable","onNewMaterialAddedObservable","onNewMultiMaterialAddedObservable","onMaterialRemovedObservable","onMultiMaterialRemovedObservable","onNewTextureAddedObservable","onTextureRemovedObservable","onBeforeRenderTargetsRenderObservable","onAfterRenderTargetsRenderObservable","onBeforeStepObservable","onAfterStepObservable","onBeforeRenderingGroupObservable","onAfterRenderingGroupObservable","onMeshImportedObservable","onAnimationFileImportedObservable","_registeredForLateAnimationBindings","skipPointerDownPicking","skipPointerUpPicking","onPrePointerObservable","onPointerObservable","onPreKeyboardObservable","onKeyboardObservable","_timeAccumulator","FOGMODE_NONE","fogColor","fogDensity","fogStart","fogEnd","needsPreviousWorldMatrices","physicsEnabled","particlesEnabled","spritesEnabled","lensFlaresEnabled","collisionsEnabled","gravity","postProcessesEnabled","renderTargetsEnabled","dumpNextRenderTargets","customRenderTargets","importedMeshesFiles","probesEnabled","_meshesForIntersections","proceduralTexturesEnabled","_totalVertices","_activeIndices","_activeParticles","_activeBones","_animationTime","animationTimeScale","_renderId","_frameId","_executeWhenReadyTimeoutId","_intermediateRendering","_defaultFrameBufferCleared","_viewUpdateFlag","_projectionUpdateFlag","_toBeDisposed","_activeRequests","_pendingData","dispatchAllSubMeshesOfActiveMeshes","_activeMeshes","_processedMaterials","_renderTargets","_materialsRenderTargets","_activeParticleSystems","_activeSkeletons","_softwareSkinnedMeshes","_activeAnimatables","_transformMatrix","requireLightSorting","_beforeCameraUpdateStage","_beforeClearStage","_beforeRenderTargetClearStage","_gatherRenderTargetsStage","_gatherActiveCameraRenderTargetsStage","_isReadyForMeshStage","_beforeEvaluateActiveMeshStage","_evaluateSubMeshStage","_preActiveMeshStage","_cameraDrawRenderTargetStage","_beforeCameraDrawStage","_beforeRenderTargetDrawStage","_beforeRenderingGroupDrawStage","_beforeRenderingMeshStage","_afterRenderingMeshStage","_afterRenderingGroupDrawStage","_afterCameraDrawStage","_afterCameraPostProcessStage","_afterRenderTargetDrawStage","_afterRenderTargetPostProcessStage","_afterRenderStage","_pointerMoveStage","_pointerDownStage","_pointerUpStage","_geometriesByUniqueId","_defaultMeshCandidates","_defaultSubMeshCandidates","_preventFreeActiveMeshesAndRenderingGroups","_activeMeshesFrozen","_activeMeshesFrozenButKeepClipping","_skipEvaluateActiveMeshesCompletely","_allowPostProcessClearColor","getDeterministicFrameTime","getTimeStep","_registeredActions","_blockMaterialDirtyMechanism","_perfCollector","fullOptions","useGeometryUniqueIdsMap","useMaterialMeshMap","useClonedMeshMap","virtual","_virtualScenes","scenes","_uid","postProcessManager","_createUbo","setDefaultCandidateProviders","onNewSceneAddedObservable","_getDefaultMeshCandidates","_getDefaultSubMeshCandidates","getActiveMeshCandidates","getActiveSubMeshCandidates","getIntersectingSubMeshCandidates","getCollidingSubMeshCandidates","meshUnderPointer","pointerX","pointerY","getCachedMaterial","_cachedMaterial","getCachedEffect","_cachedEffect","getCachedVisibility","_cachedVisibility","isCachedMaterialInvalid","visibility","totalVerticesPerfCounter","getActiveIndices","totalActiveIndicesPerfCounter","getActiveParticles","activeParticlesPerfCounter","getActiveBones","activeBonesPerfCounter","getActiveMeshes","getAnimationRatio","_animationRatio","getFrameId","setSceneUniformBuffer","createSceneUniformBuffer","simulatePointerMove","pickResult","pointerEventInit","simulatePointerDown","simulatePointerUp","doubleTap","isPointerCaptured","pointerId","attachUp","attachDown","attachMove","checkRenderTargets","reset","hardwareInstancedRendering","hasThinInstances","getCaps","instancedArrays","instances","step","action","mat","_storeEffectOnSubMeshes","subMesh","getMaterial","hasRenderTargetTextures","getRenderTargetTextures","concatWithNoDuplicate","areAllEffectsReady","isReadyForRendering","delayLoadState","particleSystem","resetCachedMaterial","registerBeforeRender","func","unregisterBeforeRender","registerAfterRender","unregisterAfterRender","_executeOnceBeforeRender","execFunc","setTimeout","executeOnceBeforeRender","timeout","addPendingData","removePendingData","wasLoading","getWaitingItemsCount","executeWhenReady","_checkIsReady","whenReadyAsync","resetLastAnimationTimeFrame","_animationTimeLast","getViewMatrix","_viewMatrix","getProjectionMatrix","getTransformMatrix","setTransformMatrix","viewL","projectionL","viewR","projectionR","_multiviewSceneUbo","updateFlag","useUbo","_updateMultiviewUbo","_sceneUbo","updateMatrix","sceneUbo","addUniform","UniqueId","newMesh","recursive","_resyncLightSources","toRemove","_invalidateMesh","newTransformNode","_indexInSceneTransformNodesArray","lastNode","_executeActiveContainerCleanup","_removeLightSource","sortLightsByPriority","index2","removeParticleSystem","animationName","targetMask","_indexInSceneMaterialArray","lastMaterial","newLight","lightSources","sort","newSkeleton","addParticleSystem","newParticleSystem","newAnimation","newAnimationGroup","newMultiMaterial","newMaterial","newMorphTargetManager","newGeometry","newActionManager","newTexture","switchActiveCamera","setActiveCameraById","getCameraById","setActiveCameraByName","getCameraByName","getAnimationGroupByName","_getMaterial","allowMultiMaterials","getMaterialByUniqueID","getMaterialById","getMaterialByName","getLastMaterialById","getTextureByUniqueId","getTextureByName","getCameraByUniqueId","getBoneById","skeletonIndex","boneIndex","getBoneByName","getLightByName","getLightById","getLightByUniqueId","getParticleSystemById","getGeometryById","_getGeometryByUniqueId","pushGeometry","lastGeometry","getGeometries","getMeshById","getMeshesById","getTransformNodeById","getTransformNodeByUniqueId","getTransformNodesById","getMeshByUniqueId","getLastMeshById","getLastEntryById","getNodeById","light","getMeshByName","getLastSkeletonById","getSkeletonByUniqueId","getSkeletonById","getSkeletonByName","getMorphTargetManagerById","getMorphTargetById","managerIndex","getPostProcessByName","postProcessIndex","postProcess","isActiveMesh","uid","addExternalData","_externalData","getExternalData","getOrAddExternalDataWithFactory","factory","getOrAddWithFactory","removeExternalData","_evaluateSubMesh","initialMesh","forcePush","isInFrustum","dispatch","freeProcessedMaterials","blockfreeActiveMeshesAndRenderingGroups","freeActiveMeshes","freeRenderingGroups","renderList","_isInIntermediateRendering","freezeActiveMeshes","skipEvaluateActiveMeshes","onSuccess","freezeMeshes","keepFrustumCulling","updateTransformMatrix","_evaluateActiveMeshes","_freeze","unfreezeActiveMeshes","_internalAbstractMeshDataInfo","_isActive","_unFreeze","snapshotRendering","snapshotRenderingMode","len","psLength","animate","resetSprites","_currentLODIsUpToDate","isBlocked","addCount","hasAZeroComponent","actionManager","hasSpecificTriggers2","pushNoDuplicate","meshToRender","customLODSelector","getLOD","_currentLOD","billboardMode","_preActivate","alwaysSelectAsActiveMesh","_activate","_actAsRegularMesh","_onlyForInstances","_activeMesh","_postActivate","particleIndex","isStarted","emitter","dispatchParticles","prepare","computeBonesUsingShaders","hasInstances","leftCamera","_rigCameras","rightCamera","_bindFrameBuffer","_multiviewTexture","_currentFrameBufferIsDefaultFrameBuffer","_clearFrameBuffer","onClearObservable","hasObservers","_cleared","_clear","_renderForCamera","bindFrameBuffer","_skipRendering","setViewport","softwareSkinnedMeshIndex","applySkeleton","isRenderTarget","needRebind","renderIndex","_shouldRender","hasSpecialRenderTargetCamera","render","currentRenderPassId","renderPassId","_prepareFrame","_finalizeFrame","isIntermediate","_processSubCameras","_createMultiviewUbo","_useMultiviewToSingleView","_renderMultiviewToSingleView","_checkIntersections","actionIndex","actions","parameters","getTriggerParameter","otherMesh","areIntersecting","intersectsMesh","usePreciseIntersection","currentIntersectionInProgress","_intersectionsInProgress","_executeCurrent","hasSpecificTrigger","parameter","parameterMesh","_advancePhysicsEngineStep","_animate","isDeterministicLockStep","deltaTime","MinDeltaTime","getDeltaTime","MaxDeltaTime","defaultFrameTime","defaultFPS","stepsTaken","maxSubSteps","getLockstepMaxSteps","internalSteps","floor","_checkCameraRenderTarget","resetDrawCache","passId","updateCameras","ignoreAnimations","fetchNewFrame","processTrigger","currentActiveCamera","customIndex","freezeMaterials","freeze","unfreezeMaterials","unfreeze","stopAllAnimations","activeRequests","request","abort","_disposeList","wipeCaches","items","itemsCopy","clearCachedVertexData","meshIndex","clearCachedData","cleanCachedTextureBuffer","baseTexture","_buffer","getWorldExtends","filterPredicate","infiniteDistance","createPickingRay","world","cameraViewSpace","createPickingRayToRef","enableDistantPicking","createPickingRayInCameraSpace","createPickingRayInCameraSpaceToRef","_pickingAvailable","pick","fastCheck","trianglePredicate","pickWithBoundingInfo","pickWithRay","ray","multiPick","multiPickWithRay","setPointerOverMesh","getPointerOverMesh","_rebuildGeometries","spriteManagers","spriteMgr","_rebuildTextures","_getByTags","tagsQuery","listByTags","getMeshesByTags","getCamerasByTags","getLightsByTags","getMaterialByTags","getTransformNodesByTags","setRenderingOrder","opaqueSortCompareFn","alphaTestSortCompareFn","transparentSortCompareFn","setRenderingAutoClearDepthStencil","autoClearDepthStencil","getAutoClearDepthStencilSetup","blockMaterialDirtyMechanism","flag","_loadFile","fileOrUrl","onProgress","useOfflineSupport","useArrayBuffer","onOpened","offlineProvider","onCompleteObservable","_loadFileAsync","exception","_requestFile","url","_requestFileAsync","_readFile","file","_readFileAsync","getPerfCollector","FOGMODE_EXP","FOGMODE_EXP2","FOGMODE_LINEAR","setActiveCameraByID","getLastMaterialByID","getMaterialByID","getTextureByUniqueID","getCameraByID","getCameraByUniqueID","getBoneByID","getLightByID","getLightByUniqueID","getParticleSystemByID","getGeometryByID","getMeshByID","getMeshesByID","getTransformNodeByID","getTransformNodeByUniqueID","getTransformNodesByID","getMeshByUniqueID","getLastMeshByID","getLastEntryByID","getNodeByID","getLastSkeletonByID","SceneComponentConstants","NAME_EFFECTLAYER","NAME_LAYER","NAME_LENSFLARESYSTEM","NAME_BOUNDINGBOXRENDERER","NAME_PARTICLESYSTEM","NAME_GAMEPAD","NAME_SIMPLIFICATIONQUEUE","NAME_GEOMETRYBUFFERRENDERER","NAME_PREPASSRENDERER","NAME_DEPTHRENDERER","NAME_DEPTHPEELINGRENDERER","NAME_POSTPROCESSRENDERPIPELINEMANAGER","NAME_SPRITE","NAME_SUBSURFACE","NAME_OUTLINERENDERER","NAME_PROCEDURALTEXTURE","NAME_SHADOWGENERATOR","NAME_OCTREE","NAME_PHYSICSENGINE","NAME_AUDIO","NAME_FLUIDRENDERER","STEP_ISREADYFORMESH_EFFECTLAYER","STEP_BEFOREEVALUATEACTIVEMESH_BOUNDINGBOXRENDERER","STEP_EVALUATESUBMESH_BOUNDINGBOXRENDERER","STEP_PREACTIVEMESH_BOUNDINGBOXRENDERER","STEP_CAMERADRAWRENDERTARGET_EFFECTLAYER","STEP_BEFORECAMERADRAW_PREPASS","STEP_BEFORECAMERADRAW_EFFECTLAYER","STEP_BEFORECAMERADRAW_LAYER","STEP_BEFORERENDERTARGETDRAW_PREPASS","STEP_BEFORERENDERTARGETDRAW_LAYER","STEP_BEFORERENDERINGMESH_PREPASS","STEP_BEFORERENDERINGMESH_OUTLINE","STEP_AFTERRENDERINGMESH_PREPASS","STEP_AFTERRENDERINGMESH_OUTLINE","STEP_AFTERRENDERINGGROUPDRAW_EFFECTLAYER_DRAW","STEP_AFTERRENDERINGGROUPDRAW_BOUNDINGBOXRENDERER","STEP_BEFORECAMERAUPDATE_SIMPLIFICATIONQUEUE","STEP_BEFORECAMERAUPDATE_GAMEPAD","STEP_BEFORECLEAR_PROCEDURALTEXTURE","STEP_BEFORECLEAR_PREPASS","STEP_BEFORERENDERTARGETCLEAR_PREPASS","STEP_AFTERRENDERTARGETDRAW_PREPASS","STEP_AFTERRENDERTARGETDRAW_LAYER","STEP_AFTERCAMERADRAW_PREPASS","STEP_AFTERCAMERADRAW_EFFECTLAYER","STEP_AFTERCAMERADRAW_LENSFLARESYSTEM","STEP_AFTERCAMERADRAW_EFFECTLAYER_DRAW","STEP_AFTERCAMERADRAW_LAYER","STEP_AFTERCAMERADRAW_FLUIDRENDERER","STEP_AFTERCAMERAPOSTPROCESS_LAYER","STEP_AFTERRENDERTARGETPOSTPROCESS_LAYER","STEP_AFTERRENDER_AUDIO","STEP_GATHERRENDERTARGETS_DEPTHRENDERER","STEP_GATHERRENDERTARGETS_GEOMETRYBUFFERRENDERER","STEP_GATHERRENDERTARGETS_SHADOWGENERATOR","STEP_GATHERRENDERTARGETS_POSTPROCESSRENDERPIPELINEMANAGER","STEP_GATHERACTIVECAMERARENDERTARGETS_DEPTHRENDERER","STEP_GATHERACTIVECAMERARENDERTARGETS_FLUIDRENDERER","STEP_POINTERMOVE_SPRITE","STEP_POINTERDOWN_SPRITE","STEP_POINTERUP_SPRITE","Stage","create","registerStep","maxIndex","__decorate","decorators","desc","d","arguments","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","Style","host","_fontFamily","_fontStyle","_fontWeight","_fontSize","onChangedObservable","_host","fontSize","fromString","fontFamily","fontStyle","fontWeight","AdvancedDynamicTexture","numLayoutCalls","_numLayoutCalls","numRenderCalls","_numRenderCalls","renderScale","_renderScale","_onResize","background","_background","idealWidth","_idealWidth","_rootContainer","_markAllAsDirty","idealHeight","_idealHeight","useSmallestIdeal","_useSmallestIdeal","renderAtIdealSize","_renderAtIdealSize","idealRatio","rwidth","rheight","getSize","innerWidth","innerHeight","_layerToDispose","rootContainer","getControlsByType","typeName","control","getControlByName","_getControlByKey","find","focusedControl","_focusedControl","onBlur","onFocus","isForeground","isBackground","clipboardData","_clipboardData","generateMipMaps","samplingMode","invertY","onGuiReadyObservable","_lastControlOver","_lastControlDown","_capturingControl","_linkedControls","_isFullscreen","_fullscreenViewport","_blockNextFocusCheck","_cursorChanged","_defaultMousePointerId","_rootChildrenHaveChanged","_capturedPointerIds","onClipboardObservable","onControlPickedObservable","onBeginLayoutObservable","onEndLayoutObservable","onBeginRenderObservable","onEndRenderObservable","premulAlpha","applyYInversionOnUpdate","checkPointerEveryFrame","_useInvalidateRectOptimization","_invalidatedRectangle","_clearMeasure","_onClipboardCopy","rawEvt","ev","preventDefault","_onClipboardCut","_onClipboardPaste","parseContent","parseSerializedObject","_rootElement","_renderObserver","_checkUpdate","_controlAddedObserver","onControlAddedObservable","_controlRemovedObserver","onControlRemovedObservable","_preKeyboardObserver","info","processKeyboard","skipOnPointerObservable","_link","hasAlpha","_resizeObserver","onResizeObservable","executeOnAllControls","children","useInvalidateRectOptimization","invalidateRect","invalidMinX","invalidMinY","invalidMaxX","invalidMaxY","maxX","ceil","maxY","top","createStyle","addControl","removeControl","moveToNonOverlappedPosition","overlapGroup","deltaStep","repelFactor","controlsForGroup","isArray","control1","velocity","center","centerX","centerY","control2","_Overlaps","diff","subtract","diffLength","scale","overlapDeltaMultiplier","linkOffsetXInPixels","linkOffsetYInPixels","_prePointerObserver","_sceneRenderObserver","_pointerObserver","_canvasPointerOutObserver","onCanvasPointerOutObservable","_canvasBlurObserver","onCanvasBlurObservable","renderWidth","getRenderWidth","renderHeight","getRenderHeight","scaleTo","_getGlobalViewport","globalViewPort","toGlobal","targetX","round","scaleX","targetY","scaleY","getProjectedPosition","worldMatrix","getProjectedPositionWithZ","globalViewport","projectedPosition","skipUpdate","_linkedMesh","linkWithMesh","boundingSphere","notRenderable","_moveToProjectedPosition","isDirty","_render","AllowGPUOptimizations","skipRender","context","font","strokeStyle","_checkGuiIsReady","measure","_layout","clearRect","save","fillStyle","fillRect","restore","_changeCursor","cursor","_registerLastControlDown","_doPicking","pi","deltaX","deltaY","isPointerBlocker","_shouldBlockPointer","_processObservables","_processPicking","_onPointerOut","_manageFocus","_cleanControlAfterRemovalFromList","_cleanControlAfterRemoval","_translateToPicking","tempViewport","originalCameraToUseForPointers","rigViewport","rigCamera","toGlobalToRef","transformedX","getHardwareScalingLevel","transformedY","_attachPickingToSceneRender","_attachToOnPointerOut","_attachToOnBlur","registerClipboardEvents","self","unRegisterClipboardEvents","_transformUvs","uv","textureMatrix","getTextureMatrix","isIdentityAs3x2","homogeneousTextureMatrix","getRowToRef","r0","r1","r2","setRowFromFloats","wrapU","fX","trunc","wrapV","fY","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","getTextureCoordinates","_forcePointerUp","friendlyControls","keepsFocusWith","canMoveFocus","otherHost","isAscendant","enablePointerMoveEvents","moveFocusToControl","_lastPickedControl","isFocusInvisible","pickFunction","forcePicking","pointerEvent","entries","_onCanvasBlur","serializeContent","root","serializedObject","scaleToSize","newName","CreateFullscreenUI","snippetId","appendToAdt","adt","serialized","_LoadURLContentAsync","SnippetUrl","replace","parseFromSnippetAsync","ParseFromSnippetAsync","parseFromURLAsync","ParseFromFileAsync","snippet","readyState","status","gui","payload","responseText","jsonPayload","encodedGui","TextDecoder","decode","open","send","widthInPixels","heightInPixels","onlyAlphaTesting","materialSetupCallback","_CreateMaterial","internalClassType","backFaceCulling","specularColor","diffuseTexture","emissiveTexture","opacityTexture","foreground","sampling","adaptiveScaling","resultScene","newScale","ratio","guiIsReady","Container","renderToIntermediateTexture","_renderToIntermediateTexture","_markAsDirty","adaptHeightToChildren","_adaptHeightToChildren","adaptWidthToChildren","_adaptWidthToChildren","backgroundGradient","_backgroundGradient","isReadOnly","_isReadOnly","_measureForChildren","_intermediateTexture","logLayoutCycleErrors","maxLayoutCycle","_getTypeName","_flagDescendantsAsMatrixDirty","_isClipped","_markMatrixAsDirty","getChildByName","getChildByType","containsControl","_reOrderControl","clearControls","linkedMesh","wasAdded","zIndex","_offsetLeft","offset","_offsetTop","_getBackgroundColor","getCanvasGradient","_localDraw","shadowBlur","shadowOffsetX","shadowOffsetY","shadowColor","_currentMeasure","_beforeLayout","_processMeasures","parentMeasure","_cachedParentMeasure","isEqualsTo","_evaluateClippingState","transformToRef","_prevCurrentMeasureTransformedIntoGlobalSpace","rebuildCount","_applyStates","computedWidth","computedHeight","_rebuildLayout","_tempParentMeasure","_width","isPixel","_paddingLeftInPixels","_paddingRightInPixels","_height","_paddingTopInPixels","_paddingBottomInPixels","paddingLeftInPixels","paddingRightInPixels","ignoreAdaptiveScaling","paddingTopInPixels","paddingBottomInPixels","_postMeasure","_draw","invalidatedRectangle","renderToIntermediateTextureThisDraw","contextToDrawTo","translate","clipChildren","_clipForChildren","_intersectsRect","globalAlpha","drawImage","getDescendantsToRef","isHitTestVisible","_additionalProcessing","childSerializationObject","_parseFromContent","childData","Vector2WithInfo","Matrix2D","m00","m01","m10","m11","m20","m21","fromValues","invertToRef","l0","l1","l2","l3","l4","l5","det","detDiv","det4","det5","other","r3","r4","r5","transformCoordinates","angle","sin","cos","tx","ty","parentMatrix","TranslationToRef","_TempPreTranslationMatrix","ScalingToRef","_TempScalingMatrix","RotationToRef","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","Identity","MathTools","precision","DefaultRoundingPrecision","Control","transformedMeasure","_evaluatedMeasure","_shadowOffsetX","_shadowOffsetY","_shadowBlur","_previousShadowBlur","_shadowColor","fontOffset","_fontOffset","_alpha","_alphaSet","highlightLineWidth","_highlightLineWidth","isHighlighted","_isHighlighted","highlightColor","_highlightColor","_scaleX","_scaleY","_rotation","transformCenterY","_transformCenterY","transformCenterX","_transformCenterX","horizontalAlignment","_horizontalAlignment","verticalAlignment","_verticalAlignment","_fixedRatioMasterIsWidth","getValueInPixel","_resetFontCache","_style","_styleObserver","_isFontSizeInPercentage","isPercentage","fontSizeInPixels","fontSizeToUse","getValue","color","_color","gradient","_gradient","_zIndex","_doNotRender","_isVisible","onIsVisibleChangedObservable","descendantsOnlyPadding","_descendantsOnlyPadding","paddingLeft","_paddingLeft","paddingRight","_paddingRight","paddingTop","_paddingTop","paddingBottom","_paddingBottom","_left","leftInPixels","_top","topInPixels","linkOffsetX","_linkOffsetX","linkOffsetY","_linkOffsetY","recursivelyFirePointerOut","disabledColor","_disabledColor","disabledColorItem","_disabledColorItem","_tempPaddingMeasure","HORIZONTAL_ALIGNMENT_CENTER","VERTICAL_ALIGNMENT_CENTER","_wasDirty","_invertTransformMatrix","_transformedPosition","_isMatrixDirty","_fontSet","_dummyVector2","_downCount","_enterCount","_downPointerIds","_evaluatedParentMeasure","_customData","_automaticSize","clipContent","useBitmapCache","onWheelObservable","onPointerMoveObservable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onBeforeDrawObservable","onAfterDrawObservable","fixedRatio","_tmpMeasureA","getAscendantOfClass","markAllAsDirty","getLocalCoordinates","globalCoordinates","getLocalCoordinatesToRef","getParentLocalCoordinates","moveToVector3","HORIZONTAL_ALIGNMENT_LEFT","VERTICAL_ALIGNMENT_TOP","setPadding","bottom","setPaddingInPixels","oldLeft","oldTop","newLeft","newTop","abs","rect","_transform","_computeAdditionnalOffsetX","_computeAdditionnalOffsetY","leftShadowOffset","rightShadowOffset","topShadowOffset","bottomShadowOffset","offsetX","offsetY","_font","_prepareFont","_cachedOffsetX","_cachedOffsetY","ComposeToRef","_renderHighlight","lineWidth","_renderHighlightSpecific","strokeRect","_getColor","AllowAlphaInheritance","addAndTransformToRef","_preMeasure","_measure","_computeAlignment","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_clip","beginPath","_ClipMeasure","intersection","clip","_cacheData","putImageData","getImageData","_onPointerMove","coordinates","_onPointerEnter","canNotify","_onPointerDown","_onPointerUp","notifyClick","canNotifyClick","_onWheelScroll","previousControlOver","_GetFontOffset","serialization","cloned","animationIndex","parsedAnimation","internalClass","Parse","autoAnimate","autoAnimateFrom","autoAnimateTo","autoAnimateLoop","autoAnimateSpeed","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","getFontOffset","controlType","arc","closePath","AddHeader","Ellipse","thickness","_thickness","fill","stroke","Image","isLoaded","_loaded","detectPointerOnOpaqueOnly","_detectPointerOnOpaqueOnly","sliceLeft","_sliceLeft","sliceRight","_sliceRight","sliceTop","_sliceTop","sliceBottom","_sliceBottom","sourceLeft","_sourceLeft","sourceTop","_sourceTop","sourceWidth","_sourceWidth","sourceHeight","_sourceHeight","imageWidth","_imageWidth","imageHeight","_imageHeight","populateNinePatchSlicesFromImage","_populateNinePatchSlicesFromImage","_extractNinePatchSliceDataFromImage","isSVG","_isSVG","svgAttributesComputationCompleted","_svgAttributesComputationCompleted","autoScale","_autoScale","synchronizeSizeWithContent","stretch","_stretch","_rotate90","preserveProperties","_domImage","createCanvas","dataUrl","toDataURL","rotatedImage","_cellId","_cellWidth","_cellHeight","_handleRotationForSVGImage","_imageDataCache","srcImage","dstImage","_rotate90SourceProperties","onSVGAttributesComputedObservable","srcLeft","srcTop","srcWidth","domImage","srcHeight","dstLeft","dstTop","dstWidth","dstHeight","mult","_workingCanvas","imageData","_onImageLoaded","onload","onImageLoadedObservable","_source","SourceImgCache","_removeCacheUsage","timesUsed","_svgCheck","cachedData","img","loaded","waitingForLoadCallback","createCanvasImage","waitingCallback","referrerPolicy","src","search","lastIndexOf","svgsrc","elemid","svgExist","querySelector","svgDoc","contentDocument","documentElement","vb","getAttribute","docwidth","docheight","getElementById","_getSVGAttribs","svgImage","svgobj","elem","vb_width","vb_height","elem_bbox","getBBox","elem_matrix_a","elem_matrix_d","elem_matrix_e","elem_matrix_f","mainMatrix","baseVal","consolidate","a","f","cellWidth","cellHeight","cellId","STRETCH_FILL","STRETCH_NONE","STRETCH_UNIFORM","STRETCH_NINE_PATCH","STRETCH_EXTEND","_prepareWorkingCanvasForOpaqueDetection","_drawImage","sx","sy","sw","sh","tw","th","rowCount","naturalWidth","column","row","hRatio","vRatio","_renderNinePatch","leftWidth","topHeight","bottomHeight","rightWidth","centerWidth","centerHeight","targetCenterWidth","targetCenterHeight","centerLeftOffset","centerTopOffset","rightOffset","bottomOffset","MultiLine","_lineWidth","onPointUpdate","_dash","_points","dash","getAt","point","resetLinks","setLineDash","previousPoint","first","moveTo","_point","lineTo","_minX","_minY","_maxX","_maxY","StackPanel","isVertical","_isVertical","spacing","_spacing","_doNotTrackManualChanges","_manualWidth","_manualHeight","ignoreLayoutWarnings","stackWidth","stackHeight","childrenCount","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","manualWidth","manualHeight","TextWrapping","TextBlock","lines","_lines","resizeToFit","_resizeToFit","textWrapping","_textWrapping","text","_text","onTextChangedObservable","textHorizontalAlignment","_textHorizontalAlignment","textVerticalAlignment","_textVerticalAlignment","lineSpacing","_lineSpacing","outlineWidth","_outlineWidth","underline","_underline","lineThrough","_lineThrough","outlineColor","_outlineColor","wordDivider","_wordDivider","forceResizeWidth","_forceResizeWidth","Clip","onLinesReadyObservable","_linesTemp","_breakLines","maxLineWidth","line","newWidth","updateInPlace","newHeight","internalValue","_drawText","textWidth","strokeText","fillText","_renderLines","lineJoin","miterLimit","refWidth","refHeight","Ellipsis","_line","_parseLineEllipsis","WordWrap","_parseLineWordWrap","WordWrapEllipsis","_parseLineWordWrapEllipsis","_parseLine","_getTextMetricsWidth","measureText","_getCharsToRemove","lineLength","charWidth","removeChars","characters","textMetrics","actualBoundingBoxLeft","actualBoundingBoxRight","words","wordSplittingFunction","testLine","testWidth","_computeHeightForLinesOf","lastLine","currentLine","linesToRemove","rootY","ascent","descent","lineCount","computeExpectedHeight","tmpRect","tmpRect2","tmpV1","tmpV2","Measure","addX","addY","addWidth","addHeight","MultiLinePoint","multiLine","_multiLine","_x","_y","_control","_controlObserver","_mesh","_meshObserver","_translatePoint","xValue","yValue","ValueAndUnit","unit","UNITMODE_PIXEL","negativeValueAllowed","_value","_unit","_originalUnit","UNITMODE_PERCENTAGE","refValue","decimals","percentage","toFixed","pixels","_Regex","exec","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL"],"sourceRoot":""}