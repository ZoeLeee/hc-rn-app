{"version":3,"file":"js/vender~daa6273d.1269c057.js","mappings":"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","sources":["webpack:///../../../node_modules/@babylonjs/core/Physics/v1/Plugins/cannonJSPlugin.js","webpack:///../../../node_modules/@babylonjs/core/Physics/v1/Plugins/oimoJSPlugin.js","webpack:///../../../node_modules/@babylonjs/core/Physics/v1/physicsEngine.js","webpack:///../../../node_modules/@babylonjs/core/Physics/v1/physicsEngineComponent.js","webpack:///../../../node_modules/@babylonjs/core/Physics/v1/physicsImpostor.js","webpack:///../../../node_modules/@babylonjs/core/Physics/v1/physicsJoint.js","webpack:///../../../node_modules/@babylonjs/core/Physics/v2/IPhysicsEnginePlugin.js","webpack:///../../../node_modules/@babylonjs/core/Physics/v2/physicsBody.js","webpack:///../../../node_modules/@babylonjs/core/Physics/v2/physicsEngine.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/RenderPipeline/Pipelines/defaultRenderingPipeline.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/RenderPipeline/postProcessRenderEffect.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/RenderPipeline/postProcessRenderPipeline.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/RenderPipeline/postProcessRenderPipelineManager.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/anaglyphPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/bloomEffect.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/bloomMergePostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/blurPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/chromaticAberrationPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/circleOfConfusionPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/depthOfFieldBlurPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/depthOfFieldEffect.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/depthOfFieldMergePostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/extractHighlightsPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/fxaaPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/grainPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/imageProcessingPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/blackAndWhitePostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/colorCorrectionPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/convolutionPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/displayPassPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/filterPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/motionBlurPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/refractionPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/RenderPipeline/Pipelines/ssao2RenderingPipeline.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/RenderPipeline/Pipelines/ssaoRenderingPipeline.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/screenSpaceReflectionPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/RenderPipeline/Pipelines/standardRenderingPipeline.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/RenderPipeline/Pipelines/ssrRenderingPipeline.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/tonemapPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/volumetricLightScatteringPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/screenSpaceCurvaturePostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/passPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/postProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/postProcessManager.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/sharpenPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/stereoscopicInterlacePostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/subSurfaceScatteringPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/vrDistortionCorrectionPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/vrMultiviewToSingleviewPostProcess.js"],"sourcesContent":["import { Logger } from \"../../../Misc/logger.js\";\nimport { Vector3, Matrix, Quaternion } from \"../../../Maths/math.vector.js\";\nimport { VertexBuffer } from \"../../../Buffers/buffer.js\";\nimport { PhysicsImpostor } from \"..//physicsImpostor.js\";\nimport { PhysicsJoint } from \"../physicsJoint.js\";\nimport { PhysicsRaycastResult } from \"../../physicsRaycastResult.js\";\nimport { PhysicsEngine } from \"../physicsEngine.js\";\nimport { Epsilon } from \"../../../Maths/math.constants.js\";\n/** @internal */\nexport class CannonJSPlugin {\n    constructor(_useDeltaForWorldStep = true, iterations = 10, cannonInjection = CANNON) {\n        this._useDeltaForWorldStep = _useDeltaForWorldStep;\n        this.name = \"CannonJSPlugin\";\n        this._physicsMaterials = new Array();\n        this._fixedTimeStep = 1 / 60;\n        this._physicsBodiesToRemoveAfterStep = new Array();\n        this._firstFrame = true;\n        this._tmpQuaternion = new Quaternion();\n        this._minus90X = new Quaternion(-0.7071067811865475, 0, 0, 0.7071067811865475);\n        this._plus90X = new Quaternion(0.7071067811865475, 0, 0, 0.7071067811865475);\n        this._tmpPosition = Vector3.Zero();\n        this._tmpDeltaPosition = Vector3.Zero();\n        this._tmpUnityRotation = new Quaternion();\n        this.BJSCANNON = cannonInjection;\n        if (!this.isSupported()) {\n            Logger.Error(\"CannonJS is not available. Please make sure you included the js file.\");\n            return;\n        }\n        this._extendNamespace();\n        this.world = new this.BJSCANNON.World();\n        this.world.broadphase = new this.BJSCANNON.NaiveBroadphase();\n        this.world.solver.iterations = iterations;\n        this._cannonRaycastResult = new this.BJSCANNON.RaycastResult();\n        this._raycastResult = new PhysicsRaycastResult();\n    }\n    /**\n     *\n     * @returns plugin version\n     */\n    getPluginVersion() {\n        return 1;\n    }\n    setGravity(gravity) {\n        const vec = gravity;\n        this.world.gravity.set(vec.x, vec.y, vec.z);\n    }\n    setTimeStep(timeStep) {\n        this._fixedTimeStep = timeStep;\n    }\n    getTimeStep() {\n        return this._fixedTimeStep;\n    }\n    executeStep(delta, impostors) {\n        // due to cannon's architecture, the first frame's before-step is skipped.\n        if (this._firstFrame) {\n            this._firstFrame = false;\n            for (const impostor of impostors) {\n                if (!(impostor.type == PhysicsImpostor.HeightmapImpostor || impostor.type === PhysicsImpostor.PlaneImpostor)) {\n                    impostor.beforeStep();\n                }\n            }\n        }\n        this.world.step(this._useDeltaForWorldStep ? delta : this._fixedTimeStep);\n        this._removeMarkedPhysicsBodiesFromWorld();\n    }\n    _removeMarkedPhysicsBodiesFromWorld() {\n        if (this._physicsBodiesToRemoveAfterStep.length > 0) {\n            this._physicsBodiesToRemoveAfterStep.forEach((physicsBody) => {\n                if (typeof this.world.removeBody === \"function\") {\n                    this.world.removeBody(physicsBody);\n                }\n                else {\n                    this.world.remove(physicsBody);\n                }\n            });\n            this._physicsBodiesToRemoveAfterStep.length = 0;\n        }\n    }\n    applyImpulse(impostor, force, contactPoint) {\n        const worldPoint = new this.BJSCANNON.Vec3(contactPoint.x, contactPoint.y, contactPoint.z);\n        const impulse = new this.BJSCANNON.Vec3(force.x, force.y, force.z);\n        impostor.physicsBody.applyImpulse(impulse, worldPoint);\n    }\n    applyForce(impostor, force, contactPoint) {\n        const worldPoint = new this.BJSCANNON.Vec3(contactPoint.x, contactPoint.y, contactPoint.z);\n        const impulse = new this.BJSCANNON.Vec3(force.x, force.y, force.z);\n        impostor.physicsBody.applyForce(impulse, worldPoint);\n    }\n    generatePhysicsBody(impostor) {\n        // When calling forceUpdate generatePhysicsBody is called again, ensure that the updated body does not instantly collide with removed body\n        this._removeMarkedPhysicsBodiesFromWorld();\n        //parent-child relationship. Does this impostor have a parent impostor?\n        if (impostor.parent) {\n            if (impostor.physicsBody) {\n                this.removePhysicsBody(impostor);\n                //TODO is that needed?\n                impostor.forceUpdate();\n            }\n            return;\n        }\n        //should a new body be created for this impostor?\n        if (impostor.isBodyInitRequired()) {\n            const shape = this._createShape(impostor);\n            if (!shape) {\n                Logger.Warn(\"It was not possible to create a physics body for this object.\");\n                return;\n            }\n            //unregister events if body is being changed\n            const oldBody = impostor.physicsBody;\n            if (oldBody) {\n                this.removePhysicsBody(impostor);\n            }\n            //create the body and material\n            const material = this._addMaterial(\"mat-\" + impostor.uniqueId, impostor.getParam(\"friction\"), impostor.getParam(\"restitution\"));\n            const bodyCreationObject = {\n                mass: impostor.getParam(\"mass\"),\n                material: material,\n            };\n            // A simple extend, in case native options were used.\n            const nativeOptions = impostor.getParam(\"nativeOptions\");\n            for (const key in nativeOptions) {\n                if (Object.prototype.hasOwnProperty.call(nativeOptions, key)) {\n                    bodyCreationObject[key] = nativeOptions[key];\n                }\n            }\n            impostor.physicsBody = new this.BJSCANNON.Body(bodyCreationObject);\n            impostor.physicsBody.addEventListener(\"collide\", impostor.onCollide);\n            this.world.addEventListener(\"preStep\", impostor.beforeStep);\n            this.world.addEventListener(\"postStep\", impostor.afterStep);\n            impostor.physicsBody.addShape(shape);\n            if (typeof this.world.addBody === \"function\") {\n                this.world.addBody(impostor.physicsBody);\n            }\n            else {\n                this.world.add(impostor.physicsBody);\n            }\n            //try to keep the body moving in the right direction by taking old properties.\n            //Should be tested!\n            if (oldBody) {\n                [\"force\", \"torque\", \"velocity\", \"angularVelocity\"].forEach(function (param) {\n                    const vec = oldBody[param];\n                    impostor.physicsBody[param].set(vec.x, vec.y, vec.z);\n                });\n            }\n            this._processChildMeshes(impostor);\n        }\n        //now update the body's transformation\n        this._updatePhysicsBodyTransformation(impostor);\n    }\n    _processChildMeshes(mainImpostor) {\n        const meshChildren = mainImpostor.object.getChildMeshes ? mainImpostor.object.getChildMeshes(true) : [];\n        const mainRotation = mainImpostor.object.rotationQuaternion;\n        if (mainRotation) {\n            mainRotation.conjugateToRef(this._tmpQuaternion);\n        }\n        else {\n            this._tmpQuaternion.set(0, 0, 0, 1);\n        }\n        if (meshChildren.length) {\n            const processMesh = (mesh) => {\n                if (!mesh.rotationQuaternion) {\n                    return;\n                }\n                const childImpostor = mesh.getPhysicsImpostor();\n                if (childImpostor) {\n                    const parent = childImpostor.parent;\n                    if (parent !== mainImpostor && mesh.parent) {\n                        const pPosition = mesh.getAbsolutePosition().subtract(mesh.parent.getAbsolutePosition());\n                        const q = mesh.rotationQuaternion.multiply(this._tmpQuaternion);\n                        if (childImpostor.physicsBody) {\n                            this.removePhysicsBody(childImpostor);\n                            childImpostor.physicsBody = null;\n                        }\n                        childImpostor.parent = mainImpostor;\n                        childImpostor.resetUpdateFlags();\n                        mainImpostor.physicsBody.addShape(this._createShape(childImpostor), new this.BJSCANNON.Vec3(pPosition.x, pPosition.y, pPosition.z), new this.BJSCANNON.Quaternion(q.x, q.y, q.z, q.w));\n                        //Add the mass of the children.\n                        mainImpostor.physicsBody.mass += childImpostor.getParam(\"mass\");\n                    }\n                }\n                mesh.getChildMeshes(true)\n                    .filter((m) => !!m.physicsImpostor)\n                    .forEach(processMesh);\n            };\n            meshChildren.filter((m) => !!m.physicsImpostor).forEach(processMesh);\n        }\n    }\n    removePhysicsBody(impostor) {\n        impostor.physicsBody.removeEventListener(\"collide\", impostor.onCollide);\n        this.world.removeEventListener(\"preStep\", impostor.beforeStep);\n        this.world.removeEventListener(\"postStep\", impostor.afterStep);\n        // Only remove the physics body after the physics step to avoid disrupting cannon's internal state\n        if (this._physicsBodiesToRemoveAfterStep.indexOf(impostor.physicsBody) === -1) {\n            this._physicsBodiesToRemoveAfterStep.push(impostor.physicsBody);\n        }\n    }\n    generateJoint(impostorJoint) {\n        const mainBody = impostorJoint.mainImpostor.physicsBody;\n        const connectedBody = impostorJoint.connectedImpostor.physicsBody;\n        if (!mainBody || !connectedBody) {\n            return;\n        }\n        let constraint;\n        const jointData = impostorJoint.joint.jointData;\n        //TODO - https://github.com/schteppe/this.BJSCANNON.js/blob/gh-pages/demos/collisionFilter.html\n        const constraintData = {\n            pivotA: jointData.mainPivot ? new this.BJSCANNON.Vec3().set(jointData.mainPivot.x, jointData.mainPivot.y, jointData.mainPivot.z) : null,\n            pivotB: jointData.connectedPivot ? new this.BJSCANNON.Vec3().set(jointData.connectedPivot.x, jointData.connectedPivot.y, jointData.connectedPivot.z) : null,\n            axisA: jointData.mainAxis ? new this.BJSCANNON.Vec3().set(jointData.mainAxis.x, jointData.mainAxis.y, jointData.mainAxis.z) : null,\n            axisB: jointData.connectedAxis ? new this.BJSCANNON.Vec3().set(jointData.connectedAxis.x, jointData.connectedAxis.y, jointData.connectedAxis.z) : null,\n            maxForce: jointData.nativeParams.maxForce,\n            collideConnected: !!jointData.collision,\n        };\n        switch (impostorJoint.joint.type) {\n            case PhysicsJoint.HingeJoint:\n            case PhysicsJoint.Hinge2Joint:\n                constraint = new this.BJSCANNON.HingeConstraint(mainBody, connectedBody, constraintData);\n                break;\n            case PhysicsJoint.DistanceJoint:\n                constraint = new this.BJSCANNON.DistanceConstraint(mainBody, connectedBody, jointData.maxDistance || 2);\n                break;\n            case PhysicsJoint.SpringJoint: {\n                const springData = jointData;\n                constraint = new this.BJSCANNON.Spring(mainBody, connectedBody, {\n                    restLength: springData.length,\n                    stiffness: springData.stiffness,\n                    damping: springData.damping,\n                    localAnchorA: constraintData.pivotA,\n                    localAnchorB: constraintData.pivotB,\n                });\n                break;\n            }\n            case PhysicsJoint.LockJoint:\n                constraint = new this.BJSCANNON.LockConstraint(mainBody, connectedBody, constraintData);\n                break;\n            case PhysicsJoint.PointToPointJoint:\n            case PhysicsJoint.BallAndSocketJoint:\n            default:\n                constraint = new this.BJSCANNON.PointToPointConstraint(mainBody, constraintData.pivotA, connectedBody, constraintData.pivotB, constraintData.maxForce);\n                break;\n        }\n        //set the collideConnected flag after the creation, since DistanceJoint ignores it.\n        constraint.collideConnected = !!jointData.collision;\n        impostorJoint.joint.physicsJoint = constraint;\n        //don't add spring as constraint, as it is not one.\n        if (impostorJoint.joint.type !== PhysicsJoint.SpringJoint) {\n            this.world.addConstraint(constraint);\n        }\n        else {\n            impostorJoint.joint.jointData.forceApplicationCallback =\n                impostorJoint.joint.jointData.forceApplicationCallback ||\n                    function () {\n                        constraint.applyForce();\n                    };\n            impostorJoint.mainImpostor.registerAfterPhysicsStep(impostorJoint.joint.jointData.forceApplicationCallback);\n        }\n    }\n    removeJoint(impostorJoint) {\n        if (impostorJoint.joint.type !== PhysicsJoint.SpringJoint) {\n            this.world.removeConstraint(impostorJoint.joint.physicsJoint);\n        }\n        else {\n            impostorJoint.mainImpostor.unregisterAfterPhysicsStep(impostorJoint.joint.jointData.forceApplicationCallback);\n        }\n    }\n    _addMaterial(name, friction, restitution) {\n        let index;\n        let mat;\n        for (index = 0; index < this._physicsMaterials.length; index++) {\n            mat = this._physicsMaterials[index];\n            if (mat.friction === friction && mat.restitution === restitution) {\n                return mat;\n            }\n        }\n        const currentMat = new this.BJSCANNON.Material(name);\n        currentMat.friction = friction;\n        currentMat.restitution = restitution;\n        this._physicsMaterials.push(currentMat);\n        return currentMat;\n    }\n    _checkWithEpsilon(value) {\n        return value < Epsilon ? Epsilon : value;\n    }\n    _createShape(impostor) {\n        const object = impostor.object;\n        let returnValue;\n        const impostorExtents = impostor.getObjectExtents();\n        switch (impostor.type) {\n            case PhysicsImpostor.SphereImpostor: {\n                const radiusX = impostorExtents.x;\n                const radiusY = impostorExtents.y;\n                const radiusZ = impostorExtents.z;\n                returnValue = new this.BJSCANNON.Sphere(Math.max(this._checkWithEpsilon(radiusX), this._checkWithEpsilon(radiusY), this._checkWithEpsilon(radiusZ)) / 2);\n                break;\n            }\n            //TMP also for cylinder - TODO Cannon supports cylinder natively.\n            case PhysicsImpostor.CylinderImpostor: {\n                let nativeParams = impostor.getParam(\"nativeOptions\");\n                if (!nativeParams) {\n                    nativeParams = {};\n                }\n                const radiusTop = nativeParams.radiusTop !== undefined ? nativeParams.radiusTop : this._checkWithEpsilon(impostorExtents.x) / 2;\n                const radiusBottom = nativeParams.radiusBottom !== undefined ? nativeParams.radiusBottom : this._checkWithEpsilon(impostorExtents.x) / 2;\n                const height = nativeParams.height !== undefined ? nativeParams.height : this._checkWithEpsilon(impostorExtents.y);\n                const numSegments = nativeParams.numSegments !== undefined ? nativeParams.numSegments : 16;\n                returnValue = new this.BJSCANNON.Cylinder(radiusTop, radiusBottom, height, numSegments);\n                // Rotate 90 degrees as this shape is horizontal in cannon\n                const quat = new this.BJSCANNON.Quaternion();\n                quat.setFromAxisAngle(new this.BJSCANNON.Vec3(1, 0, 0), -Math.PI / 2);\n                const translation = new this.BJSCANNON.Vec3(0, 0, 0);\n                returnValue.transformAllPoints(translation, quat);\n                break;\n            }\n            case PhysicsImpostor.BoxImpostor: {\n                const box = impostorExtents.scale(0.5);\n                returnValue = new this.BJSCANNON.Box(new this.BJSCANNON.Vec3(this._checkWithEpsilon(box.x), this._checkWithEpsilon(box.y), this._checkWithEpsilon(box.z)));\n                break;\n            }\n            case PhysicsImpostor.PlaneImpostor:\n                Logger.Warn(\"Attention, PlaneImposter might not behave as you expect. Consider using BoxImposter instead\");\n                returnValue = new this.BJSCANNON.Plane();\n                break;\n            case PhysicsImpostor.MeshImpostor: {\n                // should transform the vertex data to world coordinates!!\n                const rawVerts = object.getVerticesData ? object.getVerticesData(VertexBuffer.PositionKind) : [];\n                const rawFaces = object.getIndices ? object.getIndices() : [];\n                if (!rawVerts) {\n                    Logger.Warn(\"Tried to create a MeshImpostor for an object without vertices. This will fail.\");\n                    return;\n                }\n                // get only scale! so the object could transform correctly.\n                const oldPosition = object.position.clone();\n                const oldRotation = object.rotation && object.rotation.clone();\n                const oldQuaternion = object.rotationQuaternion && object.rotationQuaternion.clone();\n                object.position.copyFromFloats(0, 0, 0);\n                object.rotation && object.rotation.copyFromFloats(0, 0, 0);\n                object.rotationQuaternion && object.rotationQuaternion.copyFrom(impostor.getParentsRotation());\n                object.rotationQuaternion && object.parent && object.rotationQuaternion.conjugateInPlace();\n                const transform = object.computeWorldMatrix(true);\n                // convert rawVerts to object space\n                const transformedVertices = new Array();\n                let index;\n                for (index = 0; index < rawVerts.length; index += 3) {\n                    Vector3.TransformCoordinates(Vector3.FromArray(rawVerts, index), transform).toArray(transformedVertices, index);\n                }\n                Logger.Warn(\"MeshImpostor only collides against spheres.\");\n                returnValue = new this.BJSCANNON.Trimesh(transformedVertices, rawFaces);\n                //now set back the transformation!\n                object.position.copyFrom(oldPosition);\n                oldRotation && object.rotation && object.rotation.copyFrom(oldRotation);\n                oldQuaternion && object.rotationQuaternion && object.rotationQuaternion.copyFrom(oldQuaternion);\n                break;\n            }\n            case PhysicsImpostor.HeightmapImpostor: {\n                const oldPosition2 = object.position.clone();\n                const oldRotation2 = object.rotation && object.rotation.clone();\n                const oldQuaternion2 = object.rotationQuaternion && object.rotationQuaternion.clone();\n                object.position.copyFromFloats(0, 0, 0);\n                object.rotation && object.rotation.copyFromFloats(0, 0, 0);\n                object.rotationQuaternion && object.rotationQuaternion.copyFrom(impostor.getParentsRotation());\n                object.rotationQuaternion && object.parent && object.rotationQuaternion.conjugateInPlace();\n                object.rotationQuaternion && object.rotationQuaternion.multiplyInPlace(this._minus90X);\n                returnValue = this._createHeightmap(object);\n                object.position.copyFrom(oldPosition2);\n                oldRotation2 && object.rotation && object.rotation.copyFrom(oldRotation2);\n                oldQuaternion2 && object.rotationQuaternion && object.rotationQuaternion.copyFrom(oldQuaternion2);\n                object.computeWorldMatrix(true);\n                break;\n            }\n            case PhysicsImpostor.ParticleImpostor:\n                returnValue = new this.BJSCANNON.Particle();\n                break;\n            case PhysicsImpostor.NoImpostor:\n                returnValue = new this.BJSCANNON.Box(new this.BJSCANNON.Vec3(0, 0, 0));\n                break;\n        }\n        return returnValue;\n    }\n    _createHeightmap(object, pointDepth) {\n        let pos = object.getVerticesData(VertexBuffer.PositionKind);\n        const transform = object.computeWorldMatrix(true);\n        // convert rawVerts to object space\n        const transformedVertices = new Array();\n        let index;\n        for (index = 0; index < pos.length; index += 3) {\n            Vector3.TransformCoordinates(Vector3.FromArray(pos, index), transform).toArray(transformedVertices, index);\n        }\n        pos = transformedVertices;\n        const matrix = new Array();\n        //For now pointDepth will not be used and will be automatically calculated.\n        //Future reference - try and find the best place to add a reference to the pointDepth variable.\n        const arraySize = pointDepth || ~~(Math.sqrt(pos.length / 3) - 1);\n        const boundingInfo = object.getBoundingInfo();\n        const dim = Math.min(boundingInfo.boundingBox.extendSizeWorld.x, boundingInfo.boundingBox.extendSizeWorld.y);\n        const minY = boundingInfo.boundingBox.extendSizeWorld.z;\n        const elementSize = (dim * 2) / arraySize;\n        for (let i = 0; i < pos.length; i = i + 3) {\n            const x = Math.round(pos[i + 0] / elementSize + arraySize / 2);\n            const z = Math.round((pos[i + 1] / elementSize - arraySize / 2) * -1);\n            const y = -pos[i + 2] + minY;\n            if (!matrix[x]) {\n                matrix[x] = [];\n            }\n            if (!matrix[x][z]) {\n                matrix[x][z] = y;\n            }\n            matrix[x][z] = Math.max(y, matrix[x][z]);\n        }\n        for (let x = 0; x <= arraySize; ++x) {\n            if (!matrix[x]) {\n                let loc = 1;\n                while (!matrix[(x + loc) % arraySize]) {\n                    loc++;\n                }\n                matrix[x] = matrix[(x + loc) % arraySize].slice();\n                //console.log(\"missing x\", x);\n            }\n            for (let z = 0; z <= arraySize; ++z) {\n                if (!matrix[x][z]) {\n                    let loc = 1;\n                    let newValue;\n                    while (newValue === undefined) {\n                        newValue = matrix[x][(z + loc++) % arraySize];\n                    }\n                    matrix[x][z] = newValue;\n                }\n            }\n        }\n        const shape = new this.BJSCANNON.Heightfield(matrix, {\n            elementSize: elementSize,\n        });\n        //For future reference, needed for body transformation\n        shape.minY = minY;\n        return shape;\n    }\n    _updatePhysicsBodyTransformation(impostor) {\n        const object = impostor.object;\n        //make sure it is updated...\n        object.computeWorldMatrix && object.computeWorldMatrix(true);\n        if (!object.getBoundingInfo()) {\n            return;\n        }\n        const center = impostor.getObjectCenter();\n        //m.getAbsolutePosition().subtract(m.getBoundingInfo().boundingBox.centerWorld)\n        // The delta between the mesh position and the mesh bounding box center\n        this._tmpDeltaPosition.copyFrom(object.getAbsolutePivotPoint().subtract(center));\n        this._tmpDeltaPosition.divideInPlace(impostor.object.scaling);\n        this._tmpPosition.copyFrom(center);\n        let quaternion = object.rotationQuaternion;\n        if (!quaternion) {\n            return;\n        }\n        //is shape is a plane or a heightmap, it must be rotated 90 degs in the X axis.\n        //ideally these would be rotated at time of creation like cylinder but they dont extend ConvexPolyhedron\n        if (impostor.type === PhysicsImpostor.PlaneImpostor || impostor.type === PhysicsImpostor.HeightmapImpostor) {\n            //-90 DEG in X, precalculated\n            quaternion = quaternion.multiply(this._minus90X);\n            //Invert! (Precalculated, 90 deg in X)\n            //No need to clone. this will never change.\n            impostor.setDeltaRotation(this._plus90X);\n        }\n        //If it is a heightfield, if should be centered.\n        if (impostor.type === PhysicsImpostor.HeightmapImpostor) {\n            const mesh = object;\n            let boundingInfo = mesh.getBoundingInfo();\n            //calculate the correct body position:\n            const rotationQuaternion = mesh.rotationQuaternion;\n            mesh.rotationQuaternion = this._tmpUnityRotation;\n            mesh.computeWorldMatrix(true);\n            //get original center with no rotation\n            const c = center.clone();\n            let oldPivot = mesh.getPivotMatrix();\n            if (oldPivot) {\n                // create a copy the pivot Matrix as it is modified in place\n                oldPivot = oldPivot.clone();\n            }\n            else {\n                oldPivot = Matrix.Identity();\n            }\n            //calculate the new center using a pivot (since this.BJSCANNON.js doesn't center height maps)\n            const p = Matrix.Translation(boundingInfo.boundingBox.extendSizeWorld.x, 0, -boundingInfo.boundingBox.extendSizeWorld.z);\n            mesh.setPreTransformMatrix(p);\n            mesh.computeWorldMatrix(true);\n            // force bounding box recomputation\n            boundingInfo = mesh.getBoundingInfo();\n            //calculate the translation\n            const translation = boundingInfo.boundingBox.centerWorld.subtract(center).subtract(mesh.position).negate();\n            this._tmpPosition.copyFromFloats(translation.x, translation.y - boundingInfo.boundingBox.extendSizeWorld.y, translation.z);\n            //add it inverted to the delta\n            this._tmpDeltaPosition.copyFrom(boundingInfo.boundingBox.centerWorld.subtract(c));\n            this._tmpDeltaPosition.y += boundingInfo.boundingBox.extendSizeWorld.y;\n            //rotation is back\n            mesh.rotationQuaternion = rotationQuaternion;\n            mesh.setPreTransformMatrix(oldPivot);\n            mesh.computeWorldMatrix(true);\n        }\n        else if (impostor.type === PhysicsImpostor.MeshImpostor) {\n            this._tmpDeltaPosition.copyFromFloats(0, 0, 0);\n        }\n        impostor.setDeltaPosition(this._tmpDeltaPosition);\n        //Now update the impostor object\n        impostor.physicsBody.position.set(this._tmpPosition.x, this._tmpPosition.y, this._tmpPosition.z);\n        impostor.physicsBody.quaternion.set(quaternion.x, quaternion.y, quaternion.z, quaternion.w);\n    }\n    setTransformationFromPhysicsBody(impostor) {\n        impostor.object.position.set(impostor.physicsBody.position.x, impostor.physicsBody.position.y, impostor.physicsBody.position.z);\n        if (impostor.object.rotationQuaternion) {\n            const q = impostor.physicsBody.quaternion;\n            impostor.object.rotationQuaternion.set(q.x, q.y, q.z, q.w);\n        }\n    }\n    setPhysicsBodyTransformation(impostor, newPosition, newRotation) {\n        impostor.physicsBody.position.set(newPosition.x, newPosition.y, newPosition.z);\n        impostor.physicsBody.quaternion.set(newRotation.x, newRotation.y, newRotation.z, newRotation.w);\n    }\n    isSupported() {\n        return this.BJSCANNON !== undefined;\n    }\n    setLinearVelocity(impostor, velocity) {\n        impostor.physicsBody.velocity.set(velocity.x, velocity.y, velocity.z);\n    }\n    setAngularVelocity(impostor, velocity) {\n        impostor.physicsBody.angularVelocity.set(velocity.x, velocity.y, velocity.z);\n    }\n    getLinearVelocity(impostor) {\n        const v = impostor.physicsBody.velocity;\n        if (!v) {\n            return null;\n        }\n        return new Vector3(v.x, v.y, v.z);\n    }\n    getAngularVelocity(impostor) {\n        const v = impostor.physicsBody.angularVelocity;\n        if (!v) {\n            return null;\n        }\n        return new Vector3(v.x, v.y, v.z);\n    }\n    setBodyMass(impostor, mass) {\n        impostor.physicsBody.mass = mass;\n        impostor.physicsBody.updateMassProperties();\n    }\n    getBodyMass(impostor) {\n        return impostor.physicsBody.mass;\n    }\n    getBodyFriction(impostor) {\n        return impostor.physicsBody.material.friction;\n    }\n    setBodyFriction(impostor, friction) {\n        impostor.physicsBody.material.friction = friction;\n    }\n    getBodyRestitution(impostor) {\n        return impostor.physicsBody.material.restitution;\n    }\n    setBodyRestitution(impostor, restitution) {\n        impostor.physicsBody.material.restitution = restitution;\n    }\n    sleepBody(impostor) {\n        impostor.physicsBody.sleep();\n    }\n    wakeUpBody(impostor) {\n        impostor.physicsBody.wakeUp();\n    }\n    updateDistanceJoint(joint, maxDistance) {\n        joint.physicsJoint.distance = maxDistance;\n    }\n    setMotor(joint, speed, maxForce, motorIndex) {\n        if (!motorIndex) {\n            joint.physicsJoint.enableMotor();\n            joint.physicsJoint.setMotorSpeed(speed);\n            if (maxForce) {\n                this.setLimit(joint, maxForce);\n            }\n        }\n    }\n    setLimit(joint, minForce, maxForce) {\n        joint.physicsJoint.motorEquation.maxForce = maxForce;\n        joint.physicsJoint.motorEquation.minForce = minForce === void 0 ? -minForce : minForce;\n    }\n    syncMeshWithImpostor(mesh, impostor) {\n        const body = impostor.physicsBody;\n        mesh.position.x = body.position.x;\n        mesh.position.y = body.position.y;\n        mesh.position.z = body.position.z;\n        if (mesh.rotationQuaternion) {\n            mesh.rotationQuaternion.x = body.quaternion.x;\n            mesh.rotationQuaternion.y = body.quaternion.y;\n            mesh.rotationQuaternion.z = body.quaternion.z;\n            mesh.rotationQuaternion.w = body.quaternion.w;\n        }\n    }\n    getRadius(impostor) {\n        const shape = impostor.physicsBody.shapes[0];\n        return shape.boundingSphereRadius;\n    }\n    getBoxSizeToRef(impostor, result) {\n        const shape = impostor.physicsBody.shapes[0];\n        result.x = shape.halfExtents.x * 2;\n        result.y = shape.halfExtents.y * 2;\n        result.z = shape.halfExtents.z * 2;\n    }\n    dispose() { }\n    _extendNamespace() {\n        //this will force cannon to execute at least one step when using interpolation\n        const step_tmp1 = new this.BJSCANNON.Vec3();\n        const engine = this.BJSCANNON;\n        this.BJSCANNON.World.prototype.step = function (dt, timeSinceLastCalled, maxSubSteps) {\n            maxSubSteps = maxSubSteps || 10;\n            timeSinceLastCalled = timeSinceLastCalled || 0;\n            if (timeSinceLastCalled === 0) {\n                this.internalStep(dt);\n                this.time += dt;\n            }\n            else {\n                let internalSteps = Math.floor((this.time + timeSinceLastCalled) / dt) - Math.floor(this.time / dt);\n                internalSteps = Math.min(internalSteps, maxSubSteps) || 1;\n                const t0 = performance.now();\n                for (let i = 0; i !== internalSteps; i++) {\n                    this.internalStep(dt);\n                    if (performance.now() - t0 > dt * 1000) {\n                        break;\n                    }\n                }\n                this.time += timeSinceLastCalled;\n                const h = this.time % dt;\n                const h_div_dt = h / dt;\n                const interpvelo = step_tmp1;\n                const bodies = this.bodies;\n                for (let j = 0; j !== bodies.length; j++) {\n                    const b = bodies[j];\n                    if (b.type !== engine.Body.STATIC && b.sleepState !== engine.Body.SLEEPING) {\n                        b.position.vsub(b.previousPosition, interpvelo);\n                        interpvelo.scale(h_div_dt, interpvelo);\n                        b.position.vadd(interpvelo, b.interpolatedPosition);\n                    }\n                    else {\n                        b.interpolatedPosition.set(b.position.x, b.position.y, b.position.z);\n                        b.interpolatedQuaternion.set(b.quaternion.x, b.quaternion.y, b.quaternion.z, b.quaternion.w);\n                    }\n                }\n            }\n        };\n    }\n    /**\n     * Does a raycast in the physics world\n     * @param from when should the ray start?\n     * @param to when should the ray end?\n     * @returns PhysicsRaycastResult\n     */\n    raycast(from, to) {\n        this._raycastResult.reset(from, to);\n        this.raycastToRef(from, to, this._raycastResult);\n        return this._raycastResult;\n    }\n    /**\n     * Does a raycast in the physics world\n     * @param from when should the ray start?\n     * @param to when should the ray end?\n     * @param result resulting PhysicsRaycastResult\n     */\n    raycastToRef(from, to, result) {\n        this._cannonRaycastResult.reset();\n        this.world.raycastClosest(from, to, {}, this._cannonRaycastResult);\n        result.reset(from, to);\n        if (this._cannonRaycastResult.hasHit) {\n            // TODO: do we also want to get the body it hit?\n            result.setHitData({\n                x: this._cannonRaycastResult.hitNormalWorld.x,\n                y: this._cannonRaycastResult.hitNormalWorld.y,\n                z: this._cannonRaycastResult.hitNormalWorld.z,\n            }, {\n                x: this._cannonRaycastResult.hitPointWorld.x,\n                y: this._cannonRaycastResult.hitPointWorld.y,\n                z: this._cannonRaycastResult.hitPointWorld.z,\n            });\n            result.setHitDistance(this._cannonRaycastResult.distance);\n        }\n    }\n}\nPhysicsEngine.DefaultPluginFactory = () => {\n    return new CannonJSPlugin();\n};\n//# sourceMappingURL=cannonJSPlugin.js.map","import { PhysicsImpostor } from \"../physicsImpostor.js\";\nimport { PhysicsJoint } from \"../physicsJoint.js\";\nimport { Vector3, Quaternion } from \"../../../Maths/math.vector.js\";\nimport { Logger } from \"../../../Misc/logger.js\";\nimport { PhysicsRaycastResult } from \"../../physicsRaycastResult.js\";\nimport { Epsilon } from \"../../../Maths/math.constants.js\";\n/** @internal */\nexport class OimoJSPlugin {\n    constructor(_useDeltaForWorldStep = true, iterations, oimoInjection = OIMO) {\n        this._useDeltaForWorldStep = _useDeltaForWorldStep;\n        this.name = \"OimoJSPlugin\";\n        this._fixedTimeStep = 1 / 60;\n        this._tmpImpostorsArray = [];\n        this._tmpPositionVector = Vector3.Zero();\n        this.BJSOIMO = oimoInjection;\n        this.world = new this.BJSOIMO.World({\n            iterations: iterations,\n        });\n        this.world.clear();\n        this._raycastResult = new PhysicsRaycastResult();\n    }\n    /**\n     *\n     * @returns plugin version\n     */\n    getPluginVersion() {\n        return 1;\n    }\n    setGravity(gravity) {\n        this.world.gravity.set(gravity.x, gravity.y, gravity.z);\n    }\n    setTimeStep(timeStep) {\n        this.world.timeStep = timeStep;\n    }\n    getTimeStep() {\n        return this.world.timeStep;\n    }\n    executeStep(delta, impostors) {\n        impostors.forEach(function (impostor) {\n            impostor.beforeStep();\n        });\n        this.world.timeStep = this._useDeltaForWorldStep ? delta : this._fixedTimeStep;\n        this.world.step();\n        impostors.forEach((impostor) => {\n            impostor.afterStep();\n            //update the ordered impostors array\n            this._tmpImpostorsArray[impostor.uniqueId] = impostor;\n        });\n        //check for collisions\n        let contact = this.world.contacts;\n        while (contact !== null) {\n            if (contact.touching && !contact.body1.sleeping && !contact.body2.sleeping) {\n                contact = contact.next;\n                continue;\n            }\n            //is this body colliding with any other? get the impostor\n            const mainImpostor = this._tmpImpostorsArray[+contact.body1.name];\n            const collidingImpostor = this._tmpImpostorsArray[+contact.body2.name];\n            if (!mainImpostor || !collidingImpostor) {\n                contact = contact.next;\n                continue;\n            }\n            mainImpostor.onCollide({ body: collidingImpostor.physicsBody, point: null, distance: 0, impulse: 0, normal: null });\n            collidingImpostor.onCollide({ body: mainImpostor.physicsBody, point: null, distance: 0, impulse: 0, normal: null });\n            contact = contact.next;\n        }\n    }\n    applyImpulse(impostor, force, contactPoint) {\n        const mass = impostor.physicsBody.mass;\n        impostor.physicsBody.applyImpulse(contactPoint.scale(this.world.invScale), force.scale(this.world.invScale * mass));\n    }\n    applyForce(impostor, force, contactPoint) {\n        Logger.Warn(\"Oimo doesn't support applying force. Using impulse instead.\");\n        this.applyImpulse(impostor, force, contactPoint);\n    }\n    generatePhysicsBody(impostor) {\n        //parent-child relationship. Does this impostor has a parent impostor?\n        if (impostor.parent) {\n            if (impostor.physicsBody) {\n                this.removePhysicsBody(impostor);\n                //TODO is that needed?\n                impostor.forceUpdate();\n            }\n            return;\n        }\n        if (impostor.isBodyInitRequired()) {\n            const bodyConfig = {\n                name: impostor.uniqueId,\n                //Oimo must have mass, also for static objects.\n                config: [impostor.getParam(\"mass\") || 0.001, impostor.getParam(\"friction\"), impostor.getParam(\"restitution\")],\n                size: [],\n                type: [],\n                pos: [],\n                posShape: [],\n                rot: [],\n                rotShape: [],\n                move: impostor.getParam(\"mass\") !== 0,\n                density: impostor.getParam(\"mass\"),\n                friction: impostor.getParam(\"friction\"),\n                restitution: impostor.getParam(\"restitution\"),\n                //Supporting older versions of Oimo\n                world: this.world,\n            };\n            const impostors = [impostor];\n            const addToArray = (parent) => {\n                if (!parent.getChildMeshes) {\n                    return;\n                }\n                parent.getChildMeshes().forEach(function (m) {\n                    if (m.physicsImpostor) {\n                        impostors.push(m.physicsImpostor);\n                        //m.physicsImpostor._init();\n                    }\n                });\n            };\n            addToArray(impostor.object);\n            const checkWithEpsilon = (value) => {\n                return Math.max(value, Epsilon);\n            };\n            const globalQuaternion = new Quaternion();\n            impostors.forEach((i) => {\n                if (!i.object.rotationQuaternion) {\n                    return;\n                }\n                //get the correct bounding box\n                const oldQuaternion = i.object.rotationQuaternion;\n                globalQuaternion.copyFrom(oldQuaternion);\n                i.object.rotationQuaternion.set(0, 0, 0, 1);\n                i.object.computeWorldMatrix(true);\n                const rot = globalQuaternion.toEulerAngles();\n                const impostorExtents = i.getObjectExtents();\n                // eslint-disable-next-line no-loss-of-precision\n                const radToDeg = 57.295779513082320876;\n                if (i === impostor) {\n                    const center = impostor.getObjectCenter();\n                    impostor.object.getAbsolutePivotPoint().subtractToRef(center, this._tmpPositionVector);\n                    this._tmpPositionVector.divideInPlace(impostor.object.scaling);\n                    //Can also use Array.prototype.push.apply\n                    bodyConfig.pos.push(center.x);\n                    bodyConfig.pos.push(center.y);\n                    bodyConfig.pos.push(center.z);\n                    bodyConfig.posShape.push(0, 0, 0);\n                    bodyConfig.rotShape.push(0, 0, 0);\n                }\n                else {\n                    const localPosition = i.object.position.clone();\n                    bodyConfig.posShape.push(localPosition.x);\n                    bodyConfig.posShape.push(localPosition.y);\n                    bodyConfig.posShape.push(localPosition.z);\n                    // bodyConfig.pos.push(0, 0, 0);\n                    bodyConfig.rotShape.push(rot.x * radToDeg, rot.y * radToDeg, rot.z * radToDeg);\n                }\n                i.object.rotationQuaternion.copyFrom(globalQuaternion);\n                // register mesh\n                switch (i.type) {\n                    case PhysicsImpostor.ParticleImpostor:\n                        Logger.Warn(\"No Particle support in OIMO.js. using SphereImpostor instead\");\n                    // eslint-disable-next-line no-fallthrough\n                    case PhysicsImpostor.SphereImpostor: {\n                        const radiusX = impostorExtents.x;\n                        const radiusY = impostorExtents.y;\n                        const radiusZ = impostorExtents.z;\n                        const size = Math.max(checkWithEpsilon(radiusX), checkWithEpsilon(radiusY), checkWithEpsilon(radiusZ)) / 2;\n                        bodyConfig.type.push(\"sphere\");\n                        //due to the way oimo works with compounds, add 3 times\n                        bodyConfig.size.push(size);\n                        bodyConfig.size.push(size);\n                        bodyConfig.size.push(size);\n                        break;\n                    }\n                    case PhysicsImpostor.CylinderImpostor: {\n                        const sizeX = checkWithEpsilon(impostorExtents.x) / 2;\n                        const sizeY = checkWithEpsilon(impostorExtents.y);\n                        bodyConfig.type.push(\"cylinder\");\n                        bodyConfig.size.push(sizeX);\n                        bodyConfig.size.push(sizeY);\n                        //due to the way oimo works with compounds, add one more value.\n                        bodyConfig.size.push(sizeY);\n                        break;\n                    }\n                    case PhysicsImpostor.PlaneImpostor:\n                    case PhysicsImpostor.BoxImpostor:\n                    default: {\n                        const sizeX = checkWithEpsilon(impostorExtents.x);\n                        const sizeY = checkWithEpsilon(impostorExtents.y);\n                        const sizeZ = checkWithEpsilon(impostorExtents.z);\n                        bodyConfig.type.push(\"box\");\n                        //if (i === impostor) {\n                        bodyConfig.size.push(sizeX);\n                        bodyConfig.size.push(sizeY);\n                        bodyConfig.size.push(sizeZ);\n                        //} else {\n                        //    bodyConfig.size.push(0,0,0);\n                        //}\n                        break;\n                    }\n                }\n                //actually not needed, but hey...\n                i.object.rotationQuaternion = oldQuaternion;\n            });\n            impostor.physicsBody = this.world.add(bodyConfig);\n            // set the quaternion, ignoring the previously defined (euler) rotation\n            impostor.physicsBody.resetQuaternion(globalQuaternion);\n            // update with delta 0, so the body will receive the new rotation.\n            impostor.physicsBody.updatePosition(0);\n        }\n        else {\n            this._tmpPositionVector.copyFromFloats(0, 0, 0);\n        }\n        impostor.setDeltaPosition(this._tmpPositionVector);\n        //this._tmpPositionVector.addInPlace(impostor.mesh.getBoundingInfo().boundingBox.center);\n        //this.setPhysicsBodyTransformation(impostor, this._tmpPositionVector, impostor.mesh.rotationQuaternion);\n    }\n    removePhysicsBody(impostor) {\n        //impostor.physicsBody.dispose();\n        this.world.removeRigidBody(impostor.physicsBody);\n    }\n    generateJoint(impostorJoint) {\n        const mainBody = impostorJoint.mainImpostor.physicsBody;\n        const connectedBody = impostorJoint.connectedImpostor.physicsBody;\n        if (!mainBody || !connectedBody) {\n            return;\n        }\n        const jointData = impostorJoint.joint.jointData;\n        const options = jointData.nativeParams || {};\n        let type;\n        const nativeJointData = {\n            body1: mainBody,\n            body2: connectedBody,\n            axe1: options.axe1 || (jointData.mainAxis ? jointData.mainAxis.asArray() : null),\n            axe2: options.axe2 || (jointData.connectedAxis ? jointData.connectedAxis.asArray() : null),\n            pos1: options.pos1 || (jointData.mainPivot ? jointData.mainPivot.asArray() : null),\n            pos2: options.pos2 || (jointData.connectedPivot ? jointData.connectedPivot.asArray() : null),\n            min: options.min,\n            max: options.max,\n            collision: options.collision || jointData.collision,\n            spring: options.spring,\n            //supporting older version of Oimo\n            world: this.world,\n        };\n        switch (impostorJoint.joint.type) {\n            case PhysicsJoint.BallAndSocketJoint:\n                type = \"jointBall\";\n                break;\n            case PhysicsJoint.SpringJoint: {\n                Logger.Warn(\"OIMO.js doesn't support Spring Constraint. Simulating using DistanceJoint instead\");\n                const springData = jointData;\n                nativeJointData.min = springData.length || nativeJointData.min;\n                //Max should also be set, just make sure it is at least min\n                nativeJointData.max = Math.max(nativeJointData.min, nativeJointData.max);\n            }\n            // eslint-disable-next-line no-fallthrough\n            case PhysicsJoint.DistanceJoint:\n                type = \"jointDistance\";\n                nativeJointData.max = jointData.maxDistance;\n                break;\n            case PhysicsJoint.PrismaticJoint:\n                type = \"jointPrisme\";\n                break;\n            case PhysicsJoint.SliderJoint:\n                type = \"jointSlide\";\n                break;\n            case PhysicsJoint.WheelJoint:\n                type = \"jointWheel\";\n                break;\n            case PhysicsJoint.HingeJoint:\n            default:\n                type = \"jointHinge\";\n                break;\n        }\n        nativeJointData.type = type;\n        impostorJoint.joint.physicsJoint = this.world.add(nativeJointData);\n    }\n    removeJoint(impostorJoint) {\n        //Bug in Oimo prevents us from disposing a joint in the playground\n        //joint.joint.physicsJoint.dispose();\n        //So we will bruteforce it!\n        try {\n            this.world.removeJoint(impostorJoint.joint.physicsJoint);\n        }\n        catch (e) {\n            Logger.Warn(e);\n        }\n    }\n    isSupported() {\n        return this.BJSOIMO !== undefined;\n    }\n    setTransformationFromPhysicsBody(impostor) {\n        if (!impostor.physicsBody.sleeping) {\n            if (impostor.physicsBody.shapes.next) {\n                let parent = impostor.physicsBody.shapes;\n                while (parent.next) {\n                    parent = parent.next;\n                }\n                impostor.object.position.set(parent.position.x, parent.position.y, parent.position.z);\n            }\n            else {\n                const pos = impostor.physicsBody.getPosition();\n                impostor.object.position.set(pos.x, pos.y, pos.z);\n            }\n            if (impostor.object.rotationQuaternion) {\n                const quat = impostor.physicsBody.getQuaternion();\n                impostor.object.rotationQuaternion.set(quat.x, quat.y, quat.z, quat.w);\n            }\n        }\n    }\n    setPhysicsBodyTransformation(impostor, newPosition, newRotation) {\n        const body = impostor.physicsBody;\n        // disable bidirectional for compound meshes\n        if (impostor.physicsBody.shapes.next) {\n            return;\n        }\n        body.position.set(newPosition.x, newPosition.y, newPosition.z);\n        body.orientation.set(newRotation.x, newRotation.y, newRotation.z, newRotation.w);\n        body.syncShapes();\n        body.awake();\n    }\n    /*private _getLastShape(body: any): any {\n        var lastShape = body.shapes;\n        while (lastShape.next) {\n            lastShape = lastShape.next;\n        }\n        return lastShape;\n    }*/\n    setLinearVelocity(impostor, velocity) {\n        impostor.physicsBody.linearVelocity.set(velocity.x, velocity.y, velocity.z);\n    }\n    setAngularVelocity(impostor, velocity) {\n        impostor.physicsBody.angularVelocity.set(velocity.x, velocity.y, velocity.z);\n    }\n    getLinearVelocity(impostor) {\n        const v = impostor.physicsBody.linearVelocity;\n        if (!v) {\n            return null;\n        }\n        return new Vector3(v.x, v.y, v.z);\n    }\n    getAngularVelocity(impostor) {\n        const v = impostor.physicsBody.angularVelocity;\n        if (!v) {\n            return null;\n        }\n        return new Vector3(v.x, v.y, v.z);\n    }\n    setBodyMass(impostor, mass) {\n        const staticBody = mass === 0;\n        //this will actually set the body's density and not its mass.\n        //But this is how oimo treats the mass variable.\n        impostor.physicsBody.shapes.density = staticBody ? 1 : mass;\n        impostor.physicsBody.setupMass(staticBody ? 0x2 : 0x1);\n    }\n    getBodyMass(impostor) {\n        return impostor.physicsBody.shapes.density;\n    }\n    getBodyFriction(impostor) {\n        return impostor.physicsBody.shapes.friction;\n    }\n    setBodyFriction(impostor, friction) {\n        impostor.physicsBody.shapes.friction = friction;\n    }\n    getBodyRestitution(impostor) {\n        return impostor.physicsBody.shapes.restitution;\n    }\n    setBodyRestitution(impostor, restitution) {\n        impostor.physicsBody.shapes.restitution = restitution;\n    }\n    sleepBody(impostor) {\n        impostor.physicsBody.sleep();\n    }\n    wakeUpBody(impostor) {\n        impostor.physicsBody.awake();\n    }\n    updateDistanceJoint(joint, maxDistance, minDistance) {\n        joint.physicsJoint.limitMotor.upperLimit = maxDistance;\n        if (minDistance !== void 0) {\n            joint.physicsJoint.limitMotor.lowerLimit = minDistance;\n        }\n    }\n    setMotor(joint, speed, force, motorIndex) {\n        if (force !== undefined) {\n            Logger.Warn(\"OimoJS plugin currently has unexpected behavior when using setMotor with force parameter\");\n        }\n        else {\n            force = 1e6;\n        }\n        speed *= -1;\n        //TODO separate rotational and transational motors.\n        const motor = motorIndex\n            ? joint.physicsJoint.rotationalLimitMotor2\n            : joint.physicsJoint.rotationalLimitMotor1 || joint.physicsJoint.rotationalLimitMotor || joint.physicsJoint.limitMotor;\n        if (motor) {\n            motor.setMotor(speed, force);\n        }\n    }\n    setLimit(joint, upperLimit, lowerLimit, motorIndex) {\n        //TODO separate rotational and transational motors.\n        const motor = motorIndex\n            ? joint.physicsJoint.rotationalLimitMotor2\n            : joint.physicsJoint.rotationalLimitMotor1 || joint.physicsJoint.rotationalLimitMotor || joint.physicsJoint.limitMotor;\n        if (motor) {\n            motor.setLimit(upperLimit, lowerLimit === void 0 ? -upperLimit : lowerLimit);\n        }\n    }\n    syncMeshWithImpostor(mesh, impostor) {\n        const body = impostor.physicsBody;\n        mesh.position.x = body.position.x;\n        mesh.position.y = body.position.y;\n        mesh.position.z = body.position.z;\n        if (mesh.rotationQuaternion) {\n            mesh.rotationQuaternion.x = body.orientation.x;\n            mesh.rotationQuaternion.y = body.orientation.y;\n            mesh.rotationQuaternion.z = body.orientation.z;\n            mesh.rotationQuaternion.w = body.orientation.w;\n        }\n    }\n    getRadius(impostor) {\n        return impostor.physicsBody.shapes.radius;\n    }\n    getBoxSizeToRef(impostor, result) {\n        const shape = impostor.physicsBody.shapes;\n        result.x = shape.halfWidth * 2;\n        result.y = shape.halfHeight * 2;\n        result.z = shape.halfDepth * 2;\n    }\n    dispose() {\n        this.world.clear();\n    }\n    /**\n     * Does a raycast in the physics world\n     * @param from when should the ray start?\n     * @param to when should the ray end?\n     * @returns PhysicsRaycastResult\n     */\n    raycast(from, to) {\n        Logger.Warn(\"raycast is not currently supported by the Oimo physics plugin\");\n        this._raycastResult.reset(from, to);\n        return this._raycastResult;\n    }\n    /**\n     * Does a raycast in the physics world\n     * @param from when should the ray start?\n     * @param to when should the ray end?\n     * @param result resulting PhysicsRaycastResult\n     */\n    raycastToRef(from, to, result) {\n        Logger.Warn(\"raycast is not currently supported by the Oimo physics plugin\");\n        result.reset(from, to);\n    }\n}\n//# sourceMappingURL=oimoJSPlugin.js.map","import { Vector3 } from \"../../Maths/math.vector.js\";\nimport { _WarnImport } from \"../../Misc/devTools.js\";\n/**\n * Class used to control physics engine\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\n */\nexport class PhysicsEngine {\n    /**\n     *\n     * @returns version\n     */\n    getPluginVersion() {\n        return this._physicsPlugin.getPluginVersion();\n    }\n    /**\n     * Factory used to create the default physics plugin.\n     * @returns The default physics plugin\n     */\n    static DefaultPluginFactory() {\n        throw _WarnImport(\"CannonJSPlugin\");\n    }\n    /**\n     * Creates a new Physics Engine\n     * @param gravity defines the gravity vector used by the simulation\n     * @param _physicsPlugin defines the plugin to use (CannonJS by default)\n     */\n    constructor(gravity, _physicsPlugin = PhysicsEngine.DefaultPluginFactory()) {\n        this._physicsPlugin = _physicsPlugin;\n        /**\n         * Global value used to control the smallest number supported by the simulation\n         */\n        this._impostors = [];\n        this._joints = [];\n        this._subTimeStep = 0;\n        this._uniqueIdCounter = 0;\n        if (!this._physicsPlugin.isSupported()) {\n            throw new Error(\"Physics Engine \" + this._physicsPlugin.name + \" cannot be found. \" + \"Please make sure it is included.\");\n        }\n        gravity = gravity || new Vector3(0, -9.807, 0);\n        this.setGravity(gravity);\n        this.setTimeStep();\n    }\n    /**\n     * Sets the gravity vector used by the simulation\n     * @param gravity defines the gravity vector to use\n     */\n    setGravity(gravity) {\n        this.gravity = gravity;\n        this._physicsPlugin.setGravity(this.gravity);\n    }\n    /**\n     * Set the time step of the physics engine.\n     * Default is 1/60.\n     * To slow it down, enter 1/600 for example.\n     * To speed it up, 1/30\n     * @param newTimeStep defines the new timestep to apply to this world.\n     */\n    setTimeStep(newTimeStep = 1 / 60) {\n        this._physicsPlugin.setTimeStep(newTimeStep);\n    }\n    /**\n     * Get the time step of the physics engine.\n     * @returns the current time step\n     */\n    getTimeStep() {\n        return this._physicsPlugin.getTimeStep();\n    }\n    /**\n     * Set the sub time step of the physics engine.\n     * Default is 0 meaning there is no sub steps\n     * To increase physics resolution precision, set a small value (like 1 ms)\n     * @param subTimeStep defines the new sub timestep used for physics resolution.\n     */\n    setSubTimeStep(subTimeStep = 0) {\n        this._subTimeStep = subTimeStep;\n    }\n    /**\n     * Get the sub time step of the physics engine.\n     * @returns the current sub time step\n     */\n    getSubTimeStep() {\n        return this._subTimeStep;\n    }\n    /**\n     * Release all resources\n     */\n    dispose() {\n        this._impostors.forEach(function (impostor) {\n            impostor.dispose();\n        });\n        this._physicsPlugin.dispose();\n    }\n    /**\n     * Gets the name of the current physics plugin\n     * @returns the name of the plugin\n     */\n    getPhysicsPluginName() {\n        return this._physicsPlugin.name;\n    }\n    /**\n     * Adding a new impostor for the impostor tracking.\n     * This will be done by the impostor itself.\n     * @param impostor the impostor to add\n     */\n    addImpostor(impostor) {\n        this._impostors.push(impostor);\n        impostor.uniqueId = this._uniqueIdCounter++;\n        //if no parent, generate the body\n        if (!impostor.parent) {\n            this._physicsPlugin.generatePhysicsBody(impostor);\n        }\n    }\n    /**\n     * Remove an impostor from the engine.\n     * This impostor and its mesh will not longer be updated by the physics engine.\n     * @param impostor the impostor to remove\n     */\n    removeImpostor(impostor) {\n        const index = this._impostors.indexOf(impostor);\n        if (index > -1) {\n            const removed = this._impostors.splice(index, 1);\n            //Is it needed?\n            if (removed.length) {\n                this.getPhysicsPlugin().removePhysicsBody(impostor);\n            }\n        }\n    }\n    /**\n     * Add a joint to the physics engine\n     * @param mainImpostor defines the main impostor to which the joint is added.\n     * @param connectedImpostor defines the impostor that is connected to the main impostor using this joint\n     * @param joint defines the joint that will connect both impostors.\n     */\n    addJoint(mainImpostor, connectedImpostor, joint) {\n        const impostorJoint = {\n            mainImpostor: mainImpostor,\n            connectedImpostor: connectedImpostor,\n            joint: joint,\n        };\n        joint.physicsPlugin = this._physicsPlugin;\n        this._joints.push(impostorJoint);\n        this._physicsPlugin.generateJoint(impostorJoint);\n    }\n    /**\n     * Removes a joint from the simulation\n     * @param mainImpostor defines the impostor used with the joint\n     * @param connectedImpostor defines the other impostor connected to the main one by the joint\n     * @param joint defines the joint to remove\n     */\n    removeJoint(mainImpostor, connectedImpostor, joint) {\n        const matchingJoints = this._joints.filter(function (impostorJoint) {\n            return impostorJoint.connectedImpostor === connectedImpostor && impostorJoint.joint === joint && impostorJoint.mainImpostor === mainImpostor;\n        });\n        if (matchingJoints.length) {\n            this._physicsPlugin.removeJoint(matchingJoints[0]);\n            //TODO remove it from the list as well\n        }\n    }\n    /**\n     * Called by the scene. No need to call it.\n     * @param delta defines the timespan between frames\n     */\n    _step(delta) {\n        //check if any mesh has no body / requires an update\n        this._impostors.forEach((impostor) => {\n            if (impostor.isBodyInitRequired()) {\n                this._physicsPlugin.generatePhysicsBody(impostor);\n            }\n        });\n        if (delta > 0.1) {\n            delta = 0.1;\n        }\n        else if (delta <= 0) {\n            delta = 1.0 / 60.0;\n        }\n        this._physicsPlugin.executeStep(delta, this._impostors);\n    }\n    /**\n     * Gets the current plugin used to run the simulation\n     * @returns current plugin\n     */\n    getPhysicsPlugin() {\n        return this._physicsPlugin;\n    }\n    /**\n     * Gets the list of physic impostors\n     * @returns an array of PhysicsImpostor\n     */\n    getImpostors() {\n        return this._impostors;\n    }\n    /**\n     * Gets the impostor for a physics enabled object\n     * @param object defines the object impersonated by the impostor\n     * @returns the PhysicsImpostor or null if not found\n     */\n    getImpostorForPhysicsObject(object) {\n        for (let i = 0; i < this._impostors.length; ++i) {\n            if (this._impostors[i].object === object) {\n                return this._impostors[i];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets the impostor for a physics body object\n     * @param body defines physics body used by the impostor\n     * @returns the PhysicsImpostor or null if not found\n     */\n    getImpostorWithPhysicsBody(body) {\n        for (let i = 0; i < this._impostors.length; ++i) {\n            if (this._impostors[i].physicsBody === body) {\n                return this._impostors[i];\n            }\n        }\n        return null;\n    }\n    /**\n     * Does a raycast in the physics world\n     * @param from when should the ray start?\n     * @param to when should the ray end?\n     * @returns PhysicsRaycastResult\n     */\n    raycast(from, to) {\n        return this._physicsPlugin.raycast(from, to);\n    }\n    /**\n     * Does a raycast in the physics world\n     * @param from when should the ray start?\n     * @param to when should the ray end?\n     * @param result resulting PhysicsRaycastResult\n     */\n    raycastToRef(from, to, result) {\n        return this._physicsPlugin.raycastToRef(from, to, result);\n    }\n}\n//# sourceMappingURL=physicsEngine.js.map","import { AbstractMesh } from \"../../Meshes/abstractMesh.js\";\nimport { PhysicsJoint } from \"./physicsJoint.js\";\nObject.defineProperty(AbstractMesh.prototype, \"physicsImpostor\", {\n    get: function () {\n        return this._physicsImpostor;\n    },\n    set: function (value) {\n        if (this._physicsImpostor === value) {\n            return;\n        }\n        if (this._disposePhysicsObserver) {\n            this.onDisposeObservable.remove(this._disposePhysicsObserver);\n        }\n        this._physicsImpostor = value;\n        if (value) {\n            this._disposePhysicsObserver = this.onDisposeObservable.add(() => {\n                // Physics\n                if (this.physicsImpostor) {\n                    this.physicsImpostor.dispose( /*!doNotRecurse*/);\n                    this.physicsImpostor = null;\n                }\n            });\n        }\n    },\n    enumerable: true,\n    configurable: true,\n});\n/**\n * Gets the current physics impostor\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics\n * @returns a physics impostor or null\n */\nAbstractMesh.prototype.getPhysicsImpostor = function () {\n    return this.physicsImpostor;\n};\n/**\n * Apply a physic impulse to the mesh\n * @param force defines the force to apply\n * @param contactPoint defines where to apply the force\n * @returns the current mesh\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\n */\nAbstractMesh.prototype.applyImpulse = function (force, contactPoint) {\n    if (!this.physicsImpostor) {\n        return this;\n    }\n    this.physicsImpostor.applyImpulse(force, contactPoint);\n    return this;\n};\n/**\n * Creates a physic joint between two meshes\n * @param otherMesh defines the other mesh to use\n * @param pivot1 defines the pivot to use on this mesh\n * @param pivot2 defines the pivot to use on the other mesh\n * @param options defines additional options (can be plugin dependent)\n * @returns the current mesh\n * @see https://www.babylonjs-playground.com/#0BS5U0#0\n */\nAbstractMesh.prototype.setPhysicsLinkWith = function (otherMesh, pivot1, pivot2, options) {\n    if (!this.physicsImpostor || !otherMesh.physicsImpostor) {\n        return this;\n    }\n    this.physicsImpostor.createJoint(otherMesh.physicsImpostor, PhysicsJoint.HingeJoint, {\n        mainPivot: pivot1,\n        connectedPivot: pivot2,\n        nativeParams: options,\n    });\n    return this;\n};\n//# sourceMappingURL=physicsEngineComponent.js.map","import { Logger } from \"../../Misc/logger.js\";\nimport { ArrayTools } from \"../../Misc/arrayTools.js\";\nimport { Vector3, Quaternion } from \"../../Maths/math.vector.js\";\nimport { AbstractMesh } from \"../../Meshes/abstractMesh.js\";\nimport { Mesh } from \"../../Meshes/mesh.js\";\nimport { PhysicsJoint } from \"./physicsJoint.js\";\nimport { Space } from \"../../Maths/math.axis.js\";\nMesh._PhysicsImpostorParser = function (scene, physicObject, jsonObject) {\n    return new PhysicsImpostor(physicObject, jsonObject.physicsImpostor, {\n        mass: jsonObject.physicsMass,\n        friction: jsonObject.physicsFriction,\n        restitution: jsonObject.physicsRestitution,\n    }, scene);\n};\n/**\n * Represents a physics imposter\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\n */\nexport class PhysicsImpostor {\n    /**\n     * Specifies if the physics imposter is disposed\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Gets the mass of the physics imposter\n     */\n    get mass() {\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyMass(this) : 0;\n    }\n    set mass(value) {\n        this.setMass(value);\n    }\n    /**\n     * Gets the coefficient of friction\n     */\n    get friction() {\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyFriction(this) : 0;\n    }\n    /**\n     * Sets the coefficient of friction\n     */\n    set friction(value) {\n        if (!this._physicsEngine) {\n            return;\n        }\n        this._physicsEngine.getPhysicsPlugin().setBodyFriction(this, value);\n    }\n    /**\n     * Gets the coefficient of restitution\n     */\n    get restitution() {\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyRestitution(this) : 0;\n    }\n    /**\n     * Sets the coefficient of restitution\n     */\n    set restitution(value) {\n        if (!this._physicsEngine) {\n            return;\n        }\n        this._physicsEngine.getPhysicsPlugin().setBodyRestitution(this, value);\n    }\n    /**\n     * Gets the pressure of a soft body; only supported by the AmmoJSPlugin\n     */\n    get pressure() {\n        if (!this._physicsEngine) {\n            return 0;\n        }\n        const plugin = this._physicsEngine.getPhysicsPlugin();\n        if (!plugin.setBodyPressure) {\n            return 0;\n        }\n        return plugin.getBodyPressure(this);\n    }\n    /**\n     * Sets the pressure of a soft body; only supported by the AmmoJSPlugin\n     */\n    set pressure(value) {\n        if (!this._physicsEngine) {\n            return;\n        }\n        const plugin = this._physicsEngine.getPhysicsPlugin();\n        if (!plugin.setBodyPressure) {\n            return;\n        }\n        plugin.setBodyPressure(this, value);\n    }\n    /**\n     * Gets the stiffness of a soft body; only supported by the AmmoJSPlugin\n     */\n    get stiffness() {\n        if (!this._physicsEngine) {\n            return 0;\n        }\n        const plugin = this._physicsEngine.getPhysicsPlugin();\n        if (!plugin.getBodyStiffness) {\n            return 0;\n        }\n        return plugin.getBodyStiffness(this);\n    }\n    /**\n     * Sets the stiffness of a soft body; only supported by the AmmoJSPlugin\n     */\n    set stiffness(value) {\n        if (!this._physicsEngine) {\n            return;\n        }\n        const plugin = this._physicsEngine.getPhysicsPlugin();\n        if (!plugin.setBodyStiffness) {\n            return;\n        }\n        plugin.setBodyStiffness(this, value);\n    }\n    /**\n     * Gets the velocityIterations of a soft body; only supported by the AmmoJSPlugin\n     */\n    get velocityIterations() {\n        if (!this._physicsEngine) {\n            return 0;\n        }\n        const plugin = this._physicsEngine.getPhysicsPlugin();\n        if (!plugin.getBodyVelocityIterations) {\n            return 0;\n        }\n        return plugin.getBodyVelocityIterations(this);\n    }\n    /**\n     * Sets the velocityIterations of a soft body; only supported by the AmmoJSPlugin\n     */\n    set velocityIterations(value) {\n        if (!this._physicsEngine) {\n            return;\n        }\n        const plugin = this._physicsEngine.getPhysicsPlugin();\n        if (!plugin.setBodyVelocityIterations) {\n            return;\n        }\n        plugin.setBodyVelocityIterations(this, value);\n    }\n    /**\n     * Gets the positionIterations of a soft body; only supported by the AmmoJSPlugin\n     */\n    get positionIterations() {\n        if (!this._physicsEngine) {\n            return 0;\n        }\n        const plugin = this._physicsEngine.getPhysicsPlugin();\n        if (!plugin.getBodyPositionIterations) {\n            return 0;\n        }\n        return plugin.getBodyPositionIterations(this);\n    }\n    /**\n     * Sets the positionIterations of a soft body; only supported by the AmmoJSPlugin\n     */\n    set positionIterations(value) {\n        if (!this._physicsEngine) {\n            return;\n        }\n        const plugin = this._physicsEngine.getPhysicsPlugin();\n        if (!plugin.setBodyPositionIterations) {\n            return;\n        }\n        plugin.setBodyPositionIterations(this, value);\n    }\n    /**\n     * Initializes the physics imposter\n     * @param object The physics-enabled object used as the physics imposter\n     * @param type The type of the physics imposter. Types are available as static members of this class.\n     * @param _options The options for the physics imposter\n     * @param _scene The Babylon scene\n     */\n    constructor(\n    /**\n     * The physics-enabled object used as the physics imposter\n     */\n    object, \n    /**\n     * The type of the physics imposter\n     */\n    type, _options = { mass: 0 }, _scene) {\n        this.object = object;\n        this.type = type;\n        this._options = _options;\n        this._scene = _scene;\n        /** @internal */\n        this._pluginData = {};\n        this._bodyUpdateRequired = false;\n        this._onBeforePhysicsStepCallbacks = new Array();\n        this._onAfterPhysicsStepCallbacks = new Array();\n        /** @internal */\n        this._onPhysicsCollideCallbacks = [];\n        this._deltaPosition = Vector3.Zero();\n        this._isDisposed = false;\n        /**\n         * @internal\n         */\n        this.soft = false;\n        /**\n         * @internal\n         */\n        this.segments = 0;\n        //temp variables for parent rotation calculations\n        //private _mats: Array<Matrix> = [new Matrix(), new Matrix()];\n        this._tmpQuat = new Quaternion();\n        this._tmpQuat2 = new Quaternion();\n        /**\n         * this function is executed by the physics engine.\n         */\n        this.beforeStep = () => {\n            if (!this._physicsEngine) {\n                return;\n            }\n            this.object.translate(this._deltaPosition, -1);\n            this._deltaRotationConjugated &&\n                this.object.rotationQuaternion &&\n                this.object.rotationQuaternion.multiplyToRef(this._deltaRotationConjugated, this.object.rotationQuaternion);\n            this.object.computeWorldMatrix(false);\n            if (this.object.parent && this.object.rotationQuaternion) {\n                this.getParentsRotation();\n                this._tmpQuat.multiplyToRef(this.object.rotationQuaternion, this._tmpQuat);\n            }\n            else {\n                this._tmpQuat.copyFrom(this.object.rotationQuaternion || new Quaternion());\n            }\n            if (!this._options.disableBidirectionalTransformation) {\n                this.object.rotationQuaternion &&\n                    this._physicsEngine.getPhysicsPlugin().setPhysicsBodyTransformation(this, /*bInfo.boundingBox.centerWorld*/ this.object.getAbsolutePosition(), this._tmpQuat);\n            }\n            this._onBeforePhysicsStepCallbacks.forEach((func) => {\n                func(this);\n            });\n        };\n        /**\n         * this function is executed by the physics engine\n         */\n        this.afterStep = () => {\n            if (!this._physicsEngine) {\n                return;\n            }\n            this._onAfterPhysicsStepCallbacks.forEach((func) => {\n                func(this);\n            });\n            this._physicsEngine.getPhysicsPlugin().setTransformationFromPhysicsBody(this);\n            // object has now its world rotation. needs to be converted to local.\n            if (this.object.parent && this.object.rotationQuaternion) {\n                this.getParentsRotation();\n                this._tmpQuat.conjugateInPlace();\n                this._tmpQuat.multiplyToRef(this.object.rotationQuaternion, this.object.rotationQuaternion);\n            }\n            // take the position set and make it the absolute position of this object.\n            this.object.setAbsolutePosition(this.object.position);\n            if (this._deltaRotation) {\n                this.object.rotationQuaternion && this.object.rotationQuaternion.multiplyToRef(this._deltaRotation, this.object.rotationQuaternion);\n                this._deltaPosition.applyRotationQuaternionToRef(this._deltaRotation, PhysicsImpostor._TmpVecs[0]);\n                this.object.translate(PhysicsImpostor._TmpVecs[0], 1);\n            }\n            else {\n                this.object.translate(this._deltaPosition, 1);\n            }\n            this.object.computeWorldMatrix(true);\n        };\n        /**\n         * Legacy collision detection event support\n         */\n        this.onCollideEvent = null;\n        /**\n         *\n         * @param e\n         * @returns\n         */\n        this.onCollide = (e) => {\n            if (!this._onPhysicsCollideCallbacks.length && !this.onCollideEvent) {\n                return;\n            }\n            if (!this._physicsEngine) {\n                return;\n            }\n            const otherImpostor = this._physicsEngine.getImpostorWithPhysicsBody(e.body);\n            if (otherImpostor) {\n                // Legacy collision detection event support\n                if (this.onCollideEvent) {\n                    this.onCollideEvent(this, otherImpostor);\n                }\n                this._onPhysicsCollideCallbacks\n                    .filter((obj) => {\n                    return obj.otherImpostors.indexOf(otherImpostor) !== -1;\n                })\n                    .forEach((obj) => {\n                    obj.callback(this, otherImpostor, e.point, e.distance, e.impulse, e.normal);\n                });\n            }\n        };\n        //sanity check!\n        if (!this.object) {\n            Logger.Error(\"No object was provided. A physics object is obligatory\");\n            return;\n        }\n        if (this.object.parent && _options.mass !== 0) {\n            Logger.Warn(\"A physics impostor has been created for an object which has a parent. Babylon physics currently works in local space so unexpected issues may occur.\");\n        }\n        // Legacy support for old syntax.\n        if (!this._scene && object.getScene) {\n            this._scene = object.getScene();\n        }\n        if (!this._scene) {\n            return;\n        }\n        if (this.type > 100) {\n            this.soft = true;\n        }\n        this._physicsEngine = this._scene.getPhysicsEngine();\n        if (!this._physicsEngine) {\n            Logger.Error(\"Physics not enabled. Please use scene.enablePhysics(...) before creating impostors.\");\n        }\n        else {\n            //set the object's quaternion, if not set\n            if (!this.object.rotationQuaternion) {\n                if (this.object.rotation) {\n                    this.object.rotationQuaternion = Quaternion.RotationYawPitchRoll(this.object.rotation.y, this.object.rotation.x, this.object.rotation.z);\n                }\n                else {\n                    this.object.rotationQuaternion = new Quaternion();\n                }\n            }\n            //default options params\n            this._options.mass = _options.mass === void 0 ? 0 : _options.mass;\n            this._options.friction = _options.friction === void 0 ? 0.2 : _options.friction;\n            this._options.restitution = _options.restitution === void 0 ? 0.2 : _options.restitution;\n            if (this.soft) {\n                //softbody mass must be above 0;\n                this._options.mass = this._options.mass > 0 ? this._options.mass : 1;\n                this._options.pressure = _options.pressure === void 0 ? 200 : _options.pressure;\n                this._options.stiffness = _options.stiffness === void 0 ? 1 : _options.stiffness;\n                this._options.velocityIterations = _options.velocityIterations === void 0 ? 20 : _options.velocityIterations;\n                this._options.positionIterations = _options.positionIterations === void 0 ? 20 : _options.positionIterations;\n                this._options.fixedPoints = _options.fixedPoints === void 0 ? 0 : _options.fixedPoints;\n                this._options.margin = _options.margin === void 0 ? 0 : _options.margin;\n                this._options.damping = _options.damping === void 0 ? 0 : _options.damping;\n                this._options.path = _options.path === void 0 ? null : _options.path;\n                this._options.shape = _options.shape === void 0 ? null : _options.shape;\n            }\n            this._joints = [];\n            //If the mesh has a parent, don't initialize the physicsBody. Instead wait for the parent to do that.\n            if (!this.object.parent || this._options.ignoreParent) {\n                this._init();\n            }\n            else if (this.object.parent.physicsImpostor) {\n                Logger.Warn(\"You must affect impostors to children before affecting impostor to parent.\");\n            }\n        }\n    }\n    /**\n     * This function will completely initialize this impostor.\n     * It will create a new body - but only if this mesh has no parent.\n     * If it has, this impostor will not be used other than to define the impostor\n     * of the child mesh.\n     * @internal\n     */\n    _init() {\n        if (!this._physicsEngine) {\n            return;\n        }\n        this._physicsEngine.removeImpostor(this);\n        this.physicsBody = null;\n        this._parent = this._parent || this._getPhysicsParent();\n        if (!this._isDisposed && (!this.parent || this._options.ignoreParent)) {\n            this._physicsEngine.addImpostor(this);\n        }\n    }\n    _getPhysicsParent() {\n        if (this.object.parent instanceof AbstractMesh) {\n            const parentMesh = this.object.parent;\n            return parentMesh.physicsImpostor;\n        }\n        return null;\n    }\n    /**\n     * Should a new body be generated.\n     * @returns boolean specifying if body initialization is required\n     */\n    isBodyInitRequired() {\n        return this._bodyUpdateRequired || (!this._physicsBody && (!this._parent || !!this._options.ignoreParent));\n    }\n    /**\n     * Sets the updated scaling\n     */\n    setScalingUpdated() {\n        this.forceUpdate();\n    }\n    /**\n     * Force a regeneration of this or the parent's impostor's body.\n     * Use with caution - This will remove all previously-instantiated joints.\n     */\n    forceUpdate() {\n        this._init();\n        if (this.parent && !this._options.ignoreParent) {\n            this.parent.forceUpdate();\n        }\n    }\n    /*public get mesh(): AbstractMesh {\n        return this._mesh;\n    }*/\n    /**\n     * Gets the body that holds this impostor. Either its own, or its parent.\n     */\n    get physicsBody() {\n        return this._parent && !this._options.ignoreParent ? this._parent.physicsBody : this._physicsBody;\n    }\n    /**\n     * Get the parent of the physics imposter\n     * @returns Physics imposter or null\n     */\n    get parent() {\n        return !this._options.ignoreParent && this._parent ? this._parent : null;\n    }\n    /**\n     * Sets the parent of the physics imposter\n     */\n    set parent(value) {\n        this._parent = value;\n    }\n    /**\n     * Set the physics body. Used mainly by the physics engine/plugin\n     */\n    set physicsBody(physicsBody) {\n        if (this._physicsBody && this._physicsEngine) {\n            this._physicsEngine.getPhysicsPlugin().removePhysicsBody(this);\n        }\n        this._physicsBody = physicsBody;\n        this.resetUpdateFlags();\n    }\n    /**\n     * Resets the update flags\n     */\n    resetUpdateFlags() {\n        this._bodyUpdateRequired = false;\n    }\n    /**\n     * Gets the object extents\n     * @returns the object extents\n     */\n    getObjectExtents() {\n        if (this.object.getBoundingInfo) {\n            const q = this.object.rotationQuaternion;\n            const scaling = this.object.scaling.clone();\n            //reset rotation\n            this.object.rotationQuaternion = PhysicsImpostor.IDENTITY_QUATERNION;\n            //calculate the world matrix with no rotation\n            const worldMatrix = this.object.computeWorldMatrix && this.object.computeWorldMatrix(true);\n            if (worldMatrix) {\n                worldMatrix.decompose(scaling, undefined, undefined);\n            }\n            const boundingInfo = this.object.getBoundingInfo();\n            // get the global scaling of the object\n            const size = boundingInfo.boundingBox.extendSize.scale(2).multiplyInPlace(scaling);\n            size.x = Math.abs(size.x);\n            size.y = Math.abs(size.y);\n            size.z = Math.abs(size.z);\n            //bring back the rotation\n            this.object.rotationQuaternion = q;\n            //calculate the world matrix with the new rotation\n            this.object.computeWorldMatrix && this.object.computeWorldMatrix(true);\n            return size;\n        }\n        else {\n            return PhysicsImpostor.DEFAULT_OBJECT_SIZE;\n        }\n    }\n    /**\n     * Gets the object center\n     * @returns The object center\n     */\n    getObjectCenter() {\n        if (this.object.getBoundingInfo) {\n            const boundingInfo = this.object.getBoundingInfo();\n            return boundingInfo.boundingBox.centerWorld;\n        }\n        else {\n            return this.object.position;\n        }\n    }\n    /**\n     * Get a specific parameter from the options parameters\n     * @param paramName The object parameter name\n     * @returns The object parameter\n     */\n    getParam(paramName) {\n        return this._options[paramName];\n    }\n    /**\n     * Sets a specific parameter in the options given to the physics plugin\n     * @param paramName The parameter name\n     * @param value The value of the parameter\n     */\n    setParam(paramName, value) {\n        this._options[paramName] = value;\n        this._bodyUpdateRequired = true;\n    }\n    /**\n     * Specifically change the body's mass. Won't recreate the physics body object\n     * @param mass The mass of the physics imposter\n     */\n    setMass(mass) {\n        if (this.getParam(\"mass\") !== mass) {\n            this.setParam(\"mass\", mass);\n        }\n        if (this._physicsEngine) {\n            this._physicsEngine.getPhysicsPlugin().setBodyMass(this, mass);\n        }\n    }\n    /**\n     * Gets the linear velocity\n     * @returns  linear velocity or null\n     */\n    getLinearVelocity() {\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getLinearVelocity(this) : Vector3.Zero();\n    }\n    /**\n     * Sets the linear velocity\n     * @param velocity  linear velocity or null\n     */\n    setLinearVelocity(velocity) {\n        if (this._physicsEngine) {\n            this._physicsEngine.getPhysicsPlugin().setLinearVelocity(this, velocity);\n        }\n    }\n    /**\n     * Gets the angular velocity\n     * @returns angular velocity or null\n     */\n    getAngularVelocity() {\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getAngularVelocity(this) : Vector3.Zero();\n    }\n    /**\n     * Sets the angular velocity\n     * @param velocity The velocity or null\n     */\n    setAngularVelocity(velocity) {\n        if (this._physicsEngine) {\n            this._physicsEngine.getPhysicsPlugin().setAngularVelocity(this, velocity);\n        }\n    }\n    /**\n     * Execute a function with the physics plugin native code\n     * Provide a function the will have two variables - the world object and the physics body object\n     * @param func The function to execute with the physics plugin native code\n     */\n    executeNativeFunction(func) {\n        if (this._physicsEngine) {\n            func(this._physicsEngine.getPhysicsPlugin().world, this.physicsBody);\n        }\n    }\n    /**\n     * Register a function that will be executed before the physics world is stepping forward\n     * @param func The function to execute before the physics world is stepped forward\n     */\n    registerBeforePhysicsStep(func) {\n        this._onBeforePhysicsStepCallbacks.push(func);\n    }\n    /**\n     * Unregister a function that will be executed before the physics world is stepping forward\n     * @param func The function to execute before the physics world is stepped forward\n     */\n    unregisterBeforePhysicsStep(func) {\n        const index = this._onBeforePhysicsStepCallbacks.indexOf(func);\n        if (index > -1) {\n            this._onBeforePhysicsStepCallbacks.splice(index, 1);\n        }\n        else {\n            Logger.Warn(\"Function to remove was not found\");\n        }\n    }\n    /**\n     * Register a function that will be executed after the physics step\n     * @param func The function to execute after physics step\n     */\n    registerAfterPhysicsStep(func) {\n        this._onAfterPhysicsStepCallbacks.push(func);\n    }\n    /**\n     * Unregisters a function that will be executed after the physics step\n     * @param func The function to execute after physics step\n     */\n    unregisterAfterPhysicsStep(func) {\n        const index = this._onAfterPhysicsStepCallbacks.indexOf(func);\n        if (index > -1) {\n            this._onAfterPhysicsStepCallbacks.splice(index, 1);\n        }\n        else {\n            Logger.Warn(\"Function to remove was not found\");\n        }\n    }\n    /**\n     * register a function that will be executed when this impostor collides against a different body\n     * @param collideAgainst Physics imposter, or array of physics imposters to collide against\n     * @param func Callback that is executed on collision\n     */\n    registerOnPhysicsCollide(collideAgainst, func) {\n        const collidedAgainstList = collideAgainst instanceof Array ? collideAgainst : [collideAgainst];\n        this._onPhysicsCollideCallbacks.push({ callback: func, otherImpostors: collidedAgainstList });\n    }\n    /**\n     * Unregisters the physics imposter's collision callback\n     * @param collideAgainst The physics object to collide against\n     * @param func Callback to execute on collision\n     */\n    unregisterOnPhysicsCollide(collideAgainst, func) {\n        const collidedAgainstList = collideAgainst instanceof Array ? collideAgainst : [collideAgainst];\n        let index = -1;\n        const found = this._onPhysicsCollideCallbacks.some((cbDef, idx) => {\n            if (cbDef.callback === func && cbDef.otherImpostors.length === collidedAgainstList.length) {\n                // chcek the arrays match\n                const sameList = cbDef.otherImpostors.every((impostor) => {\n                    return collidedAgainstList.indexOf(impostor) > -1;\n                });\n                if (sameList) {\n                    index = idx;\n                }\n                return sameList;\n            }\n            return false;\n        });\n        if (found) {\n            this._onPhysicsCollideCallbacks.splice(index, 1);\n        }\n        else {\n            Logger.Warn(\"Function to remove was not found\");\n        }\n    }\n    /**\n     * Get the parent rotation\n     * @returns The parent rotation\n     */\n    getParentsRotation() {\n        let parent = this.object.parent;\n        this._tmpQuat.copyFromFloats(0, 0, 0, 1);\n        while (parent) {\n            if (parent.rotationQuaternion) {\n                this._tmpQuat2.copyFrom(parent.rotationQuaternion);\n            }\n            else {\n                Quaternion.RotationYawPitchRollToRef(parent.rotation.y, parent.rotation.x, parent.rotation.z, this._tmpQuat2);\n            }\n            this._tmpQuat.multiplyToRef(this._tmpQuat2, this._tmpQuat);\n            parent = parent.parent;\n        }\n        return this._tmpQuat;\n    }\n    /**\n     * Apply a force\n     * @param force The force to apply\n     * @param contactPoint The contact point for the force\n     * @returns The physics imposter\n     */\n    applyForce(force, contactPoint) {\n        if (this._physicsEngine) {\n            this._physicsEngine.getPhysicsPlugin().applyForce(this, force, contactPoint);\n        }\n        return this;\n    }\n    /**\n     * Apply an impulse\n     * @param force The impulse force\n     * @param contactPoint The contact point for the impulse force\n     * @returns The physics imposter\n     */\n    applyImpulse(force, contactPoint) {\n        if (this._physicsEngine) {\n            this._physicsEngine.getPhysicsPlugin().applyImpulse(this, force, contactPoint);\n        }\n        return this;\n    }\n    /**\n     * A help function to create a joint\n     * @param otherImpostor A physics imposter used to create a joint\n     * @param jointType The type of joint\n     * @param jointData The data for the joint\n     * @returns The physics imposter\n     */\n    createJoint(otherImpostor, jointType, jointData) {\n        const joint = new PhysicsJoint(jointType, jointData);\n        this.addJoint(otherImpostor, joint);\n        return this;\n    }\n    /**\n     * Add a joint to this impostor with a different impostor\n     * @param otherImpostor A physics imposter used to add a joint\n     * @param joint The joint to add\n     * @returns The physics imposter\n     */\n    addJoint(otherImpostor, joint) {\n        this._joints.push({\n            otherImpostor: otherImpostor,\n            joint: joint,\n        });\n        if (this._physicsEngine) {\n            this._physicsEngine.addJoint(this, otherImpostor, joint);\n        }\n        return this;\n    }\n    /**\n     * Add an anchor to a cloth impostor\n     * @param otherImpostor rigid impostor to anchor to\n     * @param width ratio across width from 0 to 1\n     * @param height ratio up height from 0 to 1\n     * @param influence the elasticity between cloth impostor and anchor from 0, very stretchy to 1, little stretch\n     * @param noCollisionBetweenLinkedBodies when true collisions between cloth impostor and anchor are ignored; default false\n     * @returns impostor the soft imposter\n     */\n    addAnchor(otherImpostor, width, height, influence, noCollisionBetweenLinkedBodies) {\n        if (!this._physicsEngine) {\n            return this;\n        }\n        const plugin = this._physicsEngine.getPhysicsPlugin();\n        if (!plugin.appendAnchor) {\n            return this;\n        }\n        if (this._physicsEngine) {\n            plugin.appendAnchor(this, otherImpostor, width, height, influence, noCollisionBetweenLinkedBodies);\n        }\n        return this;\n    }\n    /**\n     * Add a hook to a rope impostor\n     * @param otherImpostor rigid impostor to anchor to\n     * @param length ratio across rope from 0 to 1\n     * @param influence the elasticity between rope impostor and anchor from 0, very stretchy to 1, little stretch\n     * @param noCollisionBetweenLinkedBodies when true collisions between soft impostor and anchor are ignored; default false\n     * @returns impostor the rope imposter\n     */\n    addHook(otherImpostor, length, influence, noCollisionBetweenLinkedBodies) {\n        if (!this._physicsEngine) {\n            return this;\n        }\n        const plugin = this._physicsEngine.getPhysicsPlugin();\n        if (!plugin.appendAnchor) {\n            return this;\n        }\n        if (this._physicsEngine) {\n            plugin.appendHook(this, otherImpostor, length, influence, noCollisionBetweenLinkedBodies);\n        }\n        return this;\n    }\n    /**\n     * Will keep this body still, in a sleep mode.\n     * @returns the physics imposter\n     */\n    sleep() {\n        if (this._physicsEngine) {\n            this._physicsEngine.getPhysicsPlugin().sleepBody(this);\n        }\n        return this;\n    }\n    /**\n     * Wake the body up.\n     * @returns The physics imposter\n     */\n    wakeUp() {\n        if (this._physicsEngine) {\n            this._physicsEngine.getPhysicsPlugin().wakeUpBody(this);\n        }\n        return this;\n    }\n    /**\n     * Clones the physics imposter\n     * @param newObject The physics imposter clones to this physics-enabled object\n     * @returns A nullable physics imposter\n     */\n    clone(newObject) {\n        if (!newObject) {\n            return null;\n        }\n        return new PhysicsImpostor(newObject, this.type, this._options, this._scene);\n    }\n    /**\n     * Disposes the physics imposter\n     */\n    dispose( /*disposeChildren: boolean = true*/) {\n        //no dispose if no physics engine is available.\n        if (!this._physicsEngine) {\n            return;\n        }\n        this._joints.forEach((j) => {\n            if (this._physicsEngine) {\n                this._physicsEngine.removeJoint(this, j.otherImpostor, j.joint);\n            }\n        });\n        //dispose the physics body\n        this._physicsEngine.removeImpostor(this);\n        if (this.parent) {\n            this.parent.forceUpdate();\n        }\n        else {\n            /*this._object.getChildMeshes().forEach(function(mesh) {\n                if (mesh.physicsImpostor) {\n                    if (disposeChildren) {\n                        mesh.physicsImpostor.dispose();\n                        mesh.physicsImpostor = null;\n                    }\n                }\n            })*/\n        }\n        this._isDisposed = true;\n    }\n    /**\n     * Sets the delta position\n     * @param position The delta position amount\n     */\n    setDeltaPosition(position) {\n        this._deltaPosition.copyFrom(position);\n    }\n    /**\n     * Sets the delta rotation\n     * @param rotation The delta rotation amount\n     */\n    setDeltaRotation(rotation) {\n        if (!this._deltaRotation) {\n            this._deltaRotation = new Quaternion();\n        }\n        this._deltaRotation.copyFrom(rotation);\n        this._deltaRotationConjugated = this._deltaRotation.conjugate();\n    }\n    /**\n     * Gets the box size of the physics imposter and stores the result in the input parameter\n     * @param result Stores the box size\n     * @returns The physics imposter\n     */\n    getBoxSizeToRef(result) {\n        if (this._physicsEngine) {\n            this._physicsEngine.getPhysicsPlugin().getBoxSizeToRef(this, result);\n        }\n        return this;\n    }\n    /**\n     * Gets the radius of the physics imposter\n     * @returns Radius of the physics imposter\n     */\n    getRadius() {\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getRadius(this) : 0;\n    }\n    /**\n     * Sync a bone with this impostor\n     * @param bone The bone to sync to the impostor.\n     * @param boneMesh The mesh that the bone is influencing.\n     * @param jointPivot The pivot of the joint / bone in local space.\n     * @param distToJoint Optional distance from the impostor to the joint.\n     * @param adjustRotation Optional quaternion for adjusting the local rotation of the bone.\n     */\n    syncBoneWithImpostor(bone, boneMesh, jointPivot, distToJoint, adjustRotation) {\n        const tempVec = PhysicsImpostor._TmpVecs[0];\n        const mesh = this.object;\n        if (mesh.rotationQuaternion) {\n            if (adjustRotation) {\n                const tempQuat = PhysicsImpostor._TmpQuat;\n                mesh.rotationQuaternion.multiplyToRef(adjustRotation, tempQuat);\n                bone.setRotationQuaternion(tempQuat, Space.WORLD, boneMesh);\n            }\n            else {\n                bone.setRotationQuaternion(mesh.rotationQuaternion, Space.WORLD, boneMesh);\n            }\n        }\n        tempVec.x = 0;\n        tempVec.y = 0;\n        tempVec.z = 0;\n        if (jointPivot) {\n            tempVec.x = jointPivot.x;\n            tempVec.y = jointPivot.y;\n            tempVec.z = jointPivot.z;\n            bone.getDirectionToRef(tempVec, boneMesh, tempVec);\n            if (distToJoint === undefined || distToJoint === null) {\n                distToJoint = jointPivot.length();\n            }\n            tempVec.x *= distToJoint;\n            tempVec.y *= distToJoint;\n            tempVec.z *= distToJoint;\n        }\n        if (bone.getParent()) {\n            tempVec.addInPlace(mesh.getAbsolutePosition());\n            bone.setAbsolutePosition(tempVec, boneMesh);\n        }\n        else {\n            boneMesh.setAbsolutePosition(mesh.getAbsolutePosition());\n            boneMesh.position.x -= tempVec.x;\n            boneMesh.position.y -= tempVec.y;\n            boneMesh.position.z -= tempVec.z;\n        }\n    }\n    /**\n     * Sync impostor to a bone\n     * @param bone The bone that the impostor will be synced to.\n     * @param boneMesh The mesh that the bone is influencing.\n     * @param jointPivot The pivot of the joint / bone in local space.\n     * @param distToJoint Optional distance from the impostor to the joint.\n     * @param adjustRotation Optional quaternion for adjusting the local rotation of the bone.\n     * @param boneAxis Optional vector3 axis the bone is aligned with\n     */\n    syncImpostorWithBone(bone, boneMesh, jointPivot, distToJoint, adjustRotation, boneAxis) {\n        const mesh = this.object;\n        if (mesh.rotationQuaternion) {\n            if (adjustRotation) {\n                const tempQuat = PhysicsImpostor._TmpQuat;\n                bone.getRotationQuaternionToRef(Space.WORLD, boneMesh, tempQuat);\n                tempQuat.multiplyToRef(adjustRotation, mesh.rotationQuaternion);\n            }\n            else {\n                bone.getRotationQuaternionToRef(Space.WORLD, boneMesh, mesh.rotationQuaternion);\n            }\n        }\n        const pos = PhysicsImpostor._TmpVecs[0];\n        const boneDir = PhysicsImpostor._TmpVecs[1];\n        if (!boneAxis) {\n            boneAxis = PhysicsImpostor._TmpVecs[2];\n            boneAxis.x = 0;\n            boneAxis.y = 1;\n            boneAxis.z = 0;\n        }\n        bone.getDirectionToRef(boneAxis, boneMesh, boneDir);\n        bone.getAbsolutePositionToRef(boneMesh, pos);\n        if ((distToJoint === undefined || distToJoint === null) && jointPivot) {\n            distToJoint = jointPivot.length();\n        }\n        if (distToJoint !== undefined && distToJoint !== null) {\n            pos.x += boneDir.x * distToJoint;\n            pos.y += boneDir.y * distToJoint;\n            pos.z += boneDir.z * distToJoint;\n        }\n        mesh.setAbsolutePosition(pos);\n    }\n}\n/**\n * The default object size of the imposter\n */\nPhysicsImpostor.DEFAULT_OBJECT_SIZE = new Vector3(1, 1, 1);\n/**\n * The identity quaternion of the imposter\n */\nPhysicsImpostor.IDENTITY_QUATERNION = Quaternion.Identity();\nPhysicsImpostor._TmpVecs = ArrayTools.BuildArray(3, Vector3.Zero);\nPhysicsImpostor._TmpQuat = Quaternion.Identity();\n//Impostor types\n/**\n * No-Imposter type\n */\nPhysicsImpostor.NoImpostor = 0;\n/**\n * Sphere-Imposter type\n */\nPhysicsImpostor.SphereImpostor = 1;\n/**\n * Box-Imposter type\n */\nPhysicsImpostor.BoxImpostor = 2;\n/**\n * Plane-Imposter type\n */\nPhysicsImpostor.PlaneImpostor = 3;\n/**\n * Mesh-imposter type (Only available to objects with vertices data)\n */\nPhysicsImpostor.MeshImpostor = 4;\n/**\n * Capsule-Impostor type (Ammo.js plugin only)\n */\nPhysicsImpostor.CapsuleImpostor = 6;\n/**\n * Cylinder-Imposter type\n */\nPhysicsImpostor.CylinderImpostor = 7;\n/**\n * Particle-Imposter type\n */\nPhysicsImpostor.ParticleImpostor = 8;\n/**\n * Heightmap-Imposter type\n */\nPhysicsImpostor.HeightmapImpostor = 9;\n/**\n * ConvexHull-Impostor type (Ammo.js plugin only)\n */\nPhysicsImpostor.ConvexHullImpostor = 10;\n/**\n * Custom-Imposter type (Ammo.js plugin only)\n */\nPhysicsImpostor.CustomImpostor = 100;\n/**\n * Rope-Imposter type\n */\nPhysicsImpostor.RopeImpostor = 101;\n/**\n * Cloth-Imposter type\n */\nPhysicsImpostor.ClothImpostor = 102;\n/**\n * Softbody-Imposter type\n */\nPhysicsImpostor.SoftbodyImpostor = 103;\n//# sourceMappingURL=physicsImpostor.js.map","/**\n * This is a holder class for the physics joint created by the physics plugin\n * It holds a set of functions to control the underlying joint\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\n */\nexport class PhysicsJoint {\n    /**\n     * Initializes the physics joint\n     * @param type The type of the physics joint\n     * @param jointData The data for the physics joint\n     */\n    constructor(\n    /**\n     * The type of the physics joint\n     */\n    type, \n    /**\n     * The data for the physics joint\n     */\n    jointData) {\n        this.type = type;\n        this.jointData = jointData;\n        jointData.nativeParams = jointData.nativeParams || {};\n    }\n    /**\n     * Gets the physics joint\n     */\n    get physicsJoint() {\n        return this._physicsJoint;\n    }\n    /**\n     * Sets the physics joint\n     */\n    set physicsJoint(newJoint) {\n        if (this._physicsJoint) {\n            //remove from the world\n        }\n        this._physicsJoint = newJoint;\n    }\n    /**\n     * Sets the physics plugin\n     */\n    set physicsPlugin(physicsPlugin) {\n        this._physicsPlugin = physicsPlugin;\n    }\n    /**\n     * Execute a function that is physics-plugin specific.\n     * @param {Function} func the function that will be executed.\n     *                        It accepts two parameters: the physics world and the physics joint\n     */\n    executeNativeFunction(func) {\n        func(this._physicsPlugin.world, this._physicsJoint);\n    }\n}\n//TODO check if the native joints are the same\n//Joint Types\n/**\n * Distance-Joint type\n */\nPhysicsJoint.DistanceJoint = 0;\n/**\n * Hinge-Joint type\n */\nPhysicsJoint.HingeJoint = 1;\n/**\n * Ball-and-Socket joint type\n */\nPhysicsJoint.BallAndSocketJoint = 2;\n/**\n * Wheel-Joint type\n */\nPhysicsJoint.WheelJoint = 3;\n/**\n * Slider-Joint type\n */\nPhysicsJoint.SliderJoint = 4;\n//OIMO\n/**\n * Prismatic-Joint type\n */\nPhysicsJoint.PrismaticJoint = 5;\n//\n/**\n * Universal-Joint type\n * ENERGY FTW! (compare with this - @see http://ode-wiki.org/wiki/index.php?title=Manual:_Joint_Types_and_Functions)\n */\nPhysicsJoint.UniversalJoint = 6;\n/**\n * Hinge-Joint 2 type\n */\nPhysicsJoint.Hinge2Joint = PhysicsJoint.WheelJoint;\n//Cannon\n/**\n * Point to Point Joint type.  Similar to a Ball-Joint.  Different in parameters\n */\nPhysicsJoint.PointToPointJoint = 8;\n//Cannon only at the moment\n/**\n * Spring-Joint type\n */\nPhysicsJoint.SpringJoint = 9;\n/**\n * Lock-Joint type\n */\nPhysicsJoint.LockJoint = 10;\n/**\n * A class representing a physics distance joint\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\n */\nexport class DistanceJoint extends PhysicsJoint {\n    /**\n     *\n     * @param jointData The data for the Distance-Joint\n     */\n    constructor(jointData) {\n        super(PhysicsJoint.DistanceJoint, jointData);\n    }\n    /**\n     * Update the predefined distance.\n     * @param maxDistance The maximum preferred distance\n     * @param minDistance The minimum preferred distance\n     */\n    updateDistance(maxDistance, minDistance) {\n        this._physicsPlugin.updateDistanceJoint(this, maxDistance, minDistance);\n    }\n}\n/**\n * Represents a Motor-Enabled Joint\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\n */\nexport class MotorEnabledJoint extends PhysicsJoint {\n    /**\n     * Initializes the Motor-Enabled Joint\n     * @param type The type of the joint\n     * @param jointData The physical joint data for the joint\n     */\n    constructor(type, jointData) {\n        super(type, jointData);\n    }\n    /**\n     * Set the motor values.\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\n     * @param force the force to apply\n     * @param maxForce max force for this motor.\n     */\n    setMotor(force, maxForce) {\n        this._physicsPlugin.setMotor(this, force || 0, maxForce);\n    }\n    /**\n     * Set the motor's limits.\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\n     * @param upperLimit The upper limit of the motor\n     * @param lowerLimit The lower limit of the motor\n     */\n    setLimit(upperLimit, lowerLimit) {\n        this._physicsPlugin.setLimit(this, upperLimit, lowerLimit);\n    }\n}\n/**\n * This class represents a single physics Hinge-Joint\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\n */\nexport class HingeJoint extends MotorEnabledJoint {\n    /**\n     * Initializes the Hinge-Joint\n     * @param jointData The joint data for the Hinge-Joint\n     */\n    constructor(jointData) {\n        super(PhysicsJoint.HingeJoint, jointData);\n    }\n    /**\n     * Set the motor values.\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\n     * @param {number} force the force to apply\n     * @param {number} maxForce max force for this motor.\n     */\n    setMotor(force, maxForce) {\n        this._physicsPlugin.setMotor(this, force || 0, maxForce);\n    }\n    /**\n     * Set the motor's limits.\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\n     * @param upperLimit The upper limit of the motor\n     * @param lowerLimit The lower limit of the motor\n     */\n    setLimit(upperLimit, lowerLimit) {\n        this._physicsPlugin.setLimit(this, upperLimit, lowerLimit);\n    }\n}\n/**\n * This class represents a dual hinge physics joint (same as wheel joint)\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\n */\nexport class Hinge2Joint extends MotorEnabledJoint {\n    /**\n     * Initializes the Hinge2-Joint\n     * @param jointData The joint data for the Hinge2-Joint\n     */\n    constructor(jointData) {\n        super(PhysicsJoint.Hinge2Joint, jointData);\n    }\n    /**\n     * Set the motor values.\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\n     * @param targetSpeed the speed the motor is to reach\n     * @param maxForce max force for this motor.\n     * @param motorIndex motor's index, 0 or 1.\n     */\n    setMotor(targetSpeed, maxForce, motorIndex = 0) {\n        this._physicsPlugin.setMotor(this, targetSpeed || 0, maxForce, motorIndex);\n    }\n    /**\n     * Set the motor limits.\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\n     * @param upperLimit the upper limit\n     * @param lowerLimit lower limit\n     * @param motorIndex the motor's index, 0 or 1.\n     */\n    setLimit(upperLimit, lowerLimit, motorIndex = 0) {\n        this._physicsPlugin.setLimit(this, upperLimit, lowerLimit, motorIndex);\n    }\n}\n//# sourceMappingURL=physicsJoint.js.map","/** @internal */\nexport var ConstraintAxisLimitMode;\n(function (ConstraintAxisLimitMode) {\n    ConstraintAxisLimitMode[ConstraintAxisLimitMode[\"FREE\"] = 0] = \"FREE\";\n    ConstraintAxisLimitMode[ConstraintAxisLimitMode[\"LIMITED\"] = 1] = \"LIMITED\";\n    ConstraintAxisLimitMode[ConstraintAxisLimitMode[\"LOCKED\"] = 2] = \"LOCKED\";\n    ConstraintAxisLimitMode[ConstraintAxisLimitMode[\"NONE\"] = 3] = \"NONE\";\n})(ConstraintAxisLimitMode || (ConstraintAxisLimitMode = {}));\n/** @internal */\nexport var ConstraintAxis;\n(function (ConstraintAxis) {\n    ConstraintAxis[ConstraintAxis[\"LINEAR_X\"] = 0] = \"LINEAR_X\";\n    ConstraintAxis[ConstraintAxis[\"LINEAR_Y\"] = 1] = \"LINEAR_Y\";\n    ConstraintAxis[ConstraintAxis[\"LINEAR_Z\"] = 2] = \"LINEAR_Z\";\n    ConstraintAxis[ConstraintAxis[\"ANGULAR_X\"] = 3] = \"ANGULAR_X\";\n    ConstraintAxis[ConstraintAxis[\"ANGULAR_Y\"] = 4] = \"ANGULAR_Y\";\n    ConstraintAxis[ConstraintAxis[\"ANGULAR_Z\"] = 5] = \"ANGULAR_Z\";\n    ConstraintAxis[ConstraintAxis[\"LINEAR_DISTANCE\"] = 6] = \"LINEAR_DISTANCE\";\n})(ConstraintAxis || (ConstraintAxis = {}));\n/** @internal */\nexport var ConstraintType;\n(function (ConstraintType) {\n    ConstraintType[ConstraintType[\"BALL_AND_SOCKET\"] = 1] = \"BALL_AND_SOCKET\";\n    ConstraintType[ConstraintType[\"DISTANCE\"] = 2] = \"DISTANCE\";\n    ConstraintType[ConstraintType[\"HINGE\"] = 3] = \"HINGE\";\n    ConstraintType[ConstraintType[\"SLIDER\"] = 4] = \"SLIDER\";\n    ConstraintType[ConstraintType[\"LOCK\"] = 5] = \"LOCK\";\n    ConstraintType[ConstraintType[\"PRISMATIC\"] = 6] = \"PRISMATIC\";\n})(ConstraintType || (ConstraintType = {}));\n/** @internal */\nexport var ShapeType;\n(function (ShapeType) {\n    ShapeType[ShapeType[\"SPHERE\"] = 0] = \"SPHERE\";\n    ShapeType[ShapeType[\"CAPSULE\"] = 1] = \"CAPSULE\";\n    ShapeType[ShapeType[\"CYLINDER\"] = 2] = \"CYLINDER\";\n    ShapeType[ShapeType[\"BOX\"] = 3] = \"BOX\";\n    ShapeType[ShapeType[\"CONVEX_HULL\"] = 4] = \"CONVEX_HULL\";\n    ShapeType[ShapeType[\"CONTAINER\"] = 5] = \"CONTAINER\";\n    ShapeType[ShapeType[\"MESH\"] = 6] = \"MESH\";\n    ShapeType[ShapeType[\"HEIGHTFIELD\"] = 7] = \"HEIGHTFIELD\";\n})(ShapeType || (ShapeType = {}));\n/** @internal */\nexport var ConstraintMotorType;\n(function (ConstraintMotorType) {\n    ConstraintMotorType[ConstraintMotorType[\"NONE\"] = 0] = \"NONE\";\n    ConstraintMotorType[ConstraintMotorType[\"VELOCITY\"] = 1] = \"VELOCITY\";\n    ConstraintMotorType[ConstraintMotorType[\"POSITION\"] = 2] = \"POSITION\";\n})(ConstraintMotorType || (ConstraintMotorType = {}));\n//# sourceMappingURL=IPhysicsEnginePlugin.js.map","import { Vector3, Quaternion } from \"../../Maths/math.vector.js\";\n/**\n * PhysicsBody is useful for creating a physics body that can be used in a physics engine. It allows\n * the user to set the mass and velocity of the body, which can then be used to calculate the\n * motion of the body in the physics engine.\n */\nexport class PhysicsBody {\n    /**\n     * Constructs a new physics body for the given node.\n     * @param transformNode - The Transform Node to construct the physics body for.\n     * @param scene - The scene containing the physics engine.\n     *\n     * This code is useful for creating a physics body for a given Transform Node in a scene.\n     * It checks the version of the physics engine and the physics plugin, and initializes the body accordingly.\n     * It also sets the node's rotation quaternion if it is not already set. Finally, it adds the body to the physics engine.\n     */\n    constructor(transformNode, scene) {\n        /**\n         * V2 Physics plugin private data for single Transform\n         */\n        this._pluginData = undefined;\n        /**\n         * V2 Physics plugin private data for instances\n         */\n        this._pluginDataInstances = [];\n        /**\n         * Disable pre-step that consists in updating Physics Body from Transform Node Translation/Orientation.\n         * True by default for maximum performance.\n         */\n        this.disablePreStep = true;\n        if (!scene) {\n            return;\n        }\n        const physicsEngine = scene.getPhysicsEngine();\n        if (!physicsEngine) {\n            throw new Error(\"No Physics Engine available.\");\n        }\n        this._physicsEngine = physicsEngine;\n        if (physicsEngine.getPluginVersion() != 2) {\n            throw new Error(\"Plugin version is incorrect. Expected version 2.\");\n        }\n        const physicsPlugin = physicsEngine.getPhysicsPlugin();\n        if (!physicsPlugin) {\n            throw new Error(\"No Physics Plugin available.\");\n        }\n        this._physicsPlugin = physicsPlugin;\n        if (!transformNode.rotationQuaternion) {\n            transformNode.rotationQuaternion = Quaternion.FromEulerAngles(transformNode.rotation.x, transformNode.rotation.y, transformNode.rotation.z);\n        }\n        // instances?\n        const m = transformNode;\n        if (m.hasThinInstances) {\n            this._physicsPlugin.initBodyInstances(this, m);\n        }\n        else {\n            // single instance\n            this._physicsPlugin.initBody(this, transformNode.position, transformNode.rotationQuaternion);\n        }\n        this.transformNode = transformNode;\n        transformNode.physicsBody = this;\n        physicsEngine.addBody(this);\n    }\n    /**\n     * Sets the shape of the physics body.\n     * @param shape - The shape of the physics body.\n     *\n     * This method is useful for setting the shape of the physics body, which is necessary for the physics engine to accurately simulate the body's behavior.\n     * The shape is used to calculate the body's mass, inertia, and other properties.\n     */\n    setShape(shape) {\n        this._physicsPlugin.setShape(this, shape);\n    }\n    /**\n     * Retrieves the physics shape associated with this object.\n     *\n     * @returns The physics shape associated with this object, or `undefined` if no\n     * shape is associated.\n     *\n     * This method is useful for retrieving the physics shape associated with this object,\n     * which can be used to apply physical forces to the object or to detect collisions.\n     */\n    getShape() {\n        return this._physicsPlugin.getShape(this);\n    }\n    /**\n     * Sets the filter group of the physics body.\n     * @param group - The filter group of the physics body.\n     *\n     * This method is useful for setting the filter group of the physics body.\n     * The filter group is used to determine which bodies should collide with each other.\n     * This allows for more control over the physics engine and can be used to create more realistic simulations.\n     */\n    setFilterGroup(group) {\n        this._physicsPlugin.setFilterGroup(this, group);\n    }\n    /**\n     * Gets the filter group of the physics engine.\n     *\n     * @returns The filter group of the physics engine.\n     *\n     * This method is useful for getting the filter group of the physics engine,\n     * which is used to determine which objects will interact with each other.\n     * This is important for creating realistic physics simulations.\n     */\n    getFilterGroup() {\n        return this._physicsPlugin.getFilterGroup(this);\n    }\n    /**\n     * Sets the event mask for the physics engine.\n     *\n     * @param eventMask - A bitmask that determines which events will be sent to the physics engine.\n     *\n     * This method is useful for setting the event mask for the physics engine, which determines which events\n     * will be sent to the physics engine. This allows the user to control which events the physics engine will respond to.\n     */\n    setEventMask(eventMask) {\n        this._physicsPlugin.setEventMask(this, eventMask);\n    }\n    /**\n     * Gets the event mask of the physics engine.\n     *\n     * @returns The event mask of the physics engine.\n     *\n     * This method is useful for getting the event mask of the physics engine,\n     * which is used to determine which events the engine will respond to.\n     * This is important for ensuring that the engine is responding to the correct events and not\n     * wasting resources on unnecessary events.\n     */\n    getEventMask() {\n        return this._physicsPlugin.getEventMask(this);\n    }\n    /**\n     * Sets the mass properties of the physics object.\n     *\n     * @param massProps - The mass properties to set.\n     *\n     * This method is useful for setting the mass properties of a physics object, such as its mass,\n     * inertia, and center of mass. This is important for accurately simulating the physics of the object in the physics engine.\n     */\n    setMassProperties(massProps) {\n        this._physicsPlugin.setMassProperties(this, massProps);\n    }\n    /**\n     * Retrieves the mass properties of the object.\n     *\n     * @returns The mass properties of the object, or `undefined` if the physics\n     * plugin does not support mass properties.\n     *\n     * This method is useful for physics simulations, as it allows the user to\n     * retrieve the mass properties of the object, such as its mass, center of mass,\n     * and moment of inertia. This information is necessary for accurate physics\n     * simulations.\n     */\n    getMassProperties() {\n        return this._physicsPlugin.getMassProperties(this);\n    }\n    /**\n     * Sets the linear damping of the physics body.\n     *\n     * @param damping - The linear damping value.\n     *\n     * This method is useful for controlling the linear damping of the physics body,\n     * which is the rate at which the body's velocity decreases over time. This is useful for simulating\n     * the effects of air resistance or other forms of friction.\n     */\n    setLinearDamping(damping) {\n        this._physicsPlugin.setLinearDamping(this, damping);\n    }\n    /**\n     * Gets the linear damping of the physics body.\n     * @returns The linear damping of the physics body.\n     *\n     * This method is useful for retrieving the linear damping of the physics body, which is the amount of\n     * resistance the body has to linear motion. This is useful for simulating realistic physics behavior\n     * in a game.\n     */\n    getLinearDamping() {\n        return this._physicsPlugin.getLinearDamping(this);\n    }\n    /**\n     * Sets the angular damping of the physics body.\n     * @param damping The angular damping of the body.\n     *\n     * This method is useful for controlling the angular velocity of a physics body.\n     * By setting the damping, the body's angular velocity will be reduced over time, simulating the effect of friction.\n     * This can be used to create realistic physical behavior in a physics engine.\n     */\n    setAngularDamping(damping) {\n        this._physicsPlugin.setAngularDamping(this, damping);\n    }\n    /**\n     * Gets the angular damping of the physics body.\n     *\n     * @returns The angular damping of the physics body.\n     *\n     * This method is useful for getting the angular damping of the physics body,\n     * which is the rate of reduction of the angular velocity over time.\n     * This is important for simulating realistic physics behavior in a game.\n     */\n    getAngularDamping() {\n        return this._physicsPlugin.getAngularDamping(this);\n    }\n    /**\n     * Sets the linear velocity of the physics object.\n     * @param linVel - The linear velocity to set.\n     *\n     * This method is useful for setting the linear velocity of a physics object,\n     * which is necessary for simulating realistic physics in a game engine.\n     * By setting the linear velocity, the physics object will move in the direction and speed specified by the vector.\n     * This allows for realistic physics simulations, such as simulating the motion of a ball rolling down a hill.\n     */\n    setLinearVelocity(linVel) {\n        this._physicsPlugin.setLinearVelocity(this, linVel);\n    }\n    /**\n     * Gets the linear velocity of the physics body and stores it in the given vector3.\n     * @param linVel - The vector3 to store the linear velocity in.\n     *\n     * This method is useful for getting the linear velocity of a physics body in a physics engine.\n     * This can be used to determine the speed and direction of the body, which can be used to calculate the motion of the body.*/\n    getLinearVelocityToRef(linVel) {\n        return this._physicsPlugin.getLinearVelocityToRef(this, linVel);\n    }\n    /**\n     * Sets the angular velocity of the physics object.\n     * @param angVel - The angular velocity to set.\n     *\n     * This method is useful for setting the angular velocity of a physics object, which is necessary for\n     * simulating realistic physics behavior. The angular velocity is used to determine the rate of rotation of the object,\n     * which is important for simulating realistic motion.\n     */\n    setAngularVelocity(angVel) {\n        this._physicsPlugin.setAngularVelocity(this, angVel);\n    }\n    /**\n     * Gets the angular velocity of the physics body and stores it in the given vector3.\n     * @param angVel - The vector3 to store the angular velocity in.\n     *\n     * This method is useful for getting the angular velocity of a physics body, which can be used to determine the body's\n     * rotational speed. This information can be used to create realistic physics simulations.\n     */\n    getAngularVelocityToRef(angVel) {\n        return this._physicsPlugin.getAngularVelocityToRef(this, angVel);\n    }\n    /**\n     * Applies an impulse to the physics object.\n     *\n     * @param impulse The impulse vector.\n     * @param location The location of the impulse.\n     *\n     * This method is useful for applying an impulse to a physics object, which can be used to simulate physical forces such as gravity,\n     * collisions, and explosions. This can be used to create realistic physics simulations in a game or other application.\n     */\n    applyImpulse(impulse, location) {\n        this._physicsPlugin.applyImpulse(this, impulse, location);\n    }\n    /**\n     * Applies a force to the physics object.\n     *\n     * @param force The force vector.\n     * @param location The location of the force.\n     *\n     * This method is useful for applying a force to a physics object, which can be used to simulate physical forces such as gravity,\n     * collisions, and explosions. This can be used to create realistic physics simulations in a game or other application.\n     */\n    applyForce(force, location) {\n        this._physicsPlugin.applyForce(this, force, location);\n    }\n    /**\n     * Retrieves the geometry of the body from the physics plugin.\n     *\n     * @returns The geometry of the body.\n     *\n     * This method is useful for retrieving the geometry of the body from the physics plugin, which can be used for various physics calculations.\n     */\n    getGeometry() {\n        return this._physicsPlugin.getBodyGeometry(this);\n    }\n    /**\n     * Register a collision callback that is called when the body collides\n     * Filtering by body is inefficient. It's more preferable to register a collision callback for the entire world\n     * and do the filtering on the user side.\n     */\n    registerOnCollide(func) {\n        return this._physicsPlugin.registerOnBodyCollide(this, func);\n    }\n    /**\n     * Unregister a collision callback that is called when the body collides\n     */\n    unregisterOnCollide(func) {\n        return this._physicsPlugin.unregisterOnBodyCollide(this, func);\n    }\n    /**\n     * Gets the object extents\n     * @returns the object extents\n     */\n    getObjectExtents() {\n        const tmAbstractMesh = this.transformNode;\n        if (tmAbstractMesh.getBoundingInfo) {\n            const q = this.transformNode.rotationQuaternion;\n            const scaling = this.transformNode.scaling.clone();\n            //reset rotation\n            this.transformNode.rotationQuaternion = PhysicsBody._IDENTITY_QUATERNION;\n            //calculate the world matrix with no rotation\n            const worldMatrix = this.transformNode.computeWorldMatrix && this.transformNode.computeWorldMatrix(true);\n            if (worldMatrix) {\n                worldMatrix.decompose(scaling, undefined, undefined);\n            }\n            const boundingInfo = tmAbstractMesh.getBoundingInfo();\n            // get the global scaling of the object\n            const size = boundingInfo.boundingBox.extendSize.scale(2).multiplyInPlace(scaling);\n            size.x = Math.abs(size.x);\n            size.y = Math.abs(size.y);\n            size.z = Math.abs(size.z);\n            //bring back the rotation\n            this.transformNode.rotationQuaternion = q;\n            //calculate the world matrix with the new rotation\n            this.transformNode.computeWorldMatrix && this.transformNode.computeWorldMatrix(true);\n            return size;\n        }\n        else {\n            return PhysicsBody._DEFAULT_OBJECT_SIZE;\n        }\n    }\n    /**\n     * @returns geometric center of the associated mesh\n     */\n    getObjectCenter() {\n        // TODO\n        return new Vector3(0, 0, 0);\n    }\n    /**\n     * Adds a constraint to the physics engine.\n     *\n     * @param childBody - The body to which the constraint will be applied.\n     * @param constraint - The constraint to be applied.\n     *\n     */\n    addConstraint(childBody, constraint) {\n        this._physicsPlugin.addConstraint(this, childBody, constraint);\n    }\n    /**\n     * Disposes the body from the physics engine.\n     *\n     * This method is useful for cleaning up the physics engine when a body is no longer needed. Disposing the body will free up resources and prevent memory leaks.\n     */\n    dispose() {\n        this._physicsEngine.removeBody(this);\n        this._physicsPlugin.removeBody(this);\n        this._physicsPlugin.disposeBody(this);\n        this._pluginData = null;\n        this._pluginDataInstances.length = 0;\n    }\n}\nPhysicsBody._DEFAULT_OBJECT_SIZE = new Vector3(1, 1, 1);\nPhysicsBody._IDENTITY_QUATERNION = Quaternion.Identity();\n//# sourceMappingURL=physicsBody.js.map","import { Vector3 } from \"../../Maths/math.vector.js\";\nimport { PhysicsRaycastResult } from \"../physicsRaycastResult.js\";\nimport { _WarnImport } from \"../../Misc/devTools.js\";\n/**\n * Class used to control physics engine\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\n */\n/** @internal */\nexport class PhysicsEngine {\n    /**\n     *\n     * @returns physics plugin version\n     */\n    getPluginVersion() {\n        return this._physicsPlugin.getPluginVersion();\n    }\n    /**\n     * Factory used to create the default physics plugin.\n     * @returns The default physics plugin\n     */\n    static DefaultPluginFactory() {\n        throw _WarnImport(\"\");\n    }\n    /**\n     * Creates a new Physics Engine\n     * @param gravity defines the gravity vector used by the simulation\n     * @param _physicsPlugin defines the plugin to use (CannonJS by default)\n     */\n    constructor(gravity, _physicsPlugin = PhysicsEngine.DefaultPluginFactory()) {\n        this._physicsPlugin = _physicsPlugin;\n        /** @internal */\n        this._physicsBodies = [];\n        this._subTimeStep = 0;\n        gravity = gravity || new Vector3(0, -9.807, 0);\n        this.setGravity(gravity);\n        this.setTimeStep();\n    }\n    /**\n     * Sets the gravity vector used by the simulation\n     * @param gravity defines the gravity vector to use\n     */\n    setGravity(gravity) {\n        this.gravity = gravity;\n        this._physicsPlugin.setGravity(this.gravity);\n    }\n    /**\n     * Set the time step of the physics engine.\n     * Default is 1/60.\n     * To slow it down, enter 1/600 for example.\n     * To speed it up, 1/30\n     * @param newTimeStep defines the new timestep to apply to this world.\n     */\n    setTimeStep(newTimeStep = 1 / 60) {\n        this._physicsPlugin.setTimeStep(newTimeStep);\n    }\n    /**\n     * Get the time step of the physics engine.\n     * @returns the current time step\n     */\n    getTimeStep() {\n        return this._physicsPlugin.getTimeStep();\n    }\n    /**\n     * Set the sub time step of the physics engine.\n     * Default is 0 meaning there is no sub steps\n     * To increase physics resolution precision, set a small value (like 1 ms)\n     * @param subTimeStep defines the new sub timestep used for physics resolution.\n     */\n    setSubTimeStep(subTimeStep = 0) {\n        this._subTimeStep = subTimeStep;\n    }\n    /**\n     * Get the sub time step of the physics engine.\n     * @returns the current sub time step\n     */\n    getSubTimeStep() {\n        return this._subTimeStep;\n    }\n    /**\n     * Release all resources\n     */\n    dispose() {\n        this._physicsPlugin.dispose();\n    }\n    /**\n     * Gets the name of the current physics plugin\n     * @returns the name of the plugin\n     */\n    getPhysicsPluginName() {\n        return this._physicsPlugin.name;\n    }\n    /**\n     * Adding a new impostor for the impostor tracking.\n     * This will be done by the impostor itself.\n     * @param impostor the impostor to add\n     */\n    /**\n     * Called by the scene. No need to call it.\n     * @param delta defines the timespan between frames\n     */\n    _step(delta) {\n        if (delta > 0.1) {\n            delta = 0.1;\n        }\n        else if (delta <= 0) {\n            delta = 1.0 / 60.0;\n        }\n        this._physicsPlugin.executeStep(delta, this._physicsBodies);\n    }\n    /**\n     * Add a body as an active component of this engine\n     * @param body\n     */\n    addBody(physicsBody) {\n        this._physicsBodies.push(physicsBody);\n    }\n    /**\n     * Removes a particular body from this engine\n     */\n    removeBody(physicsBody) {\n        const index = this._physicsBodies.indexOf(physicsBody);\n        if (index > -1) {\n            /*const removed =*/ this._physicsBodies.splice(index, 1);\n        }\n    }\n    /**\n     * Returns an array of bodies added to this engine\n\n     */\n    getBodies() {\n        return this._physicsBodies;\n    }\n    /**\n     * Gets the current plugin used to run the simulation\n     * @returns current plugin\n     */\n    getPhysicsPlugin() {\n        return this._physicsPlugin;\n    }\n    /**\n     * Does a raycast in the physics world\n     * @param from when should the ray start?\n     * @param to when should the ray end?\n     * @param result resulting PhysicsRaycastResult\n     */\n    raycastToRef(from, to, result) {\n        this._physicsPlugin.raycast(from, to, result);\n    }\n    /**\n     * Does a raycast in the physics world\n     * @param from when should the ray start?\n     * @param to when should the ray end?\n     * @returns PhysicsRaycastResult\n     */\n    raycast(from, to) {\n        const result = new PhysicsRaycastResult();\n        this._physicsPlugin.raycast(from, to, result);\n        return result;\n    }\n}\n//# sourceMappingURL=physicsEngine.js.map","import { __decorate } from \"../../../tslib.es6.js\";\nimport { serialize, SerializationHelper } from \"../../../Misc/decorators.js\";\nimport { Observable } from \"../../../Misc/observable.js\";\nimport { Logger } from \"../../../Misc/logger.js\";\nimport { Texture } from \"../../../Materials/Textures/texture.js\";\n\nimport { GlowLayer } from \"../../../Layers/glowLayer.js\";\nimport { SharpenPostProcess } from \"../../../PostProcesses/sharpenPostProcess.js\";\nimport { ImageProcessingPostProcess } from \"../../../PostProcesses/imageProcessingPostProcess.js\";\nimport { ChromaticAberrationPostProcess } from \"../../../PostProcesses/chromaticAberrationPostProcess.js\";\nimport { GrainPostProcess } from \"../../../PostProcesses/grainPostProcess.js\";\nimport { FxaaPostProcess } from \"../../../PostProcesses/fxaaPostProcess.js\";\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline.js\";\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect.js\";\nimport { DepthOfFieldEffect, DepthOfFieldEffectBlurLevel } from \"../../../PostProcesses/depthOfFieldEffect.js\";\nimport { BloomEffect } from \"../../../PostProcesses/bloomEffect.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { EngineStore } from \"../../../Engines/engineStore.js\";\nimport { Tools } from \"../../../Misc/tools.js\";\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent.js\";\n/**\n * The default rendering pipeline can be added to a scene to apply common post processing effects such as anti-aliasing or depth of field.\n * See https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/defaultRenderingPipeline\n */\nexport class DefaultRenderingPipeline extends PostProcessRenderPipeline {\n    /**\n     * Enable or disable automatic building of the pipeline when effects are enabled and disabled.\n     * If false, you will have to manually call prepare() to update the pipeline.\n     */\n    get automaticBuild() {\n        return this._buildAllowed;\n    }\n    set automaticBuild(value) {\n        this._buildAllowed = value;\n    }\n    /**\n     * Gets active scene\n     */\n    get scene() {\n        return this._scene;\n    }\n    /**\n     * Enable or disable the sharpen process from the pipeline\n     */\n    set sharpenEnabled(enabled) {\n        if (this._sharpenEnabled === enabled) {\n            return;\n        }\n        this._sharpenEnabled = enabled;\n        this._buildPipeline();\n    }\n    get sharpenEnabled() {\n        return this._sharpenEnabled;\n    }\n    /**\n     * Specifies the size of the bloom blur kernel, relative to the final output size\n     */\n    get bloomKernel() {\n        return this._bloomKernel;\n    }\n    set bloomKernel(value) {\n        this._bloomKernel = value;\n        this.bloom.kernel = value / this._hardwareScaleLevel;\n    }\n    /**\n     * The strength of the bloom.\n     */\n    set bloomWeight(value) {\n        if (this._bloomWeight === value) {\n            return;\n        }\n        this.bloom.weight = value;\n        this._bloomWeight = value;\n    }\n    get bloomWeight() {\n        return this._bloomWeight;\n    }\n    /**\n     * The luminance threshold to find bright areas of the image to bloom.\n     */\n    set bloomThreshold(value) {\n        if (this._bloomThreshold === value) {\n            return;\n        }\n        this.bloom.threshold = value;\n        this._bloomThreshold = value;\n    }\n    get bloomThreshold() {\n        return this._bloomThreshold;\n    }\n    /**\n     * The scale of the bloom, lower value will provide better performance.\n     */\n    set bloomScale(value) {\n        if (this._bloomScale === value) {\n            return;\n        }\n        this._bloomScale = value;\n        // recreate bloom and dispose old as this setting is not dynamic\n        this._rebuildBloom();\n        this._buildPipeline();\n    }\n    get bloomScale() {\n        return this._bloomScale;\n    }\n    /**\n     * Enable or disable the bloom from the pipeline\n     */\n    set bloomEnabled(enabled) {\n        if (this._bloomEnabled === enabled) {\n            return;\n        }\n        this._bloomEnabled = enabled;\n        this._buildPipeline();\n    }\n    get bloomEnabled() {\n        return this._bloomEnabled;\n    }\n    _rebuildBloom() {\n        // recreate bloom and dispose old as this setting is not dynamic\n        const oldBloom = this.bloom;\n        this.bloom = new BloomEffect(this._scene, this.bloomScale, this._bloomWeight, this.bloomKernel / this._hardwareScaleLevel, this._defaultPipelineTextureType, false);\n        this.bloom.threshold = oldBloom.threshold;\n        for (let i = 0; i < this._cameras.length; i++) {\n            oldBloom.disposeEffects(this._cameras[i]);\n        }\n    }\n    /**\n     * If the depth of field is enabled.\n     */\n    get depthOfFieldEnabled() {\n        return this._depthOfFieldEnabled;\n    }\n    set depthOfFieldEnabled(enabled) {\n        if (this._depthOfFieldEnabled === enabled) {\n            return;\n        }\n        this._depthOfFieldEnabled = enabled;\n        this._buildPipeline();\n    }\n    /**\n     * Blur level of the depth of field effect. (Higher blur will effect performance)\n     */\n    get depthOfFieldBlurLevel() {\n        return this._depthOfFieldBlurLevel;\n    }\n    set depthOfFieldBlurLevel(value) {\n        if (this._depthOfFieldBlurLevel === value) {\n            return;\n        }\n        this._depthOfFieldBlurLevel = value;\n        // recreate dof and dispose old as this setting is not dynamic\n        const oldDof = this.depthOfField;\n        this.depthOfField = new DepthOfFieldEffect(this._scene, null, this._depthOfFieldBlurLevel, this._defaultPipelineTextureType, false);\n        this.depthOfField.focalLength = oldDof.focalLength;\n        this.depthOfField.focusDistance = oldDof.focusDistance;\n        this.depthOfField.fStop = oldDof.fStop;\n        this.depthOfField.lensSize = oldDof.lensSize;\n        for (let i = 0; i < this._cameras.length; i++) {\n            oldDof.disposeEffects(this._cameras[i]);\n        }\n        this._buildPipeline();\n    }\n    /**\n     * If the anti aliasing is enabled.\n     */\n    set fxaaEnabled(enabled) {\n        if (this._fxaaEnabled === enabled) {\n            return;\n        }\n        this._fxaaEnabled = enabled;\n        this._buildPipeline();\n    }\n    get fxaaEnabled() {\n        return this._fxaaEnabled;\n    }\n    /**\n     * MSAA sample count, setting this to 4 will provide 4x anti aliasing. (default: 1)\n     */\n    set samples(sampleCount) {\n        if (this._samples === sampleCount) {\n            return;\n        }\n        this._samples = sampleCount;\n        this._buildPipeline();\n    }\n    get samples() {\n        return this._samples;\n    }\n    /**\n     * If image processing is enabled.\n     */\n    set imageProcessingEnabled(enabled) {\n        if (this._imageProcessingEnabled === enabled) {\n            return;\n        }\n        this._scene.imageProcessingConfiguration.isEnabled = enabled;\n    }\n    get imageProcessingEnabled() {\n        return this._imageProcessingEnabled;\n    }\n    /**\n     * If glow layer is enabled. (Adds a glow effect to emmissive materials)\n     */\n    set glowLayerEnabled(enabled) {\n        if (enabled && !this._glowLayer) {\n            this._glowLayer = new GlowLayer(\"\", this._scene);\n        }\n        else if (!enabled && this._glowLayer) {\n            this._glowLayer.dispose();\n            this._glowLayer = null;\n        }\n    }\n    get glowLayerEnabled() {\n        return this._glowLayer != null;\n    }\n    /**\n     * Gets the glow layer (or null if not defined)\n     */\n    get glowLayer() {\n        return this._glowLayer;\n    }\n    /**\n     * Enable or disable the chromaticAberration process from the pipeline\n     */\n    set chromaticAberrationEnabled(enabled) {\n        if (this._chromaticAberrationEnabled === enabled) {\n            return;\n        }\n        this._chromaticAberrationEnabled = enabled;\n        this._buildPipeline();\n    }\n    get chromaticAberrationEnabled() {\n        return this._chromaticAberrationEnabled;\n    }\n    /**\n     * Enable or disable the grain process from the pipeline\n     */\n    set grainEnabled(enabled) {\n        if (this._grainEnabled === enabled) {\n            return;\n        }\n        this._grainEnabled = enabled;\n        this._buildPipeline();\n    }\n    get grainEnabled() {\n        return this._grainEnabled;\n    }\n    /**\n     * Instantiates a DefaultRenderingPipeline.\n     * @param name The rendering pipeline name (default: \"\")\n     * @param hdr If high dynamic range textures should be used (default: true)\n     * @param scene The scene linked to this pipeline (default: the last created scene)\n     * @param cameras The array of cameras that the rendering pipeline will be attached to (default: scene.cameras)\n     * @param automaticBuild If false, you will have to manually call prepare() to update the pipeline (default: true)\n     */\n    constructor(name = \"\", hdr = true, scene = EngineStore.LastCreatedScene, cameras, automaticBuild = true) {\n        super(scene.getEngine(), name);\n        this._camerasToBeAttached = [];\n        /**\n         * ID of the sharpen post process,\n         */\n        this.SharpenPostProcessId = \"SharpenPostProcessEffect\";\n        /**\n         * @ignore\n         * ID of the image processing post process;\n         */\n        this.ImageProcessingPostProcessId = \"ImageProcessingPostProcessEffect\";\n        /**\n         * @ignore\n         * ID of the Fast Approximate Anti-Aliasing post process;\n         */\n        this.FxaaPostProcessId = \"FxaaPostProcessEffect\";\n        /**\n         * ID of the chromatic aberration post process,\n         */\n        this.ChromaticAberrationPostProcessId = \"ChromaticAberrationPostProcessEffect\";\n        /**\n         * ID of the grain post process\n         */\n        this.GrainPostProcessId = \"GrainPostProcessEffect\";\n        /**\n         * Glow post process which adds a glow to emissive areas of the image\n         */\n        this._glowLayer = null;\n        /**\n         * Animations which can be used to tweak settings over a period of time\n         */\n        this.animations = [];\n        this._imageProcessingConfigurationObserver = null;\n        // Values\n        this._sharpenEnabled = false;\n        this._bloomEnabled = false;\n        this._depthOfFieldEnabled = false;\n        this._depthOfFieldBlurLevel = DepthOfFieldEffectBlurLevel.Low;\n        this._fxaaEnabled = false;\n        this._imageProcessingEnabled = true;\n        this._bloomScale = 0.5;\n        this._chromaticAberrationEnabled = false;\n        this._grainEnabled = false;\n        this._buildAllowed = true;\n        /**\n         * This is triggered each time the pipeline has been built.\n         */\n        this.onBuildObservable = new Observable();\n        this._resizeObserver = null;\n        this._hardwareScaleLevel = 1.0;\n        this._bloomKernel = 64;\n        /**\n         * Specifies the weight of the bloom in the final rendering\n         */\n        this._bloomWeight = 0.15;\n        /**\n         * Specifies the luma threshold for the area that will be blurred by the bloom\n         */\n        this._bloomThreshold = 0.9;\n        this._samples = 1;\n        this._hasCleared = false;\n        this._prevPostProcess = null;\n        this._prevPrevPostProcess = null;\n        this._depthOfFieldSceneObserver = null;\n        this._activeCameraChangedObserver = null;\n        this._activeCamerasChangedObserver = null;\n        this._cameras = cameras || scene.cameras;\n        this._cameras = this._cameras.slice();\n        this._camerasToBeAttached = this._cameras.slice();\n        this._buildAllowed = automaticBuild;\n        // Initialize\n        this._scene = scene;\n        const caps = this._scene.getEngine().getCaps();\n        this._hdr = hdr && (caps.textureHalfFloatRender || caps.textureFloatRender);\n        // Misc\n        if (this._hdr) {\n            if (caps.textureHalfFloatRender) {\n                this._defaultPipelineTextureType = 2;\n            }\n            else if (caps.textureFloatRender) {\n                this._defaultPipelineTextureType = 1;\n            }\n        }\n        else {\n            this._defaultPipelineTextureType = 0;\n        }\n        // Attach\n        scene.postProcessRenderPipelineManager.addPipeline(this);\n        const engine = this._scene.getEngine();\n        // Create post processes before hand so they can be modified before enabled.\n        // Block compilation flag is set to true to avoid compilation prior to use, these will be updated on first use in build pipeline.\n        this.sharpen = new SharpenPostProcess(\"sharpen\", 1.0, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, this._defaultPipelineTextureType, true);\n        this._sharpenEffect = new PostProcessRenderEffect(engine, this.SharpenPostProcessId, () => {\n            return this.sharpen;\n        }, true);\n        this.depthOfField = new DepthOfFieldEffect(this._scene, null, this._depthOfFieldBlurLevel, this._defaultPipelineTextureType, true);\n        // To keep the bloom sizes consistent across different display densities, factor in the hardware scaling level.\n        this._hardwareScaleLevel = engine.getHardwareScalingLevel();\n        this._resizeObserver = engine.onResizeObservable.add(() => {\n            this._hardwareScaleLevel = engine.getHardwareScalingLevel();\n            this.bloomKernel = this._bloomKernel;\n        });\n        this.bloom = new BloomEffect(this._scene, this._bloomScale, this._bloomWeight, this.bloomKernel / this._hardwareScaleLevel, this._defaultPipelineTextureType, true);\n        this.chromaticAberration = new ChromaticAberrationPostProcess(\"ChromaticAberration\", engine.getRenderWidth(), engine.getRenderHeight(), 1.0, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, this._defaultPipelineTextureType, true);\n        this._chromaticAberrationEffect = new PostProcessRenderEffect(engine, this.ChromaticAberrationPostProcessId, () => {\n            return this.chromaticAberration;\n        }, true);\n        this.grain = new GrainPostProcess(\"Grain\", 1.0, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, this._defaultPipelineTextureType, true);\n        this._grainEffect = new PostProcessRenderEffect(engine, this.GrainPostProcessId, () => {\n            return this.grain;\n        }, true);\n        this._imageProcessingConfigurationObserver = this._scene.imageProcessingConfiguration.onUpdateParameters.add(() => {\n            this.bloom._downscale._exposure = this._scene.imageProcessingConfiguration.exposure;\n            if (this.imageProcessingEnabled !== this._scene.imageProcessingConfiguration.isEnabled) {\n                this._imageProcessingEnabled = this._scene.imageProcessingConfiguration.isEnabled;\n                // Avoid re-entrant problems by deferring the call to _buildPipeline because the call to _buildPipeline\n                // at the end of the constructor could end up triggering imageProcessingConfiguration.onUpdateParameters!\n                // Note that the pipeline could have been disposed before the deferred call was executed, but in that case\n                // _buildAllowed will have been set to false, preventing _buildPipeline from being executed.\n                Tools.SetImmediate(() => {\n                    this._buildPipeline();\n                });\n            }\n        });\n        this._buildPipeline();\n    }\n    /**\n     * Get the class name\n     * @returns \"DefaultRenderingPipeline\"\n     */\n    getClassName() {\n        return \"DefaultRenderingPipeline\";\n    }\n    /**\n     * Force the compilation of the entire pipeline.\n     */\n    prepare() {\n        const previousState = this._buildAllowed;\n        this._buildAllowed = true;\n        this._buildPipeline();\n        this._buildAllowed = previousState;\n    }\n    _setAutoClearAndTextureSharing(postProcess, skipTextureSharing = false) {\n        if (this._hasCleared) {\n            postProcess.autoClear = false;\n        }\n        else {\n            postProcess.autoClear = true;\n            this._scene.autoClear = false;\n            this._hasCleared = true;\n        }\n        if (!skipTextureSharing) {\n            if (this._prevPrevPostProcess) {\n                postProcess.shareOutputWith(this._prevPrevPostProcess);\n            }\n            else {\n                postProcess.useOwnOutput();\n            }\n            if (this._prevPostProcess) {\n                this._prevPrevPostProcess = this._prevPostProcess;\n            }\n            this._prevPostProcess = postProcess;\n        }\n    }\n    _buildPipeline() {\n        if (!this._buildAllowed) {\n            return;\n        }\n        this._scene.autoClear = true;\n        const engine = this._scene.getEngine();\n        this._disposePostProcesses();\n        if (this._cameras !== null) {\n            this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._cameras);\n            // get back cameras to be used to reattach pipeline\n            this._cameras = this._camerasToBeAttached.slice();\n        }\n        this._reset();\n        this._prevPostProcess = null;\n        this._prevPrevPostProcess = null;\n        this._hasCleared = false;\n        if (this.depthOfFieldEnabled) {\n            // Multi camera suport\n            if (this._cameras.length > 1) {\n                for (const camera of this._cameras) {\n                    const depthRenderer = this._scene.enableDepthRenderer(camera);\n                    depthRenderer.useOnlyInActiveCamera = true;\n                }\n                this._depthOfFieldSceneObserver = this._scene.onAfterRenderTargetsRenderObservable.add((scene) => {\n                    if (this._cameras.indexOf(scene.activeCamera) > -1) {\n                        this.depthOfField.depthTexture = scene.enableDepthRenderer(scene.activeCamera).getDepthMap();\n                    }\n                });\n            }\n            else {\n                this._scene.onAfterRenderTargetsRenderObservable.remove(this._depthOfFieldSceneObserver);\n                const depthRenderer = this._scene.enableDepthRenderer(this._cameras[0]);\n                this.depthOfField.depthTexture = depthRenderer.getDepthMap();\n            }\n            if (!this.depthOfField._isReady()) {\n                this.depthOfField._updateEffects();\n            }\n            this.addEffect(this.depthOfField);\n            this._setAutoClearAndTextureSharing(this.depthOfField._effects[0], true);\n        }\n        else {\n            this._scene.onAfterRenderTargetsRenderObservable.remove(this._depthOfFieldSceneObserver);\n        }\n        if (this.bloomEnabled) {\n            if (!this.bloom._isReady()) {\n                this.bloom._updateEffects();\n            }\n            this.addEffect(this.bloom);\n            this._setAutoClearAndTextureSharing(this.bloom._effects[0], true);\n        }\n        if (this._imageProcessingEnabled) {\n            this.imageProcessing = new ImageProcessingPostProcess(\"imageProcessing\", 1.0, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, this._defaultPipelineTextureType, this.scene.imageProcessingConfiguration);\n            if (this._hdr) {\n                this.addEffect(new PostProcessRenderEffect(engine, this.ImageProcessingPostProcessId, () => {\n                    return this.imageProcessing;\n                }, true));\n                this._setAutoClearAndTextureSharing(this.imageProcessing);\n            }\n            else {\n                this._scene.imageProcessingConfiguration.applyByPostProcess = false;\n            }\n            if (!this._cameras || this._cameras.length === 0) {\n                this._scene.imageProcessingConfiguration.applyByPostProcess = false;\n            }\n            if (!this.imageProcessing.getEffect()) {\n                this.imageProcessing._updateParameters();\n            }\n        }\n        if (this.sharpenEnabled) {\n            if (!this.sharpen.isReady()) {\n                this.sharpen.updateEffect();\n            }\n            this.addEffect(this._sharpenEffect);\n            this._setAutoClearAndTextureSharing(this.sharpen);\n        }\n        if (this.grainEnabled) {\n            if (!this.grain.isReady()) {\n                this.grain.updateEffect();\n            }\n            this.addEffect(this._grainEffect);\n            this._setAutoClearAndTextureSharing(this.grain);\n        }\n        if (this.chromaticAberrationEnabled) {\n            if (!this.chromaticAberration.isReady()) {\n                this.chromaticAberration.updateEffect();\n            }\n            this.addEffect(this._chromaticAberrationEffect);\n            this._setAutoClearAndTextureSharing(this.chromaticAberration);\n        }\n        if (this.fxaaEnabled) {\n            this.fxaa = new FxaaPostProcess(\"fxaa\", 1.0, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, this._defaultPipelineTextureType);\n            this.addEffect(new PostProcessRenderEffect(engine, this.FxaaPostProcessId, () => {\n                return this.fxaa;\n            }, true));\n            this._setAutoClearAndTextureSharing(this.fxaa, true);\n        }\n        if (this._cameras !== null) {\n            this._scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(this._name, this._cameras);\n        }\n        // In multicamera mode, the scene needs to autoclear in between cameras.\n        if ((this._scene.activeCameras && this._scene.activeCameras.length > 1) || (this._scene.activeCamera && this._cameras.indexOf(this._scene.activeCamera) === -1)) {\n            this._scene.autoClear = true;\n        }\n        // The active camera on the scene can be changed anytime\n        if (!this._activeCameraChangedObserver) {\n            this._activeCameraChangedObserver = this._scene.onActiveCameraChanged.add(() => {\n                if (this._scene.activeCamera && this._cameras.indexOf(this._scene.activeCamera) === -1) {\n                    this._scene.autoClear = true;\n                }\n            });\n        }\n        if (!this._activeCamerasChangedObserver) {\n            this._activeCamerasChangedObserver = this._scene.onActiveCamerasChanged.add(() => {\n                if (this._scene.activeCameras && this._scene.activeCameras.length > 1) {\n                    this._scene.autoClear = true;\n                }\n            });\n        }\n        if (!this._enableMSAAOnFirstPostProcess(this.samples) && this.samples > 1) {\n            Logger.Warn(\"MSAA failed to enable, MSAA is only supported in browsers that support webGL >= 2.0\");\n        }\n        this.onBuildObservable.notifyObservers(this);\n    }\n    _disposePostProcesses(disposeNonRecreated = false) {\n        for (let i = 0; i < this._cameras.length; i++) {\n            const camera = this._cameras[i];\n            if (this.imageProcessing) {\n                this.imageProcessing.dispose(camera);\n            }\n            if (this.fxaa) {\n                this.fxaa.dispose(camera);\n            }\n            // These are created in the constructor and should not be disposed on every pipeline change\n            if (disposeNonRecreated) {\n                if (this.sharpen) {\n                    this.sharpen.dispose(camera);\n                }\n                if (this.depthOfField) {\n                    this._scene.onAfterRenderTargetsRenderObservable.remove(this._depthOfFieldSceneObserver);\n                    this.depthOfField.disposeEffects(camera);\n                }\n                if (this.bloom) {\n                    this.bloom.disposeEffects(camera);\n                }\n                if (this.chromaticAberration) {\n                    this.chromaticAberration.dispose(camera);\n                }\n                if (this.grain) {\n                    this.grain.dispose(camera);\n                }\n                if (this._glowLayer) {\n                    this._glowLayer.dispose();\n                }\n            }\n        }\n        this.imageProcessing = null;\n        this.fxaa = null;\n        if (disposeNonRecreated) {\n            this.sharpen = null;\n            this._sharpenEffect = null;\n            this.depthOfField = null;\n            this.bloom = null;\n            this.chromaticAberration = null;\n            this._chromaticAberrationEffect = null;\n            this.grain = null;\n            this._grainEffect = null;\n            this._glowLayer = null;\n        }\n    }\n    /**\n     * Adds a camera to the pipeline\n     * @param camera the camera to be added\n     */\n    addCamera(camera) {\n        this._camerasToBeAttached.push(camera);\n        this._buildPipeline();\n    }\n    /**\n     * Removes a camera from the pipeline\n     * @param camera the camera to remove\n     */\n    removeCamera(camera) {\n        const index = this._camerasToBeAttached.indexOf(camera);\n        this._camerasToBeAttached.splice(index, 1);\n        this._buildPipeline();\n    }\n    /**\n     * Dispose of the pipeline and stop all post processes\n     */\n    dispose() {\n        this._buildAllowed = false;\n        this.onBuildObservable.clear();\n        this._disposePostProcesses(true);\n        this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._cameras);\n        this._scene.autoClear = true;\n        if (this._resizeObserver) {\n            this._scene.getEngine().onResizeObservable.remove(this._resizeObserver);\n            this._resizeObserver = null;\n        }\n        this._scene.onActiveCameraChanged.remove(this._activeCameraChangedObserver);\n        this._scene.onActiveCamerasChanged.remove(this._activeCamerasChangedObserver);\n        this._scene.imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingConfigurationObserver);\n        super.dispose();\n    }\n    /**\n     * Serialize the rendering pipeline (Used when exporting)\n     * @returns the serialized object\n     */\n    serialize() {\n        const serializationObject = SerializationHelper.Serialize(this);\n        serializationObject.customType = \"DefaultRenderingPipeline\";\n        return serializationObject;\n    }\n    /**\n     * Parse the serialized pipeline\n     * @param source Source pipeline.\n     * @param scene The scene to load the pipeline to.\n     * @param rootUrl The URL of the serialized pipeline.\n     * @returns An instantiated pipeline from the serialized object.\n     */\n    static Parse(source, scene, rootUrl) {\n        return SerializationHelper.Parse(() => new DefaultRenderingPipeline(source._name, source._name._hdr, scene), source, scene, rootUrl);\n    }\n}\n__decorate([\n    serialize()\n], DefaultRenderingPipeline.prototype, \"sharpenEnabled\", null);\n__decorate([\n    serialize()\n], DefaultRenderingPipeline.prototype, \"bloomKernel\", null);\n__decorate([\n    serialize()\n], DefaultRenderingPipeline.prototype, \"_bloomWeight\", void 0);\n__decorate([\n    serialize()\n], DefaultRenderingPipeline.prototype, \"_bloomThreshold\", void 0);\n__decorate([\n    serialize()\n], DefaultRenderingPipeline.prototype, \"_hdr\", void 0);\n__decorate([\n    serialize()\n], DefaultRenderingPipeline.prototype, \"bloomWeight\", null);\n__decorate([\n    serialize()\n], DefaultRenderingPipeline.prototype, \"bloomThreshold\", null);\n__decorate([\n    serialize()\n], DefaultRenderingPipeline.prototype, \"bloomScale\", null);\n__decorate([\n    serialize()\n], DefaultRenderingPipeline.prototype, \"bloomEnabled\", null);\n__decorate([\n    serialize()\n], DefaultRenderingPipeline.prototype, \"depthOfFieldEnabled\", null);\n__decorate([\n    serialize()\n], DefaultRenderingPipeline.prototype, \"depthOfFieldBlurLevel\", null);\n__decorate([\n    serialize()\n], DefaultRenderingPipeline.prototype, \"fxaaEnabled\", null);\n__decorate([\n    serialize()\n], DefaultRenderingPipeline.prototype, \"samples\", null);\n__decorate([\n    serialize()\n], DefaultRenderingPipeline.prototype, \"imageProcessingEnabled\", null);\n__decorate([\n    serialize()\n], DefaultRenderingPipeline.prototype, \"glowLayerEnabled\", null);\n__decorate([\n    serialize()\n], DefaultRenderingPipeline.prototype, \"chromaticAberrationEnabled\", null);\n__decorate([\n    serialize()\n], DefaultRenderingPipeline.prototype, \"grainEnabled\", null);\nRegisterClass(\"BABYLON.DefaultRenderingPipeline\", DefaultRenderingPipeline);\n//# sourceMappingURL=defaultRenderingPipeline.js.map","import { Tools } from \"../../Misc/tools.js\";\n/**\n * This represents a set of one or more post processes in Babylon.\n * A post process can be used to apply a shader to a texture after it is rendered.\n * @example https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/postProcessRenderPipeline\n */\nexport class PostProcessRenderEffect {\n    /**\n     * Instantiates a post process render effect.\n     * A post process can be used to apply a shader to a texture after it is rendered.\n     * @param engine The engine the effect is tied to\n     * @param name The name of the effect\n     * @param getPostProcesses A function that returns a set of post processes which the effect will run in order to be run.\n     * @param singleInstance False if this post process can be run on multiple cameras. (default: true)\n     */\n    constructor(engine, name, getPostProcesses, singleInstance) {\n        this._name = name;\n        this._singleInstance = singleInstance || true;\n        this._getPostProcesses = getPostProcesses;\n        this._cameras = {};\n        this._indicesForCamera = {};\n        this._postProcesses = {};\n    }\n    /**\n     * Checks if all the post processes in the effect are supported.\n     */\n    get isSupported() {\n        for (const index in this._postProcesses) {\n            if (Object.prototype.hasOwnProperty.call(this._postProcesses, index)) {\n                const pps = this._postProcesses[index];\n                for (let ppIndex = 0; ppIndex < pps.length; ppIndex++) {\n                    if (!pps[ppIndex].isSupported) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n    /**\n     * Updates the current state of the effect\n     * @internal\n     */\n    _update() { }\n    /**\n     * Attaches the effect on cameras\n     * @param cameras The camera to attach to.\n     * @internal\n     */\n    _attachCameras(cameras) {\n        let cameraKey;\n        const cams = Tools.MakeArray(cameras || this._cameras);\n        if (!cams) {\n            return;\n        }\n        for (let i = 0; i < cams.length; i++) {\n            const camera = cams[i];\n            if (!camera) {\n                continue;\n            }\n            const cameraName = camera.name;\n            if (this._singleInstance) {\n                cameraKey = 0;\n            }\n            else {\n                cameraKey = cameraName;\n            }\n            if (!this._postProcesses[cameraKey]) {\n                const postProcess = this._getPostProcesses();\n                if (postProcess) {\n                    this._postProcesses[cameraKey] = Array.isArray(postProcess) ? postProcess : [postProcess];\n                }\n            }\n            if (!this._indicesForCamera[cameraName]) {\n                this._indicesForCamera[cameraName] = [];\n            }\n            this._postProcesses[cameraKey].forEach((postProcess) => {\n                const index = camera.attachPostProcess(postProcess);\n                this._indicesForCamera[cameraName].push(index);\n            });\n            if (!this._cameras[cameraName]) {\n                this._cameras[cameraName] = camera;\n            }\n        }\n    }\n    /**\n     * Detaches the effect on cameras\n     * @param cameras The camera to detach from.\n     * @internal\n     */\n    _detachCameras(cameras) {\n        const cams = Tools.MakeArray(cameras || this._cameras);\n        if (!cams) {\n            return;\n        }\n        for (let i = 0; i < cams.length; i++) {\n            const camera = cams[i];\n            const cameraName = camera.name;\n            const postProcesses = this._postProcesses[this._singleInstance ? 0 : cameraName];\n            if (postProcesses) {\n                postProcesses.forEach((postProcess) => {\n                    camera.detachPostProcess(postProcess);\n                });\n            }\n            if (this._cameras[cameraName]) {\n                this._cameras[cameraName] = null;\n            }\n        }\n    }\n    /**\n     * Enables the effect on given cameras\n     * @param cameras The camera to enable.\n     * @internal\n     */\n    _enable(cameras) {\n        const cams = Tools.MakeArray(cameras || this._cameras);\n        if (!cams) {\n            return;\n        }\n        for (let i = 0; i < cams.length; i++) {\n            const camera = cams[i];\n            const cameraName = camera.name;\n            for (let j = 0; j < this._indicesForCamera[cameraName].length; j++) {\n                if (camera._postProcesses[this._indicesForCamera[cameraName][j]] === undefined || camera._postProcesses[this._indicesForCamera[cameraName][j]] === null) {\n                    this._postProcesses[this._singleInstance ? 0 : cameraName].forEach((postProcess) => {\n                        cams[i].attachPostProcess(postProcess, this._indicesForCamera[cameraName][j]);\n                    });\n                }\n            }\n        }\n    }\n    /**\n     * Disables the effect on the given cameras\n     * @param cameras The camera to disable.\n     * @internal\n     */\n    _disable(cameras) {\n        const cams = Tools.MakeArray(cameras || this._cameras);\n        if (!cams) {\n            return;\n        }\n        for (let i = 0; i < cams.length; i++) {\n            const camera = cams[i];\n            const cameraName = camera.name;\n            this._postProcesses[this._singleInstance ? 0 : cameraName].forEach((postProcess) => {\n                camera.detachPostProcess(postProcess);\n            });\n        }\n    }\n    /**\n     * Gets a list of the post processes contained in the effect.\n     * @param camera The camera to get the post processes on.\n     * @returns The list of the post processes in the effect.\n     */\n    getPostProcesses(camera) {\n        if (this._singleInstance) {\n            return this._postProcesses[0];\n        }\n        else {\n            if (!camera) {\n                return null;\n            }\n            return this._postProcesses[camera.name];\n        }\n    }\n}\n//# sourceMappingURL=postProcessRenderEffect.js.map","import { __decorate } from \"../../tslib.es6.js\";\nimport { Tools } from \"../../Misc/tools.js\";\nimport { serialize } from \"../../Misc/decorators.js\";\n/**\n * PostProcessRenderPipeline\n * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/postProcessRenderPipeline\n */\nexport class PostProcessRenderPipeline {\n    /**\n     * Gets pipeline name\n     */\n    get name() {\n        return this._name;\n    }\n    /** Gets the list of attached cameras */\n    get cameras() {\n        return this._cameras;\n    }\n    /**\n     * Initializes a PostProcessRenderPipeline\n     * @param _engine engine to add the pipeline to\n     * @param name name of the pipeline\n     */\n    constructor(_engine, name) {\n        this._engine = _engine;\n        this._name = name;\n        this._renderEffects = {};\n        this._renderEffectsForIsolatedPass = new Array();\n        this._cameras = [];\n    }\n    /**\n     * Gets the class name\n     * @returns \"PostProcessRenderPipeline\"\n     */\n    getClassName() {\n        return \"PostProcessRenderPipeline\";\n    }\n    /**\n     * If all the render effects in the pipeline are supported\n     */\n    get isSupported() {\n        for (const renderEffectName in this._renderEffects) {\n            if (Object.prototype.hasOwnProperty.call(this._renderEffects, renderEffectName)) {\n                if (!this._renderEffects[renderEffectName].isSupported) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    /**\n     * Adds an effect to the pipeline\n     * @param renderEffect the effect to add\n     */\n    addEffect(renderEffect) {\n        this._renderEffects[renderEffect._name] = renderEffect;\n    }\n    // private\n    /** @internal */\n    _rebuild() { }\n    /**\n     * @internal\n     */\n    _enableEffect(renderEffectName, cameras) {\n        const renderEffects = this._renderEffects[renderEffectName];\n        if (!renderEffects) {\n            return;\n        }\n        renderEffects._enable(Tools.MakeArray(cameras || this._cameras));\n    }\n    /**\n     * @internal\n     */\n    _disableEffect(renderEffectName, cameras) {\n        const renderEffects = this._renderEffects[renderEffectName];\n        if (!renderEffects) {\n            return;\n        }\n        renderEffects._disable(Tools.MakeArray(cameras || this._cameras));\n    }\n    /**\n     * @internal\n     */\n    _attachCameras(cameras, unique) {\n        const cams = Tools.MakeArray(cameras || this._cameras);\n        if (!cams) {\n            return;\n        }\n        const indicesToDelete = [];\n        let i;\n        for (i = 0; i < cams.length; i++) {\n            const camera = cams[i];\n            if (!camera) {\n                continue;\n            }\n            if (this._cameras.indexOf(camera) === -1) {\n                this._cameras.push(camera);\n            }\n            else if (unique) {\n                indicesToDelete.push(i);\n            }\n        }\n        for (i = 0; i < indicesToDelete.length; i++) {\n            cams.splice(indicesToDelete[i], 1);\n        }\n        for (const renderEffectName in this._renderEffects) {\n            if (Object.prototype.hasOwnProperty.call(this._renderEffects, renderEffectName)) {\n                this._renderEffects[renderEffectName]._attachCameras(cams);\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    _detachCameras(cameras) {\n        const cams = Tools.MakeArray(cameras || this._cameras);\n        if (!cams) {\n            return;\n        }\n        for (const renderEffectName in this._renderEffects) {\n            if (Object.prototype.hasOwnProperty.call(this._renderEffects, renderEffectName)) {\n                this._renderEffects[renderEffectName]._detachCameras(cams);\n            }\n        }\n        for (let i = 0; i < cams.length; i++) {\n            this._cameras.splice(this._cameras.indexOf(cams[i]), 1);\n        }\n    }\n    /** @internal */\n    _update() {\n        for (const renderEffectName in this._renderEffects) {\n            if (Object.prototype.hasOwnProperty.call(this._renderEffects, renderEffectName)) {\n                this._renderEffects[renderEffectName]._update();\n            }\n        }\n        for (let i = 0; i < this._cameras.length; i++) {\n            if (!this._cameras[i]) {\n                continue;\n            }\n            const cameraName = this._cameras[i].name;\n            if (this._renderEffectsForIsolatedPass[cameraName]) {\n                this._renderEffectsForIsolatedPass[cameraName]._update();\n            }\n        }\n    }\n    /** @internal */\n    _reset() {\n        this._renderEffects = {};\n        this._renderEffectsForIsolatedPass = new Array();\n    }\n    _enableMSAAOnFirstPostProcess(sampleCount) {\n        if (!this._engine._features.supportMSAA) {\n            return false;\n        }\n        // Set samples of the very first post process to 4 to enable native anti-aliasing in browsers that support webGL 2.0 (See: https://github.com/BabylonJS/Babylon.js/issues/3754)\n        const effectKeys = Object.keys(this._renderEffects);\n        if (effectKeys.length > 0) {\n            const postProcesses = this._renderEffects[effectKeys[0]].getPostProcesses();\n            if (postProcesses) {\n                postProcesses[0].samples = sampleCount;\n            }\n        }\n        return true;\n    }\n    /**\n     * Sets the required values to the prepass renderer.\n     * @param prePassRenderer defines the prepass renderer to setup.\n     * @returns true if the pre pass is needed.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setPrePassRenderer(prePassRenderer) {\n        // Do Nothing by default\n        return false;\n    }\n    /**\n     * Disposes of the pipeline\n     */\n    dispose() {\n        // Must be implemented by children\n    }\n}\n__decorate([\n    serialize()\n], PostProcessRenderPipeline.prototype, \"_name\", void 0);\n//# sourceMappingURL=postProcessRenderPipeline.js.map","/**\n * PostProcessRenderPipelineManager class\n * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/postProcessRenderPipeline\n */\nexport class PostProcessRenderPipelineManager {\n    /**\n     * Initializes a PostProcessRenderPipelineManager\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/postProcessRenderPipeline\n     */\n    constructor() {\n        this._renderPipelines = {};\n    }\n    /**\n     * Gets the list of supported render pipelines\n     */\n    get supportedPipelines() {\n        const result = [];\n        for (const renderPipelineName in this._renderPipelines) {\n            if (Object.prototype.hasOwnProperty.call(this._renderPipelines, renderPipelineName)) {\n                const pipeline = this._renderPipelines[renderPipelineName];\n                if (pipeline.isSupported) {\n                    result.push(pipeline);\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * Adds a pipeline to the manager\n     * @param renderPipeline The pipeline to add\n     */\n    addPipeline(renderPipeline) {\n        this._renderPipelines[renderPipeline._name] = renderPipeline;\n    }\n    /**\n     * Attaches a camera to the pipeline\n     * @param renderPipelineName The name of the pipeline to attach to\n     * @param cameras the camera to attach\n     * @param unique if the camera can be attached multiple times to the pipeline\n     */\n    attachCamerasToRenderPipeline(renderPipelineName, cameras, unique = false) {\n        const renderPipeline = this._renderPipelines[renderPipelineName];\n        if (!renderPipeline) {\n            return;\n        }\n        renderPipeline._attachCameras(cameras, unique);\n    }\n    /**\n     * Detaches a camera from the pipeline\n     * @param renderPipelineName The name of the pipeline to detach from\n     * @param cameras the camera to detach\n     */\n    detachCamerasFromRenderPipeline(renderPipelineName, cameras) {\n        const renderPipeline = this._renderPipelines[renderPipelineName];\n        if (!renderPipeline) {\n            return;\n        }\n        renderPipeline._detachCameras(cameras);\n    }\n    /**\n     * Enables an effect by name on a pipeline\n     * @param renderPipelineName the name of the pipeline to enable the effect in\n     * @param renderEffectName the name of the effect to enable\n     * @param cameras the cameras that the effect should be enabled on\n     */\n    enableEffectInPipeline(renderPipelineName, renderEffectName, cameras) {\n        const renderPipeline = this._renderPipelines[renderPipelineName];\n        if (!renderPipeline) {\n            return;\n        }\n        renderPipeline._enableEffect(renderEffectName, cameras);\n    }\n    /**\n     * Disables an effect by name on a pipeline\n     * @param renderPipelineName the name of the pipeline to disable the effect in\n     * @param renderEffectName the name of the effect to disable\n     * @param cameras the cameras that the effect should be disabled on\n     */\n    disableEffectInPipeline(renderPipelineName, renderEffectName, cameras) {\n        const renderPipeline = this._renderPipelines[renderPipelineName];\n        if (!renderPipeline) {\n            return;\n        }\n        renderPipeline._disableEffect(renderEffectName, cameras);\n    }\n    /**\n     * Updates the state of all contained render pipelines and disposes of any non supported pipelines\n     */\n    update() {\n        for (const renderPipelineName in this._renderPipelines) {\n            if (Object.prototype.hasOwnProperty.call(this._renderPipelines, renderPipelineName)) {\n                const pipeline = this._renderPipelines[renderPipelineName];\n                if (!pipeline.isSupported) {\n                    pipeline.dispose();\n                    delete this._renderPipelines[renderPipelineName];\n                }\n                else {\n                    pipeline._update();\n                }\n            }\n        }\n    }\n    /** @internal */\n    _rebuild() {\n        for (const renderPipelineName in this._renderPipelines) {\n            if (Object.prototype.hasOwnProperty.call(this._renderPipelines, renderPipelineName)) {\n                const pipeline = this._renderPipelines[renderPipelineName];\n                pipeline._rebuild();\n            }\n        }\n    }\n    /**\n     * Disposes of the manager and pipelines\n     */\n    dispose() {\n        for (const renderPipelineName in this._renderPipelines) {\n            if (Object.prototype.hasOwnProperty.call(this._renderPipelines, renderPipelineName)) {\n                const pipeline = this._renderPipelines[renderPipelineName];\n                pipeline.dispose();\n            }\n        }\n    }\n}\n//# sourceMappingURL=postProcessRenderPipelineManager.js.map","import { SceneComponentConstants } from \"../../sceneComponent.js\";\nimport { PostProcessRenderPipelineManager } from \"./postProcessRenderPipelineManager.js\";\nimport { Scene } from \"../../scene.js\";\nObject.defineProperty(Scene.prototype, \"postProcessRenderPipelineManager\", {\n    get: function () {\n        if (!this._postProcessRenderPipelineManager) {\n            // Register the G Buffer component to the scene.\n            let component = this._getComponent(SceneComponentConstants.NAME_POSTPROCESSRENDERPIPELINEMANAGER);\n            if (!component) {\n                component = new PostProcessRenderPipelineManagerSceneComponent(this);\n                this._addComponent(component);\n            }\n            this._postProcessRenderPipelineManager = new PostProcessRenderPipelineManager();\n        }\n        return this._postProcessRenderPipelineManager;\n    },\n    enumerable: true,\n    configurable: true,\n});\n/**\n * Defines the Render Pipeline scene component responsible to rendering pipelines\n */\nexport class PostProcessRenderPipelineManagerSceneComponent {\n    /**\n     * Creates a new instance of the component for the given scene\n     * @param scene Defines the scene to register the component in\n     */\n    constructor(scene) {\n        /**\n         * The component name helpful to identify the component in the list of scene components.\n         */\n        this.name = SceneComponentConstants.NAME_POSTPROCESSRENDERPIPELINEMANAGER;\n        this.scene = scene;\n    }\n    /**\n     * Registers the component in a given scene\n     */\n    register() {\n        this.scene._gatherRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERRENDERTARGETS_POSTPROCESSRENDERPIPELINEMANAGER, this, this._gatherRenderTargets);\n    }\n    /**\n     * Rebuilds the elements related to this component in case of\n     * context lost for instance.\n     */\n    rebuild() {\n        if (this.scene._postProcessRenderPipelineManager) {\n            this.scene._postProcessRenderPipelineManager._rebuild();\n        }\n    }\n    /**\n     * Disposes the component and the associated resources\n     */\n    dispose() {\n        if (this.scene._postProcessRenderPipelineManager) {\n            this.scene._postProcessRenderPipelineManager.dispose();\n        }\n    }\n    _gatherRenderTargets() {\n        if (this.scene._postProcessRenderPipelineManager) {\n            this.scene._postProcessRenderPipelineManager.update();\n        }\n    }\n}\n//# sourceMappingURL=postProcessRenderPipelineManagerSceneComponent.js.map","import { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/anaglyph.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\n/**\n * Postprocess used to generate anaglyphic rendering\n */\nexport class AnaglyphPostProcess extends PostProcess {\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"AnaglyphPostProcess\" string\n     */\n    getClassName() {\n        return \"AnaglyphPostProcess\";\n    }\n    /**\n     * Creates a new AnaglyphPostProcess\n     * @param name defines postprocess name\n     * @param options defines creation options or target ratio scale\n     * @param rigCameras defines cameras using this postprocess\n     * @param samplingMode defines required sampling mode (BABYLON.Texture.NEAREST_SAMPLINGMODE by default)\n     * @param engine defines hosting engine\n     * @param reusable defines if the postprocess will be reused multiple times per frame\n     */\n    constructor(name, options, rigCameras, samplingMode, engine, reusable) {\n        super(name, \"anaglyph\", null, [\"leftSampler\"], options, rigCameras[1], samplingMode, engine, reusable);\n        this._passedProcess = rigCameras[0]._rigPostProcess;\n        this.onApplyObservable.add((effect) => {\n            effect.setTextureFromPostProcess(\"leftSampler\", this._passedProcess);\n        });\n    }\n}\nRegisterClass(\"BABYLON.AnaglyphPostProcess\", AnaglyphPostProcess);\n//# sourceMappingURL=anaglyphPostProcess.js.map","import { PostProcessRenderEffect } from \"../PostProcesses/RenderPipeline/postProcessRenderEffect.js\";\nimport { ExtractHighlightsPostProcess } from \"./extractHighlightsPostProcess.js\";\nimport { BlurPostProcess } from \"./blurPostProcess.js\";\nimport { BloomMergePostProcess } from \"./bloomMergePostProcess.js\";\nimport { Vector2 } from \"../Maths/math.vector.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\n/**\n * The bloom effect spreads bright areas of an image to simulate artifacts seen in cameras\n */\nexport class BloomEffect extends PostProcessRenderEffect {\n    /**\n     * The luminance threshold to find bright areas of the image to bloom.\n     */\n    get threshold() {\n        return this._downscale.threshold;\n    }\n    set threshold(value) {\n        this._downscale.threshold = value;\n    }\n    /**\n     * The strength of the bloom.\n     */\n    get weight() {\n        return this._merge.weight;\n    }\n    set weight(value) {\n        this._merge.weight = value;\n    }\n    /**\n     * Specifies the size of the bloom blur kernel, relative to the final output size\n     */\n    get kernel() {\n        return this._blurX.kernel / this._bloomScale;\n    }\n    set kernel(value) {\n        this._blurX.kernel = value * this._bloomScale;\n        this._blurY.kernel = value * this._bloomScale;\n    }\n    /**\n     * Creates a new instance of @see BloomEffect\n     * @param scene The scene the effect belongs to.\n     * @param _bloomScale The ratio of the blur texture to the input texture that should be used to compute the bloom.\n     * @param bloomWeight The the strength of bloom.\n     * @param bloomKernel The size of the kernel to be used when applying the blur.\n     * @param pipelineTextureType The type of texture to be used when performing the post processing.\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n     */\n    constructor(scene, _bloomScale, bloomWeight, bloomKernel, pipelineTextureType = 0, blockCompilation = false) {\n        super(scene.getEngine(), \"bloom\", () => {\n            return this._effects;\n        }, true);\n        this._bloomScale = _bloomScale;\n        /**\n         * @internal Internal\n         */\n        this._effects = [];\n        this._downscale = new ExtractHighlightsPostProcess(\"highlights\", 1.0, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, pipelineTextureType, blockCompilation);\n        this._blurX = new BlurPostProcess(\"horizontal blur\", new Vector2(1.0, 0), 10.0, _bloomScale, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, pipelineTextureType, undefined, blockCompilation);\n        this._blurX.alwaysForcePOT = true;\n        this._blurX.autoClear = false;\n        this._blurY = new BlurPostProcess(\"vertical blur\", new Vector2(0, 1.0), 10.0, _bloomScale, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, pipelineTextureType, undefined, blockCompilation);\n        this._blurY.alwaysForcePOT = true;\n        this._blurY.autoClear = false;\n        this.kernel = bloomKernel;\n        this._effects = [this._downscale, this._blurX, this._blurY];\n        this._merge = new BloomMergePostProcess(\"bloomMerge\", this._downscale, this._blurY, bloomWeight, _bloomScale, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, pipelineTextureType, blockCompilation);\n        this._merge.autoClear = false;\n        this._effects.push(this._merge);\n    }\n    /**\n     * Disposes each of the internal effects for a given camera.\n     * @param camera The camera to dispose the effect on.\n     */\n    disposeEffects(camera) {\n        for (let effectIndex = 0; effectIndex < this._effects.length; effectIndex++) {\n            this._effects[effectIndex].dispose(camera);\n        }\n    }\n    /**\n     * @internal Internal\n     */\n    _updateEffects() {\n        for (let effectIndex = 0; effectIndex < this._effects.length; effectIndex++) {\n            this._effects[effectIndex].updateEffect();\n        }\n    }\n    /**\n     * Internal\n     * @returns if all the contained post processes are ready.\n     * @internal\n     */\n    _isReady() {\n        for (let effectIndex = 0; effectIndex < this._effects.length; effectIndex++) {\n            if (!this._effects[effectIndex].isReady()) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n//# sourceMappingURL=bloomEffect.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { PostProcess } from \"./postProcess.js\";\n\nimport \"../Shaders/bloomMerge.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize } from \"../Misc/decorators.js\";\n/**\n * The BloomMergePostProcess merges blurred images with the original based on the values of the circle of confusion.\n */\nexport class BloomMergePostProcess extends PostProcess {\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"BloomMergePostProcess\" string\n     */\n    getClassName() {\n        return \"BloomMergePostProcess\";\n    }\n    /**\n     * Creates a new instance of @see BloomMergePostProcess\n     * @param name The name of the effect.\n     * @param originalFromInput Post process which's input will be used for the merge.\n     * @param blurred Blurred highlights post process which's output will be used.\n     * @param weight Weight of the bloom to be added to the original input.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n     */\n    constructor(name, originalFromInput, blurred, \n    /** Weight of the bloom to be added to the original input. */\n    weight, options, camera, samplingMode, engine, reusable, textureType = 0, blockCompilation = false) {\n        super(name, \"bloomMerge\", [\"bloomWeight\"], [\"bloomBlur\"], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, true);\n        /** Weight of the bloom to be added to the original input. */\n        this.weight = 1;\n        this.weight = weight;\n        this.externalTextureSamplerBinding = true;\n        this.onApplyObservable.add((effect) => {\n            effect.setTextureFromPostProcess(\"textureSampler\", originalFromInput);\n            effect.setTextureFromPostProcessOutput(\"bloomBlur\", blurred);\n            effect.setFloat(\"bloomWeight\", this.weight);\n        });\n        if (!blockCompilation) {\n            this.updateEffect();\n        }\n    }\n}\n__decorate([\n    serialize()\n], BloomMergePostProcess.prototype, \"weight\", void 0);\nRegisterClass(\"BABYLON.BloomMergePostProcess\", BloomMergePostProcess);\n//# sourceMappingURL=bloomMergePostProcess.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\n\nimport \"../Shaders/kernelBlur.fragment.js\";\nimport \"../Shaders/kernelBlur.vertex.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize, serializeAsVector2, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * The Blur Post Process which blurs an image based on a kernel and direction.\n * Can be used twice in x and y directions to perform a gaussian blur in two passes.\n */\nexport class BlurPostProcess extends PostProcess {\n    /**\n     * Sets the length in pixels of the blur sample region\n     */\n    set kernel(v) {\n        if (this._idealKernel === v) {\n            return;\n        }\n        v = Math.max(v, 1);\n        this._idealKernel = v;\n        this._kernel = this._nearestBestKernel(v);\n        if (!this._blockCompilation) {\n            this._updateParameters();\n        }\n    }\n    /**\n     * Gets the length in pixels of the blur sample region\n     */\n    get kernel() {\n        return this._idealKernel;\n    }\n    /**\n     * Sets whether or not the blur needs to unpack/repack floats\n     */\n    set packedFloat(v) {\n        if (this._packedFloat === v) {\n            return;\n        }\n        this._packedFloat = v;\n        if (!this._blockCompilation) {\n            this._updateParameters();\n        }\n    }\n    /**\n     * Gets whether or not the blur is unpacking/repacking floats\n     */\n    get packedFloat() {\n        return this._packedFloat;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"BlurPostProcess\" string\n     */\n    getClassName() {\n        return \"BlurPostProcess\";\n    }\n    /**\n     * Creates a new instance BlurPostProcess\n     * @param name The name of the effect.\n     * @param direction The direction in which to blur the image.\n     * @param kernel The size of the kernel to be used when computing the blur. eg. Size of 3 will blur the center pixel by 2 pixels surrounding it.\n     * @param options The required width/height ratio to downsize to before computing the render pass. (Use 1.0 for full size)\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     * @param defines\n     * @param _blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n     * @param textureFormat Format of textures used when performing the post process. (default: TEXTUREFORMAT_RGBA)\n     */\n    constructor(name, direction, kernel, options, camera, samplingMode = Texture.BILINEAR_SAMPLINGMODE, engine, reusable, textureType = 0, defines = \"\", _blockCompilation = false, textureFormat = 5) {\n        super(name, \"kernelBlur\", [\"delta\", \"direction\"], [\"circleOfConfusionSampler\"], options, camera, samplingMode, engine, reusable, null, textureType, \"kernelBlur\", { varyingCount: 0, depCount: 0 }, true, textureFormat);\n        this._blockCompilation = _blockCompilation;\n        this._packedFloat = false;\n        this._staticDefines = \"\";\n        this._staticDefines = defines;\n        this.direction = direction;\n        this.onApplyObservable.add((effect) => {\n            if (this._outputTexture) {\n                effect.setFloat2(\"delta\", (1 / this._outputTexture.width) * this.direction.x, (1 / this._outputTexture.height) * this.direction.y);\n            }\n            else {\n                effect.setFloat2(\"delta\", (1 / this.width) * this.direction.x, (1 / this.height) * this.direction.y);\n            }\n        });\n        this.kernel = kernel;\n    }\n    /**\n     * Updates the effect with the current post process compile time values and recompiles the shader.\n     * @param defines Define statements that should be added at the beginning of the shader. (default: null)\n     * @param uniforms Set of uniform variables that will be passed to the shader. (default: null)\n     * @param samplers Set of Texture2D variables that will be passed to the shader. (default: null)\n     * @param indexParameters The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined) See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\n     * @param onCompiled Called when the shader has been compiled.\n     * @param onError Called if there is an error when compiling a shader.\n     */\n    updateEffect(defines = null, uniforms = null, samplers = null, indexParameters, onCompiled, onError) {\n        this._updateParameters(onCompiled, onError);\n    }\n    _updateParameters(onCompiled, onError) {\n        // Generate sampling offsets and weights\n        const N = this._kernel;\n        const centerIndex = (N - 1) / 2;\n        // Generate Gaussian sampling weights over kernel\n        let offsets = [];\n        let weights = [];\n        let totalWeight = 0;\n        for (let i = 0; i < N; i++) {\n            const u = i / (N - 1);\n            const w = this._gaussianWeight(u * 2.0 - 1);\n            offsets[i] = i - centerIndex;\n            weights[i] = w;\n            totalWeight += w;\n        }\n        // Normalize weights\n        for (let i = 0; i < weights.length; i++) {\n            weights[i] /= totalWeight;\n        }\n        // Optimize: combine samples to take advantage of hardware linear sampling\n        // Walk from left to center, combining pairs (symmetrically)\n        const linearSamplingWeights = [];\n        const linearSamplingOffsets = [];\n        const linearSamplingMap = [];\n        for (let i = 0; i <= centerIndex; i += 2) {\n            const j = Math.min(i + 1, Math.floor(centerIndex));\n            const singleCenterSample = i === j;\n            if (singleCenterSample) {\n                linearSamplingMap.push({ o: offsets[i], w: weights[i] });\n            }\n            else {\n                const sharedCell = j === centerIndex;\n                const weightLinear = weights[i] + weights[j] * (sharedCell ? 0.5 : 1);\n                const offsetLinear = offsets[i] + 1 / (1 + weights[i] / weights[j]);\n                if (offsetLinear === 0) {\n                    linearSamplingMap.push({ o: offsets[i], w: weights[i] });\n                    linearSamplingMap.push({ o: offsets[i + 1], w: weights[i + 1] });\n                }\n                else {\n                    linearSamplingMap.push({ o: offsetLinear, w: weightLinear });\n                    linearSamplingMap.push({ o: -offsetLinear, w: weightLinear });\n                }\n            }\n        }\n        for (let i = 0; i < linearSamplingMap.length; i++) {\n            linearSamplingOffsets[i] = linearSamplingMap[i].o;\n            linearSamplingWeights[i] = linearSamplingMap[i].w;\n        }\n        // Replace with optimized\n        offsets = linearSamplingOffsets;\n        weights = linearSamplingWeights;\n        // Generate shaders\n        const maxVaryingRows = this.getEngine().getCaps().maxVaryingVectors;\n        const freeVaryingVec2 = Math.max(maxVaryingRows, 0) - 1; // Because of sampleCenter\n        let varyingCount = Math.min(offsets.length, freeVaryingVec2);\n        let defines = \"\";\n        defines += this._staticDefines;\n        // The DOF fragment should ignore the center pixel when looping as it is handled manually in the fragment shader.\n        if (this._staticDefines.indexOf(\"DOF\") != -1) {\n            defines += `#define CENTER_WEIGHT ${this._glslFloat(weights[varyingCount - 1])}\\r\\n`;\n            varyingCount--;\n        }\n        for (let i = 0; i < varyingCount; i++) {\n            defines += `#define KERNEL_OFFSET${i} ${this._glslFloat(offsets[i])}\\r\\n`;\n            defines += `#define KERNEL_WEIGHT${i} ${this._glslFloat(weights[i])}\\r\\n`;\n        }\n        let depCount = 0;\n        for (let i = freeVaryingVec2; i < offsets.length; i++) {\n            defines += `#define KERNEL_DEP_OFFSET${depCount} ${this._glslFloat(offsets[i])}\\r\\n`;\n            defines += `#define KERNEL_DEP_WEIGHT${depCount} ${this._glslFloat(weights[i])}\\r\\n`;\n            depCount++;\n        }\n        if (this.packedFloat) {\n            defines += `#define PACKEDFLOAT 1`;\n        }\n        this._blockCompilation = false;\n        super.updateEffect(defines, null, null, {\n            varyingCount: varyingCount,\n            depCount: depCount,\n        }, onCompiled, onError);\n    }\n    /**\n     * Best kernels are odd numbers that when divided by 2, their integer part is even, so 5, 9 or 13.\n     * Other odd kernels optimize correctly but require proportionally more samples, even kernels are\n     * possible but will produce minor visual artifacts. Since each new kernel requires a new shader we\n     * want to minimize kernel changes, having gaps between physical kernels is helpful in that regard.\n     * The gaps between physical kernels are compensated for in the weighting of the samples\n     * @param idealKernel Ideal blur kernel.\n     * @returns Nearest best kernel.\n     */\n    _nearestBestKernel(idealKernel) {\n        const v = Math.round(idealKernel);\n        for (const k of [v, v - 1, v + 1, v - 2, v + 2]) {\n            if (k % 2 !== 0 && Math.floor(k / 2) % 2 === 0 && k > 0) {\n                return Math.max(k, 3);\n            }\n        }\n        return Math.max(v, 3);\n    }\n    /**\n     * Calculates the value of a Gaussian distribution with sigma 3 at a given point.\n     * @param x The point on the Gaussian distribution to sample.\n     * @returns the value of the Gaussian function at x.\n     */\n    _gaussianWeight(x) {\n        //reference: Engines/ImageProcessingBlur.cpp #dcc760\n        // We are evaluating the Gaussian (normal) distribution over a kernel parameter space of [-1,1],\n        // so we truncate at three standard deviations by setting stddev (sigma) to 1/3.\n        // The choice of 3-sigma truncation is common but arbitrary, and means that the signal is\n        // truncated at around 1.3% of peak strength.\n        //the distribution is scaled to account for the difference between the actual kernel size and the requested kernel size\n        const sigma = 1 / 3;\n        const denominator = Math.sqrt(2.0 * Math.PI) * sigma;\n        const exponent = -((x * x) / (2.0 * sigma * sigma));\n        const weight = (1.0 / denominator) * Math.exp(exponent);\n        return weight;\n    }\n    /**\n     * Generates a string that can be used as a floating point number in GLSL.\n     * @param x Value to print.\n     * @param decimalFigures Number of decimal places to print the number to (excluding trailing 0s).\n     * @returns GLSL float string.\n     */\n    _glslFloat(x, decimalFigures = 8) {\n        return x.toFixed(decimalFigures).replace(/0+$/, \"\");\n    }\n    /**\n     * @internal\n     */\n    static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(() => {\n            return new BlurPostProcess(parsedPostProcess.name, parsedPostProcess.direction, parsedPostProcess.kernel, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable, parsedPostProcess.textureType, undefined, false);\n        }, parsedPostProcess, scene, rootUrl);\n    }\n}\n__decorate([\n    serialize(\"kernel\")\n], BlurPostProcess.prototype, \"_kernel\", void 0);\n__decorate([\n    serialize(\"packedFloat\")\n], BlurPostProcess.prototype, \"_packedFloat\", void 0);\n__decorate([\n    serializeAsVector2()\n], BlurPostProcess.prototype, \"direction\", void 0);\nRegisterClass(\"BABYLON.BlurPostProcess\", BlurPostProcess);\n//# sourceMappingURL=blurPostProcess.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { Vector2 } from \"../Maths/math.vector.js\";\nimport { PostProcess } from \"./postProcess.js\";\n\nimport \"../Shaders/chromaticAberration.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * The ChromaticAberrationPostProcess separates the rgb channels in an image to produce chromatic distortion around the edges of the screen\n */\nexport class ChromaticAberrationPostProcess extends PostProcess {\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"ChromaticAberrationPostProcess\" string\n     */\n    getClassName() {\n        return \"ChromaticAberrationPostProcess\";\n    }\n    /**\n     * Creates a new instance ChromaticAberrationPostProcess\n     * @param name The name of the effect.\n     * @param screenWidth The width of the screen to apply the effect on.\n     * @param screenHeight The height of the screen to apply the effect on.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n     */\n    constructor(name, screenWidth, screenHeight, options, camera, samplingMode, engine, reusable, textureType = 0, blockCompilation = false) {\n        super(name, \"chromaticAberration\", [\"chromatic_aberration\", \"screen_width\", \"screen_height\", \"direction\", \"radialIntensity\", \"centerPosition\"], [], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation);\n        /**\n         * The amount of separation of rgb channels (default: 30)\n         */\n        this.aberrationAmount = 30;\n        /**\n         * The amount the effect will increase for pixels closer to the edge of the screen. (default: 0)\n         */\n        this.radialIntensity = 0;\n        /**\n         * The normalized direction in which the rgb channels should be separated. If set to 0,0 radial direction will be used. (default: Vector2(0.707,0.707))\n         */\n        this.direction = new Vector2(0.707, 0.707);\n        /**\n         * The center position where the radialIntensity should be around. [0.5,0.5 is center of screen, 1,1 is top right corner] (default: Vector2(0.5 ,0.5))\n         */\n        this.centerPosition = new Vector2(0.5, 0.5);\n        this.screenWidth = screenWidth;\n        this.screenHeight = screenHeight;\n        this.onApplyObservable.add((effect) => {\n            effect.setFloat(\"chromatic_aberration\", this.aberrationAmount);\n            effect.setFloat(\"screen_width\", screenWidth);\n            effect.setFloat(\"screen_height\", screenHeight);\n            effect.setFloat(\"radialIntensity\", this.radialIntensity);\n            effect.setFloat2(\"direction\", this.direction.x, this.direction.y);\n            effect.setFloat2(\"centerPosition\", this.centerPosition.x, this.centerPosition.y);\n        });\n    }\n    /**\n     * @internal\n     */\n    static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(() => {\n            return new ChromaticAberrationPostProcess(parsedPostProcess.name, parsedPostProcess.screenWidth, parsedPostProcess.screenHeight, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable, parsedPostProcess.textureType, false);\n        }, parsedPostProcess, scene, rootUrl);\n    }\n}\n__decorate([\n    serialize()\n], ChromaticAberrationPostProcess.prototype, \"aberrationAmount\", void 0);\n__decorate([\n    serialize()\n], ChromaticAberrationPostProcess.prototype, \"radialIntensity\", void 0);\n__decorate([\n    serialize()\n], ChromaticAberrationPostProcess.prototype, \"direction\", void 0);\n__decorate([\n    serialize()\n], ChromaticAberrationPostProcess.prototype, \"centerPosition\", void 0);\n__decorate([\n    serialize()\n], ChromaticAberrationPostProcess.prototype, \"screenWidth\", void 0);\n__decorate([\n    serialize()\n], ChromaticAberrationPostProcess.prototype, \"screenHeight\", void 0);\nRegisterClass(\"BABYLON.ChromaticAberrationPostProcess\", ChromaticAberrationPostProcess);\n//# sourceMappingURL=chromaticAberrationPostProcess.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport { Logger } from \"../Misc/logger.js\";\n\nimport \"../Shaders/circleOfConfusion.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize } from \"../Misc/decorators.js\";\n/**\n * The CircleOfConfusionPostProcess computes the circle of confusion value for each pixel given required lens parameters. See https://en.wikipedia.org/wiki/Circle_of_confusion\n */\nexport class CircleOfConfusionPostProcess extends PostProcess {\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"CircleOfConfusionPostProcess\" string\n     */\n    getClassName() {\n        return \"CircleOfConfusionPostProcess\";\n    }\n    /**\n     * Creates a new instance CircleOfConfusionPostProcess\n     * @param name The name of the effect.\n     * @param depthTexture The depth texture of the scene to compute the circle of confusion. This must be set in order for this to function but may be set after initialization if needed.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n     */\n    constructor(name, depthTexture, options, camera, samplingMode, engine, reusable, textureType = 0, blockCompilation = false) {\n        super(name, \"circleOfConfusion\", [\"cameraMinMaxZ\", \"focusDistance\", \"cocPrecalculation\"], [\"depthSampler\"], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation);\n        /**\n         * Max lens size in scene units/1000 (eg. millimeter). Standard cameras are 50mm. (default: 50) The diameter of the resulting aperture can be computed by lensSize/fStop.\n         */\n        this.lensSize = 50;\n        /**\n         * F-Stop of the effect's camera. The diameter of the resulting aperture can be computed by lensSize/fStop. (default: 1.4)\n         */\n        this.fStop = 1.4;\n        /**\n         * Distance away from the camera to focus on in scene units/1000 (eg. millimeter). (default: 2000)\n         */\n        this.focusDistance = 2000;\n        /**\n         * Focal length of the effect's camera in scene units/1000 (eg. millimeter). (default: 50)\n         */\n        this.focalLength = 50;\n        this._depthTexture = null;\n        this._depthTexture = depthTexture;\n        this.onApplyObservable.add((effect) => {\n            if (!this._depthTexture) {\n                Logger.Warn(\"No depth texture set on CircleOfConfusionPostProcess\");\n                return;\n            }\n            effect.setTexture(\"depthSampler\", this._depthTexture);\n            // Circle of confusion calculation, See https://developer.nvidia.com/gpugems/GPUGems/gpugems_ch23.html\n            const aperture = this.lensSize / this.fStop;\n            const cocPrecalculation = (aperture * this.focalLength) / (this.focusDistance - this.focalLength); // * ((this.focusDistance - pixelDistance)/pixelDistance) [This part is done in shader]\n            effect.setFloat(\"focusDistance\", this.focusDistance);\n            effect.setFloat(\"cocPrecalculation\", cocPrecalculation);\n            const activeCamera = this._depthTexture.activeCamera;\n            effect.setFloat2(\"cameraMinMaxZ\", activeCamera.minZ, activeCamera.maxZ - activeCamera.minZ);\n        });\n    }\n    /**\n     * Depth texture to be used to compute the circle of confusion. This must be set here or in the constructor in order for the post process to function.\n     */\n    set depthTexture(value) {\n        this._depthTexture = value;\n    }\n}\n__decorate([\n    serialize()\n], CircleOfConfusionPostProcess.prototype, \"lensSize\", void 0);\n__decorate([\n    serialize()\n], CircleOfConfusionPostProcess.prototype, \"fStop\", void 0);\n__decorate([\n    serialize()\n], CircleOfConfusionPostProcess.prototype, \"focusDistance\", void 0);\n__decorate([\n    serialize()\n], CircleOfConfusionPostProcess.prototype, \"focalLength\", void 0);\nRegisterClass(\"BABYLON.CircleOfConfusionPostProcess\", CircleOfConfusionPostProcess);\n//# sourceMappingURL=circleOfConfusionPostProcess.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { BlurPostProcess } from \"./blurPostProcess.js\";\n\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize } from \"../Misc/decorators.js\";\n/**\n * The DepthOfFieldBlurPostProcess applied a blur in a give direction.\n * This blur differs from the standard BlurPostProcess as it attempts to avoid blurring pixels\n * based on samples that have a large difference in distance than the center pixel.\n * See section 2.6.2 http://fileadmin.cs.lth.se/cs/education/edan35/lectures/12dof.pdf\n */\nexport class DepthOfFieldBlurPostProcess extends BlurPostProcess {\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"DepthOfFieldBlurPostProcess\" string\n     */\n    getClassName() {\n        return \"DepthOfFieldBlurPostProcess\";\n    }\n    /**\n     * Creates a new instance DepthOfFieldBlurPostProcess\n     * @param name The name of the effect.\n     * @param scene The scene the effect belongs to.\n     * @param direction The direction the blur should be applied.\n     * @param kernel The size of the kernel used to blur.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param circleOfConfusion The circle of confusion + depth map to be used to avoid blurring across edges\n     * @param imageToBlur The image to apply the blur to (default: Current rendered frame)\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n     * @param textureFormat Format of textures used when performing the post process. (default: TEXTUREFORMAT_RGBA)\n     */\n    constructor(name, scene, direction, kernel, options, camera, circleOfConfusion, imageToBlur = null, samplingMode = Texture.BILINEAR_SAMPLINGMODE, engine, reusable, textureType = 0, blockCompilation = false, textureFormat = 5) {\n        super(name, direction, kernel, options, camera, \n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        (samplingMode = 2), engine, reusable, textureType, `#define DOF 1\\r\\n`, blockCompilation, textureFormat);\n        this.direction = direction;\n        this.externalTextureSamplerBinding = !!imageToBlur;\n        this.onApplyObservable.add((effect) => {\n            if (imageToBlur != null) {\n                effect.setTextureFromPostProcess(\"textureSampler\", imageToBlur);\n            }\n            effect.setTextureFromPostProcessOutput(\"circleOfConfusionSampler\", circleOfConfusion);\n        });\n    }\n}\n__decorate([\n    serialize()\n], DepthOfFieldBlurPostProcess.prototype, \"direction\", void 0);\nRegisterClass(\"BABYLON.DepthOfFieldBlurPostProcess\", DepthOfFieldBlurPostProcess);\n//# sourceMappingURL=depthOfFieldBlurPostProcess.js.map","import { Vector2 } from \"../Maths/math.vector.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { PostProcessRenderEffect } from \"../PostProcesses/RenderPipeline/postProcessRenderEffect.js\";\nimport { CircleOfConfusionPostProcess } from \"./circleOfConfusionPostProcess.js\";\nimport { DepthOfFieldBlurPostProcess } from \"./depthOfFieldBlurPostProcess.js\";\nimport { DepthOfFieldMergePostProcess } from \"./depthOfFieldMergePostProcess.js\";\n\n/**\n * Specifies the level of max blur that should be applied when using the depth of field effect\n */\nexport var DepthOfFieldEffectBlurLevel;\n(function (DepthOfFieldEffectBlurLevel) {\n    /**\n     * Subtle blur\n     */\n    DepthOfFieldEffectBlurLevel[DepthOfFieldEffectBlurLevel[\"Low\"] = 0] = \"Low\";\n    /**\n     * Medium blur\n     */\n    DepthOfFieldEffectBlurLevel[DepthOfFieldEffectBlurLevel[\"Medium\"] = 1] = \"Medium\";\n    /**\n     * Large blur\n     */\n    DepthOfFieldEffectBlurLevel[DepthOfFieldEffectBlurLevel[\"High\"] = 2] = \"High\";\n})(DepthOfFieldEffectBlurLevel || (DepthOfFieldEffectBlurLevel = {}));\n/**\n * The depth of field effect applies a blur to objects that are closer or further from where the camera is focusing.\n */\nexport class DepthOfFieldEffect extends PostProcessRenderEffect {\n    /**\n     * The focal the length of the camera used in the effect in scene units/1000 (eg. millimeter)\n     */\n    set focalLength(value) {\n        this._circleOfConfusion.focalLength = value;\n    }\n    get focalLength() {\n        return this._circleOfConfusion.focalLength;\n    }\n    /**\n     * F-Stop of the effect's camera. The diameter of the resulting aperture can be computed by lensSize/fStop. (default: 1.4)\n     */\n    set fStop(value) {\n        this._circleOfConfusion.fStop = value;\n    }\n    get fStop() {\n        return this._circleOfConfusion.fStop;\n    }\n    /**\n     * Distance away from the camera to focus on in scene units/1000 (eg. millimeter). (default: 2000)\n     */\n    set focusDistance(value) {\n        this._circleOfConfusion.focusDistance = value;\n    }\n    get focusDistance() {\n        return this._circleOfConfusion.focusDistance;\n    }\n    /**\n     * Max lens size in scene units/1000 (eg. millimeter). Standard cameras are 50mm. (default: 50) The diameter of the resulting aperture can be computed by lensSize/fStop.\n     */\n    set lensSize(value) {\n        this._circleOfConfusion.lensSize = value;\n    }\n    get lensSize() {\n        return this._circleOfConfusion.lensSize;\n    }\n    /**\n     * Creates a new instance DepthOfFieldEffect\n     * @param scene The scene the effect belongs to.\n     * @param depthTexture The depth texture of the scene to compute the circle of confusion.This must be set in order for this to function but may be set after initialization if needed.\n     * @param blurLevel\n     * @param pipelineTextureType The type of texture to be used when performing the post processing.\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n     */\n    constructor(scene, depthTexture, blurLevel = DepthOfFieldEffectBlurLevel.Low, pipelineTextureType = 0, blockCompilation = false) {\n        super(scene.getEngine(), \"depth of field\", () => {\n            return this._effects;\n        }, true);\n        /**\n         * @internal Internal post processes in depth of field effect\n         */\n        this._effects = [];\n        // Use R-only formats if supported to store the circle of confusion values.\n        // This should be more space and bandwidth efficient than using RGBA.\n        const engine = scene.getEngine();\n        const circleOfConfusionTextureFormat = engine.isWebGPU || engine.webGLVersion > 1 ? 6 : 5;\n        // Circle of confusion value for each pixel is used to determine how much to blur that pixel\n        this._circleOfConfusion = new CircleOfConfusionPostProcess(\"circleOfConfusion\", depthTexture, 1, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, pipelineTextureType, blockCompilation);\n        // Create a pyramid of blurred images (eg. fullSize 1/4 blur, half size 1/2 blur, quarter size 3/4 blur, eith size 4/4 blur)\n        // Blur the image but do not blur on sharp far to near distance changes to avoid bleeding artifacts\n        // See section 2.6.2 http://fileadmin.cs.lth.se/cs/education/edan35/lectures/12dof.pdf\n        this._depthOfFieldBlurY = [];\n        this._depthOfFieldBlurX = [];\n        let blurCount = 1;\n        let kernelSize = 15;\n        switch (blurLevel) {\n            case DepthOfFieldEffectBlurLevel.High: {\n                blurCount = 3;\n                kernelSize = 51;\n                break;\n            }\n            case DepthOfFieldEffectBlurLevel.Medium: {\n                blurCount = 2;\n                kernelSize = 31;\n                break;\n            }\n            default: {\n                kernelSize = 15;\n                blurCount = 1;\n                break;\n            }\n        }\n        const adjustedKernelSize = kernelSize / Math.pow(2, blurCount - 1);\n        let ratio = 1.0;\n        for (let i = 0; i < blurCount; i++) {\n            const blurY = new DepthOfFieldBlurPostProcess(\"vertical blur\", scene, new Vector2(0, 1.0), adjustedKernelSize, ratio, null, this._circleOfConfusion, i == 0 ? this._circleOfConfusion : null, Texture.BILINEAR_SAMPLINGMODE, engine, false, pipelineTextureType, blockCompilation, i == 0 ? circleOfConfusionTextureFormat : 5);\n            blurY.autoClear = false;\n            ratio = 0.75 / Math.pow(2, i);\n            const blurX = new DepthOfFieldBlurPostProcess(\"horizontal blur\", scene, new Vector2(1.0, 0), adjustedKernelSize, ratio, null, this._circleOfConfusion, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, pipelineTextureType, blockCompilation);\n            blurX.autoClear = false;\n            this._depthOfFieldBlurY.push(blurY);\n            this._depthOfFieldBlurX.push(blurX);\n        }\n        // Set all post processes on the effect.\n        this._effects = [this._circleOfConfusion];\n        for (let i = 0; i < this._depthOfFieldBlurX.length; i++) {\n            this._effects.push(this._depthOfFieldBlurY[i]);\n            this._effects.push(this._depthOfFieldBlurX[i]);\n        }\n        // Merge blurred images with original image based on circleOfConfusion\n        this._dofMerge = new DepthOfFieldMergePostProcess(\"dofMerge\", this._circleOfConfusion, this._circleOfConfusion, this._depthOfFieldBlurX, ratio, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, pipelineTextureType, blockCompilation);\n        this._dofMerge.autoClear = false;\n        this._effects.push(this._dofMerge);\n    }\n    /**\n     * Get the current class name of the current effect\n     * @returns \"DepthOfFieldEffect\"\n     */\n    getClassName() {\n        return \"DepthOfFieldEffect\";\n    }\n    /**\n     * Depth texture to be used to compute the circle of confusion. This must be set here or in the constructor in order for the post process to function.\n     */\n    set depthTexture(value) {\n        this._circleOfConfusion.depthTexture = value;\n    }\n    /**\n     * Disposes each of the internal effects for a given camera.\n     * @param camera The camera to dispose the effect on.\n     */\n    disposeEffects(camera) {\n        for (let effectIndex = 0; effectIndex < this._effects.length; effectIndex++) {\n            this._effects[effectIndex].dispose(camera);\n        }\n    }\n    /**\n     * @internal Internal\n     */\n    _updateEffects() {\n        for (let effectIndex = 0; effectIndex < this._effects.length; effectIndex++) {\n            this._effects[effectIndex].updateEffect();\n        }\n    }\n    /**\n     * Internal\n     * @returns if all the contained post processes are ready.\n     * @internal\n     */\n    _isReady() {\n        for (let effectIndex = 0; effectIndex < this._effects.length; effectIndex++) {\n            if (!this._effects[effectIndex].isReady()) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n//# sourceMappingURL=depthOfFieldEffect.js.map","import { PostProcess } from \"./postProcess.js\";\n\nimport \"../Shaders/depthOfFieldMerge.fragment.js\";\n/**\n * Options to be set when merging outputs from the default pipeline.\n */\nexport class DepthOfFieldMergePostProcessOptions {\n}\n/**\n * The DepthOfFieldMergePostProcess merges blurred images with the original based on the values of the circle of confusion.\n */\nexport class DepthOfFieldMergePostProcess extends PostProcess {\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"DepthOfFieldMergePostProcess\" string\n     */\n    getClassName() {\n        return \"DepthOfFieldMergePostProcess\";\n    }\n    /**\n     * Creates a new instance of DepthOfFieldMergePostProcess\n     * @param name The name of the effect.\n     * @param originalFromInput Post process which's input will be used for the merge.\n     * @param circleOfConfusion Circle of confusion post process which's output will be used to blur each pixel.\n     * @param _blurSteps Blur post processes from low to high which will be mixed with the original image.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n     */\n    constructor(name, originalFromInput, circleOfConfusion, _blurSteps, options, camera, samplingMode, engine, reusable, textureType = 0, blockCompilation = false) {\n        super(name, \"depthOfFieldMerge\", [], [\"circleOfConfusionSampler\", \"blurStep0\", \"blurStep1\", \"blurStep2\"], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, true);\n        this._blurSteps = _blurSteps;\n        this.externalTextureSamplerBinding = true;\n        this.onApplyObservable.add((effect) => {\n            effect.setTextureFromPostProcess(\"textureSampler\", originalFromInput);\n            effect.setTextureFromPostProcessOutput(\"circleOfConfusionSampler\", circleOfConfusion);\n            _blurSteps.forEach((step, index) => {\n                effect.setTextureFromPostProcessOutput(\"blurStep\" + (_blurSteps.length - index - 1), step);\n            });\n        });\n        if (!blockCompilation) {\n            this.updateEffect();\n        }\n    }\n    /**\n     * Updates the effect with the current post process compile time values and recompiles the shader.\n     * @param defines Define statements that should be added at the beginning of the shader. (default: null)\n     * @param uniforms Set of uniform variables that will be passed to the shader. (default: null)\n     * @param samplers Set of Texture2D variables that will be passed to the shader. (default: null)\n     * @param indexParameters The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined) See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\n     * @param onCompiled Called when the shader has been compiled.\n     * @param onError Called if there is an error when compiling a shader.\n     */\n    updateEffect(defines = null, uniforms = null, samplers = null, indexParameters, onCompiled, onError) {\n        if (!defines) {\n            defines = \"\";\n            defines += \"#define BLUR_LEVEL \" + (this._blurSteps.length - 1) + \"\\n\";\n        }\n        super.updateEffect(defines, uniforms, samplers, indexParameters, onCompiled, onError);\n    }\n}\n//# sourceMappingURL=depthOfFieldMergePostProcess.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport { ToGammaSpace } from \"../Maths/math.constants.js\";\n\nimport \"../Shaders/extractHighlights.fragment.js\";\nimport { serialize } from \"../Misc/decorators.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\n/**\n * The extract highlights post process sets all pixels to black except pixels above the specified luminance threshold. Used as the first step for a bloom effect.\n */\nexport class ExtractHighlightsPostProcess extends PostProcess {\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"ExtractHighlightsPostProcess\" string\n     */\n    getClassName() {\n        return \"ExtractHighlightsPostProcess\";\n    }\n    constructor(name, options, camera, samplingMode, engine, reusable, textureType = 0, blockCompilation = false) {\n        super(name, \"extractHighlights\", [\"threshold\", \"exposure\"], null, options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation);\n        /**\n         * The luminance threshold, pixels below this value will be set to black.\n         */\n        this.threshold = 0.9;\n        /** @internal */\n        this._exposure = 1;\n        /**\n         * Post process which has the input texture to be used when performing highlight extraction\n         * @internal\n         */\n        this._inputPostProcess = null;\n        this.onApplyObservable.add((effect) => {\n            this.externalTextureSamplerBinding = !!this._inputPostProcess;\n            if (this._inputPostProcess) {\n                effect.setTextureFromPostProcess(\"textureSampler\", this._inputPostProcess);\n            }\n            effect.setFloat(\"threshold\", Math.pow(this.threshold, ToGammaSpace));\n            effect.setFloat(\"exposure\", this._exposure);\n        });\n    }\n}\n__decorate([\n    serialize()\n], ExtractHighlightsPostProcess.prototype, \"threshold\", void 0);\nRegisterClass(\"BABYLON.ExtractHighlightsPostProcess\", ExtractHighlightsPostProcess);\n//# sourceMappingURL=extractHighlightsPostProcess.js.map","import { Texture } from \"../Materials/Textures/texture.js\";\nimport { PostProcess } from \"./postProcess.js\";\n\nimport \"../Shaders/fxaa.fragment.js\";\nimport \"../Shaders/fxaa.vertex.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * Fxaa post process\n * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses#fxaa\n */\nexport class FxaaPostProcess extends PostProcess {\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"FxaaPostProcess\" string\n     */\n    getClassName() {\n        return \"FxaaPostProcess\";\n    }\n    constructor(name, options, camera = null, samplingMode, engine, reusable, textureType = 0) {\n        super(name, \"fxaa\", [\"texelSize\"], null, options, camera, samplingMode || Texture.BILINEAR_SAMPLINGMODE, engine, reusable, null, textureType, \"fxaa\", undefined, true);\n        const defines = this._getDefines();\n        this.updateEffect(defines);\n        this.onApplyObservable.add((effect) => {\n            const texelSize = this.texelSize;\n            effect.setFloat2(\"texelSize\", texelSize.x, texelSize.y);\n        });\n    }\n    _getDefines() {\n        const engine = this.getEngine();\n        if (!engine) {\n            return null;\n        }\n        const glInfo = engine.getGlInfo();\n        if (glInfo && glInfo.renderer && glInfo.renderer.toLowerCase().indexOf(\"mali\") > -1) {\n            return \"#define MALI 1\\n\";\n        }\n        return null;\n    }\n    /**\n     * @internal\n     */\n    static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(() => {\n            return new FxaaPostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n        }, parsedPostProcess, scene, rootUrl);\n    }\n}\nRegisterClass(\"BABYLON.FxaaPostProcess\", FxaaPostProcess);\n//# sourceMappingURL=fxaaPostProcess.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { PostProcess } from \"./postProcess.js\";\n\nimport \"../Shaders/grain.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * The GrainPostProcess adds noise to the image at mid luminance levels\n */\nexport class GrainPostProcess extends PostProcess {\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"GrainPostProcess\" string\n     */\n    getClassName() {\n        return \"GrainPostProcess\";\n    }\n    /**\n     * Creates a new instance of @see GrainPostProcess\n     * @param name The name of the effect.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n     */\n    constructor(name, options, camera, samplingMode, engine, reusable, textureType = 0, blockCompilation = false) {\n        super(name, \"grain\", [\"intensity\", \"animatedSeed\"], [], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation);\n        /**\n         * The intensity of the grain added (default: 30)\n         */\n        this.intensity = 30;\n        /**\n         * If the grain should be randomized on every frame\n         */\n        this.animated = false;\n        this.onApplyObservable.add((effect) => {\n            effect.setFloat(\"intensity\", this.intensity);\n            effect.setFloat(\"animatedSeed\", this.animated ? Math.random() + 1 : 1);\n        });\n    }\n    /**\n     * @internal\n     */\n    static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(() => {\n            return new GrainPostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n        }, parsedPostProcess, scene, rootUrl);\n    }\n}\n__decorate([\n    serialize()\n], GrainPostProcess.prototype, \"intensity\", void 0);\n__decorate([\n    serialize()\n], GrainPostProcess.prototype, \"animated\", void 0);\nRegisterClass(\"BABYLON.GrainPostProcess\", GrainPostProcess);\n//# sourceMappingURL=grainPostProcess.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { serialize } from \"../Misc/decorators.js\";\nimport { ImageProcessingConfiguration } from \"../Materials/imageProcessingConfiguration.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\n\nimport \"../Shaders/imageProcessing.fragment.js\";\nimport \"../Shaders/postprocess.vertex.js\";\n/**\n * ImageProcessingPostProcess\n * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses#imageprocessing\n */\nexport class ImageProcessingPostProcess extends PostProcess {\n    /**\n     * Gets the image processing configuration used either in this material.\n     */\n    get imageProcessingConfiguration() {\n        return this._imageProcessingConfiguration;\n    }\n    /**\n     * Sets the Default image processing configuration used either in the this material.\n     *\n     * If sets to null, the scene one is in use.\n     */\n    set imageProcessingConfiguration(value) {\n        // We are almost sure it is applied by post process as\n        // We are in the post process :-)\n        value.applyByPostProcess = true;\n        this._attachImageProcessingConfiguration(value);\n    }\n    /**\n     * Attaches a new image processing configuration to the PBR Material.\n     * @param configuration\n     * @param doNotBuild\n     */\n    _attachImageProcessingConfiguration(configuration, doNotBuild = false) {\n        if (configuration === this._imageProcessingConfiguration) {\n            return;\n        }\n        // Detaches observer.\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n        }\n        // Pick the scene configuration if needed.\n        if (!configuration) {\n            let scene = null;\n            const engine = this.getEngine();\n            const camera = this.getCamera();\n            if (camera) {\n                scene = camera.getScene();\n            }\n            else if (engine && engine.scenes) {\n                const scenes = engine.scenes;\n                scene = scenes[scenes.length - 1];\n            }\n            else {\n                scene = EngineStore.LastCreatedScene;\n            }\n            if (scene) {\n                this._imageProcessingConfiguration = scene.imageProcessingConfiguration;\n            }\n            else {\n                this._imageProcessingConfiguration = new ImageProcessingConfiguration();\n            }\n        }\n        else {\n            this._imageProcessingConfiguration = configuration;\n        }\n        // Attaches observer.\n        if (this._imageProcessingConfiguration) {\n            this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(() => {\n                this._updateParameters();\n            });\n        }\n        // Ensure the effect will be rebuilt.\n        if (!doNotBuild) {\n            this._updateParameters();\n        }\n    }\n    /**\n     * If the post process is supported.\n     */\n    get isSupported() {\n        const effect = this.getEffect();\n        return !effect || effect.isSupported;\n    }\n    /**\n     * Gets Color curves setup used in the effect if colorCurvesEnabled is set to true .\n     */\n    get colorCurves() {\n        return this.imageProcessingConfiguration.colorCurves;\n    }\n    /**\n     * Sets Color curves setup used in the effect if colorCurvesEnabled is set to true .\n     */\n    set colorCurves(value) {\n        this.imageProcessingConfiguration.colorCurves = value;\n    }\n    /**\n     * Gets whether the color curves effect is enabled.\n     */\n    get colorCurvesEnabled() {\n        return this.imageProcessingConfiguration.colorCurvesEnabled;\n    }\n    /**\n     * Sets whether the color curves effect is enabled.\n     */\n    set colorCurvesEnabled(value) {\n        this.imageProcessingConfiguration.colorCurvesEnabled = value;\n    }\n    /**\n     * Gets Color grading LUT texture used in the effect if colorGradingEnabled is set to true.\n     */\n    get colorGradingTexture() {\n        return this.imageProcessingConfiguration.colorGradingTexture;\n    }\n    /**\n     * Sets Color grading LUT texture used in the effect if colorGradingEnabled is set to true.\n     */\n    set colorGradingTexture(value) {\n        this.imageProcessingConfiguration.colorGradingTexture = value;\n    }\n    /**\n     * Gets whether the color grading effect is enabled.\n     */\n    get colorGradingEnabled() {\n        return this.imageProcessingConfiguration.colorGradingEnabled;\n    }\n    /**\n     * Gets whether the color grading effect is enabled.\n     */\n    set colorGradingEnabled(value) {\n        this.imageProcessingConfiguration.colorGradingEnabled = value;\n    }\n    /**\n     * Gets exposure used in the effect.\n     */\n    get exposure() {\n        return this.imageProcessingConfiguration.exposure;\n    }\n    /**\n     * Sets exposure used in the effect.\n     */\n    set exposure(value) {\n        this.imageProcessingConfiguration.exposure = value;\n    }\n    /**\n     * Gets whether tonemapping is enabled or not.\n     */\n    get toneMappingEnabled() {\n        return this._imageProcessingConfiguration.toneMappingEnabled;\n    }\n    /**\n     * Sets whether tonemapping is enabled or not\n     */\n    set toneMappingEnabled(value) {\n        this._imageProcessingConfiguration.toneMappingEnabled = value;\n    }\n    /**\n     * Gets the type of tone mapping effect.\n     */\n    get toneMappingType() {\n        return this._imageProcessingConfiguration.toneMappingType;\n    }\n    /**\n     * Sets the type of tone mapping effect.\n     */\n    set toneMappingType(value) {\n        this._imageProcessingConfiguration.toneMappingType = value;\n    }\n    /**\n     * Gets contrast used in the effect.\n     */\n    get contrast() {\n        return this.imageProcessingConfiguration.contrast;\n    }\n    /**\n     * Sets contrast used in the effect.\n     */\n    set contrast(value) {\n        this.imageProcessingConfiguration.contrast = value;\n    }\n    /**\n     * Gets Vignette stretch size.\n     */\n    get vignetteStretch() {\n        return this.imageProcessingConfiguration.vignetteStretch;\n    }\n    /**\n     * Sets Vignette stretch size.\n     */\n    set vignetteStretch(value) {\n        this.imageProcessingConfiguration.vignetteStretch = value;\n    }\n    /**\n     * Gets Vignette center X Offset.\n     * @deprecated use vignetteCenterX instead\n     */\n    get vignetteCentreX() {\n        return this.imageProcessingConfiguration.vignetteCenterX;\n    }\n    /**\n     * Sets Vignette center X Offset.\n     * @deprecated use vignetteCenterX instead\n     */\n    set vignetteCentreX(value) {\n        this.imageProcessingConfiguration.vignetteCenterX = value;\n    }\n    /**\n     * Gets Vignette center Y Offset.\n     * @deprecated use vignetteCenterY instead\n     */\n    get vignetteCentreY() {\n        return this.imageProcessingConfiguration.vignetteCenterY;\n    }\n    /**\n     * Sets Vignette center Y Offset.\n     * @deprecated use vignetteCenterY instead\n     */\n    set vignetteCentreY(value) {\n        this.imageProcessingConfiguration.vignetteCenterY = value;\n    }\n    /**\n     * Vignette center Y Offset.\n     */\n    get vignetteCenterY() {\n        return this.imageProcessingConfiguration.vignetteCenterY;\n    }\n    set vignetteCenterY(value) {\n        this.imageProcessingConfiguration.vignetteCenterY = value;\n    }\n    /**\n     * Vignette center X Offset.\n     */\n    get vignetteCenterX() {\n        return this.imageProcessingConfiguration.vignetteCenterX;\n    }\n    set vignetteCenterX(value) {\n        this.imageProcessingConfiguration.vignetteCenterX = value;\n    }\n    /**\n     * Gets Vignette weight or intensity of the vignette effect.\n     */\n    get vignetteWeight() {\n        return this.imageProcessingConfiguration.vignetteWeight;\n    }\n    /**\n     * Sets Vignette weight or intensity of the vignette effect.\n     */\n    set vignetteWeight(value) {\n        this.imageProcessingConfiguration.vignetteWeight = value;\n    }\n    /**\n     * Gets Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\n     * if vignetteEnabled is set to true.\n     */\n    get vignetteColor() {\n        return this.imageProcessingConfiguration.vignetteColor;\n    }\n    /**\n     * Sets Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\n     * if vignetteEnabled is set to true.\n     */\n    set vignetteColor(value) {\n        this.imageProcessingConfiguration.vignetteColor = value;\n    }\n    /**\n     * Gets Camera field of view used by the Vignette effect.\n     */\n    get vignetteCameraFov() {\n        return this.imageProcessingConfiguration.vignetteCameraFov;\n    }\n    /**\n     * Sets Camera field of view used by the Vignette effect.\n     */\n    set vignetteCameraFov(value) {\n        this.imageProcessingConfiguration.vignetteCameraFov = value;\n    }\n    /**\n     * Gets the vignette blend mode allowing different kind of effect.\n     */\n    get vignetteBlendMode() {\n        return this.imageProcessingConfiguration.vignetteBlendMode;\n    }\n    /**\n     * Sets the vignette blend mode allowing different kind of effect.\n     */\n    set vignetteBlendMode(value) {\n        this.imageProcessingConfiguration.vignetteBlendMode = value;\n    }\n    /**\n     * Gets whether the vignette effect is enabled.\n     */\n    get vignetteEnabled() {\n        return this.imageProcessingConfiguration.vignetteEnabled;\n    }\n    /**\n     * Sets whether the vignette effect is enabled.\n     */\n    set vignetteEnabled(value) {\n        this.imageProcessingConfiguration.vignetteEnabled = value;\n    }\n    /**\n     * Gets intensity of the dithering effect.\n     */\n    get ditheringIntensity() {\n        return this.imageProcessingConfiguration.ditheringIntensity;\n    }\n    /**\n     * Sets intensity of the dithering effect.\n     */\n    set ditheringIntensity(value) {\n        this.imageProcessingConfiguration.ditheringIntensity = value;\n    }\n    /**\n     * Gets whether the dithering effect is enabled.\n     */\n    get ditheringEnabled() {\n        return this.imageProcessingConfiguration.ditheringEnabled;\n    }\n    /**\n     * Sets whether the dithering effect is enabled.\n     */\n    set ditheringEnabled(value) {\n        this.imageProcessingConfiguration.ditheringEnabled = value;\n    }\n    /**\n     * Gets whether the input of the processing is in Gamma or Linear Space.\n     */\n    get fromLinearSpace() {\n        return this._fromLinearSpace;\n    }\n    /**\n     * Sets whether the input of the processing is in Gamma or Linear Space.\n     */\n    set fromLinearSpace(value) {\n        if (this._fromLinearSpace === value) {\n            return;\n        }\n        this._fromLinearSpace = value;\n        this._updateParameters();\n    }\n    constructor(name, options, camera = null, samplingMode, engine, reusable, textureType = 0, imageProcessingConfiguration) {\n        super(name, \"imageProcessing\", [], [], options, camera, samplingMode, engine, reusable, null, textureType, \"postprocess\", null, true);\n        this._fromLinearSpace = true;\n        /**\n         * Defines cache preventing GC.\n         */\n        this._defines = {\n            IMAGEPROCESSING: false,\n            VIGNETTE: false,\n            VIGNETTEBLENDMODEMULTIPLY: false,\n            VIGNETTEBLENDMODEOPAQUE: false,\n            TONEMAPPING: false,\n            TONEMAPPING_ACES: false,\n            CONTRAST: false,\n            COLORCURVES: false,\n            COLORGRADING: false,\n            COLORGRADING3D: false,\n            FROMLINEARSPACE: false,\n            SAMPLER3DGREENDEPTH: false,\n            SAMPLER3DBGRMAP: false,\n            DITHER: false,\n            IMAGEPROCESSINGPOSTPROCESS: false,\n            EXPOSURE: false,\n            SKIPFINALCOLORCLAMP: false,\n        };\n        // Setup the configuration as forced by the constructor. This would then not force the\n        // scene materials output in linear space and let untouched the default forward pass.\n        if (imageProcessingConfiguration) {\n            imageProcessingConfiguration.applyByPostProcess = true;\n            this._attachImageProcessingConfiguration(imageProcessingConfiguration, true);\n            // This will cause the shader to be compiled\n            this._updateParameters();\n        }\n        // Setup the default processing configuration to the scene.\n        else {\n            this._attachImageProcessingConfiguration(null, true);\n            this.imageProcessingConfiguration.applyByPostProcess = true;\n        }\n        this.onApply = (effect) => {\n            this.imageProcessingConfiguration.bind(effect, this.aspectRatio);\n        };\n    }\n    /**\n     *  \"ImageProcessingPostProcess\"\n     * @returns \"ImageProcessingPostProcess\"\n     */\n    getClassName() {\n        return \"ImageProcessingPostProcess\";\n    }\n    /**\n     * @internal\n     */\n    _updateParameters() {\n        this._defines.FROMLINEARSPACE = this._fromLinearSpace;\n        this.imageProcessingConfiguration.prepareDefines(this._defines, true);\n        let defines = \"\";\n        for (const define in this._defines) {\n            if (this._defines[define]) {\n                defines += `#define ${define};\\r\\n`;\n            }\n        }\n        const samplers = [\"textureSampler\"];\n        const uniforms = [\"scale\"];\n        if (ImageProcessingConfiguration) {\n            ImageProcessingConfiguration.PrepareSamplers(samplers, this._defines);\n            ImageProcessingConfiguration.PrepareUniforms(uniforms, this._defines);\n        }\n        this.updateEffect(defines, uniforms, samplers);\n    }\n    dispose(camera) {\n        super.dispose(camera);\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n        }\n        if (this._imageProcessingConfiguration) {\n            this.imageProcessingConfiguration.applyByPostProcess = false;\n        }\n    }\n}\n__decorate([\n    serialize()\n], ImageProcessingPostProcess.prototype, \"_fromLinearSpace\", void 0);\n//# sourceMappingURL=imageProcessingPostProcess.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/blackAndWhite.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * Post process used to render in black and white\n */\nexport class BlackAndWhitePostProcess extends PostProcess {\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"BlackAndWhitePostProcess\" string\n     */\n    getClassName() {\n        return \"BlackAndWhitePostProcess\";\n    }\n    /**\n     * Creates a black and white post process\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses#black-and-white\n     * @param name The name of the effect.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     */\n    constructor(name, options, camera, samplingMode, engine, reusable) {\n        super(name, \"blackAndWhite\", [\"degree\"], null, options, camera, samplingMode, engine, reusable);\n        /**\n         * Linear about to convert he result to black and white (default: 1)\n         */\n        this.degree = 1;\n        this.onApplyObservable.add((effect) => {\n            effect.setFloat(\"degree\", this.degree);\n        });\n    }\n    /**\n     * @internal\n     */\n    static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(() => {\n            return new BlackAndWhitePostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n        }, parsedPostProcess, scene, rootUrl);\n    }\n}\n__decorate([\n    serialize()\n], BlackAndWhitePostProcess.prototype, \"degree\", void 0);\nRegisterClass(\"BABYLON.BlackAndWhitePostProcess\", BlackAndWhitePostProcess);\n//# sourceMappingURL=blackAndWhitePostProcess.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport \"../Shaders/colorCorrection.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { SerializationHelper, serialize } from \"../Misc/decorators.js\";\n/**\n *\n * This post-process allows the modification of rendered colors by using\n * a 'look-up table' (LUT). This effect is also called Color Grading.\n *\n * The object needs to be provided an url to a texture containing the color\n * look-up table: the texture must be 256 pixels wide and 16 pixels high.\n * Use an image editing software to tweak the LUT to match your needs.\n *\n * For an example of a color LUT, see here:\n * @see http://udn.epicgames.com/Three/rsrc/Three/ColorGrading/RGBTable16x1.png\n * For explanations on color grading, see here:\n * @see http://udn.epicgames.com/Three/ColorGrading.html\n *\n */\nexport class ColorCorrectionPostProcess extends PostProcess {\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"ColorCorrectionPostProcess\" string\n     */\n    getClassName() {\n        return \"ColorCorrectionPostProcess\";\n    }\n    constructor(name, colorTableUrl, options, camera, samplingMode, engine, reusable) {\n        super(name, \"colorCorrection\", null, [\"colorTable\"], options, camera, samplingMode, engine, reusable);\n        const scene = (camera === null || camera === void 0 ? void 0 : camera.getScene()) || null;\n        this._colorTableTexture = new Texture(colorTableUrl, scene, true, false, Texture.TRILINEAR_SAMPLINGMODE);\n        this._colorTableTexture.anisotropicFilteringLevel = 1;\n        this._colorTableTexture.wrapU = Texture.CLAMP_ADDRESSMODE;\n        this._colorTableTexture.wrapV = Texture.CLAMP_ADDRESSMODE;\n        this.colorTableUrl = colorTableUrl;\n        this.onApply = (effect) => {\n            effect.setTexture(\"colorTable\", this._colorTableTexture);\n        };\n    }\n    /**\n     * @internal\n     */\n    static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(() => {\n            return new ColorCorrectionPostProcess(parsedPostProcess.name, parsedPostProcess.colorTableUrl, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n        }, parsedPostProcess, scene, rootUrl);\n    }\n}\n__decorate([\n    serialize()\n], ColorCorrectionPostProcess.prototype, \"colorTableUrl\", void 0);\nRegisterClass(\"BABYLON.ColorCorrectionPostProcess\", ColorCorrectionPostProcess);\n//# sourceMappingURL=colorCorrectionPostProcess.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { PostProcess } from \"./postProcess.js\";\n\nimport \"../Shaders/convolution.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * The ConvolutionPostProcess applies a 3x3 kernel to every pixel of the\n * input texture to perform effects such as edge detection or sharpening\n * See http://en.wikipedia.org/wiki/Kernel_(image_processing)\n */\nexport class ConvolutionPostProcess extends PostProcess {\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"ConvolutionPostProcess\" string\n     */\n    getClassName() {\n        return \"ConvolutionPostProcess\";\n    }\n    /**\n     * Creates a new instance ConvolutionPostProcess\n     * @param name The name of the effect.\n     * @param kernel Array of 9 values corresponding to the 3x3 kernel to be applied\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     */\n    constructor(name, kernel, options, camera, samplingMode, engine, reusable, textureType = 0) {\n        super(name, \"convolution\", [\"kernel\", \"screenSize\"], null, options, camera, samplingMode, engine, reusable, null, textureType);\n        this.kernel = kernel;\n        this.onApply = (effect) => {\n            effect.setFloat2(\"screenSize\", this.width, this.height);\n            effect.setArray(\"kernel\", this.kernel);\n        };\n    }\n    /**\n     * @internal\n     */\n    static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(() => {\n            return new ConvolutionPostProcess(parsedPostProcess.name, parsedPostProcess.kernel, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable, parsedPostProcess.textureType);\n        }, parsedPostProcess, scene, rootUrl);\n    }\n}\n// Statics\n/**\n * Edge detection 0 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\n */\nConvolutionPostProcess.EdgeDetect0Kernel = [1, 0, -1, 0, 0, 0, -1, 0, 1];\n/**\n * Edge detection 1 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\n */\nConvolutionPostProcess.EdgeDetect1Kernel = [0, 1, 0, 1, -4, 1, 0, 1, 0];\n/**\n * Edge detection 2 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\n */\nConvolutionPostProcess.EdgeDetect2Kernel = [-1, -1, -1, -1, 8, -1, -1, -1, -1];\n/**\n * Kernel to sharpen an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\n */\nConvolutionPostProcess.SharpenKernel = [0, -1, 0, -1, 5, -1, 0, -1, 0];\n/**\n * Kernel to emboss an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\n */\nConvolutionPostProcess.EmbossKernel = [-2, -1, 0, -1, 1, 1, 0, 1, 2];\n/**\n * Kernel to blur an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\n */\nConvolutionPostProcess.GaussianKernel = [0, 1, 0, 1, 1, 1, 0, 1, 0];\n__decorate([\n    serialize()\n], ConvolutionPostProcess.prototype, \"kernel\", void 0);\nRegisterClass(\"BABYLON.ConvolutionPostProcess\", ConvolutionPostProcess);\n//# sourceMappingURL=convolutionPostProcess.js.map","import { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/displayPass.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * DisplayPassPostProcess which produces an output the same as it's input\n */\nexport class DisplayPassPostProcess extends PostProcess {\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"DisplayPassPostProcess\" string\n     */\n    getClassName() {\n        return \"DisplayPassPostProcess\";\n    }\n    /**\n     * Creates the DisplayPassPostProcess\n     * @param name The name of the effect.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     */\n    constructor(name, options, camera, samplingMode, engine, reusable) {\n        super(name, \"displayPass\", [\"passSampler\"], [\"passSampler\"], options, camera, samplingMode, engine, reusable);\n    }\n    /**\n     * @internal\n     */\n    static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(() => {\n            return new DisplayPassPostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n        }, parsedPostProcess, scene, rootUrl);\n    }\n}\nRegisterClass(\"BABYLON.DisplayPassPostProcess\", DisplayPassPostProcess);\n//# sourceMappingURL=displayPassPostProcess.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/filter.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serializeAsMatrix, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * Applies a kernel filter to the image\n */\nexport class FilterPostProcess extends PostProcess {\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"FilterPostProcess\" string\n     */\n    getClassName() {\n        return \"FilterPostProcess\";\n    }\n    /**\n     *\n     * @param name The name of the effect.\n     * @param kernelMatrix The matrix to be applied to the image\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     */\n    constructor(name, kernelMatrix, options, camera, samplingMode, engine, reusable) {\n        super(name, \"filter\", [\"kernelMatrix\"], null, options, camera, samplingMode, engine, reusable);\n        this.kernelMatrix = kernelMatrix;\n        this.onApply = (effect) => {\n            effect.setMatrix(\"kernelMatrix\", this.kernelMatrix);\n        };\n    }\n    /**\n     * @internal\n     */\n    static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(() => {\n            return new FilterPostProcess(parsedPostProcess.name, parsedPostProcess.kernelMatrix, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n        }, parsedPostProcess, scene, rootUrl);\n    }\n}\n__decorate([\n    serializeAsMatrix()\n], FilterPostProcess.prototype, \"kernelMatrix\", void 0);\nRegisterClass(\"BABYLON.FilterPostProcess\", FilterPostProcess);\n//# sourceMappingURL=filterPostProcess.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { Matrix, TmpVectors, Vector2 } from \"../Maths/math.vector.js\";\nimport { PostProcess } from \"./postProcess.js\";\n\nimport { GeometryBufferRenderer } from \"../Rendering/geometryBufferRenderer.js\";\nimport { MotionBlurConfiguration } from \"../Rendering/motionBlurConfiguration.js\";\nimport \"../Animations/animatable.js\";\nimport \"../Rendering/geometryBufferRendererSceneComponent.js\";\nimport \"../Shaders/motionBlur.fragment.js\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\n/**\n * The Motion Blur Post Process which blurs an image based on the objects velocity in scene.\n * Velocity can be affected by each object's rotation, position and scale depending on the transformation speed.\n * As an example, all you have to do is to create the post-process:\n *  var mb = new BABYLON.MotionBlurPostProcess(\n *      'mb', // The name of the effect.\n *      scene, // The scene containing the objects to blur according to their velocity.\n *      1.0, // The required width/height ratio to downsize to before computing the render pass.\n *      camera // The camera to apply the render pass to.\n * );\n * Then, all objects moving, rotating and/or scaling will be blurred depending on the transformation speed.\n */\nexport class MotionBlurPostProcess extends PostProcess {\n    /**\n     * Gets the number of iterations are used for motion blur quality. Default value is equal to 32\n     */\n    get motionBlurSamples() {\n        return this._motionBlurSamples;\n    }\n    /**\n     * Sets the number of iterations to be used for motion blur quality\n     */\n    set motionBlurSamples(samples) {\n        this._motionBlurSamples = samples;\n        this._updateEffect();\n    }\n    /**\n     * Gets whether or not the motion blur post-process is in object based mode.\n     */\n    get isObjectBased() {\n        return this._isObjectBased;\n    }\n    /**\n     * Sets whether or not the motion blur post-process is in object based mode.\n     */\n    set isObjectBased(value) {\n        if (this._isObjectBased === value) {\n            return;\n        }\n        this._isObjectBased = value;\n        this._applyMode();\n    }\n    get _geometryBufferRenderer() {\n        if (!this._forceGeometryBuffer) {\n            return null;\n        }\n        return this._scene.geometryBufferRenderer;\n    }\n    get _prePassRenderer() {\n        if (this._forceGeometryBuffer) {\n            return null;\n        }\n        return this._scene.prePassRenderer;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"MotionBlurPostProcess\" string\n     */\n    getClassName() {\n        return \"MotionBlurPostProcess\";\n    }\n    /**\n     * Creates a new instance MotionBlurPostProcess\n     * @param name The name of the effect.\n     * @param scene The scene containing the objects to blur according to their velocity.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: true)\n     * @param forceGeometryBuffer If this post process should use geometry buffer instead of prepass (default: false)\n     */\n    constructor(name, scene, options, camera, samplingMode, engine, reusable, textureType = 0, blockCompilation = false, forceGeometryBuffer = false) {\n        super(name, \"motionBlur\", [\"motionStrength\", \"motionScale\", \"screenSize\", \"inverseViewProjection\", \"prevViewProjection\", \"projection\"], [\"velocitySampler\", \"depthSampler\"], options, camera, samplingMode, engine, reusable, \"#define GEOMETRY_SUPPORTED\\n#define SAMPLES 64.0\\n#define OBJECT_BASED\", textureType, undefined, null, blockCompilation);\n        /**\n         * Defines how much the image is blurred by the movement. Default value is equal to 1\n         */\n        this.motionStrength = 1;\n        this._motionBlurSamples = 32;\n        this._isObjectBased = true;\n        this._forceGeometryBuffer = false;\n        this._invViewProjection = null;\n        this._previousViewProjection = null;\n        this._forceGeometryBuffer = forceGeometryBuffer;\n        // Set up assets\n        if (this._forceGeometryBuffer) {\n            scene.enableGeometryBufferRenderer();\n            if (this._geometryBufferRenderer) {\n                this._geometryBufferRenderer.enableVelocity = true;\n            }\n        }\n        else {\n            scene.enablePrePassRenderer();\n            if (this._prePassRenderer) {\n                this._prePassRenderer.markAsDirty();\n                this._prePassEffectConfiguration = new MotionBlurConfiguration();\n            }\n        }\n        this._applyMode();\n    }\n    /**\n     * Excludes the given skinned mesh from computing bones velocities.\n     * Computing bones velocities can have a cost and that cost. The cost can be saved by calling this function and by passing the skinned mesh reference to ignore.\n     * @param skinnedMesh The mesh containing the skeleton to ignore when computing the velocity map.\n     */\n    excludeSkinnedMesh(skinnedMesh) {\n        if (skinnedMesh.skeleton) {\n            let list;\n            if (this._geometryBufferRenderer) {\n                list = this._geometryBufferRenderer.excludedSkinnedMeshesFromVelocity;\n            }\n            else if (this._prePassRenderer) {\n                list = this._prePassRenderer.excludedSkinnedMesh;\n            }\n            else {\n                return;\n            }\n            list.push(skinnedMesh);\n        }\n    }\n    /**\n     * Removes the given skinned mesh from the excluded meshes to integrate bones velocities while rendering the velocity map.\n     * @param skinnedMesh The mesh containing the skeleton that has been ignored previously.\n     * @see excludeSkinnedMesh to exclude a skinned mesh from bones velocity computation.\n     */\n    removeExcludedSkinnedMesh(skinnedMesh) {\n        if (skinnedMesh.skeleton) {\n            let list;\n            if (this._geometryBufferRenderer) {\n                list = this._geometryBufferRenderer.excludedSkinnedMeshesFromVelocity;\n            }\n            else if (this._prePassRenderer) {\n                list = this._prePassRenderer.excludedSkinnedMesh;\n            }\n            else {\n                return;\n            }\n            const index = list.indexOf(skinnedMesh);\n            if (index !== -1) {\n                list.splice(index, 1);\n            }\n        }\n    }\n    /**\n     * Disposes the post process.\n     * @param camera The camera to dispose the post process on.\n     */\n    dispose(camera) {\n        if (this._geometryBufferRenderer) {\n            // Clear previous transformation matrices dictionary used to compute objects velocities\n            this._geometryBufferRenderer._previousTransformationMatrices = {};\n            this._geometryBufferRenderer._previousBonesTransformationMatrices = {};\n            this._geometryBufferRenderer.excludedSkinnedMeshesFromVelocity = [];\n        }\n        super.dispose(camera);\n    }\n    /**\n     * Called on the mode changed (object based or screen based).\n     */\n    _applyMode() {\n        if (!this._geometryBufferRenderer && !this._prePassRenderer) {\n            // We can't get a velocity or depth texture. So, work as a passthrough.\n            Logger.Warn(\"Multiple Render Target support needed to compute object based motion blur\");\n            return this.updateEffect();\n        }\n        this._updateEffect();\n        this._invViewProjection = null;\n        this._previousViewProjection = null;\n        if (this.isObjectBased) {\n            if (this._prePassRenderer && this._prePassEffectConfiguration) {\n                this._prePassEffectConfiguration.texturesRequired[0] = 2;\n            }\n            this.onApply = (effect) => this._onApplyObjectBased(effect);\n        }\n        else {\n            this._invViewProjection = Matrix.Identity();\n            this._previousViewProjection = this._scene.getTransformMatrix().clone();\n            if (this._prePassRenderer && this._prePassEffectConfiguration) {\n                this._prePassEffectConfiguration.texturesRequired[0] = 5;\n            }\n            this.onApply = (effect) => this._onApplyScreenBased(effect);\n        }\n    }\n    /**\n     * Called on the effect is applied when the motion blur post-process is in object based mode.\n     * @param effect\n     */\n    _onApplyObjectBased(effect) {\n        effect.setVector2(\"screenSize\", new Vector2(this.width, this.height));\n        effect.setFloat(\"motionScale\", this._scene.getAnimationRatio());\n        effect.setFloat(\"motionStrength\", this.motionStrength);\n        if (this._geometryBufferRenderer) {\n            const velocityIndex = this._geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.VELOCITY_TEXTURE_TYPE);\n            effect.setTexture(\"velocitySampler\", this._geometryBufferRenderer.getGBuffer().textures[velocityIndex]);\n        }\n        else if (this._prePassRenderer) {\n            const velocityIndex = this._prePassRenderer.getIndex(2);\n            effect.setTexture(\"velocitySampler\", this._prePassRenderer.getRenderTarget().textures[velocityIndex]);\n        }\n    }\n    /**\n     * Called on the effect is applied when the motion blur post-process is in screen based mode.\n     * @param effect\n     */\n    _onApplyScreenBased(effect) {\n        const viewProjection = TmpVectors.Matrix[0];\n        viewProjection.copyFrom(this._scene.getTransformMatrix());\n        viewProjection.invertToRef(this._invViewProjection);\n        effect.setMatrix(\"inverseViewProjection\", this._invViewProjection);\n        effect.setMatrix(\"prevViewProjection\", this._previousViewProjection);\n        this._previousViewProjection.copyFrom(viewProjection);\n        effect.setMatrix(\"projection\", this._scene.getProjectionMatrix());\n        effect.setVector2(\"screenSize\", new Vector2(this.width, this.height));\n        effect.setFloat(\"motionScale\", this._scene.getAnimationRatio());\n        effect.setFloat(\"motionStrength\", this.motionStrength);\n        if (this._geometryBufferRenderer) {\n            const depthIndex = this._geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.DEPTH_TEXTURE_TYPE);\n            effect.setTexture(\"depthSampler\", this._geometryBufferRenderer.getGBuffer().textures[depthIndex]);\n        }\n        else if (this._prePassRenderer) {\n            const depthIndex = this._prePassRenderer.getIndex(5);\n            effect.setTexture(\"depthSampler\", this._prePassRenderer.getRenderTarget().textures[depthIndex]);\n        }\n    }\n    /**\n     * Called on the effect must be updated (changed mode, samples count, etc.).\n     */\n    _updateEffect() {\n        if (this._geometryBufferRenderer || this._prePassRenderer) {\n            const defines = [\n                \"#define GEOMETRY_SUPPORTED\",\n                \"#define SAMPLES \" + this._motionBlurSamples.toFixed(1),\n                this._isObjectBased ? \"#define OBJECT_BASED\" : \"#define SCREEN_BASED\",\n            ];\n            this.updateEffect(defines.join(\"\\n\"));\n        }\n    }\n    /**\n     * @internal\n     */\n    static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(() => {\n            return new MotionBlurPostProcess(parsedPostProcess.name, scene, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable, parsedPostProcess.textureType, false);\n        }, parsedPostProcess, scene, rootUrl);\n    }\n}\n__decorate([\n    serialize()\n], MotionBlurPostProcess.prototype, \"motionStrength\", void 0);\n__decorate([\n    serialize()\n], MotionBlurPostProcess.prototype, \"motionBlurSamples\", null);\n__decorate([\n    serialize()\n], MotionBlurPostProcess.prototype, \"isObjectBased\", null);\nRegisterClass(\"BABYLON.MotionBlurPostProcess\", MotionBlurPostProcess);\n//# sourceMappingURL=motionBlurPostProcess.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/refraction.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { SerializationHelper, serialize } from \"../Misc/decorators.js\";\n/**\n * Post process which applies a refraction texture\n * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses#refraction\n */\nexport class RefractionPostProcess extends PostProcess {\n    /**\n     * Gets or sets the refraction texture\n     * Please note that you are responsible for disposing the texture if you set it manually\n     */\n    get refractionTexture() {\n        return this._refTexture;\n    }\n    set refractionTexture(value) {\n        if (this._refTexture && this._ownRefractionTexture) {\n            this._refTexture.dispose();\n        }\n        this._refTexture = value;\n        this._ownRefractionTexture = false;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"RefractionPostProcess\" string\n     */\n    getClassName() {\n        return \"RefractionPostProcess\";\n    }\n    /**\n     * Initializes the RefractionPostProcess\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses#refraction\n     * @param name The name of the effect.\n     * @param refractionTextureUrl Url of the refraction texture to use\n     * @param color the base color of the refraction (used to taint the rendering)\n     * @param depth simulated refraction depth\n     * @param colorLevel the coefficient of the base color (0 to remove base color tainting)\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     */\n    constructor(name, refractionTextureUrl, color, depth, colorLevel, options, camera, samplingMode, engine, reusable) {\n        super(name, \"refraction\", [\"baseColor\", \"depth\", \"colorLevel\"], [\"refractionSampler\"], options, camera, samplingMode, engine, reusable);\n        this._ownRefractionTexture = true;\n        this.color = color;\n        this.depth = depth;\n        this.colorLevel = colorLevel;\n        this.refractionTextureUrl = refractionTextureUrl;\n        this.onActivateObservable.add((cam) => {\n            this._refTexture = this._refTexture || new Texture(refractionTextureUrl, cam.getScene());\n        });\n        this.onApplyObservable.add((effect) => {\n            effect.setColor3(\"baseColor\", this.color);\n            effect.setFloat(\"depth\", this.depth);\n            effect.setFloat(\"colorLevel\", this.colorLevel);\n            effect.setTexture(\"refractionSampler\", this._refTexture);\n        });\n    }\n    // Methods\n    /**\n     * Disposes of the post process\n     * @param camera Camera to dispose post process on\n     */\n    dispose(camera) {\n        if (this._refTexture && this._ownRefractionTexture) {\n            this._refTexture.dispose();\n            this._refTexture = null;\n        }\n        super.dispose(camera);\n    }\n    /**\n     * @internal\n     */\n    static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(() => {\n            return new RefractionPostProcess(parsedPostProcess.name, parsedPostProcess.refractionTextureUrl, parsedPostProcess.color, parsedPostProcess.depth, parsedPostProcess.colorLevel, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n        }, parsedPostProcess, scene, rootUrl);\n    }\n}\n__decorate([\n    serialize()\n], RefractionPostProcess.prototype, \"color\", void 0);\n__decorate([\n    serialize()\n], RefractionPostProcess.prototype, \"depth\", void 0);\n__decorate([\n    serialize()\n], RefractionPostProcess.prototype, \"colorLevel\", void 0);\n__decorate([\n    serialize()\n], RefractionPostProcess.prototype, \"refractionTextureUrl\", void 0);\nRegisterClass(\"BABYLON.RefractionPostProcess\", RefractionPostProcess);\n//# sourceMappingURL=refractionPostProcess.js.map","import { __decorate } from \"../../../tslib.es6.js\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { Logger } from \"../../../Misc/logger.js\";\nimport { serialize, SerializationHelper } from \"../../../Misc/decorators.js\";\nimport { Vector3, TmpVectors } from \"../../../Maths/math.vector.js\";\nimport { Camera } from \"../../../Cameras/camera.js\";\nimport { Texture } from \"../../../Materials/Textures/texture.js\";\nimport { DynamicTexture } from \"../../../Materials/Textures/dynamicTexture.js\";\nimport { PostProcess } from \"../../../PostProcesses/postProcess.js\";\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline.js\";\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect.js\";\nimport { PassPostProcess } from \"../../../PostProcesses/passPostProcess.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { EngineStore } from \"../../../Engines/engineStore.js\";\nimport { SSAO2Configuration } from \"../../../Rendering/ssao2Configuration.js\";\n\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent.js\";\nimport \"../../../Shaders/ssao2.fragment.js\";\nimport \"../../../Shaders/ssaoCombine.fragment.js\";\n/**\n * Render pipeline to produce ssao effect\n */\nexport class SSAO2RenderingPipeline extends PostProcessRenderPipeline {\n    /**\n     * Number of samples used for the SSAO calculations. Default value is 8\n     */\n    set samples(n) {\n        this._samples = n;\n        this._ssaoPostProcess.updateEffect(this._getDefinesForSSAO());\n        this._sampleSphere = this._generateHemisphere();\n    }\n    get samples() {\n        return this._samples;\n    }\n    /**\n     * Number of samples to use for antialiasing\n     */\n    set textureSamples(n) {\n        this._textureSamples = n;\n        if (this._prePassRenderer) {\n            this._prePassRenderer.samples = n;\n        }\n        else {\n            this._originalColorPostProcess.samples = n;\n        }\n    }\n    get textureSamples() {\n        return this._textureSamples;\n    }\n    get _geometryBufferRenderer() {\n        if (!this._forceGeometryBuffer) {\n            return null;\n        }\n        return this._scene.geometryBufferRenderer;\n    }\n    get _prePassRenderer() {\n        if (this._forceGeometryBuffer) {\n            return null;\n        }\n        return this._scene.prePassRenderer;\n    }\n    /**\n     * If bilateral blur should be used\n     */\n    set expensiveBlur(b) {\n        this._blurHPostProcess.updateEffect(\"#define BILATERAL_BLUR\\n#define BILATERAL_BLUR_H\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (b ? \"1\" : \"0\") + \"\\n\", null, [\n            \"textureSampler\",\n            \"depthSampler\",\n        ]);\n        this._blurVPostProcess.updateEffect(\"#define BILATERAL_BLUR\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (b ? \"1\" : \"0\") + \"\\n\", null, [\"textureSampler\", \"depthSampler\"]);\n        this._expensiveBlur = b;\n    }\n    get expensiveBlur() {\n        return this._expensiveBlur;\n    }\n    /**\n     *  Support test.\n     */\n    static get IsSupported() {\n        const engine = EngineStore.LastCreatedEngine;\n        if (!engine) {\n            return false;\n        }\n        return engine._features.supportSSAO2;\n    }\n    /**\n     * Gets active scene\n     */\n    get scene() {\n        return this._scene;\n    }\n    /**\n     * @constructor\n     * @param name The rendering pipeline name\n     * @param scene The scene linked to this pipeline\n     * @param ratio The size of the postprocesses. Can be a number shared between passes or an object for more precision: { ssaoRatio: 0.5, blurRatio: 1.0 }\n     * @param cameras The array of cameras that the rendering pipeline will be attached to\n     * @param forceGeometryBuffer Set to true if you want to use the legacy geometry buffer renderer\n     * @param textureType The texture type used by the different post processes created by SSAO (default: 0)\n     */\n    constructor(name, scene, ratio, cameras, forceGeometryBuffer = false, textureType = 0) {\n        super(scene.getEngine(), name);\n        // Members\n        /**\n         * @ignore\n         * The PassPostProcess id in the pipeline that contains the original scene color\n         */\n        this.SSAOOriginalSceneColorEffect = \"SSAOOriginalSceneColorEffect\";\n        /**\n         * @ignore\n         * The SSAO PostProcess id in the pipeline\n         */\n        this.SSAORenderEffect = \"SSAORenderEffect\";\n        /**\n         * @ignore\n         * The horizontal blur PostProcess id in the pipeline\n         */\n        this.SSAOBlurHRenderEffect = \"SSAOBlurHRenderEffect\";\n        /**\n         * @ignore\n         * The vertical blur PostProcess id in the pipeline\n         */\n        this.SSAOBlurVRenderEffect = \"SSAOBlurVRenderEffect\";\n        /**\n         * @ignore\n         * The PostProcess id in the pipeline that combines the SSAO-Blur output with the original scene color (SSAOOriginalSceneColorEffect)\n         */\n        this.SSAOCombineRenderEffect = \"SSAOCombineRenderEffect\";\n        /**\n         * The output strength of the SSAO post-process. Default value is 1.0.\n         */\n        this.totalStrength = 1.0;\n        /**\n         * Maximum depth value to still render AO. A smooth falloff makes the dimming more natural, so there will be no abrupt shading change.\n         */\n        this.maxZ = 100.0;\n        /**\n         * In order to save performances, SSAO radius is clamped on close geometry. This ratio changes by how much\n         */\n        this.minZAspect = 0.2;\n        this._samples = 8;\n        this._textureSamples = 1;\n        /**\n         * Force rendering the geometry through geometry buffer\n         */\n        this._forceGeometryBuffer = false;\n        this._expensiveBlur = true;\n        /**\n         * The radius around the analyzed pixel used by the SSAO post-process. Default value is 2.0\n         */\n        this.radius = 2.0;\n        /**\n         * The base color of the SSAO post-process\n         * The final result is \"base + ssao\" between [0, 1]\n         */\n        this.base = 0;\n        this._bits = new Uint32Array(1);\n        this._scene = scene;\n        this._ratio = ratio;\n        this._forceGeometryBuffer = forceGeometryBuffer;\n        if (!this.isSupported) {\n            Logger.Error(\"The current engine does not support SSAO 2.\");\n            return;\n        }\n        const ssaoRatio = this._ratio.ssaoRatio || ratio;\n        const blurRatio = this._ratio.blurRatio || ratio;\n        // Set up assets\n        if (this._forceGeometryBuffer) {\n            scene.enableGeometryBufferRenderer();\n        }\n        else {\n            scene.enablePrePassRenderer();\n        }\n        this._createRandomTexture();\n        this._originalColorPostProcess = new PassPostProcess(\"SSAOOriginalSceneColor\", 1.0, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), undefined, textureType);\n        this._originalColorPostProcess.samples = this.textureSamples;\n        this._createSSAOPostProcess(1.0, textureType);\n        this._createBlurPostProcess(ssaoRatio, blurRatio, textureType);\n        this._createSSAOCombinePostProcess(blurRatio, textureType);\n        // Set up pipeline\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAOOriginalSceneColorEffect, () => {\n            return this._originalColorPostProcess;\n        }, true));\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAORenderEffect, () => {\n            return this._ssaoPostProcess;\n        }, true));\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAOBlurHRenderEffect, () => {\n            return this._blurHPostProcess;\n        }, true));\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAOBlurVRenderEffect, () => {\n            return this._blurVPostProcess;\n        }, true));\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAOCombineRenderEffect, () => {\n            return this._ssaoCombinePostProcess;\n        }, true));\n        // Finish\n        scene.postProcessRenderPipelineManager.addPipeline(this);\n        if (cameras) {\n            scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);\n        }\n    }\n    // Public Methods\n    /**\n     * Get the class name\n     * @returns \"SSAO2RenderingPipeline\"\n     */\n    getClassName() {\n        return \"SSAO2RenderingPipeline\";\n    }\n    /**\n     * Removes the internal pipeline assets and detaches the pipeline from the scene cameras\n     * @param disableGeometryBufferRenderer\n     */\n    dispose(disableGeometryBufferRenderer = false) {\n        for (let i = 0; i < this._scene.cameras.length; i++) {\n            const camera = this._scene.cameras[i];\n            this._originalColorPostProcess.dispose(camera);\n            this._ssaoPostProcess.dispose(camera);\n            this._blurHPostProcess.dispose(camera);\n            this._blurVPostProcess.dispose(camera);\n            this._ssaoCombinePostProcess.dispose(camera);\n        }\n        this._randomTexture.dispose();\n        if (disableGeometryBufferRenderer) {\n            this._scene.disableGeometryBufferRenderer();\n        }\n        this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);\n        super.dispose();\n    }\n    // Private Methods\n    _createBlurPostProcess(ssaoRatio, blurRatio, textureType) {\n        this._samplerOffsets = [];\n        const expensive = this.expensiveBlur;\n        for (let i = -8; i < 8; i++) {\n            this._samplerOffsets.push(i * 2 + 0.5);\n        }\n        this._blurHPostProcess = new PostProcess(\"BlurH\", \"ssao2\", [\"outSize\", \"samplerOffsets\", \"near\", \"far\", \"radius\"], [\"depthSampler\"], ssaoRatio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, \"#define BILATERAL_BLUR\\n#define BILATERAL_BLUR_H\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (expensive ? \"1\" : \"0\") + \"\\n\", textureType);\n        this._blurHPostProcess.onApply = (effect) => {\n            if (!this._scene.activeCamera) {\n                return;\n            }\n            effect.setFloat(\"outSize\", this._ssaoCombinePostProcess.width > 0 ? this._ssaoCombinePostProcess.width : this._originalColorPostProcess.width);\n            effect.setFloat(\"near\", this._scene.activeCamera.minZ);\n            effect.setFloat(\"far\", this._scene.activeCamera.maxZ);\n            effect.setFloat(\"radius\", this.radius);\n            if (this._geometryBufferRenderer) {\n                effect.setTexture(\"depthSampler\", this._geometryBufferRenderer.getGBuffer().textures[0]);\n            }\n            else if (this._prePassRenderer) {\n                effect.setTexture(\"depthSampler\", this._prePassRenderer.getRenderTarget().textures[this._prePassRenderer.getIndex(5)]);\n            }\n            effect.setArray(\"samplerOffsets\", this._samplerOffsets);\n        };\n        this._blurVPostProcess = new PostProcess(\"BlurV\", \"ssao2\", [\"outSize\", \"samplerOffsets\", \"near\", \"far\", \"radius\"], [\"depthSampler\"], blurRatio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, \"#define BILATERAL_BLUR\\n#define BILATERAL_BLUR_V\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (expensive ? \"1\" : \"0\") + \"\\n\", textureType);\n        this._blurVPostProcess.onApply = (effect) => {\n            if (!this._scene.activeCamera) {\n                return;\n            }\n            effect.setFloat(\"outSize\", this._ssaoCombinePostProcess.height > 0 ? this._ssaoCombinePostProcess.height : this._originalColorPostProcess.height);\n            effect.setFloat(\"near\", this._scene.activeCamera.minZ);\n            effect.setFloat(\"far\", this._scene.activeCamera.maxZ);\n            effect.setFloat(\"radius\", this.radius);\n            if (this._geometryBufferRenderer) {\n                effect.setTexture(\"depthSampler\", this._geometryBufferRenderer.getGBuffer().textures[0]);\n            }\n            else if (this._prePassRenderer) {\n                effect.setTexture(\"depthSampler\", this._prePassRenderer.getRenderTarget().textures[this._prePassRenderer.getIndex(5)]);\n            }\n            effect.setArray(\"samplerOffsets\", this._samplerOffsets);\n        };\n        this._blurHPostProcess.samples = this.textureSamples;\n        this._blurVPostProcess.samples = this.textureSamples;\n    }\n    /** @internal */\n    _rebuild() {\n        super._rebuild();\n    }\n    //Van der Corput radical inverse\n    _radicalInverse_VdC(i) {\n        this._bits[0] = i;\n        this._bits[0] = ((this._bits[0] << 16) | (this._bits[0] >> 16)) >>> 0;\n        this._bits[0] = ((this._bits[0] & 0x55555555) << 1) | (((this._bits[0] & 0xaaaaaaaa) >>> 1) >>> 0);\n        this._bits[0] = ((this._bits[0] & 0x33333333) << 2) | (((this._bits[0] & 0xcccccccc) >>> 2) >>> 0);\n        this._bits[0] = ((this._bits[0] & 0x0f0f0f0f) << 4) | (((this._bits[0] & 0xf0f0f0f0) >>> 4) >>> 0);\n        this._bits[0] = ((this._bits[0] & 0x00ff00ff) << 8) | (((this._bits[0] & 0xff00ff00) >>> 8) >>> 0);\n        return this._bits[0] * 2.3283064365386963e-10; // / 0x100000000 or / 4294967296\n    }\n    _hammersley(i, n) {\n        return [i / n, this._radicalInverse_VdC(i)];\n    }\n    _hemisphereSample_uniform(u, v) {\n        const phi = v * 2.0 * Math.PI;\n        // rejecting samples that are close to tangent plane to avoid z-fighting artifacts\n        const cosTheta = 1.0 - u * 0.85;\n        const sinTheta = Math.sqrt(1.0 - cosTheta * cosTheta);\n        return new Vector3(Math.cos(phi) * sinTheta, Math.sin(phi) * sinTheta, cosTheta);\n    }\n    _generateHemisphere() {\n        const numSamples = this.samples;\n        const result = [];\n        let vector;\n        let i = 0;\n        while (i < numSamples) {\n            if (numSamples < 16) {\n                vector = this._hemisphereSample_uniform(Math.random(), Math.random());\n            }\n            else {\n                const rand = this._hammersley(i, numSamples);\n                vector = this._hemisphereSample_uniform(rand[0], rand[1]);\n            }\n            result.push(vector.x, vector.y, vector.z);\n            i++;\n        }\n        return result;\n    }\n    _getDefinesForSSAO() {\n        const defines = \"#define SAMPLES \" + this.samples + \"\\n#define SSAO\";\n        return defines;\n    }\n    _createSSAOPostProcess(ratio, textureType) {\n        this._sampleSphere = this._generateHemisphere();\n        const defines = this._getDefinesForSSAO();\n        const samplers = [\"randomSampler\", \"depthSampler\", \"normalSampler\"];\n        this._ssaoPostProcess = new PostProcess(\"ssao2\", \"ssao2\", [\n            \"sampleSphere\",\n            \"samplesFactor\",\n            \"randTextureTiles\",\n            \"totalStrength\",\n            \"radius\",\n            \"base\",\n            \"range\",\n            \"projection\",\n            \"near\",\n            \"far\",\n            \"texelSize\",\n            \"xViewport\",\n            \"yViewport\",\n            \"maxZ\",\n            \"minZAspect\",\n            \"depthProjection\",\n        ], samplers, ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, defines, textureType);\n        this._ssaoPostProcess.onApply = (effect) => {\n            var _a, _b, _c, _d;\n            if (!this._scene.activeCamera) {\n                return;\n            }\n            effect.setArray3(\"sampleSphere\", this._sampleSphere);\n            effect.setFloat(\"randTextureTiles\", 32.0);\n            effect.setFloat(\"samplesFactor\", 1 / this.samples);\n            effect.setFloat(\"totalStrength\", this.totalStrength);\n            effect.setFloat2(\"texelSize\", 1 / this._ssaoPostProcess.width, 1 / this._ssaoPostProcess.height);\n            effect.setFloat(\"radius\", this.radius);\n            effect.setFloat(\"maxZ\", this.maxZ);\n            effect.setFloat(\"minZAspect\", this.minZAspect);\n            effect.setFloat(\"base\", this.base);\n            effect.setFloat(\"near\", this._scene.activeCamera.minZ);\n            effect.setFloat(\"far\", this._scene.activeCamera.maxZ);\n            if (this._scene.activeCamera.mode === Camera.PERSPECTIVE_CAMERA) {\n                effect.setMatrix3x3(\"depthProjection\", SSAO2RenderingPipeline.PERSPECTIVE_DEPTH_PROJECTION);\n                effect.setFloat(\"xViewport\", Math.tan(this._scene.activeCamera.fov / 2) * this._scene.getEngine().getAspectRatio(this._scene.activeCamera, true));\n                effect.setFloat(\"yViewport\", Math.tan(this._scene.activeCamera.fov / 2));\n            }\n            else {\n                const halfWidth = this._scene.getEngine().getRenderWidth() / 2.0;\n                const halfHeight = this._scene.getEngine().getRenderHeight() / 2.0;\n                const orthoLeft = (_a = this._scene.activeCamera.orthoLeft) !== null && _a !== void 0 ? _a : -halfWidth;\n                const orthoRight = (_b = this._scene.activeCamera.orthoRight) !== null && _b !== void 0 ? _b : halfWidth;\n                const orthoBottom = (_c = this._scene.activeCamera.orthoBottom) !== null && _c !== void 0 ? _c : -halfHeight;\n                const orthoTop = (_d = this._scene.activeCamera.orthoTop) !== null && _d !== void 0 ? _d : halfHeight;\n                effect.setMatrix3x3(\"depthProjection\", SSAO2RenderingPipeline.ORTHO_DEPTH_PROJECTION);\n                effect.setFloat(\"xViewport\", (orthoRight - orthoLeft) * 0.5);\n                effect.setFloat(\"yViewport\", (orthoTop - orthoBottom) * 0.5);\n            }\n            effect.setMatrix(\"projection\", this._scene.getProjectionMatrix());\n            if (this._geometryBufferRenderer) {\n                effect.setTexture(\"depthSampler\", this._geometryBufferRenderer.getGBuffer().textures[0]);\n                effect.setTexture(\"normalSampler\", this._geometryBufferRenderer.getGBuffer().textures[1]);\n            }\n            else if (this._prePassRenderer) {\n                effect.setTexture(\"depthSampler\", this._prePassRenderer.getRenderTarget().textures[this._prePassRenderer.getIndex(5)]);\n                effect.setTexture(\"normalSampler\", this._prePassRenderer.getRenderTarget().textures[this._prePassRenderer.getIndex(6)]);\n            }\n            effect.setTexture(\"randomSampler\", this._randomTexture);\n        };\n        this._ssaoPostProcess.samples = this.textureSamples;\n        if (!this._forceGeometryBuffer) {\n            this._ssaoPostProcess._prePassEffectConfiguration = new SSAO2Configuration();\n        }\n    }\n    _createSSAOCombinePostProcess(ratio, textureType) {\n        this._ssaoCombinePostProcess = new PostProcess(\"ssaoCombine\", \"ssaoCombine\", [], [\"originalColor\", \"viewport\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, undefined, textureType);\n        this._ssaoCombinePostProcess.onApply = (effect) => {\n            const viewport = this._scene.activeCamera.viewport;\n            effect.setVector4(\"viewport\", TmpVectors.Vector4[0].copyFromFloats(viewport.x, viewport.y, viewport.width, viewport.height));\n            effect.setTextureFromPostProcessOutput(\"originalColor\", this._originalColorPostProcess);\n        };\n        this._ssaoCombinePostProcess.samples = this.textureSamples;\n    }\n    _createRandomTexture() {\n        const size = 128;\n        this._randomTexture = new DynamicTexture(\"SSAORandomTexture\", size, this._scene, false, Texture.TRILINEAR_SAMPLINGMODE);\n        this._randomTexture.wrapU = Texture.WRAP_ADDRESSMODE;\n        this._randomTexture.wrapV = Texture.WRAP_ADDRESSMODE;\n        const context = this._randomTexture.getContext();\n        const rand = (min, max) => {\n            return Math.random() * (max - min) + min;\n        };\n        const randVector = Vector3.Zero();\n        for (let x = 0; x < size; x++) {\n            for (let y = 0; y < size; y++) {\n                randVector.x = rand(0.0, 1.0);\n                randVector.y = rand(0.0, 1.0);\n                randVector.z = 0.0;\n                randVector.normalize();\n                randVector.scaleInPlace(255);\n                randVector.x = Math.floor(randVector.x);\n                randVector.y = Math.floor(randVector.y);\n                context.fillStyle = \"rgb(\" + randVector.x + \", \" + randVector.y + \", \" + randVector.z + \")\";\n                context.fillRect(x, y, 1, 1);\n            }\n        }\n        this._randomTexture.update(false);\n    }\n    /**\n     * Serialize the rendering pipeline (Used when exporting)\n     * @returns the serialized object\n     */\n    serialize() {\n        const serializationObject = SerializationHelper.Serialize(this);\n        serializationObject.customType = \"SSAO2RenderingPipeline\";\n        return serializationObject;\n    }\n    /**\n     * Parse the serialized pipeline\n     * @param source Source pipeline.\n     * @param scene The scene to load the pipeline to.\n     * @param rootUrl The URL of the serialized pipeline.\n     * @returns An instantiated pipeline from the serialized object.\n     */\n    static Parse(source, scene, rootUrl) {\n        return SerializationHelper.Parse(() => new SSAO2RenderingPipeline(source._name, scene, source._ratio), source, scene, rootUrl);\n    }\n}\nSSAO2RenderingPipeline.ORTHO_DEPTH_PROJECTION = [1, 0, 0, 0, 1, 0, 0, 0, 1];\nSSAO2RenderingPipeline.PERSPECTIVE_DEPTH_PROJECTION = [0, 0, 0, 0, 0, 0, 1, 1, 1];\n__decorate([\n    serialize()\n], SSAO2RenderingPipeline.prototype, \"totalStrength\", void 0);\n__decorate([\n    serialize()\n], SSAO2RenderingPipeline.prototype, \"maxZ\", void 0);\n__decorate([\n    serialize()\n], SSAO2RenderingPipeline.prototype, \"minZAspect\", void 0);\n__decorate([\n    serialize(\"samples\")\n], SSAO2RenderingPipeline.prototype, \"_samples\", void 0);\n__decorate([\n    serialize(\"textureSamples\")\n], SSAO2RenderingPipeline.prototype, \"_textureSamples\", void 0);\n__decorate([\n    serialize()\n], SSAO2RenderingPipeline.prototype, \"_ratio\", void 0);\n__decorate([\n    serialize(\"expensiveBlur\")\n], SSAO2RenderingPipeline.prototype, \"_expensiveBlur\", void 0);\n__decorate([\n    serialize()\n], SSAO2RenderingPipeline.prototype, \"radius\", void 0);\n__decorate([\n    serialize()\n], SSAO2RenderingPipeline.prototype, \"base\", void 0);\nRegisterClass(\"BABYLON.SSAO2RenderingPipeline\", SSAO2RenderingPipeline);\n//# sourceMappingURL=ssao2RenderingPipeline.js.map","import { __decorate } from \"../../../tslib.es6.js\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { Vector2, Vector3, TmpVectors } from \"../../../Maths/math.vector.js\";\nimport { Texture } from \"../../../Materials/Textures/texture.js\";\nimport { DynamicTexture } from \"../../../Materials/Textures/dynamicTexture.js\";\nimport { PostProcess } from \"../../../PostProcesses/postProcess.js\";\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline.js\";\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect.js\";\nimport { PassPostProcess } from \"../../../PostProcesses/passPostProcess.js\";\nimport { BlurPostProcess } from \"../../../PostProcesses/blurPostProcess.js\";\n\nimport { serialize } from \"../../../Misc/decorators.js\";\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent.js\";\nimport \"../../../Shaders/ssao.fragment.js\";\nimport \"../../../Shaders/ssaoCombine.fragment.js\";\n/**\n * Render pipeline to produce ssao effect\n */\nexport class SSAORenderingPipeline extends PostProcessRenderPipeline {\n    /**\n     * Gets active scene\n     */\n    get scene() {\n        return this._scene;\n    }\n    /**\n     * @constructor\n     * @param name - The rendering pipeline name\n     * @param scene - The scene linked to this pipeline\n     * @param ratio - The size of the postprocesses. Can be a number shared between passes or an object for more precision: { ssaoRatio: 0.5, combineRatio: 1.0 }\n     * @param cameras - The array of cameras that the rendering pipeline will be attached to\n     */\n    constructor(name, scene, ratio, cameras) {\n        super(scene.getEngine(), name);\n        // Members\n        /**\n         * @ignore\n         * The PassPostProcess id in the pipeline that contains the original scene color\n         */\n        this.SSAOOriginalSceneColorEffect = \"SSAOOriginalSceneColorEffect\";\n        /**\n         * @ignore\n         * The SSAO PostProcess id in the pipeline\n         */\n        this.SSAORenderEffect = \"SSAORenderEffect\";\n        /**\n         * @ignore\n         * The horizontal blur PostProcess id in the pipeline\n         */\n        this.SSAOBlurHRenderEffect = \"SSAOBlurHRenderEffect\";\n        /**\n         * @ignore\n         * The vertical blur PostProcess id in the pipeline\n         */\n        this.SSAOBlurVRenderEffect = \"SSAOBlurVRenderEffect\";\n        /**\n         * @ignore\n         * The PostProcess id in the pipeline that combines the SSAO-Blur output with the original scene color (SSAOOriginalSceneColorEffect)\n         */\n        this.SSAOCombineRenderEffect = \"SSAOCombineRenderEffect\";\n        /**\n         * The output strength of the SSAO post-process. Default value is 1.0.\n         */\n        this.totalStrength = 1.0;\n        /**\n         * The radius around the analyzed pixel used by the SSAO post-process. Default value is 0.0006\n         */\n        this.radius = 0.0001;\n        /**\n         * Related to fallOff, used to interpolate SSAO samples (first interpolate function input) based on the occlusion difference of each pixel\n         * Must not be equal to fallOff and superior to fallOff.\n         * Default value is 0.0075\n         */\n        this.area = 0.0075;\n        /**\n         * Related to area, used to interpolate SSAO samples (second interpolate function input) based on the occlusion difference of each pixel\n         * Must not be equal to area and inferior to area.\n         * Default value is 0.000001\n         */\n        this.fallOff = 0.000001;\n        /**\n         * The base color of the SSAO post-process\n         * The final result is \"base + ssao\" between [0, 1]\n         */\n        this.base = 0.5;\n        this._firstUpdate = true;\n        this._scene = scene;\n        // Set up assets\n        this._createRandomTexture();\n        const ssaoRatio = ratio.ssaoRatio || ratio;\n        const combineRatio = ratio.combineRatio || ratio;\n        this._originalColorPostProcess = new PassPostProcess(\"SSAOOriginalSceneColor\", combineRatio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false);\n        this._createSSAOPostProcess(ssaoRatio);\n        this._createBlurPostProcess(ssaoRatio);\n        this._createSSAOCombinePostProcess(combineRatio);\n        // Set up pipeline\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAOOriginalSceneColorEffect, () => {\n            return this._originalColorPostProcess;\n        }, true));\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAORenderEffect, () => {\n            return this._ssaoPostProcess;\n        }, true));\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAOBlurHRenderEffect, () => {\n            return this._blurHPostProcess;\n        }, true));\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAOBlurVRenderEffect, () => {\n            return this._blurVPostProcess;\n        }, true));\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAOCombineRenderEffect, () => {\n            return this._ssaoCombinePostProcess;\n        }, true));\n        // Finish\n        scene.postProcessRenderPipelineManager.addPipeline(this);\n        if (cameras) {\n            scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);\n        }\n    }\n    /**\n     * @internal\n     */\n    _attachCameras(cameras, unique) {\n        super._attachCameras(cameras, unique);\n        for (const camera of this._cameras) {\n            this._scene.enableDepthRenderer(camera).getDepthMap(); // Force depth renderer \"on\"\n        }\n    }\n    // Public Methods\n    /**\n     * Get the class name\n     * @returns \"SSAORenderingPipeline\"\n     */\n    getClassName() {\n        return \"SSAORenderingPipeline\";\n    }\n    /**\n     * Removes the internal pipeline assets and detaches the pipeline from the scene cameras\n     * @param disableDepthRender\n     */\n    dispose(disableDepthRender = false) {\n        for (let i = 0; i < this._scene.cameras.length; i++) {\n            const camera = this._scene.cameras[i];\n            this._originalColorPostProcess.dispose(camera);\n            this._ssaoPostProcess.dispose(camera);\n            this._blurHPostProcess.dispose(camera);\n            this._blurVPostProcess.dispose(camera);\n            this._ssaoCombinePostProcess.dispose(camera);\n        }\n        this._randomTexture.dispose();\n        if (disableDepthRender) {\n            this._scene.disableDepthRenderer();\n        }\n        this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);\n        super.dispose();\n    }\n    // Private Methods\n    _createBlurPostProcess(ratio) {\n        const size = 16;\n        this._blurHPostProcess = new BlurPostProcess(\"BlurH\", new Vector2(1, 0), size, ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, 0);\n        this._blurVPostProcess = new BlurPostProcess(\"BlurV\", new Vector2(0, 1), size, ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, 0);\n        this._blurHPostProcess.onActivateObservable.add(() => {\n            const dw = this._blurHPostProcess.width / this._scene.getEngine().getRenderWidth();\n            this._blurHPostProcess.kernel = size * dw;\n        });\n        this._blurVPostProcess.onActivateObservable.add(() => {\n            const dw = this._blurVPostProcess.height / this._scene.getEngine().getRenderHeight();\n            this._blurVPostProcess.kernel = size * dw;\n        });\n    }\n    /** @internal */\n    _rebuild() {\n        this._firstUpdate = true;\n        super._rebuild();\n    }\n    _createSSAOPostProcess(ratio) {\n        const numSamples = 16;\n        const sampleSphere = [\n            0.5381, 0.1856, -0.4319, 0.1379, 0.2486, 0.443, 0.3371, 0.5679, -0.0057, -0.6999, -0.0451, -0.0019, 0.0689, -0.1598, -0.8547, 0.056, 0.0069, -0.1843, -0.0146, 0.1402,\n            0.0762, 0.01, -0.1924, -0.0344, -0.3577, -0.5301, -0.4358, -0.3169, 0.1063, 0.0158, 0.0103, -0.5869, 0.0046, -0.0897, -0.494, 0.3287, 0.7119, -0.0154, -0.0918, -0.0533,\n            0.0596, -0.5411, 0.0352, -0.0631, 0.546, -0.4776, 0.2847, -0.0271,\n        ];\n        const samplesFactor = 1.0 / numSamples;\n        this._ssaoPostProcess = new PostProcess(\"ssao\", \"ssao\", [\"sampleSphere\", \"samplesFactor\", \"randTextureTiles\", \"totalStrength\", \"radius\", \"area\", \"fallOff\", \"base\", \"range\", \"viewport\"], [\"randomSampler\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, \"#define SAMPLES \" + numSamples + \"\\n#define SSAO\");\n        this._ssaoPostProcess.externalTextureSamplerBinding = true;\n        this._ssaoPostProcess.onApply = (effect) => {\n            if (this._firstUpdate) {\n                effect.setArray3(\"sampleSphere\", sampleSphere);\n                effect.setFloat(\"samplesFactor\", samplesFactor);\n                effect.setFloat(\"randTextureTiles\", 4.0);\n            }\n            effect.setFloat(\"totalStrength\", this.totalStrength);\n            effect.setFloat(\"radius\", this.radius);\n            effect.setFloat(\"area\", this.area);\n            effect.setFloat(\"fallOff\", this.fallOff);\n            effect.setFloat(\"base\", this.base);\n            effect.setTexture(\"textureSampler\", this._scene.enableDepthRenderer(this._scene.activeCamera).getDepthMap());\n            effect.setTexture(\"randomSampler\", this._randomTexture);\n        };\n    }\n    _createSSAOCombinePostProcess(ratio) {\n        this._ssaoCombinePostProcess = new PostProcess(\"ssaoCombine\", \"ssaoCombine\", [], [\"originalColor\", \"viewport\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false);\n        this._ssaoCombinePostProcess.onApply = (effect) => {\n            effect.setVector4(\"viewport\", TmpVectors.Vector4[0].copyFromFloats(0, 0, 1.0, 1.0));\n            effect.setTextureFromPostProcess(\"originalColor\", this._originalColorPostProcess);\n        };\n    }\n    _createRandomTexture() {\n        const size = 512;\n        this._randomTexture = new DynamicTexture(\"SSAORandomTexture\", size, this._scene, false, Texture.TRILINEAR_SAMPLINGMODE);\n        this._randomTexture.wrapU = Texture.WRAP_ADDRESSMODE;\n        this._randomTexture.wrapV = Texture.WRAP_ADDRESSMODE;\n        const context = this._randomTexture.getContext();\n        const rand = (min, max) => {\n            return Math.random() * (max - min) + min;\n        };\n        const randVector = Vector3.Zero();\n        for (let x = 0; x < size; x++) {\n            for (let y = 0; y < size; y++) {\n                randVector.x = Math.floor(Math.max(0.0, rand(-1.0, 1.0)) * 255);\n                randVector.y = Math.floor(Math.max(0.0, rand(-1.0, 1.0)) * 255);\n                randVector.z = Math.floor(Math.max(0.0, rand(-1.0, 1.0)) * 255);\n                context.fillStyle = \"rgb(\" + randVector.x + \", \" + randVector.y + \", \" + randVector.z + \")\";\n                context.fillRect(x, y, 1, 1);\n            }\n        }\n        this._randomTexture.update(false);\n    }\n}\n__decorate([\n    serialize()\n], SSAORenderingPipeline.prototype, \"totalStrength\", void 0);\n__decorate([\n    serialize()\n], SSAORenderingPipeline.prototype, \"radius\", void 0);\n__decorate([\n    serialize()\n], SSAORenderingPipeline.prototype, \"area\", void 0);\n__decorate([\n    serialize()\n], SSAORenderingPipeline.prototype, \"fallOff\", void 0);\n__decorate([\n    serialize()\n], SSAORenderingPipeline.prototype, \"base\", void 0);\n//# sourceMappingURL=ssaoRenderingPipeline.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { PostProcess } from \"./postProcess.js\";\n\nimport { GeometryBufferRenderer } from \"../Rendering/geometryBufferRenderer.js\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\nimport { ScreenSpaceReflectionsConfiguration } from \"../Rendering/screenSpaceReflectionsConfiguration.js\";\nimport \"../Shaders/screenSpaceReflection.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\n/**\n * The ScreenSpaceReflectionPostProcess performs realtime reflections using only and only the available informations on the screen (positions and normals).\n * Basically, the screen space reflection post-process will compute reflections according the material's reflectivity.\n * @deprecated Use the new SSRRenderingPipeline instead.\n */\nexport class ScreenSpaceReflectionPostProcess extends PostProcess {\n    get _geometryBufferRenderer() {\n        if (!this._forceGeometryBuffer) {\n            return null;\n        }\n        return this._scene.geometryBufferRenderer;\n    }\n    get _prePassRenderer() {\n        if (this._forceGeometryBuffer) {\n            return null;\n        }\n        return this._scene.prePassRenderer;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"ScreenSpaceReflectionPostProcess\" string\n     */\n    getClassName() {\n        return \"ScreenSpaceReflectionPostProcess\";\n    }\n    /**\n     * Creates a new instance of ScreenSpaceReflectionPostProcess.\n     * @param name The name of the effect.\n     * @param scene The scene containing the objects to calculate reflections.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: true)\n     * @param forceGeometryBuffer If this post process should use geometry buffer instead of prepass (default: false)\n     */\n    constructor(name, scene, options, camera, samplingMode, engine, reusable, textureType = 0, blockCompilation = false, forceGeometryBuffer = false) {\n        super(name, \"screenSpaceReflection\", [\"projection\", \"view\", \"threshold\", \"reflectionSpecularFalloffExponent\", \"strength\", \"stepSize\", \"roughnessFactor\"], [\"textureSampler\", \"normalSampler\", \"positionSampler\", \"reflectivitySampler\"], options, camera, samplingMode, engine, reusable, \"#define SSR_SUPPORTED\\n#define REFLECTION_SAMPLES 64\\n#define SMOOTH_STEPS 5\\n\", textureType, undefined, null, blockCompilation);\n        /**\n         * Gets or sets a reflection threshold mainly used to adjust the reflection's height.\n         */\n        this.threshold = 1.2;\n        /**\n         * Gets or sets the current reflection strength. 1.0 is an ideal value but can be increased/decreased for particular results.\n         */\n        this.strength = 1;\n        /**\n         * Gets or sets the falloff exponent used while computing fresnel. More the exponent is high, more the reflections will be discrete.\n         */\n        this.reflectionSpecularFalloffExponent = 3;\n        /**\n         * Gets or sets the step size used to iterate until the effect finds the color of the reflection's pixel. Typically in interval [0.1, 1.0]\n         */\n        this.step = 1.0;\n        /**\n         * Gets or sets the factor applied when computing roughness. Default value is 0.2.\n         */\n        this.roughnessFactor = 0.2;\n        this._forceGeometryBuffer = false;\n        this._enableSmoothReflections = false;\n        this._reflectionSamples = 64;\n        this._smoothSteps = 5;\n        this._forceGeometryBuffer = forceGeometryBuffer;\n        if (this._forceGeometryBuffer) {\n            // Get geometry buffer renderer and update effect\n            const geometryBufferRenderer = scene.enableGeometryBufferRenderer();\n            if (geometryBufferRenderer) {\n                if (geometryBufferRenderer.isSupported) {\n                    geometryBufferRenderer.enablePosition = true;\n                    geometryBufferRenderer.enableReflectivity = true;\n                }\n            }\n        }\n        else {\n            const prePassRenderer = scene.enablePrePassRenderer();\n            prePassRenderer === null || prePassRenderer === void 0 ? void 0 : prePassRenderer.markAsDirty();\n            this._prePassEffectConfiguration = new ScreenSpaceReflectionsConfiguration();\n        }\n        this._updateEffectDefines();\n        // On apply, send uniforms\n        this.onApply = (effect) => {\n            const geometryBufferRenderer = this._geometryBufferRenderer;\n            const prePassRenderer = this._prePassRenderer;\n            if (!prePassRenderer && !geometryBufferRenderer) {\n                return;\n            }\n            if (geometryBufferRenderer) {\n                // Samplers\n                const positionIndex = geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.POSITION_TEXTURE_TYPE);\n                const roughnessIndex = geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE);\n                effect.setTexture(\"normalSampler\", geometryBufferRenderer.getGBuffer().textures[1]);\n                effect.setTexture(\"positionSampler\", geometryBufferRenderer.getGBuffer().textures[positionIndex]);\n                effect.setTexture(\"reflectivitySampler\", geometryBufferRenderer.getGBuffer().textures[roughnessIndex]);\n            }\n            else if (prePassRenderer) {\n                // Samplers\n                const positionIndex = prePassRenderer.getIndex(1);\n                const roughnessIndex = prePassRenderer.getIndex(3);\n                const normalIndex = prePassRenderer.getIndex(6);\n                effect.setTexture(\"normalSampler\", prePassRenderer.getRenderTarget().textures[normalIndex]);\n                effect.setTexture(\"positionSampler\", prePassRenderer.getRenderTarget().textures[positionIndex]);\n                effect.setTexture(\"reflectivitySampler\", prePassRenderer.getRenderTarget().textures[roughnessIndex]);\n            }\n            // Uniforms\n            const camera = scene.activeCamera;\n            if (!camera) {\n                return;\n            }\n            const viewMatrix = camera.getViewMatrix(true);\n            const projectionMatrix = camera.getProjectionMatrix(true);\n            effect.setMatrix(\"projection\", projectionMatrix);\n            effect.setMatrix(\"view\", viewMatrix);\n            effect.setFloat(\"threshold\", this.threshold);\n            effect.setFloat(\"reflectionSpecularFalloffExponent\", this.reflectionSpecularFalloffExponent);\n            effect.setFloat(\"strength\", this.strength);\n            effect.setFloat(\"stepSize\", this.step);\n            effect.setFloat(\"roughnessFactor\", this.roughnessFactor);\n        };\n        this._isSceneRightHanded = scene.useRightHandedSystem;\n    }\n    /**\n     * Gets whether or not smoothing reflections is enabled.\n     * Enabling smoothing will require more GPU power and can generate a drop in FPS.\n     */\n    get enableSmoothReflections() {\n        return this._enableSmoothReflections;\n    }\n    /**\n     * Sets whether or not smoothing reflections is enabled.\n     * Enabling smoothing will require more GPU power and can generate a drop in FPS.\n     */\n    set enableSmoothReflections(enabled) {\n        if (enabled === this._enableSmoothReflections) {\n            return;\n        }\n        this._enableSmoothReflections = enabled;\n        this._updateEffectDefines();\n    }\n    /**\n     * Gets the number of samples taken while computing reflections. More samples count is high,\n     * more the post-process wil require GPU power and can generate a drop in FPS. Basically in interval [25, 100].\n     */\n    get reflectionSamples() {\n        return this._reflectionSamples;\n    }\n    /**\n     * Sets the number of samples taken while computing reflections. More samples count is high,\n     * more the post-process wil require GPU power and can generate a drop in FPS. Basically in interval [25, 100].\n     */\n    set reflectionSamples(samples) {\n        if (samples === this._reflectionSamples) {\n            return;\n        }\n        this._reflectionSamples = samples;\n        this._updateEffectDefines();\n    }\n    /**\n     * Gets the number of samples taken while smoothing reflections. More samples count is high,\n     * more the post-process will require GPU power and can generate a drop in FPS.\n     * Default value (5.0) work pretty well in all cases but can be adjusted.\n     */\n    get smoothSteps() {\n        return this._smoothSteps;\n    }\n    /*\n     * Sets the number of samples taken while smoothing reflections. More samples count is high,\n     * more the post-process will require GPU power and can generate a drop in FPS.\n     * Default value (5.0) work pretty well in all cases but can be adjusted.\n     */\n    set smoothSteps(steps) {\n        if (steps === this._smoothSteps) {\n            return;\n        }\n        this._smoothSteps = steps;\n        this._updateEffectDefines();\n    }\n    _updateEffectDefines() {\n        const defines = [];\n        if (this._geometryBufferRenderer || this._prePassRenderer) {\n            defines.push(\"#define SSR_SUPPORTED\");\n        }\n        if (this._enableSmoothReflections) {\n            defines.push(\"#define ENABLE_SMOOTH_REFLECTIONS\");\n        }\n        if (this._isSceneRightHanded) {\n            defines.push(\"#define RIGHT_HANDED_SCENE\");\n        }\n        defines.push(\"#define REFLECTION_SAMPLES \" + (this._reflectionSamples >> 0));\n        defines.push(\"#define SMOOTH_STEPS \" + (this._smoothSteps >> 0));\n        this.updateEffect(defines.join(\"\\n\"));\n    }\n    /**\n     * @internal\n     */\n    static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(() => {\n            return new ScreenSpaceReflectionPostProcess(parsedPostProcess.name, scene, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.textureType, parsedPostProcess.reusable);\n        }, parsedPostProcess, scene, rootUrl);\n    }\n}\n__decorate([\n    serialize()\n], ScreenSpaceReflectionPostProcess.prototype, \"threshold\", void 0);\n__decorate([\n    serialize()\n], ScreenSpaceReflectionPostProcess.prototype, \"strength\", void 0);\n__decorate([\n    serialize()\n], ScreenSpaceReflectionPostProcess.prototype, \"reflectionSpecularFalloffExponent\", void 0);\n__decorate([\n    serialize()\n], ScreenSpaceReflectionPostProcess.prototype, \"step\", void 0);\n__decorate([\n    serialize()\n], ScreenSpaceReflectionPostProcess.prototype, \"roughnessFactor\", void 0);\n__decorate([\n    serialize()\n], ScreenSpaceReflectionPostProcess.prototype, \"enableSmoothReflections\", null);\n__decorate([\n    serialize()\n], ScreenSpaceReflectionPostProcess.prototype, \"reflectionSamples\", null);\n__decorate([\n    serialize()\n], ScreenSpaceReflectionPostProcess.prototype, \"smoothSteps\", null);\nRegisterClass(\"BABYLON.ScreenSpaceReflectionPostProcess\", ScreenSpaceReflectionPostProcess);\n//# sourceMappingURL=screenSpaceReflectionPostProcess.js.map","import { __decorate } from \"../../../tslib.es6.js\";\nimport { serialize, serializeAsTexture, SerializationHelper } from \"../../../Misc/decorators.js\";\nimport { Logger } from \"../../../Misc/logger.js\";\nimport { Vector2, Vector3, Matrix, Vector4 } from \"../../../Maths/math.vector.js\";\nimport { Scalar } from \"../../../Maths/math.scalar.js\";\nimport { Texture } from \"../../../Materials/Textures/texture.js\";\nimport { PostProcess } from \"../../../PostProcesses/postProcess.js\";\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline.js\";\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect.js\";\nimport { BlurPostProcess } from \"../../../PostProcesses/blurPostProcess.js\";\nimport { FxaaPostProcess } from \"../../../PostProcesses/fxaaPostProcess.js\";\n\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { MotionBlurPostProcess } from \"../../motionBlurPostProcess.js\";\nimport { ScreenSpaceReflectionPostProcess } from \"../../screenSpaceReflectionPostProcess.js\";\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent.js\";\nimport \"../../../Shaders/standard.fragment.js\";\n/**\n * Standard rendering pipeline\n * Default pipeline should be used going forward but the standard pipeline will be kept for backwards compatibility.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/standardRenderingPipeline\n */\nexport class StandardRenderingPipeline extends PostProcessRenderPipeline {\n    /**\n     * Gets the overall exposure used by the pipeline\n     */\n    get exposure() {\n        return this._fixedExposure;\n    }\n    /**\n     * Sets the overall exposure used by the pipeline\n     */\n    set exposure(value) {\n        this._fixedExposure = value;\n        this._currentExposure = value;\n    }\n    /**\n     * Gets whether or not the exposure of the overall pipeline should be automatically adjusted by the HDR post-process\n     */\n    get hdrAutoExposure() {\n        return this._hdrAutoExposure;\n    }\n    /**\n     * Sets whether or not the exposure of the overall pipeline should be automatically adjusted by the HDR post-process\n     */\n    set hdrAutoExposure(value) {\n        this._hdrAutoExposure = value;\n        if (this.hdrPostProcess) {\n            const defines = [\"#define HDR\"];\n            if (value) {\n                defines.push(\"#define AUTO_EXPOSURE\");\n            }\n            this.hdrPostProcess.updateEffect(defines.join(\"\\n\"));\n        }\n    }\n    /**\n     * Gets how much the image is blurred by the movement while using the motion blur post-process\n     */\n    get motionStrength() {\n        return this._motionStrength;\n    }\n    /**\n     * Sets how much the image is blurred by the movement while using the motion blur post-process\n     */\n    set motionStrength(strength) {\n        this._motionStrength = strength;\n        if (this._isObjectBasedMotionBlur && this.motionBlurPostProcess) {\n            this.motionBlurPostProcess.motionStrength = strength;\n        }\n    }\n    /**\n     * Gets whether or not the motion blur post-process is object based or screen based.\n     */\n    get objectBasedMotionBlur() {\n        return this._isObjectBasedMotionBlur;\n    }\n    /**\n     * Sets whether or not the motion blur post-process should be object based or screen based\n     */\n    set objectBasedMotionBlur(value) {\n        const shouldRebuild = this._isObjectBasedMotionBlur !== value;\n        this._isObjectBasedMotionBlur = value;\n        if (shouldRebuild) {\n            this._buildPipeline();\n        }\n    }\n    /**\n     * @ignore\n     * Specifies if the bloom pipeline is enabled\n     */\n    get BloomEnabled() {\n        return this._bloomEnabled;\n    }\n    set BloomEnabled(enabled) {\n        if (this._bloomEnabled === enabled) {\n            return;\n        }\n        this._bloomEnabled = enabled;\n        this._buildPipeline();\n    }\n    /**\n     * @ignore\n     * Specifies if the depth of field pipeline is enabled\n     */\n    get DepthOfFieldEnabled() {\n        return this._depthOfFieldEnabled;\n    }\n    set DepthOfFieldEnabled(enabled) {\n        if (this._depthOfFieldEnabled === enabled) {\n            return;\n        }\n        this._depthOfFieldEnabled = enabled;\n        this._buildPipeline();\n    }\n    /**\n     * @ignore\n     * Specifies if the lens flare pipeline is enabled\n     */\n    get LensFlareEnabled() {\n        return this._lensFlareEnabled;\n    }\n    set LensFlareEnabled(enabled) {\n        if (this._lensFlareEnabled === enabled) {\n            return;\n        }\n        this._lensFlareEnabled = enabled;\n        this._buildPipeline();\n    }\n    /**\n     * @ignore\n     * Specifies if the HDR pipeline is enabled\n     */\n    get HDREnabled() {\n        return this._hdrEnabled;\n    }\n    set HDREnabled(enabled) {\n        if (this._hdrEnabled === enabled) {\n            return;\n        }\n        this._hdrEnabled = enabled;\n        this._buildPipeline();\n    }\n    /**\n     * @ignore\n     * Specifies if the volumetric lights scattering effect is enabled\n     */\n    get VLSEnabled() {\n        return this._vlsEnabled;\n    }\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    set VLSEnabled(enabled) {\n        if (this._vlsEnabled === enabled) {\n            return;\n        }\n        if (enabled) {\n            const geometry = this._scene.enableGeometryBufferRenderer();\n            if (!geometry) {\n                Logger.Warn(\"Geometry renderer is not supported, cannot create volumetric lights in Standard Rendering Pipeline\");\n                return;\n            }\n        }\n        this._vlsEnabled = enabled;\n        this._buildPipeline();\n    }\n    /**\n     * @ignore\n     * Specifies if the motion blur effect is enabled\n     */\n    get MotionBlurEnabled() {\n        return this._motionBlurEnabled;\n    }\n    set MotionBlurEnabled(enabled) {\n        if (this._motionBlurEnabled === enabled) {\n            return;\n        }\n        this._motionBlurEnabled = enabled;\n        this._buildPipeline();\n    }\n    /**\n     * Specifies if anti-aliasing is enabled\n     */\n    get fxaaEnabled() {\n        return this._fxaaEnabled;\n    }\n    set fxaaEnabled(enabled) {\n        if (this._fxaaEnabled === enabled) {\n            return;\n        }\n        this._fxaaEnabled = enabled;\n        this._buildPipeline();\n    }\n    /**\n     * Specifies if screen space reflections are enabled.\n     */\n    get screenSpaceReflectionsEnabled() {\n        return this._screenSpaceReflectionsEnabled;\n    }\n    set screenSpaceReflectionsEnabled(enabled) {\n        if (this._screenSpaceReflectionsEnabled === enabled) {\n            return;\n        }\n        this._screenSpaceReflectionsEnabled = enabled;\n        this._buildPipeline();\n    }\n    /**\n     * Specifies the number of steps used to calculate the volumetric lights\n     * Typically in interval [50, 200]\n     */\n    get volumetricLightStepsCount() {\n        return this._volumetricLightStepsCount;\n    }\n    set volumetricLightStepsCount(count) {\n        if (this.volumetricLightPostProcess) {\n            this.volumetricLightPostProcess.updateEffect(\"#define VLS\\n#define NB_STEPS \" + count.toFixed(1));\n        }\n        this._volumetricLightStepsCount = count;\n    }\n    /**\n     * Specifies the number of samples used for the motion blur effect\n     * Typically in interval [16, 64]\n     */\n    get motionBlurSamples() {\n        return this._motionBlurSamples;\n    }\n    set motionBlurSamples(samples) {\n        if (this.motionBlurPostProcess) {\n            if (this._isObjectBasedMotionBlur) {\n                this.motionBlurPostProcess.motionBlurSamples = samples;\n            }\n            else {\n                this.motionBlurPostProcess.updateEffect(\"#define MOTION_BLUR\\n#define MAX_MOTION_SAMPLES \" + samples.toFixed(1));\n            }\n        }\n        this._motionBlurSamples = samples;\n    }\n    /**\n     * Specifies MSAA sample count, setting this to 4 will provide 4x anti aliasing. (default: 1)\n     */\n    get samples() {\n        return this._samples;\n    }\n    set samples(sampleCount) {\n        if (this._samples === sampleCount) {\n            return;\n        }\n        this._samples = sampleCount;\n        this._buildPipeline();\n    }\n    /**\n     * Default pipeline should be used going forward but the standard pipeline will be kept for backwards compatibility.\n     * @constructor\n     * @param name The rendering pipeline name\n     * @param scene The scene linked to this pipeline\n     * @param ratio The size of the postprocesses (0.5 means that your postprocess will have a width = canvas.width 0.5 and a height = canvas.height 0.5)\n     * @param originalPostProcess the custom original color post-process. Must be \"reusable\". Can be null.\n     * @param cameras The array of cameras that the rendering pipeline will be attached to\n     */\n    constructor(name, scene, ratio, originalPostProcess = null, cameras) {\n        super(scene.getEngine(), name);\n        /**\n         * Post-process used to down scale an image x4\n         */\n        this.downSampleX4PostProcess = null;\n        /**\n         * Post-process used to calculate the illuminated surfaces controlled by a threshold\n         */\n        this.brightPassPostProcess = null;\n        /**\n         * Post-process array storing all the horizontal blur post-processes used by the pipeline\n         */\n        this.blurHPostProcesses = [];\n        /**\n         * Post-process array storing all the vertical blur post-processes used by the pipeline\n         */\n        this.blurVPostProcesses = [];\n        /**\n         * Post-process used to add colors of 2 textures (typically brightness + real scene color)\n         */\n        this.textureAdderPostProcess = null;\n        /**\n         * Post-process used to create volumetric lighting effect\n         */\n        this.volumetricLightPostProcess = null;\n        /**\n         * Post-process used to smooth the previous volumetric light post-process on the X axis\n         */\n        this.volumetricLightSmoothXPostProcess = null;\n        /**\n         * Post-process used to smooth the previous volumetric light post-process on the Y axis\n         */\n        this.volumetricLightSmoothYPostProcess = null;\n        /**\n         * Post-process used to merge the volumetric light effect and the real scene color\n         */\n        this.volumetricLightMergePostProces = null;\n        /**\n         * Post-process used to store the final volumetric light post-process (attach/detach for debug purpose)\n         */\n        this.volumetricLightFinalPostProcess = null;\n        /**\n         * Base post-process used to calculate the average luminance of the final image for HDR\n         */\n        this.luminancePostProcess = null;\n        /**\n         * Post-processes used to create down sample post-processes in order to get\n         * the average luminance of the final image for HDR\n         * Array of length \"StandardRenderingPipeline.LuminanceSteps\"\n         */\n        this.luminanceDownSamplePostProcesses = [];\n        /**\n         * Post-process used to create a HDR effect (light adaptation)\n         */\n        this.hdrPostProcess = null;\n        /**\n         * Post-process used to store the final texture adder post-process (attach/detach for debug purpose)\n         */\n        this.textureAdderFinalPostProcess = null;\n        /**\n         * Post-process used to store the final lens flare post-process (attach/detach for debug purpose)\n         */\n        this.lensFlareFinalPostProcess = null;\n        /**\n         * Post-process used to merge the final HDR post-process and the real scene color\n         */\n        this.hdrFinalPostProcess = null;\n        /**\n         * Post-process used to create a lens flare effect\n         */\n        this.lensFlarePostProcess = null;\n        /**\n         * Post-process that merges the result of the lens flare post-process and the real scene color\n         */\n        this.lensFlareComposePostProcess = null;\n        /**\n         * Post-process used to create a motion blur effect\n         */\n        this.motionBlurPostProcess = null;\n        /**\n         * Post-process used to create a depth of field effect\n         */\n        this.depthOfFieldPostProcess = null;\n        /**\n         * The Fast Approximate Anti-Aliasing post process which attempts to remove aliasing from an image.\n         */\n        this.fxaaPostProcess = null;\n        /**\n         * Post-process used to simulate realtime reflections using the screen space and geometry renderer.\n         */\n        this.screenSpaceReflectionPostProcess = null;\n        // Values\n        /**\n         * Represents the brightness threshold in order to configure the illuminated surfaces\n         */\n        this.brightThreshold = 1.0;\n        /**\n         * Configures the blur intensity used for surexposed surfaces are highlighted surfaces (light halo)\n         */\n        this.blurWidth = 512.0;\n        /**\n         * Sets if the blur for highlighted surfaces must be only horizontal\n         */\n        this.horizontalBlur = false;\n        /**\n         * Texture used typically to simulate \"dirty\" on camera lens\n         */\n        this.lensTexture = null;\n        /**\n         * Represents the offset coefficient based on Rayleigh principle. Typically in interval [-0.2, 0.2]\n         */\n        this.volumetricLightCoefficient = 0.2;\n        /**\n         * The overall power of volumetric lights, typically in interval [0, 10] maximum\n         */\n        this.volumetricLightPower = 4.0;\n        /**\n         * Used the set the blur intensity to smooth the volumetric lights\n         */\n        this.volumetricLightBlurScale = 64.0;\n        /**\n         * Light (spot or directional) used to generate the volumetric lights rays\n         * The source light must have a shadow generate so the pipeline can get its\n         * depth map\n         */\n        this.sourceLight = null;\n        /**\n         * For eye adaptation, represents the minimum luminance the eye can see\n         */\n        this.hdrMinimumLuminance = 1.0;\n        /**\n         * For eye adaptation, represents the decrease luminance speed\n         */\n        this.hdrDecreaseRate = 0.5;\n        /**\n         * For eye adaptation, represents the increase luminance speed\n         */\n        this.hdrIncreaseRate = 0.5;\n        /**\n         * Lens color texture used by the lens flare effect. Mandatory if lens flare effect enabled\n         */\n        this.lensColorTexture = null;\n        /**\n         * The overall strength for the lens flare effect\n         */\n        this.lensFlareStrength = 20.0;\n        /**\n         * Dispersion coefficient for lens flare ghosts\n         */\n        this.lensFlareGhostDispersal = 1.4;\n        /**\n         * Main lens flare halo width\n         */\n        this.lensFlareHaloWidth = 0.7;\n        /**\n         * Based on the lens distortion effect, defines how much the lens flare result\n         * is distorted\n         */\n        this.lensFlareDistortionStrength = 16.0;\n        /**\n         * Configures the blur intensity used for for lens flare (halo)\n         */\n        this.lensFlareBlurWidth = 512.0;\n        /**\n         * Lens star texture must be used to simulate rays on the flares and is available\n         * in the documentation\n         */\n        this.lensStarTexture = null;\n        /**\n         * As the \"lensTexture\" (can be the same texture or different), it is used to apply the lens\n         * flare effect by taking account of the dirt texture\n         */\n        this.lensFlareDirtTexture = null;\n        /**\n         * Represents the focal length for the depth of field effect\n         */\n        this.depthOfFieldDistance = 10.0;\n        /**\n         * Represents the blur intensity for the blurred part of the depth of field effect\n         */\n        this.depthOfFieldBlurWidth = 64.0;\n        /**\n         * List of animations for the pipeline (IAnimatable implementation)\n         */\n        this.animations = [];\n        this._currentDepthOfFieldSource = null;\n        this._fixedExposure = 1.0;\n        this._currentExposure = 1.0;\n        this._hdrAutoExposure = false;\n        this._hdrCurrentLuminance = 1.0;\n        this._motionStrength = 1.0;\n        this._isObjectBasedMotionBlur = false;\n        this._camerasToBeAttached = [];\n        // Getters and setters\n        this._bloomEnabled = false;\n        this._depthOfFieldEnabled = false;\n        this._vlsEnabled = false;\n        this._lensFlareEnabled = false;\n        this._hdrEnabled = false;\n        this._motionBlurEnabled = false;\n        this._fxaaEnabled = false;\n        this._screenSpaceReflectionsEnabled = false;\n        this._motionBlurSamples = 64.0;\n        this._volumetricLightStepsCount = 50.0;\n        this._samples = 1;\n        this._cameras = cameras || scene.cameras;\n        this._cameras = this._cameras.slice();\n        this._camerasToBeAttached = this._cameras.slice();\n        // Initialize\n        this._scene = scene;\n        this._basePostProcess = originalPostProcess;\n        this._ratio = ratio;\n        // Misc\n        this._floatTextureType = scene.getEngine().getCaps().textureFloatRender ? 1 : 2;\n        // Finish\n        scene.postProcessRenderPipelineManager.addPipeline(this);\n        this._buildPipeline();\n    }\n    _buildPipeline() {\n        const ratio = this._ratio;\n        const scene = this._scene;\n        this._disposePostProcesses();\n        if (this._cameras !== null) {\n            this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._cameras);\n            // get back cameras to be used to reattach pipeline\n            this._cameras = this._camerasToBeAttached.slice();\n        }\n        this._reset();\n        // Create pass post-process\n        if (this._screenSpaceReflectionsEnabled) {\n            this.screenSpaceReflectionPostProcess = new ScreenSpaceReflectionPostProcess(\"HDRPass\", scene, ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, this._floatTextureType);\n            this.screenSpaceReflectionPostProcess.onApplyObservable.add(() => {\n                this._currentDepthOfFieldSource = this.screenSpaceReflectionPostProcess;\n            });\n            this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRScreenSpaceReflections\", () => this.screenSpaceReflectionPostProcess, true));\n        }\n        if (!this._basePostProcess) {\n            this.originalPostProcess = new PostProcess(\"HDRPass\", \"standard\", [], [], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define PASS_POST_PROCESS\", this._floatTextureType);\n        }\n        else {\n            this.originalPostProcess = this._basePostProcess;\n        }\n        this.originalPostProcess.autoClear = !this.screenSpaceReflectionPostProcess;\n        this.originalPostProcess.onApplyObservable.add(() => {\n            this._currentDepthOfFieldSource = this.originalPostProcess;\n        });\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRPassPostProcess\", () => this.originalPostProcess, true));\n        if (this._bloomEnabled) {\n            // Create down sample X4 post-process\n            this._createDownSampleX4PostProcess(scene, ratio / 4);\n            // Create bright pass post-process\n            this._createBrightPassPostProcess(scene, ratio / 4);\n            // Create gaussian blur post-processes (down sampling blurs)\n            this._createBlurPostProcesses(scene, ratio / 4, 1);\n            // Create texture adder post-process\n            this._createTextureAdderPostProcess(scene, ratio);\n            // Create depth-of-field source post-process\n            this.textureAdderFinalPostProcess = new PostProcess(\"HDRDepthOfFieldSource\", \"standard\", [], [], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define PASS_POST_PROCESS\", 0);\n            this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRBaseDepthOfFieldSource\", () => {\n                return this.textureAdderFinalPostProcess;\n            }, true));\n        }\n        if (this._vlsEnabled) {\n            // Create volumetric light\n            this._createVolumetricLightPostProcess(scene, ratio);\n            // Create volumetric light final post-process\n            this.volumetricLightFinalPostProcess = new PostProcess(\"HDRVLSFinal\", \"standard\", [], [], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define PASS_POST_PROCESS\", 0);\n            this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRVLSFinal\", () => {\n                return this.volumetricLightFinalPostProcess;\n            }, true));\n        }\n        if (this._lensFlareEnabled) {\n            // Create lens flare post-process\n            this._createLensFlarePostProcess(scene, ratio);\n            // Create depth-of-field source post-process post lens-flare and disable it now\n            this.lensFlareFinalPostProcess = new PostProcess(\"HDRPostLensFlareDepthOfFieldSource\", \"standard\", [], [], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define PASS_POST_PROCESS\", 0);\n            this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRPostLensFlareDepthOfFieldSource\", () => {\n                return this.lensFlareFinalPostProcess;\n            }, true));\n        }\n        if (this._hdrEnabled) {\n            // Create luminance\n            this._createLuminancePostProcesses(scene, this._floatTextureType);\n            // Create HDR\n            this._createHdrPostProcess(scene, ratio);\n            // Create depth-of-field source post-process post hdr and disable it now\n            this.hdrFinalPostProcess = new PostProcess(\"HDRPostHDReDepthOfFieldSource\", \"standard\", [], [], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define PASS_POST_PROCESS\", 0);\n            this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRPostHDReDepthOfFieldSource\", () => {\n                return this.hdrFinalPostProcess;\n            }, true));\n        }\n        if (this._depthOfFieldEnabled) {\n            // Create gaussian blur used by depth-of-field\n            this._createBlurPostProcesses(scene, ratio / 2, 3, \"depthOfFieldBlurWidth\");\n            // Create depth-of-field post-process\n            this._createDepthOfFieldPostProcess(scene, ratio);\n        }\n        if (this._motionBlurEnabled) {\n            // Create motion blur post-process\n            this._createMotionBlurPostProcess(scene, ratio);\n        }\n        if (this._fxaaEnabled) {\n            // Create fxaa post-process\n            this.fxaaPostProcess = new FxaaPostProcess(\"fxaa\", 1.0, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, 0);\n            this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRFxaa\", () => {\n                return this.fxaaPostProcess;\n            }, true));\n        }\n        if (this._cameras !== null) {\n            this._scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(this._name, this._cameras);\n        }\n        if (!this._enableMSAAOnFirstPostProcess(this._samples) && this._samples > 1) {\n            Logger.Warn(\"MSAA failed to enable, MSAA is only supported in browsers that support webGL >= 2.0\");\n        }\n    }\n    // Down Sample X4 Post-Process\n    _createDownSampleX4PostProcess(scene, ratio) {\n        const downSampleX4Offsets = new Array(32);\n        this.downSampleX4PostProcess = new PostProcess(\"HDRDownSampleX4\", \"standard\", [\"dsOffsets\"], [], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define DOWN_SAMPLE_X4\", this._floatTextureType);\n        this.downSampleX4PostProcess.onApply = (effect) => {\n            let id = 0;\n            const width = this.downSampleX4PostProcess.width;\n            const height = this.downSampleX4PostProcess.height;\n            for (let i = -2; i < 2; i++) {\n                for (let j = -2; j < 2; j++) {\n                    downSampleX4Offsets[id] = (i + 0.5) * (1.0 / width);\n                    downSampleX4Offsets[id + 1] = (j + 0.5) * (1.0 / height);\n                    id += 2;\n                }\n            }\n            effect.setArray2(\"dsOffsets\", downSampleX4Offsets);\n        };\n        // Add to pipeline\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRDownSampleX4\", () => {\n            return this.downSampleX4PostProcess;\n        }, true));\n    }\n    // Brightpass Post-Process\n    _createBrightPassPostProcess(scene, ratio) {\n        const brightOffsets = new Array(8);\n        this.brightPassPostProcess = new PostProcess(\"HDRBrightPass\", \"standard\", [\"dsOffsets\", \"brightThreshold\"], [], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define BRIGHT_PASS\", this._floatTextureType);\n        this.brightPassPostProcess.onApply = (effect) => {\n            const sU = 1.0 / this.brightPassPostProcess.width;\n            const sV = 1.0 / this.brightPassPostProcess.height;\n            brightOffsets[0] = -0.5 * sU;\n            brightOffsets[1] = 0.5 * sV;\n            brightOffsets[2] = 0.5 * sU;\n            brightOffsets[3] = 0.5 * sV;\n            brightOffsets[4] = -0.5 * sU;\n            brightOffsets[5] = -0.5 * sV;\n            brightOffsets[6] = 0.5 * sU;\n            brightOffsets[7] = -0.5 * sV;\n            effect.setArray2(\"dsOffsets\", brightOffsets);\n            effect.setFloat(\"brightThreshold\", this.brightThreshold);\n        };\n        // Add to pipeline\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRBrightPass\", () => {\n            return this.brightPassPostProcess;\n        }, true));\n    }\n    // Create blur H&V post-processes\n    _createBlurPostProcesses(scene, ratio, indice, blurWidthKey = \"blurWidth\") {\n        const engine = scene.getEngine();\n        const blurX = new BlurPostProcess(\"HDRBlurH\" + \"_\" + indice, new Vector2(1, 0), this[blurWidthKey], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, this._floatTextureType);\n        const blurY = new BlurPostProcess(\"HDRBlurV\" + \"_\" + indice, new Vector2(0, 1), this[blurWidthKey], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, this._floatTextureType);\n        blurX.onActivateObservable.add(() => {\n            const dw = blurX.width / engine.getRenderWidth();\n            blurX.kernel = this[blurWidthKey] * dw;\n        });\n        blurY.onActivateObservable.add(() => {\n            const dw = blurY.height / engine.getRenderHeight();\n            blurY.kernel = this.horizontalBlur ? 64 * dw : this[blurWidthKey] * dw;\n        });\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRBlurH\" + indice, () => {\n            return blurX;\n        }, true));\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRBlurV\" + indice, () => {\n            return blurY;\n        }, true));\n        this.blurHPostProcesses.push(blurX);\n        this.blurVPostProcesses.push(blurY);\n    }\n    // Create texture adder post-process\n    _createTextureAdderPostProcess(scene, ratio) {\n        this.textureAdderPostProcess = new PostProcess(\"HDRTextureAdder\", \"standard\", [\"exposure\"], [\"otherSampler\", \"lensSampler\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define TEXTURE_ADDER\", this._floatTextureType);\n        this.textureAdderPostProcess.onApply = (effect) => {\n            effect.setTextureFromPostProcess(\"otherSampler\", this._vlsEnabled ? this._currentDepthOfFieldSource : this.originalPostProcess);\n            effect.setTexture(\"lensSampler\", this.lensTexture);\n            effect.setFloat(\"exposure\", this._currentExposure);\n            this._currentDepthOfFieldSource = this.textureAdderFinalPostProcess;\n        };\n        // Add to pipeline\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRTextureAdder\", () => {\n            return this.textureAdderPostProcess;\n        }, true));\n    }\n    _createVolumetricLightPostProcess(scene, ratio) {\n        const geometryRenderer = scene.enableGeometryBufferRenderer();\n        geometryRenderer.enablePosition = true;\n        const geometry = geometryRenderer.getGBuffer();\n        // Base post-process\n        this.volumetricLightPostProcess = new PostProcess(\"HDRVLS\", \"standard\", [\"shadowViewProjection\", \"cameraPosition\", \"sunDirection\", \"sunColor\", \"scatteringCoefficient\", \"scatteringPower\", \"depthValues\"], [\"shadowMapSampler\", \"positionSampler\"], ratio / 8, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define VLS\\n#define NB_STEPS \" + this._volumetricLightStepsCount.toFixed(1));\n        const depthValues = Vector2.Zero();\n        this.volumetricLightPostProcess.onApply = (effect) => {\n            if (this.sourceLight && this.sourceLight.getShadowGenerator() && this._scene.activeCamera) {\n                const generator = this.sourceLight.getShadowGenerator();\n                effect.setTexture(\"shadowMapSampler\", generator.getShadowMap());\n                effect.setTexture(\"positionSampler\", geometry.textures[2]);\n                effect.setColor3(\"sunColor\", this.sourceLight.diffuse);\n                effect.setVector3(\"sunDirection\", this.sourceLight.getShadowDirection());\n                effect.setVector3(\"cameraPosition\", this._scene.activeCamera.globalPosition);\n                effect.setMatrix(\"shadowViewProjection\", generator.getTransformMatrix());\n                effect.setFloat(\"scatteringCoefficient\", this.volumetricLightCoefficient);\n                effect.setFloat(\"scatteringPower\", this.volumetricLightPower);\n                depthValues.x = this.sourceLight.getDepthMinZ(this._scene.activeCamera);\n                depthValues.y = this.sourceLight.getDepthMaxZ(this._scene.activeCamera);\n                effect.setVector2(\"depthValues\", depthValues);\n            }\n        };\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRVLS\", () => {\n            return this.volumetricLightPostProcess;\n        }, true));\n        // Smooth\n        this._createBlurPostProcesses(scene, ratio / 4, 0, \"volumetricLightBlurScale\");\n        // Merge\n        this.volumetricLightMergePostProces = new PostProcess(\"HDRVLSMerge\", \"standard\", [], [\"originalSampler\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define VLSMERGE\");\n        this.volumetricLightMergePostProces.onApply = (effect) => {\n            effect.setTextureFromPostProcess(\"originalSampler\", this._bloomEnabled ? this.textureAdderFinalPostProcess : this.originalPostProcess);\n            this._currentDepthOfFieldSource = this.volumetricLightFinalPostProcess;\n        };\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRVLSMerge\", () => {\n            return this.volumetricLightMergePostProces;\n        }, true));\n    }\n    // Create luminance\n    _createLuminancePostProcesses(scene, textureType) {\n        // Create luminance\n        let size = Math.pow(3, StandardRenderingPipeline.LuminanceSteps);\n        this.luminancePostProcess = new PostProcess(\"HDRLuminance\", \"standard\", [\"lumOffsets\"], [], { width: size, height: size }, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define LUMINANCE\", textureType);\n        const offsets = [];\n        this.luminancePostProcess.onApply = (effect) => {\n            const sU = 1.0 / this.luminancePostProcess.width;\n            const sV = 1.0 / this.luminancePostProcess.height;\n            offsets[0] = -0.5 * sU;\n            offsets[1] = 0.5 * sV;\n            offsets[2] = 0.5 * sU;\n            offsets[3] = 0.5 * sV;\n            offsets[4] = -0.5 * sU;\n            offsets[5] = -0.5 * sV;\n            offsets[6] = 0.5 * sU;\n            offsets[7] = -0.5 * sV;\n            effect.setArray2(\"lumOffsets\", offsets);\n        };\n        // Add to pipeline\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRLuminance\", () => {\n            return this.luminancePostProcess;\n        }, true));\n        // Create down sample luminance\n        for (let i = StandardRenderingPipeline.LuminanceSteps - 1; i >= 0; i--) {\n            size = Math.pow(3, i);\n            let defines = \"#define LUMINANCE_DOWN_SAMPLE\\n\";\n            if (i === 0) {\n                defines += \"#define FINAL_DOWN_SAMPLER\";\n            }\n            const postProcess = new PostProcess(\"HDRLuminanceDownSample\" + i, \"standard\", [\"dsOffsets\", \"halfDestPixelSize\"], [], { width: size, height: size }, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, defines, textureType);\n            this.luminanceDownSamplePostProcesses.push(postProcess);\n        }\n        // Create callbacks and add effects\n        let lastLuminance = this.luminancePostProcess;\n        this.luminanceDownSamplePostProcesses.forEach((pp, index) => {\n            const downSampleOffsets = new Array(18);\n            pp.onApply = (effect) => {\n                if (!lastLuminance) {\n                    return;\n                }\n                let id = 0;\n                for (let x = -1; x < 2; x++) {\n                    for (let y = -1; y < 2; y++) {\n                        downSampleOffsets[id] = x / lastLuminance.width;\n                        downSampleOffsets[id + 1] = y / lastLuminance.height;\n                        id += 2;\n                    }\n                }\n                effect.setArray2(\"dsOffsets\", downSampleOffsets);\n                effect.setFloat(\"halfDestPixelSize\", 0.5 / lastLuminance.width);\n                if (index === this.luminanceDownSamplePostProcesses.length - 1) {\n                    lastLuminance = this.luminancePostProcess;\n                }\n                else {\n                    lastLuminance = pp;\n                }\n            };\n            if (index === this.luminanceDownSamplePostProcesses.length - 1) {\n                pp.onAfterRender = () => {\n                    const pixel = scene.getEngine().readPixels(0, 0, 1, 1);\n                    const bit_shift = new Vector4(1.0 / (255.0 * 255.0 * 255.0), 1.0 / (255.0 * 255.0), 1.0 / 255.0, 1.0);\n                    pixel.then((pixel) => {\n                        const data = new Uint8Array(pixel.buffer);\n                        this._hdrCurrentLuminance = (data[0] * bit_shift.x + data[1] * bit_shift.y + data[2] * bit_shift.z + data[3] * bit_shift.w) / 100.0;\n                    });\n                };\n            }\n            this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRLuminanceDownSample\" + index, () => {\n                return pp;\n            }, true));\n        });\n    }\n    // Create HDR post-process\n    _createHdrPostProcess(scene, ratio) {\n        const defines = [\"#define HDR\"];\n        if (this._hdrAutoExposure) {\n            defines.push(\"#define AUTO_EXPOSURE\");\n        }\n        this.hdrPostProcess = new PostProcess(\"HDR\", \"standard\", [\"averageLuminance\"], [\"textureAdderSampler\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, defines.join(\"\\n\"), 0);\n        let outputLiminance = 1;\n        let time = 0;\n        let lastTime = 0;\n        this.hdrPostProcess.onApply = (effect) => {\n            effect.setTextureFromPostProcess(\"textureAdderSampler\", this._currentDepthOfFieldSource);\n            time += scene.getEngine().getDeltaTime();\n            if (outputLiminance < 0) {\n                outputLiminance = this._hdrCurrentLuminance;\n            }\n            else {\n                const dt = (lastTime - time) / 1000.0;\n                if (this._hdrCurrentLuminance < outputLiminance + this.hdrDecreaseRate * dt) {\n                    outputLiminance += this.hdrDecreaseRate * dt;\n                }\n                else if (this._hdrCurrentLuminance > outputLiminance - this.hdrIncreaseRate * dt) {\n                    outputLiminance -= this.hdrIncreaseRate * dt;\n                }\n                else {\n                    outputLiminance = this._hdrCurrentLuminance;\n                }\n            }\n            if (this.hdrAutoExposure) {\n                this._currentExposure = this._fixedExposure / outputLiminance;\n            }\n            else {\n                outputLiminance = Scalar.Clamp(outputLiminance, this.hdrMinimumLuminance, 1e20);\n                effect.setFloat(\"averageLuminance\", outputLiminance);\n            }\n            lastTime = time;\n            this._currentDepthOfFieldSource = this.hdrFinalPostProcess;\n        };\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDR\", () => {\n            return this.hdrPostProcess;\n        }, true));\n    }\n    // Create lens flare post-process\n    _createLensFlarePostProcess(scene, ratio) {\n        this.lensFlarePostProcess = new PostProcess(\"HDRLensFlare\", \"standard\", [\"strength\", \"ghostDispersal\", \"haloWidth\", \"resolution\", \"distortionStrength\"], [\"lensColorSampler\"], ratio / 2, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define LENS_FLARE\", 0);\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRLensFlare\", () => {\n            return this.lensFlarePostProcess;\n        }, true));\n        this._createBlurPostProcesses(scene, ratio / 4, 2, \"lensFlareBlurWidth\");\n        this.lensFlareComposePostProcess = new PostProcess(\"HDRLensFlareCompose\", \"standard\", [\"lensStarMatrix\"], [\"otherSampler\", \"lensDirtSampler\", \"lensStarSampler\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define LENS_FLARE_COMPOSE\", 0);\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRLensFlareCompose\", () => {\n            return this.lensFlareComposePostProcess;\n        }, true));\n        const resolution = new Vector2(0, 0);\n        // Lens flare\n        this.lensFlarePostProcess.externalTextureSamplerBinding = true;\n        this.lensFlarePostProcess.onApply = (effect) => {\n            effect.setTextureFromPostProcess(\"textureSampler\", this._bloomEnabled ? this.blurHPostProcesses[0] : this.originalPostProcess);\n            effect.setTexture(\"lensColorSampler\", this.lensColorTexture);\n            effect.setFloat(\"strength\", this.lensFlareStrength);\n            effect.setFloat(\"ghostDispersal\", this.lensFlareGhostDispersal);\n            effect.setFloat(\"haloWidth\", this.lensFlareHaloWidth);\n            // Shift\n            resolution.x = this.lensFlarePostProcess.width;\n            resolution.y = this.lensFlarePostProcess.height;\n            effect.setVector2(\"resolution\", resolution);\n            effect.setFloat(\"distortionStrength\", this.lensFlareDistortionStrength);\n        };\n        // Compose\n        const scaleBias1 = Matrix.FromValues(2.0, 0.0, -1.0, 0.0, 0.0, 2.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);\n        const scaleBias2 = Matrix.FromValues(0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);\n        this.lensFlareComposePostProcess.onApply = (effect) => {\n            if (!this._scene.activeCamera) {\n                return;\n            }\n            effect.setTextureFromPostProcess(\"otherSampler\", this.lensFlarePostProcess);\n            effect.setTexture(\"lensDirtSampler\", this.lensFlareDirtTexture);\n            effect.setTexture(\"lensStarSampler\", this.lensStarTexture);\n            // Lens start rotation matrix\n            const camerax = this._scene.activeCamera.getViewMatrix().getRow(0);\n            const cameraz = this._scene.activeCamera.getViewMatrix().getRow(2);\n            let camRot = Vector3.Dot(camerax.toVector3(), new Vector3(1.0, 0.0, 0.0)) + Vector3.Dot(cameraz.toVector3(), new Vector3(0.0, 0.0, 1.0));\n            camRot *= 4.0;\n            const starRotation = Matrix.FromValues(Math.cos(camRot) * 0.5, -Math.sin(camRot), 0.0, 0.0, Math.sin(camRot), Math.cos(camRot) * 0.5, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);\n            const lensStarMatrix = scaleBias2.multiply(starRotation).multiply(scaleBias1);\n            effect.setMatrix(\"lensStarMatrix\", lensStarMatrix);\n            this._currentDepthOfFieldSource = this.lensFlareFinalPostProcess;\n        };\n    }\n    // Create depth-of-field post-process\n    _createDepthOfFieldPostProcess(scene, ratio) {\n        this.depthOfFieldPostProcess = new PostProcess(\"HDRDepthOfField\", \"standard\", [\"distance\"], [\"otherSampler\", \"depthSampler\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define DEPTH_OF_FIELD\", 0);\n        this.depthOfFieldPostProcess.onApply = (effect) => {\n            effect.setTextureFromPostProcess(\"otherSampler\", this._currentDepthOfFieldSource);\n            effect.setTexture(\"depthSampler\", this._getDepthTexture());\n            effect.setFloat(\"distance\", this.depthOfFieldDistance);\n        };\n        // Add to pipeline\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRDepthOfField\", () => {\n            return this.depthOfFieldPostProcess;\n        }, true));\n    }\n    // Create motion blur post-process\n    _createMotionBlurPostProcess(scene, ratio) {\n        if (this._isObjectBasedMotionBlur) {\n            const mb = new MotionBlurPostProcess(\"HDRMotionBlur\", scene, ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, 0);\n            mb.motionStrength = this.motionStrength;\n            mb.motionBlurSamples = this.motionBlurSamples;\n            this.motionBlurPostProcess = mb;\n        }\n        else {\n            this.motionBlurPostProcess = new PostProcess(\"HDRMotionBlur\", \"standard\", [\"inverseViewProjection\", \"prevViewProjection\", \"screenSize\", \"motionScale\", \"motionStrength\"], [\"depthSampler\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define MOTION_BLUR\\n#define MAX_MOTION_SAMPLES \" + this.motionBlurSamples.toFixed(1), 0);\n            let motionScale = 0;\n            let prevViewProjection = Matrix.Identity();\n            const invViewProjection = Matrix.Identity();\n            let viewProjection = Matrix.Identity();\n            const screenSize = Vector2.Zero();\n            this.motionBlurPostProcess.onApply = (effect) => {\n                viewProjection = scene.getProjectionMatrix().multiply(scene.getViewMatrix());\n                viewProjection.invertToRef(invViewProjection);\n                effect.setMatrix(\"inverseViewProjection\", invViewProjection);\n                effect.setMatrix(\"prevViewProjection\", prevViewProjection);\n                prevViewProjection = viewProjection;\n                screenSize.x = this.motionBlurPostProcess.width;\n                screenSize.y = this.motionBlurPostProcess.height;\n                effect.setVector2(\"screenSize\", screenSize);\n                motionScale = scene.getEngine().getFps() / 60.0;\n                effect.setFloat(\"motionScale\", motionScale);\n                effect.setFloat(\"motionStrength\", this.motionStrength);\n                effect.setTexture(\"depthSampler\", this._getDepthTexture());\n            };\n        }\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRMotionBlur\", () => {\n            return this.motionBlurPostProcess;\n        }, true));\n    }\n    _getDepthTexture() {\n        if (this._scene.getEngine().getCaps().drawBuffersExtension) {\n            const renderer = this._scene.enableGeometryBufferRenderer();\n            return renderer.getGBuffer().textures[0];\n        }\n        return this._scene.enableDepthRenderer().getDepthMap();\n    }\n    _disposePostProcesses() {\n        for (let i = 0; i < this._cameras.length; i++) {\n            const camera = this._cameras[i];\n            if (this.originalPostProcess) {\n                this.originalPostProcess.dispose(camera);\n            }\n            if (this.screenSpaceReflectionPostProcess) {\n                this.screenSpaceReflectionPostProcess.dispose(camera);\n            }\n            if (this.downSampleX4PostProcess) {\n                this.downSampleX4PostProcess.dispose(camera);\n            }\n            if (this.brightPassPostProcess) {\n                this.brightPassPostProcess.dispose(camera);\n            }\n            if (this.textureAdderPostProcess) {\n                this.textureAdderPostProcess.dispose(camera);\n            }\n            if (this.volumetricLightPostProcess) {\n                this.volumetricLightPostProcess.dispose(camera);\n            }\n            if (this.volumetricLightSmoothXPostProcess) {\n                this.volumetricLightSmoothXPostProcess.dispose(camera);\n            }\n            if (this.volumetricLightSmoothYPostProcess) {\n                this.volumetricLightSmoothYPostProcess.dispose(camera);\n            }\n            if (this.volumetricLightMergePostProces) {\n                this.volumetricLightMergePostProces.dispose(camera);\n            }\n            if (this.volumetricLightFinalPostProcess) {\n                this.volumetricLightFinalPostProcess.dispose(camera);\n            }\n            if (this.lensFlarePostProcess) {\n                this.lensFlarePostProcess.dispose(camera);\n            }\n            if (this.lensFlareComposePostProcess) {\n                this.lensFlareComposePostProcess.dispose(camera);\n            }\n            for (let j = 0; j < this.luminanceDownSamplePostProcesses.length; j++) {\n                this.luminanceDownSamplePostProcesses[j].dispose(camera);\n            }\n            if (this.luminancePostProcess) {\n                this.luminancePostProcess.dispose(camera);\n            }\n            if (this.hdrPostProcess) {\n                this.hdrPostProcess.dispose(camera);\n            }\n            if (this.hdrFinalPostProcess) {\n                this.hdrFinalPostProcess.dispose(camera);\n            }\n            if (this.depthOfFieldPostProcess) {\n                this.depthOfFieldPostProcess.dispose(camera);\n            }\n            if (this.motionBlurPostProcess) {\n                this.motionBlurPostProcess.dispose(camera);\n            }\n            if (this.fxaaPostProcess) {\n                this.fxaaPostProcess.dispose(camera);\n            }\n            for (let j = 0; j < this.blurHPostProcesses.length; j++) {\n                this.blurHPostProcesses[j].dispose(camera);\n            }\n            for (let j = 0; j < this.blurVPostProcesses.length; j++) {\n                this.blurVPostProcesses[j].dispose(camera);\n            }\n        }\n        this.originalPostProcess = null;\n        this.downSampleX4PostProcess = null;\n        this.brightPassPostProcess = null;\n        this.textureAdderPostProcess = null;\n        this.textureAdderFinalPostProcess = null;\n        this.volumetricLightPostProcess = null;\n        this.volumetricLightSmoothXPostProcess = null;\n        this.volumetricLightSmoothYPostProcess = null;\n        this.volumetricLightMergePostProces = null;\n        this.volumetricLightFinalPostProcess = null;\n        this.lensFlarePostProcess = null;\n        this.lensFlareComposePostProcess = null;\n        this.luminancePostProcess = null;\n        this.hdrPostProcess = null;\n        this.hdrFinalPostProcess = null;\n        this.depthOfFieldPostProcess = null;\n        this.motionBlurPostProcess = null;\n        this.fxaaPostProcess = null;\n        this.screenSpaceReflectionPostProcess = null;\n        this.luminanceDownSamplePostProcesses.length = 0;\n        this.blurHPostProcesses.length = 0;\n        this.blurVPostProcesses.length = 0;\n    }\n    /**\n     * Dispose of the pipeline and stop all post processes\n     */\n    dispose() {\n        this._disposePostProcesses();\n        this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._cameras);\n        super.dispose();\n    }\n    /**\n     * Serialize the rendering pipeline (Used when exporting)\n     * @returns the serialized object\n     */\n    serialize() {\n        const serializationObject = SerializationHelper.Serialize(this);\n        if (this.sourceLight) {\n            serializationObject.sourceLightId = this.sourceLight.id;\n        }\n        if (this.screenSpaceReflectionPostProcess) {\n            serializationObject.screenSpaceReflectionPostProcess = SerializationHelper.Serialize(this.screenSpaceReflectionPostProcess);\n        }\n        serializationObject.customType = \"StandardRenderingPipeline\";\n        return serializationObject;\n    }\n    /**\n     * Parse the serialized pipeline\n     * @param source Source pipeline.\n     * @param scene The scene to load the pipeline to.\n     * @param rootUrl The URL of the serialized pipeline.\n     * @returns An instantiated pipeline from the serialized object.\n     */\n    static Parse(source, scene, rootUrl) {\n        const p = SerializationHelper.Parse(() => new StandardRenderingPipeline(source._name, scene, source._ratio), source, scene, rootUrl);\n        if (source.sourceLightId) {\n            p.sourceLight = scene.getLightById(source.sourceLightId);\n        }\n        if (source.screenSpaceReflectionPostProcess) {\n            SerializationHelper.Parse(() => p.screenSpaceReflectionPostProcess, source.screenSpaceReflectionPostProcess, scene, rootUrl);\n        }\n        return p;\n    }\n}\n/**\n * Luminance steps\n */\nStandardRenderingPipeline.LuminanceSteps = 6;\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"brightThreshold\", void 0);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"blurWidth\", void 0);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"horizontalBlur\", void 0);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"exposure\", null);\n__decorate([\n    serializeAsTexture(\"lensTexture\")\n], StandardRenderingPipeline.prototype, \"lensTexture\", void 0);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"volumetricLightCoefficient\", void 0);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"volumetricLightPower\", void 0);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"volumetricLightBlurScale\", void 0);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"hdrMinimumLuminance\", void 0);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"hdrDecreaseRate\", void 0);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"hdrIncreaseRate\", void 0);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"hdrAutoExposure\", null);\n__decorate([\n    serializeAsTexture(\"lensColorTexture\")\n], StandardRenderingPipeline.prototype, \"lensColorTexture\", void 0);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"lensFlareStrength\", void 0);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"lensFlareGhostDispersal\", void 0);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"lensFlareHaloWidth\", void 0);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"lensFlareDistortionStrength\", void 0);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"lensFlareBlurWidth\", void 0);\n__decorate([\n    serializeAsTexture(\"lensStarTexture\")\n], StandardRenderingPipeline.prototype, \"lensStarTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"lensFlareDirtTexture\")\n], StandardRenderingPipeline.prototype, \"lensFlareDirtTexture\", void 0);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"depthOfFieldDistance\", void 0);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"depthOfFieldBlurWidth\", void 0);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"motionStrength\", null);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"objectBasedMotionBlur\", null);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"_ratio\", void 0);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"BloomEnabled\", null);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"DepthOfFieldEnabled\", null);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"LensFlareEnabled\", null);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"HDREnabled\", null);\n__decorate([\n    serialize()\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n], StandardRenderingPipeline.prototype, \"VLSEnabled\", null);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"MotionBlurEnabled\", null);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"fxaaEnabled\", null);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"screenSpaceReflectionsEnabled\", null);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"volumetricLightStepsCount\", null);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"motionBlurSamples\", null);\n__decorate([\n    serialize()\n], StandardRenderingPipeline.prototype, \"samples\", null);\nRegisterClass(\"BABYLON.StandardRenderingPipeline\", StandardRenderingPipeline);\n//# sourceMappingURL=standardRenderingPipeline.js.map","import { __decorate } from \"../../../tslib.es6.js\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { Logger } from \"../../../Misc/logger.js\";\nimport { serialize, SerializationHelper } from \"../../../Misc/decorators.js\";\nimport { Vector3, Matrix, Quaternion, TmpVectors } from \"../../../Maths/math.vector.js\";\nimport { PostProcess } from \"../../postProcess.js\";\nimport { PostProcessRenderPipeline } from \"../postProcessRenderPipeline.js\";\nimport { PostProcessRenderEffect } from \"../postProcessRenderEffect.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { ScreenSpaceReflections2Configuration } from \"../../../Rendering/screenSpaceReflections2Configuration.js\";\nimport { GeometryBufferRenderer } from \"../../../Rendering/geometryBufferRenderer.js\";\n\nimport { DepthRenderer } from \"../../../Rendering/depthRenderer.js\";\nimport \"../postProcessRenderPipelineManagerSceneComponent.js\";\nimport \"../../../Shaders/screenSpaceReflection2.fragment.js\";\nimport \"../../../Shaders/screenSpaceReflection2Blur.fragment.js\";\nimport \"../../../Shaders/screenSpaceReflection2BlurCombiner.fragment.js\";\nconst trs = Matrix.Compose(new Vector3(0.5, 0.5, 0.5), Quaternion.Identity(), new Vector3(0.5, 0.5, 0.5));\nconst trsWebGPU = Matrix.Compose(new Vector3(0.5, 0.5, 1), Quaternion.Identity(), new Vector3(0.5, 0.5, 0));\n/**\n * Render pipeline to produce Screen Space Reflections (SSR) effect\n *\n * References:\n *   Screen Space Ray Tracing:\n *     - http://casual-effects.blogspot.com/2014/08/screen-space-ray-tracing.html\n *     - https://sourceforge.net/p/g3d/code/HEAD/tree/G3D10/data-files/shader/screenSpaceRayTrace.glsl\n *     - https://github.com/kode80/kode80SSR\n *   SSR:\n *     - general tips: https://sakibsaikia.github.io/graphics/2016/12/26/Screen-Space-Reflection-in-Killing-Floor-2.html\n *     - computation of blur radius from roughness and distance: https://github.com/godotengine/godot/blob/master/servers/rendering/renderer_rd/shaders/effects/screen_space_reflection.glsl\n *     - blur and usage of back depth buffer: https://github.com/kode80/kode80SSR\n */\nexport class SSRRenderingPipeline extends PostProcessRenderPipeline {\n    /**\n     * MSAA sample count, setting this to 4 will provide 4x anti aliasing. (default: 1)\n     */\n    set samples(sampleCount) {\n        if (this._samples === sampleCount) {\n            return;\n        }\n        this._samples = sampleCount;\n        this._buildPipeline();\n    }\n    get samples() {\n        return this._samples;\n    }\n    /**\n     * Gets or sets the blur dispersion strength. Set this value to 0 to disable blurring (default: 0.05)\n     * The reflections are blurred based on the distance between the pixel shaded and the reflected pixel: the higher the distance the more blurry the reflection is.\n     * blurDispersionStrength allows to increase or decrease this effect.\n     */\n    get blurDispersionStrength() {\n        return this._blurDispersionStrength;\n    }\n    set blurDispersionStrength(strength) {\n        if (strength === this._blurDispersionStrength) {\n            return;\n        }\n        const rebuild = (strength === 0 && this._blurDispersionStrength !== 0) || (strength !== 0 && this._blurDispersionStrength === 0);\n        this._blurDispersionStrength = strength;\n        if (rebuild) {\n            this._buildPipeline();\n        }\n    }\n    /**\n     * Gets or sets whether or not smoothing reflections is enabled.\n     * Enabling smoothing will require more GPU power and can generate a drop in FPS.\n     * Note that this setting has no effect if step = 1: it's only used if step \\> 1.\n     */\n    get enableSmoothReflections() {\n        return this._enableSmoothReflections;\n    }\n    set enableSmoothReflections(enabled) {\n        if (enabled === this._enableSmoothReflections) {\n            return;\n        }\n        this._enableSmoothReflections = enabled;\n        this._updateEffectDefines();\n    }\n    /**\n     * Gets or sets the environment cube texture used to define the reflection when the reflected rays of SSR leave the view space or when the maxDistance/maxSteps is reached.\n     */\n    get environmentTexture() {\n        return this._environmentTexture;\n    }\n    set environmentTexture(texture) {\n        this._environmentTexture = texture;\n        this._updateEffectDefines();\n    }\n    /**\n     * Gets or sets the boolean defining if the environment texture is a standard cubemap (false) or a probe (true). Default value is false.\n     * Note: a probe cube texture is treated differently than an ordinary cube texture because the Y axis is reversed.\n     */\n    get environmentTextureIsProbe() {\n        return this._environmentTextureIsProbe;\n    }\n    set environmentTextureIsProbe(isProbe) {\n        this._environmentTextureIsProbe = isProbe;\n        this._updateEffectDefines();\n    }\n    /**\n     * Gets or sets a boolean indicating if the reflections should be attenuated at the screen borders (default: true).\n     */\n    get attenuateScreenBorders() {\n        return this._attenuateScreenBorders;\n    }\n    set attenuateScreenBorders(attenuate) {\n        if (this._attenuateScreenBorders === attenuate) {\n            return;\n        }\n        this._attenuateScreenBorders = attenuate;\n        this._updateEffectDefines();\n    }\n    /**\n     * Gets or sets a boolean indicating if the reflections should be attenuated according to the distance of the intersection (default: true).\n     */\n    get attenuateIntersectionDistance() {\n        return this._attenuateIntersectionDistance;\n    }\n    set attenuateIntersectionDistance(attenuate) {\n        if (this._attenuateIntersectionDistance === attenuate) {\n            return;\n        }\n        this._attenuateIntersectionDistance = attenuate;\n        this._updateEffectDefines();\n    }\n    /**\n     * Gets or sets a boolean indicating if the reflections should be attenuated when the reflection ray is facing the camera (the view direction) (default: false).\n     */\n    get attenuateFacingCamera() {\n        return this._attenuateFacingCamera;\n    }\n    set attenuateFacingCamera(attenuate) {\n        if (this._attenuateFacingCamera === attenuate) {\n            return;\n        }\n        this._attenuateFacingCamera = attenuate;\n        this._updateEffectDefines();\n    }\n    /**\n     * Gets or sets a boolean indicating if the backface reflections should be attenuated (default: false).\n     */\n    get attenuateBackfaceReflection() {\n        return this._attenuateBackfaceReflection;\n    }\n    set attenuateBackfaceReflection(attenuate) {\n        if (this._attenuateBackfaceReflection === attenuate) {\n            return;\n        }\n        this._attenuateBackfaceReflection = attenuate;\n        this._updateEffectDefines();\n    }\n    /**\n     * Gets or sets a boolean indicating if the ray should be clipped to the frustum (default: true).\n     * You can try to set this parameter to false to save some performances: it may produce some artefacts in some cases, but generally they won't really be visible\n     */\n    get clipToFrustum() {\n        return this._clipToFrustum;\n    }\n    set clipToFrustum(clip) {\n        if (this._clipToFrustum === clip) {\n            return;\n        }\n        this._clipToFrustum = clip;\n        this._updateEffectDefines();\n    }\n    /**\n     * Gets or sets a boolean defining if geometry thickness should be computed automatically (default: false).\n     * When enabled, a depth renderer is created which will render the back faces of the scene to a depth texture (meaning additional work for the GPU).\n     * In that mode, the \"thickness\" property is still used as an offset to compute the ray intersection, but you can typically use a much lower\n     * value than when enableAutomaticThicknessComputation is false (it's even possible to use a value of 0 when using low values for \"step\")\n     * Note that for performance reasons, this option will only apply to the first camera to which the the rendering pipeline is attached!\n     */\n    get enableAutomaticThicknessComputation() {\n        return this._enableAutomaticThicknessComputation;\n    }\n    set enableAutomaticThicknessComputation(automatic) {\n        if (this._enableAutomaticThicknessComputation === automatic) {\n            return;\n        }\n        this._enableAutomaticThicknessComputation = automatic;\n        this._buildPipeline();\n    }\n    /**\n     * Gets the depth renderer used to render the back faces of the scene to a depth texture.\n     */\n    get backfaceDepthRenderer() {\n        return this._depthRenderer;\n    }\n    /**\n     * Gets or sets the size factor used to create the backface depth texture, used only if enableAutomaticThicknessComputation = true (default: 1).\n     * This factor is used as a divisor of the full screen size (so, 2 means that the backface depth texture will be created at half the screen size, meaning better performances).\n     * Note that you will get rendering artefacts when using a value different from 1: it's a tradeoff between image quality and performances.\n     */\n    get backfaceDepthTextureSizeFactor() {\n        return this._backfaceDepthTextureSizeFactor;\n    }\n    set backfaceDepthTextureSizeFactor(factor) {\n        if (this._backfaceDepthTextureSizeFactor === factor) {\n            return;\n        }\n        this._backfaceDepthTextureSizeFactor = factor;\n        this._resizeDepthRenderer();\n    }\n    /**\n     * Gets or sets a boolean indicating if the effect is enabled (default: true).\n     */\n    get isEnabled() {\n        return this._isEnabled;\n    }\n    set isEnabled(value) {\n        if (this._isEnabled === value) {\n            return;\n        }\n        this._isEnabled = value;\n        if (!value) {\n            if (this._cameras !== null) {\n                this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._cameras);\n                this._cameras = this._camerasToBeAttached.slice();\n            }\n        }\n        else if (value) {\n            if (!this._isDirty) {\n                if (this._cameras !== null) {\n                    this._scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(this._name, this._cameras);\n                }\n            }\n            else {\n                this._buildPipeline();\n            }\n        }\n    }\n    /**\n     * Gets or sets a boolean indicating if the effect should be rendered in debug mode (default: false).\n     * In this mode, colors have this meaning:\n     *   - blue: the ray hit the max distance (we reached maxDistance)\n     *   - red: the ray ran out of steps (we reached maxSteps)\n     *   - yellow: the ray went off screen\n     *   - green: the ray hit a surface. The brightness of the green color is proportional to the distance between the ray origin and the intersection point: A brighter green means more computation than a darker green.\n     * In the first 3 cases, the final color is calculated by mixing the skybox color with the pixel color (if environmentTexture is defined), otherwise the pixel color is not modified\n     * You should try to get as few blue/red/yellow pixels as possible, as this means that the ray has gone further than if it had hit a surface.\n     */\n    get debug() {\n        return this._debug;\n    }\n    set debug(value) {\n        if (this._debug === value) {\n            return;\n        }\n        this._debug = value;\n        this._buildPipeline();\n    }\n    get _geometryBufferRenderer() {\n        if (!this._forceGeometryBuffer) {\n            return null;\n        }\n        return this._scene.geometryBufferRenderer;\n    }\n    get _prePassRenderer() {\n        if (this._forceGeometryBuffer) {\n            return null;\n        }\n        return this._scene.prePassRenderer;\n    }\n    /**\n     * Gets active scene\n     */\n    get scene() {\n        return this._scene;\n    }\n    /**\n     * Constructor of the SSR rendering pipeline\n     * @param name The rendering pipeline name\n     * @param scene The scene linked to this pipeline\n     * @param cameras The array of cameras that the rendering pipeline will be attached to (default: scene.cameras)\n     * @param forceGeometryBuffer Set to true if you want to use the legacy geometry buffer renderer (default: false)\n     * @param textureType The texture type used by the different post processes created by SSR (default: 0)\n     */\n    constructor(name, scene, cameras, forceGeometryBuffer = false, textureType = 0) {\n        super(scene.getEngine(), name);\n        /**\n         * The SSR PostProcess effect id in the pipeline\n         */\n        this.SSRRenderEffect = \"SSRRenderEffect\";\n        /**\n         * The blur PostProcess effect id in the pipeline\n         */\n        this.SSRBlurRenderEffect = \"SSRBlurRenderEffect\";\n        /**\n         * The PostProcess effect id in the pipeline that combines the SSR-Blur output with the original scene color\n         */\n        this.SSRCombineRenderEffect = \"SSRCombineRenderEffect\";\n        this._samples = 1;\n        /**\n         * Gets or sets the maxDistance used to define how far we look for reflection during the ray-marching on the reflected ray (default: 1000).\n         * Note that this value is a view (camera) space distance (not pixels!).\n         */\n        this.maxDistance = 1000.0;\n        /**\n         * Gets or sets the step size used to iterate until the effect finds the color of the reflection's pixel. Should be an integer \\>= 1 as it is the number of pixels we advance at each step (default: 1).\n         * Use higher values to improve performances (but at the expense of quality).\n         */\n        this.step = 1.0;\n        /**\n         * Gets or sets the thickness value used as tolerance when computing the intersection between the reflected ray and the scene (default: 0.5).\n         * If setting \"enableAutomaticThicknessComputation\" to true, you can use lower values for \"thickness\" (even 0), as the geometry thickness\n         * is automatically computed thank to the regular depth buffer + the backface depth buffer\n         */\n        this.thickness = 0.5;\n        /**\n         * Gets or sets the current reflection strength. 1.0 is an ideal value but can be increased/decreased for particular results (default: 1).\n         */\n        this.strength = 1;\n        /**\n         * Gets or sets the falloff exponent used to compute the reflection strength. Higher values lead to fainter reflections (default: 1).\n         */\n        this.reflectionSpecularFalloffExponent = 1;\n        /**\n         * Maximum number of steps during the ray marching process after which we consider an intersection could not be found (default: 1000)\n         */\n        this.maxSteps = 1000.0;\n        /**\n         * Gets or sets the factor applied when computing roughness. Default value is 0.2.\n         * When blurring based on roughness is enabled (meaning blurDispersionStrength \\> 0), roughnessFactor is used as a global roughness factor applied on all objects.\n         * If you want to disable this global roughness set it to 0.\n         */\n        this.roughnessFactor = 0.2;\n        /**\n         * Number of steps to skip at start when marching the ray to avoid self collisions (default: 1)\n         * 1 should normally be a good value, depending on the scene you may need to use a higher value (2 or 3)\n         */\n        this.selfCollisionNumSkip = 1;\n        this._blurDispersionStrength = 1 / 20;\n        /**\n         * Apply different weighting when blurring.\n         * Must be a value between 2 and 5\n         */\n        this.blurQuality = 2;\n        this._enableSmoothReflections = false;\n        this._environmentTextureIsProbe = false;\n        this._attenuateScreenBorders = true;\n        this._attenuateIntersectionDistance = true;\n        this._attenuateFacingCamera = false;\n        this._attenuateBackfaceReflection = false;\n        this._clipToFrustum = true;\n        this._enableAutomaticThicknessComputation = false;\n        this._backfaceDepthTextureSizeFactor = 1;\n        this._isEnabled = true;\n        this._debug = false;\n        this._forceGeometryBuffer = false;\n        this._isDirty = false;\n        this._camerasToBeAttached = [];\n        this._cameras = cameras || scene.cameras;\n        this._cameras = this._cameras.slice();\n        this._camerasToBeAttached = this._cameras.slice();\n        this._scene = scene;\n        this._textureType = textureType;\n        this._forceGeometryBuffer = forceGeometryBuffer;\n        if (!this.isSupported) {\n            Logger.Error(\"The current engine does not support SSR.\");\n            return;\n        }\n        scene.postProcessRenderPipelineManager.addPipeline(this);\n        if (this._forceGeometryBuffer) {\n            const geometryBufferRenderer = scene.enableGeometryBufferRenderer();\n            if (geometryBufferRenderer) {\n                geometryBufferRenderer.enableReflectivity = true;\n            }\n        }\n        else {\n            const prePassRenderer = scene.enablePrePassRenderer();\n            prePassRenderer === null || prePassRenderer === void 0 ? void 0 : prePassRenderer.markAsDirty();\n        }\n        this._buildPipeline();\n    }\n    /**\n     * Get the class name\n     * @returns \"SSRRenderingPipeline\"\n     */\n    getClassName() {\n        return \"SSRRenderingPipeline\";\n    }\n    /**\n     * Adds a camera to the pipeline\n     * @param camera the camera to be added\n     */\n    addCamera(camera) {\n        this._camerasToBeAttached.push(camera);\n        this._buildPipeline();\n    }\n    /**\n     * Removes a camera from the pipeline\n     * @param camera the camera to remove\n     */\n    removeCamera(camera) {\n        const index = this._camerasToBeAttached.indexOf(camera);\n        this._camerasToBeAttached.splice(index, 1);\n        this._buildPipeline();\n    }\n    /**\n     * Removes the internal pipeline assets and detaches the pipeline from the scene cameras\n     * @param disableGeometryBufferRenderer\n     */\n    dispose(disableGeometryBufferRenderer = false) {\n        this._disposeDepthRenderer();\n        this._disposePostProcesses();\n        if (disableGeometryBufferRenderer) {\n            this._scene.disableGeometryBufferRenderer();\n        }\n        this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._cameras);\n        super.dispose();\n    }\n    _getTextureSize() {\n        const engine = this._scene.getEngine();\n        const geometryBufferRenderer = this._geometryBufferRenderer;\n        const prePassRenderer = this._prePassRenderer;\n        let textureSize = { width: engine.getRenderWidth(), height: engine.getRenderHeight() };\n        if (geometryBufferRenderer) {\n            textureSize = geometryBufferRenderer.getGBuffer().textures[0].getSize();\n        }\n        else if (prePassRenderer) {\n            const depthIndex = prePassRenderer.getIndex(5);\n            const renderTarget = prePassRenderer.getRenderTarget();\n            if (renderTarget && renderTarget.textures) {\n                textureSize = renderTarget.textures[depthIndex].getSize();\n            }\n        }\n        return textureSize;\n    }\n    _updateEffectDefines() {\n        var _a;\n        const defines = [];\n        if (this._geometryBufferRenderer || this._prePassRenderer) {\n            defines.push(\"#define SSR_SUPPORTED\");\n        }\n        if (this._enableSmoothReflections) {\n            defines.push(\"#define SSRAYTRACE_ENABLE_REFINEMENT\");\n        }\n        if (this._scene.useRightHandedSystem) {\n            defines.push(\"#define SSRAYTRACE_RIGHT_HANDED_SCENE\");\n        }\n        if (this._environmentTexture) {\n            defines.push(\"#define SSR_USE_ENVIRONMENT_CUBE\");\n            if (this._environmentTexture.boundingBoxSize) {\n                defines.push(\"#define SSR_USE_LOCAL_REFLECTIONMAP_CUBIC\");\n            }\n        }\n        if (this._environmentTextureIsProbe) {\n            defines.push(\"#define SSR_INVERTCUBICMAP\");\n        }\n        if (this._enableAutomaticThicknessComputation) {\n            defines.push(\"#define SSRAYTRACE_USE_BACK_DEPTHBUFFER\");\n        }\n        if (this._attenuateScreenBorders) {\n            defines.push(\"#define SSR_ATTENUATE_SCREEN_BORDERS\");\n        }\n        if (this._attenuateIntersectionDistance) {\n            defines.push(\"#define SSR_ATTENUATE_INTERSECTION_DISTANCE\");\n        }\n        if (this._attenuateFacingCamera) {\n            defines.push(\"#define SSR_ATTENUATE_FACING_CAMERA\");\n        }\n        if (this._attenuateBackfaceReflection) {\n            defines.push(\"#define SSR_ATTENUATE_BACKFACE_REFLECTION\");\n        }\n        if (this._clipToFrustum) {\n            defines.push(\"#define SSRAYTRACE_CLIP_TO_FRUSTUM\");\n        }\n        if (this._blurDispersionStrength > 0) {\n            defines.push(\"#define SSR_USE_BLUR\");\n        }\n        if (this._debug) {\n            defines.push(\"#define SSRAYTRACE_DEBUG\");\n        }\n        (_a = this._ssrPostProcess) === null || _a === void 0 ? void 0 : _a.updateEffect(defines.join(\"\\n\"));\n    }\n    _buildPipeline() {\n        var _a;\n        if (!this._isEnabled) {\n            this._isDirty = true;\n            return;\n        }\n        this._isDirty = false;\n        const engine = this._scene.getEngine();\n        this._disposeDepthRenderer();\n        this._disposePostProcesses();\n        if (this._cameras !== null) {\n            this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._cameras);\n            // get back cameras to be used to reattach pipeline\n            this._cameras = this._camerasToBeAttached.slice();\n        }\n        this._reset();\n        if (this._enableAutomaticThicknessComputation) {\n            const camera = (_a = this._cameras) === null || _a === void 0 ? void 0 : _a[0];\n            if (camera) {\n                this._depthRendererCamera = camera;\n                this._depthRenderer = new DepthRenderer(this._scene, undefined, undefined, undefined, 1, true, \"SSRBackDepth\");\n                this._depthRenderer.clearColor.r = 1e8; // put a big value because we use the storeCameraSpaceZ mode\n                this._depthRenderer.reverseCulling = true; // we generate depth for the back faces\n                this._depthRenderer.getDepthMap().noPrePassRenderer = true; // we don't want the prepass renderer to attach to our depth buffer!\n                this._resizeDepthRenderer();\n                camera.customRenderTargets.push(this._depthRenderer.getDepthMap());\n            }\n        }\n        this._createSSRPostProcess();\n        this.addEffect(new PostProcessRenderEffect(engine, this.SSRRenderEffect, () => {\n            return this._ssrPostProcess;\n        }, true));\n        if (this._blurDispersionStrength > 0) {\n            this._createBlurAndCombinerPostProcesses();\n            this.addEffect(new PostProcessRenderEffect(engine, this.SSRBlurRenderEffect, () => {\n                return [this._blurPostProcessX, this._blurPostProcessY];\n            }, true));\n            this.addEffect(new PostProcessRenderEffect(engine, this.SSRCombineRenderEffect, () => {\n                return this._blurCombinerPostProcess;\n            }, true));\n        }\n        if (this._cameras !== null) {\n            this._scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(this._name, this._cameras);\n        }\n    }\n    _resizeDepthRenderer() {\n        if (!this._depthRenderer) {\n            return;\n        }\n        const textureSize = this._getTextureSize();\n        const depthRendererSize = this._depthRenderer.getDepthMap().getSize();\n        const width = Math.floor(textureSize.width / this._backfaceDepthTextureSizeFactor);\n        const height = Math.floor(textureSize.height / this._backfaceDepthTextureSizeFactor);\n        if (depthRendererSize.width !== width || depthRendererSize.height !== height) {\n            this._depthRenderer.getDepthMap().resize({ width, height });\n        }\n    }\n    _disposeDepthRenderer() {\n        var _a;\n        if (this._depthRenderer) {\n            if (this._depthRendererCamera) {\n                const idx = (_a = this._depthRendererCamera.customRenderTargets.indexOf(this._depthRenderer.getDepthMap())) !== null && _a !== void 0 ? _a : -1;\n                if (idx !== -1) {\n                    this._depthRendererCamera.customRenderTargets.splice(idx, 1);\n                }\n            }\n            this._depthRendererCamera = null;\n            this._depthRenderer.getDepthMap().dispose();\n        }\n        this._depthRenderer = null;\n    }\n    _disposePostProcesses() {\n        var _a, _b, _c, _d;\n        for (let i = 0; i < this._cameras.length; i++) {\n            const camera = this._cameras[i];\n            (_a = this._ssrPostProcess) === null || _a === void 0 ? void 0 : _a.dispose(camera);\n            (_b = this._blurPostProcessX) === null || _b === void 0 ? void 0 : _b.dispose(camera);\n            (_c = this._blurPostProcessY) === null || _c === void 0 ? void 0 : _c.dispose(camera);\n            (_d = this._blurCombinerPostProcess) === null || _d === void 0 ? void 0 : _d.dispose(camera);\n        }\n        this._ssrPostProcess = null;\n        this._blurPostProcessX = null;\n        this._blurPostProcessY = null;\n        this._blurCombinerPostProcess = null;\n    }\n    _createSSRPostProcess() {\n        this._ssrPostProcess = new PostProcess(\"ssr\", \"screenSpaceReflection2\", [\n            \"projection\",\n            \"invProjectionMatrix\",\n            \"view\",\n            \"invView\",\n            \"thickness\",\n            \"reflectionSpecularFalloffExponent\",\n            \"strength\",\n            \"stepSize\",\n            \"maxSteps\",\n            \"roughnessFactor\",\n            \"projectionPixel\",\n            \"nearPlaneZ\",\n            \"maxDistance\",\n            \"selfCollisionNumSkip\",\n            \"vReflectionPosition\",\n            \"vReflectionSize\",\n            \"backSizeFactor\",\n        ], [\"textureSampler\", \"normalSampler\", \"reflectivitySampler\", \"depthSampler\", \"envCubeSampler\", \"backDepthSampler\"], 1.0, null, this._textureType, this._scene.getEngine(), false, \"\", this._textureType);\n        this._updateEffectDefines();\n        this._ssrPostProcess.onApply = (effect) => {\n            this._resizeDepthRenderer();\n            const geometryBufferRenderer = this._geometryBufferRenderer;\n            const prePassRenderer = this._prePassRenderer;\n            if (!prePassRenderer && !geometryBufferRenderer) {\n                return;\n            }\n            if (geometryBufferRenderer) {\n                const roughnessIndex = geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE);\n                effect.setTexture(\"normalSampler\", geometryBufferRenderer.getGBuffer().textures[1]);\n                effect.setTexture(\"reflectivitySampler\", geometryBufferRenderer.getGBuffer().textures[roughnessIndex]);\n                effect.setTexture(\"depthSampler\", geometryBufferRenderer.getGBuffer().textures[0]);\n            }\n            else if (prePassRenderer) {\n                const depthIndex = prePassRenderer.getIndex(5);\n                const roughnessIndex = prePassRenderer.getIndex(3);\n                const normalIndex = prePassRenderer.getIndex(6);\n                effect.setTexture(\"normalSampler\", prePassRenderer.getRenderTarget().textures[normalIndex]);\n                effect.setTexture(\"depthSampler\", prePassRenderer.getRenderTarget().textures[depthIndex]);\n                effect.setTexture(\"reflectivitySampler\", prePassRenderer.getRenderTarget().textures[roughnessIndex]);\n            }\n            if (this._enableAutomaticThicknessComputation && this._depthRenderer) {\n                effect.setTexture(\"backDepthSampler\", this._depthRenderer.getDepthMap());\n                effect.setFloat(\"backSizeFactor\", this._backfaceDepthTextureSizeFactor);\n            }\n            const camera = this._scene.activeCamera;\n            if (!camera) {\n                return;\n            }\n            const viewMatrix = camera.getViewMatrix(true);\n            const projectionMatrix = camera.getProjectionMatrix(true);\n            projectionMatrix.invertToRef(TmpVectors.Matrix[0]);\n            viewMatrix.invertToRef(TmpVectors.Matrix[1]);\n            effect.setMatrix(\"projection\", projectionMatrix);\n            effect.setMatrix(\"view\", viewMatrix);\n            effect.setMatrix(\"invView\", TmpVectors.Matrix[1]);\n            effect.setMatrix(\"invProjectionMatrix\", TmpVectors.Matrix[0]);\n            effect.setFloat(\"thickness\", this.thickness);\n            effect.setFloat(\"reflectionSpecularFalloffExponent\", this.reflectionSpecularFalloffExponent);\n            effect.setFloat(\"strength\", this.strength);\n            effect.setFloat(\"stepSize\", this.step);\n            effect.setFloat(\"maxSteps\", this.maxSteps);\n            effect.setFloat(\"roughnessFactor\", this.roughnessFactor);\n            effect.setFloat(\"nearPlaneZ\", camera.minZ);\n            effect.setFloat(\"maxDistance\", this.maxDistance);\n            effect.setFloat(\"selfCollisionNumSkip\", this.selfCollisionNumSkip);\n            const textureSize = this._getTextureSize();\n            Matrix.ScalingToRef(textureSize.width, textureSize.height, 1, TmpVectors.Matrix[2]);\n            projectionMatrix.multiplyToRef(this._scene.getEngine().isWebGPU ? trsWebGPU : trs, TmpVectors.Matrix[3]);\n            TmpVectors.Matrix[3].multiplyToRef(TmpVectors.Matrix[2], TmpVectors.Matrix[4]);\n            effect.setMatrix(\"projectionPixel\", TmpVectors.Matrix[4]);\n            if (this._environmentTexture) {\n                effect.setTexture(\"envCubeSampler\", this._environmentTexture);\n                if (this._environmentTexture.boundingBoxSize) {\n                    effect.setVector3(\"vReflectionPosition\", this._environmentTexture.boundingBoxPosition);\n                    effect.setVector3(\"vReflectionSize\", this._environmentTexture.boundingBoxSize);\n                }\n            }\n        };\n        this._ssrPostProcess.samples = this.samples;\n        if (!this._forceGeometryBuffer) {\n            this._ssrPostProcess._prePassEffectConfiguration = new ScreenSpaceReflections2Configuration();\n        }\n    }\n    _createBlurAndCombinerPostProcesses() {\n        const engine = this._scene.getEngine();\n        this._blurPostProcessX = new PostProcess(\"SSRblurX\", \"screenSpaceReflection2Blur\", [\"blurQuality\", \"texelOffsetScale\"], [\"textureSampler\"], 1, null, 2, engine, false, \"\", this._textureType);\n        this._blurPostProcessX.autoClear = false;\n        this._blurPostProcessX.onApplyObservable.add((effect) => {\n            var _a, _b;\n            let width = this._scene.getEngine().getRenderWidth();\n            if (this._prePassRenderer) {\n                const colorIndex = this._prePassRenderer.getIndex(4);\n                const renderTarget = this._prePassRenderer.getRenderTarget();\n                if (renderTarget && renderTarget.textures) {\n                    width = renderTarget.textures[colorIndex].getSize().width;\n                }\n            }\n            else {\n                width = (_b = (_a = this._ssrPostProcess) === null || _a === void 0 ? void 0 : _a.inputTexture.width) !== null && _b !== void 0 ? _b : width;\n            }\n            effect.setFloat(\"blurQuality\", this.blurQuality);\n            effect.setFloat2(\"texelOffsetScale\", this._blurDispersionStrength / width, 0);\n        });\n        this._blurPostProcessY = new PostProcess(\"SSRblurY\", \"screenSpaceReflection2Blur\", [\"blurQuality\", \"texelOffsetScale\"], [\"textureSampler\"], 1, null, 2, engine, false, \"\", this._textureType);\n        this._blurPostProcessY.autoClear = false;\n        this._blurPostProcessY.onApplyObservable.add((effect) => {\n            var _a, _b;\n            let height = this._scene.getEngine().getRenderHeight();\n            if (this._prePassRenderer) {\n                const colorIndex = this._prePassRenderer.getIndex(4);\n                const renderTarget = this._prePassRenderer.getRenderTarget();\n                if (renderTarget && renderTarget.textures) {\n                    height = renderTarget.textures[colorIndex].getSize().height;\n                }\n            }\n            else {\n                height = (_b = (_a = this._ssrPostProcess) === null || _a === void 0 ? void 0 : _a.inputTexture.height) !== null && _b !== void 0 ? _b : height;\n            }\n            effect.setFloat(\"blurQuality\", this.blurQuality);\n            effect.setFloat2(\"texelOffsetScale\", 0, this._blurDispersionStrength / height);\n        });\n        this._blurCombinerPostProcess = new PostProcess(\"SSRblurCombiner\", \"screenSpaceReflection2BlurCombiner\", [\"strength\", \"reflectionSpecularFalloffExponent\"], [\"textureSampler\", \"mainSampler\", \"reflectivitySampler\"], 1, null, 1, engine, false, \"\", this._textureType);\n        this._blurCombinerPostProcess.autoClear = false;\n        this._blurCombinerPostProcess.onApplyObservable.add((effect) => {\n            const geometryBufferRenderer = this._geometryBufferRenderer;\n            const prePassRenderer = this._prePassRenderer;\n            if (!prePassRenderer && !geometryBufferRenderer) {\n                return;\n            }\n            if (prePassRenderer) {\n                const colorIndex = prePassRenderer.getIndex(4);\n                const renderTarget = prePassRenderer.getRenderTarget();\n                if (renderTarget && renderTarget.textures) {\n                    effect.setTexture(\"mainSampler\", renderTarget.textures[colorIndex]);\n                }\n            }\n            else {\n                effect._bindTexture(\"mainSampler\", this._ssrPostProcess.inputTexture.texture);\n            }\n            if (geometryBufferRenderer) {\n                const roughnessIndex = geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE);\n                effect.setTexture(\"reflectivitySampler\", geometryBufferRenderer.getGBuffer().textures[roughnessIndex]);\n            }\n            else if (prePassRenderer) {\n                const roughnessIndex = prePassRenderer.getIndex(3);\n                effect.setTexture(\"reflectivitySampler\", prePassRenderer.getRenderTarget().textures[roughnessIndex]);\n            }\n            effect.setFloat(\"strength\", this.strength);\n            effect.setFloat(\"reflectionSpecularFalloffExponent\", this.reflectionSpecularFalloffExponent);\n        });\n    }\n    /**\n     * Serializes the rendering pipeline (Used when exporting)\n     * @returns the serialized object\n     */\n    serialize() {\n        const serializationObject = SerializationHelper.Serialize(this);\n        serializationObject.customType = \"SSRRenderingPipeline\";\n        return serializationObject;\n    }\n    /**\n     * Parse the serialized pipeline\n     * @param source Source pipeline.\n     * @param scene The scene to load the pipeline to.\n     * @param rootUrl The URL of the serialized pipeline.\n     * @returns An instantiated pipeline from the serialized object.\n     */\n    static Parse(source, scene, rootUrl) {\n        return SerializationHelper.Parse(() => new SSRRenderingPipeline(source._name, scene, source._ratio), source, scene, rootUrl);\n    }\n}\n__decorate([\n    serialize()\n], SSRRenderingPipeline.prototype, \"samples\", null);\n__decorate([\n    serialize()\n], SSRRenderingPipeline.prototype, \"maxDistance\", void 0);\n__decorate([\n    serialize()\n], SSRRenderingPipeline.prototype, \"step\", void 0);\n__decorate([\n    serialize()\n], SSRRenderingPipeline.prototype, \"thickness\", void 0);\n__decorate([\n    serialize()\n], SSRRenderingPipeline.prototype, \"strength\", void 0);\n__decorate([\n    serialize()\n], SSRRenderingPipeline.prototype, \"reflectionSpecularFalloffExponent\", void 0);\n__decorate([\n    serialize()\n], SSRRenderingPipeline.prototype, \"maxSteps\", void 0);\n__decorate([\n    serialize()\n], SSRRenderingPipeline.prototype, \"roughnessFactor\", void 0);\n__decorate([\n    serialize()\n], SSRRenderingPipeline.prototype, \"selfCollisionNumSkip\", void 0);\n__decorate([\n    serialize(\"blurDispersionStrength\")\n], SSRRenderingPipeline.prototype, \"_blurDispersionStrength\", void 0);\n__decorate([\n    serialize()\n], SSRRenderingPipeline.prototype, \"blurQuality\", void 0);\n__decorate([\n    serialize(\"enableSmoothReflections\")\n], SSRRenderingPipeline.prototype, \"_enableSmoothReflections\", void 0);\n__decorate([\n    serialize(\"environmentTexture\")\n], SSRRenderingPipeline.prototype, \"_environmentTexture\", void 0);\n__decorate([\n    serialize(\"environmentTextureIsProbe\")\n], SSRRenderingPipeline.prototype, \"_environmentTextureIsProbe\", void 0);\n__decorate([\n    serialize(\"attenuateScreenBorders\")\n], SSRRenderingPipeline.prototype, \"_attenuateScreenBorders\", void 0);\n__decorate([\n    serialize(\"attenuateIntersectionDistance\")\n], SSRRenderingPipeline.prototype, \"_attenuateIntersectionDistance\", void 0);\n__decorate([\n    serialize(\"attenuateFacingCamera\")\n], SSRRenderingPipeline.prototype, \"_attenuateFacingCamera\", void 0);\n__decorate([\n    serialize(\"attenuateBackfaceReflection\")\n], SSRRenderingPipeline.prototype, \"_attenuateBackfaceReflection\", void 0);\n__decorate([\n    serialize(\"clipToFrustum\")\n], SSRRenderingPipeline.prototype, \"_clipToFrustum\", void 0);\n__decorate([\n    serialize(\"enableAutomaticThicknessComputation\")\n], SSRRenderingPipeline.prototype, \"_enableAutomaticThicknessComputation\", void 0);\n__decorate([\n    serialize(\"backfaceDepthTextureSizeFactor\")\n], SSRRenderingPipeline.prototype, \"_backfaceDepthTextureSizeFactor\", void 0);\n__decorate([\n    serialize(\"isEnabled\")\n], SSRRenderingPipeline.prototype, \"_isEnabled\", void 0);\n__decorate([\n    serialize(\"debug\")\n], SSRRenderingPipeline.prototype, \"_debug\", void 0);\nRegisterClass(\"BABYLON.SSRRenderingPipeline\", SSRRenderingPipeline);\n//# sourceMappingURL=ssrRenderingPipeline.js.map","import { PostProcess } from \"./postProcess.js\";\n\nimport \"../Shaders/tonemap.fragment.js\";\n/** Defines operator used for tonemapping */\nexport var TonemappingOperator;\n(function (TonemappingOperator) {\n    /** Hable */\n    TonemappingOperator[TonemappingOperator[\"Hable\"] = 0] = \"Hable\";\n    /** Reinhard */\n    TonemappingOperator[TonemappingOperator[\"Reinhard\"] = 1] = \"Reinhard\";\n    /** HejiDawson */\n    TonemappingOperator[TonemappingOperator[\"HejiDawson\"] = 2] = \"HejiDawson\";\n    /** Photographic */\n    TonemappingOperator[TonemappingOperator[\"Photographic\"] = 3] = \"Photographic\";\n})(TonemappingOperator || (TonemappingOperator = {}));\n/**\n * Defines a post process to apply tone mapping\n */\nexport class TonemapPostProcess extends PostProcess {\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"TonemapPostProcess\" string\n     */\n    getClassName() {\n        return \"TonemapPostProcess\";\n    }\n    /**\n     * Creates a new TonemapPostProcess\n     * @param name defines the name of the postprocess\n     * @param _operator defines the operator to use\n     * @param exposureAdjustment defines the required exposure adjustment\n     * @param camera defines the camera to use (can be null)\n     * @param samplingMode defines the required sampling mode (BABYLON.Texture.BILINEAR_SAMPLINGMODE by default)\n     * @param engine defines the hosting engine (can be ignore if camera is set)\n     * @param textureFormat defines the texture format to use (BABYLON.Engine.TEXTURETYPE_UNSIGNED_INT by default)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     */\n    constructor(name, _operator, \n    /** Defines the required exposure adjustment */\n    exposureAdjustment, camera, samplingMode = 2, engine, textureFormat = 0, reusable) {\n        super(name, \"tonemap\", [\"_ExposureAdjustment\"], null, 1.0, camera, samplingMode, engine, reusable, null, textureFormat);\n        this._operator = _operator;\n        this.exposureAdjustment = exposureAdjustment;\n        let defines = \"#define \";\n        if (this._operator === TonemappingOperator.Hable) {\n            defines += \"HABLE_TONEMAPPING\";\n        }\n        else if (this._operator === TonemappingOperator.Reinhard) {\n            defines += \"REINHARD_TONEMAPPING\";\n        }\n        else if (this._operator === TonemappingOperator.HejiDawson) {\n            defines += \"OPTIMIZED_HEJIDAWSON_TONEMAPPING\";\n        }\n        else if (this._operator === TonemappingOperator.Photographic) {\n            defines += \"PHOTOGRAPHIC_TONEMAPPING\";\n        }\n        //sadly a second call to create the effect.\n        this.updateEffect(defines);\n        this.onApply = (effect) => {\n            effect.setFloat(\"_ExposureAdjustment\", this.exposureAdjustment);\n        };\n    }\n}\n//# sourceMappingURL=tonemapPostProcess.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { serializeAsVector3, serialize, serializeAsMeshReference } from \"../Misc/decorators.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { Vector2, Vector3, Matrix } from \"../Maths/math.vector.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { AbstractMesh } from \"../Meshes/abstractMesh.js\";\nimport { Material } from \"../Materials/material.js\";\nimport { MaterialHelper } from \"../Materials/materialHelper.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture.js\";\nimport { PostProcess } from \"./postProcess.js\";\n\nimport { CreatePlane } from \"../Meshes/Builders/planeBuilder.js\";\nimport \"../Shaders/depth.vertex.js\";\nimport \"../Shaders/volumetricLightScattering.fragment.js\";\nimport \"../Shaders/volumetricLightScatteringPass.vertex.js\";\nimport \"../Shaders/volumetricLightScatteringPass.fragment.js\";\nimport { Color4, Color3 } from \"../Maths/math.color.js\";\nimport { Viewport } from \"../Maths/math.viewport.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\n/**\n *  Inspired by https://developer.nvidia.com/gpugems/gpugems3/part-ii-light-and-shadows/chapter-13-volumetric-light-scattering-post-process\n */\nexport class VolumetricLightScatteringPostProcess extends PostProcess {\n    /**\n     * @internal\n     * VolumetricLightScatteringPostProcess.useDiffuseColor is no longer used, use the mesh material directly instead\n     */\n    get useDiffuseColor() {\n        Logger.Warn(\"VolumetricLightScatteringPostProcess.useDiffuseColor is no longer used, use the mesh material directly instead\");\n        return false;\n    }\n    set useDiffuseColor(useDiffuseColor) {\n        Logger.Warn(\"VolumetricLightScatteringPostProcess.useDiffuseColor is no longer used, use the mesh material directly instead\");\n    }\n    /**\n     * @constructor\n     * @param name The post-process name\n     * @param ratio The size of the post-process and/or internal pass (0.5 means that your postprocess will have a width = canvas.width 0.5 and a height = canvas.height 0.5)\n     * @param camera The camera that the post-process will be attached to\n     * @param mesh The mesh used to create the light scattering\n     * @param samples The post-process quality, default 100\n     * @param samplingMode The post-process filtering mode\n     * @param engine The babylon engine\n     * @param reusable If the post-process is reusable\n     * @param scene The constructor needs a scene reference to initialize internal components. If \"camera\" is null a \"scene\" must be provided\n     */\n    constructor(name, ratio, camera, mesh, samples = 100, samplingMode = Texture.BILINEAR_SAMPLINGMODE, engine, reusable, scene) {\n        var _a, _b;\n        super(name, \"volumetricLightScattering\", [\"decay\", \"exposure\", \"weight\", \"meshPositionOnScreen\", \"density\"], [\"lightScatteringSampler\"], ratio.postProcessRatio || ratio, camera, samplingMode, engine, reusable, \"#define NUM_SAMPLES \" + samples);\n        this._screenCoordinates = Vector2.Zero();\n        /**\n         * Custom position of the mesh. Used if \"useCustomMeshPosition\" is set to \"true\"\n         */\n        this.customMeshPosition = Vector3.Zero();\n        /**\n         * Set if the post-process should use a custom position for the light source (true) or the internal mesh position (false)\n         */\n        this.useCustomMeshPosition = false;\n        /**\n         * If the post-process should inverse the light scattering direction\n         */\n        this.invert = true;\n        /**\n         * Array containing the excluded meshes not rendered in the internal pass\n         */\n        this.excludedMeshes = new Array();\n        /**\n         * Array containing the only meshes rendered in the internal pass.\n         * If this array is not empty, only the meshes from this array are rendered in the internal pass\n         */\n        this.includedMeshes = new Array();\n        /**\n         * Controls the overall intensity of the post-process\n         */\n        this.exposure = 0.3;\n        /**\n         * Dissipates each sample's contribution in range [0, 1]\n         */\n        this.decay = 0.96815;\n        /**\n         * Controls the overall intensity of each sample\n         */\n        this.weight = 0.58767;\n        /**\n         * Controls the density of each sample\n         */\n        this.density = 0.926;\n        scene = (_b = (_a = camera === null || camera === void 0 ? void 0 : camera.getScene()) !== null && _a !== void 0 ? _a : scene) !== null && _b !== void 0 ? _b : this._scene; // parameter \"scene\" can be null.\n        engine = scene.getEngine();\n        this._viewPort = new Viewport(0, 0, 1, 1).toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\n        // Configure mesh\n        this.mesh = mesh !== null && mesh !== void 0 ? mesh : VolumetricLightScatteringPostProcess.CreateDefaultMesh(\"VolumetricLightScatteringMesh\", scene);\n        // Configure\n        this._createPass(scene, ratio.passRatio || ratio);\n        this.onActivate = (camera) => {\n            if (!this.isSupported) {\n                this.dispose(camera);\n            }\n            this.onActivate = null;\n        };\n        this.onApplyObservable.add((effect) => {\n            this._updateMeshScreenCoordinates(scene);\n            effect.setTexture(\"lightScatteringSampler\", this._volumetricLightScatteringRTT);\n            effect.setFloat(\"exposure\", this.exposure);\n            effect.setFloat(\"decay\", this.decay);\n            effect.setFloat(\"weight\", this.weight);\n            effect.setFloat(\"density\", this.density);\n            effect.setVector2(\"meshPositionOnScreen\", this._screenCoordinates);\n        });\n    }\n    /**\n     * Returns the string \"VolumetricLightScatteringPostProcess\"\n     * @returns \"VolumetricLightScatteringPostProcess\"\n     */\n    getClassName() {\n        return \"VolumetricLightScatteringPostProcess\";\n    }\n    _isReady(subMesh, useInstances) {\n        var _a;\n        const mesh = subMesh.getMesh();\n        // Render this.mesh as default\n        if (mesh === this.mesh && mesh.material) {\n            return mesh.material.isReady(mesh);\n        }\n        const renderingMaterial = (_a = mesh._internalAbstractMeshDataInfo._materialForRenderPass) === null || _a === void 0 ? void 0 : _a[this._scene.getEngine().currentRenderPassId];\n        if (renderingMaterial) {\n            return renderingMaterial.isReadyForSubMesh(mesh, subMesh, useInstances);\n        }\n        const defines = [];\n        const attribs = [VertexBuffer.PositionKind];\n        const material = subMesh.getMaterial();\n        // Alpha test\n        if (material) {\n            if (material.needAlphaTesting()) {\n                defines.push(\"#define ALPHATEST\");\n            }\n            if (mesh.isVerticesDataPresent(VertexBuffer.UVKind)) {\n                attribs.push(VertexBuffer.UVKind);\n                defines.push(\"#define UV1\");\n            }\n            if (mesh.isVerticesDataPresent(VertexBuffer.UV2Kind)) {\n                attribs.push(VertexBuffer.UV2Kind);\n                defines.push(\"#define UV2\");\n            }\n        }\n        // Bones\n        if (mesh.useBones && mesh.computeBonesUsingShaders) {\n            attribs.push(VertexBuffer.MatricesIndicesKind);\n            attribs.push(VertexBuffer.MatricesWeightsKind);\n            defines.push(\"#define NUM_BONE_INFLUENCERS \" + mesh.numBoneInfluencers);\n            defines.push(\"#define BonesPerMesh \" + (mesh.skeleton ? mesh.skeleton.bones.length + 1 : 0));\n        }\n        else {\n            defines.push(\"#define NUM_BONE_INFLUENCERS 0\");\n        }\n        // Instances\n        if (useInstances) {\n            defines.push(\"#define INSTANCES\");\n            MaterialHelper.PushAttributesForInstances(attribs);\n            if (subMesh.getRenderingMesh().hasThinInstances) {\n                defines.push(\"#define THIN_INSTANCES\");\n            }\n        }\n        // Get correct effect\n        const drawWrapper = subMesh._getDrawWrapper(undefined, true);\n        const cachedDefines = drawWrapper.defines;\n        const join = defines.join(\"\\n\");\n        if (cachedDefines !== join) {\n            drawWrapper.setEffect(mesh\n                .getScene()\n                .getEngine()\n                .createEffect(\"volumetricLightScatteringPass\", attribs, [\"world\", \"mBones\", \"viewProjection\", \"diffuseMatrix\"], [\"diffuseSampler\"], join, undefined, undefined, undefined, { maxSimultaneousMorphTargets: mesh.numBoneInfluencers }), join);\n        }\n        return drawWrapper.effect.isReady();\n    }\n    /**\n     * Sets the new light position for light scattering effect\n     * @param position The new custom light position\n     */\n    setCustomMeshPosition(position) {\n        this.customMeshPosition = position;\n    }\n    /**\n     * Returns the light position for light scattering effect\n     * @returns Vector3 The custom light position\n     */\n    getCustomMeshPosition() {\n        return this.customMeshPosition;\n    }\n    /**\n     * Disposes the internal assets and detaches the post-process from the camera\n     * @param camera\n     */\n    dispose(camera) {\n        const rttIndex = camera.getScene().customRenderTargets.indexOf(this._volumetricLightScatteringRTT);\n        if (rttIndex !== -1) {\n            camera.getScene().customRenderTargets.splice(rttIndex, 1);\n        }\n        this._volumetricLightScatteringRTT.dispose();\n        super.dispose(camera);\n    }\n    /**\n     * Returns the render target texture used by the post-process\n     * @returns the render target texture used by the post-process\n     */\n    getPass() {\n        return this._volumetricLightScatteringRTT;\n    }\n    // Private methods\n    _meshExcluded(mesh) {\n        if ((this.includedMeshes.length > 0 && this.includedMeshes.indexOf(mesh) === -1) || (this.excludedMeshes.length > 0 && this.excludedMeshes.indexOf(mesh) !== -1)) {\n            return true;\n        }\n        return false;\n    }\n    _createPass(scene, ratio) {\n        const engine = scene.getEngine();\n        this._volumetricLightScatteringRTT = new RenderTargetTexture(\"volumetricLightScatteringMap\", { width: engine.getRenderWidth() * ratio, height: engine.getRenderHeight() * ratio }, scene, false, true, 0);\n        this._volumetricLightScatteringRTT.wrapU = Texture.CLAMP_ADDRESSMODE;\n        this._volumetricLightScatteringRTT.wrapV = Texture.CLAMP_ADDRESSMODE;\n        this._volumetricLightScatteringRTT.renderList = null;\n        this._volumetricLightScatteringRTT.renderParticles = false;\n        this._volumetricLightScatteringRTT.ignoreCameraViewport = true;\n        const camera = this.getCamera();\n        if (camera) {\n            camera.customRenderTargets.push(this._volumetricLightScatteringRTT);\n        }\n        else {\n            scene.customRenderTargets.push(this._volumetricLightScatteringRTT);\n        }\n        // Custom render function for submeshes\n        const renderSubMesh = (subMesh) => {\n            var _a;\n            const renderingMesh = subMesh.getRenderingMesh();\n            const effectiveMesh = subMesh.getEffectiveMesh();\n            if (this._meshExcluded(renderingMesh)) {\n                return;\n            }\n            effectiveMesh._internalAbstractMeshDataInfo._isActiveIntermediate = false;\n            const material = subMesh.getMaterial();\n            if (!material) {\n                return;\n            }\n            const scene = renderingMesh.getScene();\n            const engine = scene.getEngine();\n            // Culling\n            engine.setState(material.backFaceCulling, undefined, undefined, undefined, material.cullBackFaces);\n            // Managing instances\n            const batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\n            if (batch.mustReturn) {\n                return;\n            }\n            const hardwareInstancedRendering = engine.getCaps().instancedArrays && (batch.visibleInstances[subMesh._id] !== null || renderingMesh.hasThinInstances);\n            if (this._isReady(subMesh, hardwareInstancedRendering)) {\n                const renderingMaterial = (_a = effectiveMesh._internalAbstractMeshDataInfo._materialForRenderPass) === null || _a === void 0 ? void 0 : _a[engine.currentRenderPassId];\n                let drawWrapper = subMesh._getDrawWrapper();\n                if (renderingMesh === this.mesh && !drawWrapper) {\n                    drawWrapper = material._getDrawWrapper();\n                }\n                if (!drawWrapper) {\n                    return;\n                }\n                const effect = drawWrapper.effect;\n                engine.enableEffect(drawWrapper);\n                if (!hardwareInstancedRendering) {\n                    renderingMesh._bind(subMesh, effect, material.fillMode);\n                }\n                if (renderingMesh === this.mesh) {\n                    material.bind(effectiveMesh.getWorldMatrix(), renderingMesh);\n                }\n                else if (renderingMaterial) {\n                    renderingMaterial.bindForSubMesh(effectiveMesh.getWorldMatrix(), effectiveMesh, subMesh);\n                }\n                else {\n                    effect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\n                    // Alpha test\n                    if (material && material.needAlphaTesting()) {\n                        const alphaTexture = material.getAlphaTestTexture();\n                        effect.setTexture(\"diffuseSampler\", alphaTexture);\n                        if (alphaTexture) {\n                            effect.setMatrix(\"diffuseMatrix\", alphaTexture.getTextureMatrix());\n                        }\n                    }\n                    // Bones\n                    if (renderingMesh.useBones && renderingMesh.computeBonesUsingShaders && renderingMesh.skeleton) {\n                        effect.setMatrices(\"mBones\", renderingMesh.skeleton.getTransformMatrices(renderingMesh));\n                    }\n                }\n                if (hardwareInstancedRendering && renderingMesh.hasThinInstances) {\n                    effect.setMatrix(\"world\", effectiveMesh.getWorldMatrix());\n                }\n                // Draw\n                renderingMesh._processRendering(effectiveMesh, subMesh, effect, Material.TriangleFillMode, batch, hardwareInstancedRendering, (isInstance, world) => {\n                    if (!isInstance) {\n                        effect.setMatrix(\"world\", world);\n                    }\n                });\n            }\n        };\n        // Render target texture callbacks\n        let savedSceneClearColor;\n        const sceneClearColor = new Color4(0.0, 0.0, 0.0, 1.0);\n        this._volumetricLightScatteringRTT.onBeforeRenderObservable.add(() => {\n            savedSceneClearColor = scene.clearColor;\n            scene.clearColor = sceneClearColor;\n        });\n        this._volumetricLightScatteringRTT.onAfterRenderObservable.add(() => {\n            scene.clearColor = savedSceneClearColor;\n        });\n        this._volumetricLightScatteringRTT.customIsReadyFunction = (mesh, refreshRate, preWarm) => {\n            if ((preWarm || refreshRate === 0) && mesh.subMeshes) {\n                for (let i = 0; i < mesh.subMeshes.length; ++i) {\n                    const subMesh = mesh.subMeshes[i];\n                    const material = subMesh.getMaterial();\n                    const renderingMesh = subMesh.getRenderingMesh();\n                    if (!material) {\n                        continue;\n                    }\n                    const batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\n                    const hardwareInstancedRendering = engine.getCaps().instancedArrays && (batch.visibleInstances[subMesh._id] !== null || renderingMesh.hasThinInstances);\n                    if (!this._isReady(subMesh, hardwareInstancedRendering)) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        };\n        this._volumetricLightScatteringRTT.customRenderFunction = (opaqueSubMeshes, alphaTestSubMeshes, transparentSubMeshes, depthOnlySubMeshes) => {\n            const engine = scene.getEngine();\n            let index;\n            if (depthOnlySubMeshes.length) {\n                engine.setColorWrite(false);\n                for (index = 0; index < depthOnlySubMeshes.length; index++) {\n                    renderSubMesh(depthOnlySubMeshes.data[index]);\n                }\n                engine.setColorWrite(true);\n            }\n            for (index = 0; index < opaqueSubMeshes.length; index++) {\n                renderSubMesh(opaqueSubMeshes.data[index]);\n            }\n            for (index = 0; index < alphaTestSubMeshes.length; index++) {\n                renderSubMesh(alphaTestSubMeshes.data[index]);\n            }\n            if (transparentSubMeshes.length) {\n                // Sort sub meshes\n                for (index = 0; index < transparentSubMeshes.length; index++) {\n                    const submesh = transparentSubMeshes.data[index];\n                    const boundingInfo = submesh.getBoundingInfo();\n                    if (boundingInfo && scene.activeCamera) {\n                        submesh._alphaIndex = submesh.getMesh().alphaIndex;\n                        submesh._distanceToCamera = boundingInfo.boundingSphere.centerWorld.subtract(scene.activeCamera.position).length();\n                    }\n                }\n                const sortedArray = transparentSubMeshes.data.slice(0, transparentSubMeshes.length);\n                sortedArray.sort((a, b) => {\n                    // Alpha index first\n                    if (a._alphaIndex > b._alphaIndex) {\n                        return 1;\n                    }\n                    if (a._alphaIndex < b._alphaIndex) {\n                        return -1;\n                    }\n                    // Then distance to camera\n                    if (a._distanceToCamera < b._distanceToCamera) {\n                        return 1;\n                    }\n                    if (a._distanceToCamera > b._distanceToCamera) {\n                        return -1;\n                    }\n                    return 0;\n                });\n                // Render sub meshes\n                engine.setAlphaMode(2);\n                for (index = 0; index < sortedArray.length; index++) {\n                    renderSubMesh(sortedArray[index]);\n                }\n                engine.setAlphaMode(0);\n            }\n        };\n    }\n    _updateMeshScreenCoordinates(scene) {\n        const transform = scene.getTransformMatrix();\n        let meshPosition;\n        if (this.useCustomMeshPosition) {\n            meshPosition = this.customMeshPosition;\n        }\n        else if (this.attachedNode) {\n            meshPosition = this.attachedNode.position;\n        }\n        else {\n            meshPosition = this.mesh.parent ? this.mesh.getAbsolutePosition() : this.mesh.position;\n        }\n        const pos = Vector3.Project(meshPosition, Matrix.Identity(), transform, this._viewPort);\n        this._screenCoordinates.x = pos.x / this._viewPort.width;\n        this._screenCoordinates.y = pos.y / this._viewPort.height;\n        if (this.invert) {\n            this._screenCoordinates.y = 1.0 - this._screenCoordinates.y;\n        }\n    }\n    // Static methods\n    /**\n     * Creates a default mesh for the Volumeric Light Scattering post-process\n     * @param name The mesh name\n     * @param scene The scene where to create the mesh\n     * @returns the default mesh\n     */\n    static CreateDefaultMesh(name, scene) {\n        const mesh = CreatePlane(name, { size: 1 }, scene);\n        mesh.billboardMode = AbstractMesh.BILLBOARDMODE_ALL;\n        const material = new StandardMaterial(name + \"Material\", scene);\n        material.emissiveColor = new Color3(1, 1, 1);\n        mesh.material = material;\n        return mesh;\n    }\n}\n__decorate([\n    serializeAsVector3()\n], VolumetricLightScatteringPostProcess.prototype, \"customMeshPosition\", void 0);\n__decorate([\n    serialize()\n], VolumetricLightScatteringPostProcess.prototype, \"useCustomMeshPosition\", void 0);\n__decorate([\n    serialize()\n], VolumetricLightScatteringPostProcess.prototype, \"invert\", void 0);\n__decorate([\n    serializeAsMeshReference()\n], VolumetricLightScatteringPostProcess.prototype, \"mesh\", void 0);\n__decorate([\n    serialize()\n], VolumetricLightScatteringPostProcess.prototype, \"excludedMeshes\", void 0);\n__decorate([\n    serialize()\n], VolumetricLightScatteringPostProcess.prototype, \"includedMeshes\", void 0);\n__decorate([\n    serialize()\n], VolumetricLightScatteringPostProcess.prototype, \"exposure\", void 0);\n__decorate([\n    serialize()\n], VolumetricLightScatteringPostProcess.prototype, \"decay\", void 0);\n__decorate([\n    serialize()\n], VolumetricLightScatteringPostProcess.prototype, \"weight\", void 0);\n__decorate([\n    serialize()\n], VolumetricLightScatteringPostProcess.prototype, \"density\", void 0);\nRegisterClass(\"BABYLON.VolumetricLightScatteringPostProcess\", VolumetricLightScatteringPostProcess);\n//# sourceMappingURL=volumetricLightScatteringPostProcess.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { PostProcess } from \"./postProcess.js\";\n\nimport \"../Rendering/geometryBufferRendererSceneComponent.js\";\nimport \"../Shaders/screenSpaceCurvature.fragment.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * The Screen Space curvature effect can help highlighting ridge and valley of a model.\n */\nexport class ScreenSpaceCurvaturePostProcess extends PostProcess {\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"ScreenSpaceCurvaturePostProcess\" string\n     */\n    getClassName() {\n        return \"ScreenSpaceCurvaturePostProcess\";\n    }\n    /**\n     * Creates a new instance ScreenSpaceCurvaturePostProcess\n     * @param name The name of the effect.\n     * @param scene The scene containing the objects to blur according to their velocity.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n     */\n    constructor(name, scene, options, camera, samplingMode, engine, reusable, textureType = 0, blockCompilation = false) {\n        super(name, \"screenSpaceCurvature\", [\"curvature_ridge\", \"curvature_valley\"], [\"textureSampler\", \"normalSampler\"], options, camera, samplingMode, engine, reusable, undefined, textureType, undefined, null, blockCompilation);\n        /**\n         * Defines how much ridge the curvature effect displays.\n         */\n        this.ridge = 1;\n        /**\n         * Defines how much valley the curvature effect displays.\n         */\n        this.valley = 1;\n        this._geometryBufferRenderer = scene.enableGeometryBufferRenderer();\n        if (!this._geometryBufferRenderer) {\n            // Geometry buffer renderer is not supported. So, work as a passthrough.\n            Logger.Error(\"Multiple Render Target support needed for screen space curvature post process. Please use IsSupported test first.\");\n        }\n        else {\n            // Geometry buffer renderer is supported.\n            this.onApply = (effect) => {\n                effect.setFloat(\"curvature_ridge\", 0.5 / Math.max(this.ridge * this.ridge, 1e-4));\n                effect.setFloat(\"curvature_valley\", 0.7 / Math.max(this.valley * this.valley, 1e-4));\n                const normalTexture = this._geometryBufferRenderer.getGBuffer().textures[1];\n                effect.setTexture(\"normalSampler\", normalTexture);\n            };\n        }\n    }\n    /**\n     * Support test.\n     */\n    static get IsSupported() {\n        const engine = EngineStore.LastCreatedEngine;\n        if (!engine) {\n            return false;\n        }\n        return engine.getCaps().drawBuffersExtension;\n    }\n    /**\n     * @internal\n     */\n    static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(() => {\n            return new ScreenSpaceCurvaturePostProcess(parsedPostProcess.name, scene, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.textureType, parsedPostProcess.reusable);\n        }, parsedPostProcess, scene, rootUrl);\n    }\n}\n__decorate([\n    serialize()\n], ScreenSpaceCurvaturePostProcess.prototype, \"ridge\", void 0);\n__decorate([\n    serialize()\n], ScreenSpaceCurvaturePostProcess.prototype, \"valley\", void 0);\nRegisterClass(\"BABYLON.ScreenSpaceCurvaturePostProcess\", ScreenSpaceCurvaturePostProcess);\n//# sourceMappingURL=screenSpaceCurvaturePostProcess.js.map","\nimport { PostProcess } from \"./postProcess.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport \"../Shaders/pass.fragment.js\";\nimport \"../Shaders/passCube.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * PassPostProcess which produces an output the same as it's input\n */\nexport class PassPostProcess extends PostProcess {\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"PassPostProcess\" string\n     */\n    getClassName() {\n        return \"PassPostProcess\";\n    }\n    /**\n     * Creates the PassPostProcess\n     * @param name The name of the effect.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType The type of texture to be used when performing the post processing.\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n     */\n    constructor(name, options, camera = null, samplingMode, engine, reusable, textureType = 0, blockCompilation = false) {\n        super(name, \"pass\", null, null, options, camera, samplingMode, engine, reusable, undefined, textureType, undefined, null, blockCompilation);\n    }\n    /**\n     * @internal\n     */\n    static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(() => {\n            return new PassPostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, parsedPostProcess._engine, parsedPostProcess.reusable);\n        }, parsedPostProcess, scene, rootUrl);\n    }\n}\nRegisterClass(\"BABYLON.PassPostProcess\", PassPostProcess);\n/**\n * PassCubePostProcess which produces an output the same as it's input (which must be a cube texture)\n */\nexport class PassCubePostProcess extends PostProcess {\n    /**\n     * Gets or sets the cube face to display.\n     *  * 0 is +X\n     *  * 1 is -X\n     *  * 2 is +Y\n     *  * 3 is -Y\n     *  * 4 is +Z\n     *  * 5 is -Z\n     */\n    get face() {\n        return this._face;\n    }\n    set face(value) {\n        if (value < 0 || value > 5) {\n            return;\n        }\n        this._face = value;\n        switch (this._face) {\n            case 0:\n                this.updateEffect(\"#define POSITIVEX\");\n                break;\n            case 1:\n                this.updateEffect(\"#define NEGATIVEX\");\n                break;\n            case 2:\n                this.updateEffect(\"#define POSITIVEY\");\n                break;\n            case 3:\n                this.updateEffect(\"#define NEGATIVEY\");\n                break;\n            case 4:\n                this.updateEffect(\"#define POSITIVEZ\");\n                break;\n            case 5:\n                this.updateEffect(\"#define NEGATIVEZ\");\n                break;\n        }\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"PassCubePostProcess\" string\n     */\n    getClassName() {\n        return \"PassCubePostProcess\";\n    }\n    /**\n     * Creates the PassCubePostProcess\n     * @param name The name of the effect.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType The type of texture to be used when performing the post processing.\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n     */\n    constructor(name, options, camera = null, samplingMode, engine, reusable, textureType = 0, blockCompilation = false) {\n        super(name, \"passCube\", null, null, options, camera, samplingMode, engine, reusable, \"#define POSITIVEX\", textureType, undefined, null, blockCompilation);\n        this._face = 0;\n    }\n    /**\n     * @internal\n     */\n    static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(() => {\n            return new PassCubePostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, parsedPostProcess._engine, parsedPostProcess.reusable);\n        }, parsedPostProcess, scene, rootUrl);\n    }\n}\nEngine._RescalePostProcessFactory = (engine) => {\n    return new PassPostProcess(\"rescale\", 1, null, 2, engine, false, 0);\n};\n//# sourceMappingURL=passPostProcess.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { SmartArray } from \"../Misc/smartArray.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Vector2 } from \"../Maths/math.vector.js\";\n\nimport \"../Shaders/postprocess.vertex.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport \"../Engines/Extensions/engine.renderTarget.js\";\nimport { serialize, serializeAsColor4, SerializationHelper } from \"../Misc/decorators.js\";\nimport { GetClass, RegisterClass } from \"../Misc/typeStore.js\";\nimport { DrawWrapper } from \"../Materials/drawWrapper.js\";\nimport { ShaderLanguage } from \"../Materials/shaderLanguage.js\";\n/**\n * PostProcess can be used to apply a shader to a texture after it has been rendered\n * See https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses\n */\nexport class PostProcess {\n    /**\n     * Registers a shader code processing with a post process name.\n     * @param postProcessName name of the post process. Use null for the fallback shader code processing. This is the shader code processing that will be used in case no specific shader code processing has been associated to a post process name\n     * @param customShaderCodeProcessing shader code processing to associate to the post process name\n     * @returns\n     */\n    static RegisterShaderCodeProcessing(postProcessName, customShaderCodeProcessing) {\n        if (!customShaderCodeProcessing) {\n            delete PostProcess._CustomShaderCodeProcessing[postProcessName !== null && postProcessName !== void 0 ? postProcessName : \"\"];\n            return;\n        }\n        PostProcess._CustomShaderCodeProcessing[postProcessName !== null && postProcessName !== void 0 ? postProcessName : \"\"] = customShaderCodeProcessing;\n    }\n    static _GetShaderCodeProcessing(postProcessName) {\n        var _a;\n        return (_a = PostProcess._CustomShaderCodeProcessing[postProcessName]) !== null && _a !== void 0 ? _a : PostProcess._CustomShaderCodeProcessing[\"\"];\n    }\n    /**\n     * Number of sample textures (default: 1)\n     */\n    get samples() {\n        return this._samples;\n    }\n    set samples(n) {\n        this._samples = Math.min(n, this._engine.getCaps().maxMSAASamples);\n        this._textures.forEach((texture) => {\n            texture.setSamples(this._samples);\n        });\n    }\n    /**\n     * Returns the fragment url or shader name used in the post process.\n     * @returns the fragment url or name in the shader store.\n     */\n    getEffectName() {\n        return this._fragmentUrl;\n    }\n    /**\n     * A function that is added to the onActivateObservable\n     */\n    set onActivate(callback) {\n        if (this._onActivateObserver) {\n            this.onActivateObservable.remove(this._onActivateObserver);\n        }\n        if (callback) {\n            this._onActivateObserver = this.onActivateObservable.add(callback);\n        }\n    }\n    /**\n     * A function that is added to the onSizeChangedObservable\n     */\n    set onSizeChanged(callback) {\n        if (this._onSizeChangedObserver) {\n            this.onSizeChangedObservable.remove(this._onSizeChangedObserver);\n        }\n        this._onSizeChangedObserver = this.onSizeChangedObservable.add(callback);\n    }\n    /**\n     * A function that is added to the onApplyObservable\n     */\n    set onApply(callback) {\n        if (this._onApplyObserver) {\n            this.onApplyObservable.remove(this._onApplyObserver);\n        }\n        this._onApplyObserver = this.onApplyObservable.add(callback);\n    }\n    /**\n     * A function that is added to the onBeforeRenderObservable\n     */\n    set onBeforeRender(callback) {\n        if (this._onBeforeRenderObserver) {\n            this.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\n        }\n        this._onBeforeRenderObserver = this.onBeforeRenderObservable.add(callback);\n    }\n    /**\n     * A function that is added to the onAfterRenderObservable\n     */\n    set onAfterRender(callback) {\n        if (this._onAfterRenderObserver) {\n            this.onAfterRenderObservable.remove(this._onAfterRenderObserver);\n        }\n        this._onAfterRenderObserver = this.onAfterRenderObservable.add(callback);\n    }\n    /**\n     * The input texture for this post process and the output texture of the previous post process. When added to a pipeline the previous post process will\n     * render it's output into this texture and this texture will be used as textureSampler in the fragment shader of this post process.\n     */\n    get inputTexture() {\n        return this._textures.data[this._currentRenderTextureInd];\n    }\n    set inputTexture(value) {\n        this._forcedOutputTexture = value;\n    }\n    /**\n     * Since inputTexture should always be defined, if we previously manually set `inputTexture`,\n     * the only way to unset it is to use this function to restore its internal state\n     */\n    restoreDefaultInputTexture() {\n        if (this._forcedOutputTexture) {\n            this._forcedOutputTexture = null;\n            this.markTextureDirty();\n        }\n    }\n    /**\n     * Gets the camera which post process is applied to.\n     * @returns The camera the post process is applied to.\n     */\n    getCamera() {\n        return this._camera;\n    }\n    /**\n     * Gets the texel size of the postprocess.\n     * See https://en.wikipedia.org/wiki/Texel_(graphics)\n     */\n    get texelSize() {\n        if (this._shareOutputWithPostProcess) {\n            return this._shareOutputWithPostProcess.texelSize;\n        }\n        if (this._forcedOutputTexture) {\n            this._texelSize.copyFromFloats(1.0 / this._forcedOutputTexture.width, 1.0 / this._forcedOutputTexture.height);\n        }\n        return this._texelSize;\n    }\n    /**\n     * Creates a new instance PostProcess\n     * @param name The name of the PostProcess.\n     * @param fragmentUrl The url of the fragment shader to be used.\n     * @param parameters Array of the names of uniform non-sampler2D variables that will be passed to the shader.\n     * @param samplers Array of the names of uniform sampler2D variables that will be passed to the shader.\n     * @param options The required width/height ratio to downsize to before computing the render pass. (Use 1.0 for full size)\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param defines String of defines that will be set when running the fragment shader. (default: null)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     * @param vertexUrl The url of the vertex shader to be used. (default: \"postprocess\")\n     * @param indexParameters The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined) See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\n     * @param blockCompilation If the shader should not be compiled immediatly. (default: false)\n     * @param textureFormat Format of textures used when performing the post process. (default: TEXTUREFORMAT_RGBA)\n     */\n    constructor(name, fragmentUrl, parameters, samplers, options, camera, samplingMode = 1, engine, reusable, defines = null, textureType = 0, vertexUrl = \"postprocess\", indexParameters, blockCompilation = false, textureFormat = 5, shaderLanguage = ShaderLanguage.GLSL) {\n        /** @internal */\n        this._parentContainer = null;\n        /**\n         * Width of the texture to apply the post process on\n         */\n        this.width = -1;\n        /**\n         * Height of the texture to apply the post process on\n         */\n        this.height = -1;\n        /**\n         * Gets the node material used to create this postprocess (null if the postprocess was manually created)\n         */\n        this.nodeMaterialSource = null;\n        /**\n         * Internal, reference to the location where this postprocess was output to. (Typically the texture on the next postprocess in the chain)\n         * @internal\n         */\n        this._outputTexture = null;\n        /**\n         * If the buffer needs to be cleared before applying the post process. (default: true)\n         * Should be set to false if shader will overwrite all previous pixels.\n         */\n        this.autoClear = true;\n        /**\n         * Type of alpha mode to use when performing the post process (default: Engine.ALPHA_DISABLE)\n         */\n        this.alphaMode = 0;\n        /**\n         * Animations to be used for the post processing\n         */\n        this.animations = new Array();\n        /**\n         * Enable Pixel Perfect mode where texture is not scaled to be power of 2.\n         * Can only be used on a single postprocess or on the last one of a chain. (default: false)\n         */\n        this.enablePixelPerfectMode = false;\n        /**\n         * Force the postprocess to be applied without taking in account viewport\n         */\n        this.forceFullscreenViewport = true;\n        /**\n         * Scale mode for the post process (default: Engine.SCALEMODE_FLOOR)\n         *\n         * | Value | Type                                | Description |\n         * | ----- | ----------------------------------- | ----------- |\n         * | 1     | SCALEMODE_FLOOR                     | [engine.scalemode_floor](https://doc.babylonjs.com/api/classes/babylon.engine#scalemode_floor) |\n         * | 2     | SCALEMODE_NEAREST                   | [engine.scalemode_nearest](https://doc.babylonjs.com/api/classes/babylon.engine#scalemode_nearest) |\n         * | 3     | SCALEMODE_CEILING                   | [engine.scalemode_ceiling](https://doc.babylonjs.com/api/classes/babylon.engine#scalemode_ceiling) |\n         *\n         */\n        this.scaleMode = 1;\n        /**\n         * Force textures to be a power of two (default: false)\n         */\n        this.alwaysForcePOT = false;\n        this._samples = 1;\n        /**\n         * Modify the scale of the post process to be the same as the viewport (default: false)\n         */\n        this.adaptScaleToCurrentViewport = false;\n        this._reusable = false;\n        this._renderId = 0;\n        /**\n         * if externalTextureSamplerBinding is true, the \"apply\" method won't bind the textureSampler texture, it is expected to be done by the \"outside\" (by the onApplyObservable observer most probably).\n         * counter-productive in some cases because if the texture bound by \"apply\" is different from the currently texture bound, (the one set by the onApplyObservable observer, for eg) some\n         * internal structures (materialContext) will be dirtified, which may impact performances\n         */\n        this.externalTextureSamplerBinding = false;\n        /**\n         * Smart array of input and output textures for the post process.\n         * @internal\n         */\n        this._textures = new SmartArray(2);\n        /**\n         * Smart array of input and output textures for the post process.\n         * @internal\n         */\n        this._textureCache = [];\n        /**\n         * The index in _textures that corresponds to the output texture.\n         * @internal\n         */\n        this._currentRenderTextureInd = 0;\n        this._scaleRatio = new Vector2(1, 1);\n        this._texelSize = Vector2.Zero();\n        // Events\n        /**\n         * An event triggered when the postprocess is activated.\n         */\n        this.onActivateObservable = new Observable();\n        /**\n         * An event triggered when the postprocess changes its size.\n         */\n        this.onSizeChangedObservable = new Observable();\n        /**\n         * An event triggered when the postprocess applies its effect.\n         */\n        this.onApplyObservable = new Observable();\n        /**\n         * An event triggered before rendering the postprocess\n         */\n        this.onBeforeRenderObservable = new Observable();\n        /**\n         * An event triggered after rendering the postprocess\n         */\n        this.onAfterRenderObservable = new Observable();\n        this.name = name;\n        if (camera != null) {\n            this._camera = camera;\n            this._scene = camera.getScene();\n            camera.attachPostProcess(this);\n            this._engine = this._scene.getEngine();\n            this._scene.postProcesses.push(this);\n            this.uniqueId = this._scene.getUniqueId();\n        }\n        else if (engine) {\n            this._engine = engine;\n            this._engine.postProcesses.push(this);\n        }\n        this._options = options;\n        this.renderTargetSamplingMode = samplingMode ? samplingMode : 1;\n        this._reusable = reusable || false;\n        this._textureType = textureType;\n        this._textureFormat = textureFormat;\n        this._shaderLanguage = shaderLanguage;\n        this._samplers = samplers || [];\n        this._samplers.push(\"textureSampler\");\n        this._fragmentUrl = fragmentUrl;\n        this._vertexUrl = vertexUrl;\n        this._parameters = parameters || [];\n        this._parameters.push(\"scale\");\n        this._indexParameters = indexParameters;\n        this._drawWrapper = new DrawWrapper(this._engine);\n        if (!blockCompilation) {\n            this.updateEffect(defines);\n        }\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"PostProcess\" string\n     */\n    getClassName() {\n        return \"PostProcess\";\n    }\n    /**\n     * Gets the engine which this post process belongs to.\n     * @returns The engine the post process was enabled with.\n     */\n    getEngine() {\n        return this._engine;\n    }\n    /**\n     * The effect that is created when initializing the post process.\n     * @returns The created effect corresponding the the postprocess.\n     */\n    getEffect() {\n        return this._drawWrapper.effect;\n    }\n    /**\n     * To avoid multiple redundant textures for multiple post process, the output the output texture for this post process can be shared with another.\n     * @param postProcess The post process to share the output with.\n     * @returns This post process.\n     */\n    shareOutputWith(postProcess) {\n        this._disposeTextures();\n        this._shareOutputWithPostProcess = postProcess;\n        return this;\n    }\n    /**\n     * Reverses the effect of calling shareOutputWith and returns the post process back to its original state.\n     * This should be called if the post process that shares output with this post process is disabled/disposed.\n     */\n    useOwnOutput() {\n        if (this._textures.length == 0) {\n            this._textures = new SmartArray(2);\n        }\n        this._shareOutputWithPostProcess = null;\n    }\n    /**\n     * Updates the effect with the current post process compile time values and recompiles the shader.\n     * @param defines Define statements that should be added at the beginning of the shader. (default: null)\n     * @param uniforms Set of uniform variables that will be passed to the shader. (default: null)\n     * @param samplers Set of Texture2D variables that will be passed to the shader. (default: null)\n     * @param indexParameters The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined) See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\n     * @param onCompiled Called when the shader has been compiled.\n     * @param onError Called if there is an error when compiling a shader.\n     * @param vertexUrl The url of the vertex shader to be used (default: the one given at construction time)\n     * @param fragmentUrl The url of the fragment shader to be used (default: the one given at construction time)\n     */\n    updateEffect(defines = null, uniforms = null, samplers = null, indexParameters, onCompiled, onError, vertexUrl, fragmentUrl) {\n        var _a, _b;\n        const customShaderCodeProcessing = PostProcess._GetShaderCodeProcessing(this.name);\n        if (customShaderCodeProcessing === null || customShaderCodeProcessing === void 0 ? void 0 : customShaderCodeProcessing.defineCustomBindings) {\n            const newUniforms = (_a = uniforms === null || uniforms === void 0 ? void 0 : uniforms.slice()) !== null && _a !== void 0 ? _a : [];\n            newUniforms.push(...this._parameters);\n            const newSamplers = (_b = samplers === null || samplers === void 0 ? void 0 : samplers.slice()) !== null && _b !== void 0 ? _b : [];\n            newSamplers.push(...this._samplers);\n            defines = customShaderCodeProcessing.defineCustomBindings(this.name, defines, newUniforms, newSamplers);\n            uniforms = newUniforms;\n            samplers = newSamplers;\n        }\n        this._postProcessDefines = defines;\n        this._drawWrapper.effect = this._engine.createEffect({ vertex: vertexUrl !== null && vertexUrl !== void 0 ? vertexUrl : this._vertexUrl, fragment: fragmentUrl !== null && fragmentUrl !== void 0 ? fragmentUrl : this._fragmentUrl }, {\n            attributes: [\"position\"],\n            uniformsNames: uniforms || this._parameters,\n            uniformBuffersNames: [],\n            samplers: samplers || this._samplers,\n            defines: defines !== null ? defines : \"\",\n            fallbacks: null,\n            onCompiled: onCompiled !== null && onCompiled !== void 0 ? onCompiled : null,\n            onError: onError !== null && onError !== void 0 ? onError : null,\n            indexParameters: indexParameters || this._indexParameters,\n            processCodeAfterIncludes: (customShaderCodeProcessing === null || customShaderCodeProcessing === void 0 ? void 0 : customShaderCodeProcessing.processCodeAfterIncludes)\n                ? (shaderType, code) => customShaderCodeProcessing.processCodeAfterIncludes(this.name, shaderType, code)\n                : null,\n            processFinalCode: (customShaderCodeProcessing === null || customShaderCodeProcessing === void 0 ? void 0 : customShaderCodeProcessing.processFinalCode)\n                ? (shaderType, code) => customShaderCodeProcessing.processFinalCode(this.name, shaderType, code)\n                : null,\n            shaderLanguage: this._shaderLanguage,\n        }, this._engine);\n    }\n    /**\n     * The post process is reusable if it can be used multiple times within one frame.\n     * @returns If the post process is reusable\n     */\n    isReusable() {\n        return this._reusable;\n    }\n    /** invalidate frameBuffer to hint the postprocess to create a depth buffer */\n    markTextureDirty() {\n        this.width = -1;\n    }\n    _createRenderTargetTexture(textureSize, textureOptions, channel = 0) {\n        for (let i = 0; i < this._textureCache.length; i++) {\n            if (this._textureCache[i].texture.width === textureSize.width &&\n                this._textureCache[i].texture.height === textureSize.height &&\n                this._textureCache[i].postProcessChannel === channel &&\n                this._textureCache[i].texture._generateDepthBuffer === textureOptions.generateDepthBuffer &&\n                this._textureCache[i].texture.samples === textureOptions.samples) {\n                return this._textureCache[i].texture;\n            }\n        }\n        const tex = this._engine.createRenderTargetTexture(textureSize, textureOptions);\n        this._textureCache.push({ texture: tex, postProcessChannel: channel, lastUsedRenderId: -1 });\n        return tex;\n    }\n    _flushTextureCache() {\n        const currentRenderId = this._renderId;\n        for (let i = this._textureCache.length - 1; i >= 0; i--) {\n            if (currentRenderId - this._textureCache[i].lastUsedRenderId > 100) {\n                let currentlyUsed = false;\n                for (let j = 0; j < this._textures.length; j++) {\n                    if (this._textures.data[j] === this._textureCache[i].texture) {\n                        currentlyUsed = true;\n                        break;\n                    }\n                }\n                if (!currentlyUsed) {\n                    this._textureCache[i].texture.dispose();\n                    this._textureCache.splice(i, 1);\n                }\n            }\n        }\n    }\n    _resize(width, height, camera, needMipMaps, forceDepthStencil) {\n        if (this._textures.length > 0) {\n            this._textures.reset();\n        }\n        this.width = width;\n        this.height = height;\n        let firstPP = null;\n        for (let i = 0; i < camera._postProcesses.length; i++) {\n            if (camera._postProcesses[i] !== null) {\n                firstPP = camera._postProcesses[i];\n                break;\n            }\n        }\n        const textureSize = { width: this.width, height: this.height };\n        const textureOptions = {\n            generateMipMaps: needMipMaps,\n            generateDepthBuffer: forceDepthStencil || firstPP === this,\n            generateStencilBuffer: (forceDepthStencil || firstPP === this) && this._engine.isStencilEnable,\n            samplingMode: this.renderTargetSamplingMode,\n            type: this._textureType,\n            format: this._textureFormat,\n            samples: this._samples,\n        };\n        this._textures.push(this._createRenderTargetTexture(textureSize, textureOptions, 0));\n        if (this._reusable) {\n            this._textures.push(this._createRenderTargetTexture(textureSize, textureOptions, 1));\n        }\n        this._texelSize.copyFromFloats(1.0 / this.width, 1.0 / this.height);\n        this.onSizeChangedObservable.notifyObservers(this);\n    }\n    /**\n     * Activates the post process by intializing the textures to be used when executed. Notifies onActivateObservable.\n     * When this post process is used in a pipeline, this is call will bind the input texture of this post process to the output of the previous.\n     * @param camera The camera that will be used in the post process. This camera will be used when calling onActivateObservable.\n     * @param sourceTexture The source texture to be inspected to get the width and height if not specified in the post process constructor. (default: null)\n     * @param forceDepthStencil If true, a depth and stencil buffer will be generated. (default: false)\n     * @returns The render target wrapper that was bound to be written to.\n     */\n    activate(camera, sourceTexture = null, forceDepthStencil) {\n        var _a, _b;\n        camera = camera || this._camera;\n        const scene = camera.getScene();\n        const engine = scene.getEngine();\n        const maxSize = engine.getCaps().maxTextureSize;\n        let requiredWidth = ((sourceTexture ? sourceTexture.width : this._engine.getRenderWidth(true)) * this._options) | 0;\n        const requiredHeight = ((sourceTexture ? sourceTexture.height : this._engine.getRenderHeight(true)) * this._options) | 0;\n        // If rendering to a webvr camera's left or right eye only half the width should be used to avoid resize when rendered to screen\n        const webVRCamera = camera.parent;\n        if (webVRCamera && (webVRCamera.leftCamera == camera || webVRCamera.rightCamera == camera)) {\n            requiredWidth /= 2;\n        }\n        let desiredWidth = this._options.width || requiredWidth;\n        let desiredHeight = this._options.height || requiredHeight;\n        const needMipMaps = this.renderTargetSamplingMode !== 7 &&\n            this.renderTargetSamplingMode !== 1 &&\n            this.renderTargetSamplingMode !== 2;\n        if (!this._shareOutputWithPostProcess && !this._forcedOutputTexture) {\n            if (this.adaptScaleToCurrentViewport) {\n                const currentViewport = engine.currentViewport;\n                if (currentViewport) {\n                    desiredWidth *= currentViewport.width;\n                    desiredHeight *= currentViewport.height;\n                }\n            }\n            if (needMipMaps || this.alwaysForcePOT) {\n                if (!this._options.width) {\n                    desiredWidth = engine.needPOTTextures ? Engine.GetExponentOfTwo(desiredWidth, maxSize, this.scaleMode) : desiredWidth;\n                }\n                if (!this._options.height) {\n                    desiredHeight = engine.needPOTTextures ? Engine.GetExponentOfTwo(desiredHeight, maxSize, this.scaleMode) : desiredHeight;\n                }\n            }\n            if (this.width !== desiredWidth || this.height !== desiredHeight) {\n                this._resize(desiredWidth, desiredHeight, camera, needMipMaps, forceDepthStencil);\n            }\n            this._textures.forEach((texture) => {\n                if (texture.samples !== this.samples) {\n                    this._engine.updateRenderTargetTextureSampleCount(texture, this.samples);\n                }\n            });\n            this._flushTextureCache();\n            this._renderId++;\n        }\n        let target;\n        if (this._shareOutputWithPostProcess) {\n            target = this._shareOutputWithPostProcess.inputTexture;\n        }\n        else if (this._forcedOutputTexture) {\n            target = this._forcedOutputTexture;\n            this.width = this._forcedOutputTexture.width;\n            this.height = this._forcedOutputTexture.height;\n        }\n        else {\n            target = this.inputTexture;\n            let cache;\n            for (let i = 0; i < this._textureCache.length; i++) {\n                if (this._textureCache[i].texture === target) {\n                    cache = this._textureCache[i];\n                    break;\n                }\n            }\n            if (cache) {\n                cache.lastUsedRenderId = this._renderId;\n            }\n        }\n        // Bind the input of this post process to be used as the output of the previous post process.\n        if (this.enablePixelPerfectMode) {\n            this._scaleRatio.copyFromFloats(requiredWidth / desiredWidth, requiredHeight / desiredHeight);\n            this._engine.bindFramebuffer(target, 0, requiredWidth, requiredHeight, this.forceFullscreenViewport);\n        }\n        else {\n            this._scaleRatio.copyFromFloats(1, 1);\n            this._engine.bindFramebuffer(target, 0, undefined, undefined, this.forceFullscreenViewport);\n        }\n        (_b = (_a = this._engine)._debugInsertMarker) === null || _b === void 0 ? void 0 : _b.call(_a, `post process ${this.name} input`);\n        this.onActivateObservable.notifyObservers(camera);\n        // Clear\n        if (this.autoClear && this.alphaMode === 0) {\n            this._engine.clear(this.clearColor ? this.clearColor : scene.clearColor, scene._allowPostProcessClearColor, true, true);\n        }\n        if (this._reusable) {\n            this._currentRenderTextureInd = (this._currentRenderTextureInd + 1) % 2;\n        }\n        return target;\n    }\n    /**\n     * If the post process is supported.\n     */\n    get isSupported() {\n        return this._drawWrapper.effect.isSupported;\n    }\n    /**\n     * The aspect ratio of the output texture.\n     */\n    get aspectRatio() {\n        if (this._shareOutputWithPostProcess) {\n            return this._shareOutputWithPostProcess.aspectRatio;\n        }\n        if (this._forcedOutputTexture) {\n            return this._forcedOutputTexture.width / this._forcedOutputTexture.height;\n        }\n        return this.width / this.height;\n    }\n    /**\n     * Get a value indicating if the post-process is ready to be used\n     * @returns true if the post-process is ready (shader is compiled)\n     */\n    isReady() {\n        var _a, _b;\n        return (_b = (_a = this._drawWrapper.effect) === null || _a === void 0 ? void 0 : _a.isReady()) !== null && _b !== void 0 ? _b : false;\n    }\n    /**\n     * Binds all textures and uniforms to the shader, this will be run on every pass.\n     * @returns the effect corresponding to this post process. Null if not compiled or not ready.\n     */\n    apply() {\n        var _a, _b, _c;\n        // Check\n        if (!((_a = this._drawWrapper.effect) === null || _a === void 0 ? void 0 : _a.isReady())) {\n            return null;\n        }\n        // States\n        this._engine.enableEffect(this._drawWrapper);\n        this._engine.setState(false);\n        this._engine.setDepthBuffer(false);\n        this._engine.setDepthWrite(false);\n        // Alpha\n        this._engine.setAlphaMode(this.alphaMode);\n        if (this.alphaConstants) {\n            this.getEngine().setAlphaConstants(this.alphaConstants.r, this.alphaConstants.g, this.alphaConstants.b, this.alphaConstants.a);\n        }\n        // Bind the output texture of the preivous post process as the input to this post process.\n        let source;\n        if (this._shareOutputWithPostProcess) {\n            source = this._shareOutputWithPostProcess.inputTexture;\n        }\n        else if (this._forcedOutputTexture) {\n            source = this._forcedOutputTexture;\n        }\n        else {\n            source = this.inputTexture;\n        }\n        if (!this.externalTextureSamplerBinding) {\n            this._drawWrapper.effect._bindTexture(\"textureSampler\", source === null || source === void 0 ? void 0 : source.texture);\n        }\n        // Parameters\n        this._drawWrapper.effect.setVector2(\"scale\", this._scaleRatio);\n        this.onApplyObservable.notifyObservers(this._drawWrapper.effect);\n        (_c = (_b = PostProcess._GetShaderCodeProcessing(this.name)) === null || _b === void 0 ? void 0 : _b.bindCustomBindings) === null || _c === void 0 ? void 0 : _c.call(_b, this.name, this._drawWrapper.effect);\n        return this._drawWrapper.effect;\n    }\n    _disposeTextures() {\n        if (this._shareOutputWithPostProcess || this._forcedOutputTexture) {\n            this._disposeTextureCache();\n            return;\n        }\n        this._disposeTextureCache();\n        this._textures.dispose();\n    }\n    _disposeTextureCache() {\n        for (let i = this._textureCache.length - 1; i >= 0; i--) {\n            this._textureCache[i].texture.dispose();\n        }\n        this._textureCache.length = 0;\n    }\n    /**\n     * Sets the required values to the prepass renderer.\n     * @param prePassRenderer defines the prepass renderer to setup.\n     * @returns true if the pre pass is needed.\n     */\n    setPrePassRenderer(prePassRenderer) {\n        if (this._prePassEffectConfiguration) {\n            this._prePassEffectConfiguration = prePassRenderer.addEffectConfiguration(this._prePassEffectConfiguration);\n            this._prePassEffectConfiguration.enabled = true;\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Disposes the post process.\n     * @param camera The camera to dispose the post process on.\n     */\n    dispose(camera) {\n        camera = camera || this._camera;\n        this._disposeTextures();\n        let index;\n        if (this._scene) {\n            index = this._scene.postProcesses.indexOf(this);\n            if (index !== -1) {\n                this._scene.postProcesses.splice(index, 1);\n            }\n        }\n        if (this._parentContainer) {\n            const index = this._parentContainer.postProcesses.indexOf(this);\n            if (index > -1) {\n                this._parentContainer.postProcesses.splice(index, 1);\n            }\n            this._parentContainer = null;\n        }\n        index = this._engine.postProcesses.indexOf(this);\n        if (index !== -1) {\n            this._engine.postProcesses.splice(index, 1);\n        }\n        if (!camera) {\n            return;\n        }\n        camera.detachPostProcess(this);\n        index = camera._postProcesses.indexOf(this);\n        if (index === 0 && camera._postProcesses.length > 0) {\n            const firstPostProcess = this._camera._getFirstPostProcess();\n            if (firstPostProcess) {\n                firstPostProcess.markTextureDirty();\n            }\n        }\n        this.onActivateObservable.clear();\n        this.onAfterRenderObservable.clear();\n        this.onApplyObservable.clear();\n        this.onBeforeRenderObservable.clear();\n        this.onSizeChangedObservable.clear();\n    }\n    /**\n     * Serializes the post process to a JSON object\n     * @returns the JSON object\n     */\n    serialize() {\n        const serializationObject = SerializationHelper.Serialize(this);\n        const camera = this.getCamera() || (this._scene && this._scene.activeCamera);\n        serializationObject.customType = \"BABYLON.\" + this.getClassName();\n        serializationObject.cameraId = camera ? camera.id : null;\n        serializationObject.reusable = this._reusable;\n        serializationObject.textureType = this._textureType;\n        serializationObject.fragmentUrl = this._fragmentUrl;\n        serializationObject.parameters = this._parameters;\n        serializationObject.samplers = this._samplers;\n        serializationObject.options = this._options;\n        serializationObject.defines = this._postProcessDefines;\n        serializationObject.textureFormat = this._textureFormat;\n        serializationObject.vertexUrl = this._vertexUrl;\n        serializationObject.indexParameters = this._indexParameters;\n        return serializationObject;\n    }\n    /**\n     * Clones this post process\n     * @returns a new post process similar to this one\n     */\n    clone() {\n        const serializationObject = this.serialize();\n        serializationObject._engine = this._engine;\n        serializationObject.cameraId = null;\n        const result = PostProcess.Parse(serializationObject, this._scene, \"\");\n        if (!result) {\n            return null;\n        }\n        result.onActivateObservable = this.onActivateObservable.clone();\n        result.onSizeChangedObservable = this.onSizeChangedObservable.clone();\n        result.onApplyObservable = this.onApplyObservable.clone();\n        result.onBeforeRenderObservable = this.onBeforeRenderObservable.clone();\n        result.onAfterRenderObservable = this.onAfterRenderObservable.clone();\n        result._prePassEffectConfiguration = this._prePassEffectConfiguration;\n        return result;\n    }\n    /**\n     * Creates a material from parsed material data\n     * @param parsedPostProcess defines parsed post process data\n     * @param scene defines the hosting scene\n     * @param rootUrl defines the root URL to use to load textures\n     * @returns a new post process\n     */\n    static Parse(parsedPostProcess, scene, rootUrl) {\n        const postProcessType = GetClass(parsedPostProcess.customType);\n        if (!postProcessType || !postProcessType._Parse) {\n            return null;\n        }\n        const camera = scene ? scene.getCameraById(parsedPostProcess.cameraId) : null;\n        return postProcessType._Parse(parsedPostProcess, camera, scene, rootUrl);\n    }\n    /**\n     * @internal\n     */\n    static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(() => {\n            return new PostProcess(parsedPostProcess.name, parsedPostProcess.fragmentUrl, parsedPostProcess.parameters, parsedPostProcess.samplers, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, parsedPostProcess._engine, parsedPostProcess.reusable, parsedPostProcess.defines, parsedPostProcess.textureType, parsedPostProcess.vertexUrl, parsedPostProcess.indexParameters, false, parsedPostProcess.textureFormat);\n        }, parsedPostProcess, scene, rootUrl);\n    }\n}\nPostProcess._CustomShaderCodeProcessing = {};\n__decorate([\n    serialize()\n], PostProcess.prototype, \"uniqueId\", void 0);\n__decorate([\n    serialize()\n], PostProcess.prototype, \"name\", void 0);\n__decorate([\n    serialize()\n], PostProcess.prototype, \"width\", void 0);\n__decorate([\n    serialize()\n], PostProcess.prototype, \"height\", void 0);\n__decorate([\n    serialize()\n], PostProcess.prototype, \"renderTargetSamplingMode\", void 0);\n__decorate([\n    serializeAsColor4()\n], PostProcess.prototype, \"clearColor\", void 0);\n__decorate([\n    serialize()\n], PostProcess.prototype, \"autoClear\", void 0);\n__decorate([\n    serialize()\n], PostProcess.prototype, \"alphaMode\", void 0);\n__decorate([\n    serialize()\n], PostProcess.prototype, \"alphaConstants\", void 0);\n__decorate([\n    serialize()\n], PostProcess.prototype, \"enablePixelPerfectMode\", void 0);\n__decorate([\n    serialize()\n], PostProcess.prototype, \"forceFullscreenViewport\", void 0);\n__decorate([\n    serialize()\n], PostProcess.prototype, \"scaleMode\", void 0);\n__decorate([\n    serialize()\n], PostProcess.prototype, \"alwaysForcePOT\", void 0);\n__decorate([\n    serialize(\"samples\")\n], PostProcess.prototype, \"_samples\", void 0);\n__decorate([\n    serialize()\n], PostProcess.prototype, \"adaptScaleToCurrentViewport\", void 0);\nRegisterClass(\"BABYLON.PostProcess\", PostProcess);\n//# sourceMappingURL=postProcess.js.map","import { VertexBuffer } from \"../Buffers/buffer.js\";\n\n/**\n * PostProcessManager is used to manage one or more post processes or post process pipelines\n * See https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses\n */\nexport class PostProcessManager {\n    /**\n     * Creates a new instance PostProcess\n     * @param scene The scene that the post process is associated with.\n     */\n    constructor(scene) {\n        this._vertexBuffers = {};\n        this._scene = scene;\n    }\n    _prepareBuffers() {\n        if (this._vertexBuffers[VertexBuffer.PositionKind]) {\n            return;\n        }\n        // VBO\n        const vertices = [];\n        vertices.push(1, 1);\n        vertices.push(-1, 1);\n        vertices.push(-1, -1);\n        vertices.push(1, -1);\n        this._vertexBuffers[VertexBuffer.PositionKind] = new VertexBuffer(this._scene.getEngine(), vertices, VertexBuffer.PositionKind, false, false, 2);\n        this._buildIndexBuffer();\n    }\n    _buildIndexBuffer() {\n        // Indices\n        const indices = [];\n        indices.push(0);\n        indices.push(1);\n        indices.push(2);\n        indices.push(0);\n        indices.push(2);\n        indices.push(3);\n        this._indexBuffer = this._scene.getEngine().createIndexBuffer(indices);\n    }\n    /**\n     * Rebuilds the vertex buffers of the manager.\n     * @internal\n     */\n    _rebuild() {\n        const vb = this._vertexBuffers[VertexBuffer.PositionKind];\n        if (!vb) {\n            return;\n        }\n        vb._rebuild();\n        this._buildIndexBuffer();\n    }\n    // Methods\n    /**\n     * Prepares a frame to be run through a post process.\n     * @param sourceTexture The input texture to the post processes. (default: null)\n     * @param postProcesses An array of post processes to be run. (default: null)\n     * @returns True if the post processes were able to be run.\n     * @internal\n     */\n    _prepareFrame(sourceTexture = null, postProcesses = null) {\n        const camera = this._scene.activeCamera;\n        if (!camera) {\n            return false;\n        }\n        postProcesses = postProcesses || camera._postProcesses.filter((pp) => {\n            return pp != null;\n        });\n        if (!postProcesses || postProcesses.length === 0 || !this._scene.postProcessesEnabled) {\n            return false;\n        }\n        postProcesses[0].activate(camera, sourceTexture, postProcesses !== null && postProcesses !== undefined);\n        return true;\n    }\n    /**\n     * Manually render a set of post processes to a texture.\n     * Please note, the frame buffer won't be unbound after the call in case you have more render to do.\n     * @param postProcesses An array of post processes to be run.\n     * @param targetTexture The render target wrapper to render to.\n     * @param forceFullscreenViewport force gl.viewport to be full screen eg. 0,0,textureWidth,textureHeight\n     * @param faceIndex defines the face to render to if a cubemap is defined as the target\n     * @param lodLevel defines which lod of the texture to render to\n     * @param doNotBindFrambuffer If set to true, assumes that the framebuffer has been bound previously\n     */\n    directRender(postProcesses, targetTexture = null, forceFullscreenViewport = false, faceIndex = 0, lodLevel = 0, doNotBindFrambuffer = false) {\n        var _a;\n        const engine = this._scene.getEngine();\n        for (let index = 0; index < postProcesses.length; index++) {\n            if (index < postProcesses.length - 1) {\n                postProcesses[index + 1].activate(this._scene.activeCamera, targetTexture === null || targetTexture === void 0 ? void 0 : targetTexture.texture);\n            }\n            else {\n                if (targetTexture) {\n                    engine.bindFramebuffer(targetTexture, faceIndex, undefined, undefined, forceFullscreenViewport, lodLevel);\n                }\n                else if (!doNotBindFrambuffer) {\n                    engine.restoreDefaultFramebuffer();\n                }\n                (_a = engine._debugInsertMarker) === null || _a === void 0 ? void 0 : _a.call(engine, `post process ${postProcesses[index].name} output`);\n            }\n            const pp = postProcesses[index];\n            const effect = pp.apply();\n            if (effect) {\n                pp.onBeforeRenderObservable.notifyObservers(effect);\n                // VBOs\n                this._prepareBuffers();\n                engine.bindBuffers(this._vertexBuffers, this._indexBuffer, effect);\n                // Draw order\n                engine.drawElementsType(0, 0, 6);\n                pp.onAfterRenderObservable.notifyObservers(effect);\n            }\n        }\n        // Restore depth buffer\n        engine.setDepthBuffer(true);\n        engine.setDepthWrite(true);\n    }\n    /**\n     * Finalize the result of the output of the postprocesses.\n     * @param doNotPresent If true the result will not be displayed to the screen.\n     * @param targetTexture The render target wrapper to render to.\n     * @param faceIndex The index of the face to bind the target texture to.\n     * @param postProcesses The array of post processes to render.\n     * @param forceFullscreenViewport force gl.viewport to be full screen eg. 0,0,textureWidth,textureHeight (default: false)\n     * @internal\n     */\n    _finalizeFrame(doNotPresent, targetTexture, faceIndex, postProcesses, forceFullscreenViewport = false) {\n        var _a;\n        const camera = this._scene.activeCamera;\n        if (!camera) {\n            return;\n        }\n        postProcesses = postProcesses || camera._postProcesses.filter((pp) => {\n            return pp != null;\n        });\n        if (postProcesses.length === 0 || !this._scene.postProcessesEnabled) {\n            return;\n        }\n        const engine = this._scene.getEngine();\n        for (let index = 0, len = postProcesses.length; index < len; index++) {\n            const pp = postProcesses[index];\n            if (index < len - 1) {\n                pp._outputTexture = postProcesses[index + 1].activate(camera, targetTexture === null || targetTexture === void 0 ? void 0 : targetTexture.texture);\n            }\n            else {\n                if (targetTexture) {\n                    engine.bindFramebuffer(targetTexture, faceIndex, undefined, undefined, forceFullscreenViewport);\n                    pp._outputTexture = targetTexture;\n                }\n                else {\n                    engine.restoreDefaultFramebuffer();\n                    pp._outputTexture = null;\n                }\n                (_a = engine._debugInsertMarker) === null || _a === void 0 ? void 0 : _a.call(engine, `post process ${postProcesses[index].name} output`);\n            }\n            if (doNotPresent) {\n                break;\n            }\n            const effect = pp.apply();\n            if (effect) {\n                pp.onBeforeRenderObservable.notifyObservers(effect);\n                // VBOs\n                this._prepareBuffers();\n                engine.bindBuffers(this._vertexBuffers, this._indexBuffer, effect);\n                // Draw order\n                engine.drawElementsType(0, 0, 6);\n                pp.onAfterRenderObservable.notifyObservers(effect);\n            }\n        }\n        // Restore states\n        engine.setDepthBuffer(true);\n        engine.setDepthWrite(true);\n        engine.setAlphaMode(0);\n    }\n    /**\n     * Disposes of the post process manager.\n     */\n    dispose() {\n        const buffer = this._vertexBuffers[VertexBuffer.PositionKind];\n        if (buffer) {\n            buffer.dispose();\n            this._vertexBuffers[VertexBuffer.PositionKind] = null;\n        }\n        if (this._indexBuffer) {\n            this._scene.getEngine()._releaseBuffer(this._indexBuffer);\n            this._indexBuffer = null;\n        }\n    }\n}\n//# sourceMappingURL=postProcessManager.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { PostProcess } from \"./postProcess.js\";\n\nimport \"../Shaders/sharpen.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * The SharpenPostProcess applies a sharpen kernel to every pixel\n * See http://en.wikipedia.org/wiki/Kernel_(image_processing)\n */\nexport class SharpenPostProcess extends PostProcess {\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"SharpenPostProcess\" string\n     */\n    getClassName() {\n        return \"SharpenPostProcess\";\n    }\n    /**\n     * Creates a new instance ConvolutionPostProcess\n     * @param name The name of the effect.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n     */\n    constructor(name, options, camera, samplingMode, engine, reusable, textureType = 0, blockCompilation = false) {\n        super(name, \"sharpen\", [\"sharpnessAmounts\", \"screenSize\"], null, options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation);\n        /**\n         * How much of the original color should be applied. Setting this to 0 will display edge detection. (default: 1)\n         */\n        this.colorAmount = 1.0;\n        /**\n         * How much sharpness should be applied (default: 0.3)\n         */\n        this.edgeAmount = 0.3;\n        this.onApply = (effect) => {\n            effect.setFloat2(\"screenSize\", this.width, this.height);\n            effect.setFloat2(\"sharpnessAmounts\", this.edgeAmount, this.colorAmount);\n        };\n    }\n    /**\n     * @internal\n     */\n    static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(() => {\n            return new SharpenPostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.textureType, parsedPostProcess.reusable);\n        }, parsedPostProcess, scene, rootUrl);\n    }\n}\n__decorate([\n    serialize()\n], SharpenPostProcess.prototype, \"colorAmount\", void 0);\n__decorate([\n    serialize()\n], SharpenPostProcess.prototype, \"edgeAmount\", void 0);\nRegisterClass(\"BABYLON.SharpenPostProcess\", SharpenPostProcess);\n//# sourceMappingURL=sharpenPostProcess.js.map","import { Vector2 } from \"../Maths/math.vector.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/stereoscopicInterlace.fragment.js\";\n/**\n * StereoscopicInterlacePostProcessI used to render stereo views from a rigged camera with support for alternate line interlacing\n */\nexport class StereoscopicInterlacePostProcessI extends PostProcess {\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"StereoscopicInterlacePostProcessI\" string\n     */\n    getClassName() {\n        return \"StereoscopicInterlacePostProcessI\";\n    }\n    /**\n     * Initializes a StereoscopicInterlacePostProcessI\n     * @param name The name of the effect.\n     * @param rigCameras The rig cameras to be applied to the post process\n     * @param isStereoscopicHoriz If the rendered results are horizontal or vertical\n     * @param isStereoscopicInterlaced If the rendered results are alternate line interlaced\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     */\n    constructor(name, rigCameras, isStereoscopicHoriz, isStereoscopicInterlaced, samplingMode, engine, reusable) {\n        super(name, \"stereoscopicInterlace\", [\"stepSize\"], [\"camASampler\"], 1, rigCameras[1], samplingMode, engine, reusable, isStereoscopicInterlaced ? \"#define IS_STEREOSCOPIC_INTERLACED 1\" : isStereoscopicHoriz ? \"#define IS_STEREOSCOPIC_HORIZ 1\" : undefined);\n        this._passedProcess = rigCameras[0]._rigPostProcess;\n        this._stepSize = new Vector2(1 / this.width, 1 / this.height);\n        this.onSizeChangedObservable.add(() => {\n            this._stepSize = new Vector2(1 / this.width, 1 / this.height);\n        });\n        this.onApplyObservable.add((effect) => {\n            effect.setTextureFromPostProcess(\"camASampler\", this._passedProcess);\n            effect.setFloat2(\"stepSize\", this._stepSize.x, this._stepSize.y);\n        });\n    }\n}\n/**\n * StereoscopicInterlacePostProcess used to render stereo views from a rigged camera\n */\nexport class StereoscopicInterlacePostProcess extends PostProcess {\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"StereoscopicInterlacePostProcess\" string\n     */\n    getClassName() {\n        return \"StereoscopicInterlacePostProcess\";\n    }\n    /**\n     * Initializes a StereoscopicInterlacePostProcess\n     * @param name The name of the effect.\n     * @param rigCameras The rig cameras to be applied to the post process\n     * @param isStereoscopicHoriz If the rendered results are horizontal or vertical\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     */\n    constructor(name, rigCameras, isStereoscopicHoriz, samplingMode, engine, reusable) {\n        super(name, \"stereoscopicInterlace\", [\"stepSize\"], [\"camASampler\"], 1, rigCameras[1], samplingMode, engine, reusable, isStereoscopicHoriz ? \"#define IS_STEREOSCOPIC_HORIZ 1\" : undefined);\n        this._passedProcess = rigCameras[0]._rigPostProcess;\n        this._stepSize = new Vector2(1 / this.width, 1 / this.height);\n        this.onSizeChangedObservable.add(() => {\n            this._stepSize = new Vector2(1 / this.width, 1 / this.height);\n        });\n        this.onApplyObservable.add((effect) => {\n            effect.setTextureFromPostProcess(\"camASampler\", this._passedProcess);\n            effect.setFloat2(\"stepSize\", this._stepSize.x, this._stepSize.y);\n        });\n    }\n}\n//# sourceMappingURL=stereoscopicInterlacePostProcess.js.map","import { Texture } from \"../Materials/Textures/texture.js\";\nimport { PostProcess } from \"./postProcess.js\";\n\nimport { Logger } from \"../Misc/logger.js\";\nimport \"../Shaders/imageProcessing.fragment.js\";\nimport \"../Shaders/subSurfaceScattering.fragment.js\";\nimport \"../Shaders/postprocess.vertex.js\";\n/**\n * Sub surface scattering post process\n */\nexport class SubSurfaceScatteringPostProcess extends PostProcess {\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"SubSurfaceScatteringPostProcess\" string\n     */\n    getClassName() {\n        return \"SubSurfaceScatteringPostProcess\";\n    }\n    constructor(name, scene, options, camera = null, samplingMode, engine, reusable, textureType = 0) {\n        super(name, \"subSurfaceScattering\", [\"texelSize\", \"viewportSize\", \"metersPerUnit\"], [\"diffusionS\", \"diffusionD\", \"filterRadii\", \"irradianceSampler\", \"depthSampler\", \"albedoSampler\"], options, camera, samplingMode || Texture.BILINEAR_SAMPLINGMODE, engine, reusable, null, textureType, \"postprocess\", undefined, true);\n        this._scene = scene;\n        this.updateEffect();\n        this.onApplyObservable.add((effect) => {\n            if (!scene.prePassRenderer || !scene.subSurfaceConfiguration) {\n                Logger.Error(\"PrePass and subsurface configuration needs to be enabled for subsurface scattering.\");\n                return;\n            }\n            const texelSize = this.texelSize;\n            effect.setFloat(\"metersPerUnit\", scene.subSurfaceConfiguration.metersPerUnit);\n            effect.setFloat2(\"texelSize\", texelSize.x, texelSize.y);\n            effect.setTexture(\"irradianceSampler\", scene.prePassRenderer.getRenderTarget().textures[scene.prePassRenderer.getIndex(0)]);\n            effect.setTexture(\"depthSampler\", scene.prePassRenderer.getRenderTarget().textures[scene.prePassRenderer.getIndex(5)]);\n            effect.setTexture(\"albedoSampler\", scene.prePassRenderer.getRenderTarget().textures[scene.prePassRenderer.getIndex(7)]);\n            effect.setFloat2(\"viewportSize\", Math.tan(scene.activeCamera.fov / 2) * scene.getEngine().getAspectRatio(scene.activeCamera, true), Math.tan(scene.activeCamera.fov / 2));\n            effect.setArray3(\"diffusionS\", scene.subSurfaceConfiguration.ssDiffusionS);\n            effect.setArray(\"diffusionD\", scene.subSurfaceConfiguration.ssDiffusionD);\n            effect.setArray(\"filterRadii\", scene.subSurfaceConfiguration.ssFilterRadii);\n        });\n    }\n}\n//# sourceMappingURL=subSurfaceScatteringPostProcess.js.map","import { Vector2 } from \"../Maths/math.vector.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/vrDistortionCorrection.fragment.js\";\n/**\n * VRDistortionCorrectionPostProcess used for mobile VR\n */\nexport class VRDistortionCorrectionPostProcess extends PostProcess {\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"VRDistortionCorrectionPostProcess\" string\n     */\n    getClassName() {\n        return \"VRDistortionCorrectionPostProcess\";\n    }\n    /**\n     * Initializes the VRDistortionCorrectionPostProcess\n     * @param name The name of the effect.\n     * @param camera The camera to apply the render pass to.\n     * @param isRightEye If this is for the right eye distortion\n     * @param vrMetrics All the required metrics for the VR camera\n     */\n    constructor(name, camera, isRightEye, vrMetrics) {\n        super(name, \"vrDistortionCorrection\", [\"LensCenter\", \"Scale\", \"ScaleIn\", \"HmdWarpParam\"], null, vrMetrics.postProcessScaleFactor, camera, Texture.BILINEAR_SAMPLINGMODE);\n        this._isRightEye = isRightEye;\n        this._distortionFactors = vrMetrics.distortionK;\n        this._postProcessScaleFactor = vrMetrics.postProcessScaleFactor;\n        this._lensCenterOffset = vrMetrics.lensCenterOffset;\n        this.adaptScaleToCurrentViewport = true;\n        this.onSizeChangedObservable.add(() => {\n            this._scaleIn = new Vector2(2, 2 / this.aspectRatio);\n            this._scaleFactor = new Vector2(0.5 * (1 / this._postProcessScaleFactor), 0.5 * (1 / this._postProcessScaleFactor) * this.aspectRatio);\n            this._lensCenter = new Vector2(this._isRightEye ? 0.5 - this._lensCenterOffset * 0.5 : 0.5 + this._lensCenterOffset * 0.5, 0.5);\n        });\n        this.onApplyObservable.add((effect) => {\n            effect.setFloat2(\"LensCenter\", this._lensCenter.x, this._lensCenter.y);\n            effect.setFloat2(\"Scale\", this._scaleFactor.x, this._scaleFactor.y);\n            effect.setFloat2(\"ScaleIn\", this._scaleIn.x, this._scaleIn.y);\n            effect.setFloat4(\"HmdWarpParam\", this._distortionFactors[0], this._distortionFactors[1], this._distortionFactors[2], this._distortionFactors[3]);\n        });\n    }\n}\n//# sourceMappingURL=vrDistortionCorrectionPostProcess.js.map","import { Texture } from \"../Materials/Textures/texture.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/vrMultiviewToSingleview.fragment.js\";\nimport \"../Engines/Extensions/engine.multiview.js\";\n/**\n * VRMultiviewToSingleview used to convert multiview texture arrays to standard textures for scenarios such as webVR\n * This will not be used for webXR as it supports displaying texture arrays directly\n */\nexport class VRMultiviewToSingleviewPostProcess extends PostProcess {\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"VRMultiviewToSingleviewPostProcess\" string\n     */\n    getClassName() {\n        return \"VRMultiviewToSingleviewPostProcess\";\n    }\n    /**\n     * Initializes a VRMultiviewToSingleview\n     * @param name name of the post process\n     * @param camera camera to be applied to\n     * @param scaleFactor scaling factor to the size of the output texture\n     */\n    constructor(name, camera, scaleFactor) {\n        super(name, \"vrMultiviewToSingleview\", [\"imageIndex\"], [\"multiviewSampler\"], scaleFactor, camera, Texture.BILINEAR_SAMPLINGMODE);\n        const cam = camera !== null && camera !== void 0 ? camera : this.getCamera();\n        this.onSizeChangedObservable.add(() => { });\n        this.onApplyObservable.add((effect) => {\n            if (cam._scene.activeCamera && cam._scene.activeCamera.isLeftCamera) {\n                effect.setInt(\"imageIndex\", 0);\n            }\n            else {\n                effect.setInt(\"imageIndex\", 1);\n            }\n            effect.setTexture(\"multiviewSampler\", cam._multiviewTexture);\n        });\n    }\n}\n//# sourceMappingURL=vrMultiviewToSingleviewPostProcess.js.map"],"names":["CannonJSPlugin","constructor","_useDeltaForWorldStep","iterations","cannonInjection","CANNON","this","name","_physicsMaterials","Array","_fixedTimeStep","_physicsBodiesToRemoveAfterStep","_firstFrame","_tmpQuaternion","_minus90X","_plus90X","_tmpPosition","_tmpDeltaPosition","_tmpUnityRotation","BJSCANNON","isSupported","_extendNamespace","world","World","broadphase","NaiveBroadphase","solver","_cannonRaycastResult","RaycastResult","_raycastResult","getPluginVersion","setGravity","gravity","vec","set","x","y","z","setTimeStep","timeStep","getTimeStep","executeStep","delta","impostors","impostor","type","beforeStep","step","_removeMarkedPhysicsBodiesFromWorld","length","forEach","physicsBody","removeBody","remove","applyImpulse","force","contactPoint","worldPoint","Vec3","impulse","applyForce","generatePhysicsBody","parent","removePhysicsBody","forceUpdate","isBodyInitRequired","shape","_createShape","oldBody","material","_addMaterial","uniqueId","getParam","bodyCreationObject","mass","nativeOptions","key","Object","prototype","hasOwnProperty","call","Body","addEventListener","onCollide","afterStep","addShape","addBody","add","param","_processChildMeshes","_updatePhysicsBodyTransformation","mainImpostor","meshChildren","object","getChildMeshes","mainRotation","rotationQuaternion","conjugateToRef","processMesh","mesh","childImpostor","getPhysicsImpostor","pPosition","getAbsolutePosition","subtract","q","multiply","resetUpdateFlags","Quaternion","w","filter","m","physicsImpostor","removeEventListener","indexOf","push","generateJoint","impostorJoint","mainBody","connectedBody","connectedImpostor","constraint","jointData","joint","constraintData","pivotA","mainPivot","pivotB","connectedPivot","axisA","mainAxis","axisB","connectedAxis","maxForce","nativeParams","collideConnected","collision","HingeConstraint","DistanceConstraint","maxDistance","springData","Spring","restLength","stiffness","damping","localAnchorA","localAnchorB","LockConstraint","PointToPointConstraint","physicsJoint","addConstraint","forceApplicationCallback","registerAfterPhysicsStep","removeJoint","removeConstraint","unregisterAfterPhysicsStep","friction","restitution","index","mat","currentMat","Material","_checkWithEpsilon","value","returnValue","impostorExtents","getObjectExtents","radiusX","radiusY","radiusZ","Sphere","Math","max","radiusTop","undefined","radiusBottom","height","numSegments","Cylinder","quat","setFromAxisAngle","PI","translation","transformAllPoints","box","scale","Box","Plane","rawVerts","getVerticesData","rawFaces","getIndices","oldPosition","position","clone","oldRotation","rotation","oldQuaternion","copyFromFloats","copyFrom","getParentsRotation","conjugateInPlace","transform","computeWorldMatrix","transformedVertices","toArray","Trimesh","oldPosition2","oldRotation2","oldQuaternion2","multiplyInPlace","_createHeightmap","Particle","pointDepth","pos","matrix","arraySize","sqrt","boundingInfo","getBoundingInfo","dim","min","boundingBox","extendSizeWorld","minY","elementSize","i","round","loc","slice","newValue","Heightfield","center","getObjectCenter","getAbsolutePivotPoint","divideInPlace","scaling","quaternion","setDeltaRotation","c","oldPivot","getPivotMatrix","p","setPreTransformMatrix","centerWorld","negate","setDeltaPosition","setTransformationFromPhysicsBody","setPhysicsBodyTransformation","newPosition","newRotation","setLinearVelocity","velocity","setAngularVelocity","angularVelocity","getLinearVelocity","v","getAngularVelocity","setBodyMass","updateMassProperties","getBodyMass","getBodyFriction","setBodyFriction","getBodyRestitution","setBodyRestitution","sleepBody","sleep","wakeUpBody","wakeUp","updateDistanceJoint","distance","setMotor","speed","motorIndex","enableMotor","setMotorSpeed","setLimit","minForce","motorEquation","syncMeshWithImpostor","body","getRadius","shapes","boundingSphereRadius","getBoxSizeToRef","result","halfExtents","dispose","step_tmp1","engine","dt","timeSinceLastCalled","maxSubSteps","internalStep","time","internalSteps","floor","t0","performance","now","h_div_dt","interpvelo","bodies","j","b","STATIC","sleepState","SLEEPING","vsub","previousPosition","vadd","interpolatedPosition","interpolatedQuaternion","raycast","from","to","reset","raycastToRef","raycastClosest","hasHit","setHitData","hitNormalWorld","hitPointWorld","setHitDistance","OimoJSPlugin","oimoInjection","OIMO","_tmpImpostorsArray","_tmpPositionVector","BJSOIMO","clear","contact","contacts","touching","body1","sleeping","body2","next","collidingImpostor","point","normal","invScale","bodyConfig","config","size","posShape","rot","rotShape","move","density","addToArray","checkWithEpsilon","globalQuaternion","toEulerAngles","radToDeg","subtractToRef","localPosition","sizeX","sizeY","sizeZ","resetQuaternion","updatePosition","removeRigidBody","options","nativeJointData","axe1","asArray","axe2","pos1","pos2","spring","e","getPosition","getQuaternion","orientation","syncShapes","awake","linearVelocity","staticBody","setupMass","minDistance","limitMotor","upperLimit","lowerLimit","motor","rotationalLimitMotor2","rotationalLimitMotor1","rotationalLimitMotor","radius","halfWidth","halfHeight","halfDepth","PhysicsEngine","_physicsPlugin","static","DefaultPluginFactory","_impostors","_joints","_subTimeStep","_uniqueIdCounter","Error","newTimeStep","setSubTimeStep","subTimeStep","getSubTimeStep","getPhysicsPluginName","addImpostor","removeImpostor","splice","getPhysicsPlugin","addJoint","physicsPlugin","matchingJoints","_step","getImpostors","getImpostorForPhysicsObject","getImpostorWithPhysicsBody","defineProperty","get","_physicsImpostor","_disposePhysicsObserver","onDisposeObservable","enumerable","configurable","otherMesh","pivot1","pivot2","createJoint","scene","physicObject","jsonObject","PhysicsImpostor","physicsMass","physicsFriction","physicsRestitution","isDisposed","_isDisposed","_physicsEngine","setMass","pressure","plugin","setBodyPressure","getBodyPressure","getBodyStiffness","setBodyStiffness","velocityIterations","getBodyVelocityIterations","setBodyVelocityIterations","positionIterations","getBodyPositionIterations","setBodyPositionIterations","_options","_scene","_pluginData","_bodyUpdateRequired","_onBeforePhysicsStepCallbacks","_onAfterPhysicsStepCallbacks","_onPhysicsCollideCallbacks","_deltaPosition","soft","segments","_tmpQuat","_tmpQuat2","translate","_deltaRotationConjugated","multiplyToRef","disableBidirectionalTransformation","func","setAbsolutePosition","_deltaRotation","applyRotationQuaternionToRef","_TmpVecs","onCollideEvent","otherImpostor","obj","otherImpostors","callback","getScene","getPhysicsEngine","fixedPoints","margin","path","ignoreParent","_init","_parent","_getPhysicsParent","_physicsBody","setScalingUpdated","IDENTITY_QUATERNION","worldMatrix","decompose","extendSize","abs","DEFAULT_OBJECT_SIZE","paramName","setParam","executeNativeFunction","registerBeforePhysicsStep","unregisterBeforePhysicsStep","registerOnPhysicsCollide","collideAgainst","collidedAgainstList","unregisterOnPhysicsCollide","some","cbDef","idx","sameList","every","jointType","addAnchor","width","influence","noCollisionBetweenLinkedBodies","appendAnchor","addHook","appendHook","newObject","conjugate","syncBoneWithImpostor","bone","boneMesh","jointPivot","distToJoint","adjustRotation","tempVec","tempQuat","_TmpQuat","setRotationQuaternion","getDirectionToRef","getParent","addInPlace","syncImpostorWithBone","boneAxis","getRotationQuaternionToRef","boneDir","getAbsolutePositionToRef","NoImpostor","SphereImpostor","BoxImpostor","PlaneImpostor","MeshImpostor","CapsuleImpostor","CylinderImpostor","ParticleImpostor","HeightmapImpostor","ConvexHullImpostor","CustomImpostor","RopeImpostor","ClothImpostor","SoftbodyImpostor","PhysicsJoint","_physicsJoint","newJoint","DistanceJoint","HingeJoint","BallAndSocketJoint","WheelJoint","SliderJoint","PrismaticJoint","UniversalJoint","Hinge2Joint","PointToPointJoint","SpringJoint","LockJoint","ConstraintAxisLimitMode","ConstraintAxis","ConstraintMotorType","transformNode","_pluginDataInstances","disablePreStep","physicsEngine","hasThinInstances","initBodyInstances","initBody","setShape","getShape","setFilterGroup","group","getFilterGroup","setEventMask","eventMask","getEventMask","setMassProperties","massProps","getMassProperties","setLinearDamping","getLinearDamping","setAngularDamping","getAngularDamping","linVel","getLinearVelocityToRef","angVel","getAngularVelocityToRef","location","getGeometry","getBodyGeometry","registerOnCollide","registerOnBodyCollide","unregisterOnCollide","unregisterOnBodyCollide","tmAbstractMesh","_IDENTITY_QUATERNION","_DEFAULT_OBJECT_SIZE","childBody","disposeBody","ConstraintType","ShapeType","_physicsBodies","getBodies","DefaultRenderingPipeline","automaticBuild","_buildAllowed","sharpenEnabled","enabled","_sharpenEnabled","_buildPipeline","bloomKernel","_bloomKernel","bloom","kernel","_hardwareScaleLevel","bloomWeight","_bloomWeight","weight","bloomThreshold","_bloomThreshold","threshold","bloomScale","_bloomScale","_rebuildBloom","bloomEnabled","_bloomEnabled","oldBloom","_defaultPipelineTextureType","_cameras","disposeEffects","depthOfFieldEnabled","_depthOfFieldEnabled","depthOfFieldBlurLevel","_depthOfFieldBlurLevel","oldDof","depthOfField","focalLength","focusDistance","fStop","lensSize","fxaaEnabled","_fxaaEnabled","samples","sampleCount","_samples","imageProcessingEnabled","_imageProcessingEnabled","imageProcessingConfiguration","isEnabled","glowLayerEnabled","_glowLayer","glowLayer","chromaticAberrationEnabled","_chromaticAberrationEnabled","grainEnabled","_grainEnabled","hdr","cameras","super","getEngine","_camerasToBeAttached","SharpenPostProcessId","ImageProcessingPostProcessId","FxaaPostProcessId","ChromaticAberrationPostProcessId","GrainPostProcessId","animations","_imageProcessingConfigurationObserver","onBuildObservable","_resizeObserver","_hasCleared","_prevPostProcess","_prevPrevPostProcess","_depthOfFieldSceneObserver","_activeCameraChangedObserver","_activeCamerasChangedObserver","caps","getCaps","_hdr","textureHalfFloatRender","textureFloatRender","postProcessRenderPipelineManager","addPipeline","sharpen","_sharpenEffect","getHardwareScalingLevel","onResizeObservable","chromaticAberration","getRenderWidth","getRenderHeight","_chromaticAberrationEffect","grain","_grainEffect","onUpdateParameters","_downscale","_exposure","exposure","getClassName","prepare","previousState","_setAutoClearAndTextureSharing","postProcess","skipTextureSharing","autoClear","shareOutputWith","useOwnOutput","_disposePostProcesses","detachCamerasFromRenderPipeline","_name","_reset","camera","enableDepthRenderer","useOnlyInActiveCamera","onAfterRenderTargetsRenderObservable","activeCamera","depthTexture","getDepthMap","depthRenderer","_isReady","_updateEffects","addEffect","_effects","imageProcessing","applyByPostProcess","getEffect","_updateParameters","isReady","updateEffect","fxaa","attachCamerasToRenderPipeline","activeCameras","onActiveCameraChanged","onActiveCamerasChanged","_enableMSAAOnFirstPostProcess","notifyObservers","disposeNonRecreated","addCamera","removeCamera","serialize","serializationObject","customType","source","rootUrl","PostProcessRenderEffect","getPostProcesses","singleInstance","_singleInstance","_getPostProcesses","_indicesForCamera","_postProcesses","pps","ppIndex","_update","_attachCameras","cameraKey","cams","cameraName","isArray","attachPostProcess","_detachCameras","postProcesses","detachPostProcess","_enable","_disable","PostProcessRenderPipeline","_engine","_renderEffects","_renderEffectsForIsolatedPass","renderEffectName","renderEffect","_rebuild","_enableEffect","renderEffects","_disableEffect","unique","indicesToDelete","_features","supportMSAA","effectKeys","keys","setPrePassRenderer","prePassRenderer","PostProcessRenderPipelineManager","_renderPipelines","supportedPipelines","renderPipelineName","pipeline","renderPipeline","enableEffectInPipeline","disableEffectInPipeline","update","_postProcessRenderPipelineManager","component","_getComponent","PostProcessRenderPipelineManagerSceneComponent","_addComponent","register","_gatherRenderTargetsStage","registerStep","_gatherRenderTargets","rebuild","AnaglyphPostProcess","rigCameras","samplingMode","reusable","_passedProcess","_rigPostProcess","onApplyObservable","effect","setTextureFromPostProcess","BloomEffect","_merge","_blurX","_blurY","pipelineTextureType","blockCompilation","alwaysForcePOT","effectIndex","BloomMergePostProcess","originalFromInput","blurred","textureType","externalTextureSamplerBinding","setTextureFromPostProcessOutput","setFloat","BlurPostProcess","_idealKernel","_kernel","_nearestBestKernel","_blockCompilation","packedFloat","_packedFloat","direction","defines","textureFormat","varyingCount","depCount","_staticDefines","_outputTexture","setFloat2","uniforms","samplers","indexParameters","onCompiled","onError","N","centerIndex","offsets","weights","totalWeight","u","_gaussianWeight","linearSamplingWeights","linearSamplingOffsets","linearSamplingMap","o","sharedCell","weightLinear","offsetLinear","maxVaryingRows","maxVaryingVectors","freeVaryingVec2","_glslFloat","idealKernel","k","sigma","exponent","exp","decimalFigures","toFixed","replace","parsedPostProcess","targetCamera","renderTargetSamplingMode","ChromaticAberrationPostProcess","screenWidth","screenHeight","aberrationAmount","radialIntensity","centerPosition","CircleOfConfusionPostProcess","_depthTexture","setTexture","cocPrecalculation","minZ","maxZ","DepthOfFieldBlurPostProcess","circleOfConfusion","imageToBlur","DepthOfFieldEffectBlurLevel","DepthOfFieldEffect","_circleOfConfusion","blurLevel","Low","circleOfConfusionTextureFormat","isWebGPU","webGLVersion","_depthOfFieldBlurY","_depthOfFieldBlurX","blurCount","kernelSize","High","Medium","adjustedKernelSize","pow","ratio","blurY","blurX","_dofMerge","DepthOfFieldMergePostProcess","_blurSteps","ExtractHighlightsPostProcess","_inputPostProcess","FxaaPostProcess","_getDefines","texelSize","glInfo","getGlInfo","renderer","toLowerCase","GrainPostProcess","intensity","animated","random","ImageProcessingPostProcess","_imageProcessingConfiguration","_attachImageProcessingConfiguration","configuration","doNotBuild","_imageProcessingObserver","getCamera","scenes","colorCurves","colorCurvesEnabled","colorGradingTexture","colorGradingEnabled","toneMappingEnabled","toneMappingType","contrast","vignetteStretch","vignetteCentreX","vignetteCenterX","vignetteCentreY","vignetteCenterY","vignetteWeight","vignetteColor","vignetteCameraFov","vignetteBlendMode","vignetteEnabled","ditheringIntensity","ditheringEnabled","fromLinearSpace","_fromLinearSpace","_defines","IMAGEPROCESSING","VIGNETTE","VIGNETTEBLENDMODEMULTIPLY","VIGNETTEBLENDMODEOPAQUE","TONEMAPPING","TONEMAPPING_ACES","CONTRAST","COLORCURVES","COLORGRADING","COLORGRADING3D","FROMLINEARSPACE","SAMPLER3DGREENDEPTH","SAMPLER3DBGRMAP","DITHER","IMAGEPROCESSINGPOSTPROCESS","EXPOSURE","SKIPFINALCOLORCLAMP","onApply","bind","aspectRatio","prepareDefines","define","BlackAndWhitePostProcess","degree","ColorCorrectionPostProcess","colorTableUrl","_colorTableTexture","anisotropicFilteringLevel","wrapU","wrapV","ConvolutionPostProcess","setArray","EdgeDetect0Kernel","EdgeDetect1Kernel","EdgeDetect2Kernel","SharpenKernel","EmbossKernel","GaussianKernel","DisplayPassPostProcess","FilterPostProcess","kernelMatrix","setMatrix","MotionBlurPostProcess","motionBlurSamples","_motionBlurSamples","_updateEffect","isObjectBased","_isObjectBased","_applyMode","_geometryBufferRenderer","_forceGeometryBuffer","geometryBufferRenderer","_prePassRenderer","forceGeometryBuffer","motionStrength","_invViewProjection","_previousViewProjection","enableGeometryBufferRenderer","enableVelocity","enablePrePassRenderer","markAsDirty","_prePassEffectConfiguration","excludeSkinnedMesh","skinnedMesh","skeleton","list","excludedSkinnedMeshesFromVelocity","excludedSkinnedMesh","removeExcludedSkinnedMesh","_previousTransformationMatrices","_previousBonesTransformationMatrices","texturesRequired","_onApplyObjectBased","getTransformMatrix","_onApplyScreenBased","setVector2","getAnimationRatio","velocityIndex","getTextureIndex","getGBuffer","textures","getIndex","getRenderTarget","viewProjection","invertToRef","getProjectionMatrix","depthIndex","join","RefractionPostProcess","refractionTexture","_refTexture","_ownRefractionTexture","refractionTextureUrl","color","depth","colorLevel","onActivateObservable","cam","setColor3","SSAO2RenderingPipeline","n","_ssaoPostProcess","_getDefinesForSSAO","_sampleSphere","_generateHemisphere","textureSamples","_textureSamples","_originalColorPostProcess","expensiveBlur","_blurHPostProcess","_blurVPostProcess","_expensiveBlur","IsSupported","supportSSAO2","SSAOOriginalSceneColorEffect","SSAORenderEffect","SSAOBlurHRenderEffect","SSAOBlurVRenderEffect","SSAOCombineRenderEffect","totalStrength","minZAspect","base","_bits","Uint32Array","_ratio","ssaoRatio","blurRatio","_createRandomTexture","_createSSAOPostProcess","_createBlurPostProcess","_createSSAOCombinePostProcess","_ssaoCombinePostProcess","disableGeometryBufferRenderer","_randomTexture","_samplerOffsets","expensive","_radicalInverse_VdC","_hammersley","_hemisphereSample_uniform","phi","cosTheta","sinTheta","cos","sin","numSamples","vector","rand","_a","_b","_c","_d","setArray3","mode","setMatrix3x3","PERSPECTIVE_DEPTH_PROJECTION","tan","fov","getAspectRatio","orthoLeft","orthoRight","orthoBottom","orthoTop","ORTHO_DEPTH_PROJECTION","viewport","setVector4","context","getContext","randVector","normalize","scaleInPlace","fillStyle","fillRect","SSAORenderingPipeline","area","fallOff","_firstUpdate","combineRatio","disableDepthRender","disableDepthRenderer","dw","sampleSphere","ScreenSpaceReflectionPostProcess","strength","reflectionSpecularFalloffExponent","roughnessFactor","_enableSmoothReflections","_reflectionSamples","_smoothSteps","enablePosition","enableReflectivity","_updateEffectDefines","positionIndex","roughnessIndex","normalIndex","viewMatrix","getViewMatrix","projectionMatrix","_isSceneRightHanded","useRightHandedSystem","enableSmoothReflections","reflectionSamples","smoothSteps","steps","StandardRenderingPipeline","_fixedExposure","_currentExposure","hdrAutoExposure","_hdrAutoExposure","hdrPostProcess","_motionStrength","_isObjectBasedMotionBlur","motionBlurPostProcess","objectBasedMotionBlur","shouldRebuild","BloomEnabled","DepthOfFieldEnabled","LensFlareEnabled","_lensFlareEnabled","HDREnabled","_hdrEnabled","VLSEnabled","_vlsEnabled","MotionBlurEnabled","_motionBlurEnabled","screenSpaceReflectionsEnabled","_screenSpaceReflectionsEnabled","volumetricLightStepsCount","_volumetricLightStepsCount","count","volumetricLightPostProcess","originalPostProcess","downSampleX4PostProcess","brightPassPostProcess","blurHPostProcesses","blurVPostProcesses","textureAdderPostProcess","volumetricLightSmoothXPostProcess","volumetricLightSmoothYPostProcess","volumetricLightMergePostProces","volumetricLightFinalPostProcess","luminancePostProcess","luminanceDownSamplePostProcesses","textureAdderFinalPostProcess","lensFlareFinalPostProcess","hdrFinalPostProcess","lensFlarePostProcess","lensFlareComposePostProcess","depthOfFieldPostProcess","fxaaPostProcess","screenSpaceReflectionPostProcess","brightThreshold","blurWidth","horizontalBlur","lensTexture","volumetricLightCoefficient","volumetricLightPower","volumetricLightBlurScale","sourceLight","hdrMinimumLuminance","hdrDecreaseRate","hdrIncreaseRate","lensColorTexture","lensFlareStrength","lensFlareGhostDispersal","lensFlareHaloWidth","lensFlareDistortionStrength","lensFlareBlurWidth","lensStarTexture","lensFlareDirtTexture","depthOfFieldDistance","depthOfFieldBlurWidth","_currentDepthOfFieldSource","_hdrCurrentLuminance","_basePostProcess","_floatTextureType","_createDownSampleX4PostProcess","_createBrightPassPostProcess","_createBlurPostProcesses","_createTextureAdderPostProcess","_createVolumetricLightPostProcess","_createLensFlarePostProcess","_createLuminancePostProcesses","_createHdrPostProcess","_createDepthOfFieldPostProcess","_createMotionBlurPostProcess","downSampleX4Offsets","id","setArray2","brightOffsets","sU","sV","indice","blurWidthKey","geometryRenderer","geometry","depthValues","getShadowGenerator","generator","getShadowMap","diffuse","setVector3","getShadowDirection","globalPosition","getDepthMinZ","getDepthMaxZ","LuminanceSteps","lastLuminance","pp","downSampleOffsets","onAfterRender","pixel","readPixels","bit_shift","then","data","Uint8Array","buffer","outputLiminance","lastTime","getDeltaTime","resolution","scaleBias1","scaleBias2","camerax","getRow","cameraz","camRot","toVector3","starRotation","lensStarMatrix","_getDepthTexture","mb","motionScale","prevViewProjection","invViewProjection","screenSize","getFps","drawBuffersExtension","sourceLightId","getLightById","trs","trsWebGPU","SSRRenderingPipeline","blurDispersionStrength","_blurDispersionStrength","environmentTexture","_environmentTexture","texture","environmentTextureIsProbe","_environmentTextureIsProbe","isProbe","attenuateScreenBorders","_attenuateScreenBorders","attenuate","attenuateIntersectionDistance","_attenuateIntersectionDistance","attenuateFacingCamera","_attenuateFacingCamera","attenuateBackfaceReflection","_attenuateBackfaceReflection","clipToFrustum","_clipToFrustum","clip","enableAutomaticThicknessComputation","_enableAutomaticThicknessComputation","automatic","backfaceDepthRenderer","_depthRenderer","backfaceDepthTextureSizeFactor","_backfaceDepthTextureSizeFactor","factor","_resizeDepthRenderer","_isEnabled","_isDirty","debug","_debug","SSRRenderEffect","SSRBlurRenderEffect","SSRCombineRenderEffect","thickness","maxSteps","selfCollisionNumSkip","blurQuality","_textureType","_disposeDepthRenderer","_getTextureSize","textureSize","getSize","renderTarget","boundingBoxSize","_ssrPostProcess","_depthRendererCamera","clearColor","r","reverseCulling","noPrePassRenderer","customRenderTargets","_createSSRPostProcess","_createBlurAndCombinerPostProcesses","_blurPostProcessX","_blurPostProcessY","_blurCombinerPostProcess","depthRendererSize","resize","boundingBoxPosition","colorIndex","inputTexture","_bindTexture","TonemappingOperator","VolumetricLightScatteringPostProcess","useDiffuseColor","postProcessRatio","_screenCoordinates","customMeshPosition","useCustomMeshPosition","invert","excludedMeshes","includedMeshes","decay","_viewPort","toGlobal","CreateDefaultMesh","_createPass","passRatio","onActivate","_updateMeshScreenCoordinates","_volumetricLightScatteringRTT","subMesh","useInstances","getMesh","renderingMaterial","_internalAbstractMeshDataInfo","_materialForRenderPass","currentRenderPassId","isReadyForSubMesh","attribs","getMaterial","needAlphaTesting","isVerticesDataPresent","useBones","computeBonesUsingShaders","numBoneInfluencers","bones","getRenderingMesh","drawWrapper","_getDrawWrapper","cachedDefines","setEffect","createEffect","maxSimultaneousMorphTargets","setCustomMeshPosition","getCustomMeshPosition","rttIndex","getPass","_meshExcluded","renderList","renderParticles","ignoreCameraViewport","renderSubMesh","renderingMesh","effectiveMesh","getEffectiveMesh","_isActiveIntermediate","setState","backFaceCulling","cullBackFaces","batch","_getInstancesRenderList","_id","getReplacementMesh","mustReturn","hardwareInstancedRendering","instancedArrays","visibleInstances","enableEffect","_bind","fillMode","getWorldMatrix","bindForSubMesh","alphaTexture","getAlphaTestTexture","getTextureMatrix","setMatrices","getTransformMatrices","_processRendering","isInstance","savedSceneClearColor","sceneClearColor","onBeforeRenderObservable","onAfterRenderObservable","customIsReadyFunction","refreshRate","preWarm","subMeshes","customRenderFunction","opaqueSubMeshes","alphaTestSubMeshes","transparentSubMeshes","depthOnlySubMeshes","setColorWrite","submesh","_alphaIndex","alphaIndex","_distanceToCamera","boundingSphere","sortedArray","sort","a","setAlphaMode","meshPosition","attachedNode","billboardMode","emissiveColor","ScreenSpaceCurvaturePostProcess","ridge","valley","normalTexture","PassPostProcess","PostProcess","postProcessName","customShaderCodeProcessing","_CustomShaderCodeProcessing","maxMSAASamples","_textures","setSamples","getEffectName","_fragmentUrl","_onActivateObserver","onSizeChanged","_onSizeChangedObserver","onSizeChangedObservable","_onApplyObserver","onBeforeRender","_onBeforeRenderObserver","_onAfterRenderObserver","_currentRenderTextureInd","_forcedOutputTexture","restoreDefaultInputTexture","markTextureDirty","_camera","_shareOutputWithPostProcess","_texelSize","fragmentUrl","parameters","vertexUrl","shaderLanguage","_parentContainer","nodeMaterialSource","alphaMode","enablePixelPerfectMode","forceFullscreenViewport","scaleMode","adaptScaleToCurrentViewport","_reusable","_renderId","_textureCache","_scaleRatio","getUniqueId","_textureFormat","_shaderLanguage","_samplers","_vertexUrl","_parameters","_indexParameters","_drawWrapper","_disposeTextures","_GetShaderCodeProcessing","defineCustomBindings","newUniforms","newSamplers","_postProcessDefines","vertex","fragment","attributes","uniformsNames","uniformBuffersNames","fallbacks","processCodeAfterIncludes","shaderType","code","processFinalCode","isReusable","_createRenderTargetTexture","textureOptions","channel","postProcessChannel","_generateDepthBuffer","generateDepthBuffer","tex","createRenderTargetTexture","lastUsedRenderId","_flushTextureCache","currentRenderId","currentlyUsed","_resize","needMipMaps","forceDepthStencil","firstPP","generateMipMaps","generateStencilBuffer","isStencilEnable","format","activate","sourceTexture","maxSize","maxTextureSize","requiredWidth","requiredHeight","webVRCamera","leftCamera","rightCamera","desiredWidth","desiredHeight","currentViewport","needPOTTextures","updateRenderTargetTextureSampleCount","target","cache","bindFramebuffer","_debugInsertMarker","_allowPostProcessClearColor","apply","setDepthBuffer","setDepthWrite","alphaConstants","setAlphaConstants","g","bindCustomBindings","_disposeTextureCache","addEffectConfiguration","firstPostProcess","_getFirstPostProcess","cameraId","Parse","postProcessType","_Parse","getCameraById","PostProcessManager","_vertexBuffers","_prepareBuffers","vertices","_buildIndexBuffer","indices","_indexBuffer","createIndexBuffer","vb","_prepareFrame","postProcessesEnabled","directRender","targetTexture","faceIndex","lodLevel","doNotBindFrambuffer","restoreDefaultFramebuffer","bindBuffers","drawElementsType","_finalizeFrame","doNotPresent","len","_releaseBuffer","SharpenPostProcess","colorAmount","edgeAmount","StereoscopicInterlacePostProcessI","isStereoscopicHoriz","isStereoscopicInterlaced","_stepSize","SubSurfaceScatteringPostProcess","subSurfaceConfiguration","metersPerUnit","ssDiffusionS","ssDiffusionD","ssFilterRadii","VRDistortionCorrectionPostProcess","isRightEye","vrMetrics","postProcessScaleFactor","_isRightEye","_distortionFactors","distortionK","_postProcessScaleFactor","_lensCenterOffset","lensCenterOffset","_scaleIn","_scaleFactor","_lensCenter","setFloat4","VRMultiviewToSingleviewPostProcess","scaleFactor","isLeftCamera","setInt","_multiviewTexture"],"sourceRoot":""}