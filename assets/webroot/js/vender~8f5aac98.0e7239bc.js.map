{"version":3,"file":"js/vender~8f5aac98.0e7239bc.js","mappings":"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","sources":["webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/PBR/iridescenceBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/PBR/pbrMetallicRoughnessBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/PBR/reflectionBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/PBR/refractionBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/PBR/sheenBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/PBR/subSurfaceBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/Particle/particleBlendMultiplyBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/Particle/particleRampGradientBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/Particle/particleTextureBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/Vertex/vertexOutputBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/colorSplitterBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/multiplyBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/remapBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/transformBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/trigonometryBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/vectorMergerBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Enums/nodeMaterialBlockConnectionPointMode.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Enums/nodeMaterialBlockConnectionPointTypes.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Enums/nodeMaterialBlockTargets.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Enums/nodeMaterialModes.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Enums/nodeMaterialSystemValues.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/Vertex/bonesBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/Vertex/instancesBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/Vertex/morphTargetsBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/Vertex/lightInformationBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/addBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/scaleBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/clampBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/crossBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/customBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/dotBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/normalizeBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/colorMergerBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/vectorSplitterBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/lerpBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/divideBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/subtractBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/stepBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/oneMinusBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/viewDirectionBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/fresnelBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/maxBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/minBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/distanceBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/lengthBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/negateBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/powBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/waveBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/randomNumberBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/arcTan2Block.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/smoothStepBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/reciprocalBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/replaceColorBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/posterizeBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/gradientBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/nLerpBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/worleyNoise3DBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/simplexPerlin3DBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/normalBlendBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/rotate2dBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/reflectBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/refractBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/desaturateBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/modBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/conditionalBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/matrixBuilderBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/cloudBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/voronoiNoiseBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/elbowBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/triPlanarBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/biPlanarBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/matrixDeterminantBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/Blocks/matrixTransposeBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/nodeMaterialBuildState.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/nodeMaterialBuildStateSharedData.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/nodeMaterial.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/nodeMaterialBlock.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/nodeMaterialBlockConnectionPoint.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/nodeMaterialConnectionPointCustomObject.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Node/nodeMaterialDecorator.js"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject.js\";\nimport { PBRIridescenceConfiguration } from \"../../../../Materials/PBR/pbrIridescenceConfiguration.js\";\n/**\n * Block used to implement the iridescence module of the PBR material\n */\nexport class IridescenceBlock extends NodeMaterialBlock {\n    /**\n     * Create a new IridescenceBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Fragment);\n        this._isUnique = true;\n        this.registerInput(\"intensity\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n        this.registerInput(\"indexOfRefraction\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n        this.registerInput(\"thickness\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n        this.registerOutput(\"iridescence\", NodeMaterialBlockConnectionPointTypes.Object, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"iridescence\", this, NodeMaterialConnectionPointDirection.Output, IridescenceBlock, \"IridescenceBlock\"));\n    }\n    /**\n     * Initialize the block and prepare the context for build\n     * @param state defines the state that will be used for the build\n     */\n    initialize(state) {\n        state._excludeVariableName(\"iridescenceOut\");\n        state._excludeVariableName(\"vIridescenceParams\");\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"IridescenceBlock\";\n    }\n    /**\n     * Gets the intensity input component\n     */\n    get intensity() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the indexOfRefraction input component\n     */\n    get indexOfRefraction() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the thickness input component\n     */\n    get thickness() {\n        return this._inputs[2];\n    }\n    /**\n     * Gets the iridescence object output component\n     */\n    get iridescence() {\n        return this._outputs[0];\n    }\n    autoConfigure() {\n        if (!this.intensity.isConnected) {\n            const intensityInput = new InputBlock(\"Iridescence intensity\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\n            intensityInput.value = 1;\n            intensityInput.output.connectTo(this.intensity);\n            const indexOfRefractionInput = new InputBlock(\"Iridescence ior\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\n            indexOfRefractionInput.value = 1.3;\n            indexOfRefractionInput.output.connectTo(this.indexOfRefraction);\n            const thicknessInput = new InputBlock(\"Iridescence thickness\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\n            thicknessInput.value = 400;\n            thicknessInput.output.connectTo(this.thickness);\n        }\n    }\n    prepareDefines(mesh, nodeMaterial, defines) {\n        super.prepareDefines(mesh, nodeMaterial, defines);\n        defines.setValue(\"IRIDESCENCE\", true, true);\n        defines.setValue(\"IRIDESCENCE_TEXTURE\", false, true);\n        defines.setValue(\"IRIDESCENCE_THICKNESS_TEXTURE\", false, true);\n    }\n    /**\n     * Gets the main code of the block (fragment side)\n     * @param iridescenceBlock instance of a IridescenceBlock or null if the code must be generated without an active iridescence module\n     * @returns the shader code\n     */\n    static GetCode(iridescenceBlock) {\n        let code = \"\";\n        const intensityName = (iridescenceBlock === null || iridescenceBlock === void 0 ? void 0 : iridescenceBlock.intensity.isConnected) ? iridescenceBlock.intensity.associatedVariableName : \"1.\";\n        const indexOfRefraction = (iridescenceBlock === null || iridescenceBlock === void 0 ? void 0 : iridescenceBlock.indexOfRefraction.isConnected)\n            ? iridescenceBlock.indexOfRefraction.associatedVariableName\n            : PBRIridescenceConfiguration._DefaultIndexOfRefraction;\n        const thickness = (iridescenceBlock === null || iridescenceBlock === void 0 ? void 0 : iridescenceBlock.thickness.isConnected) ? iridescenceBlock.thickness.associatedVariableName : PBRIridescenceConfiguration._DefaultMaximumThickness;\n        code += `iridescenceOutParams iridescenceOut;\r\n\r\n        #ifdef IRIDESCENCE\r\n            iridescenceBlock(\r\n                vec4(${intensityName}, ${indexOfRefraction}, 1., ${thickness}),\r\n                NdotV,\r\n                specularEnvironmentR0,\r\n                #ifdef CLEARCOAT\r\n                    NdotVUnclamped,\r\n                #endif\r\n                iridescenceOut\r\n            );\r\n\r\n            float iridescenceIntensity = iridescenceOut.iridescenceIntensity;\r\n            specularEnvironmentR0 = iridescenceOut.specularEnvironmentR0;\r\n        #endif\\r\\n`;\n        return code;\n    }\n    _buildBlock(state) {\n        if (state.target === NodeMaterialBlockTargets.Fragment) {\n            state.sharedData.bindableBlocks.push(this);\n            state.sharedData.blocksWithDefines.push(this);\n        }\n        return this;\n    }\n    serialize() {\n        const serializationObject = super.serialize();\n        return serializationObject;\n    }\n    _deserialize(serializationObject, scene, rootUrl) {\n        super._deserialize(serializationObject, scene, rootUrl);\n    }\n}\nRegisterClass(\"BABYLON.IridescenceBlock\", IridescenceBlock);\n//# sourceMappingURL=iridescenceBlock.js.map","import { __decorate } from \"../../../../tslib.es6.js\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint.js\";\nimport { MaterialHelper } from \"../../../materialHelper.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { PBRBaseMaterial } from \"../../../PBR/pbrBaseMaterial.js\";\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator.js\";\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject.js\";\nimport { SheenBlock } from \"./sheenBlock.js\";\nimport { GetEnvironmentBRDFTexture } from \"../../../../Misc/brdfTextureTools.js\";\nimport { MaterialFlags } from \"../../../materialFlags.js\";\nimport { AnisotropyBlock } from \"./anisotropyBlock.js\";\nimport { ReflectionBlock } from \"./reflectionBlock.js\";\nimport { ClearCoatBlock } from \"./clearCoatBlock.js\";\nimport { IridescenceBlock } from \"./iridescenceBlock.js\";\nimport { SubSurfaceBlock } from \"./subSurfaceBlock.js\";\n\nimport { Color3, TmpColors } from \"../../../../Maths/math.color.js\";\nconst mapOutputToVariable = {\n    ambientClr: [\"finalAmbient\", \"\"],\n    diffuseDir: [\"finalDiffuse\", \"\"],\n    specularDir: [\"finalSpecularScaled\", \"!defined(UNLIT) && defined(SPECULARTERM)\"],\n    clearcoatDir: [\"finalClearCoatScaled\", \"!defined(UNLIT) && defined(CLEARCOAT)\"],\n    sheenDir: [\"finalSheenScaled\", \"!defined(UNLIT) && defined(SHEEN)\"],\n    diffuseInd: [\"finalIrradiance\", \"!defined(UNLIT) && defined(REFLECTION)\"],\n    specularInd: [\"finalRadianceScaled\", \"!defined(UNLIT) && defined(REFLECTION)\"],\n    clearcoatInd: [\"clearcoatOut.finalClearCoatRadianceScaled\", \"!defined(UNLIT) && defined(REFLECTION) && defined(CLEARCOAT)\"],\n    sheenInd: [\"sheenOut.finalSheenRadianceScaled\", \"!defined(UNLIT) && defined(REFLECTION) && defined(SHEEN) && defined(ENVIRONMENTBRDF)\"],\n    refraction: [\"subSurfaceOut.finalRefraction\", \"!defined(UNLIT) && defined(SS_REFRACTION)\"],\n    lighting: [\"finalColor.rgb\", \"\"],\n    shadow: [\"shadow\", \"\"],\n    alpha: [\"alpha\", \"\"],\n};\n/**\n * Block used to implement the PBR metallic/roughness model\n */\nexport class PBRMetallicRoughnessBlock extends NodeMaterialBlock {\n    static _OnGenerateOnlyFragmentCodeChanged(block, _propertyName) {\n        const that = block;\n        if (that.worldPosition.isConnected) {\n            that.generateOnlyFragmentCode = !that.generateOnlyFragmentCode;\n            console.error(\"The worldPosition input must not be connected to be able to switch!\");\n            return false;\n        }\n        that._setTarget();\n        return true;\n    }\n    _setTarget() {\n        this._setInitialTarget(this.generateOnlyFragmentCode ? NodeMaterialBlockTargets.Fragment : NodeMaterialBlockTargets.VertexAndFragment);\n        this.getInputByName(\"worldPosition\").target = this.generateOnlyFragmentCode ? NodeMaterialBlockTargets.Fragment : NodeMaterialBlockTargets.Vertex;\n    }\n    /**\n     * Create a new ReflectionBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.VertexAndFragment);\n        this._environmentBRDFTexture = null;\n        this._metallicReflectanceColor = Color3.White();\n        this._metallicF0Factor = 1;\n        /**\n         * Intensity of the direct lights e.g. the four lights available in your scene.\n         * This impacts both the direct diffuse and specular highlights.\n         */\n        this.directIntensity = 1.0;\n        /**\n         * Intensity of the environment e.g. how much the environment will light the object\n         * either through harmonics for rough material or through the reflection for shiny ones.\n         */\n        this.environmentIntensity = 1.0;\n        /**\n         * This is a special control allowing the reduction of the specular highlights coming from the\n         * four lights of the scene. Those highlights may not be needed in full environment lighting.\n         */\n        this.specularIntensity = 1.0;\n        /**\n         * Defines the  falloff type used in this material.\n         * It by default is Physical.\n         */\n        this.lightFalloff = 0;\n        /**\n         * Specifies that alpha test should be used\n         */\n        this.useAlphaTest = false;\n        /**\n         * Defines the alpha limits in alpha test mode.\n         */\n        this.alphaTestCutoff = 0.5;\n        /**\n         * Specifies that alpha blending should be used\n         */\n        this.useAlphaBlending = false;\n        /**\n         * Specifies that the material will keeps the reflection highlights over a transparent surface (only the most luminous ones).\n         * A car glass is a good example of that. When the street lights reflects on it you can not see what is behind.\n         */\n        this.useRadianceOverAlpha = true;\n        /**\n         * Specifies that the material will keeps the specular highlights over a transparent surface (only the most luminous ones).\n         * A car glass is a good example of that. When sun reflects on it you can not see what is behind.\n         */\n        this.useSpecularOverAlpha = true;\n        /**\n         * Enables specular anti aliasing in the PBR shader.\n         * It will both interacts on the Geometry for analytical and IBL lighting.\n         * It also prefilter the roughness map based on the bump values.\n         */\n        this.enableSpecularAntiAliasing = false;\n        /**\n         * Enables realtime filtering on the texture.\n         */\n        this.realTimeFiltering = false;\n        /**\n         * Quality switch for realtime filtering\n         */\n        this.realTimeFilteringQuality = 8;\n        /**\n         * Defines if the material uses energy conservation.\n         */\n        this.useEnergyConservation = true;\n        /**\n         * This parameters will enable/disable radiance occlusion by preventing the radiance to lit\n         * too much the area relying on ambient texture to define their ambient occlusion.\n         */\n        this.useRadianceOcclusion = true;\n        /**\n         * This parameters will enable/disable Horizon occlusion to prevent normal maps to look shiny when the normal\n         * makes the reflect vector face the model (under horizon).\n         */\n        this.useHorizonOcclusion = true;\n        /**\n         * If set to true, no lighting calculations will be applied.\n         */\n        this.unlit = false;\n        /**\n         * Force normal to face away from face.\n         */\n        this.forceNormalForward = false;\n        /** Indicates that no code should be generated in the vertex shader. Can be useful in some specific circumstances (like when doing ray marching for eg) */\n        this.generateOnlyFragmentCode = false;\n        /**\n         * Defines the material debug mode.\n         * It helps seeing only some components of the material while troubleshooting.\n         */\n        this.debugMode = 0;\n        /**\n         * Specify from where on screen the debug mode should start.\n         * The value goes from -1 (full screen) to 1 (not visible)\n         * It helps with side by side comparison against the final render\n         * This defaults to 0\n         */\n        this.debugLimit = 0;\n        /**\n         * As the default viewing range might not be enough (if the ambient is really small for instance)\n         * You can use the factor to better multiply the final value.\n         */\n        this.debugFactor = 1;\n        this._isUnique = true;\n        this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Vertex);\n        this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Fragment);\n        this.registerInput(\"view\", NodeMaterialBlockConnectionPointTypes.Matrix, false);\n        this.registerInput(\"cameraPosition\", NodeMaterialBlockConnectionPointTypes.Vector3, false, NodeMaterialBlockTargets.Fragment);\n        this.registerInput(\"perturbedNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, true, NodeMaterialBlockTargets.Fragment);\n        this.registerInput(\"baseColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n        this.registerInput(\"metallic\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n        this.registerInput(\"roughness\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n        this.registerInput(\"ambientOcc\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n        this.registerInput(\"opacity\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n        this.registerInput(\"indexOfRefraction\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n        this.registerInput(\"ambientColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n        this.registerInput(\"reflection\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"reflection\", this, NodeMaterialConnectionPointDirection.Input, ReflectionBlock, \"ReflectionBlock\"));\n        this.registerInput(\"clearcoat\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"clearcoat\", this, NodeMaterialConnectionPointDirection.Input, ClearCoatBlock, \"ClearCoatBlock\"));\n        this.registerInput(\"sheen\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"sheen\", this, NodeMaterialConnectionPointDirection.Input, SheenBlock, \"SheenBlock\"));\n        this.registerInput(\"subsurface\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"subsurface\", this, NodeMaterialConnectionPointDirection.Input, SubSurfaceBlock, \"SubSurfaceBlock\"));\n        this.registerInput(\"anisotropy\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"anisotropy\", this, NodeMaterialConnectionPointDirection.Input, AnisotropyBlock, \"AnisotropyBlock\"));\n        this.registerInput(\"iridescence\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"iridescence\", this, NodeMaterialConnectionPointDirection.Input, IridescenceBlock, \"IridescenceBlock\"));\n        this.registerOutput(\"ambientClr\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n        this.registerOutput(\"diffuseDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n        this.registerOutput(\"specularDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n        this.registerOutput(\"clearcoatDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n        this.registerOutput(\"sheenDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n        this.registerOutput(\"diffuseInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n        this.registerOutput(\"specularInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n        this.registerOutput(\"clearcoatInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n        this.registerOutput(\"sheenInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n        this.registerOutput(\"refraction\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n        this.registerOutput(\"lighting\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n        this.registerOutput(\"shadow\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\n        this.registerOutput(\"alpha\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\n    }\n    /**\n     * Initialize the block and prepare the context for build\n     * @param state defines the state that will be used for the build\n     */\n    initialize(state) {\n        state._excludeVariableName(\"vLightingIntensity\");\n        state._excludeVariableName(\"geometricNormalW\");\n        state._excludeVariableName(\"normalW\");\n        state._excludeVariableName(\"faceNormal\");\n        state._excludeVariableName(\"albedoOpacityOut\");\n        state._excludeVariableName(\"surfaceAlbedo\");\n        state._excludeVariableName(\"alpha\");\n        state._excludeVariableName(\"aoOut\");\n        state._excludeVariableName(\"baseColor\");\n        state._excludeVariableName(\"reflectivityOut\");\n        state._excludeVariableName(\"microSurface\");\n        state._excludeVariableName(\"roughness\");\n        state._excludeVariableName(\"NdotVUnclamped\");\n        state._excludeVariableName(\"NdotV\");\n        state._excludeVariableName(\"alphaG\");\n        state._excludeVariableName(\"AARoughnessFactors\");\n        state._excludeVariableName(\"environmentBrdf\");\n        state._excludeVariableName(\"ambientMonochrome\");\n        state._excludeVariableName(\"seo\");\n        state._excludeVariableName(\"eho\");\n        state._excludeVariableName(\"environmentRadiance\");\n        state._excludeVariableName(\"irradianceVector\");\n        state._excludeVariableName(\"environmentIrradiance\");\n        state._excludeVariableName(\"diffuseBase\");\n        state._excludeVariableName(\"specularBase\");\n        state._excludeVariableName(\"preInfo\");\n        state._excludeVariableName(\"info\");\n        state._excludeVariableName(\"shadow\");\n        state._excludeVariableName(\"finalDiffuse\");\n        state._excludeVariableName(\"finalAmbient\");\n        state._excludeVariableName(\"ambientOcclusionForDirectDiffuse\");\n        state._excludeVariableName(\"finalColor\");\n        state._excludeVariableName(\"vClipSpacePosition\");\n        state._excludeVariableName(\"vDebugMode\");\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"PBRMetallicRoughnessBlock\";\n    }\n    /**\n     * Gets the world position input component\n     */\n    get worldPosition() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the world normal input component\n     */\n    get worldNormal() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the view matrix parameter\n     */\n    get view() {\n        return this._inputs[2];\n    }\n    /**\n     * Gets the camera position input component\n     */\n    get cameraPosition() {\n        return this._inputs[3];\n    }\n    /**\n     * Gets the perturbed normal input component\n     */\n    get perturbedNormal() {\n        return this._inputs[4];\n    }\n    /**\n     * Gets the base color input component\n     */\n    get baseColor() {\n        return this._inputs[5];\n    }\n    /**\n     * Gets the metallic input component\n     */\n    get metallic() {\n        return this._inputs[6];\n    }\n    /**\n     * Gets the roughness input component\n     */\n    get roughness() {\n        return this._inputs[7];\n    }\n    /**\n     * Gets the ambient occlusion input component\n     */\n    get ambientOcc() {\n        return this._inputs[8];\n    }\n    /**\n     * Gets the opacity input component\n     */\n    get opacity() {\n        return this._inputs[9];\n    }\n    /**\n     * Gets the index of refraction input component\n     */\n    get indexOfRefraction() {\n        return this._inputs[10];\n    }\n    /**\n     * Gets the ambient color input component\n     */\n    get ambientColor() {\n        return this._inputs[11];\n    }\n    /**\n     * Gets the reflection object parameters\n     */\n    get reflection() {\n        return this._inputs[12];\n    }\n    /**\n     * Gets the clear coat object parameters\n     */\n    get clearcoat() {\n        return this._inputs[13];\n    }\n    /**\n     * Gets the sheen object parameters\n     */\n    get sheen() {\n        return this._inputs[14];\n    }\n    /**\n     * Gets the sub surface object parameters\n     */\n    get subsurface() {\n        return this._inputs[15];\n    }\n    /**\n     * Gets the anisotropy object parameters\n     */\n    get anisotropy() {\n        return this._inputs[16];\n    }\n    /**\n     * Gets the iridescence object parameters\n     */\n    get iridescence() {\n        return this._inputs[17];\n    }\n    /**\n     * Gets the ambient output component\n     */\n    get ambientClr() {\n        return this._outputs[0];\n    }\n    /**\n     * Gets the diffuse output component\n     */\n    get diffuseDir() {\n        return this._outputs[1];\n    }\n    /**\n     * Gets the specular output component\n     */\n    get specularDir() {\n        return this._outputs[2];\n    }\n    /**\n     * Gets the clear coat output component\n     */\n    get clearcoatDir() {\n        return this._outputs[3];\n    }\n    /**\n     * Gets the sheen output component\n     */\n    get sheenDir() {\n        return this._outputs[4];\n    }\n    /**\n     * Gets the indirect diffuse output component\n     */\n    get diffuseInd() {\n        return this._outputs[5];\n    }\n    /**\n     * Gets the indirect specular output component\n     */\n    get specularInd() {\n        return this._outputs[6];\n    }\n    /**\n     * Gets the indirect clear coat output component\n     */\n    get clearcoatInd() {\n        return this._outputs[7];\n    }\n    /**\n     * Gets the indirect sheen output component\n     */\n    get sheenInd() {\n        return this._outputs[8];\n    }\n    /**\n     * Gets the refraction output component\n     */\n    get refraction() {\n        return this._outputs[9];\n    }\n    /**\n     * Gets the global lighting output component\n     */\n    get lighting() {\n        return this._outputs[10];\n    }\n    /**\n     * Gets the shadow output component\n     */\n    get shadow() {\n        return this._outputs[11];\n    }\n    /**\n     * Gets the alpha output component\n     */\n    get alpha() {\n        return this._outputs[12];\n    }\n    autoConfigure(material) {\n        if (!this.cameraPosition.isConnected) {\n            let cameraPositionInput = material.getInputBlockByPredicate((b) => b.systemValue === NodeMaterialSystemValues.CameraPosition);\n            if (!cameraPositionInput) {\n                cameraPositionInput = new InputBlock(\"cameraPosition\");\n                cameraPositionInput.setAsSystemValue(NodeMaterialSystemValues.CameraPosition);\n            }\n            cameraPositionInput.output.connectTo(this.cameraPosition);\n        }\n        if (!this.view.isConnected) {\n            let viewInput = material.getInputBlockByPredicate((b) => b.systemValue === NodeMaterialSystemValues.View);\n            if (!viewInput) {\n                viewInput = new InputBlock(\"view\");\n                viewInput.setAsSystemValue(NodeMaterialSystemValues.View);\n            }\n            viewInput.output.connectTo(this.view);\n        }\n    }\n    prepareDefines(mesh, nodeMaterial, defines) {\n        // General\n        defines.setValue(\"PBR\", true);\n        defines.setValue(\"METALLICWORKFLOW\", true);\n        defines.setValue(\"DEBUGMODE\", this.debugMode, true);\n        defines.setValue(\"NORMALXYSCALE\", true);\n        defines.setValue(\"BUMP\", this.perturbedNormal.isConnected, true);\n        defines.setValue(\"LODBASEDMICROSFURACE\", this._scene.getEngine().getCaps().textureLOD);\n        // Albedo & Opacity\n        defines.setValue(\"ALBEDO\", false, true);\n        defines.setValue(\"OPACITY\", this.opacity.isConnected, true);\n        // Ambient occlusion\n        defines.setValue(\"AMBIENT\", true, true);\n        defines.setValue(\"AMBIENTINGRAYSCALE\", false, true);\n        // Reflectivity\n        defines.setValue(\"REFLECTIVITY\", false, true);\n        defines.setValue(\"AOSTOREINMETALMAPRED\", false, true);\n        defines.setValue(\"METALLNESSSTOREINMETALMAPBLUE\", false, true);\n        defines.setValue(\"ROUGHNESSSTOREINMETALMAPALPHA\", false, true);\n        defines.setValue(\"ROUGHNESSSTOREINMETALMAPGREEN\", false, true);\n        // Lighting & colors\n        if (this.lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_STANDARD) {\n            defines.setValue(\"USEPHYSICALLIGHTFALLOFF\", false);\n            defines.setValue(\"USEGLTFLIGHTFALLOFF\", false);\n        }\n        else if (this.lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_GLTF) {\n            defines.setValue(\"USEPHYSICALLIGHTFALLOFF\", false);\n            defines.setValue(\"USEGLTFLIGHTFALLOFF\", true);\n        }\n        else {\n            defines.setValue(\"USEPHYSICALLIGHTFALLOFF\", true);\n            defines.setValue(\"USEGLTFLIGHTFALLOFF\", false);\n        }\n        // Transparency\n        const alphaTestCutOffString = this.alphaTestCutoff.toString();\n        defines.setValue(\"ALPHABLEND\", this.useAlphaBlending, true);\n        defines.setValue(\"ALPHAFROMALBEDO\", false, true);\n        defines.setValue(\"ALPHATEST\", this.useAlphaTest, true);\n        defines.setValue(\"ALPHATESTVALUE\", alphaTestCutOffString.indexOf(\".\") < 0 ? alphaTestCutOffString + \".\" : alphaTestCutOffString, true);\n        defines.setValue(\"OPACITYRGB\", false, true);\n        // Rendering\n        defines.setValue(\"RADIANCEOVERALPHA\", this.useRadianceOverAlpha, true);\n        defines.setValue(\"SPECULAROVERALPHA\", this.useSpecularOverAlpha, true);\n        defines.setValue(\"SPECULARAA\", this._scene.getEngine().getCaps().standardDerivatives && this.enableSpecularAntiAliasing, true);\n        defines.setValue(\"REALTIME_FILTERING\", this.realTimeFiltering, true);\n        const scene = mesh.getScene();\n        const engine = scene.getEngine();\n        if (engine._features.needTypeSuffixInShaderConstants) {\n            defines.setValue(\"NUM_SAMPLES\", this.realTimeFilteringQuality + \"u\", true);\n        }\n        else {\n            defines.setValue(\"NUM_SAMPLES\", \"\" + this.realTimeFilteringQuality, true);\n        }\n        // Advanced\n        defines.setValue(\"BRDF_V_HEIGHT_CORRELATED\", true);\n        defines.setValue(\"MS_BRDF_ENERGY_CONSERVATION\", this.useEnergyConservation, true);\n        defines.setValue(\"RADIANCEOCCLUSION\", this.useRadianceOcclusion, true);\n        defines.setValue(\"HORIZONOCCLUSION\", this.useHorizonOcclusion, true);\n        defines.setValue(\"UNLIT\", this.unlit, true);\n        defines.setValue(\"FORCENORMALFORWARD\", this.forceNormalForward, true);\n        if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\n            defines.setValue(\"ENVIRONMENTBRDF\", true);\n            defines.setValue(\"ENVIRONMENTBRDF_RGBD\", this._environmentBRDFTexture.isRGBD, true);\n        }\n        else {\n            defines.setValue(\"ENVIRONMENTBRDF\", false);\n            defines.setValue(\"ENVIRONMENTBRDF_RGBD\", false);\n        }\n        if (defines._areImageProcessingDirty && nodeMaterial.imageProcessingConfiguration) {\n            nodeMaterial.imageProcessingConfiguration.prepareDefines(defines);\n        }\n        if (!defines._areLightsDirty) {\n            return;\n        }\n        if (!this.light) {\n            // Lights\n            MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, true, nodeMaterial.maxSimultaneousLights);\n            defines._needNormals = true;\n            // Multiview\n            MaterialHelper.PrepareDefinesForMultiview(scene, defines);\n        }\n        else {\n            const state = {\n                needNormals: false,\n                needRebuild: false,\n                lightmapMode: false,\n                shadowEnabled: false,\n                specularEnabled: false,\n            };\n            MaterialHelper.PrepareDefinesForLight(scene, mesh, this.light, this._lightId, defines, true, state);\n            if (state.needRebuild) {\n                defines.rebuild();\n            }\n        }\n    }\n    updateUniformsAndSamples(state, nodeMaterial, defines, uniformBuffers) {\n        for (let lightIndex = 0; lightIndex < nodeMaterial.maxSimultaneousLights; lightIndex++) {\n            if (!defines[\"LIGHT\" + lightIndex]) {\n                break;\n            }\n            const onlyUpdateBuffersList = state.uniforms.indexOf(\"vLightData\" + lightIndex) >= 0;\n            MaterialHelper.PrepareUniformsAndSamplersForLight(lightIndex, state.uniforms, state.samplers, defines[\"PROJECTEDLIGHTTEXTURE\" + lightIndex], uniformBuffers, onlyUpdateBuffersList);\n        }\n    }\n    isReady(mesh, nodeMaterial, defines) {\n        if (this._environmentBRDFTexture && !this._environmentBRDFTexture.isReady()) {\n            return false;\n        }\n        if (defines._areImageProcessingDirty && nodeMaterial.imageProcessingConfiguration) {\n            if (!nodeMaterial.imageProcessingConfiguration.isReady()) {\n                return false;\n            }\n        }\n        return true;\n    }\n    bind(effect, nodeMaterial, mesh) {\n        var _a, _b;\n        if (!mesh) {\n            return;\n        }\n        const scene = mesh.getScene();\n        if (!this.light) {\n            MaterialHelper.BindLights(scene, mesh, effect, true, nodeMaterial.maxSimultaneousLights);\n        }\n        else {\n            MaterialHelper.BindLight(this.light, this._lightId, scene, effect, true);\n        }\n        effect.setTexture(this._environmentBrdfSamplerName, this._environmentBRDFTexture);\n        effect.setFloat2(\"vDebugMode\", this.debugLimit, this.debugFactor);\n        const ambientScene = this._scene.ambientColor;\n        if (ambientScene) {\n            effect.setColor3(\"ambientFromScene\", ambientScene);\n        }\n        const invertNormal = scene.useRightHandedSystem === (scene._mirroredCameraPosition != null);\n        effect.setFloat(this._invertNormalName, invertNormal ? -1 : 1);\n        effect.setFloat4(\"vLightingIntensity\", this.directIntensity, 1, this.environmentIntensity * this._scene.environmentIntensity, this.specularIntensity);\n        // reflectivity bindings\n        const outsideIOR = 1; // consider air as clear coat and other layers would remap in the shader.\n        const ior = (_b = (_a = this.indexOfRefraction.connectInputBlock) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1.5;\n        // We are here deriving our default reflectance from a common value for none metallic surface.\n        // Based of the schlick fresnel approximation model\n        // for dielectrics.\n        const f0 = Math.pow((ior - outsideIOR) / (ior + outsideIOR), 2);\n        // Tweak the default F0 and F90 based on our given setup\n        this._metallicReflectanceColor.scaleToRef(f0 * this._metallicF0Factor, TmpColors.Color3[0]);\n        const metallicF90 = this._metallicF0Factor;\n        effect.setColor4(this._vMetallicReflectanceFactorsName, TmpColors.Color3[0], metallicF90);\n        if (nodeMaterial.imageProcessingConfiguration) {\n            nodeMaterial.imageProcessingConfiguration.bind(effect);\n        }\n    }\n    _injectVertexCode(state) {\n        var _a, _b;\n        const worldPos = this.worldPosition;\n        const comments = `//${this.name}`;\n        // Declaration\n        if (!this.light) {\n            // Emit for all lights\n            state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightVxUboDeclaration\" : \"lightVxFragmentDeclaration\", comments, {\n                repeatKey: \"maxSimultaneousLights\",\n            });\n            this._lightId = 0;\n            state.sharedData.dynamicUniformBlocks.push(this);\n        }\n        else {\n            this._lightId = (state.counters[\"lightCounter\"] !== undefined ? state.counters[\"lightCounter\"] : -1) + 1;\n            state.counters[\"lightCounter\"] = this._lightId;\n            state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightVxUboDeclaration\" : \"lightVxFragmentDeclaration\", comments, {\n                replaceStrings: [{ search: /{X}/g, replace: this._lightId.toString() }],\n            }, this._lightId.toString());\n        }\n        // Inject code in vertex\n        const worldPosVaryingName = \"v_\" + worldPos.associatedVariableName;\n        if (state._emitVaryingFromString(worldPosVaryingName, \"vec4\")) {\n            state.compilationString += `${worldPosVaryingName} = ${worldPos.associatedVariableName};\\r\\n`;\n        }\n        const reflectionBlock = this.reflection.isConnected ? (_a = this.reflection.connectedPoint) === null || _a === void 0 ? void 0 : _a.ownerBlock : null;\n        if (reflectionBlock) {\n            reflectionBlock.viewConnectionPoint = this.view;\n        }\n        state.compilationString += (_b = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock.handleVertexSide(state)) !== null && _b !== void 0 ? _b : \"\";\n        if (state._emitVaryingFromString(\"vClipSpacePosition\", \"vec4\", \"defined(IGNORE) || DEBUGMODE > 0\")) {\n            state._injectAtEnd += `#if DEBUGMODE > 0\\r\\n`;\n            state._injectAtEnd += `vClipSpacePosition = gl_Position;\\r\\n`;\n            state._injectAtEnd += `#endif\\r\\n`;\n        }\n        if (this.light) {\n            state.compilationString += state._emitCodeFromInclude(\"shadowsVertex\", comments, {\n                replaceStrings: [\n                    { search: /{X}/g, replace: this._lightId.toString() },\n                    { search: /worldPos/g, replace: worldPos.associatedVariableName },\n                ],\n            });\n        }\n        else {\n            state.compilationString += `vec4 worldPos = ${worldPos.associatedVariableName};\\r\\n`;\n            if (this.view.isConnected) {\n                state.compilationString += `mat4 view = ${this.view.associatedVariableName};\\r\\n`;\n            }\n            state.compilationString += state._emitCodeFromInclude(\"shadowsVertex\", comments, {\n                repeatKey: \"maxSimultaneousLights\",\n            });\n        }\n    }\n    _getAlbedoOpacityCode() {\n        let code = `albedoOpacityOutParams albedoOpacityOut;\\r\\n`;\n        const albedoColor = this.baseColor.isConnected ? this.baseColor.associatedVariableName : \"vec3(1.)\";\n        const opacity = this.opacity.isConnected ? this.opacity.associatedVariableName : \"1.\";\n        code += `albedoOpacityBlock(\r\n                vec4(${albedoColor}, 1.),\r\n            #ifdef ALBEDO\r\n                vec4(1.),\r\n                vec2(1., 1.),\r\n            #endif\r\n            #ifdef OPACITY\r\n                vec4(${opacity}),\r\n                vec2(1., 1.),\r\n            #endif\r\n                albedoOpacityOut\r\n            );\r\n\r\n            vec3 surfaceAlbedo = albedoOpacityOut.surfaceAlbedo;\r\n            float alpha = albedoOpacityOut.alpha;\\r\\n`;\n        return code;\n    }\n    _getAmbientOcclusionCode() {\n        let code = `ambientOcclusionOutParams aoOut;\\r\\n`;\n        const ao = this.ambientOcc.isConnected ? this.ambientOcc.associatedVariableName : \"1.\";\n        code += `ambientOcclusionBlock(\r\n            #ifdef AMBIENT\r\n                vec3(${ao}),\r\n                vec4(0., 1.0, 1.0, 0.),\r\n            #endif\r\n                aoOut\r\n            );\\r\\n`;\n        return code;\n    }\n    _getReflectivityCode(state) {\n        let code = `reflectivityOutParams reflectivityOut;\\r\\n`;\n        const aoIntensity = \"1.\";\n        this._vMetallicReflectanceFactorsName = state._getFreeVariableName(\"vMetallicReflectanceFactors\");\n        state._emitUniformFromString(this._vMetallicReflectanceFactorsName, \"vec4\");\n        code += `vec3 baseColor = surfaceAlbedo;\r\n\r\n            reflectivityBlock(\r\n                vec4(${this.metallic.associatedVariableName}, ${this.roughness.associatedVariableName}, 0., 0.),\r\n            #ifdef METALLICWORKFLOW\r\n                surfaceAlbedo,\r\n                ${this._vMetallicReflectanceFactorsName},\r\n            #endif\r\n            #ifdef REFLECTIVITY\r\n                vec3(0., 0., ${aoIntensity}),\r\n                vec4(1.),\r\n            #endif\r\n            #if defined(METALLICWORKFLOW) && defined(REFLECTIVITY)  && defined(AOSTOREINMETALMAPRED)\r\n                aoOut.ambientOcclusionColor,\r\n            #endif\r\n            #ifdef MICROSURFACEMAP\r\n                microSurfaceTexel, <== not handled!\r\n            #endif\r\n                reflectivityOut\r\n            );\r\n\r\n            float microSurface = reflectivityOut.microSurface;\r\n            float roughness = reflectivityOut.roughness;\r\n\r\n            #ifdef METALLICWORKFLOW\r\n                surfaceAlbedo = reflectivityOut.surfaceAlbedo;\r\n            #endif\r\n            #if defined(METALLICWORKFLOW) && defined(REFLECTIVITY) && defined(AOSTOREINMETALMAPRED)\r\n                aoOut.ambientOcclusionColor = reflectivityOut.ambientOcclusionColor;\r\n            #endif\\r\\n`;\n        return code;\n    }\n    _buildBlock(state) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16;\n        super._buildBlock(state);\n        this._scene = state.sharedData.scene;\n        if (!this._environmentBRDFTexture) {\n            this._environmentBRDFTexture = GetEnvironmentBRDFTexture(this._scene);\n        }\n        const reflectionBlock = this.reflection.isConnected ? (_a = this.reflection.connectedPoint) === null || _a === void 0 ? void 0 : _a.ownerBlock : null;\n        if (reflectionBlock) {\n            // Need those variables to be setup when calling _injectVertexCode\n            reflectionBlock.worldPositionConnectionPoint = this.worldPosition;\n            reflectionBlock.cameraPositionConnectionPoint = this.cameraPosition;\n            reflectionBlock.worldNormalConnectionPoint = this.worldNormal;\n            reflectionBlock.viewConnectionPoint = this.view;\n        }\n        if (state.target !== NodeMaterialBlockTargets.Fragment) {\n            // Vertex\n            this._injectVertexCode(state);\n            return this;\n        }\n        // Fragment\n        state.sharedData.forcedBindableBlocks.push(this);\n        state.sharedData.blocksWithDefines.push(this);\n        state.sharedData.blockingBlocks.push(this);\n        if (this.generateOnlyFragmentCode) {\n            state.sharedData.dynamicUniformBlocks.push(this);\n        }\n        const comments = `//${this.name}`;\n        const normalShading = this.perturbedNormal;\n        let worldPosVarName = this.worldPosition.associatedVariableName;\n        if (this.generateOnlyFragmentCode) {\n            worldPosVarName = state._getFreeVariableName(\"globalWorldPos\");\n            state._emitFunction(\"pbr_globalworldpos\", `vec3 ${worldPosVarName};\\r\\n`, comments);\n            state.compilationString += `${worldPosVarName} = ${this.worldPosition.associatedVariableName}.xyz;\\r\\n`;\n            state.compilationString += state._emitCodeFromInclude(\"shadowsVertex\", comments, {\n                repeatKey: \"maxSimultaneousLights\",\n                substitutionVars: this.generateOnlyFragmentCode ? `worldPos,${this.worldPosition.associatedVariableName}` : undefined,\n            });\n            state.compilationString += `#if DEBUGMODE > 0\\r\\n`;\n            state.compilationString += `vec4 vClipSpacePosition = vec4((vec2(gl_FragCoord.xy) / vec2(1.0)) * 2.0 - 1.0, 0.0, 1.0);\\r\\n`;\n            state.compilationString += `#endif\\r\\n`;\n        }\n        else {\n            worldPosVarName = \"v_\" + worldPosVarName;\n        }\n        this._environmentBrdfSamplerName = state._getFreeVariableName(\"environmentBrdfSampler\");\n        state._emit2DSampler(this._environmentBrdfSamplerName);\n        state.sharedData.hints.needAlphaBlending = state.sharedData.hints.needAlphaBlending || this.useAlphaBlending;\n        state.sharedData.hints.needAlphaTesting = state.sharedData.hints.needAlphaTesting || this.useAlphaTest;\n        state._emitExtension(\"lod\", \"#extension GL_EXT_shader_texture_lod : enable\", \"defined(LODBASEDMICROSFURACE)\");\n        state._emitExtension(\"derivatives\", \"#extension GL_OES_standard_derivatives : enable\");\n        state._emitUniformFromString(\"vDebugMode\", \"vec2\", \"defined(IGNORE) || DEBUGMODE > 0\");\n        state._emitUniformFromString(\"ambientFromScene\", \"vec3\");\n        // Image processing uniforms\n        state.uniforms.push(\"exposureLinear\");\n        state.uniforms.push(\"contrast\");\n        state.uniforms.push(\"vInverseScreenSize\");\n        state.uniforms.push(\"vignetteSettings1\");\n        state.uniforms.push(\"vignetteSettings2\");\n        state.uniforms.push(\"vCameraColorCurveNegative\");\n        state.uniforms.push(\"vCameraColorCurveNeutral\");\n        state.uniforms.push(\"vCameraColorCurvePositive\");\n        state.uniforms.push(\"txColorTransform\");\n        state.uniforms.push(\"colorTransformSettings\");\n        state.uniforms.push(\"ditherIntensity\");\n        //\n        // Includes\n        //\n        if (!this.light) {\n            // Emit for all lights\n            state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightUboDeclaration\" : \"lightFragmentDeclaration\", comments, {\n                repeatKey: \"maxSimultaneousLights\",\n                substitutionVars: this.generateOnlyFragmentCode ? \"varying,\" : undefined,\n            });\n        }\n        else {\n            state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightUboDeclaration\" : \"lightFragmentDeclaration\", comments, {\n                replaceStrings: [{ search: /{X}/g, replace: this._lightId.toString() }],\n            }, this._lightId.toString());\n        }\n        state._emitFunctionFromInclude(\"helperFunctions\", comments);\n        state._emitFunctionFromInclude(\"importanceSampling\", comments);\n        state._emitFunctionFromInclude(\"pbrHelperFunctions\", comments);\n        state._emitFunctionFromInclude(\"imageProcessingDeclaration\", comments);\n        state._emitFunctionFromInclude(\"imageProcessingFunctions\", comments);\n        state._emitFunctionFromInclude(\"shadowsFragmentFunctions\", comments, {\n            replaceStrings: [{ search: /vPositionW/g, replace: worldPosVarName + \".xyz\" }],\n        });\n        state._emitFunctionFromInclude(\"pbrDirectLightingSetupFunctions\", comments, {\n            replaceStrings: [{ search: /vPositionW/g, replace: worldPosVarName + \".xyz\" }],\n        });\n        state._emitFunctionFromInclude(\"pbrDirectLightingFalloffFunctions\", comments);\n        state._emitFunctionFromInclude(\"pbrBRDFFunctions\", comments, {\n            replaceStrings: [{ search: /REFLECTIONMAP_SKYBOX/g, replace: (_b = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _b !== void 0 ? _b : \"REFLECTIONMAP_SKYBOX\" }],\n        });\n        state._emitFunctionFromInclude(\"hdrFilteringFunctions\", comments);\n        state._emitFunctionFromInclude(\"pbrDirectLightingFunctions\", comments, {\n            replaceStrings: [{ search: /vPositionW/g, replace: worldPosVarName + \".xyz\" }],\n        });\n        state._emitFunctionFromInclude(\"pbrIBLFunctions\", comments);\n        state._emitFunctionFromInclude(\"pbrBlockAlbedoOpacity\", comments);\n        state._emitFunctionFromInclude(\"pbrBlockReflectivity\", comments);\n        state._emitFunctionFromInclude(\"pbrBlockAmbientOcclusion\", comments);\n        state._emitFunctionFromInclude(\"pbrBlockAlphaFresnel\", comments);\n        state._emitFunctionFromInclude(\"pbrBlockAnisotropic\", comments);\n        //\n        // code\n        //\n        state._emitUniformFromString(\"vLightingIntensity\", \"vec4\");\n        if (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock.generateOnlyFragmentCode) {\n            state.compilationString += reflectionBlock.handleVertexSide(state);\n        }\n        // _____________________________ Geometry Information ____________________________\n        this._vNormalWName = state._getFreeVariableName(\"vNormalW\");\n        state.compilationString += `vec4 ${this._vNormalWName} = normalize(${this.worldNormal.associatedVariableName});\\r\\n`;\n        if (state._registerTempVariable(\"viewDirectionW\")) {\n            state.compilationString += `vec3 viewDirectionW = normalize(${this.cameraPosition.associatedVariableName} - ${worldPosVarName}.xyz);\\r\\n`;\n        }\n        state.compilationString += `vec3 geometricNormalW = ${this._vNormalWName}.xyz;\\r\\n`;\n        state.compilationString += `vec3 normalW = ${normalShading.isConnected ? \"normalize(\" + normalShading.associatedVariableName + \".xyz)\" : \"geometricNormalW\"};\\r\\n`;\n        this._invertNormalName = state._getFreeVariableName(\"invertNormal\");\n        state._emitUniformFromString(this._invertNormalName, \"float\");\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockNormalFinal\", comments, {\n            replaceStrings: [\n                { search: /vPositionW/g, replace: worldPosVarName + \".xyz\" },\n                { search: /vEyePosition.w/g, replace: this._invertNormalName },\n            ],\n        });\n        // _____________________________ Albedo & Opacity ______________________________\n        state.compilationString += this._getAlbedoOpacityCode();\n        state.compilationString += state._emitCodeFromInclude(\"depthPrePass\", comments);\n        // _____________________________ AO  _______________________________\n        state.compilationString += this._getAmbientOcclusionCode();\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockLightmapInit\", comments);\n        // _____________________________ UNLIT  _______________________________\n        state.compilationString += `#ifdef UNLIT\r\n                vec3 diffuseBase = vec3(1., 1., 1.);\r\n            #else\\r\\n`;\n        // _____________________________ Reflectivity _______________________________\n        state.compilationString += this._getReflectivityCode(state);\n        // _____________________________ Geometry info _________________________________\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockGeometryInfo\", comments, {\n            replaceStrings: [\n                { search: /REFLECTIONMAP_SKYBOX/g, replace: (_c = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _c !== void 0 ? _c : \"REFLECTIONMAP_SKYBOX\" },\n                { search: /REFLECTIONMAP_3D/g, replace: (_d = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _d !== void 0 ? _d : \"REFLECTIONMAP_3D\" },\n            ],\n        });\n        // _____________________________ Anisotropy _______________________________________\n        const anisotropyBlock = this.anisotropy.isConnected ? (_e = this.anisotropy.connectedPoint) === null || _e === void 0 ? void 0 : _e.ownerBlock : null;\n        if (anisotropyBlock) {\n            anisotropyBlock.worldPositionConnectionPoint = this.worldPosition;\n            anisotropyBlock.worldNormalConnectionPoint = this.worldNormal;\n            state.compilationString += anisotropyBlock.getCode(state, !this.perturbedNormal.isConnected);\n        }\n        // _____________________________ Reflection _______________________________________\n        if (reflectionBlock && reflectionBlock.hasTexture) {\n            state.compilationString += reflectionBlock.getCode(state, anisotropyBlock ? \"anisotropicOut.anisotropicNormal\" : \"normalW\");\n        }\n        state._emitFunctionFromInclude(\"pbrBlockReflection\", comments, {\n            replaceStrings: [\n                { search: /computeReflectionCoords/g, replace: \"computeReflectionCoordsPBR\" },\n                { search: /REFLECTIONMAP_3D/g, replace: (_f = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _f !== void 0 ? _f : \"REFLECTIONMAP_3D\" },\n                { search: /REFLECTIONMAP_OPPOSITEZ/g, replace: (_g = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineOppositeZ) !== null && _g !== void 0 ? _g : \"REFLECTIONMAP_OPPOSITEZ\" },\n                { search: /REFLECTIONMAP_PROJECTION/g, replace: (_h = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineProjectionName) !== null && _h !== void 0 ? _h : \"REFLECTIONMAP_PROJECTION\" },\n                { search: /REFLECTIONMAP_SKYBOX/g, replace: (_j = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _j !== void 0 ? _j : \"REFLECTIONMAP_SKYBOX\" },\n                { search: /LODINREFLECTIONALPHA/g, replace: (_k = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLODReflectionAlpha) !== null && _k !== void 0 ? _k : \"LODINREFLECTIONALPHA\" },\n                { search: /LINEARSPECULARREFLECTION/g, replace: (_l = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLinearSpecularReflection) !== null && _l !== void 0 ? _l : \"LINEARSPECULARREFLECTION\" },\n                { search: /vReflectionFilteringInfo/g, replace: (_m = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._vReflectionFilteringInfoName) !== null && _m !== void 0 ? _m : \"vReflectionFilteringInfo\" },\n            ],\n        });\n        // ___________________ Compute Reflectance aka R0 F0 info _________________________\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockReflectance0\", comments, {\n            replaceStrings: [{ search: /metallicReflectanceFactors/g, replace: this._vMetallicReflectanceFactorsName }],\n        });\n        // ________________________________ Sheen ______________________________\n        const sheenBlock = this.sheen.isConnected ? (_o = this.sheen.connectedPoint) === null || _o === void 0 ? void 0 : _o.ownerBlock : null;\n        if (sheenBlock) {\n            state.compilationString += sheenBlock.getCode(reflectionBlock);\n        }\n        state._emitFunctionFromInclude(\"pbrBlockSheen\", comments, {\n            replaceStrings: [\n                { search: /REFLECTIONMAP_3D/g, replace: (_p = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _p !== void 0 ? _p : \"REFLECTIONMAP_3D\" },\n                { search: /REFLECTIONMAP_SKYBOX/g, replace: (_q = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _q !== void 0 ? _q : \"REFLECTIONMAP_SKYBOX\" },\n                { search: /LODINREFLECTIONALPHA/g, replace: (_r = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLODReflectionAlpha) !== null && _r !== void 0 ? _r : \"LODINREFLECTIONALPHA\" },\n                { search: /LINEARSPECULARREFLECTION/g, replace: (_s = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLinearSpecularReflection) !== null && _s !== void 0 ? _s : \"LINEARSPECULARREFLECTION\" },\n            ],\n        });\n        // _____________________________ Iridescence _______________________________\n        const iridescenceBlock = this.iridescence.isConnected ? (_t = this.iridescence.connectedPoint) === null || _t === void 0 ? void 0 : _t.ownerBlock : null;\n        state.compilationString += IridescenceBlock.GetCode(iridescenceBlock);\n        state._emitFunctionFromInclude(\"pbrBlockIridescence\", comments, {\n            replaceStrings: [],\n        });\n        // _____________________________ Clear Coat ____________________________\n        const clearcoatBlock = this.clearcoat.isConnected ? (_u = this.clearcoat.connectedPoint) === null || _u === void 0 ? void 0 : _u.ownerBlock : null;\n        const generateTBNSpace = !this.perturbedNormal.isConnected && !this.anisotropy.isConnected;\n        const isTangentConnectedToPerturbNormal = this.perturbedNormal.isConnected && ((_w = ((_v = this.perturbedNormal.connectedPoint) === null || _v === void 0 ? void 0 : _v.ownerBlock).worldTangent) === null || _w === void 0 ? void 0 : _w.isConnected);\n        const isTangentConnectedToAnisotropy = this.anisotropy.isConnected && ((_x = this.anisotropy.connectedPoint) === null || _x === void 0 ? void 0 : _x.ownerBlock).worldTangent.isConnected;\n        let vTBNAvailable = isTangentConnectedToPerturbNormal || (!this.perturbedNormal.isConnected && isTangentConnectedToAnisotropy);\n        state.compilationString += ClearCoatBlock.GetCode(state, clearcoatBlock, reflectionBlock, worldPosVarName, generateTBNSpace, vTBNAvailable, this.worldNormal.associatedVariableName);\n        if (generateTBNSpace) {\n            vTBNAvailable = (_y = clearcoatBlock === null || clearcoatBlock === void 0 ? void 0 : clearcoatBlock.worldTangent.isConnected) !== null && _y !== void 0 ? _y : false;\n        }\n        state._emitFunctionFromInclude(\"pbrBlockClearcoat\", comments, {\n            replaceStrings: [\n                { search: /computeReflectionCoords/g, replace: \"computeReflectionCoordsPBR\" },\n                { search: /REFLECTIONMAP_3D/g, replace: (_z = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _z !== void 0 ? _z : \"REFLECTIONMAP_3D\" },\n                { search: /REFLECTIONMAP_OPPOSITEZ/g, replace: (_0 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineOppositeZ) !== null && _0 !== void 0 ? _0 : \"REFLECTIONMAP_OPPOSITEZ\" },\n                { search: /REFLECTIONMAP_PROJECTION/g, replace: (_1 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineProjectionName) !== null && _1 !== void 0 ? _1 : \"REFLECTIONMAP_PROJECTION\" },\n                { search: /REFLECTIONMAP_SKYBOX/g, replace: (_2 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _2 !== void 0 ? _2 : \"REFLECTIONMAP_SKYBOX\" },\n                { search: /LODINREFLECTIONALPHA/g, replace: (_3 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLODReflectionAlpha) !== null && _3 !== void 0 ? _3 : \"LODINREFLECTIONALPHA\" },\n                { search: /LINEARSPECULARREFLECTION/g, replace: (_4 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLinearSpecularReflection) !== null && _4 !== void 0 ? _4 : \"LINEARSPECULARREFLECTION\" },\n                { search: /defined\\(TANGENT\\)/g, replace: vTBNAvailable ? \"defined(TANGENT)\" : \"defined(IGNORE)\" },\n            ],\n        });\n        // _________________________ Specular Environment Reflectance __________________________\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockReflectance\", comments, {\n            replaceStrings: [\n                { search: /REFLECTIONMAP_SKYBOX/g, replace: (_5 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _5 !== void 0 ? _5 : \"REFLECTIONMAP_SKYBOX\" },\n                { search: /REFLECTIONMAP_3D/g, replace: (_6 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _6 !== void 0 ? _6 : \"REFLECTIONMAP_3D\" },\n            ],\n        });\n        // ___________________________________ SubSurface ______________________________________\n        const subsurfaceBlock = this.subsurface.isConnected ? (_7 = this.subsurface.connectedPoint) === null || _7 === void 0 ? void 0 : _7.ownerBlock : null;\n        const refractionBlock = this.subsurface.isConnected\n            ? (_9 = ((_8 = this.subsurface.connectedPoint) === null || _8 === void 0 ? void 0 : _8.ownerBlock).refraction.connectedPoint) === null || _9 === void 0 ? void 0 : _9.ownerBlock\n            : null;\n        if (refractionBlock) {\n            refractionBlock.viewConnectionPoint = this.view;\n            refractionBlock.indexOfRefractionConnectionPoint = this.indexOfRefraction;\n        }\n        state.compilationString += SubSurfaceBlock.GetCode(state, subsurfaceBlock, reflectionBlock, worldPosVarName);\n        state._emitFunctionFromInclude(\"pbrBlockSubSurface\", comments, {\n            replaceStrings: [\n                { search: /REFLECTIONMAP_3D/g, replace: (_10 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _10 !== void 0 ? _10 : \"REFLECTIONMAP_3D\" },\n                { search: /REFLECTIONMAP_OPPOSITEZ/g, replace: (_11 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineOppositeZ) !== null && _11 !== void 0 ? _11 : \"REFLECTIONMAP_OPPOSITEZ\" },\n                { search: /REFLECTIONMAP_PROJECTION/g, replace: (_12 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineProjectionName) !== null && _12 !== void 0 ? _12 : \"REFLECTIONMAP_PROJECTION\" },\n                { search: /SS_REFRACTIONMAP_3D/g, replace: (_13 = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._define3DName) !== null && _13 !== void 0 ? _13 : \"SS_REFRACTIONMAP_3D\" },\n                { search: /SS_LODINREFRACTIONALPHA/g, replace: (_14 = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._defineLODRefractionAlpha) !== null && _14 !== void 0 ? _14 : \"SS_LODINREFRACTIONALPHA\" },\n                { search: /SS_LINEARSPECULARREFRACTION/g, replace: (_15 = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._defineLinearSpecularRefraction) !== null && _15 !== void 0 ? _15 : \"SS_LINEARSPECULARREFRACTION\" },\n                { search: /SS_REFRACTIONMAP_OPPOSITEZ/g, replace: (_16 = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._defineOppositeZ) !== null && _16 !== void 0 ? _16 : \"SS_REFRACTIONMAP_OPPOSITEZ\" },\n            ],\n        });\n        // _____________________________ Direct Lighting Info __________________________________\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockDirectLighting\", comments);\n        if (this.light) {\n            state.compilationString += state._emitCodeFromInclude(\"lightFragment\", comments, {\n                replaceStrings: [{ search: /{X}/g, replace: this._lightId.toString() }],\n            });\n        }\n        else {\n            state.compilationString += state._emitCodeFromInclude(\"lightFragment\", comments, {\n                repeatKey: \"maxSimultaneousLights\",\n            });\n        }\n        // _____________________________ Compute Final Lit Components ________________________\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockFinalLitComponents\", comments);\n        // _____________________________ UNLIT (2) ________________________\n        state.compilationString += `#endif\\r\\n`; // UNLIT\n        // _____________________________ Compute Final Unlit Components ________________________\n        const aoColor = this.ambientColor.isConnected ? this.ambientColor.associatedVariableName : \"vec3(0., 0., 0.)\";\n        let aoDirectLightIntensity = PBRBaseMaterial.DEFAULT_AO_ON_ANALYTICAL_LIGHTS.toString();\n        if (aoDirectLightIntensity.indexOf(\".\") === -1) {\n            aoDirectLightIntensity += \".\";\n        }\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockFinalUnlitComponents\", comments, {\n            replaceStrings: [\n                { search: /vec3 finalEmissive[\\s\\S]*?finalEmissive\\*=vLightingIntensity\\.y;/g, replace: \"\" },\n                { search: /vAmbientColor/g, replace: aoColor + \" * ambientFromScene\" },\n                { search: /vAmbientInfos\\.w/g, replace: aoDirectLightIntensity },\n            ],\n        });\n        // _____________________________ Output Final Color Composition ________________________\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockFinalColorComposition\", comments, {\n            replaceStrings: [{ search: /finalEmissive/g, replace: \"vec3(0.)\" }],\n        });\n        // _____________________________ Apply image processing ________________________\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockImageProcessing\", comments, {\n            replaceStrings: [{ search: /visibility/g, replace: \"1.\" }],\n        });\n        // _____________________________ Generate debug code ________________________\n        state.compilationString += state._emitCodeFromInclude(\"pbrDebug\", comments, {\n            replaceStrings: [\n                { search: /vNormalW/g, replace: this._vNormalWName },\n                { search: /vPositionW/g, replace: worldPosVarName },\n                { search: /albedoTexture\\.rgb;/g, replace: \"vec3(1.);\\r\\ngl_FragColor.rgb = toGammaSpace(gl_FragColor.rgb);\\r\\n\" },\n            ],\n        });\n        // _____________________________ Generate end points ________________________\n        for (const output of this._outputs) {\n            if (output.hasEndpoints) {\n                const remap = mapOutputToVariable[output.name];\n                if (remap) {\n                    const [varName, conditions] = remap;\n                    if (conditions) {\n                        state.compilationString += `#if ${conditions}\\r\\n`;\n                    }\n                    state.compilationString += `${this._declareOutput(output, state)} = ${varName};\\r\\n`;\n                    if (conditions) {\n                        state.compilationString += `#else\\r\\n`;\n                        state.compilationString += `${this._declareOutput(output, state)} = vec3(0.);\\r\\n`;\n                        state.compilationString += `#endif\\r\\n`;\n                    }\n                }\n                else {\n                    console.error(`There's no remapping for the ${output.name} end point! No code generated`);\n                }\n            }\n        }\n        return this;\n    }\n    _dumpPropertiesCode() {\n        let codeString = super._dumpPropertiesCode();\n        codeString += `${this._codeVariableName}.lightFalloff = ${this.lightFalloff};\\r\\n`;\n        codeString += `${this._codeVariableName}.useAlphaTest = ${this.useAlphaTest};\\r\\n`;\n        codeString += `${this._codeVariableName}.alphaTestCutoff = ${this.alphaTestCutoff};\\r\\n`;\n        codeString += `${this._codeVariableName}.useAlphaBlending = ${this.useAlphaBlending};\\r\\n`;\n        codeString += `${this._codeVariableName}.useRadianceOverAlpha = ${this.useRadianceOverAlpha};\\r\\n`;\n        codeString += `${this._codeVariableName}.useSpecularOverAlpha = ${this.useSpecularOverAlpha};\\r\\n`;\n        codeString += `${this._codeVariableName}.enableSpecularAntiAliasing = ${this.enableSpecularAntiAliasing};\\r\\n`;\n        codeString += `${this._codeVariableName}.realTimeFiltering = ${this.realTimeFiltering};\\r\\n`;\n        codeString += `${this._codeVariableName}.realTimeFilteringQuality = ${this.realTimeFilteringQuality};\\r\\n`;\n        codeString += `${this._codeVariableName}.useEnergyConservation = ${this.useEnergyConservation};\\r\\n`;\n        codeString += `${this._codeVariableName}.useRadianceOcclusion = ${this.useRadianceOcclusion};\\r\\n`;\n        codeString += `${this._codeVariableName}.useHorizonOcclusion = ${this.useHorizonOcclusion};\\r\\n`;\n        codeString += `${this._codeVariableName}.unlit = ${this.unlit};\\r\\n`;\n        codeString += `${this._codeVariableName}.forceNormalForward = ${this.forceNormalForward};\\r\\n`;\n        codeString += `${this._codeVariableName}.debugMode = ${this.debugMode};\\r\\n`;\n        codeString += `${this._codeVariableName}.debugLimit = ${this.debugLimit};\\r\\n`;\n        codeString += `${this._codeVariableName}.debugFactor = ${this.debugFactor};\\r\\n`;\n        return codeString;\n    }\n    serialize() {\n        const serializationObject = super.serialize();\n        if (this.light) {\n            serializationObject.lightId = this.light.id;\n        }\n        serializationObject.lightFalloff = this.lightFalloff;\n        serializationObject.useAlphaTest = this.useAlphaTest;\n        serializationObject.alphaTestCutoff = this.alphaTestCutoff;\n        serializationObject.useAlphaBlending = this.useAlphaBlending;\n        serializationObject.useRadianceOverAlpha = this.useRadianceOverAlpha;\n        serializationObject.useSpecularOverAlpha = this.useSpecularOverAlpha;\n        serializationObject.enableSpecularAntiAliasing = this.enableSpecularAntiAliasing;\n        serializationObject.realTimeFiltering = this.realTimeFiltering;\n        serializationObject.realTimeFilteringQuality = this.realTimeFilteringQuality;\n        serializationObject.useEnergyConservation = this.useEnergyConservation;\n        serializationObject.useRadianceOcclusion = this.useRadianceOcclusion;\n        serializationObject.useHorizonOcclusion = this.useHorizonOcclusion;\n        serializationObject.unlit = this.unlit;\n        serializationObject.forceNormalForward = this.forceNormalForward;\n        serializationObject.debugMode = this.debugMode;\n        serializationObject.debugLimit = this.debugLimit;\n        serializationObject.debugFactor = this.debugFactor;\n        serializationObject.generateOnlyFragmentCode = this.generateOnlyFragmentCode;\n        return serializationObject;\n    }\n    _deserialize(serializationObject, scene, rootUrl) {\n        var _a, _b;\n        super._deserialize(serializationObject, scene, rootUrl);\n        if (serializationObject.lightId) {\n            this.light = scene.getLightById(serializationObject.lightId);\n        }\n        this.lightFalloff = (_a = serializationObject.lightFalloff) !== null && _a !== void 0 ? _a : 0;\n        this.useAlphaTest = serializationObject.useAlphaTest;\n        this.alphaTestCutoff = serializationObject.alphaTestCutoff;\n        this.useAlphaBlending = serializationObject.useAlphaBlending;\n        this.useRadianceOverAlpha = serializationObject.useRadianceOverAlpha;\n        this.useSpecularOverAlpha = serializationObject.useSpecularOverAlpha;\n        this.enableSpecularAntiAliasing = serializationObject.enableSpecularAntiAliasing;\n        this.realTimeFiltering = !!serializationObject.realTimeFiltering;\n        this.realTimeFilteringQuality = (_b = serializationObject.realTimeFilteringQuality) !== null && _b !== void 0 ? _b : 8;\n        this.useEnergyConservation = serializationObject.useEnergyConservation;\n        this.useRadianceOcclusion = serializationObject.useRadianceOcclusion;\n        this.useHorizonOcclusion = serializationObject.useHorizonOcclusion;\n        this.unlit = serializationObject.unlit;\n        this.forceNormalForward = !!serializationObject.forceNormalForward;\n        this.debugMode = serializationObject.debugMode;\n        this.debugLimit = serializationObject.debugLimit;\n        this.debugFactor = serializationObject.debugFactor;\n        this.generateOnlyFragmentCode = !!serializationObject.generateOnlyFragmentCode;\n        this._setTarget();\n    }\n}\n__decorate([\n    editableInPropertyPage(\"Direct lights\", PropertyTypeForEdition.Float, \"INTENSITY\", { min: 0, max: 1, notifiers: { update: true } })\n], PBRMetallicRoughnessBlock.prototype, \"directIntensity\", void 0);\n__decorate([\n    editableInPropertyPage(\"Environment lights\", PropertyTypeForEdition.Float, \"INTENSITY\", { min: 0, max: 1, notifiers: { update: true } })\n], PBRMetallicRoughnessBlock.prototype, \"environmentIntensity\", void 0);\n__decorate([\n    editableInPropertyPage(\"Specular highlights\", PropertyTypeForEdition.Float, \"INTENSITY\", { min: 0, max: 1, notifiers: { update: true } })\n], PBRMetallicRoughnessBlock.prototype, \"specularIntensity\", void 0);\n__decorate([\n    editableInPropertyPage(\"Light falloff\", PropertyTypeForEdition.List, \"LIGHTING & COLORS\", {\n        notifiers: { update: true },\n        options: [\n            { label: \"Physical\", value: PBRBaseMaterial.LIGHTFALLOFF_PHYSICAL },\n            { label: \"GLTF\", value: PBRBaseMaterial.LIGHTFALLOFF_GLTF },\n            { label: \"Standard\", value: PBRBaseMaterial.LIGHTFALLOFF_STANDARD },\n        ],\n    })\n], PBRMetallicRoughnessBlock.prototype, \"lightFalloff\", void 0);\n__decorate([\n    editableInPropertyPage(\"Alpha Testing\", PropertyTypeForEdition.Boolean, \"OPACITY\")\n], PBRMetallicRoughnessBlock.prototype, \"useAlphaTest\", void 0);\n__decorate([\n    editableInPropertyPage(\"Alpha CutOff\", PropertyTypeForEdition.Float, \"OPACITY\", { min: 0, max: 1, notifiers: { update: true } })\n], PBRMetallicRoughnessBlock.prototype, \"alphaTestCutoff\", void 0);\n__decorate([\n    editableInPropertyPage(\"Alpha blending\", PropertyTypeForEdition.Boolean, \"OPACITY\")\n], PBRMetallicRoughnessBlock.prototype, \"useAlphaBlending\", void 0);\n__decorate([\n    editableInPropertyPage(\"Radiance over alpha\", PropertyTypeForEdition.Boolean, \"RENDERING\", { notifiers: { update: true } })\n], PBRMetallicRoughnessBlock.prototype, \"useRadianceOverAlpha\", void 0);\n__decorate([\n    editableInPropertyPage(\"Specular over alpha\", PropertyTypeForEdition.Boolean, \"RENDERING\", { notifiers: { update: true } })\n], PBRMetallicRoughnessBlock.prototype, \"useSpecularOverAlpha\", void 0);\n__decorate([\n    editableInPropertyPage(\"Specular anti-aliasing\", PropertyTypeForEdition.Boolean, \"RENDERING\", { notifiers: { update: true } })\n], PBRMetallicRoughnessBlock.prototype, \"enableSpecularAntiAliasing\", void 0);\n__decorate([\n    editableInPropertyPage(\"Realtime filtering\", PropertyTypeForEdition.Boolean, \"RENDERING\", { notifiers: { update: true } })\n], PBRMetallicRoughnessBlock.prototype, \"realTimeFiltering\", void 0);\n__decorate([\n    editableInPropertyPage(\"Realtime filtering quality\", PropertyTypeForEdition.List, \"RENDERING\", {\n        notifiers: { update: true },\n        options: [\n            { label: \"Low\", value: 8 },\n            { label: \"Medium\", value: 16 },\n            { label: \"High\", value: 64 },\n        ],\n    })\n], PBRMetallicRoughnessBlock.prototype, \"realTimeFilteringQuality\", void 0);\n__decorate([\n    editableInPropertyPage(\"Energy Conservation\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { update: true } })\n], PBRMetallicRoughnessBlock.prototype, \"useEnergyConservation\", void 0);\n__decorate([\n    editableInPropertyPage(\"Radiance occlusion\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { update: true } })\n], PBRMetallicRoughnessBlock.prototype, \"useRadianceOcclusion\", void 0);\n__decorate([\n    editableInPropertyPage(\"Horizon occlusion\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { update: true } })\n], PBRMetallicRoughnessBlock.prototype, \"useHorizonOcclusion\", void 0);\n__decorate([\n    editableInPropertyPage(\"Unlit\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { update: true } })\n], PBRMetallicRoughnessBlock.prototype, \"unlit\", void 0);\n__decorate([\n    editableInPropertyPage(\"Force normal forward\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { update: true } })\n], PBRMetallicRoughnessBlock.prototype, \"forceNormalForward\", void 0);\n__decorate([\n    editableInPropertyPage(\"Generate only fragment code\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n        notifiers: { rebuild: true, update: true, onValidation: PBRMetallicRoughnessBlock._OnGenerateOnlyFragmentCodeChanged },\n    })\n], PBRMetallicRoughnessBlock.prototype, \"generateOnlyFragmentCode\", void 0);\n__decorate([\n    editableInPropertyPage(\"Debug mode\", PropertyTypeForEdition.List, \"DEBUG\", {\n        notifiers: { update: true },\n        options: [\n            { label: \"None\", value: 0 },\n            // Geometry\n            { label: \"Normalized position\", value: 1 },\n            { label: \"Normals\", value: 2 },\n            { label: \"Tangents\", value: 3 },\n            { label: \"Bitangents\", value: 4 },\n            { label: \"Bump Normals\", value: 5 },\n            //{ label: \"UV1\", value: 6 },\n            //{ label: \"UV2\", value: 7 },\n            { label: \"ClearCoat Normals\", value: 8 },\n            { label: \"ClearCoat Tangents\", value: 9 },\n            { label: \"ClearCoat Bitangents\", value: 10 },\n            { label: \"Anisotropic Normals\", value: 11 },\n            { label: \"Anisotropic Tangents\", value: 12 },\n            { label: \"Anisotropic Bitangents\", value: 13 },\n            // Maps\n            //{ label: \"Emissive Map\", value: 23 },\n            //{ label: \"Light Map\", value: 24 },\n            // Env\n            { label: \"Env Refraction\", value: 40 },\n            { label: \"Env Reflection\", value: 41 },\n            { label: \"Env Clear Coat\", value: 42 },\n            // Lighting\n            { label: \"Direct Diffuse\", value: 50 },\n            { label: \"Direct Specular\", value: 51 },\n            { label: \"Direct Clear Coat\", value: 52 },\n            { label: \"Direct Sheen\", value: 53 },\n            { label: \"Env Irradiance\", value: 54 },\n            // Lighting Params\n            { label: \"Surface Albedo\", value: 60 },\n            { label: \"Reflectance 0\", value: 61 },\n            { label: \"Metallic\", value: 62 },\n            { label: \"Metallic F0\", value: 71 },\n            { label: \"Roughness\", value: 63 },\n            { label: \"AlphaG\", value: 64 },\n            { label: \"NdotV\", value: 65 },\n            { label: \"ClearCoat Color\", value: 66 },\n            { label: \"ClearCoat Roughness\", value: 67 },\n            { label: \"ClearCoat NdotV\", value: 68 },\n            { label: \"Transmittance\", value: 69 },\n            { label: \"Refraction Transmittance\", value: 70 },\n            // Misc\n            { label: \"SEO\", value: 80 },\n            { label: \"EHO\", value: 81 },\n            { label: \"Energy Factor\", value: 82 },\n            { label: \"Specular Reflectance\", value: 83 },\n            { label: \"Clear Coat Reflectance\", value: 84 },\n            { label: \"Sheen Reflectance\", value: 85 },\n            { label: \"Luminance Over Alpha\", value: 86 },\n            { label: \"Alpha\", value: 87 },\n        ],\n    })\n], PBRMetallicRoughnessBlock.prototype, \"debugMode\", void 0);\n__decorate([\n    editableInPropertyPage(\"Split position\", PropertyTypeForEdition.Float, \"DEBUG\", { min: -1, max: 1, notifiers: { update: true } })\n], PBRMetallicRoughnessBlock.prototype, \"debugLimit\", void 0);\n__decorate([\n    editableInPropertyPage(\"Output factor\", PropertyTypeForEdition.Float, \"DEBUG\", { min: 0, max: 5, notifiers: { update: true } })\n], PBRMetallicRoughnessBlock.prototype, \"debugFactor\", void 0);\nRegisterClass(\"BABYLON.PBRMetallicRoughnessBlock\", PBRMetallicRoughnessBlock);\n//# sourceMappingURL=pbrMetallicRoughnessBlock.js.map","import { __decorate } from \"../../../../tslib.es6.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject.js\";\nimport { ReflectionTextureBaseBlock } from \"../Dual/reflectionTextureBaseBlock.js\";\nimport { Texture } from \"../../../Textures/texture.js\";\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator.js\";\nimport { Scalar } from \"../../../../Maths/math.scalar.js\";\n/**\n * Block used to implement the reflection module of the PBR material\n */\nexport class ReflectionBlock extends ReflectionTextureBaseBlock {\n    _onGenerateOnlyFragmentCodeChanged() {\n        if (this.position.isConnected) {\n            this.generateOnlyFragmentCode = !this.generateOnlyFragmentCode;\n            console.error(\"The position input must not be connected to be able to switch!\");\n            return false;\n        }\n        this._setTarget();\n        return true;\n    }\n    _setTarget() {\n        super._setTarget();\n        this.getInputByName(\"position\").target = this.generateOnlyFragmentCode ? NodeMaterialBlockTargets.Fragment : NodeMaterialBlockTargets.Vertex;\n        if (this.generateOnlyFragmentCode) {\n            this.forceIrradianceInFragment = true;\n        }\n    }\n    /**\n     * Create a new ReflectionBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name);\n        /**\n         * Defines if the material uses spherical harmonics vs spherical polynomials for the\n         * diffuse part of the IBL.\n         */\n        this.useSphericalHarmonics = true;\n        /**\n         * Force the shader to compute irradiance in the fragment shader in order to take bump in account.\n         */\n        this.forceIrradianceInFragment = false;\n        this._isUnique = true;\n        this.registerInput(\"position\", NodeMaterialBlockConnectionPointTypes.AutoDetect, false, NodeMaterialBlockTargets.Vertex);\n        this.registerInput(\"world\", NodeMaterialBlockConnectionPointTypes.Matrix, false, NodeMaterialBlockTargets.Vertex);\n        this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n        this.registerOutput(\"reflection\", NodeMaterialBlockConnectionPointTypes.Object, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"reflection\", this, NodeMaterialConnectionPointDirection.Output, ReflectionBlock, \"ReflectionBlock\"));\n        this.position.addExcludedConnectionPointFromAllowedTypes(NodeMaterialBlockConnectionPointTypes.Color3 | NodeMaterialBlockConnectionPointTypes.Vector3 | NodeMaterialBlockConnectionPointTypes.Vector4);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"ReflectionBlock\";\n    }\n    /**\n     * Gets the position input component\n     */\n    get position() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the world position input component\n     */\n    get worldPosition() {\n        return this.worldPositionConnectionPoint;\n    }\n    /**\n     * Gets the world normal input component\n     */\n    get worldNormal() {\n        return this.worldNormalConnectionPoint;\n    }\n    /**\n     * Gets the world input component\n     */\n    get world() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the camera (or eye) position component\n     */\n    get cameraPosition() {\n        return this.cameraPositionConnectionPoint;\n    }\n    /**\n     * Gets the view input component\n     */\n    get view() {\n        return this.viewConnectionPoint;\n    }\n    /**\n     * Gets the color input component\n     */\n    get color() {\n        return this._inputs[2];\n    }\n    /**\n     * Gets the reflection object output component\n     */\n    get reflection() {\n        return this._outputs[0];\n    }\n    /**\n     * Returns true if the block has a texture (either its own texture or the environment texture from the scene, if set)\n     */\n    get hasTexture() {\n        return !!this._getTexture();\n    }\n    /**\n     * Gets the reflection color (either the name of the variable if the color input is connected, else a default value)\n     */\n    get reflectionColor() {\n        return this.color.isConnected ? this.color.associatedVariableName : \"vec3(1., 1., 1.)\";\n    }\n    _getTexture() {\n        if (this.texture) {\n            return this.texture;\n        }\n        return this._scene.environmentTexture;\n    }\n    prepareDefines(mesh, nodeMaterial, defines) {\n        super.prepareDefines(mesh, nodeMaterial, defines);\n        const reflectionTexture = this._getTexture();\n        const reflection = reflectionTexture && reflectionTexture.getTextureMatrix;\n        defines.setValue(\"REFLECTION\", reflection, true);\n        if (!reflection) {\n            return;\n        }\n        defines.setValue(this._defineLODReflectionAlpha, reflectionTexture.lodLevelInAlpha, true);\n        defines.setValue(this._defineLinearSpecularReflection, reflectionTexture.linearSpecularLOD, true);\n        defines.setValue(this._defineOppositeZ, this._scene.useRightHandedSystem ? !reflectionTexture.invertZ : reflectionTexture.invertZ, true);\n        defines.setValue(\"SPHERICAL_HARMONICS\", this.useSphericalHarmonics, true);\n        defines.setValue(\"GAMMAREFLECTION\", reflectionTexture.gammaSpace, true);\n        defines.setValue(\"RGBDREFLECTION\", reflectionTexture.isRGBD, true);\n        if (reflectionTexture && reflectionTexture.coordinatesMode !== Texture.SKYBOX_MODE) {\n            if (reflectionTexture.isCube) {\n                defines.setValue(\"USESPHERICALFROMREFLECTIONMAP\", true);\n                defines.setValue(\"USEIRRADIANCEMAP\", false);\n                if (this.forceIrradianceInFragment || this._scene.getEngine().getCaps().maxVaryingVectors <= 8) {\n                    defines.setValue(\"USESPHERICALINVERTEX\", false);\n                }\n                else {\n                    defines.setValue(\"USESPHERICALINVERTEX\", true);\n                }\n            }\n        }\n    }\n    bind(effect, nodeMaterial, mesh, subMesh) {\n        super.bind(effect, nodeMaterial, mesh);\n        const reflectionTexture = this._getTexture();\n        if (!reflectionTexture || !subMesh) {\n            return;\n        }\n        if (reflectionTexture.isCube) {\n            effect.setTexture(this._cubeSamplerName, reflectionTexture);\n        }\n        else {\n            effect.setTexture(this._2DSamplerName, reflectionTexture);\n        }\n        const width = reflectionTexture.getSize().width;\n        effect.setFloat3(this._vReflectionMicrosurfaceInfosName, width, reflectionTexture.lodGenerationScale, reflectionTexture.lodGenerationOffset);\n        effect.setFloat2(this._vReflectionFilteringInfoName, width, Scalar.Log2(width));\n        const defines = subMesh.materialDefines;\n        const polynomials = reflectionTexture.sphericalPolynomial;\n        if (defines.USESPHERICALFROMREFLECTIONMAP && polynomials) {\n            if (defines.SPHERICAL_HARMONICS) {\n                const preScaledHarmonics = polynomials.preScaledHarmonics;\n                effect.setVector3(\"vSphericalL00\", preScaledHarmonics.l00);\n                effect.setVector3(\"vSphericalL1_1\", preScaledHarmonics.l1_1);\n                effect.setVector3(\"vSphericalL10\", preScaledHarmonics.l10);\n                effect.setVector3(\"vSphericalL11\", preScaledHarmonics.l11);\n                effect.setVector3(\"vSphericalL2_2\", preScaledHarmonics.l2_2);\n                effect.setVector3(\"vSphericalL2_1\", preScaledHarmonics.l2_1);\n                effect.setVector3(\"vSphericalL20\", preScaledHarmonics.l20);\n                effect.setVector3(\"vSphericalL21\", preScaledHarmonics.l21);\n                effect.setVector3(\"vSphericalL22\", preScaledHarmonics.l22);\n            }\n            else {\n                effect.setFloat3(\"vSphericalX\", polynomials.x.x, polynomials.x.y, polynomials.x.z);\n                effect.setFloat3(\"vSphericalY\", polynomials.y.x, polynomials.y.y, polynomials.y.z);\n                effect.setFloat3(\"vSphericalZ\", polynomials.z.x, polynomials.z.y, polynomials.z.z);\n                effect.setFloat3(\"vSphericalXX_ZZ\", polynomials.xx.x - polynomials.zz.x, polynomials.xx.y - polynomials.zz.y, polynomials.xx.z - polynomials.zz.z);\n                effect.setFloat3(\"vSphericalYY_ZZ\", polynomials.yy.x - polynomials.zz.x, polynomials.yy.y - polynomials.zz.y, polynomials.yy.z - polynomials.zz.z);\n                effect.setFloat3(\"vSphericalZZ\", polynomials.zz.x, polynomials.zz.y, polynomials.zz.z);\n                effect.setFloat3(\"vSphericalXY\", polynomials.xy.x, polynomials.xy.y, polynomials.xy.z);\n                effect.setFloat3(\"vSphericalYZ\", polynomials.yz.x, polynomials.yz.y, polynomials.yz.z);\n                effect.setFloat3(\"vSphericalZX\", polynomials.zx.x, polynomials.zx.y, polynomials.zx.z);\n            }\n        }\n    }\n    /**\n     * Gets the code to inject in the vertex shader\n     * @param state current state of the node material building\n     * @returns the shader code\n     */\n    handleVertexSide(state) {\n        let code = super.handleVertexSide(state);\n        state._emitFunctionFromInclude(\"harmonicsFunctions\", `//${this.name}`, {\n            replaceStrings: [\n                { search: /uniform vec3 vSphericalL00;[\\s\\S]*?uniform vec3 vSphericalL22;/g, replace: \"\" },\n                { search: /uniform vec3 vSphericalX;[\\s\\S]*?uniform vec3 vSphericalZX;/g, replace: \"\" },\n            ],\n        });\n        const reflectionVectorName = state._getFreeVariableName(\"reflectionVector\");\n        this._vEnvironmentIrradianceName = state._getFreeVariableName(\"vEnvironmentIrradiance\");\n        state._emitVaryingFromString(this._vEnvironmentIrradianceName, \"vec3\", \"defined(USESPHERICALFROMREFLECTIONMAP) && defined(USESPHERICALINVERTEX)\");\n        state._emitUniformFromString(\"vSphericalL00\", \"vec3\", \"SPHERICAL_HARMONICS\");\n        state._emitUniformFromString(\"vSphericalL1_1\", \"vec3\", \"SPHERICAL_HARMONICS\");\n        state._emitUniformFromString(\"vSphericalL10\", \"vec3\", \"SPHERICAL_HARMONICS\");\n        state._emitUniformFromString(\"vSphericalL11\", \"vec3\", \"SPHERICAL_HARMONICS\");\n        state._emitUniformFromString(\"vSphericalL2_2\", \"vec3\", \"SPHERICAL_HARMONICS\");\n        state._emitUniformFromString(\"vSphericalL2_1\", \"vec3\", \"SPHERICAL_HARMONICS\");\n        state._emitUniformFromString(\"vSphericalL20\", \"vec3\", \"SPHERICAL_HARMONICS\");\n        state._emitUniformFromString(\"vSphericalL21\", \"vec3\", \"SPHERICAL_HARMONICS\");\n        state._emitUniformFromString(\"vSphericalL22\", \"vec3\", \"SPHERICAL_HARMONICS\");\n        state._emitUniformFromString(\"vSphericalX\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\n        state._emitUniformFromString(\"vSphericalY\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\n        state._emitUniformFromString(\"vSphericalZ\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\n        state._emitUniformFromString(\"vSphericalXX_ZZ\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\n        state._emitUniformFromString(\"vSphericalYY_ZZ\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\n        state._emitUniformFromString(\"vSphericalZZ\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\n        state._emitUniformFromString(\"vSphericalXY\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\n        state._emitUniformFromString(\"vSphericalYZ\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\n        state._emitUniformFromString(\"vSphericalZX\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\n        code += `#if defined(USESPHERICALFROMREFLECTIONMAP) && defined(USESPHERICALINVERTEX)\r\n                vec3 ${reflectionVectorName} = vec3(${this._reflectionMatrixName} * vec4(normalize(${this.worldNormal.associatedVariableName}).xyz, 0)).xyz;\r\n                #ifdef ${this._defineOppositeZ}\r\n                    ${reflectionVectorName}.z *= -1.0;\r\n                #endif\r\n                ${this._vEnvironmentIrradianceName} = computeEnvironmentIrradiance(${reflectionVectorName});\r\n            #endif\\r\\n`;\n        return code;\n    }\n    /**\n     * Gets the main code of the block (fragment side)\n     * @param state current state of the node material building\n     * @param normalVarName name of the existing variable corresponding to the normal\n     * @returns the shader code\n     */\n    getCode(state, normalVarName) {\n        let code = \"\";\n        this.handleFragmentSideInits(state);\n        state._emitFunctionFromInclude(\"harmonicsFunctions\", `//${this.name}`, {\n            replaceStrings: [\n                { search: /uniform vec3 vSphericalL00;[\\s\\S]*?uniform vec3 vSphericalL22;/g, replace: \"\" },\n                { search: /uniform vec3 vSphericalX;[\\s\\S]*?uniform vec3 vSphericalZX;/g, replace: \"\" },\n            ],\n        });\n        state._emitFunction(\"sampleReflection\", `\r\n            #ifdef ${this._define3DName}\r\n                #define sampleReflection(s, c) textureCube(s, c)\r\n            #else\r\n                #define sampleReflection(s, c) texture2D(s, c)\r\n            #endif\\r\\n`, `//${this.name}`);\n        state._emitFunction(\"sampleReflectionLod\", `\r\n            #ifdef ${this._define3DName}\r\n                #define sampleReflectionLod(s, c, l) textureCubeLodEXT(s, c, l)\r\n            #else\r\n                #define sampleReflectionLod(s, c, l) texture2DLodEXT(s, c, l)\r\n            #endif\\r\\n`, `//${this.name}`);\n        const computeReflectionCoordsFunc = `\r\n            vec3 computeReflectionCoordsPBR(vec4 worldPos, vec3 worldNormal) {\r\n                ${this.handleFragmentSideCodeReflectionCoords(\"worldNormal\", \"worldPos\", true, true)}\r\n                return ${this._reflectionVectorName};\r\n            }\\r\\n`;\n        state._emitFunction(\"computeReflectionCoordsPBR\", computeReflectionCoordsFunc, `//${this.name}`);\n        this._vReflectionMicrosurfaceInfosName = state._getFreeVariableName(\"vReflectionMicrosurfaceInfos\");\n        state._emitUniformFromString(this._vReflectionMicrosurfaceInfosName, \"vec3\");\n        this._vReflectionInfosName = state._getFreeVariableName(\"vReflectionInfos\");\n        this._vReflectionFilteringInfoName = state._getFreeVariableName(\"vReflectionFilteringInfo\");\n        state._emitUniformFromString(this._vReflectionFilteringInfoName, \"vec2\");\n        code += `#ifdef REFLECTION\r\n            vec2 ${this._vReflectionInfosName} = vec2(1., 0.);\r\n\r\n            reflectionOutParams reflectionOut;\r\n\r\n            reflectionBlock(\r\n                ${this.generateOnlyFragmentCode ? this._worldPositionNameInFragmentOnlyMode : \"v_\" + this.worldPosition.associatedVariableName}.xyz,\r\n                ${normalVarName},\r\n                alphaG,\r\n                ${this._vReflectionMicrosurfaceInfosName},\r\n                ${this._vReflectionInfosName},\r\n                ${this.reflectionColor},\r\n            #ifdef ANISOTROPIC\r\n                anisotropicOut,\r\n            #endif\r\n            #if defined(${this._defineLODReflectionAlpha}) && !defined(${this._defineSkyboxName})\r\n                NdotVUnclamped,\r\n            #endif\r\n            #ifdef ${this._defineLinearSpecularReflection}\r\n                roughness,\r\n            #endif\r\n            #ifdef ${this._define3DName}\r\n                ${this._cubeSamplerName},\r\n            #else\r\n                ${this._2DSamplerName},\r\n            #endif\r\n            #if defined(NORMAL) && defined(USESPHERICALINVERTEX)\r\n                ${this._vEnvironmentIrradianceName},\r\n            #endif\r\n            #ifdef USESPHERICALFROMREFLECTIONMAP\r\n                #if !defined(NORMAL) || !defined(USESPHERICALINVERTEX)\r\n                    ${this._reflectionMatrixName},\r\n                #endif\r\n            #endif\r\n            #ifdef USEIRRADIANCEMAP\r\n                irradianceSampler, // ** not handled **\r\n            #endif\r\n            #ifndef LODBASEDMICROSFURACE\r\n                #ifdef ${this._define3DName}\r\n                    ${this._cubeSamplerName},\r\n                    ${this._cubeSamplerName},\r\n                #else\r\n                    ${this._2DSamplerName},\r\n                    ${this._2DSamplerName},\r\n                #endif\r\n            #endif\r\n            #ifdef REALTIME_FILTERING\r\n                ${this._vReflectionFilteringInfoName},\r\n            #endif\r\n                reflectionOut\r\n            );\r\n        #endif\\r\\n`;\n        return code;\n    }\n    _buildBlock(state) {\n        this._scene = state.sharedData.scene;\n        if (state.target !== NodeMaterialBlockTargets.Fragment) {\n            this._defineLODReflectionAlpha = state._getFreeDefineName(\"LODINREFLECTIONALPHA\");\n            this._defineLinearSpecularReflection = state._getFreeDefineName(\"LINEARSPECULARREFLECTION\");\n        }\n        return this;\n    }\n    _dumpPropertiesCode() {\n        let codeString = super._dumpPropertiesCode();\n        if (this.texture) {\n            codeString += `${this._codeVariableName}.texture.gammaSpace = ${this.texture.gammaSpace};\\r\\n`;\n        }\n        codeString += `${this._codeVariableName}.useSphericalHarmonics = ${this.useSphericalHarmonics};\\r\\n`;\n        codeString += `${this._codeVariableName}.forceIrradianceInFragment = ${this.forceIrradianceInFragment};\\r\\n`;\n        return codeString;\n    }\n    serialize() {\n        var _a, _b;\n        const serializationObject = super.serialize();\n        serializationObject.useSphericalHarmonics = this.useSphericalHarmonics;\n        serializationObject.forceIrradianceInFragment = this.forceIrradianceInFragment;\n        serializationObject.gammaSpace = (_b = (_a = this.texture) === null || _a === void 0 ? void 0 : _a.gammaSpace) !== null && _b !== void 0 ? _b : true;\n        return serializationObject;\n    }\n    _deserialize(serializationObject, scene, rootUrl) {\n        super._deserialize(serializationObject, scene, rootUrl);\n        this.useSphericalHarmonics = serializationObject.useSphericalHarmonics;\n        this.forceIrradianceInFragment = serializationObject.forceIrradianceInFragment;\n        if (this.texture) {\n            this.texture.gammaSpace = serializationObject.gammaSpace;\n        }\n    }\n}\n__decorate([\n    editableInPropertyPage(\"Spherical Harmonics\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { update: true } })\n], ReflectionBlock.prototype, \"useSphericalHarmonics\", void 0);\n__decorate([\n    editableInPropertyPage(\"Force irradiance in fragment\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { update: true } })\n], ReflectionBlock.prototype, \"forceIrradianceInFragment\", void 0);\nRegisterClass(\"BABYLON.ReflectionBlock\", ReflectionBlock);\n//# sourceMappingURL=reflectionBlock.js.map","import { __decorate } from \"../../../../tslib.es6.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject.js\";\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator.js\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { CubeTexture } from \"../../../Textures/cubeTexture.js\";\nimport { Texture } from \"../../../Textures/texture.js\";\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues.js\";\nimport { Scalar } from \"../../../../Maths/math.scalar.js\";\n/**\n * Block used to implement the refraction part of the sub surface module of the PBR material\n */\nexport class RefractionBlock extends NodeMaterialBlock {\n    /**\n     * Create a new RefractionBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Fragment);\n        /**\n         * This parameters will make the material used its opacity to control how much it is refracting against not.\n         * Materials half opaque for instance using refraction could benefit from this control.\n         */\n        this.linkRefractionWithTransparency = false;\n        /**\n         * Controls if refraction needs to be inverted on Y. This could be useful for procedural texture.\n         */\n        this.invertRefractionY = false;\n        /**\n         * Controls if refraction needs to be inverted on Y. This could be useful for procedural texture.\n         */\n        this.useThicknessAsDepth = false;\n        this._isUnique = true;\n        this.registerInput(\"intensity\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n        this.registerInput(\"tintAtDistance\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n        this.registerInput(\"volumeIndexOfRefraction\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n        this.registerOutput(\"refraction\", NodeMaterialBlockConnectionPointTypes.Object, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"refraction\", this, NodeMaterialConnectionPointDirection.Output, RefractionBlock, \"RefractionBlock\"));\n    }\n    /**\n     * Initialize the block and prepare the context for build\n     * @param state defines the state that will be used for the build\n     */\n    initialize(state) {\n        state._excludeVariableName(\"vRefractionPosition\");\n        state._excludeVariableName(\"vRefractionSize\");\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"RefractionBlock\";\n    }\n    /**\n     * Gets the intensity input component\n     */\n    get intensity() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the tint at distance input component\n     */\n    get tintAtDistance() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the volume index of refraction input component\n     */\n    get volumeIndexOfRefraction() {\n        return this._inputs[2];\n    }\n    /**\n     * Gets the view input component\n     */\n    get view() {\n        return this.viewConnectionPoint;\n    }\n    /**\n     * Gets the refraction object output component\n     */\n    get refraction() {\n        return this._outputs[0];\n    }\n    /**\n     * Returns true if the block has a texture\n     */\n    get hasTexture() {\n        return !!this._getTexture();\n    }\n    _getTexture() {\n        if (this.texture) {\n            return this.texture;\n        }\n        return this._scene.environmentTexture;\n    }\n    autoConfigure(material) {\n        if (!this.intensity.isConnected) {\n            const intensityInput = new InputBlock(\"Refraction intensity\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\n            intensityInput.value = 1;\n            intensityInput.output.connectTo(this.intensity);\n        }\n        if (this.view && !this.view.isConnected) {\n            let viewInput = material.getInputBlockByPredicate((b) => b.systemValue === NodeMaterialSystemValues.View);\n            if (!viewInput) {\n                viewInput = new InputBlock(\"view\");\n                viewInput.setAsSystemValue(NodeMaterialSystemValues.View);\n            }\n            viewInput.output.connectTo(this.view);\n        }\n    }\n    prepareDefines(mesh, nodeMaterial, defines) {\n        super.prepareDefines(mesh, nodeMaterial, defines);\n        const refractionTexture = this._getTexture();\n        const refraction = refractionTexture && refractionTexture.getTextureMatrix;\n        defines.setValue(\"SS_REFRACTION\", refraction, true);\n        if (!refraction) {\n            return;\n        }\n        defines.setValue(this._define3DName, refractionTexture.isCube, true);\n        defines.setValue(this._defineLODRefractionAlpha, refractionTexture.lodLevelInAlpha, true);\n        defines.setValue(this._defineLinearSpecularRefraction, refractionTexture.linearSpecularLOD, true);\n        defines.setValue(this._defineOppositeZ, this._scene.useRightHandedSystem ? !refractionTexture.invertZ : refractionTexture.invertZ, true);\n        defines.setValue(\"SS_LINKREFRACTIONTOTRANSPARENCY\", this.linkRefractionWithTransparency, true);\n        defines.setValue(\"SS_GAMMAREFRACTION\", refractionTexture.gammaSpace, true);\n        defines.setValue(\"SS_RGBDREFRACTION\", refractionTexture.isRGBD, true);\n        defines.setValue(\"SS_USE_LOCAL_REFRACTIONMAP_CUBIC\", refractionTexture.boundingBoxSize ? true : false, true);\n        defines.setValue(\"SS_USE_THICKNESS_AS_DEPTH\", this.useThicknessAsDepth, true);\n    }\n    isReady() {\n        const texture = this._getTexture();\n        if (texture && !texture.isReadyOrNotBlocking()) {\n            return false;\n        }\n        return true;\n    }\n    bind(effect, nodeMaterial, mesh) {\n        var _a, _b, _c, _d;\n        super.bind(effect, nodeMaterial, mesh);\n        const refractionTexture = this._getTexture();\n        if (!refractionTexture) {\n            return;\n        }\n        if (refractionTexture.isCube) {\n            effect.setTexture(this._cubeSamplerName, refractionTexture);\n        }\n        else {\n            effect.setTexture(this._2DSamplerName, refractionTexture);\n        }\n        effect.setMatrix(this._refractionMatrixName, refractionTexture.getReflectionTextureMatrix());\n        let depth = 1.0;\n        if (!refractionTexture.isCube) {\n            if (refractionTexture.depth) {\n                depth = refractionTexture.depth;\n            }\n        }\n        const indexOfRefraction = (_d = (_b = (_a = this.volumeIndexOfRefraction.connectInputBlock) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : (_c = this.indexOfRefractionConnectionPoint.connectInputBlock) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : 1.5;\n        effect.setFloat4(this._vRefractionInfosName, refractionTexture.level, 1 / indexOfRefraction, depth, this.invertRefractionY ? -1 : 1);\n        effect.setFloat4(this._vRefractionMicrosurfaceInfosName, refractionTexture.getSize().width, refractionTexture.lodGenerationScale, refractionTexture.lodGenerationOffset, 1 / indexOfRefraction);\n        const width = refractionTexture.getSize().width;\n        effect.setFloat2(this._vRefractionFilteringInfoName, width, Scalar.Log2(width));\n        if (refractionTexture.boundingBoxSize) {\n            const cubeTexture = refractionTexture;\n            effect.setVector3(\"vRefractionPosition\", cubeTexture.boundingBoxPosition);\n            effect.setVector3(\"vRefractionSize\", cubeTexture.boundingBoxSize);\n        }\n    }\n    /**\n     * Gets the main code of the block (fragment side)\n     * @param state current state of the node material building\n     * @returns the shader code\n     */\n    getCode(state) {\n        const code = \"\";\n        state.sharedData.blockingBlocks.push(this);\n        state.sharedData.textureBlocks.push(this);\n        // Samplers\n        this._cubeSamplerName = state._getFreeVariableName(this.name + \"CubeSampler\");\n        state.samplers.push(this._cubeSamplerName);\n        this._2DSamplerName = state._getFreeVariableName(this.name + \"2DSampler\");\n        state.samplers.push(this._2DSamplerName);\n        this._define3DName = state._getFreeDefineName(\"SS_REFRACTIONMAP_3D\");\n        state._samplerDeclaration += `#ifdef ${this._define3DName}\\r\\n`;\n        state._samplerDeclaration += `uniform samplerCube ${this._cubeSamplerName};\\r\\n`;\n        state._samplerDeclaration += `#else\\r\\n`;\n        state._samplerDeclaration += `uniform sampler2D ${this._2DSamplerName};\\r\\n`;\n        state._samplerDeclaration += `#endif\\r\\n`;\n        // Fragment\n        state.sharedData.blocksWithDefines.push(this);\n        state.sharedData.bindableBlocks.push(this);\n        this._defineLODRefractionAlpha = state._getFreeDefineName(\"SS_LODINREFRACTIONALPHA\");\n        this._defineLinearSpecularRefraction = state._getFreeDefineName(\"SS_LINEARSPECULARREFRACTION\");\n        this._defineOppositeZ = state._getFreeDefineName(\"SS_REFRACTIONMAP_OPPOSITEZ\");\n        this._refractionMatrixName = state._getFreeVariableName(\"refractionMatrix\");\n        state._emitUniformFromString(this._refractionMatrixName, \"mat4\");\n        state._emitFunction(\"sampleRefraction\", `\r\n            #ifdef ${this._define3DName}\r\n                #define sampleRefraction(s, c) textureCube(s, c)\r\n            #else\r\n                #define sampleRefraction(s, c) texture2D(s, c)\r\n            #endif\\r\\n`, `//${this.name}`);\n        state._emitFunction(\"sampleRefractionLod\", `\r\n            #ifdef ${this._define3DName}\r\n                #define sampleRefractionLod(s, c, l) textureCubeLodEXT(s, c, l)\r\n            #else\r\n                #define sampleRefractionLod(s, c, l) texture2DLodEXT(s, c, l)\r\n            #endif\\r\\n`, `//${this.name}`);\n        this._vRefractionMicrosurfaceInfosName = state._getFreeVariableName(\"vRefractionMicrosurfaceInfos\");\n        state._emitUniformFromString(this._vRefractionMicrosurfaceInfosName, \"vec4\");\n        this._vRefractionInfosName = state._getFreeVariableName(\"vRefractionInfos\");\n        state._emitUniformFromString(this._vRefractionInfosName, \"vec4\");\n        this._vRefractionFilteringInfoName = state._getFreeVariableName(\"vRefractionFilteringInfo\");\n        state._emitUniformFromString(this._vRefractionFilteringInfoName, \"vec2\");\n        state._emitUniformFromString(\"vRefractionPosition\", \"vec3\");\n        state._emitUniformFromString(\"vRefractionSize\", \"vec3\");\n        return code;\n    }\n    _buildBlock(state) {\n        this._scene = state.sharedData.scene;\n        return this;\n    }\n    _dumpPropertiesCode() {\n        let codeString = super._dumpPropertiesCode();\n        if (this.texture) {\n            if (this.texture.isCube) {\n                codeString = `${this._codeVariableName}.texture = new BABYLON.CubeTexture(\"${this.texture.name}\");\\r\\n`;\n            }\n            else {\n                codeString = `${this._codeVariableName}.texture = new BABYLON.Texture(\"${this.texture.name}\");\\r\\n`;\n            }\n            codeString += `${this._codeVariableName}.texture.coordinatesMode = ${this.texture.coordinatesMode};\\r\\n`;\n        }\n        codeString += `${this._codeVariableName}.linkRefractionWithTransparency = ${this.linkRefractionWithTransparency};\\r\\n`;\n        codeString += `${this._codeVariableName}.invertRefractionY = ${this.invertRefractionY};\\r\\n`;\n        codeString += `${this._codeVariableName}.useThicknessAsDepth = ${this.useThicknessAsDepth};\\r\\n`;\n        return codeString;\n    }\n    serialize() {\n        const serializationObject = super.serialize();\n        if (this.texture && !this.texture.isRenderTarget) {\n            serializationObject.texture = this.texture.serialize();\n        }\n        serializationObject.linkRefractionWithTransparency = this.linkRefractionWithTransparency;\n        serializationObject.invertRefractionY = this.invertRefractionY;\n        serializationObject.useThicknessAsDepth = this.useThicknessAsDepth;\n        return serializationObject;\n    }\n    _deserialize(serializationObject, scene, rootUrl) {\n        super._deserialize(serializationObject, scene, rootUrl);\n        if (serializationObject.texture) {\n            rootUrl = serializationObject.texture.url.indexOf(\"data:\") === 0 ? \"\" : rootUrl;\n            if (serializationObject.texture.isCube) {\n                this.texture = CubeTexture.Parse(serializationObject.texture, scene, rootUrl);\n            }\n            else {\n                this.texture = Texture.Parse(serializationObject.texture, scene, rootUrl);\n            }\n        }\n        this.linkRefractionWithTransparency = serializationObject.linkRefractionWithTransparency;\n        this.invertRefractionY = serializationObject.invertRefractionY;\n        this.useThicknessAsDepth = !!serializationObject.useThicknessAsDepth;\n    }\n}\n__decorate([\n    editableInPropertyPage(\"Link refraction to transparency\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { update: true } })\n], RefractionBlock.prototype, \"linkRefractionWithTransparency\", void 0);\n__decorate([\n    editableInPropertyPage(\"Invert refraction Y\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { update: true } })\n], RefractionBlock.prototype, \"invertRefractionY\", void 0);\n__decorate([\n    editableInPropertyPage(\"Use thickness as depth\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { update: true } })\n], RefractionBlock.prototype, \"useThicknessAsDepth\", void 0);\nRegisterClass(\"BABYLON.RefractionBlock\", RefractionBlock);\n//# sourceMappingURL=refractionBlock.js.map","import { __decorate } from \"../../../../tslib.es6.js\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator.js\";\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject.js\";\n/**\n * Block used to implement the sheen module of the PBR material\n */\nexport class SheenBlock extends NodeMaterialBlock {\n    /**\n     * Create a new SheenBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Fragment);\n        /**\n         * If true, the sheen effect is layered above the base BRDF with the albedo-scaling technique.\n         * It allows the strength of the sheen effect to not depend on the base color of the material,\n         * making it easier to setup and tweak the effect\n         */\n        this.albedoScaling = false;\n        /**\n         * Defines if the sheen is linked to the sheen color.\n         */\n        this.linkSheenWithAlbedo = false;\n        this._isUnique = true;\n        this.registerInput(\"intensity\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n        this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n        this.registerInput(\"roughness\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n        this.registerOutput(\"sheen\", NodeMaterialBlockConnectionPointTypes.Object, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"sheen\", this, NodeMaterialConnectionPointDirection.Output, SheenBlock, \"SheenBlock\"));\n    }\n    /**\n     * Initialize the block and prepare the context for build\n     * @param state defines the state that will be used for the build\n     */\n    initialize(state) {\n        state._excludeVariableName(\"sheenOut\");\n        state._excludeVariableName(\"sheenMapData\");\n        state._excludeVariableName(\"vSheenColor\");\n        state._excludeVariableName(\"vSheenRoughness\");\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"SheenBlock\";\n    }\n    /**\n     * Gets the intensity input component\n     */\n    get intensity() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the color input component\n     */\n    get color() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the roughness input component\n     */\n    get roughness() {\n        return this._inputs[2];\n    }\n    /**\n     * Gets the sheen object output component\n     */\n    get sheen() {\n        return this._outputs[0];\n    }\n    prepareDefines(mesh, nodeMaterial, defines) {\n        super.prepareDefines(mesh, nodeMaterial, defines);\n        defines.setValue(\"SHEEN\", true);\n        defines.setValue(\"SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE\", true, true);\n        defines.setValue(\"SHEEN_LINKWITHALBEDO\", this.linkSheenWithAlbedo, true);\n        defines.setValue(\"SHEEN_ROUGHNESS\", this.roughness.isConnected, true);\n        defines.setValue(\"SHEEN_ALBEDOSCALING\", this.albedoScaling, true);\n    }\n    /**\n     * Gets the main code of the block (fragment side)\n     * @param reflectionBlock instance of a ReflectionBlock null if the code must be generated without an active reflection module\n     * @returns the shader code\n     */\n    getCode(reflectionBlock) {\n        let code = \"\";\n        const color = this.color.isConnected ? this.color.associatedVariableName : \"vec3(1.)\";\n        const intensity = this.intensity.isConnected ? this.intensity.associatedVariableName : \"1.\";\n        const roughness = this.roughness.isConnected ? this.roughness.associatedVariableName : \"0.\";\n        const texture = \"vec4(0.)\";\n        code = `#ifdef SHEEN\r\n            sheenOutParams sheenOut;\r\n\r\n            vec4 vSheenColor = vec4(${color}, ${intensity});\r\n\r\n            sheenBlock(\r\n                vSheenColor,\r\n            #ifdef SHEEN_ROUGHNESS\r\n                ${roughness},\r\n            #endif\r\n                roughness,\r\n            #ifdef SHEEN_TEXTURE\r\n                ${texture},\r\n                1.0,\r\n            #endif\r\n                reflectance,\r\n            #ifdef SHEEN_LINKWITHALBEDO\r\n                baseColor,\r\n                surfaceAlbedo,\r\n            #endif\r\n            #ifdef ENVIRONMENTBRDF\r\n                NdotV,\r\n                environmentBrdf,\r\n            #endif\r\n            #if defined(REFLECTION) && defined(ENVIRONMENTBRDF)\r\n                AARoughnessFactors,\r\n                ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._vReflectionMicrosurfaceInfosName},\r\n                ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._vReflectionInfosName},\r\n                ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock.reflectionColor},\r\n                vLightingIntensity,\r\n                #ifdef ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName}\r\n                    ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._cubeSamplerName},\r\n                #else\r\n                    ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._2DSamplerName},\r\n                #endif\r\n                reflectionOut.reflectionCoords,\r\n                NdotVUnclamped,\r\n                #ifndef LODBASEDMICROSFURACE\r\n                    #ifdef ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName}\r\n                        ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._cubeSamplerName},\r\n                        ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._cubeSamplerName},\r\n                    #else\r\n                        ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._2DSamplerName},\r\n                        ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._2DSamplerName},\r\n                    #endif\r\n                #endif\r\n                #if !defined(${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName}) && defined(RADIANCEOCCLUSION)\r\n                    seo,\r\n                #endif\r\n                #if !defined(${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName}) && defined(HORIZONOCCLUSION) && defined(BUMP) && defined(${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName})\r\n                    eho,\r\n                #endif\r\n            #endif\r\n                sheenOut\r\n            );\r\n\r\n            #ifdef SHEEN_LINKWITHALBEDO\r\n                surfaceAlbedo = sheenOut.surfaceAlbedo;\r\n            #endif\r\n        #endif\\r\\n`;\n        return code;\n    }\n    _buildBlock(state) {\n        if (state.target === NodeMaterialBlockTargets.Fragment) {\n            state.sharedData.blocksWithDefines.push(this);\n        }\n        return this;\n    }\n    _dumpPropertiesCode() {\n        let codeString = super._dumpPropertiesCode();\n        codeString += `${this._codeVariableName}.albedoScaling = ${this.albedoScaling};\\r\\n`;\n        codeString += `${this._codeVariableName}.linkSheenWithAlbedo = ${this.linkSheenWithAlbedo};\\r\\n`;\n        return codeString;\n    }\n    serialize() {\n        const serializationObject = super.serialize();\n        serializationObject.albedoScaling = this.albedoScaling;\n        serializationObject.linkSheenWithAlbedo = this.linkSheenWithAlbedo;\n        return serializationObject;\n    }\n    _deserialize(serializationObject, scene, rootUrl) {\n        super._deserialize(serializationObject, scene, rootUrl);\n        this.albedoScaling = serializationObject.albedoScaling;\n        this.linkSheenWithAlbedo = serializationObject.linkSheenWithAlbedo;\n    }\n}\n__decorate([\n    editableInPropertyPage(\"Albedo scaling\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", { notifiers: { update: true } })\n], SheenBlock.prototype, \"albedoScaling\", void 0);\n__decorate([\n    editableInPropertyPage(\"Link sheen with albedo\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", { notifiers: { update: true } })\n], SheenBlock.prototype, \"linkSheenWithAlbedo\", void 0);\nRegisterClass(\"BABYLON.SheenBlock\", SheenBlock);\n//# sourceMappingURL=sheenBlock.js.map","import { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject.js\";\nimport { RefractionBlock } from \"./refractionBlock.js\";\n/**\n * Block used to implement the sub surface module of the PBR material\n */\nexport class SubSurfaceBlock extends NodeMaterialBlock {\n    /**\n     * Create a new SubSurfaceBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Fragment);\n        this._isUnique = true;\n        this.registerInput(\"thickness\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n        this.registerInput(\"tintColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n        this.registerInput(\"translucencyIntensity\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n        this.registerInput(\"translucencyDiffusionDist\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n        this.registerInput(\"refraction\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"refraction\", this, NodeMaterialConnectionPointDirection.Input, RefractionBlock, \"RefractionBlock\"));\n        this.registerOutput(\"subsurface\", NodeMaterialBlockConnectionPointTypes.Object, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"subsurface\", this, NodeMaterialConnectionPointDirection.Output, SubSurfaceBlock, \"SubSurfaceBlock\"));\n    }\n    /**\n     * Initialize the block and prepare the context for build\n     * @param state defines the state that will be used for the build\n     */\n    initialize(state) {\n        state._excludeVariableName(\"subSurfaceOut\");\n        state._excludeVariableName(\"vThicknessParam\");\n        state._excludeVariableName(\"vTintColor\");\n        state._excludeVariableName(\"vSubSurfaceIntensity\");\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"SubSurfaceBlock\";\n    }\n    /**\n     * Gets the thickness component\n     */\n    get thickness() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the tint color input component\n     */\n    get tintColor() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the translucency intensity input component\n     */\n    get translucencyIntensity() {\n        return this._inputs[2];\n    }\n    /**\n     * Gets the translucency diffusion distance input component\n     */\n    get translucencyDiffusionDist() {\n        return this._inputs[3];\n    }\n    /**\n     * Gets the refraction object parameters\n     */\n    get refraction() {\n        return this._inputs[4];\n    }\n    /**\n     * Gets the sub surface object output component\n     */\n    get subsurface() {\n        return this._outputs[0];\n    }\n    autoConfigure() {\n        if (!this.thickness.isConnected) {\n            const thicknessInput = new InputBlock(\"SubSurface thickness\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\n            thicknessInput.value = 0;\n            thicknessInput.output.connectTo(this.thickness);\n        }\n    }\n    prepareDefines(mesh, nodeMaterial, defines) {\n        super.prepareDefines(mesh, nodeMaterial, defines);\n        const translucencyEnabled = this.translucencyDiffusionDist.isConnected || this.translucencyIntensity.isConnected;\n        defines.setValue(\"SUBSURFACE\", translucencyEnabled || this.refraction.isConnected, true);\n        defines.setValue(\"SS_TRANSLUCENCY\", translucencyEnabled, true);\n        defines.setValue(\"SS_THICKNESSANDMASK_TEXTURE\", false, true);\n        defines.setValue(\"SS_REFRACTIONINTENSITY_TEXTURE\", false, true);\n        defines.setValue(\"SS_TRANSLUCENCYINTENSITY_TEXTURE\", false, true);\n        defines.setValue(\"SS_MASK_FROM_THICKNESS_TEXTURE\", false, true);\n        defines.setValue(\"SS_USE_GLTF_TEXTURES\", false, true);\n    }\n    /**\n     * Gets the main code of the block (fragment side)\n     * @param state current state of the node material building\n     * @param ssBlock instance of a SubSurfaceBlock or null if the code must be generated without an active sub surface module\n     * @param reflectionBlock instance of a ReflectionBlock null if the code must be generated without an active reflection module\n     * @param worldPosVarName name of the variable holding the world position\n     * @returns the shader code\n     */\n    static GetCode(state, ssBlock, reflectionBlock, worldPosVarName) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;\n        let code = \"\";\n        const thickness = (ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.thickness.isConnected) ? ssBlock.thickness.associatedVariableName : \"0.\";\n        const tintColor = (ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.tintColor.isConnected) ? ssBlock.tintColor.associatedVariableName : \"vec3(1.)\";\n        const translucencyIntensity = (ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.translucencyIntensity.isConnected) ? ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.translucencyIntensity.associatedVariableName : \"1.\";\n        const translucencyDiffusionDistance = (ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.translucencyDiffusionDist.isConnected) ? ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.translucencyDiffusionDist.associatedVariableName : \"vec3(1.)\";\n        const refractionBlock = ((ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.refraction.isConnected) ? (_a = ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.refraction.connectedPoint) === null || _a === void 0 ? void 0 : _a.ownerBlock : null);\n        const refractionTintAtDistance = (refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock.tintAtDistance.isConnected) ? refractionBlock.tintAtDistance.associatedVariableName : \"1.\";\n        const refractionIntensity = (refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock.intensity.isConnected) ? refractionBlock.intensity.associatedVariableName : \"1.\";\n        const refractionView = (refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock.view.isConnected) ? refractionBlock.view.associatedVariableName : \"\";\n        code += (_b = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock.getCode(state)) !== null && _b !== void 0 ? _b : \"\";\n        code += `subSurfaceOutParams subSurfaceOut;\r\n\r\n        #ifdef SUBSURFACE\r\n            vec2 vThicknessParam = vec2(0., ${thickness});\r\n            vec4 vTintColor = vec4(${tintColor}, ${refractionTintAtDistance});\r\n            vec3 vSubSurfaceIntensity = vec3(${refractionIntensity}, ${translucencyIntensity}, 0.);\r\n\r\n            subSurfaceBlock(\r\n                vSubSurfaceIntensity,\r\n                vThicknessParam,\r\n                vTintColor,\r\n                normalW,\r\n                specularEnvironmentReflectance,\r\n            #ifdef SS_THICKNESSANDMASK_TEXTURE\r\n                vec4(0.),\r\n            #endif\r\n            #ifdef REFLECTION\r\n                #ifdef SS_TRANSLUCENCY\r\n                    ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._reflectionMatrixName},\r\n                    #ifdef USESPHERICALFROMREFLECTIONMAP\r\n                        #if !defined(NORMAL) || !defined(USESPHERICALINVERTEX)\r\n                            reflectionOut.irradianceVector,\r\n                        #endif\r\n                        #if defined(REALTIME_FILTERING)\r\n                            ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._cubeSamplerName},\r\n                            ${reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._vReflectionFilteringInfoName},\r\n                        #endif\r\n                        #endif\r\n                    #ifdef USEIRRADIANCEMAP\r\n                        irradianceSampler,\r\n                    #endif\r\n                #endif\r\n            #endif\r\n            #if defined(SS_REFRACTION) || defined(SS_TRANSLUCENCY)\r\n                surfaceAlbedo,\r\n            #endif\r\n            #ifdef SS_REFRACTION\r\n                ${worldPosVarName}.xyz,\r\n                viewDirectionW,\r\n                ${refractionView},\r\n                ${(_c = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._vRefractionInfosName) !== null && _c !== void 0 ? _c : \"\"},\r\n                ${(_d = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._refractionMatrixName) !== null && _d !== void 0 ? _d : \"\"},\r\n                ${(_e = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._vRefractionMicrosurfaceInfosName) !== null && _e !== void 0 ? _e : \"\"},\r\n                vLightingIntensity,\r\n                #ifdef SS_LINKREFRACTIONTOTRANSPARENCY\r\n                    alpha,\r\n                #endif\r\n                #ifdef ${(_f = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._defineLODRefractionAlpha) !== null && _f !== void 0 ? _f : \"IGNORE\"}\r\n                    NdotVUnclamped,\r\n                #endif\r\n                #ifdef ${(_g = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._defineLinearSpecularRefraction) !== null && _g !== void 0 ? _g : \"IGNORE\"}\r\n                    roughness,\r\n                #endif\r\n                alphaG,\r\n                #ifdef ${(_h = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._define3DName) !== null && _h !== void 0 ? _h : \"IGNORE\"}\r\n                    ${(_j = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._cubeSamplerName) !== null && _j !== void 0 ? _j : \"\"},\r\n                #else\r\n                    ${(_k = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._2DSamplerName) !== null && _k !== void 0 ? _k : \"\"},\r\n                #endif\r\n                #ifndef LODBASEDMICROSFURACE\r\n                    #ifdef ${(_l = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._define3DName) !== null && _l !== void 0 ? _l : \"IGNORE\"}\r\n                        ${(_m = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._cubeSamplerName) !== null && _m !== void 0 ? _m : \"\"},\r\n                        ${(_o = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._cubeSamplerName) !== null && _o !== void 0 ? _o : \"\"},\r\n                    #else\r\n                        ${(_p = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._2DSamplerName) !== null && _p !== void 0 ? _p : \"\"},\r\n                        ${(_q = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._2DSamplerName) !== null && _q !== void 0 ? _q : \"\"},\r\n                    #endif\r\n                #endif\r\n                #ifdef ANISOTROPIC\r\n                    anisotropicOut,\r\n                #endif\r\n                #ifdef REALTIME_FILTERING\r\n                    ${(_r = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._vRefractionFilteringInfoName) !== null && _r !== void 0 ? _r : \"\"},\r\n                #endif\r\n                #ifdef SS_USE_LOCAL_REFRACTIONMAP_CUBIC\r\n                    vRefractionPosition,\r\n                    vRefractionSize,\r\n                #endif\r\n            #endif\r\n            #ifdef SS_TRANSLUCENCY\r\n                ${translucencyDiffusionDistance},\r\n            #endif\r\n                subSurfaceOut\r\n            );\r\n\r\n            #ifdef SS_REFRACTION\r\n                surfaceAlbedo = subSurfaceOut.surfaceAlbedo;\r\n                #ifdef SS_LINKREFRACTIONTOTRANSPARENCY\r\n                    alpha = subSurfaceOut.alpha;\r\n                #endif\r\n            #endif\r\n        #else\r\n            subSurfaceOut.specularEnvironmentReflectance = specularEnvironmentReflectance;\r\n        #endif\\r\\n`;\n        return code;\n    }\n    _buildBlock(state) {\n        if (state.target === NodeMaterialBlockTargets.Fragment) {\n            state.sharedData.blocksWithDefines.push(this);\n        }\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.SubSurfaceBlock\", SubSurfaceBlock);\n//# sourceMappingURL=subSurfaceBlock.js.map","import { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\n/**\n * Block used for the particle blend multiply section\n */\nexport class ParticleBlendMultiplyBlock extends NodeMaterialBlock {\n    /**\n     * Create a new ParticleBlendMultiplyBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Fragment);\n        this._isUnique = true;\n        this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color4, false, NodeMaterialBlockTargets.Fragment);\n        this.registerInput(\"alphaTexture\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n        this.registerInput(\"alphaColor\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n        this.registerOutput(\"blendColor\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Fragment);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"ParticleBlendMultiplyBlock\";\n    }\n    /**\n     * Gets the color input component\n     */\n    get color() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the alphaTexture input component\n     */\n    get alphaTexture() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the alphaColor input component\n     */\n    get alphaColor() {\n        return this._inputs[2];\n    }\n    /**\n     * Gets the blendColor output component\n     */\n    get blendColor() {\n        return this._outputs[0];\n    }\n    /**\n     * Initialize the block and prepare the context for build\n     * @param state defines the state that will be used for the build\n     */\n    initialize(state) {\n        state._excludeVariableName(\"sourceAlpha\");\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        if (state.target === NodeMaterialBlockTargets.Vertex) {\n            return;\n        }\n        state.compilationString += `\r\n            #ifdef BLENDMULTIPLYMODE\r\n                ${this._declareOutput(this.blendColor, state)};\r\n                float sourceAlpha = ${this.alphaColor.associatedVariableName} * ${this.alphaTexture.associatedVariableName};\r\n                ${this.blendColor.associatedVariableName}.rgb = ${this.color.associatedVariableName}.rgb * sourceAlpha + vec3(1.0) * (1.0 - sourceAlpha);\r\n                ${this.blendColor.associatedVariableName}.a = ${this.color.associatedVariableName}.a;\r\n            #else\r\n                ${this._declareOutput(this.blendColor, state)} = ${this.color.associatedVariableName};\r\n            #endif\r\n        `;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.ParticleBlendMultiplyBlock\", ParticleBlendMultiplyBlock);\n//# sourceMappingURL=particleBlendMultiplyBlock.js.map","import { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\n/**\n * Block used for the particle ramp gradient section\n */\nexport class ParticleRampGradientBlock extends NodeMaterialBlock {\n    /**\n     * Create a new ParticleRampGradientBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Fragment);\n        this._isUnique = true;\n        this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color4, false, NodeMaterialBlockTargets.Fragment);\n        this.registerOutput(\"rampColor\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Fragment);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"ParticleRampGradientBlock\";\n    }\n    /**\n     * Gets the color input component\n     */\n    get color() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the rampColor output component\n     */\n    get rampColor() {\n        return this._outputs[0];\n    }\n    /**\n     * Initialize the block and prepare the context for build\n     * @param state defines the state that will be used for the build\n     */\n    initialize(state) {\n        state._excludeVariableName(\"remapRanges\");\n        state._excludeVariableName(\"rampSampler\");\n        state._excludeVariableName(\"baseColor\");\n        state._excludeVariableName(\"alpha\");\n        state._excludeVariableName(\"remappedColorIndex\");\n        state._excludeVariableName(\"rampColor\");\n        state._excludeVariableName(\"finalAlpha\");\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        if (state.target === NodeMaterialBlockTargets.Vertex) {\n            return;\n        }\n        state._emit2DSampler(\"rampSampler\");\n        state._emitVaryingFromString(\"remapRanges\", \"vec4\", \"RAMPGRADIENT\");\n        state.compilationString += `\r\n            #ifdef RAMPGRADIENT\r\n                vec4 baseColor = ${this.color.associatedVariableName};\r\n                float alpha = ${this.color.associatedVariableName}.a;\r\n\r\n                float remappedColorIndex = clamp((alpha - remapRanges.x) / remapRanges.y, 0.0, 1.0);\r\n\r\n                vec4 rampColor = texture2D(rampSampler, vec2(1.0 - remappedColorIndex, 0.));\r\n                baseColor.rgb *= rampColor.rgb;\r\n\r\n                // Remapped alpha\r\n                float finalAlpha = baseColor.a;\r\n                baseColor.a = clamp((alpha * rampColor.a - remapRanges.z) / remapRanges.w, 0.0, 1.0);\r\n\r\n                ${this._declareOutput(this.rampColor, state)} = baseColor;\r\n            #else\r\n                ${this._declareOutput(this.rampColor, state)} = ${this.color.associatedVariableName};\r\n            #endif\r\n        `;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.ParticleRampGradientBlock\", ParticleRampGradientBlock);\n//# sourceMappingURL=particleRampGradientBlock.js.map","import { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { Texture } from \"../../../Textures/texture.js\";\n/**\n * Base block used for the particle texture\n */\nexport class ParticleTextureBlock extends NodeMaterialBlock {\n    /**\n     * Create a new ParticleTextureBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Fragment);\n        this._samplerName = \"diffuseSampler\";\n        /**\n         * Gets or sets a boolean indicating if content needs to be converted to gamma space\n         */\n        this.convertToGammaSpace = false;\n        /**\n         * Gets or sets a boolean indicating if content needs to be converted to linear space\n         */\n        this.convertToLinearSpace = false;\n        this._isUnique = false;\n        this.registerInput(\"uv\", NodeMaterialBlockConnectionPointTypes.AutoDetect, false, NodeMaterialBlockTargets.VertexAndFragment);\n        this.registerOutput(\"rgba\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Neutral);\n        this.registerOutput(\"rgb\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Neutral);\n        this.registerOutput(\"r\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\n        this.registerOutput(\"g\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\n        this.registerOutput(\"b\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\n        this.registerOutput(\"a\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\n        this._inputs[0].addExcludedConnectionPointFromAllowedTypes(NodeMaterialBlockConnectionPointTypes.Vector2 | NodeMaterialBlockConnectionPointTypes.Vector3 | NodeMaterialBlockConnectionPointTypes.Vector4);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"ParticleTextureBlock\";\n    }\n    /**\n     * Gets the uv input component\n     */\n    get uv() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the rgba output component\n     */\n    get rgba() {\n        return this._outputs[0];\n    }\n    /**\n     * Gets the rgb output component\n     */\n    get rgb() {\n        return this._outputs[1];\n    }\n    /**\n     * Gets the r output component\n     */\n    get r() {\n        return this._outputs[2];\n    }\n    /**\n     * Gets the g output component\n     */\n    get g() {\n        return this._outputs[3];\n    }\n    /**\n     * Gets the b output component\n     */\n    get b() {\n        return this._outputs[4];\n    }\n    /**\n     * Gets the a output component\n     */\n    get a() {\n        return this._outputs[5];\n    }\n    /**\n     * Initialize the block and prepare the context for build\n     * @param state defines the state that will be used for the build\n     */\n    initialize(state) {\n        state._excludeVariableName(\"diffuseSampler\");\n    }\n    autoConfigure(material) {\n        if (!this.uv.isConnected) {\n            let uvInput = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"particle_uv\");\n            if (!uvInput) {\n                uvInput = new InputBlock(\"uv\");\n                uvInput.setAsAttribute(\"particle_uv\");\n            }\n            uvInput.output.connectTo(this.uv);\n        }\n    }\n    prepareDefines(mesh, nodeMaterial, defines) {\n        defines.setValue(this._linearDefineName, this.convertToGammaSpace, true);\n        defines.setValue(this._gammaDefineName, this.convertToLinearSpace, true);\n    }\n    isReady() {\n        if (this.texture && !this.texture.isReadyOrNotBlocking()) {\n            return false;\n        }\n        return true;\n    }\n    _writeOutput(state, output, swizzle) {\n        state.compilationString += `${this._declareOutput(output, state)} = ${this._tempTextureRead}.${swizzle};\\r\\n`;\n        state.compilationString += `#ifdef ${this._linearDefineName}\\r\\n`;\n        state.compilationString += `${output.associatedVariableName} = toGammaSpace(${output.associatedVariableName});\\r\\n`;\n        state.compilationString += `#endif\\r\\n`;\n        state.compilationString += `#ifdef ${this._gammaDefineName}\\r\\n`;\n        state.compilationString += `${output.associatedVariableName} = toLinearSpace(${output.associatedVariableName});\\r\\n`;\n        state.compilationString += `#endif\\r\\n`;\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        if (state.target === NodeMaterialBlockTargets.Vertex) {\n            return;\n        }\n        this._tempTextureRead = state._getFreeVariableName(\"tempTextureRead\");\n        state._emit2DSampler(this._samplerName);\n        state.sharedData.blockingBlocks.push(this);\n        state.sharedData.textureBlocks.push(this);\n        state.sharedData.blocksWithDefines.push(this);\n        this._linearDefineName = state._getFreeDefineName(\"ISLINEAR\");\n        this._gammaDefineName = state._getFreeDefineName(\"ISGAMMA\");\n        const comments = `//${this.name}`;\n        state._emitFunctionFromInclude(\"helperFunctions\", comments);\n        state.compilationString += `vec4 ${this._tempTextureRead} = texture2D(${this._samplerName}, ${this.uv.associatedVariableName});\\r\\n`;\n        for (const output of this._outputs) {\n            if (output.hasEndpoints) {\n                this._writeOutput(state, output, output.name);\n            }\n        }\n        return this;\n    }\n    serialize() {\n        const serializationObject = super.serialize();\n        serializationObject.convertToGammaSpace = this.convertToGammaSpace;\n        serializationObject.convertToLinearSpace = this.convertToLinearSpace;\n        if (this.texture && !this.texture.isRenderTarget) {\n            serializationObject.texture = this.texture.serialize();\n        }\n        return serializationObject;\n    }\n    _deserialize(serializationObject, scene, rootUrl) {\n        super._deserialize(serializationObject, scene, rootUrl);\n        this.convertToGammaSpace = serializationObject.convertToGammaSpace;\n        this.convertToLinearSpace = !!serializationObject.convertToLinearSpace;\n        if (serializationObject.texture) {\n            rootUrl = serializationObject.texture.url.indexOf(\"data:\") === 0 ? \"\" : rootUrl;\n            this.texture = Texture.Parse(serializationObject.texture, scene, rootUrl);\n        }\n    }\n}\nRegisterClass(\"BABYLON.ParticleTextureBlock\", ParticleTextureBlock);\n//# sourceMappingURL=particleTextureBlock.js.map","import { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\n/**\n * Block used to output the vertex position\n */\nexport class VertexOutputBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new VertexOutputBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Vertex, true);\n        this.registerInput(\"vector\", NodeMaterialBlockConnectionPointTypes.Vector4);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"VertexOutputBlock\";\n    }\n    /**\n     * Gets the vector input component\n     */\n    get vector() {\n        return this._inputs[0];\n    }\n    _isLogarithmicDepthEnabled(nodeList) {\n        for (const node of nodeList) {\n            if (node.useLogarithmicDepth) {\n                return true;\n            }\n        }\n        return false;\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const input = this.vector;\n        state.compilationString += `gl_Position = ${input.associatedVariableName};\\r\\n`;\n        if (this._isLogarithmicDepthEnabled(state.sharedData.fragmentOutputNodes)) {\n            state._emitUniformFromString(\"logarithmicDepthConstant\", \"float\");\n            state._emitVaryingFromString(\"vFragmentDepth\", \"float\");\n            state.compilationString += `vFragmentDepth = 1.0 + gl_Position.w;\\r\\n`;\n            state.compilationString += `gl_Position.z = log2(max(0.000001, vFragmentDepth)) * logarithmicDepthConstant;\\r\\n`;\n        }\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.VertexOutputBlock\", VertexOutputBlock);\n//# sourceMappingURL=vertexOutputBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to expand a Color3/4 into 4 outputs (one for each component)\n */\nexport class ColorSplitterBlock extends NodeMaterialBlock {\n    /**\n     * Create a new ColorSplitterBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"rgba\", NodeMaterialBlockConnectionPointTypes.Color4, true);\n        this.registerInput(\"rgb \", NodeMaterialBlockConnectionPointTypes.Color3, true);\n        this.registerOutput(\"rgb\", NodeMaterialBlockConnectionPointTypes.Color3);\n        this.registerOutput(\"r\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerOutput(\"g\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerOutput(\"b\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerOutput(\"a\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.inputsAreExclusive = true;\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"ColorSplitterBlock\";\n    }\n    /**\n     * Gets the rgba component (input)\n     */\n    get rgba() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the rgb component (input)\n     */\n    get rgbIn() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the rgb component (output)\n     */\n    get rgbOut() {\n        return this._outputs[0];\n    }\n    /**\n     * Gets the r component (output)\n     */\n    get r() {\n        return this._outputs[1];\n    }\n    /**\n     * Gets the g component (output)\n     */\n    get g() {\n        return this._outputs[2];\n    }\n    /**\n     * Gets the b component (output)\n     */\n    get b() {\n        return this._outputs[3];\n    }\n    /**\n     * Gets the a component (output)\n     */\n    get a() {\n        return this._outputs[4];\n    }\n    _inputRename(name) {\n        if (name === \"rgb \") {\n            return \"rgbIn\";\n        }\n        return name;\n    }\n    _outputRename(name) {\n        if (name === \"rgb\") {\n            return \"rgbOut\";\n        }\n        return name;\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const input = this.rgba.isConnected ? this.rgba : this.rgbIn;\n        if (!input.isConnected) {\n            return;\n        }\n        const rgbOutput = this._outputs[0];\n        const rOutput = this._outputs[1];\n        const gOutput = this._outputs[2];\n        const bOutput = this._outputs[3];\n        const aOutput = this._outputs[4];\n        if (rgbOutput.hasEndpoints) {\n            state.compilationString += this._declareOutput(rgbOutput, state) + ` = ${input.associatedVariableName}.rgb;\\r\\n`;\n        }\n        if (rOutput.hasEndpoints) {\n            state.compilationString += this._declareOutput(rOutput, state) + ` = ${input.associatedVariableName}.r;\\r\\n`;\n        }\n        if (gOutput.hasEndpoints) {\n            state.compilationString += this._declareOutput(gOutput, state) + ` = ${input.associatedVariableName}.g;\\r\\n`;\n        }\n        if (bOutput.hasEndpoints) {\n            state.compilationString += this._declareOutput(bOutput, state) + ` = ${input.associatedVariableName}.b;\\r\\n`;\n        }\n        if (aOutput.hasEndpoints) {\n            state.compilationString += this._declareOutput(aOutput, state) + ` = ${input.associatedVariableName}.a;\\r\\n`;\n        }\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.ColorSplitterBlock\", ColorSplitterBlock);\n//# sourceMappingURL=colorSplitterBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to multiply 2 values\n */\nexport class MultiplyBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new MultiplyBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"left\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"right\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\n        this._linkConnectionTypes(0, 1);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"MultiplyBlock\";\n    }\n    /**\n     * Gets the left operand input component\n     */\n    get left() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the right operand input component\n     */\n    get right() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        state.compilationString += this._declareOutput(output, state) + ` = ${this.left.associatedVariableName} * ${this.right.associatedVariableName};\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.MultiplyBlock\", MultiplyBlock);\n//# sourceMappingURL=multiplyBlock.js.map","import { __decorate } from \"../../../tslib.es6.js\";\nimport { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { Vector2 } from \"../../../Maths/math.vector.js\";\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../nodeMaterialDecorator.js\";\n/**\n * Block used to remap a float from a range to a new one\n */\nexport class RemapBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new RemapBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        /**\n         * Gets or sets the source range\n         */\n        this.sourceRange = new Vector2(-1, 1);\n        /**\n         * Gets or sets the target range\n         */\n        this.targetRange = new Vector2(0, 1);\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"sourceMin\", NodeMaterialBlockConnectionPointTypes.Float, true);\n        this.registerInput(\"sourceMax\", NodeMaterialBlockConnectionPointTypes.Float, true);\n        this.registerInput(\"targetMin\", NodeMaterialBlockConnectionPointTypes.Float, true);\n        this.registerInput(\"targetMax\", NodeMaterialBlockConnectionPointTypes.Float, true);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"RemapBlock\";\n    }\n    /**\n     * Gets the input component\n     */\n    get input() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the source min input component\n     */\n    get sourceMin() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the source max input component\n     */\n    get sourceMax() {\n        return this._inputs[2];\n    }\n    /**\n     * Gets the target min input component\n     */\n    get targetMin() {\n        return this._inputs[3];\n    }\n    /**\n     * Gets the target max input component\n     */\n    get targetMax() {\n        return this._inputs[4];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        const sourceMin = this.sourceMin.isConnected ? this.sourceMin.associatedVariableName : this._writeFloat(this.sourceRange.x);\n        const sourceMax = this.sourceMax.isConnected ? this.sourceMax.associatedVariableName : this._writeFloat(this.sourceRange.y);\n        const targetMin = this.targetMin.isConnected ? this.targetMin.associatedVariableName : this._writeFloat(this.targetRange.x);\n        const targetMax = this.targetMax.isConnected ? this.targetMax.associatedVariableName : this._writeFloat(this.targetRange.y);\n        state.compilationString +=\n            this._declareOutput(output, state) +\n                ` = ${targetMin} + (${this._inputs[0].associatedVariableName} - ${sourceMin}) * (${targetMax} - ${targetMin}) / (${sourceMax} - ${sourceMin});\\r\\n`;\n        return this;\n    }\n    _dumpPropertiesCode() {\n        let codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.sourceRange = new BABYLON.Vector2(${this.sourceRange.x}, ${this.sourceRange.y});\\r\\n`;\n        codeString += `${this._codeVariableName}.targetRange = new BABYLON.Vector2(${this.targetRange.x}, ${this.targetRange.y});\\r\\n`;\n        return codeString;\n    }\n    serialize() {\n        const serializationObject = super.serialize();\n        serializationObject.sourceRange = this.sourceRange.asArray();\n        serializationObject.targetRange = this.targetRange.asArray();\n        return serializationObject;\n    }\n    _deserialize(serializationObject, scene, rootUrl) {\n        super._deserialize(serializationObject, scene, rootUrl);\n        this.sourceRange = Vector2.FromArray(serializationObject.sourceRange);\n        this.targetRange = Vector2.FromArray(serializationObject.targetRange);\n    }\n}\n__decorate([\n    editableInPropertyPage(\"From\", PropertyTypeForEdition.Vector2)\n], RemapBlock.prototype, \"sourceRange\", void 0);\n__decorate([\n    editableInPropertyPage(\"To\", PropertyTypeForEdition.Vector2)\n], RemapBlock.prototype, \"targetRange\", void 0);\nRegisterClass(\"BABYLON.RemapBlock\", RemapBlock);\n//# sourceMappingURL=remapBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to transform a vector (2, 3 or 4) with a matrix. It will generate a Vector4\n */\nexport class TransformBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new TransformBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        /**\n         * Defines the value to use to complement W value to transform it to a Vector4\n         */\n        this.complementW = 1;\n        /**\n         * Defines the value to use to complement z value to transform it to a Vector4\n         */\n        this.complementZ = 0;\n        this.target = NodeMaterialBlockTargets.Vertex;\n        this.registerInput(\"vector\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"transform\", NodeMaterialBlockConnectionPointTypes.Matrix);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector4);\n        this.registerOutput(\"xyz\", NodeMaterialBlockConnectionPointTypes.Vector3);\n        this._inputs[0].onConnectionObservable.add((other) => {\n            if (other.ownerBlock.isInput) {\n                const otherAsInput = other.ownerBlock;\n                if (otherAsInput.name === \"normal\" || otherAsInput.name === \"tangent\") {\n                    this.complementW = 0;\n                }\n            }\n        });\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"TransformBlock\";\n    }\n    /**\n     * Gets the vector input\n     */\n    get vector() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    /**\n     * Gets the xyz output component\n     */\n    get xyz() {\n        return this._outputs[1];\n    }\n    /**\n     * Gets the matrix transform input\n     */\n    get transform() {\n        return this._inputs[1];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const vector = this.vector;\n        const transform = this.transform;\n        if (vector.connectedPoint) {\n            // None uniform scaling case.\n            if (this.complementW === 0) {\n                const comments = `//${this.name}`;\n                state._emitFunctionFromInclude(\"helperFunctions\", comments);\n                state.sharedData.blocksWithDefines.push(this);\n                const transformName = state._getFreeVariableName(`${transform.associatedVariableName}_NUS`);\n                state.compilationString += `mat3 ${transformName} = mat3(${transform.associatedVariableName});\\r\\n`;\n                state.compilationString += `#ifdef NONUNIFORMSCALING\\r\\n`;\n                state.compilationString += `${transformName} = transposeMat3(inverseMat3(${transformName}));\\r\\n`;\n                state.compilationString += `#endif\\r\\n`;\n                switch (vector.connectedPoint.type) {\n                    case NodeMaterialBlockConnectionPointTypes.Vector2:\n                        state.compilationString +=\n                            this._declareOutput(this.output, state) +\n                                ` = vec4(${transformName} * vec3(${vector.associatedVariableName}, ${this._writeFloat(this.complementZ)}), ${this._writeFloat(this.complementW)});\\r\\n`;\n                        break;\n                    case NodeMaterialBlockConnectionPointTypes.Vector3:\n                    case NodeMaterialBlockConnectionPointTypes.Color3:\n                        state.compilationString +=\n                            this._declareOutput(this.output, state) + ` = vec4(${transformName} * ${vector.associatedVariableName}, ${this._writeFloat(this.complementW)});\\r\\n`;\n                        break;\n                    default:\n                        state.compilationString +=\n                            this._declareOutput(this.output, state) +\n                                ` = vec4(${transformName} * ${vector.associatedVariableName}.xyz, ${this._writeFloat(this.complementW)});\\r\\n`;\n                        break;\n                }\n            }\n            else {\n                const transformName = transform.associatedVariableName;\n                switch (vector.connectedPoint.type) {\n                    case NodeMaterialBlockConnectionPointTypes.Vector2:\n                        state.compilationString +=\n                            this._declareOutput(this.output, state) +\n                                ` = ${transformName} * vec4(${vector.associatedVariableName}, ${this._writeFloat(this.complementZ)}, ${this._writeFloat(this.complementW)});\\r\\n`;\n                        break;\n                    case NodeMaterialBlockConnectionPointTypes.Vector3:\n                    case NodeMaterialBlockConnectionPointTypes.Color3:\n                        state.compilationString +=\n                            this._declareOutput(this.output, state) + ` = ${transformName} * vec4(${vector.associatedVariableName}, ${this._writeFloat(this.complementW)});\\r\\n`;\n                        break;\n                    default:\n                        state.compilationString += this._declareOutput(this.output, state) + ` = ${transformName} * ${vector.associatedVariableName};\\r\\n`;\n                        break;\n                }\n            }\n            if (this.xyz.hasEndpoints) {\n                state.compilationString += this._declareOutput(this.xyz, state) + ` = ${this.output.associatedVariableName}.xyz;\\r\\n`;\n            }\n        }\n        return this;\n    }\n    /**\n     * Update defines for shader compilation\n     * @param mesh defines the mesh to be rendered\n     * @param nodeMaterial defines the node material requesting the update\n     * @param defines defines the material defines to update\n     */\n    prepareDefines(mesh, nodeMaterial, defines) {\n        // Do nothing\n        if (mesh.nonUniformScaling) {\n            defines.setValue(\"NONUNIFORMSCALING\", true);\n        }\n    }\n    serialize() {\n        const serializationObject = super.serialize();\n        serializationObject.complementZ = this.complementZ;\n        serializationObject.complementW = this.complementW;\n        return serializationObject;\n    }\n    _deserialize(serializationObject, scene, rootUrl) {\n        super._deserialize(serializationObject, scene, rootUrl);\n        this.complementZ = serializationObject.complementZ !== undefined ? serializationObject.complementZ : 0.0;\n        this.complementW = serializationObject.complementW !== undefined ? serializationObject.complementW : 1.0;\n    }\n    _dumpPropertiesCode() {\n        let codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.complementZ = ${this.complementZ};\\r\\n`;\n        codeString += `${this._codeVariableName}.complementW = ${this.complementW};\\r\\n`;\n        return codeString;\n    }\n}\nRegisterClass(\"BABYLON.TransformBlock\", TransformBlock);\n//# sourceMappingURL=transformBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Operations supported by the Trigonometry block\n */\nexport var TrigonometryBlockOperations;\n(function (TrigonometryBlockOperations) {\n    /** Cos */\n    TrigonometryBlockOperations[TrigonometryBlockOperations[\"Cos\"] = 0] = \"Cos\";\n    /** Sin */\n    TrigonometryBlockOperations[TrigonometryBlockOperations[\"Sin\"] = 1] = \"Sin\";\n    /** Abs */\n    TrigonometryBlockOperations[TrigonometryBlockOperations[\"Abs\"] = 2] = \"Abs\";\n    /** Exp */\n    TrigonometryBlockOperations[TrigonometryBlockOperations[\"Exp\"] = 3] = \"Exp\";\n    /** Exp2 */\n    TrigonometryBlockOperations[TrigonometryBlockOperations[\"Exp2\"] = 4] = \"Exp2\";\n    /** Round */\n    TrigonometryBlockOperations[TrigonometryBlockOperations[\"Round\"] = 5] = \"Round\";\n    /** Floor */\n    TrigonometryBlockOperations[TrigonometryBlockOperations[\"Floor\"] = 6] = \"Floor\";\n    /** Ceiling */\n    TrigonometryBlockOperations[TrigonometryBlockOperations[\"Ceiling\"] = 7] = \"Ceiling\";\n    /** Square root */\n    TrigonometryBlockOperations[TrigonometryBlockOperations[\"Sqrt\"] = 8] = \"Sqrt\";\n    /** Log */\n    TrigonometryBlockOperations[TrigonometryBlockOperations[\"Log\"] = 9] = \"Log\";\n    /** Tangent */\n    TrigonometryBlockOperations[TrigonometryBlockOperations[\"Tan\"] = 10] = \"Tan\";\n    /** Arc tangent */\n    TrigonometryBlockOperations[TrigonometryBlockOperations[\"ArcTan\"] = 11] = \"ArcTan\";\n    /** Arc cosinus */\n    TrigonometryBlockOperations[TrigonometryBlockOperations[\"ArcCos\"] = 12] = \"ArcCos\";\n    /** Arc sinus */\n    TrigonometryBlockOperations[TrigonometryBlockOperations[\"ArcSin\"] = 13] = \"ArcSin\";\n    /** Fraction */\n    TrigonometryBlockOperations[TrigonometryBlockOperations[\"Fract\"] = 14] = \"Fract\";\n    /** Sign */\n    TrigonometryBlockOperations[TrigonometryBlockOperations[\"Sign\"] = 15] = \"Sign\";\n    /** To radians (from degrees) */\n    TrigonometryBlockOperations[TrigonometryBlockOperations[\"Radians\"] = 16] = \"Radians\";\n    /** To degrees (from radians) */\n    TrigonometryBlockOperations[TrigonometryBlockOperations[\"Degrees\"] = 17] = \"Degrees\";\n})(TrigonometryBlockOperations || (TrigonometryBlockOperations = {}));\n/**\n * Block used to apply trigonometry operation to floats\n */\nexport class TrigonometryBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new TrigonometryBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        /**\n         * Gets or sets the operation applied by the block\n         */\n        this.operation = TrigonometryBlockOperations.Cos;\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"TrigonometryBlock\";\n    }\n    /**\n     * Gets the input component\n     */\n    get input() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        let operation = \"\";\n        switch (this.operation) {\n            case TrigonometryBlockOperations.Cos: {\n                operation = \"cos\";\n                break;\n            }\n            case TrigonometryBlockOperations.Sin: {\n                operation = \"sin\";\n                break;\n            }\n            case TrigonometryBlockOperations.Abs: {\n                operation = \"abs\";\n                break;\n            }\n            case TrigonometryBlockOperations.Exp: {\n                operation = \"exp\";\n                break;\n            }\n            case TrigonometryBlockOperations.Exp2: {\n                operation = \"exp2\";\n                break;\n            }\n            case TrigonometryBlockOperations.Round: {\n                operation = \"round\";\n                break;\n            }\n            case TrigonometryBlockOperations.Floor: {\n                operation = \"floor\";\n                break;\n            }\n            case TrigonometryBlockOperations.Ceiling: {\n                operation = \"ceil\";\n                break;\n            }\n            case TrigonometryBlockOperations.Sqrt: {\n                operation = \"sqrt\";\n                break;\n            }\n            case TrigonometryBlockOperations.Log: {\n                operation = \"log\";\n                break;\n            }\n            case TrigonometryBlockOperations.Tan: {\n                operation = \"tan\";\n                break;\n            }\n            case TrigonometryBlockOperations.ArcTan: {\n                operation = \"atan\";\n                break;\n            }\n            case TrigonometryBlockOperations.ArcCos: {\n                operation = \"acos\";\n                break;\n            }\n            case TrigonometryBlockOperations.ArcSin: {\n                operation = \"asin\";\n                break;\n            }\n            case TrigonometryBlockOperations.Fract: {\n                operation = \"fract\";\n                break;\n            }\n            case TrigonometryBlockOperations.Sign: {\n                operation = \"sign\";\n                break;\n            }\n            case TrigonometryBlockOperations.Radians: {\n                operation = \"radians\";\n                break;\n            }\n            case TrigonometryBlockOperations.Degrees: {\n                operation = \"degrees\";\n                break;\n            }\n        }\n        state.compilationString += this._declareOutput(output, state) + ` = ${operation}(${this.input.associatedVariableName});\\r\\n`;\n        return this;\n    }\n    serialize() {\n        const serializationObject = super.serialize();\n        serializationObject.operation = this.operation;\n        return serializationObject;\n    }\n    _deserialize(serializationObject, scene, rootUrl) {\n        super._deserialize(serializationObject, scene, rootUrl);\n        this.operation = serializationObject.operation;\n    }\n    _dumpPropertiesCode() {\n        const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.operation = BABYLON.TrigonometryBlockOperations.${TrigonometryBlockOperations[this.operation]};\\r\\n`;\n        return codeString;\n    }\n}\nRegisterClass(\"BABYLON.TrigonometryBlock\", TrigonometryBlock);\n//# sourceMappingURL=trigonometryBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to create a Vector2/3/4 out of individual inputs (one for each component)\n */\nexport class VectorMergerBlock extends NodeMaterialBlock {\n    /**\n     * Create a new VectorMergerBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        /**\n         * Gets or sets the swizzle for x (meaning which component to affect to the output.x)\n         */\n        this.xSwizzle = \"x\";\n        /**\n         * Gets or sets the swizzle for y (meaning which component to affect to the output.y)\n         */\n        this.ySwizzle = \"y\";\n        /**\n         * Gets or sets the swizzle for z (meaning which component to affect to the output.z)\n         */\n        this.zSwizzle = \"z\";\n        /**\n         * Gets or sets the swizzle for w (meaning which component to affect to the output.w)\n         */\n        this.wSwizzle = \"w\";\n        this.registerInput(\"xyzw \", NodeMaterialBlockConnectionPointTypes.Vector4, true);\n        this.registerInput(\"xyz \", NodeMaterialBlockConnectionPointTypes.Vector3, true);\n        this.registerInput(\"xy \", NodeMaterialBlockConnectionPointTypes.Vector2, true);\n        this.registerInput(\"zw \", NodeMaterialBlockConnectionPointTypes.Vector2, true);\n        this.registerInput(\"x\", NodeMaterialBlockConnectionPointTypes.Float, true);\n        this.registerInput(\"y\", NodeMaterialBlockConnectionPointTypes.Float, true);\n        this.registerInput(\"z\", NodeMaterialBlockConnectionPointTypes.Float, true);\n        this.registerInput(\"w\", NodeMaterialBlockConnectionPointTypes.Float, true);\n        this.registerOutput(\"xyzw\", NodeMaterialBlockConnectionPointTypes.Vector4);\n        this.registerOutput(\"xyz\", NodeMaterialBlockConnectionPointTypes.Vector3);\n        this.registerOutput(\"xy\", NodeMaterialBlockConnectionPointTypes.Vector2);\n        this.registerOutput(\"zw\", NodeMaterialBlockConnectionPointTypes.Vector2);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"VectorMergerBlock\";\n    }\n    /**\n     * Gets the xyzw component (input)\n     */\n    get xyzwIn() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the xyz component (input)\n     */\n    get xyzIn() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the xy component (input)\n     */\n    get xyIn() {\n        return this._inputs[2];\n    }\n    /**\n     * Gets the zw component (input)\n     */\n    get zwIn() {\n        return this._inputs[3];\n    }\n    /**\n     * Gets the x component (input)\n     */\n    get x() {\n        return this._inputs[4];\n    }\n    /**\n     * Gets the y component (input)\n     */\n    get y() {\n        return this._inputs[5];\n    }\n    /**\n     * Gets the z component (input)\n     */\n    get z() {\n        return this._inputs[6];\n    }\n    /**\n     * Gets the w component (input)\n     */\n    get w() {\n        return this._inputs[7];\n    }\n    /**\n     * Gets the xyzw component (output)\n     */\n    get xyzw() {\n        return this._outputs[0];\n    }\n    /**\n     * Gets the xyz component (output)\n     */\n    get xyzOut() {\n        return this._outputs[1];\n    }\n    /**\n     * Gets the xy component (output)\n     */\n    get xyOut() {\n        return this._outputs[2];\n    }\n    /**\n     * Gets the zw component (output)\n     */\n    get zwOut() {\n        return this._outputs[3];\n    }\n    /**\n     * Gets the xy component (output)\n     * @deprecated Please use xyOut instead.\n     */\n    get xy() {\n        return this.xyOut;\n    }\n    /**\n     * Gets the xyz component (output)\n     * @deprecated Please use xyzOut instead.\n     */\n    get xyz() {\n        return this.xyzOut;\n    }\n    _inputRename(name) {\n        if (name === \"xyzw \") {\n            return \"xyzwIn\";\n        }\n        if (name === \"xyz \") {\n            return \"xyzIn\";\n        }\n        if (name === \"xy \") {\n            return \"xyIn\";\n        }\n        if (name === \"zw \") {\n            return \"zwIn\";\n        }\n        return name;\n    }\n    _buildSwizzle(len) {\n        const swizzle = this.xSwizzle + this.ySwizzle + this.zSwizzle + this.wSwizzle;\n        return \".\" + swizzle.substr(0, len);\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const xInput = this.x;\n        const yInput = this.y;\n        const zInput = this.z;\n        const wInput = this.w;\n        const xyInput = this.xyIn;\n        const zwInput = this.zwIn;\n        const xyzInput = this.xyzIn;\n        const xyzwInput = this.xyzwIn;\n        const v4Output = this._outputs[0];\n        const v3Output = this._outputs[1];\n        const v2Output = this._outputs[2];\n        const v2CompOutput = this._outputs[3];\n        if (xyzwInput.isConnected) {\n            if (v4Output.hasEndpoints) {\n                state.compilationString += this._declareOutput(v4Output, state) + ` = ${xyzwInput.associatedVariableName}${this._buildSwizzle(4)};\\r\\n`;\n            }\n            if (v3Output.hasEndpoints) {\n                state.compilationString += this._declareOutput(v3Output, state) + ` = ${xyzwInput.associatedVariableName}${this._buildSwizzle(3)};\\r\\n`;\n            }\n            if (v2Output.hasEndpoints) {\n                state.compilationString += this._declareOutput(v2Output, state) + ` = ${xyzwInput.associatedVariableName}${this._buildSwizzle(2)};\\r\\n`;\n            }\n        }\n        else if (xyzInput.isConnected) {\n            if (v4Output.hasEndpoints) {\n                state.compilationString +=\n                    this._declareOutput(v4Output, state) +\n                        ` = vec4(${xyzInput.associatedVariableName}, ${wInput.isConnected ? this._writeVariable(wInput) : \"0.0\"})${this._buildSwizzle(4)};\\r\\n`;\n            }\n            if (v3Output.hasEndpoints) {\n                state.compilationString += this._declareOutput(v3Output, state) + ` = ${xyzInput.associatedVariableName}${this._buildSwizzle(3)};\\r\\n`;\n            }\n            if (v2Output.hasEndpoints) {\n                state.compilationString += this._declareOutput(v2Output, state) + ` = ${xyzInput.associatedVariableName}${this._buildSwizzle(2)};\\r\\n`;\n            }\n        }\n        else if (xyInput.isConnected) {\n            if (v4Output.hasEndpoints) {\n                if (zwInput.isConnected) {\n                    state.compilationString +=\n                        this._declareOutput(v4Output, state) + ` = vec4(${xyInput.associatedVariableName}, ${zwInput.associatedVariableName})${this._buildSwizzle(4)};\\r\\n`;\n                }\n                else {\n                    state.compilationString +=\n                        this._declareOutput(v4Output, state) +\n                            ` = vec4(${xyInput.associatedVariableName}, ${zInput.isConnected ? this._writeVariable(zInput) : \"0.0\"}, ${wInput.isConnected ? this._writeVariable(wInput) : \"0.0\"})${this._buildSwizzle(4)};\\r\\n`;\n                }\n            }\n            if (v3Output.hasEndpoints) {\n                state.compilationString +=\n                    this._declareOutput(v3Output, state) +\n                        ` = vec3(${xyInput.associatedVariableName}, ${zInput.isConnected ? this._writeVariable(zInput) : \"0.0\"})${this._buildSwizzle(3)};\\r\\n`;\n            }\n            if (v2Output.hasEndpoints) {\n                state.compilationString += this._declareOutput(v2Output, state) + ` = ${xyInput.associatedVariableName}${this._buildSwizzle(2)};\\r\\n`;\n            }\n            if (v2CompOutput.hasEndpoints) {\n                if (zwInput.isConnected) {\n                    state.compilationString += this._declareOutput(v2CompOutput, state) + ` = ${zwInput.associatedVariableName}${this._buildSwizzle(2)};\\r\\n`;\n                }\n                else {\n                    state.compilationString +=\n                        this._declareOutput(v2CompOutput, state) +\n                            ` = vec2(${zInput.isConnected ? this._writeVariable(zInput) : \"0.0\"}, ${wInput.isConnected ? this._writeVariable(wInput) : \"0.0\"})${this._buildSwizzle(2)};\\r\\n`;\n                }\n            }\n        }\n        else {\n            if (v4Output.hasEndpoints) {\n                if (zwInput.isConnected) {\n                    state.compilationString +=\n                        this._declareOutput(v4Output, state) +\n                            ` = vec4(${xInput.isConnected ? this._writeVariable(xInput) : \"0.0\"}, ${yInput.isConnected ? this._writeVariable(yInput) : \"0.0\"}, ${zwInput.associatedVariableName})${this._buildSwizzle(4)};\\r\\n`;\n                }\n                else {\n                    state.compilationString +=\n                        this._declareOutput(v4Output, state) +\n                            ` = vec4(${xInput.isConnected ? this._writeVariable(xInput) : \"0.0\"}, ${yInput.isConnected ? this._writeVariable(yInput) : \"0.0\"}, ${zInput.isConnected ? this._writeVariable(zInput) : \"0.0\"}, ${wInput.isConnected ? this._writeVariable(wInput) : \"0.0\"})${this._buildSwizzle(4)};\\r\\n`;\n                }\n            }\n            if (v3Output.hasEndpoints) {\n                state.compilationString +=\n                    this._declareOutput(v3Output, state) +\n                        ` = vec3(${xInput.isConnected ? this._writeVariable(xInput) : \"0.0\"}, ${yInput.isConnected ? this._writeVariable(yInput) : \"0.0\"}, ${zInput.isConnected ? this._writeVariable(zInput) : \"0.0\"})${this._buildSwizzle(3)};\\r\\n`;\n            }\n            if (v2Output.hasEndpoints) {\n                state.compilationString +=\n                    this._declareOutput(v2Output, state) +\n                        ` = vec2(${xInput.isConnected ? this._writeVariable(xInput) : \"0.0\"}, ${yInput.isConnected ? this._writeVariable(yInput) : \"0.0\"})${this._buildSwizzle(2)};\\r\\n`;\n            }\n            if (v2CompOutput.hasEndpoints) {\n                if (zwInput.isConnected) {\n                    state.compilationString += this._declareOutput(v2CompOutput, state) + ` = ${zwInput.associatedVariableName}${this._buildSwizzle(2)};\\r\\n`;\n                }\n                else {\n                    state.compilationString +=\n                        this._declareOutput(v2CompOutput, state) +\n                            ` = vec2(${zInput.isConnected ? this._writeVariable(zInput) : \"0.0\"}, ${wInput.isConnected ? this._writeVariable(wInput) : \"0.0\"})${this._buildSwizzle(2)};\\r\\n`;\n                }\n            }\n        }\n        return this;\n    }\n    serialize() {\n        const serializationObject = super.serialize();\n        serializationObject.xSwizzle = this.xSwizzle;\n        serializationObject.ySwizzle = this.ySwizzle;\n        serializationObject.zSwizzle = this.zSwizzle;\n        serializationObject.wSwizzle = this.wSwizzle;\n        return serializationObject;\n    }\n    _deserialize(serializationObject, scene, rootUrl) {\n        var _a, _b, _c, _d;\n        super._deserialize(serializationObject, scene, rootUrl);\n        this.xSwizzle = (_a = serializationObject.xSwizzle) !== null && _a !== void 0 ? _a : \"x\";\n        this.ySwizzle = (_b = serializationObject.ySwizzle) !== null && _b !== void 0 ? _b : \"y\";\n        this.zSwizzle = (_c = serializationObject.zSwizzle) !== null && _c !== void 0 ? _c : \"z\";\n        this.wSwizzle = (_d = serializationObject.wSwizzle) !== null && _d !== void 0 ? _d : \"w\";\n    }\n    _dumpPropertiesCode() {\n        let codeString = super._dumpPropertiesCode();\n        codeString += `${this._codeVariableName}.xSwizzle = \"${this.xSwizzle}\";\\r\\n`;\n        codeString += `${this._codeVariableName}.ySwizzle = \"${this.ySwizzle}\";\\r\\n`;\n        codeString += `${this._codeVariableName}.zSwizzle = \"${this.zSwizzle}\";\\r\\n`;\n        codeString += `${this._codeVariableName}.wSwizzle = \"${this.wSwizzle}\";\\r\\n`;\n        return codeString;\n    }\n}\nRegisterClass(\"BABYLON.VectorMergerBlock\", VectorMergerBlock);\n//# sourceMappingURL=vectorMergerBlock.js.map","/**\n * Enum defining the mode of a NodeMaterialBlockConnectionPoint\n */\nexport var NodeMaterialBlockConnectionPointMode;\n(function (NodeMaterialBlockConnectionPointMode) {\n    /** Value is an uniform */\n    NodeMaterialBlockConnectionPointMode[NodeMaterialBlockConnectionPointMode[\"Uniform\"] = 0] = \"Uniform\";\n    /** Value is a mesh attribute */\n    NodeMaterialBlockConnectionPointMode[NodeMaterialBlockConnectionPointMode[\"Attribute\"] = 1] = \"Attribute\";\n    /** Value is a varying between vertex and fragment shaders */\n    NodeMaterialBlockConnectionPointMode[NodeMaterialBlockConnectionPointMode[\"Varying\"] = 2] = \"Varying\";\n    /** Mode is undefined */\n    NodeMaterialBlockConnectionPointMode[NodeMaterialBlockConnectionPointMode[\"Undefined\"] = 3] = \"Undefined\";\n})(NodeMaterialBlockConnectionPointMode || (NodeMaterialBlockConnectionPointMode = {}));\n//# sourceMappingURL=nodeMaterialBlockConnectionPointMode.js.map","/**\n * Defines the kind of connection point for node based material\n */\nexport var NodeMaterialBlockConnectionPointTypes;\n(function (NodeMaterialBlockConnectionPointTypes) {\n    /** Float */\n    NodeMaterialBlockConnectionPointTypes[NodeMaterialBlockConnectionPointTypes[\"Float\"] = 1] = \"Float\";\n    /** Int */\n    NodeMaterialBlockConnectionPointTypes[NodeMaterialBlockConnectionPointTypes[\"Int\"] = 2] = \"Int\";\n    /** Vector2 */\n    NodeMaterialBlockConnectionPointTypes[NodeMaterialBlockConnectionPointTypes[\"Vector2\"] = 4] = \"Vector2\";\n    /** Vector3 */\n    NodeMaterialBlockConnectionPointTypes[NodeMaterialBlockConnectionPointTypes[\"Vector3\"] = 8] = \"Vector3\";\n    /** Vector4 */\n    NodeMaterialBlockConnectionPointTypes[NodeMaterialBlockConnectionPointTypes[\"Vector4\"] = 16] = \"Vector4\";\n    /** Color3 */\n    NodeMaterialBlockConnectionPointTypes[NodeMaterialBlockConnectionPointTypes[\"Color3\"] = 32] = \"Color3\";\n    /** Color4 */\n    NodeMaterialBlockConnectionPointTypes[NodeMaterialBlockConnectionPointTypes[\"Color4\"] = 64] = \"Color4\";\n    /** Matrix */\n    NodeMaterialBlockConnectionPointTypes[NodeMaterialBlockConnectionPointTypes[\"Matrix\"] = 128] = \"Matrix\";\n    /** Custom object */\n    NodeMaterialBlockConnectionPointTypes[NodeMaterialBlockConnectionPointTypes[\"Object\"] = 256] = \"Object\";\n    /** Detect type based on connection */\n    NodeMaterialBlockConnectionPointTypes[NodeMaterialBlockConnectionPointTypes[\"AutoDetect\"] = 1024] = \"AutoDetect\";\n    /** Output type that will be defined by input type */\n    NodeMaterialBlockConnectionPointTypes[NodeMaterialBlockConnectionPointTypes[\"BasedOnInput\"] = 2048] = \"BasedOnInput\";\n    /** Bitmask of all types */\n    NodeMaterialBlockConnectionPointTypes[NodeMaterialBlockConnectionPointTypes[\"All\"] = 4095] = \"All\";\n})(NodeMaterialBlockConnectionPointTypes || (NodeMaterialBlockConnectionPointTypes = {}));\n//# sourceMappingURL=nodeMaterialBlockConnectionPointTypes.js.map","/**\n * Enum used to define the target of a block\n */\nexport var NodeMaterialBlockTargets;\n(function (NodeMaterialBlockTargets) {\n    /** Vertex shader */\n    NodeMaterialBlockTargets[NodeMaterialBlockTargets[\"Vertex\"] = 1] = \"Vertex\";\n    /** Fragment shader */\n    NodeMaterialBlockTargets[NodeMaterialBlockTargets[\"Fragment\"] = 2] = \"Fragment\";\n    /** Neutral */\n    NodeMaterialBlockTargets[NodeMaterialBlockTargets[\"Neutral\"] = 4] = \"Neutral\";\n    /** Vertex and Fragment */\n    NodeMaterialBlockTargets[NodeMaterialBlockTargets[\"VertexAndFragment\"] = 3] = \"VertexAndFragment\";\n})(NodeMaterialBlockTargets || (NodeMaterialBlockTargets = {}));\n//# sourceMappingURL=nodeMaterialBlockTargets.js.map","/**\n * Enum used to define the material modes\n */\nexport var NodeMaterialModes;\n(function (NodeMaterialModes) {\n    /** Regular material */\n    NodeMaterialModes[NodeMaterialModes[\"Material\"] = 0] = \"Material\";\n    /** For post process */\n    NodeMaterialModes[NodeMaterialModes[\"PostProcess\"] = 1] = \"PostProcess\";\n    /** For particle system */\n    NodeMaterialModes[NodeMaterialModes[\"Particle\"] = 2] = \"Particle\";\n    /** For procedural texture */\n    NodeMaterialModes[NodeMaterialModes[\"ProceduralTexture\"] = 3] = \"ProceduralTexture\";\n})(NodeMaterialModes || (NodeMaterialModes = {}));\n//# sourceMappingURL=nodeMaterialModes.js.map","/**\n * Enum used to define system values e.g. values automatically provided by the system\n */\nexport var NodeMaterialSystemValues;\n(function (NodeMaterialSystemValues) {\n    /** World */\n    NodeMaterialSystemValues[NodeMaterialSystemValues[\"World\"] = 1] = \"World\";\n    /** View */\n    NodeMaterialSystemValues[NodeMaterialSystemValues[\"View\"] = 2] = \"View\";\n    /** Projection */\n    NodeMaterialSystemValues[NodeMaterialSystemValues[\"Projection\"] = 3] = \"Projection\";\n    /** ViewProjection */\n    NodeMaterialSystemValues[NodeMaterialSystemValues[\"ViewProjection\"] = 4] = \"ViewProjection\";\n    /** WorldView */\n    NodeMaterialSystemValues[NodeMaterialSystemValues[\"WorldView\"] = 5] = \"WorldView\";\n    /** WorldViewProjection */\n    NodeMaterialSystemValues[NodeMaterialSystemValues[\"WorldViewProjection\"] = 6] = \"WorldViewProjection\";\n    /** CameraPosition */\n    NodeMaterialSystemValues[NodeMaterialSystemValues[\"CameraPosition\"] = 7] = \"CameraPosition\";\n    /** Fog Color */\n    NodeMaterialSystemValues[NodeMaterialSystemValues[\"FogColor\"] = 8] = \"FogColor\";\n    /** Delta time */\n    NodeMaterialSystemValues[NodeMaterialSystemValues[\"DeltaTime\"] = 9] = \"DeltaTime\";\n    /** Camera parameters */\n    NodeMaterialSystemValues[NodeMaterialSystemValues[\"CameraParameters\"] = 10] = \"CameraParameters\";\n    /** Material alpha */\n    NodeMaterialSystemValues[NodeMaterialSystemValues[\"MaterialAlpha\"] = 11] = \"MaterialAlpha\";\n})(NodeMaterialSystemValues || (NodeMaterialSystemValues = {}));\n//# sourceMappingURL=nodeMaterialSystemValues.js.map","import { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { MaterialHelper } from \"../../../materialHelper.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport \"../../../../Shaders/ShadersInclude/bonesDeclaration.js\";\nimport \"../../../../Shaders/ShadersInclude/bonesVertex.js\";\n/**\n * Block used to add support for vertex skinning (bones)\n */\nexport class BonesBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new BonesBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Vertex);\n        this.registerInput(\"matricesIndices\", NodeMaterialBlockConnectionPointTypes.Vector4);\n        this.registerInput(\"matricesWeights\", NodeMaterialBlockConnectionPointTypes.Vector4);\n        this.registerInput(\"matricesIndicesExtra\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\n        this.registerInput(\"matricesWeightsExtra\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\n        this.registerInput(\"world\", NodeMaterialBlockConnectionPointTypes.Matrix);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Matrix);\n    }\n    /**\n     * Initialize the block and prepare the context for build\n     * @param state defines the state that will be used for the build\n     */\n    initialize(state) {\n        state._excludeVariableName(\"boneSampler\");\n        state._excludeVariableName(\"boneTextureWidth\");\n        state._excludeVariableName(\"mBones\");\n        state._excludeVariableName(\"BonesPerMesh\");\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"BonesBlock\";\n    }\n    /**\n     * Gets the matrix indices input component\n     */\n    get matricesIndices() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the matrix weights input component\n     */\n    get matricesWeights() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the extra matrix indices input component\n     */\n    get matricesIndicesExtra() {\n        return this._inputs[2];\n    }\n    /**\n     * Gets the extra matrix weights input component\n     */\n    get matricesWeightsExtra() {\n        return this._inputs[3];\n    }\n    /**\n     * Gets the world input component\n     */\n    get world() {\n        return this._inputs[4];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    autoConfigure(material) {\n        if (!this.matricesIndices.isConnected) {\n            let matricesIndicesInput = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"matricesIndices\");\n            if (!matricesIndicesInput) {\n                matricesIndicesInput = new InputBlock(\"matricesIndices\");\n                matricesIndicesInput.setAsAttribute(\"matricesIndices\");\n            }\n            matricesIndicesInput.output.connectTo(this.matricesIndices);\n        }\n        if (!this.matricesWeights.isConnected) {\n            let matricesWeightsInput = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"matricesWeights\");\n            if (!matricesWeightsInput) {\n                matricesWeightsInput = new InputBlock(\"matricesWeights\");\n                matricesWeightsInput.setAsAttribute(\"matricesWeights\");\n            }\n            matricesWeightsInput.output.connectTo(this.matricesWeights);\n        }\n        if (!this.world.isConnected) {\n            let worldInput = material.getInputBlockByPredicate((b) => b.systemValue === NodeMaterialSystemValues.World);\n            if (!worldInput) {\n                worldInput = new InputBlock(\"world\");\n                worldInput.setAsSystemValue(NodeMaterialSystemValues.World);\n            }\n            worldInput.output.connectTo(this.world);\n        }\n    }\n    provideFallbacks(mesh, fallbacks) {\n        if (mesh && mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\n            fallbacks.addCPUSkinningFallback(0, mesh);\n        }\n    }\n    bind(effect, nodeMaterial, mesh) {\n        MaterialHelper.BindBonesParameters(mesh, effect);\n    }\n    prepareDefines(mesh, nodeMaterial, defines) {\n        if (!defines._areAttributesDirty) {\n            return;\n        }\n        MaterialHelper.PrepareDefinesForBones(mesh, defines);\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        // Register for compilation fallbacks\n        state.sharedData.blocksWithFallbacks.push(this);\n        // Register for binding\n        state.sharedData.forcedBindableBlocks.push(this);\n        // Register for defines\n        state.sharedData.blocksWithDefines.push(this);\n        // Register internal uniforms and samplers\n        state.uniforms.push(\"boneTextureWidth\");\n        state.uniforms.push(\"mBones\");\n        state.samplers.push(\"boneSampler\");\n        // Emit code\n        const comments = `//${this.name}`;\n        state._emitFunctionFromInclude(\"bonesDeclaration\", comments, {\n            removeAttributes: true,\n            removeUniforms: false,\n            removeVaryings: true,\n            removeIfDef: false,\n        });\n        const influenceVariablename = state._getFreeVariableName(\"influence\");\n        state.compilationString += state._emitCodeFromInclude(\"bonesVertex\", comments, {\n            replaceStrings: [\n                {\n                    search: /finalWorld=finalWorld\\*influence;/,\n                    replace: \"\",\n                },\n                {\n                    search: /influence/gm,\n                    replace: influenceVariablename,\n                },\n            ],\n        });\n        const output = this._outputs[0];\n        const worldInput = this.world;\n        state.compilationString += `#if NUM_BONE_INFLUENCERS>0\\r\\n`;\n        state.compilationString += this._declareOutput(output, state) + ` = ${worldInput.associatedVariableName} * ${influenceVariablename};\\r\\n`;\n        state.compilationString += `#else\\r\\n`;\n        state.compilationString += this._declareOutput(output, state) + ` = ${worldInput.associatedVariableName};\\r\\n`;\n        state.compilationString += `#endif\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.BonesBlock\", BonesBlock);\n//# sourceMappingURL=bonesBlock.js.map","import { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\n/**\n * Block used to add support for instances\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances\n */\nexport class InstancesBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new InstancesBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Vertex);\n        this.registerInput(\"world0\", NodeMaterialBlockConnectionPointTypes.Vector4);\n        this.registerInput(\"world1\", NodeMaterialBlockConnectionPointTypes.Vector4);\n        this.registerInput(\"world2\", NodeMaterialBlockConnectionPointTypes.Vector4);\n        this.registerInput(\"world3\", NodeMaterialBlockConnectionPointTypes.Vector4);\n        this.registerInput(\"world\", NodeMaterialBlockConnectionPointTypes.Matrix, true);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Matrix);\n        this.registerOutput(\"instanceID\", NodeMaterialBlockConnectionPointTypes.Float);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"InstancesBlock\";\n    }\n    /**\n     * Gets the first world row input component\n     */\n    get world0() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the second world row input component\n     */\n    get world1() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the third world row input component\n     */\n    get world2() {\n        return this._inputs[2];\n    }\n    /**\n     * Gets the forth world row input component\n     */\n    get world3() {\n        return this._inputs[3];\n    }\n    /**\n     * Gets the world input component\n     */\n    get world() {\n        return this._inputs[4];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    /**\n     * Gets the instanceID component\n     */\n    get instanceID() {\n        return this._outputs[1];\n    }\n    autoConfigure(material) {\n        if (!this.world0.connectedPoint) {\n            let world0Input = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"world0\");\n            if (!world0Input) {\n                world0Input = new InputBlock(\"world0\");\n                world0Input.setAsAttribute(\"world0\");\n            }\n            world0Input.output.connectTo(this.world0);\n        }\n        if (!this.world1.connectedPoint) {\n            let world1Input = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"world1\");\n            if (!world1Input) {\n                world1Input = new InputBlock(\"world1\");\n                world1Input.setAsAttribute(\"world1\");\n            }\n            world1Input.output.connectTo(this.world1);\n        }\n        if (!this.world2.connectedPoint) {\n            let world2Input = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"world2\");\n            if (!world2Input) {\n                world2Input = new InputBlock(\"world2\");\n                world2Input.setAsAttribute(\"world2\");\n            }\n            world2Input.output.connectTo(this.world2);\n        }\n        if (!this.world3.connectedPoint) {\n            let world3Input = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"world3\");\n            if (!world3Input) {\n                world3Input = new InputBlock(\"world3\");\n                world3Input.setAsAttribute(\"world3\");\n            }\n            world3Input.output.connectTo(this.world3);\n        }\n        if (!this.world.connectedPoint) {\n            let worldInput = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"world\");\n            if (!worldInput) {\n                worldInput = new InputBlock(\"world\");\n                worldInput.setAsSystemValue(NodeMaterialSystemValues.World);\n            }\n            worldInput.output.connectTo(this.world);\n        }\n        this.world.define = \"!INSTANCES || THIN_INSTANCES\";\n    }\n    prepareDefines(mesh, nodeMaterial, defines, useInstances = false, subMesh) {\n        let changed = false;\n        if (defines[\"INSTANCES\"] !== useInstances) {\n            defines.setValue(\"INSTANCES\", useInstances);\n            changed = true;\n        }\n        if (subMesh && defines[\"THIN_INSTANCES\"] !== !!(subMesh === null || subMesh === void 0 ? void 0 : subMesh.getRenderingMesh().hasThinInstances)) {\n            defines.setValue(\"THIN_INSTANCES\", !!(subMesh === null || subMesh === void 0 ? void 0 : subMesh.getRenderingMesh().hasThinInstances));\n            changed = true;\n        }\n        if (changed) {\n            defines.markAsUnprocessed();\n        }\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const engine = state.sharedData.scene.getEngine();\n        // Register for defines\n        state.sharedData.blocksWithDefines.push(this);\n        // Emit code\n        const output = this._outputs[0];\n        const instanceID = this._outputs[1];\n        const world0 = this.world0;\n        const world1 = this.world1;\n        const world2 = this.world2;\n        const world3 = this.world3;\n        state.compilationString += `#ifdef INSTANCES\\r\\n`;\n        state.compilationString +=\n            this._declareOutput(output, state) +\n                ` = mat4(${world0.associatedVariableName}, ${world1.associatedVariableName}, ${world2.associatedVariableName}, ${world3.associatedVariableName});\\r\\n`;\n        state.compilationString += `#ifdef THIN_INSTANCES\\r\\n`;\n        state.compilationString += `${output.associatedVariableName} = ${this.world.associatedVariableName} * ${output.associatedVariableName};\\r\\n`;\n        state.compilationString += `#endif\\r\\n`;\n        if (engine._caps.canUseGLInstanceID) {\n            state.compilationString += this._declareOutput(instanceID, state) + ` = float(gl_InstanceID);\\r\\n`;\n        }\n        else {\n            state.compilationString += this._declareOutput(instanceID, state) + ` = 0.0;\\r\\n`;\n        }\n        state.compilationString += `#else\\r\\n`;\n        state.compilationString += this._declareOutput(output, state) + ` = ${this.world.associatedVariableName};\\r\\n`;\n        state.compilationString += this._declareOutput(instanceID, state) + ` = 0.0;\\r\\n`;\n        state.compilationString += `#endif\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.InstancesBlock\", InstancesBlock);\n//# sourceMappingURL=instancesBlock.js.map","import { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { MaterialHelper } from \"../../../materialHelper.js\";\nimport { VertexBuffer } from \"../../../../Buffers/buffer.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport \"../../../../Shaders/ShadersInclude/morphTargetsVertexDeclaration.js\";\nimport \"../../../../Shaders/ShadersInclude/morphTargetsVertexGlobalDeclaration.js\";\n/**\n * Block used to add morph targets support to vertex shader\n */\nexport class MorphTargetsBlock extends NodeMaterialBlock {\n    /**\n     * Create a new MorphTargetsBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Vertex);\n        this.registerInput(\"position\", NodeMaterialBlockConnectionPointTypes.Vector3);\n        this.registerInput(\"normal\", NodeMaterialBlockConnectionPointTypes.Vector3);\n        this.registerInput(\"tangent\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.tangent.addExcludedConnectionPointFromAllowedTypes(NodeMaterialBlockConnectionPointTypes.Color4 | NodeMaterialBlockConnectionPointTypes.Vector4 | NodeMaterialBlockConnectionPointTypes.Vector3);\n        this.registerInput(\"uv\", NodeMaterialBlockConnectionPointTypes.Vector2);\n        this.registerOutput(\"positionOutput\", NodeMaterialBlockConnectionPointTypes.Vector3);\n        this.registerOutput(\"normalOutput\", NodeMaterialBlockConnectionPointTypes.Vector3);\n        this.registerOutput(\"tangentOutput\", NodeMaterialBlockConnectionPointTypes.Vector4);\n        this.registerOutput(\"uvOutput\", NodeMaterialBlockConnectionPointTypes.Vector2);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"MorphTargetsBlock\";\n    }\n    /**\n     * Gets the position input component\n     */\n    get position() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the normal input component\n     */\n    get normal() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the tangent input component\n     */\n    get tangent() {\n        return this._inputs[2];\n    }\n    /**\n     * Gets the tangent input component\n     */\n    get uv() {\n        return this._inputs[3];\n    }\n    /**\n     * Gets the position output component\n     */\n    get positionOutput() {\n        return this._outputs[0];\n    }\n    /**\n     * Gets the normal output component\n     */\n    get normalOutput() {\n        return this._outputs[1];\n    }\n    /**\n     * Gets the tangent output component\n     */\n    get tangentOutput() {\n        return this._outputs[2];\n    }\n    /**\n     * Gets the tangent output component\n     */\n    get uvOutput() {\n        return this._outputs[3];\n    }\n    initialize(state) {\n        state._excludeVariableName(\"morphTargetInfluences\");\n    }\n    autoConfigure(material) {\n        if (!this.position.isConnected) {\n            let positionInput = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"position\");\n            if (!positionInput) {\n                positionInput = new InputBlock(\"position\");\n                positionInput.setAsAttribute();\n            }\n            positionInput.output.connectTo(this.position);\n        }\n        if (!this.normal.isConnected) {\n            let normalInput = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"normal\");\n            if (!normalInput) {\n                normalInput = new InputBlock(\"normal\");\n                normalInput.setAsAttribute(\"normal\");\n            }\n            normalInput.output.connectTo(this.normal);\n        }\n        if (!this.tangent.isConnected) {\n            let tangentInput = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"tangent\");\n            if (!tangentInput) {\n                tangentInput = new InputBlock(\"tangent\");\n                tangentInput.setAsAttribute(\"tangent\");\n            }\n            tangentInput.output.connectTo(this.tangent);\n        }\n        if (!this.uv.isConnected) {\n            let uvInput = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"uv\");\n            if (!uvInput) {\n                uvInput = new InputBlock(\"uv\");\n                uvInput.setAsAttribute(\"uv\");\n            }\n            uvInput.output.connectTo(this.uv);\n        }\n    }\n    prepareDefines(mesh, nodeMaterial, defines) {\n        if (mesh.morphTargetManager) {\n            const morphTargetManager = mesh.morphTargetManager;\n            if ((morphTargetManager === null || morphTargetManager === void 0 ? void 0 : morphTargetManager.isUsingTextureForTargets) && morphTargetManager.numInfluencers !== defines[\"NUM_MORPH_INFLUENCERS\"]) {\n                defines.markAsAttributesDirty();\n            }\n        }\n        if (!defines._areAttributesDirty) {\n            return;\n        }\n        MaterialHelper.PrepareDefinesForMorphTargets(mesh, defines);\n    }\n    bind(effect, nodeMaterial, mesh) {\n        if (mesh && mesh.morphTargetManager && mesh.morphTargetManager.numInfluencers > 0) {\n            MaterialHelper.BindMorphTargetParameters(mesh, effect);\n            if (mesh.morphTargetManager.isUsingTextureForTargets) {\n                mesh.morphTargetManager._bind(effect);\n            }\n        }\n    }\n    replaceRepeatableContent(vertexShaderState, fragmentShaderState, mesh, defines) {\n        const position = this.position;\n        const normal = this.normal;\n        const tangent = this.tangent;\n        const uv = this.uv;\n        const positionOutput = this.positionOutput;\n        const normalOutput = this.normalOutput;\n        const tangentOutput = this.tangentOutput;\n        const uvOutput = this.uvOutput;\n        const state = vertexShaderState;\n        const repeatCount = defines.NUM_MORPH_INFLUENCERS;\n        const manager = mesh.morphTargetManager;\n        const hasNormals = manager && manager.supportsNormals && defines[\"NORMAL\"];\n        const hasTangents = manager && manager.supportsTangents && defines[\"TANGENT\"];\n        const hasUVs = manager && manager.supportsUVs && defines[\"UV1\"];\n        let injectionCode = \"\";\n        if ((manager === null || manager === void 0 ? void 0 : manager.isUsingTextureForTargets) && repeatCount > 0) {\n            injectionCode += `float vertexID;\\r\\n`;\n        }\n        for (let index = 0; index < repeatCount; index++) {\n            injectionCode += `#ifdef MORPHTARGETS\\r\\n`;\n            if (manager === null || manager === void 0 ? void 0 : manager.isUsingTextureForTargets) {\n                injectionCode += `vertexID = float(gl_VertexID) * morphTargetTextureInfo.x;\\r\\n`;\n                injectionCode += `${positionOutput.associatedVariableName} += (readVector3FromRawSampler(${index}, vertexID) - ${position.associatedVariableName}) * morphTargetInfluences[${index}];\\r\\n`;\n                injectionCode += `vertexID += 1.0;\\r\\n`;\n            }\n            else {\n                injectionCode += `${positionOutput.associatedVariableName} += (position${index} - ${position.associatedVariableName}) * morphTargetInfluences[${index}];\\r\\n`;\n            }\n            if (hasNormals) {\n                injectionCode += `#ifdef MORPHTARGETS_NORMAL\\r\\n`;\n                if (manager === null || manager === void 0 ? void 0 : manager.isUsingTextureForTargets) {\n                    injectionCode += `${normalOutput.associatedVariableName} += (readVector3FromRawSampler(${index}, vertexID) - ${normal.associatedVariableName}) * morphTargetInfluences[${index}];\\r\\n`;\n                    injectionCode += `vertexID += 1.0;\\r\\n`;\n                }\n                else {\n                    injectionCode += `${normalOutput.associatedVariableName} += (normal${index} - ${normal.associatedVariableName}) * morphTargetInfluences[${index}];\\r\\n`;\n                }\n                injectionCode += `#endif\\r\\n`;\n            }\n            if (hasUVs) {\n                injectionCode += `#ifdef MORPHTARGETS_UV\\r\\n`;\n                if (manager === null || manager === void 0 ? void 0 : manager.isUsingTextureForTargets) {\n                    injectionCode += `${uvOutput.associatedVariableName} += (readVector3FromRawSampler(${index}, vertexID).xy - ${uv.associatedVariableName}) * morphTargetInfluences[${index}];\\r\\n`;\n                    injectionCode += `vertexID += 1.0;\\r\\n`;\n                }\n                else {\n                    injectionCode += `${uvOutput.associatedVariableName}.xy += (uv_${index} - ${uv.associatedVariableName}.xy) * morphTargetInfluences[${index}];\\r\\n`;\n                }\n                injectionCode += `#endif\\r\\n`;\n            }\n            if (hasTangents) {\n                injectionCode += `#ifdef MORPHTARGETS_TANGENT\\r\\n`;\n                if (manager === null || manager === void 0 ? void 0 : manager.isUsingTextureForTargets) {\n                    injectionCode += `${tangentOutput.associatedVariableName}.xyz += (readVector3FromRawSampler(${index}, vertexID) - ${tangent.associatedVariableName}.xyz) * morphTargetInfluences[${index}];\\r\\n`;\n                }\n                else {\n                    injectionCode += `${tangentOutput.associatedVariableName}.xyz += (tangent${index} - ${tangent.associatedVariableName}.xyz) * morphTargetInfluences[${index}];\\r\\n`;\n                }\n                if (tangent.type === NodeMaterialBlockConnectionPointTypes.Vector4) {\n                    injectionCode += `${tangentOutput.associatedVariableName}.w = ${tangent.associatedVariableName}.w;\\r\\n`;\n                }\n                else {\n                    injectionCode += `${tangentOutput.associatedVariableName}.w = 1.;\\r\\n`;\n                }\n                injectionCode += `#endif\\r\\n`;\n            }\n            injectionCode += `#endif\\r\\n`;\n        }\n        state.compilationString = state.compilationString.replace(this._repeatableContentAnchor, injectionCode);\n        if (repeatCount > 0) {\n            for (let index = 0; index < repeatCount; index++) {\n                state.attributes.push(VertexBuffer.PositionKind + index);\n                if (hasNormals) {\n                    state.attributes.push(VertexBuffer.NormalKind + index);\n                }\n                if (hasTangents) {\n                    state.attributes.push(VertexBuffer.TangentKind + index);\n                }\n                if (hasUVs) {\n                    state.attributes.push(VertexBuffer.UVKind + \"_\" + index);\n                }\n            }\n        }\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        // Register for defines\n        state.sharedData.blocksWithDefines.push(this);\n        // Register for binding\n        state.sharedData.bindableBlocks.push(this);\n        // Register for repeatable content generation\n        state.sharedData.repeatableContentBlocks.push(this);\n        // Emit code\n        const position = this.position;\n        const normal = this.normal;\n        const tangent = this.tangent;\n        const uv = this.uv;\n        const positionOutput = this.positionOutput;\n        const normalOutput = this.normalOutput;\n        const tangentOutput = this.tangentOutput;\n        const uvOutput = this.uvOutput;\n        const comments = `//${this.name}`;\n        state.uniforms.push(\"morphTargetInfluences\");\n        state.uniforms.push(\"morphTargetTextureInfo\");\n        state.uniforms.push(\"morphTargetTextureIndices\");\n        state.samplers.push(\"morphTargets\");\n        state._emitFunctionFromInclude(\"morphTargetsVertexGlobalDeclaration\", comments);\n        state._emitFunctionFromInclude(\"morphTargetsVertexDeclaration\", comments, {\n            repeatKey: \"maxSimultaneousMorphTargets\",\n        });\n        state.compilationString += `${this._declareOutput(positionOutput, state)} = ${position.associatedVariableName};\\r\\n`;\n        state.compilationString += `#ifdef NORMAL\\r\\n`;\n        state.compilationString += `${this._declareOutput(normalOutput, state)} = ${normal.associatedVariableName};\\r\\n`;\n        state.compilationString += `#else\\r\\n`;\n        state.compilationString += `${this._declareOutput(normalOutput, state)} = vec3(0., 0., 0.);\\r\\n`;\n        state.compilationString += `#endif\\r\\n`;\n        state.compilationString += `#ifdef TANGENT\\r\\n`;\n        state.compilationString += `${this._declareOutput(tangentOutput, state)} = ${tangent.associatedVariableName};\\r\\n`;\n        state.compilationString += `#else\\r\\n`;\n        state.compilationString += `${this._declareOutput(tangentOutput, state)} = vec4(0., 0., 0., 0.);\\r\\n`;\n        state.compilationString += `#endif\\r\\n`;\n        state.compilationString += `#ifdef UV1\\r\\n`;\n        state.compilationString += `${this._declareOutput(uvOutput, state)} = ${uv.associatedVariableName};\\r\\n`;\n        state.compilationString += `#else\\r\\n`;\n        state.compilationString += `${this._declareOutput(uvOutput, state)} = vec2(0., 0.);\\r\\n`;\n        state.compilationString += `#endif\\r\\n`;\n        // Repeatable content\n        this._repeatableContentAnchor = state._repeatableContentAnchor;\n        state.compilationString += this._repeatableContentAnchor;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.MorphTargetsBlock\", MorphTargetsBlock);\n//# sourceMappingURL=morphTargetsBlock.js.map","import { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { PointLight } from \"../../../../Lights/pointLight.js\";\n/**\n * Block used to get data information from a light\n */\nexport class LightInformationBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new LightInformationBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Vertex);\n        this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Vertex);\n        this.registerOutput(\"direction\", NodeMaterialBlockConnectionPointTypes.Vector3);\n        this.registerOutput(\"color\", NodeMaterialBlockConnectionPointTypes.Color3);\n        this.registerOutput(\"intensity\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerOutput(\"shadowBias\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerOutput(\"shadowNormalBias\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerOutput(\"shadowDepthScale\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerOutput(\"shadowDepthRange\", NodeMaterialBlockConnectionPointTypes.Vector2);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"LightInformationBlock\";\n    }\n    /**\n     * Gets the world position input component\n     */\n    get worldPosition() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the direction output component\n     */\n    get direction() {\n        return this._outputs[0];\n    }\n    /**\n     * Gets the direction output component\n     */\n    get color() {\n        return this._outputs[1];\n    }\n    /**\n     * Gets the direction output component\n     */\n    get intensity() {\n        return this._outputs[2];\n    }\n    /**\n     * Gets the shadow bias output component\n     */\n    get shadowBias() {\n        return this._outputs[3];\n    }\n    /**\n     * Gets the shadow normal bias output component\n     */\n    get shadowNormalBias() {\n        return this._outputs[4];\n    }\n    /**\n     * Gets the shadow depth scale component\n     */\n    get shadowDepthScale() {\n        return this._outputs[5];\n    }\n    /**\n     * Gets the shadow depth range component\n     */\n    get shadowDepthRange() {\n        return this._outputs[6];\n    }\n    bind(effect, nodeMaterial, mesh) {\n        if (!mesh) {\n            return;\n        }\n        if (this.light && this.light.isDisposed()) {\n            this.light = null;\n        }\n        let light = this.light;\n        const scene = nodeMaterial.getScene();\n        if (!light && scene.lights.length) {\n            light = this.light = scene.lights[0];\n            this._forcePrepareDefines = true;\n        }\n        if (!light || !light.isEnabled) {\n            effect.setFloat3(this._lightDataUniformName, 0, 0, 0);\n            effect.setFloat4(this._lightColorUniformName, 0, 0, 0, 0);\n            return;\n        }\n        light.transferToNodeMaterialEffect(effect, this._lightDataUniformName);\n        effect.setColor4(this._lightColorUniformName, light.diffuse, light.intensity);\n        const generator = light.getShadowGenerator();\n        if (this.shadowBias.hasEndpoints || this.shadowNormalBias.hasEndpoints || this.shadowDepthScale.hasEndpoints) {\n            if (generator) {\n                effect.setFloat3(this._lightShadowUniformName, generator.bias, generator.normalBias, generator.depthScale);\n            }\n            else {\n                effect.setFloat3(this._lightShadowUniformName, 0, 0, 0);\n            }\n        }\n        if (this.shadowDepthRange) {\n            if (generator && scene.activeCamera) {\n                const shadowLight = light;\n                effect.setFloat2(this._lightShadowExtraUniformName, shadowLight.getDepthMinZ(scene.activeCamera), shadowLight.getDepthMinZ(scene.activeCamera) + shadowLight.getDepthMaxZ(scene.activeCamera));\n            }\n            else {\n                effect.setFloat2(this._lightShadowExtraUniformName, 0, 0);\n            }\n        }\n    }\n    prepareDefines(mesh, nodeMaterial, defines) {\n        if (!defines._areLightsDirty && !this._forcePrepareDefines) {\n            return;\n        }\n        this._forcePrepareDefines = false;\n        const light = this.light;\n        defines.setValue(this._lightTypeDefineName, light && light instanceof PointLight ? true : false, true);\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        state.sharedData.bindableBlocks.push(this);\n        state.sharedData.blocksWithDefines.push(this);\n        const direction = this.direction;\n        const color = this.color;\n        const intensity = this.intensity;\n        const shadowBias = this.shadowBias;\n        const shadowNormalBias = this.shadowNormalBias;\n        const shadowDepthScale = this.shadowDepthScale;\n        const shadowDepthRange = this.shadowDepthRange;\n        this._lightDataUniformName = state._getFreeVariableName(\"lightData\");\n        this._lightColorUniformName = state._getFreeVariableName(\"lightColor\");\n        this._lightShadowUniformName = state._getFreeVariableName(\"shadowData\");\n        this._lightShadowExtraUniformName = state._getFreeVariableName(\"shadowExtraData\");\n        this._lightTypeDefineName = state._getFreeDefineName(\"LIGHTPOINTTYPE\");\n        state._emitUniformFromString(this._lightDataUniformName, \"vec3\");\n        state._emitUniformFromString(this._lightColorUniformName, \"vec4\");\n        state.compilationString += `#ifdef ${this._lightTypeDefineName}\\r\\n`;\n        state.compilationString += this._declareOutput(direction, state) + ` = normalize(${this.worldPosition.associatedVariableName}.xyz - ${this._lightDataUniformName});\\r\\n`;\n        state.compilationString += `#else\\r\\n`;\n        state.compilationString += this._declareOutput(direction, state) + ` = ${this._lightDataUniformName};\\r\\n`;\n        state.compilationString += `#endif\\r\\n`;\n        state.compilationString += this._declareOutput(color, state) + ` = ${this._lightColorUniformName}.rgb;\\r\\n`;\n        state.compilationString += this._declareOutput(intensity, state) + ` = ${this._lightColorUniformName}.a;\\r\\n`;\n        if (shadowBias.hasEndpoints || shadowNormalBias.hasEndpoints || shadowDepthScale.hasEndpoints) {\n            state._emitUniformFromString(this._lightShadowUniformName, \"vec3\");\n            if (shadowBias.hasEndpoints) {\n                state.compilationString += this._declareOutput(shadowBias, state) + ` = ${this._lightShadowUniformName}.x;\\r\\n`;\n            }\n            if (shadowNormalBias.hasEndpoints) {\n                state.compilationString += this._declareOutput(shadowNormalBias, state) + ` = ${this._lightShadowUniformName}.y;\\r\\n`;\n            }\n            if (shadowDepthScale.hasEndpoints) {\n                state.compilationString += this._declareOutput(shadowDepthScale, state) + ` = ${this._lightShadowUniformName}.z;\\r\\n`;\n            }\n        }\n        if (shadowDepthRange.hasEndpoints) {\n            state._emitUniformFromString(this._lightShadowExtraUniformName, \"vec2\");\n            state.compilationString += this._declareOutput(shadowDepthRange, state) + ` = ${this._lightShadowUniformName};\\r\\n`;\n        }\n        return this;\n    }\n    serialize() {\n        const serializationObject = super.serialize();\n        if (this.light) {\n            serializationObject.lightId = this.light.id;\n        }\n        return serializationObject;\n    }\n    _deserialize(serializationObject, scene, rootUrl) {\n        super._deserialize(serializationObject, scene, rootUrl);\n        if (serializationObject.lightId) {\n            this.light = scene.getLightById(serializationObject.lightId);\n        }\n    }\n}\nRegisterClass(\"BABYLON.LightInformationBlock\", LightInformationBlock);\n//# sourceMappingURL=lightInformationBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to add 2 vectors\n */\nexport class AddBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new AddBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"left\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"right\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\n        this._linkConnectionTypes(0, 1);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"AddBlock\";\n    }\n    /**\n     * Gets the left operand input component\n     */\n    get left() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the right operand input component\n     */\n    get right() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        state.compilationString += this._declareOutput(output, state) + ` = ${this.left.associatedVariableName} + ${this.right.associatedVariableName};\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.AddBlock\", AddBlock);\n//# sourceMappingURL=addBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to scale a vector by a float\n */\nexport class ScaleBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new ScaleBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"factor\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"ScaleBlock\";\n    }\n    /**\n     * Gets the input component\n     */\n    get input() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the factor input component\n     */\n    get factor() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        state.compilationString += this._declareOutput(output, state) + ` = ${this.input.associatedVariableName} * ${this.factor.associatedVariableName};\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.ScaleBlock\", ScaleBlock);\n//# sourceMappingURL=scaleBlock.js.map","import { __decorate } from \"../../../tslib.es6.js\";\nimport { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../nodeMaterialDecorator.js\";\n/**\n * Block used to clamp a float\n */\nexport class ClampBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new ClampBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        /** Gets or sets the minimum range */\n        this.minimum = 0.0;\n        /** Gets or sets the maximum range */\n        this.maximum = 1.0;\n        this.registerInput(\"value\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"ClampBlock\";\n    }\n    /**\n     * Gets the value input component\n     */\n    get value() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        state.compilationString +=\n            this._declareOutput(output, state) + ` = clamp(${this.value.associatedVariableName}, ${this._writeFloat(this.minimum)}, ${this._writeFloat(this.maximum)});\\r\\n`;\n        return this;\n    }\n    _dumpPropertiesCode() {\n        let codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.minimum = ${this.minimum};\\r\\n`;\n        codeString += `${this._codeVariableName}.maximum = ${this.maximum};\\r\\n`;\n        return codeString;\n    }\n    serialize() {\n        const serializationObject = super.serialize();\n        serializationObject.minimum = this.minimum;\n        serializationObject.maximum = this.maximum;\n        return serializationObject;\n    }\n    _deserialize(serializationObject, scene, rootUrl) {\n        super._deserialize(serializationObject, scene, rootUrl);\n        this.minimum = serializationObject.minimum;\n        this.maximum = serializationObject.maximum;\n    }\n}\n__decorate([\n    editableInPropertyPage(\"Minimum\", PropertyTypeForEdition.Float)\n], ClampBlock.prototype, \"minimum\", void 0);\n__decorate([\n    editableInPropertyPage(\"Maximum\", PropertyTypeForEdition.Float)\n], ClampBlock.prototype, \"maximum\", void 0);\nRegisterClass(\"BABYLON.ClampBlock\", ClampBlock);\n//# sourceMappingURL=clampBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to apply a cross product between 2 vectors\n */\nexport class CrossBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new CrossBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"left\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"right\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector3);\n        this._linkConnectionTypes(0, 1);\n        this._inputs[0].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Float);\n        this._inputs[0].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Matrix);\n        this._inputs[0].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Vector2);\n        this._inputs[1].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Float);\n        this._inputs[1].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Matrix);\n        this._inputs[1].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Vector2);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"CrossBlock\";\n    }\n    /**\n     * Gets the left operand input component\n     */\n    get left() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the right operand input component\n     */\n    get right() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        state.compilationString += this._declareOutput(output, state) + ` = cross(${this.left.associatedVariableName}.xyz, ${this.right.associatedVariableName}.xyz);\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.CrossBlock\", CrossBlock);\n//# sourceMappingURL=crossBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Custom block created from user-defined json\n */\nexport class CustomBlock extends NodeMaterialBlock {\n    /**\n     * Gets or sets the options for this custom block\n     */\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this._deserializeOptions(options);\n    }\n    /**\n     * Creates a new CustomBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"CustomBlock\";\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        let code = this._code;\n        let functionName = this._options.functionName;\n        // Replace the TYPE_XXX placeholders (if any)\n        this._inputs.forEach((input) => {\n            const rexp = new RegExp(\"\\\\{TYPE_\" + input.name + \"\\\\}\", \"gm\");\n            const type = state._getGLType(input.type);\n            code = code.replace(rexp, type);\n            functionName = functionName.replace(rexp, type);\n        });\n        this._outputs.forEach((output) => {\n            const rexp = new RegExp(\"\\\\{TYPE_\" + output.name + \"\\\\}\", \"gm\");\n            const type = state._getGLType(output.type);\n            code = code.replace(rexp, type);\n            functionName = functionName.replace(rexp, type);\n        });\n        state._emitFunction(functionName, code, \"\");\n        // Declare the output variables\n        this._outputs.forEach((output) => {\n            state.compilationString += this._declareOutput(output, state) + \";\\r\\n\";\n        });\n        // Generate the function call\n        state.compilationString += functionName + \"(\";\n        let hasInput = false;\n        this._inputs.forEach((input, index) => {\n            if (index > 0) {\n                state.compilationString += \", \";\n            }\n            state.compilationString += input.associatedVariableName;\n            hasInput = true;\n        });\n        this._outputs.forEach((output, index) => {\n            if (index > 0 || hasInput) {\n                state.compilationString += \", \";\n            }\n            state.compilationString += output.associatedVariableName;\n        });\n        state.compilationString += \");\\r\\n\";\n        return this;\n    }\n    _dumpPropertiesCode() {\n        let codeString = super._dumpPropertiesCode();\n        codeString += `${this._codeVariableName}.options = ${JSON.stringify(this._options)};\\r\\n`;\n        return codeString;\n    }\n    serialize() {\n        const serializationObject = super.serialize();\n        serializationObject.options = this._options;\n        return serializationObject;\n    }\n    _deserialize(serializationObject, scene, rootUrl) {\n        this._deserializeOptions(serializationObject.options);\n        super._deserialize(serializationObject, scene, rootUrl);\n    }\n    _deserializeOptions(options) {\n        var _a, _b, _c;\n        this._options = options;\n        this._code = options.code.join(\"\\r\\n\") + \"\\r\\n\";\n        this.name = this.name || options.name;\n        this.target = NodeMaterialBlockTargets[options.target];\n        (_a = options.inParameters) === null || _a === void 0 ? void 0 : _a.forEach((input, index) => {\n            const type = NodeMaterialBlockConnectionPointTypes[input.type];\n            this.registerInput(input.name, type);\n            Object.defineProperty(this, input.name, {\n                get: function () {\n                    return this._inputs[index];\n                },\n                enumerable: true,\n                configurable: true,\n            });\n        });\n        (_b = options.outParameters) === null || _b === void 0 ? void 0 : _b.forEach((output, index) => {\n            this.registerOutput(output.name, NodeMaterialBlockConnectionPointTypes[output.type]);\n            Object.defineProperty(this, output.name, {\n                get: function () {\n                    return this._outputs[index];\n                },\n                enumerable: true,\n                configurable: true,\n            });\n            if (output.type === \"BasedOnInput\") {\n                this._outputs[index]._typeConnectionSource = this._findInputByName(output.typeFromInput)[0];\n            }\n        });\n        (_c = options.inLinkedConnectionTypes) === null || _c === void 0 ? void 0 : _c.forEach((connection) => {\n            this._linkConnectionTypes(this._findInputByName(connection.input1)[1], this._findInputByName(connection.input2)[1]);\n        });\n    }\n    _findInputByName(name) {\n        if (!name) {\n            return null;\n        }\n        for (let i = 0; i < this._inputs.length; i++) {\n            if (this._inputs[i].name === name) {\n                return [this._inputs[i], i];\n            }\n        }\n        return null;\n    }\n}\nRegisterClass(\"BABYLON.CustomBlock\", CustomBlock);\n//# sourceMappingURL=customBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to apply a dot product between 2 vectors\n */\nexport class DotBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new DotBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"left\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"right\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Float);\n        this._linkConnectionTypes(0, 1);\n        this._inputs[0].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Float);\n        this._inputs[0].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Matrix);\n        this._inputs[1].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Float);\n        this._inputs[1].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Matrix);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"DotBlock\";\n    }\n    /**\n     * Gets the left operand input component\n     */\n    get left() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the right operand input component\n     */\n    get right() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        state.compilationString += this._declareOutput(output, state) + ` = dot(${this.left.associatedVariableName}, ${this.right.associatedVariableName});\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.DotBlock\", DotBlock);\n//# sourceMappingURL=dotBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to normalize a vector\n */\nexport class NormalizeBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new NormalizeBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\n        this._inputs[0].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Float);\n        this._inputs[0].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Matrix);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"NormalizeBlock\";\n    }\n    /**\n     * Gets the input component\n     */\n    get input() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        const input = this._inputs[0];\n        state.compilationString += this._declareOutput(output, state) + ` = normalize(${input.associatedVariableName});\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.NormalizeBlock\", NormalizeBlock);\n//# sourceMappingURL=normalizeBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to create a Color3/4 out of individual inputs (one for each component)\n */\nexport class ColorMergerBlock extends NodeMaterialBlock {\n    /**\n     * Create a new ColorMergerBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        /**\n         * Gets or sets the swizzle for r (meaning which component to affect to the output.r)\n         */\n        this.rSwizzle = \"r\";\n        /**\n         * Gets or sets the swizzle for g (meaning which component to affect to the output.g)\n         */\n        this.gSwizzle = \"g\";\n        /**\n         * Gets or sets the swizzle for b (meaning which component to affect to the output.b)\n         */\n        this.bSwizzle = \"b\";\n        /**\n         * Gets or sets the swizzle for a (meaning which component to affect to the output.a)\n         */\n        this.aSwizzle = \"a\";\n        this.registerInput(\"rgb \", NodeMaterialBlockConnectionPointTypes.Color3, true);\n        this.registerInput(\"r\", NodeMaterialBlockConnectionPointTypes.Float, true);\n        this.registerInput(\"g\", NodeMaterialBlockConnectionPointTypes.Float, true);\n        this.registerInput(\"b\", NodeMaterialBlockConnectionPointTypes.Float, true);\n        this.registerInput(\"a\", NodeMaterialBlockConnectionPointTypes.Float, true);\n        this.registerOutput(\"rgba\", NodeMaterialBlockConnectionPointTypes.Color4);\n        this.registerOutput(\"rgb\", NodeMaterialBlockConnectionPointTypes.Color3);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"ColorMergerBlock\";\n    }\n    /**\n     * Gets the rgb component (input)\n     */\n    get rgbIn() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the r component (input)\n     */\n    get r() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the g component (input)\n     */\n    get g() {\n        return this._inputs[2];\n    }\n    /**\n     * Gets the b component (input)\n     */\n    get b() {\n        return this._inputs[3];\n    }\n    /**\n     * Gets the a component (input)\n     */\n    get a() {\n        return this._inputs[4];\n    }\n    /**\n     * Gets the rgba component (output)\n     */\n    get rgba() {\n        return this._outputs[0];\n    }\n    /**\n     * Gets the rgb component (output)\n     */\n    get rgbOut() {\n        return this._outputs[1];\n    }\n    /**\n     * Gets the rgb component (output)\n     * @deprecated Please use rgbOut instead.\n     */\n    get rgb() {\n        return this.rgbOut;\n    }\n    _inputRename(name) {\n        if (name === \"rgb \") {\n            return \"rgbIn\";\n        }\n        return name;\n    }\n    _buildSwizzle(len) {\n        const swizzle = this.rSwizzle + this.gSwizzle + this.bSwizzle + this.aSwizzle;\n        return \".\" + swizzle.substr(0, len);\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const rInput = this.r;\n        const gInput = this.g;\n        const bInput = this.b;\n        const aInput = this.a;\n        const rgbInput = this.rgbIn;\n        const color4Output = this._outputs[0];\n        const color3Output = this._outputs[1];\n        if (rgbInput.isConnected) {\n            if (color4Output.hasEndpoints) {\n                state.compilationString +=\n                    this._declareOutput(color4Output, state) +\n                        ` = vec4(${rgbInput.associatedVariableName}, ${aInput.isConnected ? this._writeVariable(aInput) : \"0.0\"})${this._buildSwizzle(4)};\\r\\n`;\n            }\n            if (color3Output.hasEndpoints) {\n                state.compilationString += this._declareOutput(color3Output, state) + ` = ${rgbInput.associatedVariableName}${this._buildSwizzle(3)};\\r\\n`;\n            }\n        }\n        else {\n            if (color4Output.hasEndpoints) {\n                state.compilationString +=\n                    this._declareOutput(color4Output, state) +\n                        ` = vec4(${rInput.isConnected ? this._writeVariable(rInput) : \"0.0\"}, ${gInput.isConnected ? this._writeVariable(gInput) : \"0.0\"}, ${bInput.isConnected ? this._writeVariable(bInput) : \"0.0\"}, ${aInput.isConnected ? this._writeVariable(aInput) : \"0.0\"})${this._buildSwizzle(4)};\\r\\n`;\n            }\n            if (color3Output.hasEndpoints) {\n                state.compilationString +=\n                    this._declareOutput(color3Output, state) +\n                        ` = vec3(${rInput.isConnected ? this._writeVariable(rInput) : \"0.0\"}, ${gInput.isConnected ? this._writeVariable(gInput) : \"0.0\"}, ${bInput.isConnected ? this._writeVariable(bInput) : \"0.0\"})${this._buildSwizzle(3)};\\r\\n`;\n            }\n        }\n        return this;\n    }\n    serialize() {\n        const serializationObject = super.serialize();\n        serializationObject.rSwizzle = this.rSwizzle;\n        serializationObject.gSwizzle = this.gSwizzle;\n        serializationObject.bSwizzle = this.bSwizzle;\n        serializationObject.aSwizzle = this.aSwizzle;\n        return serializationObject;\n    }\n    _deserialize(serializationObject, scene, rootUrl) {\n        var _a, _b, _c, _d;\n        super._deserialize(serializationObject, scene, rootUrl);\n        this.rSwizzle = (_a = serializationObject.rSwizzle) !== null && _a !== void 0 ? _a : \"r\";\n        this.gSwizzle = (_b = serializationObject.gSwizzle) !== null && _b !== void 0 ? _b : \"g\";\n        this.bSwizzle = (_c = serializationObject.bSwizzle) !== null && _c !== void 0 ? _c : \"b\";\n        this.aSwizzle = (_d = serializationObject.aSwizzle) !== null && _d !== void 0 ? _d : \"a\";\n    }\n    _dumpPropertiesCode() {\n        let codeString = super._dumpPropertiesCode();\n        codeString += `${this._codeVariableName}.rSwizzle = \"${this.rSwizzle}\";\\r\\n`;\n        codeString += `${this._codeVariableName}.gSwizzle = \"${this.gSwizzle}\";\\r\\n`;\n        codeString += `${this._codeVariableName}.bSwizzle = \"${this.bSwizzle}\";\\r\\n`;\n        codeString += `${this._codeVariableName}.aSwizzle = \"${this.aSwizzle}\";\\r\\n`;\n        return codeString;\n    }\n}\nRegisterClass(\"BABYLON.ColorMergerBlock\", ColorMergerBlock);\n//# sourceMappingURL=colorMergerBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to expand a Vector3/4 into 4 outputs (one for each component)\n */\nexport class VectorSplitterBlock extends NodeMaterialBlock {\n    /**\n     * Create a new VectorSplitterBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"xyzw\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\n        this.registerInput(\"xyz \", NodeMaterialBlockConnectionPointTypes.Vector3, true);\n        this.registerInput(\"xy \", NodeMaterialBlockConnectionPointTypes.Vector2, true);\n        this.registerOutput(\"xyz\", NodeMaterialBlockConnectionPointTypes.Vector3);\n        this.registerOutput(\"xy\", NodeMaterialBlockConnectionPointTypes.Vector2);\n        this.registerOutput(\"zw\", NodeMaterialBlockConnectionPointTypes.Vector2);\n        this.registerOutput(\"x\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerOutput(\"y\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerOutput(\"z\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerOutput(\"w\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.inputsAreExclusive = true;\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"VectorSplitterBlock\";\n    }\n    /**\n     * Gets the xyzw component (input)\n     */\n    get xyzw() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the xyz component (input)\n     */\n    get xyzIn() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the xy component (input)\n     */\n    get xyIn() {\n        return this._inputs[2];\n    }\n    /**\n     * Gets the xyz component (output)\n     */\n    get xyzOut() {\n        return this._outputs[0];\n    }\n    /**\n     * Gets the xy component (output)\n     */\n    get xyOut() {\n        return this._outputs[1];\n    }\n    /**\n     * Gets the zw component (output)\n     */\n    get zw() {\n        return this._outputs[2];\n    }\n    /**\n     * Gets the x component (output)\n     */\n    get x() {\n        return this._outputs[3];\n    }\n    /**\n     * Gets the y component (output)\n     */\n    get y() {\n        return this._outputs[4];\n    }\n    /**\n     * Gets the z component (output)\n     */\n    get z() {\n        return this._outputs[5];\n    }\n    /**\n     * Gets the w component (output)\n     */\n    get w() {\n        return this._outputs[6];\n    }\n    _inputRename(name) {\n        switch (name) {\n            case \"xy \":\n                return \"xyIn\";\n            case \"xyz \":\n                return \"xyzIn\";\n            default:\n                return name;\n        }\n    }\n    _outputRename(name) {\n        switch (name) {\n            case \"xy\":\n                return \"xyOut\";\n            case \"xyz\":\n                return \"xyzOut\";\n            default:\n                return name;\n        }\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const input = this.xyzw.isConnected ? this.xyzw : this.xyzIn.isConnected ? this.xyzIn : this.xyIn;\n        const xyzOutput = this._outputs[0];\n        const xyOutput = this._outputs[1];\n        const zwOutput = this._outputs[2];\n        const xOutput = this._outputs[3];\n        const yOutput = this._outputs[4];\n        const zOutput = this._outputs[5];\n        const wOutput = this._outputs[6];\n        if (xyzOutput.hasEndpoints) {\n            if (input === this.xyIn) {\n                state.compilationString += this._declareOutput(xyzOutput, state) + ` = vec3(${input.associatedVariableName}, 0.0);\\r\\n`;\n            }\n            else {\n                state.compilationString += this._declareOutput(xyzOutput, state) + ` = ${input.associatedVariableName}.xyz;\\r\\n`;\n            }\n        }\n        if (zwOutput.hasEndpoints && this.xyzw.isConnected) {\n            state.compilationString += this._declareOutput(zwOutput, state) + ` = ${this.xyzw.associatedVariableName}.zw;\\r\\n`;\n        }\n        if (xyOutput.hasEndpoints) {\n            state.compilationString += this._declareOutput(xyOutput, state) + ` = ${input.associatedVariableName}.xy;\\r\\n`;\n        }\n        if (xOutput.hasEndpoints) {\n            state.compilationString += this._declareOutput(xOutput, state) + ` = ${input.associatedVariableName}.x;\\r\\n`;\n        }\n        if (yOutput.hasEndpoints) {\n            state.compilationString += this._declareOutput(yOutput, state) + ` = ${input.associatedVariableName}.y;\\r\\n`;\n        }\n        if (zOutput.hasEndpoints) {\n            state.compilationString += this._declareOutput(zOutput, state) + ` = ${input.associatedVariableName}.z;\\r\\n`;\n        }\n        if (wOutput.hasEndpoints) {\n            state.compilationString += this._declareOutput(wOutput, state) + ` = ${input.associatedVariableName}.w;\\r\\n`;\n        }\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.VectorSplitterBlock\", VectorSplitterBlock);\n//# sourceMappingURL=vectorSplitterBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to lerp between 2 values\n */\nexport class LerpBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new LerpBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"left\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"right\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"gradient\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\n        this._linkConnectionTypes(0, 1);\n        this._linkConnectionTypes(1, 2, true);\n        this._inputs[2].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Float);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"LerpBlock\";\n    }\n    /**\n     * Gets the left operand input component\n     */\n    get left() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the right operand input component\n     */\n    get right() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the gradient operand input component\n     */\n    get gradient() {\n        return this._inputs[2];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        state.compilationString +=\n            this._declareOutput(output, state) + ` = mix(${this.left.associatedVariableName} , ${this.right.associatedVariableName}, ${this.gradient.associatedVariableName});\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.LerpBlock\", LerpBlock);\n//# sourceMappingURL=lerpBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to divide 2 vectors\n */\nexport class DivideBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new DivideBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"left\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"right\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\n        this._linkConnectionTypes(0, 1);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"DivideBlock\";\n    }\n    /**\n     * Gets the left operand input component\n     */\n    get left() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the right operand input component\n     */\n    get right() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        state.compilationString += this._declareOutput(output, state) + ` = ${this.left.associatedVariableName} / ${this.right.associatedVariableName};\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.DivideBlock\", DivideBlock);\n//# sourceMappingURL=divideBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to subtract 2 vectors\n */\nexport class SubtractBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new SubtractBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"left\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"right\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\n        this._linkConnectionTypes(0, 1);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"SubtractBlock\";\n    }\n    /**\n     * Gets the left operand input component\n     */\n    get left() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the right operand input component\n     */\n    get right() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        state.compilationString += this._declareOutput(output, state) + ` = ${this.left.associatedVariableName} - ${this.right.associatedVariableName};\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.SubtractBlock\", SubtractBlock);\n//# sourceMappingURL=subtractBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to step a value\n */\nexport class StepBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new StepBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"value\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerInput(\"edge\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Float);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"StepBlock\";\n    }\n    /**\n     * Gets the value operand input component\n     */\n    get value() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the edge operand input component\n     */\n    get edge() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        state.compilationString += this._declareOutput(output, state) + ` = step(${this.edge.associatedVariableName}, ${this.value.associatedVariableName});\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.StepBlock\", StepBlock);\n//# sourceMappingURL=stepBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to get the opposite (1 - x) of a value\n */\nexport class OneMinusBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new OneMinusBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\n        this._outputs[0].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Matrix);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"OneMinusBlock\";\n    }\n    /**\n     * Gets the input component\n     */\n    get input() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        state.compilationString += this._declareOutput(output, state) + ` = 1. - ${this.input.associatedVariableName};\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.OneMinusBlock\", OneMinusBlock);\nRegisterClass(\"BABYLON.OppositeBlock\", OneMinusBlock); // Backward compatibility\n//# sourceMappingURL=oneMinusBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { NodeMaterialSystemValues } from \"../Enums/nodeMaterialSystemValues.js\";\nimport { InputBlock } from \"./Input/inputBlock.js\";\n/**\n * Block used to get the view direction\n */\nexport class ViewDirectionBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new ViewDirectionBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4);\n        this.registerInput(\"cameraPosition\", NodeMaterialBlockConnectionPointTypes.Vector3);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector3);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"ViewDirectionBlock\";\n    }\n    /**\n     * Gets the world position component\n     */\n    get worldPosition() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the camera position component\n     */\n    get cameraPosition() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    autoConfigure(material) {\n        if (!this.cameraPosition.isConnected) {\n            let cameraPositionInput = material.getInputBlockByPredicate((b) => b.systemValue === NodeMaterialSystemValues.CameraPosition);\n            if (!cameraPositionInput) {\n                cameraPositionInput = new InputBlock(\"cameraPosition\");\n                cameraPositionInput.setAsSystemValue(NodeMaterialSystemValues.CameraPosition);\n            }\n            cameraPositionInput.output.connectTo(this.cameraPosition);\n        }\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        state.compilationString +=\n            this._declareOutput(output, state) + ` = normalize(${this.cameraPosition.associatedVariableName} - ${this.worldPosition.associatedVariableName}.xyz);\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.ViewDirectionBlock\", ViewDirectionBlock);\n//# sourceMappingURL=viewDirectionBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { InputBlock } from \"./Input/inputBlock.js\";\nimport \"../../../Shaders/ShadersInclude/fresnelFunction.js\";\nimport { ViewDirectionBlock } from \"./viewDirectionBlock.js\";\n/**\n * Block used to compute fresnel value\n */\nexport class FresnelBlock extends NodeMaterialBlock {\n    /**\n     * Create a new FresnelBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector4);\n        this.registerInput(\"viewDirection\", NodeMaterialBlockConnectionPointTypes.Vector3);\n        this.registerInput(\"bias\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerInput(\"power\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerOutput(\"fresnel\", NodeMaterialBlockConnectionPointTypes.Float);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"FresnelBlock\";\n    }\n    /**\n     * Gets the world normal input component\n     */\n    get worldNormal() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the view direction input component\n     */\n    get viewDirection() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the bias input component\n     */\n    get bias() {\n        return this._inputs[2];\n    }\n    /**\n     * Gets the camera (or eye) position component\n     */\n    get power() {\n        return this._inputs[3];\n    }\n    /**\n     * Gets the fresnel output component\n     */\n    get fresnel() {\n        return this._outputs[0];\n    }\n    autoConfigure(material) {\n        if (!this.viewDirection.isConnected) {\n            const viewDirectionInput = new ViewDirectionBlock(\"View direction\");\n            viewDirectionInput.output.connectTo(this.viewDirection);\n            viewDirectionInput.autoConfigure(material);\n        }\n        if (!this.bias.isConnected) {\n            const biasInput = new InputBlock(\"bias\");\n            biasInput.value = 0;\n            biasInput.output.connectTo(this.bias);\n        }\n        if (!this.power.isConnected) {\n            const powerInput = new InputBlock(\"power\");\n            powerInput.value = 1;\n            powerInput.output.connectTo(this.power);\n        }\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const comments = `//${this.name}`;\n        state._emitFunctionFromInclude(\"fresnelFunction\", comments, { removeIfDef: true });\n        state.compilationString +=\n            this._declareOutput(this.fresnel, state) +\n                ` = computeFresnelTerm(${this.viewDirection.associatedVariableName}.xyz, ${this.worldNormal.associatedVariableName}.xyz, ${this.bias.associatedVariableName}, ${this.power.associatedVariableName});\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.FresnelBlock\", FresnelBlock);\n//# sourceMappingURL=fresnelBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to get the max of 2 values\n */\nexport class MaxBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new MaxBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"left\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"right\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\n        this._linkConnectionTypes(0, 1);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"MaxBlock\";\n    }\n    /**\n     * Gets the left operand input component\n     */\n    get left() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the right operand input component\n     */\n    get right() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        state.compilationString += this._declareOutput(output, state) + ` = max(${this.left.associatedVariableName}, ${this.right.associatedVariableName});\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.MaxBlock\", MaxBlock);\n//# sourceMappingURL=maxBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to get the min of 2 values\n */\nexport class MinBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new MinBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"left\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"right\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\n        this._linkConnectionTypes(0, 1);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"MinBlock\";\n    }\n    /**\n     * Gets the left operand input component\n     */\n    get left() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the right operand input component\n     */\n    get right() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        state.compilationString += this._declareOutput(output, state) + ` = min(${this.left.associatedVariableName}, ${this.right.associatedVariableName});\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.MinBlock\", MinBlock);\n//# sourceMappingURL=minBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to get the distance between 2 values\n */\nexport class DistanceBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new DistanceBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"left\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"right\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Float);\n        this._linkConnectionTypes(0, 1);\n        this._inputs[0].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Float);\n        this._inputs[0].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Matrix);\n        this._inputs[1].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Float);\n        this._inputs[1].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Matrix);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"DistanceBlock\";\n    }\n    /**\n     * Gets the left operand input component\n     */\n    get left() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the right operand input component\n     */\n    get right() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        state.compilationString += this._declareOutput(output, state) + ` = length(${this.left.associatedVariableName} - ${this.right.associatedVariableName});\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.DistanceBlock\", DistanceBlock);\n//# sourceMappingURL=distanceBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to get the length of a vector\n */\nexport class LengthBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new LengthBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"value\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Float);\n        this._inputs[0].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Float);\n        this._inputs[0].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Matrix);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"LengthBlock\";\n    }\n    /**\n     * Gets the value input component\n     */\n    get value() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        state.compilationString += this._declareOutput(output, state) + ` = length(${this.value.associatedVariableName});\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.LengthBlock\", LengthBlock);\n//# sourceMappingURL=lengthBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to get negative version of a value (i.e. x * -1)\n */\nexport class NegateBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new NegateBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"value\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"NegateBlock\";\n    }\n    /**\n     * Gets the value input component\n     */\n    get value() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        state.compilationString += this._declareOutput(output, state) + ` = -1.0 * ${this.value.associatedVariableName};\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.NegateBlock\", NegateBlock);\n//# sourceMappingURL=negateBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to get the value of the first parameter raised to the power of the second\n */\nexport class PowBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new PowBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"value\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"power\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\n        this._linkConnectionTypes(0, 1);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"PowBlock\";\n    }\n    /**\n     * Gets the value operand input component\n     */\n    get value() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the power operand input component\n     */\n    get power() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        state.compilationString += this._declareOutput(output, state) + ` = pow(${this.value.associatedVariableName}, ${this.power.associatedVariableName});\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.PowBlock\", PowBlock);\n//# sourceMappingURL=powBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Operations supported by the Wave block\n */\nexport var WaveBlockKind;\n(function (WaveBlockKind) {\n    /** SawTooth */\n    WaveBlockKind[WaveBlockKind[\"SawTooth\"] = 0] = \"SawTooth\";\n    /** Square */\n    WaveBlockKind[WaveBlockKind[\"Square\"] = 1] = \"Square\";\n    /** Triangle */\n    WaveBlockKind[WaveBlockKind[\"Triangle\"] = 2] = \"Triangle\";\n})(WaveBlockKind || (WaveBlockKind = {}));\n/**\n * Block used to apply wave operation to floats\n */\nexport class WaveBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new WaveBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        /**\n         * Gets or sets the kibnd of wave to be applied by the block\n         */\n        this.kind = WaveBlockKind.SawTooth;\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\n        this._inputs[0].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Matrix);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"WaveBlock\";\n    }\n    /**\n     * Gets the input component\n     */\n    get input() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        switch (this.kind) {\n            case WaveBlockKind.SawTooth: {\n                state.compilationString += this._declareOutput(output, state) + ` = ${this.input.associatedVariableName} - floor(0.5 + ${this.input.associatedVariableName});\\r\\n`;\n                break;\n            }\n            case WaveBlockKind.Square: {\n                state.compilationString += this._declareOutput(output, state) + ` = 1.0 - 2.0 * round(fract(${this.input.associatedVariableName}));\\r\\n`;\n                break;\n            }\n            case WaveBlockKind.Triangle: {\n                state.compilationString +=\n                    this._declareOutput(output, state) +\n                        ` = 2.0 * abs(2.0 * (${this.input.associatedVariableName} - floor(0.5 + ${this.input.associatedVariableName}))) - 1.0;\\r\\n`;\n                break;\n            }\n        }\n        return this;\n    }\n    serialize() {\n        const serializationObject = super.serialize();\n        serializationObject.kind = this.kind;\n        return serializationObject;\n    }\n    _deserialize(serializationObject, scene, rootUrl) {\n        super._deserialize(serializationObject, scene, rootUrl);\n        this.kind = serializationObject.kind;\n    }\n}\nRegisterClass(\"BABYLON.WaveBlock\", WaveBlock);\n//# sourceMappingURL=waveBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport \"../../../Shaders/ShadersInclude/helperFunctions.js\";\n/**\n * Block used to get a random number\n */\nexport class RandomNumberBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new RandomNumberBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"seed\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Float);\n        this._inputs[0].addExcludedConnectionPointFromAllowedTypes(NodeMaterialBlockConnectionPointTypes.Vector2 |\n            NodeMaterialBlockConnectionPointTypes.Vector3 |\n            NodeMaterialBlockConnectionPointTypes.Vector4 |\n            NodeMaterialBlockConnectionPointTypes.Color3 |\n            NodeMaterialBlockConnectionPointTypes.Color4);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"RandomNumberBlock\";\n    }\n    /**\n     * Gets the seed input component\n     */\n    get seed() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        const comments = `//${this.name}`;\n        state._emitFunctionFromInclude(\"helperFunctions\", comments);\n        state.compilationString += this._declareOutput(output, state) + ` = getRand(${this.seed.associatedVariableName}.xy);\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.RandomNumberBlock\", RandomNumberBlock);\n//# sourceMappingURL=randomNumberBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to compute arc tangent of 2 values\n */\nexport class ArcTan2Block extends NodeMaterialBlock {\n    /**\n     * Creates a new ArcTan2Block\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"x\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerInput(\"y\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Float);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"ArcTan2Block\";\n    }\n    /**\n     * Gets the x operand input component\n     */\n    get x() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the y operand input component\n     */\n    get y() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        state.compilationString += this._declareOutput(output, state) + ` = atan(${this.x.associatedVariableName}, ${this.y.associatedVariableName});\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.ArcTan2Block\", ArcTan2Block);\n//# sourceMappingURL=arcTan2Block.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to smooth step a value\n */\nexport class SmoothStepBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new SmoothStepBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"value\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"edge0\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerInput(\"edge1\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"SmoothStepBlock\";\n    }\n    /**\n     * Gets the value operand input component\n     */\n    get value() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the first edge operand input component\n     */\n    get edge0() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the second edge operand input component\n     */\n    get edge1() {\n        return this._inputs[2];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        state.compilationString +=\n            this._declareOutput(output, state) +\n                ` = smoothstep(${this.edge0.associatedVariableName}, ${this.edge1.associatedVariableName}, ${this.value.associatedVariableName});\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.SmoothStepBlock\", SmoothStepBlock);\n//# sourceMappingURL=smoothStepBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to get the reciprocal (1 / x) of a value\n */\nexport class ReciprocalBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new ReciprocalBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"ReciprocalBlock\";\n    }\n    /**\n     * Gets the input component\n     */\n    get input() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        if (this.input.type === NodeMaterialBlockConnectionPointTypes.Matrix) {\n            state.compilationString += this._declareOutput(output, state) + ` = inverse(${this.input.associatedVariableName});\\r\\n`;\n        }\n        else {\n            state.compilationString += this._declareOutput(output, state) + ` = 1. / ${this.input.associatedVariableName};\\r\\n`;\n        }\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.ReciprocalBlock\", ReciprocalBlock);\n//# sourceMappingURL=reciprocalBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to replace a color by another one\n */\nexport class ReplaceColorBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new ReplaceColorBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"value\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"reference\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"distance\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerInput(\"replacement\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\n        this._linkConnectionTypes(0, 1);\n        this._linkConnectionTypes(0, 3);\n        this._inputs[0].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Float);\n        this._inputs[0].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Matrix);\n        this._inputs[1].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Float);\n        this._inputs[1].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Matrix);\n        this._inputs[3].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Float);\n        this._inputs[3].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Matrix);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"ReplaceColorBlock\";\n    }\n    /**\n     * Gets the value input component\n     */\n    get value() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the reference input component\n     */\n    get reference() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the distance input component\n     */\n    get distance() {\n        return this._inputs[2];\n    }\n    /**\n     * Gets the replacement input component\n     */\n    get replacement() {\n        return this._inputs[3];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        state.compilationString += this._declareOutput(output, state) + `;\\r\\n`;\n        state.compilationString += `if (length(${this.value.associatedVariableName} - ${this.reference.associatedVariableName}) < ${this.distance.associatedVariableName}) {\\r\\n`;\n        state.compilationString += `${output.associatedVariableName} = ${this.replacement.associatedVariableName};\\r\\n`;\n        state.compilationString += `} else {\\r\\n`;\n        state.compilationString += `${output.associatedVariableName} = ${this.value.associatedVariableName};\\r\\n`;\n        state.compilationString += `}\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.ReplaceColorBlock\", ReplaceColorBlock);\n//# sourceMappingURL=replaceColorBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to posterize a value\n * @see https://en.wikipedia.org/wiki/Posterization\n */\nexport class PosterizeBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new PosterizeBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"value\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"steps\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\n        this._linkConnectionTypes(0, 1);\n        this._inputs[0].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Matrix);\n        this._inputs[1].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Matrix);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"PosterizeBlock\";\n    }\n    /**\n     * Gets the value input component\n     */\n    get value() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the steps input component\n     */\n    get steps() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        state.compilationString +=\n            this._declareOutput(output, state) +\n                ` = floor(${this.value.associatedVariableName} / (1.0 / ${this.steps.associatedVariableName})) * (1.0 / ${this.steps.associatedVariableName});\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.PosterizeBlock\", PosterizeBlock);\n//# sourceMappingURL=posterizeBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { Color3 } from \"../../../Maths/math.color.js\";\nimport { Observable } from \"../../../Misc/observable.js\";\n/**\n * Class used to store a color step for the GradientBlock\n */\nexport class GradientBlockColorStep {\n    /**\n     * Gets value indicating which step this color is associated with (between 0 and 1)\n     */\n    get step() {\n        return this._step;\n    }\n    /**\n     * Sets a value indicating which step this color is associated with (between 0 and 1)\n     */\n    set step(val) {\n        this._step = val;\n    }\n    /**\n     * Gets the color associated with this step\n     */\n    get color() {\n        return this._color;\n    }\n    /**\n     * Sets the color associated with this step\n     */\n    set color(val) {\n        this._color = val;\n    }\n    /**\n     * Creates a new GradientBlockColorStep\n     * @param step defines a value indicating which step this color is associated with (between 0 and 1)\n     * @param color defines the color associated with this step\n     */\n    constructor(step, color) {\n        this.step = step;\n        this.color = color;\n    }\n}\n/**\n * Block used to return a color from a gradient based on an input value between 0 and 1\n */\nexport class GradientBlock extends NodeMaterialBlock {\n    /** calls observable when the value is changed*/\n    colorStepsUpdated() {\n        this.onValueChangedObservable.notifyObservers(this);\n    }\n    /**\n     * Creates a new GradientBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        /**\n         * Gets or sets the list of color steps\n         */\n        this.colorSteps = [new GradientBlockColorStep(0, Color3.Black()), new GradientBlockColorStep(1.0, Color3.White())];\n        /** Gets an observable raised when the value is changed */\n        this.onValueChangedObservable = new Observable();\n        this.registerInput(\"gradient\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Color3);\n        this._inputs[0].addExcludedConnectionPointFromAllowedTypes(NodeMaterialBlockConnectionPointTypes.Float |\n            NodeMaterialBlockConnectionPointTypes.Vector2 |\n            NodeMaterialBlockConnectionPointTypes.Vector3 |\n            NodeMaterialBlockConnectionPointTypes.Vector4 |\n            NodeMaterialBlockConnectionPointTypes.Color3 |\n            NodeMaterialBlockConnectionPointTypes.Color4);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"GradientBlock\";\n    }\n    /**\n     * Gets the gradient input component\n     */\n    get gradient() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _writeColorConstant(index) {\n        const step = this.colorSteps[index];\n        return `vec3(${step.color.r}, ${step.color.g}, ${step.color.b})`;\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        if (!this.colorSteps.length || !this.gradient.connectedPoint) {\n            state.compilationString += this._declareOutput(output, state) + ` = vec3(0., 0., 0.);\\r\\n`;\n            return;\n        }\n        const tempColor = state._getFreeVariableName(\"gradientTempColor\");\n        const tempPosition = state._getFreeVariableName(\"gradientTempPosition\");\n        state.compilationString += `vec3 ${tempColor} = ${this._writeColorConstant(0)};\\r\\n`;\n        state.compilationString += `float ${tempPosition};\\r\\n`;\n        let gradientSource = this.gradient.associatedVariableName;\n        if (this.gradient.connectedPoint.type !== NodeMaterialBlockConnectionPointTypes.Float) {\n            gradientSource += \".x\";\n        }\n        for (let index = 1; index < this.colorSteps.length; index++) {\n            const step = this.colorSteps[index];\n            const previousStep = this.colorSteps[index - 1];\n            state.compilationString += `${tempPosition} = clamp((${gradientSource} - ${state._emitFloat(previousStep.step)}) / (${state._emitFloat(step.step)} -  ${state._emitFloat(previousStep.step)}), 0.0, 1.0) * step(${state._emitFloat(index)}, ${state._emitFloat(this.colorSteps.length - 1)});\\r\\n`;\n            state.compilationString += `${tempColor} = mix(${tempColor}, ${this._writeColorConstant(index)}, ${tempPosition});\\r\\n`;\n        }\n        state.compilationString += this._declareOutput(output, state) + ` = ${tempColor};\\r\\n`;\n        return this;\n    }\n    serialize() {\n        const serializationObject = super.serialize();\n        serializationObject.colorSteps = [];\n        for (const step of this.colorSteps) {\n            serializationObject.colorSteps.push({\n                step: step.step,\n                color: {\n                    r: step.color.r,\n                    g: step.color.g,\n                    b: step.color.b,\n                },\n            });\n        }\n        return serializationObject;\n    }\n    _deserialize(serializationObject, scene, rootUrl) {\n        super._deserialize(serializationObject, scene, rootUrl);\n        this.colorSteps.length = 0;\n        for (const step of serializationObject.colorSteps) {\n            this.colorSteps.push(new GradientBlockColorStep(step.step, new Color3(step.color.r, step.color.g, step.color.b)));\n        }\n    }\n    _dumpPropertiesCode() {\n        let codeString = super._dumpPropertiesCode();\n        codeString += `${this._codeVariableName}.colorSteps = [];\\r\\n`;\n        for (const colorStep of this.colorSteps) {\n            codeString += `${this._codeVariableName}.colorSteps.push(new BABYLON.GradientBlockColorStep(${colorStep.step}, new BABYLON.Color3(${colorStep.color.r}, ${colorStep.color.g}, ${colorStep.color.b})));\\r\\n`;\n        }\n        return codeString;\n    }\n}\nRegisterClass(\"BABYLON.GradientBlock\", GradientBlock);\n//# sourceMappingURL=gradientBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to normalize lerp between 2 values\n */\nexport class NLerpBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new NLerpBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"left\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"right\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"gradient\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\n        this._linkConnectionTypes(0, 1);\n        this._linkConnectionTypes(1, 2, true);\n        this._inputs[2].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Float);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"NLerpBlock\";\n    }\n    /**\n     * Gets the left operand input component\n     */\n    get left() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the right operand input component\n     */\n    get right() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the gradient operand input component\n     */\n    get gradient() {\n        return this._inputs[2];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        state.compilationString +=\n            this._declareOutput(output, state) +\n                ` = normalize(mix(${this.left.associatedVariableName} , ${this.right.associatedVariableName}, ${this.gradient.associatedVariableName}));\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.NLerpBlock\", NLerpBlock);\n//# sourceMappingURL=nLerpBlock.js.map","import { __decorate } from \"../../../tslib.es6.js\";\nimport { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../nodeMaterialDecorator.js\";\n/**\n * block used to Generate a Worley Noise 3D Noise Pattern\n */\n//  Source: https://github.com/Erkaman/glsl-worley\n//  Converted to BJS by Pryme8\n//\n//  Worley Noise 3D\n//  Return vec2 value range of -1.0->1.0, F1-F2 respectivly\nexport class WorleyNoise3DBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new WorleyNoise3DBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        /** Gets or sets a boolean indicating that normal should be inverted on X axis */\n        this.manhattanDistance = false;\n        this.registerInput(\"seed\", NodeMaterialBlockConnectionPointTypes.Vector3);\n        this.registerInput(\"jitter\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector2);\n        this.registerOutput(\"x\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerOutput(\"y\", NodeMaterialBlockConnectionPointTypes.Float);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"WorleyNoise3DBlock\";\n    }\n    /**\n     * Gets the seed input component\n     */\n    get seed() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the jitter input component\n     */\n    get jitter() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    /**\n     * Gets the x component\n     */\n    get x() {\n        return this._outputs[1];\n    }\n    /**\n     * Gets the y component\n     */\n    get y() {\n        return this._outputs[2];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        if (!this.seed.isConnected) {\n            return;\n        }\n        if (!this.output.hasEndpoints && !this.x.hasEndpoints && !this.y.hasEndpoints) {\n            return;\n        }\n        let functionString = `vec3 permute(vec3 x){\\r\\n`;\n        functionString += `    return mod((34.0 * x + 1.0) * x, 289.0);\\r\\n`;\n        functionString += `}\\r\\n\\r\\n`;\n        functionString += `vec3 dist(vec3 x, vec3 y, vec3 z,  bool manhattanDistance){\\r\\n`;\n        functionString += `    return manhattanDistance ?  abs(x) + abs(y) + abs(z) :  (x * x + y * y + z * z);\\r\\n`;\n        functionString += `}\\r\\n\\r\\n`;\n        functionString += `vec2 worley(vec3 P, float jitter, bool manhattanDistance){\\r\\n`;\n        functionString += `    float K = 0.142857142857; // 1/7\\r\\n`;\n        functionString += `    float Ko = 0.428571428571; // 1/2-K/2\\r\\n`;\n        functionString += `    float  K2 = 0.020408163265306; // 1/(7*7)\\r\\n`;\n        functionString += `    float Kz = 0.166666666667; // 1/6\\r\\n`;\n        functionString += `    float Kzo = 0.416666666667; // 1/2-1/6*2\\r\\n`;\n        functionString += `\\r\\n`;\n        functionString += `    vec3 Pi = mod(floor(P), 289.0);\\r\\n`;\n        functionString += `    vec3 Pf = fract(P) - 0.5;\\r\\n`;\n        functionString += `\\r\\n`;\n        functionString += `    vec3 Pfx = Pf.x + vec3(1.0, 0.0, -1.0);\\r\\n`;\n        functionString += `    vec3 Pfy = Pf.y + vec3(1.0, 0.0, -1.0);\\r\\n`;\n        functionString += `    vec3 Pfz = Pf.z + vec3(1.0, 0.0, -1.0);\\r\\n`;\n        functionString += `\\r\\n`;\n        functionString += `    vec3 p = permute(Pi.x + vec3(-1.0, 0.0, 1.0));\\r\\n`;\n        functionString += `    vec3 p1 = permute(p + Pi.y - 1.0);\\r\\n`;\n        functionString += `    vec3 p2 = permute(p + Pi.y);\\r\\n`;\n        functionString += `    vec3 p3 = permute(p + Pi.y + 1.0);\\r\\n`;\n        functionString += `\\r\\n`;\n        functionString += `    vec3 p11 = permute(p1 + Pi.z - 1.0);\\r\\n`;\n        functionString += `    vec3 p12 = permute(p1 + Pi.z);\\r\\n`;\n        functionString += `    vec3 p13 = permute(p1 + Pi.z + 1.0);\\r\\n`;\n        functionString += `\\r\\n`;\n        functionString += `    vec3 p21 = permute(p2 + Pi.z - 1.0);\\r\\n`;\n        functionString += `    vec3 p22 = permute(p2 + Pi.z);\\r\\n`;\n        functionString += `    vec3 p23 = permute(p2 + Pi.z + 1.0);\\r\\n`;\n        functionString += `\\r\\n`;\n        functionString += `    vec3 p31 = permute(p3 + Pi.z - 1.0);\\r\\n`;\n        functionString += `    vec3 p32 = permute(p3 + Pi.z);\\r\\n`;\n        functionString += `    vec3 p33 = permute(p3 + Pi.z + 1.0);\\r\\n`;\n        functionString += `\\r\\n`;\n        functionString += `    vec3 ox11 = fract(p11*K) - Ko;\\r\\n`;\n        functionString += `    vec3 oy11 = mod(floor(p11*K), 7.0)*K - Ko;\\r\\n`;\n        functionString += `    vec3 oz11 = floor(p11*K2)*Kz - Kzo; // p11 < 289 guaranteed\\r\\n`;\n        functionString += `\\r\\n`;\n        functionString += `    vec3 ox12 = fract(p12*K) - Ko;\\r\\n`;\n        functionString += `    vec3 oy12 = mod(floor(p12*K), 7.0)*K - Ko;\\r\\n`;\n        functionString += `    vec3 oz12 = floor(p12*K2)*Kz - Kzo;\\r\\n`;\n        functionString += `\\r\\n`;\n        functionString += `    vec3 ox13 = fract(p13*K) - Ko;\\r\\n`;\n        functionString += `    vec3 oy13 = mod(floor(p13*K), 7.0)*K - Ko;\\r\\n`;\n        functionString += `    vec3 oz13 = floor(p13*K2)*Kz - Kzo;\\r\\n`;\n        functionString += `\\r\\n`;\n        functionString += `    vec3 ox21 = fract(p21*K) - Ko;\\r\\n`;\n        functionString += `    vec3 oy21 = mod(floor(p21*K), 7.0)*K - Ko;\\r\\n`;\n        functionString += `    vec3 oz21 = floor(p21*K2)*Kz - Kzo;\\r\\n`;\n        functionString += `\\r\\n`;\n        functionString += `    vec3 ox22 = fract(p22*K) - Ko;\\r\\n`;\n        functionString += `    vec3 oy22 = mod(floor(p22*K), 7.0)*K - Ko;\\r\\n`;\n        functionString += `    vec3 oz22 = floor(p22*K2)*Kz - Kzo;\\r\\n`;\n        functionString += `\\r\\n`;\n        functionString += `    vec3 ox23 = fract(p23*K) - Ko;\\r\\n`;\n        functionString += `    vec3 oy23 = mod(floor(p23*K), 7.0)*K - Ko;\\r\\n`;\n        functionString += `    vec3 oz23 = floor(p23*K2)*Kz - Kzo;\\r\\n`;\n        functionString += `\\r\\n`;\n        functionString += `    vec3 ox31 = fract(p31*K) - Ko;\\r\\n`;\n        functionString += `    vec3 oy31 = mod(floor(p31*K), 7.0)*K - Ko;\\r\\n`;\n        functionString += `    vec3 oz31 = floor(p31*K2)*Kz - Kzo;\\r\\n`;\n        functionString += `\\r\\n`;\n        functionString += `    vec3 ox32 = fract(p32*K) - Ko;\\r\\n`;\n        functionString += `    vec3 oy32 = mod(floor(p32*K), 7.0)*K - Ko;\\r\\n`;\n        functionString += `    vec3 oz32 = floor(p32*K2)*Kz - Kzo;\\r\\n`;\n        functionString += `\\r\\n`;\n        functionString += `    vec3 ox33 = fract(p33*K) - Ko;\\r\\n`;\n        functionString += `    vec3 oy33 = mod(floor(p33*K), 7.0)*K - Ko;\\r\\n`;\n        functionString += `    vec3 oz33 = floor(p33*K2)*Kz - Kzo;\\r\\n`;\n        functionString += `\\r\\n`;\n        functionString += `    vec3 dx11 = Pfx + jitter*ox11;\\r\\n`;\n        functionString += `    vec3 dy11 = Pfy.x + jitter*oy11;\\r\\n`;\n        functionString += `    vec3 dz11 = Pfz.x + jitter*oz11;\\r\\n`;\n        functionString += `\\r\\n`;\n        functionString += `    vec3 dx12 = Pfx + jitter*ox12;\\r\\n`;\n        functionString += `    vec3 dy12 = Pfy.x + jitter*oy12;\\r\\n`;\n        functionString += `    vec3 dz12 = Pfz.y + jitter*oz12;\\r\\n`;\n        functionString += `\\r\\n`;\n        functionString += `    vec3 dx13 = Pfx + jitter*ox13;\\r\\n`;\n        functionString += `    vec3 dy13 = Pfy.x + jitter*oy13;\\r\\n`;\n        functionString += `    vec3 dz13 = Pfz.z + jitter*oz13;\\r\\n`;\n        functionString += `\\r\\n`;\n        functionString += `    vec3 dx21 = Pfx + jitter*ox21;\\r\\n`;\n        functionString += `    vec3 dy21 = Pfy.y + jitter*oy21;\\r\\n`;\n        functionString += `    vec3 dz21 = Pfz.x + jitter*oz21;\\r\\n`;\n        functionString += `\\r\\n`;\n        functionString += `    vec3 dx22 = Pfx + jitter*ox22;\\r\\n`;\n        functionString += `    vec3 dy22 = Pfy.y + jitter*oy22;\\r\\n`;\n        functionString += `    vec3 dz22 = Pfz.y + jitter*oz22;\\r\\n`;\n        functionString += `\\r\\n`;\n        functionString += `    vec3 dx23 = Pfx + jitter*ox23;\\r\\n`;\n        functionString += `    vec3 dy23 = Pfy.y + jitter*oy23;\\r\\n`;\n        functionString += `    vec3 dz23 = Pfz.z + jitter*oz23;\\r\\n`;\n        functionString += `\\r\\n`;\n        functionString += `    vec3 dx31 = Pfx + jitter*ox31;\\r\\n`;\n        functionString += `    vec3 dy31 = Pfy.z + jitter*oy31;\\r\\n`;\n        functionString += `    vec3 dz31 = Pfz.x + jitter*oz31;\\r\\n`;\n        functionString += `\\r\\n`;\n        functionString += `    vec3 dx32 = Pfx + jitter*ox32;\\r\\n`;\n        functionString += `    vec3 dy32 = Pfy.z + jitter*oy32;\\r\\n`;\n        functionString += `    vec3 dz32 = Pfz.y + jitter*oz32;\\r\\n`;\n        functionString += `\\r\\n`;\n        functionString += `    vec3 dx33 = Pfx + jitter*ox33;\\r\\n`;\n        functionString += `    vec3 dy33 = Pfy.z + jitter*oy33;\\r\\n`;\n        functionString += `    vec3 dz33 = Pfz.z + jitter*oz33;\\r\\n`;\n        functionString += `\\r\\n`;\n        functionString += `    vec3 d11 = dist(dx11, dy11, dz11, manhattanDistance);\\r\\n`;\n        functionString += `    vec3 d12 =dist(dx12, dy12, dz12, manhattanDistance);\\r\\n`;\n        functionString += `    vec3 d13 = dist(dx13, dy13, dz13, manhattanDistance);\\r\\n`;\n        functionString += `    vec3 d21 = dist(dx21, dy21, dz21, manhattanDistance);\\r\\n`;\n        functionString += `    vec3 d22 = dist(dx22, dy22, dz22, manhattanDistance);\\r\\n`;\n        functionString += `    vec3 d23 = dist(dx23, dy23, dz23, manhattanDistance);\\r\\n`;\n        functionString += `    vec3 d31 = dist(dx31, dy31, dz31, manhattanDistance);\\r\\n`;\n        functionString += `    vec3 d32 = dist(dx32, dy32, dz32, manhattanDistance);\\r\\n`;\n        functionString += `    vec3 d33 = dist(dx33, dy33, dz33, manhattanDistance);\\r\\n`;\n        functionString += `\\r\\n`;\n        functionString += `    vec3 d1a = min(d11, d12);\\r\\n`;\n        functionString += `    d12 = max(d11, d12);\\r\\n`;\n        functionString += `    d11 = min(d1a, d13); // Smallest now not in d12 or d13\\r\\n`;\n        functionString += `    d13 = max(d1a, d13);\\r\\n`;\n        functionString += `    d12 = min(d12, d13); // 2nd smallest now not in d13\\r\\n`;\n        functionString += `    vec3 d2a = min(d21, d22);\\r\\n`;\n        functionString += `    d22 = max(d21, d22);\\r\\n`;\n        functionString += `    d21 = min(d2a, d23); // Smallest now not in d22 or d23\\r\\n`;\n        functionString += `    d23 = max(d2a, d23);\\r\\n`;\n        functionString += `    d22 = min(d22, d23); // 2nd smallest now not in d23\\r\\n`;\n        functionString += `    vec3 d3a = min(d31, d32);\\r\\n`;\n        functionString += `    d32 = max(d31, d32);\\r\\n`;\n        functionString += `    d31 = min(d3a, d33); // Smallest now not in d32 or d33\\r\\n`;\n        functionString += `    d33 = max(d3a, d33);\\r\\n`;\n        functionString += `    d32 = min(d32, d33); // 2nd smallest now not in d33\\r\\n`;\n        functionString += `    vec3 da = min(d11, d21);\\r\\n`;\n        functionString += `    d21 = max(d11, d21);\\r\\n`;\n        functionString += `    d11 = min(da, d31); // Smallest now in d11\\r\\n`;\n        functionString += `    d31 = max(da, d31); // 2nd smallest now not in d31\\r\\n`;\n        functionString += `    d11.xy = (d11.x < d11.y) ? d11.xy : d11.yx;\\r\\n`;\n        functionString += `    d11.xz = (d11.x < d11.z) ? d11.xz : d11.zx; // d11.x now smallest\\r\\n`;\n        functionString += `    d12 = min(d12, d21); // 2nd smallest now not in d21\\r\\n`;\n        functionString += `    d12 = min(d12, d22); // nor in d22\\r\\n`;\n        functionString += `    d12 = min(d12, d31); // nor in d31\\r\\n`;\n        functionString += `    d12 = min(d12, d32); // nor in d32\\r\\n`;\n        functionString += `    d11.yz = min(d11.yz,d12.xy); // nor in d12.yz\\r\\n`;\n        functionString += `    d11.y = min(d11.y,d12.z); // Only two more to go\\r\\n`;\n        functionString += `    d11.y = min(d11.y,d11.z); // Done! (Phew!)\\r\\n`;\n        functionString += `    return sqrt(d11.xy); // F1, F2\\r\\n`;\n        functionString += `}\\r\\n\\r\\n`;\n        state._emitFunction(\"worley3D\", functionString, \"// Worley3D\");\n        const tempVariable = state._getFreeVariableName(\"worleyTemp\");\n        state.compilationString += `vec2 ${tempVariable} = worley(${this.seed.associatedVariableName}, ${this.jitter.associatedVariableName}, ${this.manhattanDistance});\\r\\n`;\n        if (this.output.hasEndpoints) {\n            state.compilationString += this._declareOutput(this.output, state) + ` = ${tempVariable};\\r\\n`;\n        }\n        if (this.x.hasEndpoints) {\n            state.compilationString += this._declareOutput(this.x, state) + ` = ${tempVariable}.x;\\r\\n`;\n        }\n        if (this.y.hasEndpoints) {\n            state.compilationString += this._declareOutput(this.y, state) + ` = ${tempVariable}.y;\\r\\n`;\n        }\n        return this;\n    }\n    /**\n     * Exposes the properties to the UI?\n     */\n    _dumpPropertiesCode() {\n        const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.manhattanDistance = ${this.manhattanDistance};\\r\\n`;\n        return codeString;\n    }\n    /**\n     * Exposes the properties to the Serialize?\n     */\n    serialize() {\n        const serializationObject = super.serialize();\n        serializationObject.manhattanDistance = this.manhattanDistance;\n        return serializationObject;\n    }\n    /**\n     * Exposes the properties to the deserialize?\n     * @param serializationObject\n     * @param scene\n     * @param rootUrl\n     */\n    _deserialize(serializationObject, scene, rootUrl) {\n        super._deserialize(serializationObject, scene, rootUrl);\n        this.manhattanDistance = serializationObject.manhattanDistance;\n    }\n}\n__decorate([\n    editableInPropertyPage(\"Use Manhattan Distance\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", { notifiers: { update: false } })\n], WorleyNoise3DBlock.prototype, \"manhattanDistance\", void 0);\nRegisterClass(\"BABYLON.WorleyNoise3DBlock\", WorleyNoise3DBlock);\n//# sourceMappingURL=worleyNoise3DBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * block used to Generate a Simplex Perlin 3d Noise Pattern\n */\n//\n//  Wombat\n//  An efficient texture-free GLSL procedural noise library\n//  Source: https://github.com/BrianSharpe/Wombat\n//  Derived from: https://github.com/BrianSharpe/GPU-Noise-Lib\n//\n//  I'm not one for copyrights.  Use the code however you wish.\n//  All I ask is that credit be given back to the blog or myself when appropriate.\n//  And also to let me know if you come up with any changes, improvements, thoughts or interesting uses for this stuff. :)\n//  Thanks!\n//\n//  Brian Sharpe\n//  brisharpe CIRCLE_A yahoo DOT com\n//  http://briansharpe.wordpress.com\n//  https://github.com/BrianSharpe\n//\n//\n//  This is a modified version of Stefan Gustavson's and Ian McEwan's work at http://github.com/ashima/webgl-noise\n//  Modifications are...\n//  - faster random number generation\n//  - analytical final normalization\n//  - space scaled can have an approx feature size of 1.0\n//  - filter kernel changed to fix discontinuities at tetrahedron boundaries\n//\n//  Converted to BJS by Pryme8\n//\n//  Simplex Perlin Noise 3D\n//  Return value range of -1.0->1.0\n//\nexport class SimplexPerlin3DBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new SimplexPerlin3DBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"seed\", NodeMaterialBlockConnectionPointTypes.Vector3);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Float);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"SimplexPerlin3DBlock\";\n    }\n    /**\n     * Gets the seed operand input component\n     */\n    get seed() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        if (!this.seed.isConnected) {\n            return;\n        }\n        if (!this._outputs[0].hasEndpoints) {\n            return;\n        }\n        let functionString = `const float SKEWFACTOR = 1.0/3.0;\\r\\n`;\n        functionString += `const float UNSKEWFACTOR = 1.0/6.0;\\r\\n`;\n        functionString += `const float SIMPLEX_CORNER_POS = 0.5;\\r\\n`;\n        functionString += `const float SIMPLEX_TETRAHADRON_HEIGHT = 0.70710678118654752440084436210485;\\r\\n`;\n        functionString += `float SimplexPerlin3D( vec3 P ){\\r\\n`;\n        functionString += `    P.x = P == vec3(0., 0., 0.) ? 0.00001 : P.x;\\r\\n`;\n        functionString += `    P *= SIMPLEX_TETRAHADRON_HEIGHT;\\r\\n`;\n        functionString += `    vec3 Pi = floor( P + dot( P, vec3( SKEWFACTOR) ) );`;\n        functionString += `    vec3 x0 = P - Pi + dot(Pi, vec3( UNSKEWFACTOR ) );\\r\\n`;\n        functionString += `    vec3 g = step(x0.yzx, x0.xyz);\\r\\n`;\n        functionString += `    vec3 l = 1.0 - g;\\r\\n`;\n        functionString += `    vec3 Pi_1 = min( g.xyz, l.zxy );\\r\\n`;\n        functionString += `    vec3 Pi_2 = max( g.xyz, l.zxy );\\r\\n`;\n        functionString += `    vec3 x1 = x0 - Pi_1 + UNSKEWFACTOR;\\r\\n`;\n        functionString += `    vec3 x2 = x0 - Pi_2 + SKEWFACTOR;\\r\\n`;\n        functionString += `    vec3 x3 = x0 - SIMPLEX_CORNER_POS;\\r\\n`;\n        functionString += `    vec4 v1234_x = vec4( x0.x, x1.x, x2.x, x3.x );\\r\\n`;\n        functionString += `    vec4 v1234_y = vec4( x0.y, x1.y, x2.y, x3.y );\\r\\n`;\n        functionString += `    vec4 v1234_z = vec4( x0.z, x1.z, x2.z, x3.z );\\r\\n`;\n        functionString += `    Pi.xyz = Pi.xyz - floor(Pi.xyz * ( 1.0 / 69.0 )) * 69.0;\\r\\n`;\n        functionString += `    vec3 Pi_inc1 = step( Pi, vec3( 69.0 - 1.5 ) ) * ( Pi + 1.0 );\\r\\n`;\n        functionString += `    vec4 Pt = vec4( Pi.xy, Pi_inc1.xy ) + vec2( 50.0, 161.0 ).xyxy;\\r\\n`;\n        functionString += `    Pt *= Pt;\\r\\n`;\n        functionString += `    vec4 V1xy_V2xy = mix( Pt.xyxy, Pt.zwzw, vec4( Pi_1.xy, Pi_2.xy ) );\\r\\n`;\n        functionString += `    Pt = vec4( Pt.x, V1xy_V2xy.xz, Pt.z ) * vec4( Pt.y, V1xy_V2xy.yw, Pt.w );\\r\\n`;\n        functionString += `    const vec3 SOMELARGEFLOATS = vec3( 635.298681, 682.357502, 668.926525 );\\r\\n`;\n        functionString += `    const vec3 ZINC = vec3( 48.500388, 65.294118, 63.934599 );\\r\\n`;\n        functionString += `    vec3 lowz_mods = vec3( 1.0 / ( SOMELARGEFLOATS.xyz + Pi.zzz * ZINC.xyz ) );\\r\\n`;\n        functionString += `    vec3 highz_mods = vec3( 1.0 / ( SOMELARGEFLOATS.xyz + Pi_inc1.zzz * ZINC.xyz ) );\\r\\n`;\n        functionString += `    Pi_1 = ( Pi_1.z < 0.5 ) ? lowz_mods : highz_mods;\\r\\n`;\n        functionString += `    Pi_2 = ( Pi_2.z < 0.5 ) ? lowz_mods : highz_mods;\\r\\n`;\n        functionString += `    vec4 hash_0 = fract( Pt * vec4( lowz_mods.x, Pi_1.x, Pi_2.x, highz_mods.x ) ) - 0.49999;\\r\\n`;\n        functionString += `    vec4 hash_1 = fract( Pt * vec4( lowz_mods.y, Pi_1.y, Pi_2.y, highz_mods.y ) ) - 0.49999;\\r\\n`;\n        functionString += `    vec4 hash_2 = fract( Pt * vec4( lowz_mods.z, Pi_1.z, Pi_2.z, highz_mods.z ) ) - 0.49999;\\r\\n`;\n        functionString += `    vec4 grad_results = inversesqrt( hash_0 * hash_0 + hash_1 * hash_1 + hash_2 * hash_2 ) * ( hash_0 * v1234_x + hash_1 * v1234_y + hash_2 * v1234_z );\\r\\n`;\n        functionString += `    const float FINAL_NORMALIZATION = 37.837227241611314102871574478976;\\r\\n`;\n        functionString += `    vec4 kernel_weights = v1234_x * v1234_x + v1234_y * v1234_y + v1234_z * v1234_z;\\r\\n`;\n        functionString += `    kernel_weights = max(0.5 - kernel_weights, 0.0);\\r\\n`;\n        functionString += `    kernel_weights = kernel_weights*kernel_weights*kernel_weights;\\r\\n`;\n        functionString += `    return dot( kernel_weights, grad_results ) * FINAL_NORMALIZATION;\\r\\n`;\n        functionString += `}\\r\\n`;\n        state._emitFunction(\"SimplexPerlin3D\", functionString, \"// SimplexPerlin3D\");\n        state.compilationString += this._declareOutput(this._outputs[0], state) + ` = SimplexPerlin3D(${this.seed.associatedVariableName});\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.SimplexPerlin3DBlock\", SimplexPerlin3DBlock);\n//# sourceMappingURL=simplexPerlin3DBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to blend normals\n */\nexport class NormalBlendBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new NormalBlendBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"normalMap0\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"normalMap1\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector3);\n        this._inputs[0].addExcludedConnectionPointFromAllowedTypes(NodeMaterialBlockConnectionPointTypes.Color3 |\n            NodeMaterialBlockConnectionPointTypes.Color4 |\n            NodeMaterialBlockConnectionPointTypes.Vector3 |\n            NodeMaterialBlockConnectionPointTypes.Vector4);\n        this._inputs[1].addExcludedConnectionPointFromAllowedTypes(NodeMaterialBlockConnectionPointTypes.Color3 |\n            NodeMaterialBlockConnectionPointTypes.Color4 |\n            NodeMaterialBlockConnectionPointTypes.Vector3 |\n            NodeMaterialBlockConnectionPointTypes.Vector4);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"NormalBlendBlock\";\n    }\n    /**\n     * Gets the first input component\n     */\n    get normalMap0() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the second input component\n     */\n    get normalMap1() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        const input0 = this._inputs[0];\n        const input1 = this._inputs[1];\n        const stepR = state._getFreeVariableName(\"stepR\");\n        const stepG = state._getFreeVariableName(\"stepG\");\n        state.compilationString += `float ${stepR} = step(0.5, ${input0.associatedVariableName}.r);\\r\\n`;\n        state.compilationString += `float ${stepG} = step(0.5, ${input0.associatedVariableName}.g);\\r\\n`;\n        state.compilationString += this._declareOutput(output, state) + `;\\r\\n`;\n        state.compilationString += `${output.associatedVariableName}.r = (1.0 - ${stepR}) * ${input0.associatedVariableName}.r * ${input1.associatedVariableName}.r * 2.0 + ${stepR} * (1.0 - (1.0 - ${input0.associatedVariableName}.r) * (1.0 - ${input1.associatedVariableName}.r) * 2.0);\\r\\n`;\n        state.compilationString += `${output.associatedVariableName}.g = (1.0 - ${stepG}) * ${input0.associatedVariableName}.g * ${input1.associatedVariableName}.g * 2.0 + ${stepG} * (1.0 - (1.0 - ${input0.associatedVariableName}.g) * (1.0 - ${input1.associatedVariableName}.g) * 2.0);\\r\\n`;\n        state.compilationString += `${output.associatedVariableName}.b = ${input0.associatedVariableName}.b * ${input1.associatedVariableName}.b;\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.NormalBlendBlock\", NormalBlendBlock);\n//# sourceMappingURL=normalBlendBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { InputBlock } from \"./Input/inputBlock.js\";\n/**\n * Block used to rotate a 2d vector by a given angle\n */\nexport class Rotate2dBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new Rotate2dBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.Vector2);\n        this.registerInput(\"angle\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector2);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"Rotate2dBlock\";\n    }\n    /**\n     * Gets the input vector\n     */\n    get input() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the input angle\n     */\n    get angle() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    autoConfigure() {\n        if (!this.angle.isConnected) {\n            const angleInput = new InputBlock(\"angle\");\n            angleInput.value = 0;\n            angleInput.output.connectTo(this.angle);\n        }\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        const angle = this.angle;\n        const input = this.input;\n        state.compilationString +=\n            this._declareOutput(output, state) +\n                ` = vec2(cos(${angle.associatedVariableName}) * ${input.associatedVariableName}.x - sin(${angle.associatedVariableName}) * ${input.associatedVariableName}.y, sin(${angle.associatedVariableName}) * ${input.associatedVariableName}.x + cos(${angle.associatedVariableName}) * ${input.associatedVariableName}.y);\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.Rotate2dBlock\", Rotate2dBlock);\n//# sourceMappingURL=rotate2dBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to get the reflected vector from a direction and a normal\n */\nexport class ReflectBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new ReflectBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"incident\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"normal\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector3);\n        this._inputs[0].addExcludedConnectionPointFromAllowedTypes(NodeMaterialBlockConnectionPointTypes.Vector3 |\n            NodeMaterialBlockConnectionPointTypes.Vector4 |\n            NodeMaterialBlockConnectionPointTypes.Color3 |\n            NodeMaterialBlockConnectionPointTypes.Color4);\n        this._inputs[1].addExcludedConnectionPointFromAllowedTypes(NodeMaterialBlockConnectionPointTypes.Vector3 |\n            NodeMaterialBlockConnectionPointTypes.Vector4 |\n            NodeMaterialBlockConnectionPointTypes.Color3 |\n            NodeMaterialBlockConnectionPointTypes.Color4);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"ReflectBlock\";\n    }\n    /**\n     * Gets the incident component\n     */\n    get incident() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the normal component\n     */\n    get normal() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        state.compilationString += this._declareOutput(output, state) + ` = reflect(${this.incident.associatedVariableName}.xyz, ${this.normal.associatedVariableName}.xyz);\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.ReflectBlock\", ReflectBlock);\n//# sourceMappingURL=reflectBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to get the refracted vector from a direction and a normal\n */\nexport class RefractBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new RefractBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"incident\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"normal\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"ior\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector3);\n        this._inputs[0].addExcludedConnectionPointFromAllowedTypes(NodeMaterialBlockConnectionPointTypes.Vector3 |\n            NodeMaterialBlockConnectionPointTypes.Vector4 |\n            NodeMaterialBlockConnectionPointTypes.Color3 |\n            NodeMaterialBlockConnectionPointTypes.Color4);\n        this._inputs[1].addExcludedConnectionPointFromAllowedTypes(NodeMaterialBlockConnectionPointTypes.Vector3 |\n            NodeMaterialBlockConnectionPointTypes.Vector4 |\n            NodeMaterialBlockConnectionPointTypes.Color3 |\n            NodeMaterialBlockConnectionPointTypes.Color4);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"RefractBlock\";\n    }\n    /**\n     * Gets the incident component\n     */\n    get incident() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the normal component\n     */\n    get normal() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the index of refraction component\n     */\n    get ior() {\n        return this._inputs[2];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        state.compilationString +=\n            this._declareOutput(output, state) +\n                ` = refract(${this.incident.associatedVariableName}.xyz, ${this.normal.associatedVariableName}.xyz, ${this.ior.associatedVariableName});\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.RefractBlock\", RefractBlock);\n//# sourceMappingURL=refractBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to desaturate a color\n */\nexport class DesaturateBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new DesaturateBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color3);\n        this.registerInput(\"level\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Color3);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"DesaturateBlock\";\n    }\n    /**\n     * Gets the color operand input component\n     */\n    get color() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the level operand input component\n     */\n    get level() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        const color = this.color;\n        const colorName = color.associatedVariableName;\n        const tempMin = state._getFreeVariableName(\"colorMin\");\n        const tempMax = state._getFreeVariableName(\"colorMax\");\n        const tempMerge = state._getFreeVariableName(\"colorMerge\");\n        state.compilationString += `float ${tempMin} = min(min(${colorName}.x, ${colorName}.y), ${colorName}.z);\\r\\n`;\n        state.compilationString += `float ${tempMax} = max(max(${colorName}.x, ${colorName}.y), ${colorName}.z);\\r\\n`;\n        state.compilationString += `float ${tempMerge} = 0.5 * (${tempMin} + ${tempMax});\\r\\n`;\n        state.compilationString +=\n            this._declareOutput(output, state) + ` = mix(${colorName}, vec3(${tempMerge}, ${tempMerge}, ${tempMerge}), ${this.level.associatedVariableName});\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.DesaturateBlock\", DesaturateBlock);\n//# sourceMappingURL=desaturateBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to compute value of one parameter modulo another\n */\nexport class ModBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new ModBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"left\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"right\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\n        this._linkConnectionTypes(0, 1);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"ModBlock\";\n    }\n    /**\n     * Gets the left operand input component\n     */\n    get left() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the right operand input component\n     */\n    get right() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        state.compilationString += this._declareOutput(output, state) + ` = mod(${this.left.associatedVariableName}, ${this.right.associatedVariableName});\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.ModBlock\", ModBlock);\n//# sourceMappingURL=modBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Operations supported by the ConditionalBlock block\n */\nexport var ConditionalBlockConditions;\n(function (ConditionalBlockConditions) {\n    /** Equal */\n    ConditionalBlockConditions[ConditionalBlockConditions[\"Equal\"] = 0] = \"Equal\";\n    /** NotEqual */\n    ConditionalBlockConditions[ConditionalBlockConditions[\"NotEqual\"] = 1] = \"NotEqual\";\n    /** LessThan */\n    ConditionalBlockConditions[ConditionalBlockConditions[\"LessThan\"] = 2] = \"LessThan\";\n    /** GreaterThan */\n    ConditionalBlockConditions[ConditionalBlockConditions[\"GreaterThan\"] = 3] = \"GreaterThan\";\n    /** LessOrEqual */\n    ConditionalBlockConditions[ConditionalBlockConditions[\"LessOrEqual\"] = 4] = \"LessOrEqual\";\n    /** GreaterOrEqual */\n    ConditionalBlockConditions[ConditionalBlockConditions[\"GreaterOrEqual\"] = 5] = \"GreaterOrEqual\";\n    /** Logical Exclusive OR */\n    ConditionalBlockConditions[ConditionalBlockConditions[\"Xor\"] = 6] = \"Xor\";\n    /** Logical Or */\n    ConditionalBlockConditions[ConditionalBlockConditions[\"Or\"] = 7] = \"Or\";\n    /** Logical And */\n    ConditionalBlockConditions[ConditionalBlockConditions[\"And\"] = 8] = \"And\";\n})(ConditionalBlockConditions || (ConditionalBlockConditions = {}));\n/**\n * Block used to apply conditional operation between floats\n * @since 5.0.0\n */\nexport class ConditionalBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new ConditionalBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        /**\n         * Gets or sets the condition applied by the block\n         */\n        this.condition = ConditionalBlockConditions.LessThan;\n        this.registerInput(\"a\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerInput(\"b\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerInput(\"true\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\n        this.registerInput(\"false\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n        this._linkConnectionTypes(2, 3);\n        this._outputs[0]._typeConnectionSource = this._inputs[2];\n        this._outputs[0]._defaultConnectionPointType = NodeMaterialBlockConnectionPointTypes.Float;\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"ConditionalBlock\";\n    }\n    /**\n     * Gets the first operand component\n     */\n    get a() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the second operand component\n     */\n    get b() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the value to return if condition is true\n     */\n    get true() {\n        return this._inputs[2];\n    }\n    /**\n     * Gets the value to return if condition is false\n     */\n    get false() {\n        return this._inputs[3];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        const trueStatement = this.true.isConnected ? this.true.associatedVariableName : \"1.0\";\n        const falseStatement = this.false.isConnected ? this.false.associatedVariableName : \"0.0\";\n        switch (this.condition) {\n            case ConditionalBlockConditions.Equal: {\n                state.compilationString +=\n                    this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} == ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\r\\n`;\n                break;\n            }\n            case ConditionalBlockConditions.NotEqual: {\n                state.compilationString +=\n                    this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} != ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\r\\n`;\n                break;\n            }\n            case ConditionalBlockConditions.LessThan: {\n                state.compilationString +=\n                    this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} < ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\r\\n`;\n                break;\n            }\n            case ConditionalBlockConditions.LessOrEqual: {\n                state.compilationString +=\n                    this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} <= ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\r\\n`;\n                break;\n            }\n            case ConditionalBlockConditions.GreaterThan: {\n                state.compilationString +=\n                    this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} > ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\r\\n`;\n                break;\n            }\n            case ConditionalBlockConditions.GreaterOrEqual: {\n                state.compilationString +=\n                    this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} >= ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\r\\n`;\n                break;\n            }\n            case ConditionalBlockConditions.Xor: {\n                state.compilationString +=\n                    this._declareOutput(output, state) +\n                        ` = (mod(${this.a.associatedVariableName} + ${this.b.associatedVariableName}, 2.0) > 0.0) ? ${trueStatement} : ${falseStatement};\\r\\n`;\n                break;\n            }\n            case ConditionalBlockConditions.Or: {\n                state.compilationString +=\n                    this._declareOutput(output, state) +\n                        ` = (min(${this.a.associatedVariableName} + ${this.b.associatedVariableName}, 1.0) > 0.0) ? ${trueStatement} : ${falseStatement};\\r\\n`;\n                break;\n            }\n            case ConditionalBlockConditions.And: {\n                state.compilationString +=\n                    this._declareOutput(output, state) +\n                        ` = (${this.a.associatedVariableName} * ${this.b.associatedVariableName} > 0.0)  ? ${trueStatement} : ${falseStatement};\\r\\n`;\n                break;\n            }\n        }\n        return this;\n    }\n    serialize() {\n        const serializationObject = super.serialize();\n        serializationObject.condition = this.condition;\n        return serializationObject;\n    }\n    _deserialize(serializationObject, scene, rootUrl) {\n        super._deserialize(serializationObject, scene, rootUrl);\n        this.condition = serializationObject.condition;\n    }\n    _dumpPropertiesCode() {\n        const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.condition = BABYLON.ConditionalBlockConditions.${ConditionalBlockConditions[this.condition]};\\r\\n`;\n        return codeString;\n    }\n}\nRegisterClass(\"BABYLON.ConditionalBlock\", ConditionalBlock);\n//# sourceMappingURL=conditionalBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { InputBlock } from \"./Input/inputBlock.js\";\nimport { Vector4 } from \"../../../Maths/math.vector.js\";\n/**\n * Block used to build a matrix from 4 Vector4\n */\nexport class MatrixBuilderBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new MatrixBuilder\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"row0\", NodeMaterialBlockConnectionPointTypes.Vector4);\n        this.registerInput(\"row1\", NodeMaterialBlockConnectionPointTypes.Vector4);\n        this.registerInput(\"row2\", NodeMaterialBlockConnectionPointTypes.Vector4);\n        this.registerInput(\"row3\", NodeMaterialBlockConnectionPointTypes.Vector4);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Matrix);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"MatrixBuilder\";\n    }\n    /**\n     * Gets the row0 vector\n     */\n    get row0() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the row1 vector\n     */\n    get row1() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the row2 vector\n     */\n    get row2() {\n        return this._inputs[2];\n    }\n    /**\n     * Gets the row3 vector\n     */\n    get row3() {\n        return this._inputs[3];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    autoConfigure() {\n        if (!this.row0.isConnected) {\n            const row0Input = new InputBlock(\"row0\");\n            row0Input.value = new Vector4(1, 0, 0, 0);\n            row0Input.output.connectTo(this.row0);\n        }\n        if (!this.row1.isConnected) {\n            const row1Input = new InputBlock(\"row1\");\n            row1Input.value = new Vector4(0, 1, 0, 0);\n            row1Input.output.connectTo(this.row1);\n        }\n        if (!this.row2.isConnected) {\n            const row2Input = new InputBlock(\"row2\");\n            row2Input.value = new Vector4(0, 0, 1, 0);\n            row2Input.output.connectTo(this.row2);\n        }\n        if (!this.row3.isConnected) {\n            const row3Input = new InputBlock(\"row3\");\n            row3Input.value = new Vector4(0, 0, 0, 1);\n            row3Input.output.connectTo(this.row3);\n        }\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        const row0 = this.row0;\n        const row1 = this.row1;\n        const row2 = this.row2;\n        const row3 = this.row3;\n        state.compilationString +=\n            this._declareOutput(output, state) +\n                ` = mat4(${row0.associatedVariableName}, ${row1.associatedVariableName}, ${row2.associatedVariableName}, ${row3.associatedVariableName});\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.MatrixBuilder\", MatrixBuilderBlock);\n//# sourceMappingURL=matrixBuilderBlock.js.map","import { __decorate } from \"../../../tslib.es6.js\";\nimport { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../nodeMaterialDecorator.js\";\n/**\n * block used to Generate Fractal Brownian Motion Clouds\n */\nexport class CloudBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new CloudBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        /** Gets or sets the number of octaves */\n        this.octaves = 6.0;\n        this.registerInput(\"seed\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerInput(\"chaos\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\n        this.registerInput(\"offsetX\", NodeMaterialBlockConnectionPointTypes.Float, true);\n        this.registerInput(\"offsetY\", NodeMaterialBlockConnectionPointTypes.Float, true);\n        this.registerInput(\"offsetZ\", NodeMaterialBlockConnectionPointTypes.Float, true);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Float);\n        this._inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Vector2);\n        this._inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Vector3);\n        this._linkConnectionTypes(0, 1);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"CloudBlock\";\n    }\n    /**\n     * Gets the seed input component\n     */\n    get seed() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the chaos input component\n     */\n    get chaos() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the offset X input component\n     */\n    get offsetX() {\n        return this._inputs[2];\n    }\n    /**\n     * Gets the offset Y input component\n     */\n    get offsetY() {\n        return this._inputs[3];\n    }\n    /**\n     * Gets the offset Z input component\n     */\n    get offsetZ() {\n        return this._inputs[4];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        var _a, _b;\n        super._buildBlock(state);\n        if (!this.seed.isConnected) {\n            return;\n        }\n        if (!this._outputs[0].hasEndpoints) {\n            return;\n        }\n        const functionString = `\r\n\r\n        float cloudRandom(in float p) { p = fract(p * 0.011); p *= p + 7.5; p *= p + p; return fract(p); }\r\n\r\n        // Based on Morgan McGuire @morgan3d\r\n        // https://www.shadertoy.com/view/4dS3Wd\r\n        float cloudNoise(in vec2 x, in vec2 chaos) {\r\n            vec2 step = chaos * vec2(75., 120.) + vec2(75., 120.);\r\n\r\n            vec2 i = floor(x);\r\n            vec2 f = fract(x);\r\n\r\n            float n = dot(i, step);\r\n\r\n            vec2 u = f * f * (3.0 - 2.0 * f);\r\n            return mix(\r\n                    mix(cloudRandom(n + dot(step, vec2(0, 0))), cloudRandom(n + dot(step, vec2(1, 0))), u.x),\r\n                    mix(cloudRandom(n + dot(step, vec2(0, 1))), cloudRandom(n + dot(step, vec2(1, 1))), u.x),\r\n                    u.y\r\n                );\r\n        }\r\n\r\n        float cloudNoise(in vec3 x, in vec3 chaos) {\r\n            vec3 step = chaos * vec3(60., 120., 75.) + vec3(60., 120., 75.);\r\n\r\n            vec3 i = floor(x);\r\n            vec3 f = fract(x);\r\n\r\n            float n = dot(i, step);\r\n\r\n            vec3 u = f * f * (3.0 - 2.0 * f);\r\n            return mix(mix(mix( cloudRandom(n + dot(step, vec3(0, 0, 0))), cloudRandom(n + dot(step, vec3(1, 0, 0))), u.x),\r\n                           mix( cloudRandom(n + dot(step, vec3(0, 1, 0))), cloudRandom(n + dot(step, vec3(1, 1, 0))), u.x), u.y),\r\n                       mix(mix( cloudRandom(n + dot(step, vec3(0, 0, 1))), cloudRandom(n + dot(step, vec3(1, 0, 1))), u.x),\r\n                           mix( cloudRandom(n + dot(step, vec3(0, 1, 1))), cloudRandom(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);\r\n        }`;\n        const fractalBrownianString = `\r\n        float fbm(in vec2 st, in vec2 chaos) {\r\n            // Initial values\r\n            float value = 0.0;\r\n            float amplitude = .5;\r\n            float frequency = 0.;\r\n\r\n            // Loop of octaves\r\n            for (int i = 0; i < OCTAVES; i++) {\r\n                value += amplitude * cloudNoise(st, chaos);\r\n                st *= 2.0;\r\n                amplitude *= 0.5;\r\n            }\r\n            return value;\r\n        }\r\n\r\n        float fbm(in vec3 x, in vec3 chaos) {\r\n            // Initial values\r\n            float value = 0.0;\r\n            float amplitude = 0.5;\r\n            for (int i = 0; i < OCTAVES; ++i) {\r\n                value += amplitude * cloudNoise(x, chaos);\r\n                x = x * 2.0;\r\n                amplitude *= 0.5;\r\n            }\r\n            return value;\r\n        }`;\n        const fbmNewName = `fbm${this.octaves}`;\n        state._emitFunction(\"CloudBlockCode\", functionString, \"// CloudBlockCode\");\n        state._emitFunction(\"CloudBlockCodeFBM\" + this.octaves, fractalBrownianString.replace(/fbm/gi, fbmNewName).replace(/OCTAVES/gi, (this.octaves | 0).toString()), \"// CloudBlockCode FBM\");\n        const localVariable = state._getFreeVariableName(\"st\");\n        const seedType = ((_a = this.seed.connectedPoint) === null || _a === void 0 ? void 0 : _a.type) === NodeMaterialBlockConnectionPointTypes.Vector2 ? \"vec2\" : \"vec3\";\n        state.compilationString += `${seedType} ${localVariable} = ${this.seed.associatedVariableName};\\r\\n`;\n        if (this.offsetX.isConnected) {\n            state.compilationString += `${localVariable}.x += 0.1 * ${this.offsetX.associatedVariableName};\\r\\n`;\n        }\n        if (this.offsetY.isConnected) {\n            state.compilationString += `${localVariable}.y += 0.1 * ${this.offsetY.associatedVariableName};\\r\\n`;\n        }\n        if (this.offsetZ.isConnected && seedType === \"vec3\") {\n            state.compilationString += `${localVariable}.z += 0.1 * ${this.offsetZ.associatedVariableName};\\r\\n`;\n        }\n        let chaosValue = \"\";\n        if (this.chaos.isConnected) {\n            chaosValue = this.chaos.associatedVariableName;\n        }\n        else {\n            chaosValue = ((_b = this.seed.connectedPoint) === null || _b === void 0 ? void 0 : _b.type) === NodeMaterialBlockConnectionPointTypes.Vector2 ? \"vec2(0., 0.)\" : \"vec3(0., 0., 0.)\";\n        }\n        state.compilationString += this._declareOutput(this._outputs[0], state) + ` = ${fbmNewName}(${localVariable}, ${chaosValue});\\r\\n`;\n        return this;\n    }\n    _dumpPropertiesCode() {\n        const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.octaves = ${this.octaves};\\r\\n`;\n        return codeString;\n    }\n    serialize() {\n        const serializationObject = super.serialize();\n        serializationObject.octaves = this.octaves;\n        return serializationObject;\n    }\n    _deserialize(serializationObject, scene, rootUrl) {\n        super._deserialize(serializationObject, scene, rootUrl);\n        this.octaves = serializationObject.octaves;\n    }\n}\n__decorate([\n    editableInPropertyPage(\"Octaves\", PropertyTypeForEdition.Int)\n], CloudBlock.prototype, \"octaves\", void 0);\nRegisterClass(\"BABYLON.CloudBlock\", CloudBlock);\n//# sourceMappingURL=cloudBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * block used to Generate a Voronoi Noise Pattern\n */\nexport class VoronoiNoiseBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new VoronoiNoiseBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"seed\", NodeMaterialBlockConnectionPointTypes.Vector2);\n        this.registerInput(\"offset\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerInput(\"density\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Float);\n        this.registerOutput(\"cells\", NodeMaterialBlockConnectionPointTypes.Float);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"VoronoiNoiseBlock\";\n    }\n    /**\n     * Gets the seed input component\n     */\n    get seed() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the offset input component\n     */\n    get offset() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the density input component\n     */\n    get density() {\n        return this._inputs[2];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    /**\n     * Gets the output component\n     */\n    get cells() {\n        return this._outputs[1];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        if (!this.seed.isConnected) {\n            return;\n        }\n        let functionString = `vec2 voronoiRandom(vec2 seed, float offset){\r\n            mat2 m = mat2(15.27, 47.63, 99.41, 89.98);\r\n            vec2 uv = fract(sin(m * seed) * 46839.32);\r\n            return vec2(sin(uv.y * offset) * 0.5 + 0.5, cos(uv.x * offset) * 0.5 + 0.5);\r\n        }\r\n        `;\n        state._emitFunction(\"voronoiRandom\", functionString, \"// Voronoi random generator\");\n        functionString = `void voronoi(vec2 seed, float offset, float density, out float outValue, out float cells){\r\n            vec2 g = floor(seed * density);\r\n            vec2 f = fract(seed * density);\r\n            float t = 8.0;\r\n            vec3 res = vec3(8.0, 0.0, 0.0);\r\n\r\n            for(int y=-1; y<=1; y++)\r\n            {\r\n                for(int x=-1; x<=1; x++)\r\n                {\r\n                    vec2 lattice = vec2(x,y);\r\n                    vec2 randomOffset = voronoiRandom(lattice + g, offset);\r\n                    float d = distance(lattice + randomOffset, f);\r\n                    if(d < res.x)\r\n                    {\r\n                        res = vec3(d, randomOffset.x, randomOffset.y);\r\n                        outValue = res.x;\r\n                        cells = res.y;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        `;\n        state._emitFunction(\"voronoi\", functionString, \"// Voronoi\");\n        const tempOutput = state._getFreeVariableName(\"tempOutput\");\n        const tempCells = state._getFreeVariableName(\"tempCells\");\n        state.compilationString += `float ${tempOutput} = 0.0;\\r\\n`;\n        state.compilationString += `float ${tempCells} = 0.0;\\r\\n`;\n        state.compilationString += `voronoi(${this.seed.associatedVariableName}, ${this.offset.associatedVariableName}, ${this.density.associatedVariableName}, ${tempOutput}, ${tempCells});\\r\\n`;\n        if (this.output.hasEndpoints) {\n            state.compilationString += this._declareOutput(this.output, state) + ` = ${tempOutput};\\r\\n`;\n        }\n        if (this.cells.hasEndpoints) {\n            state.compilationString += this._declareOutput(this.cells, state) + ` = ${tempCells};\\r\\n`;\n        }\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.VoronoiNoiseBlock\", VoronoiNoiseBlock);\n//# sourceMappingURL=voronoiNoiseBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used as a pass through\n */\nexport class ElbowBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new ElbowBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"ElbowBlock\";\n    }\n    /**\n     * Gets the input component\n     */\n    get input() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    /**\n     * Gets or sets the target of the block\n     */\n    get target() {\n        const input = this._inputs[0];\n        if (input.isConnected) {\n            const block = input.connectedPoint.ownerBlock;\n            if (block.target !== NodeMaterialBlockTargets.VertexAndFragment) {\n                return block.target;\n            }\n            if (input.connectedPoint.target !== NodeMaterialBlockTargets.VertexAndFragment) {\n                return input.connectedPoint.target;\n            }\n        }\n        return this._target;\n    }\n    set target(value) {\n        if ((this._target & value) !== 0) {\n            return;\n        }\n        this._target = value;\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this._outputs[0];\n        const input = this._inputs[0];\n        state.compilationString += this._declareOutput(output, state) + ` = ${input.associatedVariableName};\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.ElbowBlock\", ElbowBlock);\n//# sourceMappingURL=elbowBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { NodeMaterialConnectionPointDirection } from \"../nodeMaterialBlockConnectionPoint.js\";\nimport { NodeMaterial } from \"../nodeMaterial.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { Texture } from \"../../Textures/texture.js\";\n\nimport \"../../../Shaders/ShadersInclude/helperFunctions.js\";\nimport { ImageSourceBlock } from \"./Dual/imageSourceBlock.js\";\nimport { NodeMaterialConnectionPointCustomObject } from \"../nodeMaterialConnectionPointCustomObject.js\";\nimport { EngineStore } from \"../../../Engines/engineStore.js\";\n/**\n * Block used to read a texture with triplanar mapping (see \"boxmap\" in https://iquilezles.org/articles/biplanar/)\n */\nexport class TriPlanarBlock extends NodeMaterialBlock {\n    /**\n     * Gets or sets the texture associated with the node\n     */\n    get texture() {\n        var _a;\n        if (this.source.isConnected) {\n            return ((_a = this.source.connectedPoint) === null || _a === void 0 ? void 0 : _a.ownerBlock).texture;\n        }\n        return this._texture;\n    }\n    set texture(texture) {\n        var _a;\n        if (this._texture === texture) {\n            return;\n        }\n        const scene = (_a = texture === null || texture === void 0 ? void 0 : texture.getScene()) !== null && _a !== void 0 ? _a : EngineStore.LastCreatedScene;\n        if (!texture && scene) {\n            scene.markAllMaterialsAsDirty(1, (mat) => {\n                return mat.hasTexture(this._texture);\n            });\n        }\n        this._texture = texture;\n        if (texture && scene) {\n            scene.markAllMaterialsAsDirty(1, (mat) => {\n                return mat.hasTexture(texture);\n            });\n        }\n    }\n    /**\n     * Gets the textureY associated with the node\n     */\n    get textureY() {\n        var _a;\n        if (this.sourceY.isConnected) {\n            return ((_a = this.sourceY.connectedPoint) === null || _a === void 0 ? void 0 : _a.ownerBlock).texture;\n        }\n        return null;\n    }\n    /**\n     * Gets the textureZ associated with the node\n     */\n    get textureZ() {\n        var _a, _b;\n        if ((_a = this.sourceZ) === null || _a === void 0 ? void 0 : _a.isConnected) {\n            return ((_b = this.sourceY.connectedPoint) === null || _b === void 0 ? void 0 : _b.ownerBlock).texture;\n        }\n        return null;\n    }\n    _getImageSourceBlock(connectionPoint) {\n        return (connectionPoint === null || connectionPoint === void 0 ? void 0 : connectionPoint.isConnected) ? connectionPoint.connectedPoint.ownerBlock : null;\n    }\n    /**\n     * Gets the sampler name associated with this texture\n     */\n    get samplerName() {\n        const imageSourceBlock = this._getImageSourceBlock(this.source);\n        if (imageSourceBlock) {\n            return imageSourceBlock.samplerName;\n        }\n        return this._samplerName;\n    }\n    /**\n     * Gets the samplerY name associated with this texture\n     */\n    get samplerYName() {\n        var _a, _b;\n        return (_b = (_a = this._getImageSourceBlock(this.sourceY)) === null || _a === void 0 ? void 0 : _a.samplerName) !== null && _b !== void 0 ? _b : null;\n    }\n    /**\n     * Gets the samplerZ name associated with this texture\n     */\n    get samplerZName() {\n        var _a, _b;\n        return (_b = (_a = this._getImageSourceBlock(this.sourceZ)) === null || _a === void 0 ? void 0 : _a.samplerName) !== null && _b !== void 0 ? _b : null;\n    }\n    /**\n     * Gets a boolean indicating that this block is linked to an ImageSourceBlock\n     */\n    get hasImageSource() {\n        return this.source.isConnected;\n    }\n    /**\n     * Gets or sets a boolean indicating if content needs to be converted to gamma space\n     */\n    set convertToGammaSpace(value) {\n        var _a;\n        if (value === this._convertToGammaSpace) {\n            return;\n        }\n        this._convertToGammaSpace = value;\n        if (this.texture) {\n            const scene = (_a = this.texture.getScene()) !== null && _a !== void 0 ? _a : EngineStore.LastCreatedScene;\n            scene === null || scene === void 0 ? void 0 : scene.markAllMaterialsAsDirty(1, (mat) => {\n                return mat.hasTexture(this.texture);\n            });\n        }\n    }\n    get convertToGammaSpace() {\n        return this._convertToGammaSpace;\n    }\n    /**\n     * Gets or sets a boolean indicating if content needs to be converted to linear space\n     */\n    set convertToLinearSpace(value) {\n        var _a;\n        if (value === this._convertToLinearSpace) {\n            return;\n        }\n        this._convertToLinearSpace = value;\n        if (this.texture) {\n            const scene = (_a = this.texture.getScene()) !== null && _a !== void 0 ? _a : EngineStore.LastCreatedScene;\n            scene === null || scene === void 0 ? void 0 : scene.markAllMaterialsAsDirty(1, (mat) => {\n                return mat.hasTexture(this.texture);\n            });\n        }\n    }\n    get convertToLinearSpace() {\n        return this._convertToLinearSpace;\n    }\n    /**\n     * Create a new TriPlanarBlock\n     * @param name defines the block name\n     */\n    constructor(name, hideSourceZ = false) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this._convertToGammaSpace = false;\n        this._convertToLinearSpace = false;\n        /**\n         * Gets or sets a boolean indicating if multiplication of texture with level should be disabled\n         */\n        this.disableLevelMultiplication = false;\n        this.registerInput(\"position\", NodeMaterialBlockConnectionPointTypes.AutoDetect, false);\n        this.registerInput(\"normal\", NodeMaterialBlockConnectionPointTypes.AutoDetect, false);\n        this.registerInput(\"sharpness\", NodeMaterialBlockConnectionPointTypes.Float, true);\n        this.registerInput(\"source\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.VertexAndFragment, new NodeMaterialConnectionPointCustomObject(\"source\", this, NodeMaterialConnectionPointDirection.Input, ImageSourceBlock, \"ImageSourceBlock\"));\n        this.registerInput(\"sourceY\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.VertexAndFragment, new NodeMaterialConnectionPointCustomObject(\"sourceY\", this, NodeMaterialConnectionPointDirection.Input, ImageSourceBlock, \"ImageSourceBlock\"));\n        if (!hideSourceZ) {\n            this.registerInput(\"sourceZ\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.VertexAndFragment, new NodeMaterialConnectionPointCustomObject(\"sourceZ\", this, NodeMaterialConnectionPointDirection.Input, ImageSourceBlock, \"ImageSourceBlock\"));\n        }\n        this.registerOutput(\"rgba\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Neutral);\n        this.registerOutput(\"rgb\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Neutral);\n        this.registerOutput(\"r\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\n        this.registerOutput(\"g\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\n        this.registerOutput(\"b\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\n        this.registerOutput(\"a\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\n        this.registerOutput(\"level\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\n        this._inputs[0].addExcludedConnectionPointFromAllowedTypes(NodeMaterialBlockConnectionPointTypes.Color3 | NodeMaterialBlockConnectionPointTypes.Vector3 | NodeMaterialBlockConnectionPointTypes.Vector4);\n        this._inputs[1].addExcludedConnectionPointFromAllowedTypes(NodeMaterialBlockConnectionPointTypes.Color3 | NodeMaterialBlockConnectionPointTypes.Vector3 | NodeMaterialBlockConnectionPointTypes.Vector4);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"TriPlanarBlock\";\n    }\n    /**\n     * Gets the position input component\n     */\n    get position() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the normal input component\n     */\n    get normal() {\n        return this._inputs[1];\n    }\n    /**\n     * Gets the sharpness input component\n     */\n    get sharpness() {\n        return this._inputs[2];\n    }\n    /**\n     * Gets the source input component\n     */\n    get source() {\n        return this._inputs[3];\n    }\n    /**\n     * Gets the sourceY input component\n     */\n    get sourceY() {\n        return this._inputs[4];\n    }\n    /**\n     * Gets the sourceZ input component\n     */\n    get sourceZ() {\n        return this._inputs[5];\n    }\n    /**\n     * Gets the rgba output component\n     */\n    get rgba() {\n        return this._outputs[0];\n    }\n    /**\n     * Gets the rgb output component\n     */\n    get rgb() {\n        return this._outputs[1];\n    }\n    /**\n     * Gets the r output component\n     */\n    get r() {\n        return this._outputs[2];\n    }\n    /**\n     * Gets the g output component\n     */\n    get g() {\n        return this._outputs[3];\n    }\n    /**\n     * Gets the b output component\n     */\n    get b() {\n        return this._outputs[4];\n    }\n    /**\n     * Gets the a output component\n     */\n    get a() {\n        return this._outputs[5];\n    }\n    /**\n     * Gets the level output component\n     */\n    get level() {\n        return this._outputs[6];\n    }\n    prepareDefines(mesh, nodeMaterial, defines) {\n        if (!defines._areTexturesDirty) {\n            return;\n        }\n        const toGamma = this.convertToGammaSpace && this.texture && !this.texture.gammaSpace;\n        const toLinear = this.convertToLinearSpace && this.texture && this.texture.gammaSpace;\n        // Not a bug... Name defines the texture space not the required conversion\n        defines.setValue(this._linearDefineName, toGamma, true);\n        defines.setValue(this._gammaDefineName, toLinear, true);\n    }\n    isReady() {\n        if (this.texture && !this.texture.isReadyOrNotBlocking()) {\n            return false;\n        }\n        return true;\n    }\n    bind(effect) {\n        if (!this.texture) {\n            return;\n        }\n        effect.setFloat(this._textureInfoName, this.texture.level);\n        if (!this._imageSource) {\n            effect.setTexture(this._samplerName, this.texture);\n        }\n    }\n    _generateTextureLookup(state) {\n        var _a, _b;\n        const samplerName = this.samplerName;\n        const samplerYName = (_a = this.samplerYName) !== null && _a !== void 0 ? _a : samplerName;\n        const samplerZName = (_b = this.samplerZName) !== null && _b !== void 0 ? _b : samplerName;\n        const sharpness = this.sharpness.isConnected ? this.sharpness.associatedVariableName : \"1.0\";\n        const x = state._getFreeVariableName(\"x\");\n        const y = state._getFreeVariableName(\"y\");\n        const z = state._getFreeVariableName(\"z\");\n        const w = state._getFreeVariableName(\"z\");\n        state.compilationString += `\r\n            vec4 ${x} = texture2D(${samplerName}, ${this.position.associatedVariableName}.yz);\r\n            vec4 ${y} = texture2D(${samplerYName}, ${this.position.associatedVariableName}.zx);\r\n            vec4 ${z} = texture2D(${samplerZName}, ${this.position.associatedVariableName}.xy);\r\n            \r\n            // blend weights\r\n            vec3 ${w} = pow(abs(${this.normal.associatedVariableName}.xyz), vec3(${sharpness}));\r\n\r\n            // blend and return\r\n            vec4 ${this._tempTextureRead} = (${x}*${w}.x + ${y}*${w}.y + ${z}*${w}.z) / (${w}.x + ${w}.y + ${w}.z);        \r\n        `;\n    }\n    _generateConversionCode(state, output, swizzle) {\n        if (swizzle !== \"a\") {\n            // no conversion if the output is \"a\" (alpha)\n            if (!this.texture || !this.texture.gammaSpace) {\n                state.compilationString += `#ifdef ${this._linearDefineName}\r\n                    ${output.associatedVariableName} = toGammaSpace(${output.associatedVariableName});\r\n                    #endif\r\n                `;\n            }\n            state.compilationString += `#ifdef ${this._gammaDefineName}\r\n                ${output.associatedVariableName} = toLinearSpace(${output.associatedVariableName});\r\n                #endif\r\n            `;\n        }\n    }\n    _writeOutput(state, output, swizzle) {\n        let complement = \"\";\n        if (!this.disableLevelMultiplication) {\n            complement = ` * ${this._textureInfoName}`;\n        }\n        state.compilationString += `${this._declareOutput(output, state)} = ${this._tempTextureRead}.${swizzle}${complement};\\r\\n`;\n        this._generateConversionCode(state, output, swizzle);\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        if (this.source.isConnected) {\n            this._imageSource = this.source.connectedPoint.ownerBlock;\n        }\n        else {\n            this._imageSource = null;\n        }\n        this._textureInfoName = state._getFreeVariableName(\"textureInfoName\");\n        this.level.associatedVariableName = this._textureInfoName;\n        this._tempTextureRead = state._getFreeVariableName(\"tempTextureRead\");\n        this._linearDefineName = state._getFreeDefineName(\"ISLINEAR\");\n        this._gammaDefineName = state._getFreeDefineName(\"ISGAMMA\");\n        if (!this._imageSource) {\n            this._samplerName = state._getFreeVariableName(this.name + \"Sampler\");\n            state._emit2DSampler(this._samplerName);\n        }\n        // Declarations\n        state.sharedData.blockingBlocks.push(this);\n        state.sharedData.textureBlocks.push(this);\n        state.sharedData.blocksWithDefines.push(this);\n        state.sharedData.bindableBlocks.push(this);\n        const comments = `//${this.name}`;\n        state._emitFunctionFromInclude(\"helperFunctions\", comments);\n        state._emitUniformFromString(this._textureInfoName, \"float\");\n        this._generateTextureLookup(state);\n        for (const output of this._outputs) {\n            if (output.hasEndpoints && output.name !== \"level\") {\n                this._writeOutput(state, output, output.name);\n            }\n        }\n        return this;\n    }\n    _dumpPropertiesCode() {\n        let codeString = super._dumpPropertiesCode();\n        codeString += `${this._codeVariableName}.convertToGammaSpace = ${this.convertToGammaSpace};\\r\\n`;\n        codeString += `${this._codeVariableName}.convertToLinearSpace = ${this.convertToLinearSpace};\\r\\n`;\n        codeString += `${this._codeVariableName}.disableLevelMultiplication = ${this.disableLevelMultiplication};\\r\\n`;\n        if (!this.texture) {\n            return codeString;\n        }\n        codeString += `${this._codeVariableName}.texture = new BABYLON.Texture(\"${this.texture.name}\", null, ${this.texture.noMipmap}, ${this.texture.invertY}, ${this.texture.samplingMode});\\r\\n`;\n        codeString += `${this._codeVariableName}.texture.wrapU = ${this.texture.wrapU};\\r\\n`;\n        codeString += `${this._codeVariableName}.texture.wrapV = ${this.texture.wrapV};\\r\\n`;\n        codeString += `${this._codeVariableName}.texture.uAng = ${this.texture.uAng};\\r\\n`;\n        codeString += `${this._codeVariableName}.texture.vAng = ${this.texture.vAng};\\r\\n`;\n        codeString += `${this._codeVariableName}.texture.wAng = ${this.texture.wAng};\\r\\n`;\n        codeString += `${this._codeVariableName}.texture.uOffset = ${this.texture.uOffset};\\r\\n`;\n        codeString += `${this._codeVariableName}.texture.vOffset = ${this.texture.vOffset};\\r\\n`;\n        codeString += `${this._codeVariableName}.texture.uScale = ${this.texture.uScale};\\r\\n`;\n        codeString += `${this._codeVariableName}.texture.vScale = ${this.texture.vScale};\\r\\n`;\n        codeString += `${this._codeVariableName}.texture.coordinatesMode = ${this.texture.coordinatesMode};\\r\\n`;\n        return codeString;\n    }\n    serialize() {\n        const serializationObject = super.serialize();\n        serializationObject.convertToGammaSpace = this.convertToGammaSpace;\n        serializationObject.convertToLinearSpace = this.convertToLinearSpace;\n        serializationObject.disableLevelMultiplication = this.disableLevelMultiplication;\n        if (!this.hasImageSource && this.texture && !this.texture.isRenderTarget && this.texture.getClassName() !== \"VideoTexture\") {\n            serializationObject.texture = this.texture.serialize();\n        }\n        return serializationObject;\n    }\n    _deserialize(serializationObject, scene, rootUrl) {\n        super._deserialize(serializationObject, scene, rootUrl);\n        this.convertToGammaSpace = serializationObject.convertToGammaSpace;\n        this.convertToLinearSpace = !!serializationObject.convertToLinearSpace;\n        this.disableLevelMultiplication = !!serializationObject.disableLevelMultiplication;\n        if (serializationObject.texture && !NodeMaterial.IgnoreTexturesAtLoadTime && serializationObject.texture.url !== undefined) {\n            rootUrl = serializationObject.texture.url.indexOf(\"data:\") === 0 ? \"\" : rootUrl;\n            this.texture = Texture.Parse(serializationObject.texture, scene, rootUrl);\n        }\n    }\n}\nRegisterClass(\"BABYLON.TriPlanarBlock\", TriPlanarBlock);\n//# sourceMappingURL=triPlanarBlock.js.map","import { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { TriPlanarBlock } from \"./triPlanarBlock.js\";\n/**\n * Block used to read a texture with triplanar mapping (see https://iquilezles.org/articles/biplanar/)\n */\nexport class BiPlanarBlock extends TriPlanarBlock {\n    /**\n     * Create a new BiPlanarBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, true);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"BiPlanarBlock\";\n    }\n    _generateTextureLookup(state) {\n        var _a;\n        const samplerName = this.samplerName;\n        const samplerYName = (_a = this.samplerYName) !== null && _a !== void 0 ? _a : this.samplerName;\n        const sharpness = this.sharpness.isConnected ? this.sharpness.associatedVariableName : \"1.0\";\n        const dpdx = state._getFreeVariableName(\"dpdx\");\n        const dpdy = state._getFreeVariableName(\"dpdy\");\n        const n = state._getFreeVariableName(\"n\");\n        const ma = state._getFreeVariableName(\"ma\");\n        const mi = state._getFreeVariableName(\"mi\");\n        const me = state._getFreeVariableName(\"me\");\n        const x = state._getFreeVariableName(\"x\");\n        const y = state._getFreeVariableName(\"y\");\n        const w = state._getFreeVariableName(\"y\");\n        state.compilationString += `\r\n            // grab coord derivatives for texturing\r\n            vec3 ${dpdx} = dFdx(${this.position.associatedVariableName}.xyz);\r\n            vec3 ${dpdy} = dFdy(${this.position.associatedVariableName}.xyz);\r\n            vec3 ${n} = abs(${this.normal.associatedVariableName}.xyz);\r\n        \r\n            // determine major axis (in x; yz are following axis)\r\n            ivec3 ${ma} = (${n}.x>${n}.y && ${n}.x>${n}.z) ? ivec3(0,1,2) :\r\n                    (${n}.y>${n}.z)            ? ivec3(1,2,0) :\r\n                                            ivec3(2,0,1) ;\r\n            // determine minor axis (in x; yz are following axis)\r\n            ivec3 ${mi} = (${n}.x<${n}.y && ${n}.x<${n}.z) ? ivec3(0,1,2) :\r\n                    (${n}.y<${n}.z)            ? ivec3(1,2,0) :\r\n                                            ivec3(2,0,1) ;\r\n            // determine median axis (in x;  yz are following axis)\r\n            ivec3 ${me} = ivec3(3) - ${mi} - ${ma};\r\n            \r\n            // project+fetch\r\n            vec4 ${x} = textureGrad( ${samplerName}, vec2(   ${this.position.associatedVariableName}[${ma}.y],   ${this.position.associatedVariableName}[${ma}.z]), \r\n                                    vec2(${dpdx}[${ma}.y],${dpdx}[${ma}.z]), \r\n                                    vec2(${dpdy}[${ma}.y],${dpdy}[${ma}.z]) );\r\n            vec4 ${y} = textureGrad( ${samplerYName}, vec2(   ${this.position.associatedVariableName}[${me}.y],   ${this.position.associatedVariableName}[${me}.z]), \r\n                                    vec2(${dpdx}[${me}.y],${dpdx}[${me}.z]),\r\n                                    vec2(${dpdy}[${me}.y],${dpdy}[${me}.z]) );\r\n            \r\n            // blend factors\r\n            vec2 ${w} = vec2(${n}[${ma}.x],${n}[${me}.x]);\r\n            // make local support\r\n            ${w} = clamp( (${w}-0.5773)/(1.0-0.5773), 0.0, 1.0 );\r\n            // shape transition\r\n            ${w} = pow( ${w}, vec2(${sharpness}/8.0) );\r\n            // blend and return\r\n            vec4 ${this._tempTextureRead} = (${x}*${w}.x + ${y}*${w}.y) / (${w}.x + ${w}.y);\r\n        `;\n    }\n}\nRegisterClass(\"BABYLON.BiPlanarBlock\", BiPlanarBlock);\n//# sourceMappingURL=biPlanarBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to compute the determinant of a matrix\n */\nexport class MatrixDeterminantBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new MatrixDeterminantBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.Matrix);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Float);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"MatrixDeterminantBlock\";\n    }\n    /**\n     * Gets the input matrix\n     */\n    get input() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this.output;\n        const input = this.input;\n        state.compilationString += this._declareOutput(output, state) + `${output.associatedVariableName} = determinant(${input.associatedVariableName});\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.MatrixDeterminantBlock\", MatrixDeterminantBlock);\n//# sourceMappingURL=matrixDeterminantBlock.js.map","import { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to transpose a matrix\n */\nexport class MatrixTransposeBlock extends NodeMaterialBlock {\n    /**\n     * Creates a new MatrixTransposeBlock\n     * @param name defines the block name\n     */\n    constructor(name) {\n        super(name, NodeMaterialBlockTargets.Neutral);\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.Matrix);\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Matrix);\n    }\n    /**\n     * Gets the current class name\n     * @returns the class name\n     */\n    getClassName() {\n        return \"MatrixTransposeBlock\";\n    }\n    /**\n     * Gets the input matrix\n     */\n    get input() {\n        return this._inputs[0];\n    }\n    /**\n     * Gets the output component\n     */\n    get output() {\n        return this._outputs[0];\n    }\n    _buildBlock(state) {\n        super._buildBlock(state);\n        const output = this.output;\n        const input = this.input;\n        state.compilationString += this._declareOutput(output, state) + `${output.associatedVariableName} = transpose(${input.associatedVariableName});\\r\\n`;\n        return this;\n    }\n}\nRegisterClass(\"BABYLON.MatrixTransposeBlock\", MatrixTransposeBlock);\n//# sourceMappingURL=matrixTransposeBlock.js.map","import { NodeMaterialBlockConnectionPointTypes } from \"./Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"./Enums/nodeMaterialBlockTargets.js\";\nimport { Effect } from \"../effect.js\";\n/**\n * Class used to store node based material build state\n */\nexport class NodeMaterialBuildState {\n    constructor() {\n        /** Gets or sets a boolean indicating if the current state can emit uniform buffers */\n        this.supportUniformBuffers = false;\n        /**\n         * Gets the list of emitted attributes\n         */\n        this.attributes = new Array();\n        /**\n         * Gets the list of emitted uniforms\n         */\n        this.uniforms = new Array();\n        /**\n         * Gets the list of emitted constants\n         */\n        this.constants = new Array();\n        /**\n         * Gets the list of emitted samplers\n         */\n        this.samplers = new Array();\n        /**\n         * Gets the list of emitted functions\n         */\n        this.functions = {};\n        /**\n         * Gets the list of emitted extensions\n         */\n        this.extensions = {};\n        /**\n         * Gets the list of emitted counters\n         */\n        this.counters = {};\n        /** @internal */\n        this._attributeDeclaration = \"\";\n        /** @internal */\n        this._uniformDeclaration = \"\";\n        /** @internal */\n        this._constantDeclaration = \"\";\n        /** @internal */\n        this._samplerDeclaration = \"\";\n        /** @internal */\n        this._varyingTransfer = \"\";\n        /** @internal */\n        this._injectAtEnd = \"\";\n        this._repeatableContentAnchorIndex = 0;\n        /** @internal */\n        this._builtCompilationString = \"\";\n        /**\n         * Gets the emitted compilation strings\n         */\n        this.compilationString = \"\";\n    }\n    /**\n     * Finalize the compilation strings\n     * @param state defines the current compilation state\n     */\n    finalize(state) {\n        const emitComments = state.sharedData.emitComments;\n        const isFragmentMode = this.target === NodeMaterialBlockTargets.Fragment;\n        this.compilationString = `\\r\\n${emitComments ? \"//Entry point\\r\\n\" : \"\"}void main(void) {\\r\\n${this.compilationString}`;\n        if (this._constantDeclaration) {\n            this.compilationString = `\\r\\n${emitComments ? \"//Constants\\r\\n\" : \"\"}${this._constantDeclaration}\\r\\n${this.compilationString}`;\n        }\n        let functionCode = \"\";\n        for (const functionName in this.functions) {\n            functionCode += this.functions[functionName] + `\\r\\n`;\n        }\n        this.compilationString = `\\r\\n${functionCode}\\r\\n${this.compilationString}`;\n        if (!isFragmentMode && this._varyingTransfer) {\n            this.compilationString = `${this.compilationString}\\r\\n${this._varyingTransfer}`;\n        }\n        if (this._injectAtEnd) {\n            this.compilationString = `${this.compilationString}\\r\\n${this._injectAtEnd}`;\n        }\n        this.compilationString = `${this.compilationString}\\r\\n}`;\n        if (this.sharedData.varyingDeclaration) {\n            this.compilationString = `\\r\\n${emitComments ? \"//Varyings\\r\\n\" : \"\"}${this.sharedData.varyingDeclaration}\\r\\n${this.compilationString}`;\n        }\n        if (this._samplerDeclaration) {\n            this.compilationString = `\\r\\n${emitComments ? \"//Samplers\\r\\n\" : \"\"}${this._samplerDeclaration}\\r\\n${this.compilationString}`;\n        }\n        if (this._uniformDeclaration) {\n            this.compilationString = `\\r\\n${emitComments ? \"//Uniforms\\r\\n\" : \"\"}${this._uniformDeclaration}\\r\\n${this.compilationString}`;\n        }\n        if (this._attributeDeclaration && !isFragmentMode) {\n            this.compilationString = `\\r\\n${emitComments ? \"//Attributes\\r\\n\" : \"\"}${this._attributeDeclaration}\\r\\n${this.compilationString}`;\n        }\n        this.compilationString = \"precision highp float;\\r\\n\" + this.compilationString;\n        for (const extensionName in this.extensions) {\n            const extension = this.extensions[extensionName];\n            this.compilationString = `\\r\\n${extension}\\r\\n${this.compilationString}`;\n        }\n        this._builtCompilationString = this.compilationString;\n    }\n    /** @internal */\n    get _repeatableContentAnchor() {\n        return `###___ANCHOR${this._repeatableContentAnchorIndex++}___###`;\n    }\n    /**\n     * @internal\n     */\n    _getFreeVariableName(prefix) {\n        prefix = prefix.replace(/[^a-zA-Z_]+/g, \"\");\n        if (this.sharedData.variableNames[prefix] === undefined) {\n            this.sharedData.variableNames[prefix] = 0;\n            // Check reserved words\n            if (prefix === \"output\" || prefix === \"texture\") {\n                return prefix + this.sharedData.variableNames[prefix];\n            }\n            return prefix;\n        }\n        else {\n            this.sharedData.variableNames[prefix]++;\n        }\n        return prefix + this.sharedData.variableNames[prefix];\n    }\n    /**\n     * @internal\n     */\n    _getFreeDefineName(prefix) {\n        if (this.sharedData.defineNames[prefix] === undefined) {\n            this.sharedData.defineNames[prefix] = 0;\n        }\n        else {\n            this.sharedData.defineNames[prefix]++;\n        }\n        return prefix + this.sharedData.defineNames[prefix];\n    }\n    /**\n     * @internal\n     */\n    _excludeVariableName(name) {\n        this.sharedData.variableNames[name] = 0;\n    }\n    /**\n     * @internal\n     */\n    _emit2DSampler(name) {\n        if (this.samplers.indexOf(name) < 0) {\n            this._samplerDeclaration += `uniform sampler2D ${name};\\r\\n`;\n            this.samplers.push(name);\n        }\n    }\n    /**\n     * @internal\n     */\n    _getGLType(type) {\n        switch (type) {\n            case NodeMaterialBlockConnectionPointTypes.Float:\n                return \"float\";\n            case NodeMaterialBlockConnectionPointTypes.Int:\n                return \"int\";\n            case NodeMaterialBlockConnectionPointTypes.Vector2:\n                return \"vec2\";\n            case NodeMaterialBlockConnectionPointTypes.Color3:\n            case NodeMaterialBlockConnectionPointTypes.Vector3:\n                return \"vec3\";\n            case NodeMaterialBlockConnectionPointTypes.Color4:\n            case NodeMaterialBlockConnectionPointTypes.Vector4:\n                return \"vec4\";\n            case NodeMaterialBlockConnectionPointTypes.Matrix:\n                return \"mat4\";\n        }\n        return \"\";\n    }\n    /**\n     * @internal\n     */\n    _emitExtension(name, extension, define = \"\") {\n        if (this.extensions[name]) {\n            return;\n        }\n        if (define) {\n            extension = `#if ${define}\\r\\n${extension}\\r\\n#endif`;\n        }\n        this.extensions[name] = extension;\n    }\n    /**\n     * @internal\n     */\n    _emitFunction(name, code, comments) {\n        if (this.functions[name]) {\n            return;\n        }\n        if (this.sharedData.emitComments) {\n            code = comments + `\\r\\n` + code;\n        }\n        this.functions[name] = code;\n    }\n    /**\n     * @internal\n     */\n    _emitCodeFromInclude(includeName, comments, options) {\n        if (options && options.repeatKey) {\n            return `#include<${includeName}>${options.substitutionVars ? \"(\" + options.substitutionVars + \")\" : \"\"}[0..${options.repeatKey}]\\r\\n`;\n        }\n        let code = Effect.IncludesShadersStore[includeName] + \"\\r\\n\";\n        if (this.sharedData.emitComments) {\n            code = comments + `\\r\\n` + code;\n        }\n        if (!options) {\n            return code;\n        }\n        if (options.replaceStrings) {\n            for (let index = 0; index < options.replaceStrings.length; index++) {\n                const replaceString = options.replaceStrings[index];\n                code = code.replace(replaceString.search, replaceString.replace);\n            }\n        }\n        return code;\n    }\n    /**\n     * @internal\n     */\n    _emitFunctionFromInclude(includeName, comments, options, storeKey = \"\") {\n        const key = includeName + storeKey;\n        if (this.functions[key]) {\n            return;\n        }\n        if (!options || (!options.removeAttributes && !options.removeUniforms && !options.removeVaryings && !options.removeIfDef && !options.replaceStrings)) {\n            if (options && options.repeatKey) {\n                this.functions[key] = `#include<${includeName}>${options.substitutionVars ? \"(\" + options.substitutionVars + \")\" : \"\"}[0..${options.repeatKey}]\\r\\n`;\n            }\n            else {\n                this.functions[key] = `#include<${includeName}>${(options === null || options === void 0 ? void 0 : options.substitutionVars) ? \"(\" + (options === null || options === void 0 ? void 0 : options.substitutionVars) + \")\" : \"\"}\\r\\n`;\n            }\n            if (this.sharedData.emitComments) {\n                this.functions[key] = comments + `\\r\\n` + this.functions[key];\n            }\n            return;\n        }\n        this.functions[key] = Effect.IncludesShadersStore[includeName];\n        if (this.sharedData.emitComments) {\n            this.functions[key] = comments + `\\r\\n` + this.functions[key];\n        }\n        if (options.removeIfDef) {\n            this.functions[key] = this.functions[key].replace(/^\\s*?#ifdef.+$/gm, \"\");\n            this.functions[key] = this.functions[key].replace(/^\\s*?#endif.*$/gm, \"\");\n            this.functions[key] = this.functions[key].replace(/^\\s*?#else.*$/gm, \"\");\n            this.functions[key] = this.functions[key].replace(/^\\s*?#elif.*$/gm, \"\");\n        }\n        if (options.removeAttributes) {\n            this.functions[key] = this.functions[key].replace(/^\\s*?attribute.+$/gm, \"\");\n        }\n        if (options.removeUniforms) {\n            this.functions[key] = this.functions[key].replace(/^\\s*?uniform.+$/gm, \"\");\n        }\n        if (options.removeVaryings) {\n            this.functions[key] = this.functions[key].replace(/^\\s*?varying.+$/gm, \"\");\n        }\n        if (options.replaceStrings) {\n            for (let index = 0; index < options.replaceStrings.length; index++) {\n                const replaceString = options.replaceStrings[index];\n                this.functions[key] = this.functions[key].replace(replaceString.search, replaceString.replace);\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    _registerTempVariable(name) {\n        if (this.sharedData.temps.indexOf(name) !== -1) {\n            return false;\n        }\n        this.sharedData.temps.push(name);\n        return true;\n    }\n    /**\n     * @internal\n     */\n    _emitVaryingFromString(name, type, define = \"\", notDefine = false) {\n        if (this.sharedData.varyings.indexOf(name) !== -1) {\n            return false;\n        }\n        this.sharedData.varyings.push(name);\n        if (define) {\n            if (define.startsWith(\"defined(\")) {\n                this.sharedData.varyingDeclaration += `#if ${define}\\r\\n`;\n            }\n            else {\n                this.sharedData.varyingDeclaration += `${notDefine ? \"#ifndef\" : \"#ifdef\"} ${define}\\r\\n`;\n            }\n        }\n        this.sharedData.varyingDeclaration += `varying ${type} ${name};\\r\\n`;\n        if (define) {\n            this.sharedData.varyingDeclaration += `#endif\\r\\n`;\n        }\n        return true;\n    }\n    /**\n     * @internal\n     */\n    _emitUniformFromString(name, type, define = \"\", notDefine = false) {\n        if (this.uniforms.indexOf(name) !== -1) {\n            return;\n        }\n        this.uniforms.push(name);\n        if (define) {\n            if (define.startsWith(\"defined(\")) {\n                this._uniformDeclaration += `#if ${define}\\r\\n`;\n            }\n            else {\n                this._uniformDeclaration += `${notDefine ? \"#ifndef\" : \"#ifdef\"} ${define}\\r\\n`;\n            }\n        }\n        this._uniformDeclaration += `uniform ${type} ${name};\\r\\n`;\n        if (define) {\n            this._uniformDeclaration += `#endif\\r\\n`;\n        }\n    }\n    /**\n     * @internal\n     */\n    _emitFloat(value) {\n        if (value.toString() === value.toFixed(0)) {\n            return `${value}.0`;\n        }\n        return value.toString();\n    }\n}\n//# sourceMappingURL=nodeMaterialBuildState.js.map","/**\n * Class used to store shared data between 2 NodeMaterialBuildState\n */\nexport class NodeMaterialBuildStateSharedData {\n    /** Creates a new shared data */\n    constructor() {\n        /**\n         * Gets the list of emitted varyings\n         */\n        this.temps = new Array();\n        /**\n         * Gets the list of emitted varyings\n         */\n        this.varyings = new Array();\n        /**\n         * Gets the varying declaration string\n         */\n        this.varyingDeclaration = \"\";\n        /**\n         * Input blocks\n         */\n        this.inputBlocks = new Array();\n        /**\n         * Input blocks\n         */\n        this.textureBlocks = new Array();\n        /**\n         * Bindable blocks (Blocks that need to set data to the effect)\n         */\n        this.bindableBlocks = new Array();\n        /**\n         * Bindable blocks (Blocks that need to set data to the effect) that will always be called (by bindForSubMesh), contrary to bindableBlocks that won't be called if _mustRebind() returns false\n         */\n        this.forcedBindableBlocks = new Array();\n        /**\n         * List of blocks that can provide a compilation fallback\n         */\n        this.blocksWithFallbacks = new Array();\n        /**\n         * List of blocks that can provide a define update\n         */\n        this.blocksWithDefines = new Array();\n        /**\n         * List of blocks that can provide a repeatable content\n         */\n        this.repeatableContentBlocks = new Array();\n        /**\n         * List of blocks that can provide a dynamic list of uniforms\n         */\n        this.dynamicUniformBlocks = new Array();\n        /**\n         * List of blocks that can block the isReady function for the material\n         */\n        this.blockingBlocks = new Array();\n        /**\n         * Gets the list of animated inputs\n         */\n        this.animatedInputs = new Array();\n        /** List of emitted variables */\n        this.variableNames = {};\n        /** List of emitted defines */\n        this.defineNames = {};\n        /**\n         * Gets the compilation hints emitted at compilation time\n         */\n        this.hints = {\n            needWorldViewMatrix: false,\n            needWorldViewProjectionMatrix: false,\n            needAlphaBlending: false,\n            needAlphaTesting: false,\n        };\n        /**\n         * List of compilation checks\n         */\n        this.checks = {\n            emitVertex: false,\n            emitFragment: false,\n            notConnectedNonOptionalInputs: new Array(),\n        };\n        /**\n         * Is vertex program allowed to be empty?\n         */\n        this.allowEmptyVertexProgram = false;\n        // Exclude usual attributes from free variable names\n        this.variableNames[\"position\"] = 0;\n        this.variableNames[\"normal\"] = 0;\n        this.variableNames[\"tangent\"] = 0;\n        this.variableNames[\"uv\"] = 0;\n        this.variableNames[\"uv2\"] = 0;\n        this.variableNames[\"uv3\"] = 0;\n        this.variableNames[\"uv4\"] = 0;\n        this.variableNames[\"uv5\"] = 0;\n        this.variableNames[\"uv6\"] = 0;\n        this.variableNames[\"color\"] = 0;\n        this.variableNames[\"matricesIndices\"] = 0;\n        this.variableNames[\"matricesWeights\"] = 0;\n        this.variableNames[\"matricesIndicesExtra\"] = 0;\n        this.variableNames[\"matricesWeightsExtra\"] = 0;\n        this.variableNames[\"diffuseBase\"] = 0;\n        this.variableNames[\"specularBase\"] = 0;\n        this.variableNames[\"worldPos\"] = 0;\n        this.variableNames[\"shadow\"] = 0;\n        this.variableNames[\"view\"] = 0;\n        // Exclude known varyings\n        this.variableNames[\"vTBN\"] = 0;\n        // Exclude defines\n        this.defineNames[\"MAINUV0\"] = 0;\n        this.defineNames[\"MAINUV1\"] = 0;\n        this.defineNames[\"MAINUV2\"] = 0;\n        this.defineNames[\"MAINUV3\"] = 0;\n        this.defineNames[\"MAINUV4\"] = 0;\n        this.defineNames[\"MAINUV5\"] = 0;\n        this.defineNames[\"MAINUV6\"] = 0;\n        this.defineNames[\"MAINUV7\"] = 0;\n    }\n    /**\n     * Emits console errors and exceptions if there is a failing check\n     */\n    emitErrors() {\n        let errorMessage = \"\";\n        if (!this.checks.emitVertex && !this.allowEmptyVertexProgram) {\n            errorMessage += \"NodeMaterial does not have a vertex output. You need to at least add a block that generates a glPosition value.\\r\\n\";\n        }\n        if (!this.checks.emitFragment) {\n            errorMessage += \"NodeMaterial does not have a fragment output. You need to at least add a block that generates a glFragColor value.\\r\\n\";\n        }\n        for (const notConnectedInput of this.checks.notConnectedNonOptionalInputs) {\n            errorMessage += `input ${notConnectedInput.name} from block ${notConnectedInput.ownerBlock.name}[${notConnectedInput.ownerBlock.getClassName()}] is not connected and is not optional.\\r\\n`;\n        }\n        if (errorMessage) {\n            throw \"Build of NodeMaterial failed:\\r\\n\" + errorMessage;\n        }\n    }\n}\n//# sourceMappingURL=nodeMaterialBuildStateSharedData.js.map","import { __decorate } from \"../../tslib.es6.js\";\nimport { PushMaterial } from \"../pushMaterial.js\";\nimport { ScenePerformancePriority } from \"../../scene.js\";\nimport { AbstractMesh } from \"../../Meshes/abstractMesh.js\";\nimport { Matrix, Vector2 } from \"../../Maths/math.vector.js\";\nimport { Color3, Color4 } from \"../../Maths/math.color.js\";\nimport { Engine } from \"../../Engines/engine.js\";\nimport { NodeMaterialBuildState } from \"./nodeMaterialBuildState.js\";\nimport { Effect } from \"../effect.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { NodeMaterialBlockTargets } from \"./Enums/nodeMaterialBlockTargets.js\";\nimport { NodeMaterialBuildStateSharedData } from \"./nodeMaterialBuildStateSharedData.js\";\nimport { MaterialDefines } from \"../../Materials/materialDefines.js\";\nimport { VertexBuffer } from \"../../Buffers/buffer.js\";\nimport { Tools } from \"../../Misc/tools.js\";\nimport { TransformBlock } from \"./Blocks/transformBlock.js\";\nimport { VertexOutputBlock } from \"./Blocks/Vertex/vertexOutputBlock.js\";\nimport { FragmentOutputBlock } from \"./Blocks/Fragment/fragmentOutputBlock.js\";\nimport { InputBlock } from \"./Blocks/Input/inputBlock.js\";\nimport { GetClass, RegisterClass } from \"../../Misc/typeStore.js\";\nimport { serialize, SerializationHelper } from \"../../Misc/decorators.js\";\nimport { CurrentScreenBlock } from \"./Blocks/Dual/currentScreenBlock.js\";\nimport { ParticleTextureBlock } from \"./Blocks/Particle/particleTextureBlock.js\";\nimport { ParticleRampGradientBlock } from \"./Blocks/Particle/particleRampGradientBlock.js\";\nimport { ParticleBlendMultiplyBlock } from \"./Blocks/Particle/particleBlendMultiplyBlock.js\";\nimport { EffectFallbacks } from \"../effectFallbacks.js\";\nimport { WebRequest } from \"../../Misc/webRequest.js\";\nimport { PostProcess } from \"../../PostProcesses/postProcess.js\";\n\nimport { VectorMergerBlock } from \"./Blocks/vectorMergerBlock.js\";\nimport { RemapBlock } from \"./Blocks/remapBlock.js\";\nimport { MultiplyBlock } from \"./Blocks/multiplyBlock.js\";\nimport { NodeMaterialModes } from \"./Enums/nodeMaterialModes.js\";\nimport { Texture } from \"../Textures/texture.js\";\nimport { BaseParticleSystem } from \"../../Particles/baseParticleSystem.js\";\nimport { ColorSplitterBlock } from \"./Blocks/colorSplitterBlock.js\";\nimport { TimingTools } from \"../../Misc/timingTools.js\";\nimport { ProceduralTexture } from \"../Textures/Procedurals/proceduralTexture.js\";\nimport { AnimatedInputBlockTypes } from \"./Blocks/Input/animatedInputBlockTypes.js\";\nimport { TrigonometryBlock, TrigonometryBlockOperations } from \"./Blocks/trigonometryBlock.js\";\nimport { NodeMaterialSystemValues } from \"./Enums/nodeMaterialSystemValues.js\";\nimport { EngineStore } from \"../../Engines/engineStore.js\";\nimport { MaterialHelper } from \"../materialHelper.js\";\nconst onCreatedEffectParameters = { effect: null, subMesh: null };\n/** @internal */\nexport class NodeMaterialDefines extends MaterialDefines {\n    constructor() {\n        super();\n        this.NORMAL = false;\n        this.TANGENT = false;\n        this.UV1 = false;\n        this.UV2 = false;\n        this.UV3 = false;\n        this.UV4 = false;\n        this.UV5 = false;\n        this.UV6 = false;\n        /** BONES */\n        this.NUM_BONE_INFLUENCERS = 0;\n        this.BonesPerMesh = 0;\n        this.BONETEXTURE = false;\n        /** MORPH TARGETS */\n        this.MORPHTARGETS = false;\n        this.MORPHTARGETS_NORMAL = false;\n        this.MORPHTARGETS_TANGENT = false;\n        this.MORPHTARGETS_UV = false;\n        this.NUM_MORPH_INFLUENCERS = 0;\n        this.MORPHTARGETS_TEXTURE = false;\n        /** IMAGE PROCESSING */\n        this.IMAGEPROCESSING = false;\n        this.VIGNETTE = false;\n        this.VIGNETTEBLENDMODEMULTIPLY = false;\n        this.VIGNETTEBLENDMODEOPAQUE = false;\n        this.TONEMAPPING = false;\n        this.TONEMAPPING_ACES = false;\n        this.CONTRAST = false;\n        this.EXPOSURE = false;\n        this.COLORCURVES = false;\n        this.COLORGRADING = false;\n        this.COLORGRADING3D = false;\n        this.SAMPLER3DGREENDEPTH = false;\n        this.SAMPLER3DBGRMAP = false;\n        this.DITHER = false;\n        this.IMAGEPROCESSINGPOSTPROCESS = false;\n        this.SKIPFINALCOLORCLAMP = false;\n        /** MISC. */\n        this.BUMPDIRECTUV = 0;\n        this.CAMERA_ORTHOGRAPHIC = false;\n        this.CAMERA_PERSPECTIVE = false;\n        this.rebuild();\n    }\n    setValue(name, value, markAsUnprocessedIfDirty = false) {\n        if (this[name] === undefined) {\n            this._keys.push(name);\n        }\n        if (markAsUnprocessedIfDirty && this[name] !== value) {\n            this.markAsUnprocessed();\n        }\n        this[name] = value;\n    }\n}\n/**\n * Class used to create a node based material built by assembling shader blocks\n */\nexport class NodeMaterial extends PushMaterial {\n    /**\n     * Checks if a block is a texture block\n     * @param block The block to check\n     * @returns True if the block is a texture block\n     */\n    static _BlockIsTextureBlock(block) {\n        return (block.getClassName() === \"TextureBlock\" ||\n            block.getClassName() === \"ReflectionTextureBaseBlock\" ||\n            block.getClassName() === \"RefractionBlock\" ||\n            block.getClassName() === \"CurrentScreenBlock\" ||\n            block.getClassName() === \"ParticleTextureBlock\" ||\n            block.getClassName() === \"ImageSourceBlock\" ||\n            block.getClassName() === \"TriPlanarBlock\" ||\n            block.getClassName() === \"BiPlanarBlock\");\n    }\n    /** Get the inspector from bundle or global */\n    _getGlobalNodeMaterialEditor() {\n        // UMD Global name detection from Webpack Bundle UMD Name.\n        if (typeof NODEEDITOR !== \"undefined\") {\n            return NODEEDITOR;\n        }\n        // In case of module let's check the global emitted from the editor entry point.\n        if (typeof BABYLON !== \"undefined\" && typeof BABYLON.NodeEditor !== \"undefined\") {\n            return BABYLON;\n        }\n        return undefined;\n    }\n    /** Gets or sets options to control the node material overall behavior */\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this._options = options;\n    }\n    /**\n     * Gets the image processing configuration used either in this material.\n     */\n    get imageProcessingConfiguration() {\n        return this._imageProcessingConfiguration;\n    }\n    /**\n     * Sets the Default image processing configuration used either in the this material.\n     *\n     * If sets to null, the scene one is in use.\n     */\n    set imageProcessingConfiguration(value) {\n        this._attachImageProcessingConfiguration(value);\n        // Ensure the effect will be rebuilt.\n        this._markAllSubMeshesAsTexturesDirty();\n    }\n    /**\n     * Gets or sets the mode property\n     */\n    get mode() {\n        return this._mode;\n    }\n    set mode(value) {\n        this._mode = value;\n    }\n    /** Gets or sets the unique identifier used to identified the effect associated with the material */\n    get buildId() {\n        return this._buildId;\n    }\n    set buildId(value) {\n        this._buildId = value;\n    }\n    /**\n     * Create a new node based material\n     * @param name defines the material name\n     * @param scene defines the hosting scene\n     * @param options defines creation option\n     */\n    constructor(name, scene, options = {}) {\n        super(name, scene || EngineStore.LastCreatedScene);\n        this._buildId = NodeMaterial._BuildIdGenerator++;\n        this._buildWasSuccessful = false;\n        this._cachedWorldViewMatrix = new Matrix();\n        this._cachedWorldViewProjectionMatrix = new Matrix();\n        this._optimizers = new Array();\n        this._animationFrame = -1;\n        this.BJSNODEMATERIALEDITOR = this._getGlobalNodeMaterialEditor();\n        /**\n         * Gets or sets data used by visual editor\n         * @see https://nme.babylonjs.com\n         */\n        this.editorData = null;\n        /**\n         * Gets or sets a boolean indicating that alpha value must be ignored (This will turn alpha blending off even if an alpha value is produced by the material)\n         */\n        this.ignoreAlpha = false;\n        /**\n         * Defines the maximum number of lights that can be used in the material\n         */\n        this.maxSimultaneousLights = 4;\n        /**\n         * Observable raised when the material is built\n         */\n        this.onBuildObservable = new Observable();\n        /**\n         * Gets or sets the root nodes of the material vertex shader\n         */\n        this._vertexOutputNodes = new Array();\n        /**\n         * Gets or sets the root nodes of the material fragment (pixel) shader\n         */\n        this._fragmentOutputNodes = new Array();\n        /**\n         * Gets an array of blocks that needs to be serialized even if they are not yet connected\n         */\n        this.attachedBlocks = new Array();\n        /**\n         * Specifies the mode of the node material\n         * @internal\n         */\n        this._mode = NodeMaterialModes.Material;\n        /**\n         * Gets or sets a boolean indicating that alpha blending must be enabled no matter what alpha value or alpha channel of the FragmentBlock are\n         */\n        this.forceAlphaBlending = false;\n        this._options = {\n            emitComments: false,\n            ...options,\n        };\n        // Setup the default processing configuration to the scene.\n        this._attachImageProcessingConfiguration(null);\n    }\n    /**\n     * Gets the current class name of the material e.g. \"NodeMaterial\"\n     * @returns the class name\n     */\n    getClassName() {\n        return \"NodeMaterial\";\n    }\n    /**\n     * Attaches a new image processing configuration to the Standard Material.\n     * @param configuration\n     */\n    _attachImageProcessingConfiguration(configuration) {\n        if (configuration === this._imageProcessingConfiguration) {\n            return;\n        }\n        // Detaches observer.\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n        }\n        // Pick the scene configuration if needed.\n        if (!configuration) {\n            this._imageProcessingConfiguration = this.getScene().imageProcessingConfiguration;\n        }\n        else {\n            this._imageProcessingConfiguration = configuration;\n        }\n        // Attaches observer.\n        if (this._imageProcessingConfiguration) {\n            this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(() => {\n                this._markAllSubMeshesAsImageProcessingDirty();\n            });\n        }\n    }\n    /**\n     * Get a block by its name\n     * @param name defines the name of the block to retrieve\n     * @returns the required block or null if not found\n     */\n    getBlockByName(name) {\n        let result = null;\n        for (const block of this.attachedBlocks) {\n            if (block.name === name) {\n                if (!result) {\n                    result = block;\n                }\n                else {\n                    Tools.Warn(\"More than one block was found with the name `\" + name + \"`\");\n                    return result;\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * Get a block by its name\n     * @param predicate defines the predicate used to find the good candidate\n     * @returns the required block or null if not found\n     */\n    getBlockByPredicate(predicate) {\n        for (const block of this.attachedBlocks) {\n            if (predicate(block)) {\n                return block;\n            }\n        }\n        return null;\n    }\n    /**\n     * Get an input block by its name\n     * @param predicate defines the predicate used to find the good candidate\n     * @returns the required input block or null if not found\n     */\n    getInputBlockByPredicate(predicate) {\n        for (const block of this.attachedBlocks) {\n            if (block.isInput && predicate(block)) {\n                return block;\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets the list of input blocks attached to this material\n     * @returns an array of InputBlocks\n     */\n    getInputBlocks() {\n        const blocks = [];\n        for (const block of this.attachedBlocks) {\n            if (block.isInput) {\n                blocks.push(block);\n            }\n        }\n        return blocks;\n    }\n    /**\n     * Adds a new optimizer to the list of optimizers\n     * @param optimizer defines the optimizers to add\n     * @returns the current material\n     */\n    registerOptimizer(optimizer) {\n        const index = this._optimizers.indexOf(optimizer);\n        if (index > -1) {\n            return;\n        }\n        this._optimizers.push(optimizer);\n        return this;\n    }\n    /**\n     * Remove an optimizer from the list of optimizers\n     * @param optimizer defines the optimizers to remove\n     * @returns the current material\n     */\n    unregisterOptimizer(optimizer) {\n        const index = this._optimizers.indexOf(optimizer);\n        if (index === -1) {\n            return;\n        }\n        this._optimizers.splice(index, 1);\n        return this;\n    }\n    /**\n     * Add a new block to the list of output nodes\n     * @param node defines the node to add\n     * @returns the current material\n     */\n    addOutputNode(node) {\n        if (node.target === null) {\n            throw \"This node is not meant to be an output node. You may want to explicitly set its target value.\";\n        }\n        if ((node.target & NodeMaterialBlockTargets.Vertex) !== 0) {\n            this._addVertexOutputNode(node);\n        }\n        if ((node.target & NodeMaterialBlockTargets.Fragment) !== 0) {\n            this._addFragmentOutputNode(node);\n        }\n        return this;\n    }\n    /**\n     * Remove a block from the list of root nodes\n     * @param node defines the node to remove\n     * @returns the current material\n     */\n    removeOutputNode(node) {\n        if (node.target === null) {\n            return this;\n        }\n        if ((node.target & NodeMaterialBlockTargets.Vertex) !== 0) {\n            this._removeVertexOutputNode(node);\n        }\n        if ((node.target & NodeMaterialBlockTargets.Fragment) !== 0) {\n            this._removeFragmentOutputNode(node);\n        }\n        return this;\n    }\n    _addVertexOutputNode(node) {\n        if (this._vertexOutputNodes.indexOf(node) !== -1) {\n            return;\n        }\n        node.target = NodeMaterialBlockTargets.Vertex;\n        this._vertexOutputNodes.push(node);\n        return this;\n    }\n    _removeVertexOutputNode(node) {\n        const index = this._vertexOutputNodes.indexOf(node);\n        if (index === -1) {\n            return;\n        }\n        this._vertexOutputNodes.splice(index, 1);\n        return this;\n    }\n    _addFragmentOutputNode(node) {\n        if (this._fragmentOutputNodes.indexOf(node) !== -1) {\n            return;\n        }\n        node.target = NodeMaterialBlockTargets.Fragment;\n        this._fragmentOutputNodes.push(node);\n        return this;\n    }\n    _removeFragmentOutputNode(node) {\n        const index = this._fragmentOutputNodes.indexOf(node);\n        if (index === -1) {\n            return;\n        }\n        this._fragmentOutputNodes.splice(index, 1);\n        return this;\n    }\n    /**\n     * Specifies if the material will require alpha blending\n     * @returns a boolean specifying if alpha blending is needed\n     */\n    needAlphaBlending() {\n        if (this.ignoreAlpha) {\n            return false;\n        }\n        return this.forceAlphaBlending || this.alpha < 1.0 || (this._sharedData && this._sharedData.hints.needAlphaBlending);\n    }\n    /**\n     * Specifies if this material should be rendered in alpha test mode\n     * @returns a boolean specifying if an alpha test is needed.\n     */\n    needAlphaTesting() {\n        return this._sharedData && this._sharedData.hints.needAlphaTesting;\n    }\n    _initializeBlock(node, state, nodesToProcessForOtherBuildState, autoConfigure = true) {\n        node.initialize(state);\n        if (autoConfigure) {\n            node.autoConfigure(this);\n        }\n        node._preparationId = this._buildId;\n        if (this.attachedBlocks.indexOf(node) === -1) {\n            if (node.isUnique) {\n                const className = node.getClassName();\n                for (const other of this.attachedBlocks) {\n                    if (other.getClassName() === className) {\n                        throw `Cannot have multiple blocks of type ${className} in the same NodeMaterial`;\n                    }\n                }\n            }\n            this.attachedBlocks.push(node);\n        }\n        for (const input of node.inputs) {\n            input.associatedVariableName = \"\";\n            const connectedPoint = input.connectedPoint;\n            if (connectedPoint) {\n                const block = connectedPoint.ownerBlock;\n                if (block !== node) {\n                    if (block.target === NodeMaterialBlockTargets.VertexAndFragment) {\n                        nodesToProcessForOtherBuildState.push(block);\n                    }\n                    else if (state.target === NodeMaterialBlockTargets.Fragment && block.target === NodeMaterialBlockTargets.Vertex && block._preparationId !== this._buildId) {\n                        nodesToProcessForOtherBuildState.push(block);\n                    }\n                    this._initializeBlock(block, state, nodesToProcessForOtherBuildState, autoConfigure);\n                }\n            }\n        }\n        for (const output of node.outputs) {\n            output.associatedVariableName = \"\";\n        }\n    }\n    _resetDualBlocks(node, id) {\n        if (node.target === NodeMaterialBlockTargets.VertexAndFragment) {\n            node.buildId = id;\n        }\n        for (const inputs of node.inputs) {\n            const connectedPoint = inputs.connectedPoint;\n            if (connectedPoint) {\n                const block = connectedPoint.ownerBlock;\n                if (block !== node) {\n                    this._resetDualBlocks(block, id);\n                }\n            }\n        }\n    }\n    /**\n     * Remove a block from the current node material\n     * @param block defines the block to remove\n     */\n    removeBlock(block) {\n        const attachedBlockIndex = this.attachedBlocks.indexOf(block);\n        if (attachedBlockIndex > -1) {\n            this.attachedBlocks.splice(attachedBlockIndex, 1);\n        }\n        if (block.isFinalMerger) {\n            this.removeOutputNode(block);\n        }\n    }\n    /**\n     * Build the material and generates the inner effect\n     * @param verbose defines if the build should log activity\n     * @param updateBuildId defines if the internal build Id should be updated (default is true)\n     * @param autoConfigure defines if the autoConfigure method should be called when initializing blocks (default is true)\n     */\n    build(verbose = false, updateBuildId = true, autoConfigure = true) {\n        this._buildWasSuccessful = false;\n        const engine = this.getScene().getEngine();\n        const allowEmptyVertexProgram = this._mode === NodeMaterialModes.Particle;\n        if (this._vertexOutputNodes.length === 0 && !allowEmptyVertexProgram) {\n            throw \"You must define at least one vertexOutputNode\";\n        }\n        if (this._fragmentOutputNodes.length === 0) {\n            throw \"You must define at least one fragmentOutputNode\";\n        }\n        // Compilation state\n        this._vertexCompilationState = new NodeMaterialBuildState();\n        this._vertexCompilationState.supportUniformBuffers = engine.supportsUniformBuffers;\n        this._vertexCompilationState.target = NodeMaterialBlockTargets.Vertex;\n        this._fragmentCompilationState = new NodeMaterialBuildState();\n        this._fragmentCompilationState.supportUniformBuffers = engine.supportsUniformBuffers;\n        this._fragmentCompilationState.target = NodeMaterialBlockTargets.Fragment;\n        // Shared data\n        this._sharedData = new NodeMaterialBuildStateSharedData();\n        this._sharedData.fragmentOutputNodes = this._fragmentOutputNodes;\n        this._vertexCompilationState.sharedData = this._sharedData;\n        this._fragmentCompilationState.sharedData = this._sharedData;\n        this._sharedData.buildId = this._buildId;\n        this._sharedData.emitComments = this._options.emitComments;\n        this._sharedData.verbose = verbose;\n        this._sharedData.scene = this.getScene();\n        this._sharedData.allowEmptyVertexProgram = allowEmptyVertexProgram;\n        // Initialize blocks\n        const vertexNodes = [];\n        const fragmentNodes = [];\n        for (const vertexOutputNode of this._vertexOutputNodes) {\n            vertexNodes.push(vertexOutputNode);\n            this._initializeBlock(vertexOutputNode, this._vertexCompilationState, fragmentNodes, autoConfigure);\n        }\n        for (const fragmentOutputNode of this._fragmentOutputNodes) {\n            fragmentNodes.push(fragmentOutputNode);\n            this._initializeBlock(fragmentOutputNode, this._fragmentCompilationState, vertexNodes, autoConfigure);\n        }\n        // Optimize\n        this.optimize();\n        // Vertex\n        for (const vertexOutputNode of vertexNodes) {\n            vertexOutputNode.build(this._vertexCompilationState, vertexNodes);\n        }\n        // Fragment\n        this._fragmentCompilationState.uniforms = this._vertexCompilationState.uniforms.slice(0);\n        this._fragmentCompilationState._uniformDeclaration = this._vertexCompilationState._uniformDeclaration;\n        this._fragmentCompilationState._constantDeclaration = this._vertexCompilationState._constantDeclaration;\n        this._fragmentCompilationState._vertexState = this._vertexCompilationState;\n        for (const fragmentOutputNode of fragmentNodes) {\n            this._resetDualBlocks(fragmentOutputNode, this._buildId - 1);\n        }\n        for (const fragmentOutputNode of fragmentNodes) {\n            fragmentOutputNode.build(this._fragmentCompilationState, fragmentNodes);\n        }\n        // Finalize\n        this._vertexCompilationState.finalize(this._vertexCompilationState);\n        this._fragmentCompilationState.finalize(this._fragmentCompilationState);\n        if (updateBuildId) {\n            this._buildId = NodeMaterial._BuildIdGenerator++;\n        }\n        // Errors\n        this._sharedData.emitErrors();\n        if (verbose) {\n            console.log(\"Vertex shader:\");\n            console.log(this._vertexCompilationState.compilationString);\n            console.log(\"Fragment shader:\");\n            console.log(this._fragmentCompilationState.compilationString);\n        }\n        this._buildWasSuccessful = true;\n        this.onBuildObservable.notifyObservers(this);\n        // Wipe defines\n        const meshes = this.getScene().meshes;\n        for (const mesh of meshes) {\n            if (!mesh.subMeshes) {\n                continue;\n            }\n            for (const subMesh of mesh.subMeshes) {\n                if (subMesh.getMaterial() !== this) {\n                    continue;\n                }\n                if (!subMesh.materialDefines) {\n                    continue;\n                }\n                const defines = subMesh.materialDefines;\n                defines.markAllAsDirty();\n                defines.reset();\n            }\n        }\n    }\n    /**\n     * Runs an otpimization phase to try to improve the shader code\n     */\n    optimize() {\n        for (const optimizer of this._optimizers) {\n            optimizer.optimize(this._vertexOutputNodes, this._fragmentOutputNodes);\n        }\n    }\n    _prepareDefinesForAttributes(mesh, defines) {\n        const oldNormal = defines[\"NORMAL\"];\n        const oldTangent = defines[\"TANGENT\"];\n        defines[\"NORMAL\"] = mesh.isVerticesDataPresent(VertexBuffer.NormalKind);\n        defines[\"TANGENT\"] = mesh.isVerticesDataPresent(VertexBuffer.TangentKind);\n        let uvChanged = false;\n        for (let i = 1; i <= 6; ++i) {\n            const oldUV = defines[\"UV\" + i];\n            defines[\"UV\" + i] = mesh.isVerticesDataPresent(`uv${i === 1 ? \"\" : i}`);\n            uvChanged = uvChanged || defines[\"UV\" + i] !== oldUV;\n        }\n        if (oldNormal !== defines[\"NORMAL\"] || oldTangent !== defines[\"TANGENT\"] || uvChanged) {\n            defines.markAsAttributesDirty();\n        }\n    }\n    /**\n     * Create a post process from the material\n     * @param camera The camera to apply the render pass to.\n     * @param options The required width/height ratio to downsize to before computing the render pass. (Use 1.0 for full size)\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     * @param textureFormat Format of textures used when performing the post process. (default: TEXTUREFORMAT_RGBA)\n     * @returns the post process created\n     */\n    createPostProcess(camera, options = 1, samplingMode = 1, engine, reusable, textureType = 0, textureFormat = 5) {\n        if (this.mode !== NodeMaterialModes.PostProcess) {\n            console.log(\"Incompatible material mode\");\n            return null;\n        }\n        return this._createEffectForPostProcess(null, camera, options, samplingMode, engine, reusable, textureType, textureFormat);\n    }\n    /**\n     * Create the post process effect from the material\n     * @param postProcess The post process to create the effect for\n     */\n    createEffectForPostProcess(postProcess) {\n        this._createEffectForPostProcess(postProcess);\n    }\n    _createEffectForPostProcess(postProcess, camera, options = 1, samplingMode = 1, engine, reusable, textureType = 0, textureFormat = 5) {\n        let tempName = this.name + this._buildId;\n        const defines = new NodeMaterialDefines();\n        const dummyMesh = new AbstractMesh(tempName + \"PostProcess\", this.getScene());\n        let buildId = this._buildId;\n        this._processDefines(dummyMesh, defines);\n        Effect.RegisterShader(tempName, this._fragmentCompilationState._builtCompilationString, this._vertexCompilationState._builtCompilationString);\n        if (!postProcess) {\n            postProcess = new PostProcess(this.name + \"PostProcess\", tempName, this._fragmentCompilationState.uniforms, this._fragmentCompilationState.samplers, options, camera, samplingMode, engine, reusable, defines.toString(), textureType, tempName, { maxSimultaneousLights: this.maxSimultaneousLights }, false, textureFormat);\n        }\n        else {\n            postProcess.updateEffect(defines.toString(), this._fragmentCompilationState.uniforms, this._fragmentCompilationState.samplers, { maxSimultaneousLights: this.maxSimultaneousLights }, undefined, undefined, tempName, tempName);\n        }\n        postProcess.nodeMaterialSource = this;\n        postProcess.onApplyObservable.add((effect) => {\n            if (buildId !== this._buildId) {\n                delete Effect.ShadersStore[tempName + \"VertexShader\"];\n                delete Effect.ShadersStore[tempName + \"PixelShader\"];\n                tempName = this.name + this._buildId;\n                defines.markAllAsDirty();\n                buildId = this._buildId;\n            }\n            const result = this._processDefines(dummyMesh, defines);\n            if (result) {\n                Effect.RegisterShader(tempName, this._fragmentCompilationState._builtCompilationString, this._vertexCompilationState._builtCompilationString);\n                TimingTools.SetImmediate(() => postProcess.updateEffect(defines.toString(), this._fragmentCompilationState.uniforms, this._fragmentCompilationState.samplers, { maxSimultaneousLights: this.maxSimultaneousLights }, undefined, undefined, tempName, tempName));\n            }\n            this._checkInternals(effect);\n        });\n        return postProcess;\n    }\n    /**\n     * Create a new procedural texture based on this node material\n     * @param size defines the size of the texture\n     * @param scene defines the hosting scene\n     * @returns the new procedural texture attached to this node material\n     */\n    createProceduralTexture(size, scene) {\n        if (this.mode !== NodeMaterialModes.ProceduralTexture) {\n            console.log(\"Incompatible material mode\");\n            return null;\n        }\n        let tempName = this.name + this._buildId;\n        const proceduralTexture = new ProceduralTexture(tempName, size, null, scene);\n        const dummyMesh = new AbstractMesh(tempName + \"Procedural\", this.getScene());\n        dummyMesh.reservedDataStore = {\n            hidden: true,\n        };\n        const defines = new NodeMaterialDefines();\n        const result = this._processDefines(dummyMesh, defines);\n        Effect.RegisterShader(tempName, this._fragmentCompilationState._builtCompilationString, this._vertexCompilationState._builtCompilationString);\n        let effect = this.getScene().getEngine().createEffect({\n            vertexElement: tempName,\n            fragmentElement: tempName,\n        }, [VertexBuffer.PositionKind], this._fragmentCompilationState.uniforms, this._fragmentCompilationState.samplers, defines.toString(), result === null || result === void 0 ? void 0 : result.fallbacks, undefined);\n        proceduralTexture.nodeMaterialSource = this;\n        proceduralTexture._setEffect(effect);\n        let buildId = this._buildId;\n        proceduralTexture.onBeforeGenerationObservable.add(() => {\n            if (buildId !== this._buildId) {\n                delete Effect.ShadersStore[tempName + \"VertexShader\"];\n                delete Effect.ShadersStore[tempName + \"PixelShader\"];\n                tempName = this.name + this._buildId;\n                defines.markAllAsDirty();\n                buildId = this._buildId;\n            }\n            const result = this._processDefines(dummyMesh, defines);\n            if (result) {\n                Effect.RegisterShader(tempName, this._fragmentCompilationState._builtCompilationString, this._vertexCompilationState._builtCompilationString);\n                TimingTools.SetImmediate(() => {\n                    effect = this.getScene().getEngine().createEffect({\n                        vertexElement: tempName,\n                        fragmentElement: tempName,\n                    }, [VertexBuffer.PositionKind], this._fragmentCompilationState.uniforms, this._fragmentCompilationState.samplers, defines.toString(), result === null || result === void 0 ? void 0 : result.fallbacks, undefined);\n                    proceduralTexture._setEffect(effect);\n                });\n            }\n            this._checkInternals(effect);\n        });\n        return proceduralTexture;\n    }\n    _createEffectForParticles(particleSystem, blendMode, onCompiled, onError, effect, defines, dummyMesh, particleSystemDefinesJoined = \"\") {\n        let tempName = this.name + this._buildId + \"_\" + blendMode;\n        if (!defines) {\n            defines = new NodeMaterialDefines();\n        }\n        if (!dummyMesh) {\n            dummyMesh = this.getScene().getMeshByName(this.name + \"Particle\");\n            if (!dummyMesh) {\n                dummyMesh = new AbstractMesh(this.name + \"Particle\", this.getScene());\n                dummyMesh.reservedDataStore = {\n                    hidden: true,\n                };\n            }\n        }\n        let buildId = this._buildId;\n        const particleSystemDefines = [];\n        let join = particleSystemDefinesJoined;\n        if (!effect) {\n            const result = this._processDefines(dummyMesh, defines);\n            Effect.RegisterShader(tempName, this._fragmentCompilationState._builtCompilationString);\n            particleSystem.fillDefines(particleSystemDefines, blendMode);\n            join = particleSystemDefines.join(\"\\n\");\n            effect = this.getScene()\n                .getEngine()\n                .createEffectForParticles(tempName, this._fragmentCompilationState.uniforms, this._fragmentCompilationState.samplers, defines.toString() + \"\\n\" + join, result === null || result === void 0 ? void 0 : result.fallbacks, onCompiled, onError, particleSystem);\n            particleSystem.setCustomEffect(effect, blendMode);\n        }\n        effect.onBindObservable.add((effect) => {\n            if (buildId !== this._buildId) {\n                delete Effect.ShadersStore[tempName + \"PixelShader\"];\n                tempName = this.name + this._buildId + \"_\" + blendMode;\n                defines.markAllAsDirty();\n                buildId = this._buildId;\n            }\n            particleSystemDefines.length = 0;\n            particleSystem.fillDefines(particleSystemDefines, blendMode);\n            const particleSystemDefinesJoinedCurrent = particleSystemDefines.join(\"\\n\");\n            if (particleSystemDefinesJoinedCurrent !== join) {\n                defines.markAllAsDirty();\n                join = particleSystemDefinesJoinedCurrent;\n            }\n            const result = this._processDefines(dummyMesh, defines);\n            if (result) {\n                Effect.RegisterShader(tempName, this._fragmentCompilationState._builtCompilationString);\n                effect = this.getScene()\n                    .getEngine()\n                    .createEffectForParticles(tempName, this._fragmentCompilationState.uniforms, this._fragmentCompilationState.samplers, defines.toString() + \"\\n\" + join, result === null || result === void 0 ? void 0 : result.fallbacks, onCompiled, onError, particleSystem);\n                particleSystem.setCustomEffect(effect, blendMode);\n                this._createEffectForParticles(particleSystem, blendMode, onCompiled, onError, effect, defines, dummyMesh, particleSystemDefinesJoined); // add the effect.onBindObservable observer\n                return;\n            }\n            this._checkInternals(effect);\n        });\n    }\n    _checkInternals(effect) {\n        // Animated blocks\n        if (this._sharedData.animatedInputs) {\n            const scene = this.getScene();\n            const frameId = scene.getFrameId();\n            if (this._animationFrame !== frameId) {\n                for (const input of this._sharedData.animatedInputs) {\n                    input.animate(scene);\n                }\n                this._animationFrame = frameId;\n            }\n        }\n        // Bindable blocks\n        for (const block of this._sharedData.bindableBlocks) {\n            block.bind(effect, this);\n        }\n        // Connection points\n        for (const inputBlock of this._sharedData.inputBlocks) {\n            inputBlock._transmit(effect, this.getScene(), this);\n        }\n    }\n    /**\n     * Create the effect to be used as the custom effect for a particle system\n     * @param particleSystem Particle system to create the effect for\n     * @param onCompiled defines a function to call when the effect creation is successful\n     * @param onError defines a function to call when the effect creation has failed\n     */\n    createEffectForParticles(particleSystem, onCompiled, onError) {\n        if (this.mode !== NodeMaterialModes.Particle) {\n            console.log(\"Incompatible material mode\");\n            return;\n        }\n        this._createEffectForParticles(particleSystem, BaseParticleSystem.BLENDMODE_ONEONE, onCompiled, onError);\n        this._createEffectForParticles(particleSystem, BaseParticleSystem.BLENDMODE_MULTIPLY, onCompiled, onError);\n    }\n    /**\n     * Use this material as the shadow depth wrapper of a target material\n     * @param targetMaterial defines the target material\n     */\n    createAsShadowDepthWrapper(targetMaterial) {\n        if (this.mode !== NodeMaterialModes.Material) {\n            console.log(\"Incompatible material mode\");\n            return;\n        }\n        targetMaterial.shadowDepthWrapper = new BABYLON.ShadowDepthWrapper(this, this.getScene());\n    }\n    _processDefines(mesh, defines, useInstances = false, subMesh) {\n        let result = null;\n        // Global defines\n        const scene = this.getScene();\n        if (MaterialHelper.PrepareDefinesForCamera(scene, defines)) {\n            defines.markAsMiscDirty();\n        }\n        // Shared defines\n        this._sharedData.blocksWithDefines.forEach((b) => {\n            b.initializeDefines(mesh, this, defines, useInstances);\n        });\n        this._sharedData.blocksWithDefines.forEach((b) => {\n            b.prepareDefines(mesh, this, defines, useInstances, subMesh);\n        });\n        // Need to recompile?\n        if (defines.isDirty) {\n            const lightDisposed = defines._areLightsDisposed;\n            defines.markAsProcessed();\n            // Repeatable content generators\n            this._vertexCompilationState.compilationString = this._vertexCompilationState._builtCompilationString;\n            this._fragmentCompilationState.compilationString = this._fragmentCompilationState._builtCompilationString;\n            this._sharedData.repeatableContentBlocks.forEach((b) => {\n                b.replaceRepeatableContent(this._vertexCompilationState, this._fragmentCompilationState, mesh, defines);\n            });\n            // Uniforms\n            const uniformBuffers = [];\n            this._sharedData.dynamicUniformBlocks.forEach((b) => {\n                b.updateUniformsAndSamples(this._vertexCompilationState, this, defines, uniformBuffers);\n            });\n            const mergedUniforms = this._vertexCompilationState.uniforms;\n            this._fragmentCompilationState.uniforms.forEach((u) => {\n                const index = mergedUniforms.indexOf(u);\n                if (index === -1) {\n                    mergedUniforms.push(u);\n                }\n            });\n            // Samplers\n            const mergedSamplers = this._vertexCompilationState.samplers;\n            this._fragmentCompilationState.samplers.forEach((s) => {\n                const index = mergedSamplers.indexOf(s);\n                if (index === -1) {\n                    mergedSamplers.push(s);\n                }\n            });\n            const fallbacks = new EffectFallbacks();\n            this._sharedData.blocksWithFallbacks.forEach((b) => {\n                b.provideFallbacks(mesh, fallbacks);\n            });\n            result = {\n                lightDisposed,\n                uniformBuffers,\n                mergedUniforms,\n                mergedSamplers,\n                fallbacks,\n            };\n        }\n        return result;\n    }\n    /**\n     * Get if the submesh is ready to be used and all its information available.\n     * Child classes can use it to update shaders\n     * @param mesh defines the mesh to check\n     * @param subMesh defines which submesh to check\n     * @param useInstances specifies that instances should be used\n     * @returns a boolean indicating that the submesh is ready or not\n     */\n    isReadyForSubMesh(mesh, subMesh, useInstances = false) {\n        if (!this._buildWasSuccessful) {\n            return false;\n        }\n        const scene = this.getScene();\n        if (this._sharedData.animatedInputs) {\n            const frameId = scene.getFrameId();\n            if (this._animationFrame !== frameId) {\n                for (const input of this._sharedData.animatedInputs) {\n                    input.animate(scene);\n                }\n                this._animationFrame = frameId;\n            }\n        }\n        if (subMesh.effect && this.isFrozen) {\n            if (subMesh.effect._wasPreviouslyReady && subMesh.effect._wasPreviouslyUsingInstances === useInstances) {\n                return true;\n            }\n        }\n        if (!subMesh.materialDefines) {\n            subMesh.materialDefines = new NodeMaterialDefines();\n        }\n        const defines = subMesh.materialDefines;\n        if (this._isReadyForSubMesh(subMesh)) {\n            return true;\n        }\n        const engine = scene.getEngine();\n        this._prepareDefinesForAttributes(mesh, defines);\n        // Check if blocks are ready\n        if (this._sharedData.blockingBlocks.some((b) => !b.isReady(mesh, this, defines, useInstances))) {\n            return false;\n        }\n        const result = this._processDefines(mesh, defines, useInstances, subMesh);\n        if (result) {\n            const previousEffect = subMesh.effect;\n            // Compilation\n            const join = defines.toString();\n            let effect = engine.createEffect({\n                vertex: \"nodeMaterial\" + this._buildId,\n                fragment: \"nodeMaterial\" + this._buildId,\n                vertexSource: this._vertexCompilationState.compilationString,\n                fragmentSource: this._fragmentCompilationState.compilationString,\n            }, {\n                attributes: this._vertexCompilationState.attributes,\n                uniformsNames: result.mergedUniforms,\n                uniformBuffersNames: result.uniformBuffers,\n                samplers: result.mergedSamplers,\n                defines: join,\n                fallbacks: result.fallbacks,\n                onCompiled: this.onCompiled,\n                onError: this.onError,\n                indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights, maxSimultaneousMorphTargets: defines.NUM_MORPH_INFLUENCERS },\n            }, engine);\n            if (effect) {\n                if (this._onEffectCreatedObservable) {\n                    onCreatedEffectParameters.effect = effect;\n                    onCreatedEffectParameters.subMesh = subMesh;\n                    this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\n                }\n                // Use previous effect while new one is compiling\n                if (this.allowShaderHotSwapping && previousEffect && !effect.isReady()) {\n                    effect = previousEffect;\n                    defines.markAsUnprocessed();\n                    if (result.lightDisposed) {\n                        // re register in case it takes more than one frame.\n                        defines._areLightsDisposed = true;\n                        return false;\n                    }\n                }\n                else {\n                    scene.resetCachedMaterial();\n                    subMesh.setEffect(effect, defines, this._materialContext);\n                }\n            }\n        }\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false;\n        }\n        defines._renderId = scene.getRenderId();\n        subMesh.effect._wasPreviouslyReady = true;\n        subMesh.effect._wasPreviouslyUsingInstances = useInstances;\n        if (scene.performancePriority !== ScenePerformancePriority.BackwardCompatible) {\n            this.checkReadyOnlyOnce = true;\n        }\n        return true;\n    }\n    /**\n     * Get a string representing the shaders built by the current node graph\n     */\n    get compiledShaders() {\n        return `// Vertex shader\\r\\n${this._vertexCompilationState.compilationString}\\r\\n\\r\\n// Fragment shader\\r\\n${this._fragmentCompilationState.compilationString}`;\n    }\n    /**\n     * Binds the world matrix to the material\n     * @param world defines the world transformation matrix\n     */\n    bindOnlyWorldMatrix(world) {\n        const scene = this.getScene();\n        if (!this._activeEffect) {\n            return;\n        }\n        const hints = this._sharedData.hints;\n        if (hints.needWorldViewMatrix) {\n            world.multiplyToRef(scene.getViewMatrix(), this._cachedWorldViewMatrix);\n        }\n        if (hints.needWorldViewProjectionMatrix) {\n            world.multiplyToRef(scene.getTransformMatrix(), this._cachedWorldViewProjectionMatrix);\n        }\n        // Connection points\n        for (const inputBlock of this._sharedData.inputBlocks) {\n            inputBlock._transmitWorld(this._activeEffect, world, this._cachedWorldViewMatrix, this._cachedWorldViewProjectionMatrix);\n        }\n    }\n    /**\n     * Binds the submesh to this material by preparing the effect and shader to draw\n     * @param world defines the world transformation matrix\n     * @param mesh defines the mesh containing the submesh\n     * @param subMesh defines the submesh to bind the material to\n     */\n    bindForSubMesh(world, mesh, subMesh) {\n        const scene = this.getScene();\n        const effect = subMesh.effect;\n        if (!effect) {\n            return;\n        }\n        this._activeEffect = effect;\n        // Matrices\n        this.bindOnlyWorldMatrix(world);\n        const mustRebind = this._mustRebind(scene, effect, mesh.visibility);\n        const sharedData = this._sharedData;\n        if (mustRebind) {\n            // Bindable blocks\n            for (const block of sharedData.bindableBlocks) {\n                block.bind(effect, this, mesh, subMesh);\n            }\n            for (const block of sharedData.forcedBindableBlocks) {\n                block.bind(effect, this, mesh, subMesh);\n            }\n            // Connection points\n            for (const inputBlock of sharedData.inputBlocks) {\n                inputBlock._transmit(effect, scene, this);\n            }\n        }\n        else if (!this.isFrozen) {\n            for (const block of sharedData.forcedBindableBlocks) {\n                block.bind(effect, this, mesh, subMesh);\n            }\n        }\n        this._afterBind(mesh, this._activeEffect);\n    }\n    /**\n     * Gets the active textures from the material\n     * @returns an array of textures\n     */\n    getActiveTextures() {\n        const activeTextures = super.getActiveTextures();\n        if (this._sharedData) {\n            activeTextures.push(...this._sharedData.textureBlocks.filter((tb) => tb.texture).map((tb) => tb.texture));\n        }\n        return activeTextures;\n    }\n    /**\n     * Gets the list of texture blocks\n     * Note that this method will only return blocks that are reachable from the final block(s) and only after the material has been built!\n     * @returns an array of texture blocks\n     */\n    getTextureBlocks() {\n        if (!this._sharedData) {\n            return [];\n        }\n        return this._sharedData.textureBlocks;\n    }\n    /**\n     * Gets the list of all texture blocks\n     * Note that this method will scan all attachedBlocks and return blocks that are texture blocks\n     * @returns\n     */\n    getAllTextureBlocks() {\n        const textureBlocks = [];\n        for (const block of this.attachedBlocks) {\n            if (NodeMaterial._BlockIsTextureBlock(block)) {\n                textureBlocks.push(block);\n            }\n        }\n        return textureBlocks;\n    }\n    /**\n     * Specifies if the material uses a texture\n     * @param texture defines the texture to check against the material\n     * @returns a boolean specifying if the material uses the texture\n     */\n    hasTexture(texture) {\n        if (super.hasTexture(texture)) {\n            return true;\n        }\n        if (!this._sharedData) {\n            return false;\n        }\n        for (const t of this._sharedData.textureBlocks) {\n            if (t.texture === texture) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Disposes the material\n     * @param forceDisposeEffect specifies if effects should be forcefully disposed\n     * @param forceDisposeTextures specifies if textures should be forcefully disposed\n     * @param notBoundToMesh specifies if the material that is being disposed is known to be not bound to any mesh\n     */\n    dispose(forceDisposeEffect, forceDisposeTextures, notBoundToMesh) {\n        if (forceDisposeTextures) {\n            for (const texture of this.getTextureBlocks()\n                .filter((tb) => tb.texture)\n                .map((tb) => tb.texture)) {\n                texture.dispose();\n            }\n        }\n        for (const block of this.attachedBlocks) {\n            block.dispose();\n        }\n        this.attachedBlocks.length = 0;\n        this._sharedData = null;\n        this._vertexCompilationState = null;\n        this._fragmentCompilationState = null;\n        this.onBuildObservable.clear();\n        if (this._imageProcessingObserver) {\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n            this._imageProcessingObserver = null;\n        }\n        super.dispose(forceDisposeEffect, forceDisposeTextures, notBoundToMesh);\n    }\n    /** Creates the node editor window. */\n    _createNodeEditor() {\n        this.BJSNODEMATERIALEDITOR.NodeEditor.Show({\n            nodeMaterial: this,\n        });\n    }\n    /**\n     * Launch the node material editor\n     * @param config Define the configuration of the editor\n     * @returns a promise fulfilled when the node editor is visible\n     */\n    edit(config) {\n        return new Promise((resolve) => {\n            this.BJSNODEMATERIALEDITOR = this.BJSNODEMATERIALEDITOR || this._getGlobalNodeMaterialEditor();\n            if (typeof this.BJSNODEMATERIALEDITOR == \"undefined\") {\n                const editorUrl = config && config.editorURL ? config.editorURL : NodeMaterial.EditorURL;\n                // Load editor and add it to the DOM\n                Tools.LoadScript(editorUrl, () => {\n                    this.BJSNODEMATERIALEDITOR = this.BJSNODEMATERIALEDITOR || this._getGlobalNodeMaterialEditor();\n                    this._createNodeEditor();\n                    resolve();\n                });\n            }\n            else {\n                // Otherwise creates the editor\n                this._createNodeEditor();\n                resolve();\n            }\n        });\n    }\n    /**\n     * Clear the current material\n     */\n    clear() {\n        this._vertexOutputNodes.length = 0;\n        this._fragmentOutputNodes.length = 0;\n        this.attachedBlocks.length = 0;\n    }\n    /**\n     * Clear the current material and set it to a default state\n     */\n    setToDefault() {\n        this.clear();\n        this.editorData = null;\n        const positionInput = new InputBlock(\"Position\");\n        positionInput.setAsAttribute(\"position\");\n        const worldInput = new InputBlock(\"World\");\n        worldInput.setAsSystemValue(NodeMaterialSystemValues.World);\n        const worldPos = new TransformBlock(\"WorldPos\");\n        positionInput.connectTo(worldPos);\n        worldInput.connectTo(worldPos);\n        const viewProjectionInput = new InputBlock(\"ViewProjection\");\n        viewProjectionInput.setAsSystemValue(NodeMaterialSystemValues.ViewProjection);\n        const worldPosdMultipliedByViewProjection = new TransformBlock(\"WorldPos * ViewProjectionTransform\");\n        worldPos.connectTo(worldPosdMultipliedByViewProjection);\n        viewProjectionInput.connectTo(worldPosdMultipliedByViewProjection);\n        const vertexOutput = new VertexOutputBlock(\"VertexOutput\");\n        worldPosdMultipliedByViewProjection.connectTo(vertexOutput);\n        // Pixel\n        const pixelColor = new InputBlock(\"color\");\n        pixelColor.value = new Color4(0.8, 0.8, 0.8, 1);\n        const fragmentOutput = new FragmentOutputBlock(\"FragmentOutput\");\n        pixelColor.connectTo(fragmentOutput);\n        // Add to nodes\n        this.addOutputNode(vertexOutput);\n        this.addOutputNode(fragmentOutput);\n        this._mode = NodeMaterialModes.Material;\n    }\n    /**\n     * Clear the current material and set it to a default state for post process\n     */\n    setToDefaultPostProcess() {\n        this.clear();\n        this.editorData = null;\n        const position = new InputBlock(\"Position\");\n        position.setAsAttribute(\"position2d\");\n        const const1 = new InputBlock(\"Constant1\");\n        const1.isConstant = true;\n        const1.value = 1;\n        const vmerger = new VectorMergerBlock(\"Position3D\");\n        position.connectTo(vmerger);\n        const1.connectTo(vmerger, { input: \"w\" });\n        const vertexOutput = new VertexOutputBlock(\"VertexOutput\");\n        vmerger.connectTo(vertexOutput);\n        // Pixel\n        const scale = new InputBlock(\"Scale\");\n        scale.visibleInInspector = true;\n        scale.value = new Vector2(1, 1);\n        const uv0 = new RemapBlock(\"uv0\");\n        position.connectTo(uv0);\n        const uv = new MultiplyBlock(\"UV scale\");\n        uv0.connectTo(uv);\n        scale.connectTo(uv);\n        const currentScreen = new CurrentScreenBlock(\"CurrentScreen\");\n        uv.connectTo(currentScreen);\n        currentScreen.texture = new Texture(\"https://assets.babylonjs.com/nme/currentScreenPostProcess.png\", this.getScene());\n        const fragmentOutput = new FragmentOutputBlock(\"FragmentOutput\");\n        currentScreen.connectTo(fragmentOutput, { output: \"rgba\" });\n        // Add to nodes\n        this.addOutputNode(vertexOutput);\n        this.addOutputNode(fragmentOutput);\n        this._mode = NodeMaterialModes.PostProcess;\n    }\n    /**\n     * Clear the current material and set it to a default state for procedural texture\n     */\n    setToDefaultProceduralTexture() {\n        this.clear();\n        this.editorData = null;\n        const position = new InputBlock(\"Position\");\n        position.setAsAttribute(\"position2d\");\n        const const1 = new InputBlock(\"Constant1\");\n        const1.isConstant = true;\n        const1.value = 1;\n        const vmerger = new VectorMergerBlock(\"Position3D\");\n        position.connectTo(vmerger);\n        const1.connectTo(vmerger, { input: \"w\" });\n        const vertexOutput = new VertexOutputBlock(\"VertexOutput\");\n        vmerger.connectTo(vertexOutput);\n        // Pixel\n        const time = new InputBlock(\"Time\");\n        time.value = 0;\n        time.min = 0;\n        time.max = 0;\n        time.isBoolean = false;\n        time.matrixMode = 0;\n        time.animationType = AnimatedInputBlockTypes.Time;\n        time.isConstant = false;\n        const color = new InputBlock(\"Color3\");\n        color.value = new Color3(1, 1, 1);\n        color.isConstant = false;\n        const fragmentOutput = new FragmentOutputBlock(\"FragmentOutput\");\n        const vectorMerger = new VectorMergerBlock(\"VectorMerger\");\n        vectorMerger.visibleInInspector = false;\n        const cos = new TrigonometryBlock(\"Cos\");\n        cos.operation = TrigonometryBlockOperations.Cos;\n        position.connectTo(vectorMerger);\n        time.output.connectTo(cos.input);\n        cos.output.connectTo(vectorMerger.z);\n        vectorMerger.xyzOut.connectTo(fragmentOutput.rgb);\n        // Add to nodes\n        this.addOutputNode(vertexOutput);\n        this.addOutputNode(fragmentOutput);\n        this._mode = NodeMaterialModes.ProceduralTexture;\n    }\n    /**\n     * Clear the current material and set it to a default state for particle\n     */\n    setToDefaultParticle() {\n        this.clear();\n        this.editorData = null;\n        // Pixel\n        const uv = new InputBlock(\"uv\");\n        uv.setAsAttribute(\"particle_uv\");\n        const texture = new ParticleTextureBlock(\"ParticleTexture\");\n        uv.connectTo(texture);\n        const color = new InputBlock(\"Color\");\n        color.setAsAttribute(\"particle_color\");\n        const multiply = new MultiplyBlock(\"Texture * Color\");\n        texture.connectTo(multiply);\n        color.connectTo(multiply);\n        const rampGradient = new ParticleRampGradientBlock(\"ParticleRampGradient\");\n        multiply.connectTo(rampGradient);\n        const cSplitter = new ColorSplitterBlock(\"ColorSplitter\");\n        color.connectTo(cSplitter);\n        const blendMultiply = new ParticleBlendMultiplyBlock(\"ParticleBlendMultiply\");\n        rampGradient.connectTo(blendMultiply);\n        texture.connectTo(blendMultiply, { output: \"a\" });\n        cSplitter.connectTo(blendMultiply, { output: \"a\" });\n        const fragmentOutput = new FragmentOutputBlock(\"FragmentOutput\");\n        blendMultiply.connectTo(fragmentOutput);\n        // Add to nodes\n        this.addOutputNode(fragmentOutput);\n        this._mode = NodeMaterialModes.Particle;\n    }\n    /**\n     * Loads the current Node Material from a url pointing to a file save by the Node Material Editor\n     * @deprecated Please use NodeMaterial.ParseFromFileAsync instead\n     * @param url defines the url to load from\n     * @param rootUrl defines the root URL for nested url in the node material\n     * @returns a promise that will fulfil when the material is fully loaded\n     */\n    async loadAsync(url, rootUrl = \"\") {\n        return NodeMaterial.ParseFromFileAsync(\"\", url, this.getScene(), rootUrl, true, this);\n    }\n    _gatherBlocks(rootNode, list) {\n        if (list.indexOf(rootNode) !== -1) {\n            return;\n        }\n        list.push(rootNode);\n        for (const input of rootNode.inputs) {\n            const connectedPoint = input.connectedPoint;\n            if (connectedPoint) {\n                const block = connectedPoint.ownerBlock;\n                if (block !== rootNode) {\n                    this._gatherBlocks(block, list);\n                }\n            }\n        }\n    }\n    /**\n     * Generate a string containing the code declaration required to create an equivalent of this material\n     * @returns a string\n     */\n    generateCode() {\n        let alreadyDumped = [];\n        const vertexBlocks = [];\n        const uniqueNames = [\"const\", \"var\", \"let\"];\n        // Gets active blocks\n        for (const outputNode of this._vertexOutputNodes) {\n            this._gatherBlocks(outputNode, vertexBlocks);\n        }\n        const fragmentBlocks = [];\n        for (const outputNode of this._fragmentOutputNodes) {\n            this._gatherBlocks(outputNode, fragmentBlocks);\n        }\n        // Generate vertex shader\n        let codeString = `var nodeMaterial = new BABYLON.NodeMaterial(\"${this.name || \"node material\"}\");\\r\\n`;\n        for (const node of vertexBlocks) {\n            if (node.isInput && alreadyDumped.indexOf(node) === -1) {\n                codeString += node._dumpCode(uniqueNames, alreadyDumped);\n            }\n        }\n        // Generate fragment shader\n        for (const node of fragmentBlocks) {\n            if (node.isInput && alreadyDumped.indexOf(node) === -1) {\n                codeString += node._dumpCode(uniqueNames, alreadyDumped);\n            }\n        }\n        // Connections\n        alreadyDumped = [];\n        codeString += \"\\r\\n// Connections\\r\\n\";\n        for (const node of this._vertexOutputNodes) {\n            codeString += node._dumpCodeForOutputConnections(alreadyDumped);\n        }\n        for (const node of this._fragmentOutputNodes) {\n            codeString += node._dumpCodeForOutputConnections(alreadyDumped);\n        }\n        // Output nodes\n        codeString += \"\\r\\n// Output nodes\\r\\n\";\n        for (const node of this._vertexOutputNodes) {\n            codeString += `nodeMaterial.addOutputNode(${node._codeVariableName});\\r\\n`;\n        }\n        for (const node of this._fragmentOutputNodes) {\n            codeString += `nodeMaterial.addOutputNode(${node._codeVariableName});\\r\\n`;\n        }\n        codeString += `nodeMaterial.build();\\r\\n`;\n        return codeString;\n    }\n    /**\n     * Serializes this material in a JSON representation\n     * @param selectedBlocks\n     * @returns the serialized material object\n     */\n    serialize(selectedBlocks) {\n        const serializationObject = selectedBlocks ? {} : SerializationHelper.Serialize(this);\n        serializationObject.editorData = JSON.parse(JSON.stringify(this.editorData)); // Copy\n        let blocks = [];\n        if (selectedBlocks) {\n            blocks = selectedBlocks;\n        }\n        else {\n            serializationObject.customType = \"BABYLON.NodeMaterial\";\n            serializationObject.outputNodes = [];\n            // Outputs\n            for (const outputNode of this._vertexOutputNodes) {\n                this._gatherBlocks(outputNode, blocks);\n                serializationObject.outputNodes.push(outputNode.uniqueId);\n            }\n            for (const outputNode of this._fragmentOutputNodes) {\n                this._gatherBlocks(outputNode, blocks);\n                if (serializationObject.outputNodes.indexOf(outputNode.uniqueId) === -1) {\n                    serializationObject.outputNodes.push(outputNode.uniqueId);\n                }\n            }\n        }\n        // Blocks\n        serializationObject.blocks = [];\n        for (const block of blocks) {\n            serializationObject.blocks.push(block.serialize());\n        }\n        if (!selectedBlocks) {\n            for (const block of this.attachedBlocks) {\n                if (blocks.indexOf(block) !== -1) {\n                    continue;\n                }\n                serializationObject.blocks.push(block.serialize());\n            }\n        }\n        return serializationObject;\n    }\n    _restoreConnections(block, source, map) {\n        for (const outputPoint of block.outputs) {\n            for (const candidate of source.blocks) {\n                const target = map[candidate.id];\n                if (!target) {\n                    continue;\n                }\n                for (const input of candidate.inputs) {\n                    if (map[input.targetBlockId] === block && input.targetConnectionName === outputPoint.name) {\n                        const inputPoint = target.getInputByName(input.inputName);\n                        if (!inputPoint || inputPoint.isConnected) {\n                            continue;\n                        }\n                        outputPoint.connectTo(inputPoint, true);\n                        this._restoreConnections(target, source, map);\n                        continue;\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Clear the current graph and load a new one from a serialization object\n     * @param source defines the JSON representation of the material\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\n     * @param merge defines whether or not the source must be merged or replace the current content\n     */\n    parseSerializedObject(source, rootUrl = \"\", merge = false) {\n        var _a;\n        if (!merge) {\n            this.clear();\n        }\n        const map = {};\n        // Create blocks\n        for (const parsedBlock of source.blocks) {\n            const blockType = GetClass(parsedBlock.customType);\n            if (blockType) {\n                const block = new blockType();\n                block._deserialize(parsedBlock, this.getScene(), rootUrl);\n                map[parsedBlock.id] = block;\n                this.attachedBlocks.push(block);\n            }\n        }\n        // Connections - Starts with input blocks only (except if in \"merge\" mode where we scan all blocks)\n        for (let blockIndex = 0; blockIndex < source.blocks.length; blockIndex++) {\n            const parsedBlock = source.blocks[blockIndex];\n            const block = map[parsedBlock.id];\n            if (!block) {\n                continue;\n            }\n            if (block.inputs.length && !merge) {\n                continue;\n            }\n            this._restoreConnections(block, source, map);\n        }\n        // Outputs\n        if (source.outputNodes) {\n            for (const outputNodeId of source.outputNodes) {\n                this.addOutputNode(map[outputNodeId]);\n            }\n        }\n        // UI related info\n        if (source.locations || (source.editorData && source.editorData.locations)) {\n            const locations = source.locations || source.editorData.locations;\n            for (const location of locations) {\n                if (map[location.blockId]) {\n                    location.blockId = map[location.blockId].uniqueId;\n                }\n            }\n            if (merge && this.editorData && this.editorData.locations) {\n                locations.concat(this.editorData.locations);\n            }\n            if (source.locations) {\n                this.editorData = {\n                    locations: locations,\n                };\n            }\n            else {\n                this.editorData = source.editorData;\n                this.editorData.locations = locations;\n            }\n            const blockMap = [];\n            for (const key in map) {\n                blockMap[key] = map[key].uniqueId;\n            }\n            this.editorData.map = blockMap;\n        }\n        this.comment = source.comment;\n        if (source.forceAlphaBlending !== undefined) {\n            this.forceAlphaBlending = source.forceAlphaBlending;\n        }\n        if (!merge) {\n            this._mode = (_a = source.mode) !== null && _a !== void 0 ? _a : NodeMaterialModes.Material;\n        }\n    }\n    /**\n     * Clear the current graph and load a new one from a serialization object\n     * @param source defines the JSON representation of the material\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\n     * @param merge defines whether or not the source must be merged or replace the current content\n     * @deprecated Please use the parseSerializedObject method instead\n     */\n    loadFromSerialization(source, rootUrl = \"\", merge = false) {\n        this.parseSerializedObject(source, rootUrl, merge);\n    }\n    /**\n     * Makes a duplicate of the current material.\n     * @param name defines the name to use for the new material\n     * @param shareEffect defines if the clone material should share the same effect (default is false)\n     */\n    clone(name, shareEffect = false) {\n        const serializationObject = this.serialize();\n        const clone = SerializationHelper.Clone(() => new NodeMaterial(name, this.getScene(), this.options), this);\n        clone.id = name;\n        clone.name = name;\n        clone.parseSerializedObject(serializationObject);\n        clone._buildId = this._buildId;\n        clone.build(false, !shareEffect);\n        return clone;\n    }\n    /**\n     * Creates a node material from parsed material data\n     * @param source defines the JSON representation of the material\n     * @param scene defines the hosting scene\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\n     * @returns a new node material\n     */\n    static Parse(source, scene, rootUrl = \"\") {\n        const nodeMaterial = SerializationHelper.Parse(() => new NodeMaterial(source.name, scene), source, scene, rootUrl);\n        nodeMaterial.parseSerializedObject(source, rootUrl);\n        nodeMaterial.build();\n        return nodeMaterial;\n    }\n    /**\n     * Creates a node material from a snippet saved in a remote file\n     * @param name defines the name of the material to create\n     * @param url defines the url to load from\n     * @param scene defines the hosting scene\n     * @param rootUrl defines the root URL for nested url in the node material\n     * @param skipBuild defines whether to build the node material\n     * @param targetMaterial defines a material to use instead of creating a new one\n     * @returns a promise that will resolve to the new node material\n     */\n    static async ParseFromFileAsync(name, url, scene, rootUrl = \"\", skipBuild = false, targetMaterial) {\n        const material = targetMaterial !== null && targetMaterial !== void 0 ? targetMaterial : new NodeMaterial(name, scene);\n        const data = await scene._loadFileAsync(url);\n        const serializationObject = JSON.parse(data);\n        material.parseSerializedObject(serializationObject, rootUrl);\n        if (!skipBuild) {\n            material.build();\n        }\n        return material;\n    }\n    /**\n     * Creates a node material from a snippet saved by the node material editor\n     * @param snippetId defines the snippet to load\n     * @param scene defines the hosting scene\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\n     * @param nodeMaterial defines a node material to update (instead of creating a new one)\n     * @param skipBuild defines whether to build the node material\n     * @returns a promise that will resolve to the new node material\n     */\n    static ParseFromSnippetAsync(snippetId, scene = EngineStore.LastCreatedScene, rootUrl = \"\", nodeMaterial, skipBuild = false) {\n        if (snippetId === \"_BLANK\") {\n            return Promise.resolve(NodeMaterial.CreateDefault(\"blank\", scene));\n        }\n        return new Promise((resolve, reject) => {\n            const request = new WebRequest();\n            request.addEventListener(\"readystatechange\", () => {\n                if (request.readyState == 4) {\n                    if (request.status == 200) {\n                        const snippet = JSON.parse(JSON.parse(request.responseText).jsonPayload);\n                        const serializationObject = JSON.parse(snippet.nodeMaterial);\n                        if (!nodeMaterial) {\n                            nodeMaterial = SerializationHelper.Parse(() => new NodeMaterial(snippetId, scene), serializationObject, scene, rootUrl);\n                            nodeMaterial.uniqueId = scene.getUniqueId();\n                        }\n                        nodeMaterial.parseSerializedObject(serializationObject);\n                        nodeMaterial.snippetId = snippetId;\n                        try {\n                            if (!skipBuild) {\n                                nodeMaterial.build();\n                            }\n                            resolve(nodeMaterial);\n                        }\n                        catch (err) {\n                            reject(err);\n                        }\n                    }\n                    else {\n                        reject(\"Unable to load the snippet \" + snippetId);\n                    }\n                }\n            });\n            request.open(\"GET\", this.SnippetUrl + \"/\" + snippetId.replace(/#/g, \"/\"));\n            request.send();\n        });\n    }\n    /**\n     * Creates a new node material set to default basic configuration\n     * @param name defines the name of the material\n     * @param scene defines the hosting scene\n     * @returns a new NodeMaterial\n     */\n    static CreateDefault(name, scene) {\n        const newMaterial = new NodeMaterial(name, scene);\n        newMaterial.setToDefault();\n        newMaterial.build();\n        return newMaterial;\n    }\n}\nNodeMaterial._BuildIdGenerator = 0;\n/** Define the Url to load node editor script */\nNodeMaterial.EditorURL = `https://unpkg.com/babylonjs-node-editor@${Engine.Version}/babylon.nodeEditor.js`;\n/** Define the Url to load snippets */\nNodeMaterial.SnippetUrl = `https://snippet.babylonjs.com`;\n/** Gets or sets a boolean indicating that node materials should not deserialize textures from json / snippet content */\nNodeMaterial.IgnoreTexturesAtLoadTime = false;\n__decorate([\n    serialize()\n], NodeMaterial.prototype, \"ignoreAlpha\", void 0);\n__decorate([\n    serialize()\n], NodeMaterial.prototype, \"maxSimultaneousLights\", void 0);\n__decorate([\n    serialize(\"mode\")\n], NodeMaterial.prototype, \"_mode\", void 0);\n__decorate([\n    serialize(\"comment\")\n], NodeMaterial.prototype, \"comment\", void 0);\n__decorate([\n    serialize()\n], NodeMaterial.prototype, \"forceAlphaBlending\", void 0);\nRegisterClass(\"BABYLON.NodeMaterial\", NodeMaterial);\n//# sourceMappingURL=nodeMaterial.js.map","import { NodeMaterialBlockConnectionPointTypes } from \"./Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialConnectionPoint, NodeMaterialConnectionPointDirection } from \"./nodeMaterialBlockConnectionPoint.js\";\nimport { NodeMaterialBlockTargets } from \"./Enums/nodeMaterialBlockTargets.js\";\nimport { UniqueIdGenerator } from \"../../Misc/uniqueIdGenerator.js\";\nimport { GetClass } from \"../../Misc/typeStore.js\";\n/**\n * Defines a block that can be used inside a node based material\n */\nexport class NodeMaterialBlock {\n    /**\n     * Gets the name of the block\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * Sets the name of the block. Will check if the name is valid.\n     */\n    set name(newName) {\n        if (!this.validateBlockName(newName)) {\n            return;\n        }\n        this._name = newName;\n    }\n    /**\n     * Gets a boolean indicating that this block can only be used once per NodeMaterial\n     */\n    get isUnique() {\n        return this._isUnique;\n    }\n    /**\n     * Gets a boolean indicating that this block is an end block (e.g. it is generating a system value)\n     */\n    get isFinalMerger() {\n        return this._isFinalMerger;\n    }\n    /**\n     * Gets a boolean indicating that this block is an input (e.g. it sends data to the shader)\n     */\n    get isInput() {\n        return this._isInput;\n    }\n    /**\n     * Gets or sets the build Id\n     */\n    get buildId() {\n        return this._buildId;\n    }\n    set buildId(value) {\n        this._buildId = value;\n    }\n    /**\n     * Gets or sets the target of the block\n     */\n    get target() {\n        return this._target;\n    }\n    set target(value) {\n        if ((this._target & value) !== 0) {\n            return;\n        }\n        this._target = value;\n    }\n    /**\n     * Gets the list of input points\n     */\n    get inputs() {\n        return this._inputs;\n    }\n    /** Gets the list of output points */\n    get outputs() {\n        return this._outputs;\n    }\n    /**\n     * Find an input by its name\n     * @param name defines the name of the input to look for\n     * @returns the input or null if not found\n     */\n    getInputByName(name) {\n        const filter = this._inputs.filter((e) => e.name === name);\n        if (filter.length) {\n            return filter[0];\n        }\n        return null;\n    }\n    /**\n     * Find an output by its name\n     * @param name defines the name of the output to look for\n     * @returns the output or null if not found\n     */\n    getOutputByName(name) {\n        const filter = this._outputs.filter((e) => e.name === name);\n        if (filter.length) {\n            return filter[0];\n        }\n        return null;\n    }\n    /**\n     * Creates a new NodeMaterialBlock\n     * @param name defines the block name\n     * @param target defines the target of that block (Vertex by default)\n     * @param isFinalMerger defines a boolean indicating that this block is an end block (e.g. it is generating a system value). Default is false\n     * @param isInput defines a boolean indicating that this block is an input (e.g. it sends data to the shader). Default is false\n     */\n    constructor(name, target = NodeMaterialBlockTargets.Vertex, isFinalMerger = false, isInput = false) {\n        this._isFinalMerger = false;\n        this._isInput = false;\n        this._name = \"\";\n        this._isUnique = false;\n        /** Gets or sets a boolean indicating that only one input can be connected at a time */\n        this.inputsAreExclusive = false;\n        /** @internal */\n        this._codeVariableName = \"\";\n        /** @internal */\n        this._inputs = new Array();\n        /** @internal */\n        this._outputs = new Array();\n        /**\n         * Gets or sets the comments associated with this block\n         */\n        this.comments = \"\";\n        /** Gets or sets a boolean indicating that this input can be edited in the Inspector (false by default) */\n        this.visibleInInspector = false;\n        /** Gets or sets a boolean indicating that this input can be edited from a collapsed frame */\n        this.visibleOnFrame = false;\n        this._target = target;\n        this._originalTargetIsNeutral = target === NodeMaterialBlockTargets.Neutral;\n        this._isFinalMerger = isFinalMerger;\n        this._isInput = isInput;\n        this._name = name;\n        this.uniqueId = UniqueIdGenerator.UniqueId;\n    }\n    /** @internal */\n    _setInitialTarget(target) {\n        this._target = target;\n        this._originalTargetIsNeutral = target === NodeMaterialBlockTargets.Neutral;\n    }\n    /**\n     * Initialize the block and prepare the context for build\n     * @param state defines the state that will be used for the build\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    initialize(state) {\n        // Do nothing\n    }\n    /**\n     * Bind data to effect. Will only be called for blocks with isBindable === true\n     * @param effect defines the effect to bind data to\n     * @param nodeMaterial defines the hosting NodeMaterial\n     * @param mesh defines the mesh that will be rendered\n     * @param subMesh defines the submesh that will be rendered\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    bind(effect, nodeMaterial, mesh, subMesh) {\n        // Do nothing\n    }\n    _declareOutput(output, state) {\n        return `${state._getGLType(output.type)} ${output.associatedVariableName}`;\n    }\n    _writeVariable(currentPoint) {\n        const connectionPoint = currentPoint.connectedPoint;\n        if (connectionPoint) {\n            return `${currentPoint.associatedVariableName}`;\n        }\n        return `0.`;\n    }\n    _writeFloat(value) {\n        let stringVersion = value.toString();\n        if (stringVersion.indexOf(\".\") === -1) {\n            stringVersion += \".0\";\n        }\n        return `${stringVersion}`;\n    }\n    /**\n     * Gets the current class name e.g. \"NodeMaterialBlock\"\n     * @returns the class name\n     */\n    getClassName() {\n        return \"NodeMaterialBlock\";\n    }\n    /**\n     * Register a new input. Must be called inside a block constructor\n     * @param name defines the connection point name\n     * @param type defines the connection point type\n     * @param isOptional defines a boolean indicating that this input can be omitted\n     * @param target defines the target to use to limit the connection point (will be VertexAndFragment by default)\n     * @param point an already created connection point. If not provided, create a new one\n     * @returns the current block\n     */\n    registerInput(name, type, isOptional = false, target, point) {\n        point = point !== null && point !== void 0 ? point : new NodeMaterialConnectionPoint(name, this, NodeMaterialConnectionPointDirection.Input);\n        point.type = type;\n        point.isOptional = isOptional;\n        if (target) {\n            point.target = target;\n        }\n        this._inputs.push(point);\n        return this;\n    }\n    /**\n     * Register a new output. Must be called inside a block constructor\n     * @param name defines the connection point name\n     * @param type defines the connection point type\n     * @param target defines the target to use to limit the connection point (will be VertexAndFragment by default)\n     * @param point an already created connection point. If not provided, create a new one\n     * @returns the current block\n     */\n    registerOutput(name, type, target, point) {\n        point = point !== null && point !== void 0 ? point : new NodeMaterialConnectionPoint(name, this, NodeMaterialConnectionPointDirection.Output);\n        point.type = type;\n        if (target) {\n            point.target = target;\n        }\n        this._outputs.push(point);\n        return this;\n    }\n    /**\n     * Will return the first available input e.g. the first one which is not an uniform or an attribute\n     * @param forOutput defines an optional connection point to check compatibility with\n     * @returns the first available input or null\n     */\n    getFirstAvailableInput(forOutput = null) {\n        for (const input of this._inputs) {\n            if (!input.connectedPoint) {\n                if (!forOutput || forOutput.type === input.type || input.type === NodeMaterialBlockConnectionPointTypes.AutoDetect) {\n                    return input;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Will return the first available output e.g. the first one which is not yet connected and not a varying\n     * @param forBlock defines an optional block to check compatibility with\n     * @returns the first available input or null\n     */\n    getFirstAvailableOutput(forBlock = null) {\n        for (const output of this._outputs) {\n            if (!forBlock || !forBlock.target || forBlock.target === NodeMaterialBlockTargets.Neutral || (forBlock.target & output.target) !== 0) {\n                return output;\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets the sibling of the given output\n     * @param current defines the current output\n     * @returns the next output in the list or null\n     */\n    getSiblingOutput(current) {\n        const index = this._outputs.indexOf(current);\n        if (index === -1 || index >= this._outputs.length) {\n            return null;\n        }\n        return this._outputs[index + 1];\n    }\n    /**\n     * Checks if the current block is an ancestor of a given block\n     * @param block defines the potential descendant block to check\n     * @returns true if block is a descendant\n     */\n    isAnAncestorOf(block) {\n        for (const output of this._outputs) {\n            if (!output.hasEndpoints) {\n                continue;\n            }\n            for (const endpoint of output.endpoints) {\n                if (endpoint.ownerBlock === block) {\n                    return true;\n                }\n                if (endpoint.ownerBlock.isAnAncestorOf(block)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /**\n     * Connect current block with another block\n     * @param other defines the block to connect with\n     * @param options define the various options to help pick the right connections\n     * @param options.input\n     * @param options.output\n     * @param options.outputSwizzle\n     * @returns the current block\n     */\n    connectTo(other, options) {\n        if (this._outputs.length === 0) {\n            return;\n        }\n        let output = options && options.output ? this.getOutputByName(options.output) : this.getFirstAvailableOutput(other);\n        let notFound = true;\n        while (notFound) {\n            const input = options && options.input ? other.getInputByName(options.input) : other.getFirstAvailableInput(output);\n            if (output && input && output.canConnectTo(input)) {\n                output.connectTo(input);\n                notFound = false;\n            }\n            else if (!output) {\n                throw \"Unable to find a compatible match\";\n            }\n            else {\n                output = this.getSiblingOutput(output);\n            }\n        }\n        return this;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _buildBlock(state) {\n        // Empty. Must be defined by child nodes\n    }\n    /**\n     * Add uniforms, samplers and uniform buffers at compilation time\n     * @param state defines the state to update\n     * @param nodeMaterial defines the node material requesting the update\n     * @param defines defines the material defines to update\n     * @param uniformBuffers defines the list of uniform buffer names\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    updateUniformsAndSamples(state, nodeMaterial, defines, uniformBuffers) {\n        // Do nothing\n    }\n    /**\n     * Add potential fallbacks if shader compilation fails\n     * @param mesh defines the mesh to be rendered\n     * @param fallbacks defines the current prioritized list of fallbacks\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    provideFallbacks(mesh, fallbacks) {\n        // Do nothing\n    }\n    /**\n     * Initialize defines for shader compilation\n     * @param mesh defines the mesh to be rendered\n     * @param nodeMaterial defines the node material requesting the update\n     * @param defines defines the material defines to update\n     * @param useInstances specifies that instances should be used\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    initializeDefines(mesh, nodeMaterial, defines, useInstances = false) { }\n    /**\n     * Update defines for shader compilation\n     * @param mesh defines the mesh to be rendered\n     * @param nodeMaterial defines the node material requesting the update\n     * @param defines defines the material defines to update\n     * @param useInstances specifies that instances should be used\n     * @param subMesh defines which submesh to render\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prepareDefines(mesh, nodeMaterial, defines, useInstances = false, subMesh) {\n        // Do nothing\n    }\n    /**\n     * Lets the block try to connect some inputs automatically\n     * @param material defines the hosting NodeMaterial\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    autoConfigure(material) {\n        // Do nothing\n    }\n    /**\n     * Function called when a block is declared as repeatable content generator\n     * @param vertexShaderState defines the current compilation state for the vertex shader\n     * @param fragmentShaderState defines the current compilation state for the fragment shader\n     * @param mesh defines the mesh to be rendered\n     * @param defines defines the material defines to update\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    replaceRepeatableContent(vertexShaderState, fragmentShaderState, mesh, defines) {\n        // Do nothing\n    }\n    /** Gets a boolean indicating that the code of this block will be promoted to vertex shader even if connected to fragment output */\n    get willBeGeneratedIntoVertexShaderFromFragmentShader() {\n        if (this.isInput || this.isFinalMerger) {\n            return false;\n        }\n        if (this._outputs.some((o) => o.isDirectlyConnectedToVertexOutput)) {\n            return false;\n        }\n        if (this.target === NodeMaterialBlockTargets.Vertex) {\n            return false;\n        }\n        if (this.target === NodeMaterialBlockTargets.VertexAndFragment || this.target === NodeMaterialBlockTargets.Neutral) {\n            if (this._outputs.some((o) => o.isConnectedInVertexShader)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Checks if the block is ready\n     * @param mesh defines the mesh to be rendered\n     * @param nodeMaterial defines the node material requesting the update\n     * @param defines defines the material defines to update\n     * @param useInstances specifies that instances should be used\n     * @returns true if the block is ready\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isReady(mesh, nodeMaterial, defines, useInstances = false) {\n        return true;\n    }\n    _linkConnectionTypes(inputIndex0, inputIndex1, looseCoupling = false) {\n        if (looseCoupling) {\n            this._inputs[inputIndex1]._acceptedConnectionPointType = this._inputs[inputIndex0];\n        }\n        else {\n            this._inputs[inputIndex0]._linkedConnectionSource = this._inputs[inputIndex1];\n        }\n        this._inputs[inputIndex1]._linkedConnectionSource = this._inputs[inputIndex0];\n    }\n    _processBuild(block, state, input, activeBlocks) {\n        block.build(state, activeBlocks);\n        const localBlockIsFragment = state._vertexState != null;\n        const otherBlockWasGeneratedInVertexShader = block._buildTarget === NodeMaterialBlockTargets.Vertex && block.target !== NodeMaterialBlockTargets.VertexAndFragment;\n        if (localBlockIsFragment &&\n            ((block.target & block._buildTarget) === 0 ||\n                (block.target & input.target) === 0 ||\n                (this.target !== NodeMaterialBlockTargets.VertexAndFragment && otherBlockWasGeneratedInVertexShader))) {\n            // context switch! We need a varying\n            if ((!block.isInput && state.target !== block._buildTarget) || // block was already emitted by vertex shader\n                (block.isInput && block.isAttribute && !block._noContextSwitch) // block is an attribute\n            ) {\n                const connectedPoint = input.connectedPoint;\n                if (state._vertexState._emitVaryingFromString(\"v_\" + connectedPoint.associatedVariableName, state._getGLType(connectedPoint.type))) {\n                    state._vertexState.compilationString += `${\"v_\" + connectedPoint.associatedVariableName} = ${connectedPoint.associatedVariableName};\\r\\n`;\n                }\n                input.associatedVariableName = \"v_\" + connectedPoint.associatedVariableName;\n                input._enforceAssociatedVariableName = true;\n            }\n        }\n    }\n    /**\n     * Validates the new name for the block node.\n     * @param newName the new name to be given to the node.\n     * @returns false if the name is a reserve word, else true.\n     */\n    validateBlockName(newName) {\n        const reservedNames = [\n            \"position\",\n            \"normal\",\n            \"tangent\",\n            \"particle_positionw\",\n            \"uv\",\n            \"uv2\",\n            \"uv3\",\n            \"uv4\",\n            \"uv5\",\n            \"uv6\",\n            \"position2d\",\n            \"particle_uv\",\n            \"matricesIndices\",\n            \"matricesWeights\",\n            \"world0\",\n            \"world1\",\n            \"world2\",\n            \"world3\",\n            \"particle_color\",\n            \"particle_texturemask\",\n        ];\n        for (const reservedName of reservedNames) {\n            if (newName === reservedName) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Compile the current node and generate the shader code\n     * @param state defines the current compilation state (uniforms, samplers, current string)\n     * @param activeBlocks defines the list of active blocks (i.e. blocks to compile)\n     * @returns true if already built\n     */\n    build(state, activeBlocks) {\n        if (this._buildId === state.sharedData.buildId) {\n            return true;\n        }\n        if (!this.isInput) {\n            /** Prepare outputs */\n            for (const output of this._outputs) {\n                if (!output.associatedVariableName) {\n                    output.associatedVariableName = state._getFreeVariableName(output.name);\n                }\n            }\n        }\n        // Check if \"parent\" blocks are compiled\n        for (const input of this._inputs) {\n            if (!input.connectedPoint) {\n                if (!input.isOptional) {\n                    // Emit a warning\n                    state.sharedData.checks.notConnectedNonOptionalInputs.push(input);\n                }\n                continue;\n            }\n            if (this.target !== NodeMaterialBlockTargets.Neutral) {\n                if ((input.target & this.target) === 0) {\n                    continue;\n                }\n                if ((input.target & state.target) === 0) {\n                    continue;\n                }\n            }\n            const block = input.connectedPoint.ownerBlock;\n            if (block && block !== this) {\n                this._processBuild(block, state, input, activeBlocks);\n            }\n        }\n        if (this._buildId === state.sharedData.buildId) {\n            return true; // Need to check again as inputs can be connected multiple time to this endpoint\n        }\n        // Logs\n        if (state.sharedData.verbose) {\n            console.log(`${state.target === NodeMaterialBlockTargets.Vertex ? \"Vertex shader\" : \"Fragment shader\"}: Building ${this.name} [${this.getClassName()}]`);\n        }\n        // Checks final outputs\n        if (this.isFinalMerger) {\n            switch (state.target) {\n                case NodeMaterialBlockTargets.Vertex:\n                    state.sharedData.checks.emitVertex = true;\n                    break;\n                case NodeMaterialBlockTargets.Fragment:\n                    state.sharedData.checks.emitFragment = true;\n                    break;\n            }\n        }\n        if (!this.isInput && state.sharedData.emitComments) {\n            state.compilationString += `\\r\\n//${this.name}\\r\\n`;\n        }\n        this._buildBlock(state);\n        this._buildId = state.sharedData.buildId;\n        this._buildTarget = state.target;\n        // Compile connected blocks\n        for (const output of this._outputs) {\n            if ((output.target & state.target) === 0) {\n                continue;\n            }\n            for (const endpoint of output.endpoints) {\n                const block = endpoint.ownerBlock;\n                if (block && (block.target & state.target) !== 0 && activeBlocks.indexOf(block) !== -1) {\n                    this._processBuild(block, state, endpoint, activeBlocks);\n                }\n            }\n        }\n        return false;\n    }\n    _inputRename(name) {\n        return name;\n    }\n    _outputRename(name) {\n        return name;\n    }\n    _dumpPropertiesCode() {\n        const variableName = this._codeVariableName;\n        return `${variableName}.visibleInInspector = ${this.visibleInInspector};\\r\\n${variableName}.visibleOnFrame = ${this.visibleOnFrame};\\r\\n${variableName}.target = ${this.target};\\r\\n`;\n    }\n    /**\n     * @internal\n     */\n    _dumpCode(uniqueNames, alreadyDumped) {\n        alreadyDumped.push(this);\n        let codeString;\n        // Get unique name\n        const nameAsVariableName = this.name.replace(/[^A-Za-z_]+/g, \"\");\n        this._codeVariableName = nameAsVariableName || `${this.getClassName()}_${this.uniqueId}`;\n        if (uniqueNames.indexOf(this._codeVariableName) !== -1) {\n            let index = 0;\n            do {\n                index++;\n                this._codeVariableName = nameAsVariableName + index;\n            } while (uniqueNames.indexOf(this._codeVariableName) !== -1);\n        }\n        uniqueNames.push(this._codeVariableName);\n        // Declaration\n        codeString = `\\r\\n// ${this.getClassName()}\\r\\n`;\n        if (this.comments) {\n            codeString += `// ${this.comments}\\r\\n`;\n        }\n        codeString += `var ${this._codeVariableName} = new BABYLON.${this.getClassName()}(\"${this.name}\");\\r\\n`;\n        // Properties\n        codeString += this._dumpPropertiesCode();\n        // Inputs\n        for (const input of this.inputs) {\n            if (!input.isConnected) {\n                continue;\n            }\n            const connectedOutput = input.connectedPoint;\n            const connectedBlock = connectedOutput.ownerBlock;\n            if (alreadyDumped.indexOf(connectedBlock) === -1) {\n                codeString += connectedBlock._dumpCode(uniqueNames, alreadyDumped);\n            }\n        }\n        // Outputs\n        for (const output of this.outputs) {\n            if (!output.hasEndpoints) {\n                continue;\n            }\n            for (const endpoint of output.endpoints) {\n                const connectedBlock = endpoint.ownerBlock;\n                if (connectedBlock && alreadyDumped.indexOf(connectedBlock) === -1) {\n                    codeString += connectedBlock._dumpCode(uniqueNames, alreadyDumped);\n                }\n            }\n        }\n        return codeString;\n    }\n    /**\n     * @internal\n     */\n    _dumpCodeForOutputConnections(alreadyDumped) {\n        let codeString = \"\";\n        if (alreadyDumped.indexOf(this) !== -1) {\n            return codeString;\n        }\n        alreadyDumped.push(this);\n        for (const input of this.inputs) {\n            if (!input.isConnected) {\n                continue;\n            }\n            const connectedOutput = input.connectedPoint;\n            const connectedBlock = connectedOutput.ownerBlock;\n            codeString += connectedBlock._dumpCodeForOutputConnections(alreadyDumped);\n            codeString += `${connectedBlock._codeVariableName}.${connectedBlock._outputRename(connectedOutput.name)}.connectTo(${this._codeVariableName}.${this._inputRename(input.name)});\\r\\n`;\n        }\n        return codeString;\n    }\n    /**\n     * Clone the current block to a new identical block\n     * @param scene defines the hosting scene\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\n     * @returns a copy of the current block\n     */\n    clone(scene, rootUrl = \"\") {\n        const serializationObject = this.serialize();\n        const blockType = GetClass(serializationObject.customType);\n        if (blockType) {\n            const block = new blockType();\n            block._deserialize(serializationObject, scene, rootUrl);\n            return block;\n        }\n        return null;\n    }\n    /**\n     * Serializes this block in a JSON representation\n     * @returns the serialized block object\n     */\n    serialize() {\n        const serializationObject = {};\n        serializationObject.customType = \"BABYLON.\" + this.getClassName();\n        serializationObject.id = this.uniqueId;\n        serializationObject.name = this.name;\n        serializationObject.comments = this.comments;\n        serializationObject.visibleInInspector = this.visibleInInspector;\n        serializationObject.visibleOnFrame = this.visibleOnFrame;\n        serializationObject.target = this.target;\n        serializationObject.inputs = [];\n        serializationObject.outputs = [];\n        for (const input of this.inputs) {\n            serializationObject.inputs.push(input.serialize());\n        }\n        for (const output of this.outputs) {\n            serializationObject.outputs.push(output.serialize(false));\n        }\n        return serializationObject;\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _deserialize(serializationObject, scene, rootUrl) {\n        var _a;\n        this.name = serializationObject.name;\n        this.comments = serializationObject.comments;\n        this.visibleInInspector = !!serializationObject.visibleInInspector;\n        this.visibleOnFrame = !!serializationObject.visibleOnFrame;\n        this._target = (_a = serializationObject.target) !== null && _a !== void 0 ? _a : this.target;\n        this._deserializePortDisplayNamesAndExposedOnFrame(serializationObject);\n    }\n    _deserializePortDisplayNamesAndExposedOnFrame(serializationObject) {\n        const serializedInputs = serializationObject.inputs;\n        const serializedOutputs = serializationObject.outputs;\n        if (serializedInputs) {\n            serializedInputs.forEach((port, i) => {\n                if (port.displayName) {\n                    this.inputs[i].displayName = port.displayName;\n                }\n                if (port.isExposedOnFrame) {\n                    this.inputs[i].isExposedOnFrame = port.isExposedOnFrame;\n                    this.inputs[i].exposedPortPosition = port.exposedPortPosition;\n                }\n            });\n        }\n        if (serializedOutputs) {\n            serializedOutputs.forEach((port, i) => {\n                if (port.displayName) {\n                    this.outputs[i].displayName = port.displayName;\n                }\n                if (port.isExposedOnFrame) {\n                    this.outputs[i].isExposedOnFrame = port.isExposedOnFrame;\n                    this.outputs[i].exposedPortPosition = port.exposedPortPosition;\n                }\n            });\n        }\n    }\n    /**\n     * Release resources\n     */\n    dispose() {\n        for (const input of this.inputs) {\n            input.dispose();\n        }\n        for (const output of this.outputs) {\n            output.dispose();\n        }\n    }\n}\n//# sourceMappingURL=nodeMaterialBlock.js.map","import { NodeMaterialBlockConnectionPointTypes } from \"./Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"./Enums/nodeMaterialBlockTargets.js\";\nimport { Observable } from \"../../Misc/observable.js\";\n/**\n * Enum used to define the compatibility state between two connection points\n */\nexport var NodeMaterialConnectionPointCompatibilityStates;\n(function (NodeMaterialConnectionPointCompatibilityStates) {\n    /** Points are compatibles */\n    NodeMaterialConnectionPointCompatibilityStates[NodeMaterialConnectionPointCompatibilityStates[\"Compatible\"] = 0] = \"Compatible\";\n    /** Points are incompatible because of their types */\n    NodeMaterialConnectionPointCompatibilityStates[NodeMaterialConnectionPointCompatibilityStates[\"TypeIncompatible\"] = 1] = \"TypeIncompatible\";\n    /** Points are incompatible because of their targets (vertex vs fragment) */\n    NodeMaterialConnectionPointCompatibilityStates[NodeMaterialConnectionPointCompatibilityStates[\"TargetIncompatible\"] = 2] = \"TargetIncompatible\";\n    /** Points are incompatible because they are in the same hierarchy **/\n    NodeMaterialConnectionPointCompatibilityStates[NodeMaterialConnectionPointCompatibilityStates[\"HierarchyIssue\"] = 3] = \"HierarchyIssue\";\n})(NodeMaterialConnectionPointCompatibilityStates || (NodeMaterialConnectionPointCompatibilityStates = {}));\n/**\n * Defines the direction of a connection point\n */\nexport var NodeMaterialConnectionPointDirection;\n(function (NodeMaterialConnectionPointDirection) {\n    /** Input */\n    NodeMaterialConnectionPointDirection[NodeMaterialConnectionPointDirection[\"Input\"] = 0] = \"Input\";\n    /** Output */\n    NodeMaterialConnectionPointDirection[NodeMaterialConnectionPointDirection[\"Output\"] = 1] = \"Output\";\n})(NodeMaterialConnectionPointDirection || (NodeMaterialConnectionPointDirection = {}));\n/**\n * Defines a connection point for a block\n */\nexport class NodeMaterialConnectionPoint {\n    /**\n     * Checks if two types are equivalent\n     * @param type1 type 1 to check\n     * @param type2 type 2 to check\n     * @returns true if both types are equivalent, else false\n     */\n    static AreEquivalentTypes(type1, type2) {\n        switch (type1) {\n            case NodeMaterialBlockConnectionPointTypes.Vector3: {\n                if (type2 === NodeMaterialBlockConnectionPointTypes.Color3) {\n                    return true;\n                }\n                break;\n            }\n            case NodeMaterialBlockConnectionPointTypes.Vector4: {\n                if (type2 === NodeMaterialBlockConnectionPointTypes.Color4) {\n                    return true;\n                }\n                break;\n            }\n            case NodeMaterialBlockConnectionPointTypes.Color3: {\n                if (type2 === NodeMaterialBlockConnectionPointTypes.Vector3) {\n                    return true;\n                }\n                break;\n            }\n            case NodeMaterialBlockConnectionPointTypes.Color4: {\n                if (type2 === NodeMaterialBlockConnectionPointTypes.Vector4) {\n                    return true;\n                }\n                break;\n            }\n        }\n        return false;\n    }\n    /** Gets the direction of the point */\n    get direction() {\n        return this._direction;\n    }\n    /**\n     * Gets or sets the associated variable name in the shader\n     */\n    get associatedVariableName() {\n        if (this._ownerBlock.isInput) {\n            return this._ownerBlock.associatedVariableName;\n        }\n        if ((!this._enforceAssociatedVariableName || !this._associatedVariableName) && this._connectedPoint) {\n            return this._connectedPoint.associatedVariableName;\n        }\n        return this._associatedVariableName;\n    }\n    set associatedVariableName(value) {\n        this._associatedVariableName = value;\n    }\n    /** Get the inner type (ie AutoDetect for instance instead of the inferred one) */\n    get innerType() {\n        if (this._linkedConnectionSource && this._linkedConnectionSource.isConnected) {\n            return this.type;\n        }\n        return this._type;\n    }\n    /**\n     * Gets or sets the connection point type (default is float)\n     */\n    get type() {\n        if (this._type === NodeMaterialBlockConnectionPointTypes.AutoDetect) {\n            if (this._ownerBlock.isInput) {\n                return this._ownerBlock.type;\n            }\n            if (this._connectedPoint) {\n                return this._connectedPoint.type;\n            }\n            if (this._linkedConnectionSource && this._linkedConnectionSource.isConnected) {\n                return this._linkedConnectionSource.type;\n            }\n        }\n        if (this._type === NodeMaterialBlockConnectionPointTypes.BasedOnInput) {\n            if (this._typeConnectionSource) {\n                if (!this._typeConnectionSource.isConnected && this._defaultConnectionPointType) {\n                    return this._defaultConnectionPointType;\n                }\n                return this._typeConnectionSource.type;\n            }\n            else if (this._defaultConnectionPointType) {\n                return this._defaultConnectionPointType;\n            }\n        }\n        return this._type;\n    }\n    set type(value) {\n        this._type = value;\n    }\n    /** Gets or sets the target of that connection point */\n    get target() {\n        if (!this._prioritizeVertex || !this._ownerBlock) {\n            return this._target;\n        }\n        if (this._target !== NodeMaterialBlockTargets.VertexAndFragment) {\n            return this._target;\n        }\n        if (this._ownerBlock.target === NodeMaterialBlockTargets.Fragment) {\n            return NodeMaterialBlockTargets.Fragment;\n        }\n        return NodeMaterialBlockTargets.Vertex;\n    }\n    set target(value) {\n        this._target = value;\n    }\n    /**\n     * Gets a boolean indicating that the current point is connected to another NodeMaterialBlock\n     */\n    get isConnected() {\n        return this.connectedPoint !== null || this.hasEndpoints;\n    }\n    /**\n     * Gets a boolean indicating that the current point is connected to an input block\n     */\n    get isConnectedToInputBlock() {\n        return this.connectedPoint !== null && this.connectedPoint.ownerBlock.isInput;\n    }\n    /**\n     * Gets a the connected input block (if any)\n     */\n    get connectInputBlock() {\n        if (!this.isConnectedToInputBlock) {\n            return null;\n        }\n        return this.connectedPoint.ownerBlock;\n    }\n    /** Get the other side of the connection (if any) */\n    get connectedPoint() {\n        return this._connectedPoint;\n    }\n    /** Get the block that owns this connection point */\n    get ownerBlock() {\n        return this._ownerBlock;\n    }\n    /** Get the block connected on the other side of this connection (if any) */\n    get sourceBlock() {\n        if (!this._connectedPoint) {\n            return null;\n        }\n        return this._connectedPoint.ownerBlock;\n    }\n    /** Get the block connected on the endpoints of this connection (if any) */\n    get connectedBlocks() {\n        if (this._endpoints.length === 0) {\n            return [];\n        }\n        return this._endpoints.map((e) => e.ownerBlock);\n    }\n    /** Gets the list of connected endpoints */\n    get endpoints() {\n        return this._endpoints;\n    }\n    /** Gets a boolean indicating if that output point is connected to at least one input */\n    get hasEndpoints() {\n        return this._endpoints && this._endpoints.length > 0;\n    }\n    /** Gets a boolean indicating that this connection has a path to the vertex output*/\n    get isDirectlyConnectedToVertexOutput() {\n        if (!this.hasEndpoints) {\n            return false;\n        }\n        for (const endpoint of this._endpoints) {\n            if (endpoint.ownerBlock.target === NodeMaterialBlockTargets.Vertex) {\n                return true;\n            }\n            if (endpoint.ownerBlock.target === NodeMaterialBlockTargets.Neutral || endpoint.ownerBlock.target === NodeMaterialBlockTargets.VertexAndFragment) {\n                if (endpoint.ownerBlock.outputs.some((o) => o.isDirectlyConnectedToVertexOutput)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /** Gets a boolean indicating that this connection will be used in the vertex shader */\n    get isConnectedInVertexShader() {\n        if (this.target === NodeMaterialBlockTargets.Vertex) {\n            return true;\n        }\n        if (!this.hasEndpoints) {\n            return false;\n        }\n        for (const endpoint of this._endpoints) {\n            if (endpoint.ownerBlock.target === NodeMaterialBlockTargets.Vertex) {\n                return true;\n            }\n            if (endpoint.target === NodeMaterialBlockTargets.Vertex) {\n                return true;\n            }\n            if (endpoint.ownerBlock.target === NodeMaterialBlockTargets.Neutral || endpoint.ownerBlock.target === NodeMaterialBlockTargets.VertexAndFragment) {\n                if (endpoint.ownerBlock.outputs.some((o) => o.isConnectedInVertexShader)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /** Gets a boolean indicating that this connection will be used in the fragment shader */\n    get isConnectedInFragmentShader() {\n        if (this.target === NodeMaterialBlockTargets.Fragment) {\n            return true;\n        }\n        if (!this.hasEndpoints) {\n            return false;\n        }\n        for (const endpoint of this._endpoints) {\n            if (endpoint.ownerBlock.target === NodeMaterialBlockTargets.Fragment) {\n                return true;\n            }\n            if (endpoint.ownerBlock.target === NodeMaterialBlockTargets.Neutral || endpoint.ownerBlock.target === NodeMaterialBlockTargets.VertexAndFragment) {\n                if (endpoint.ownerBlock.outputs.some((o) => o.isConnectedInFragmentShader)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /**\n     * Creates a block suitable to be used as an input for this input point.\n     * If null is returned, a block based on the point type will be created.\n     * @returns The returned string parameter is the name of the output point of NodeMaterialBlock (first parameter of the returned array) that can be connected to the input\n     */\n    createCustomInputBlock() {\n        return null;\n    }\n    /**\n     * Creates a new connection point\n     * @param name defines the connection point name\n     * @param ownerBlock defines the block hosting this connection point\n     * @param direction defines the direction of the connection point\n     */\n    constructor(name, ownerBlock, direction) {\n        /** @internal */\n        this._connectedPoint = null;\n        this._endpoints = new Array();\n        /** @internal */\n        this._typeConnectionSource = null;\n        /** @internal */\n        this._defaultConnectionPointType = null;\n        /** @internal */\n        this._linkedConnectionSource = null;\n        /** @internal */\n        this._acceptedConnectionPointType = null;\n        this._type = NodeMaterialBlockConnectionPointTypes.Float;\n        /** @internal */\n        this._enforceAssociatedVariableName = false;\n        /** Indicates that this connection point needs dual validation before being connected to another point */\n        this.needDualDirectionValidation = false;\n        /**\n         * Gets or sets the additional types supported by this connection point\n         */\n        this.acceptedConnectionPointTypes = new Array();\n        /**\n         * Gets or sets the additional types excluded by this connection point\n         */\n        this.excludedConnectionPointTypes = new Array();\n        /**\n         * Observable triggered when this point is connected\n         */\n        this.onConnectionObservable = new Observable();\n        /**\n         * Gets or sets a boolean indicating that this connection point is exposed on a frame\n         */\n        this.isExposedOnFrame = false;\n        /**\n         * Gets or sets number indicating the position that the port is exposed to on a frame\n         */\n        this.exposedPortPosition = -1;\n        /** @internal */\n        this._prioritizeVertex = false;\n        this._target = NodeMaterialBlockTargets.VertexAndFragment;\n        this._ownerBlock = ownerBlock;\n        this.name = name;\n        this._direction = direction;\n    }\n    /**\n     * Gets the current class name e.g. \"NodeMaterialConnectionPoint\"\n     * @returns the class name\n     */\n    getClassName() {\n        return \"NodeMaterialConnectionPoint\";\n    }\n    /**\n     * Gets a boolean indicating if the current point can be connected to another point\n     * @param connectionPoint defines the other connection point\n     * @returns a boolean\n     */\n    canConnectTo(connectionPoint) {\n        return this.checkCompatibilityState(connectionPoint) === NodeMaterialConnectionPointCompatibilityStates.Compatible;\n    }\n    /**\n     * Gets a number indicating if the current point can be connected to another point\n     * @param connectionPoint defines the other connection point\n     * @returns a number defining the compatibility state\n     */\n    checkCompatibilityState(connectionPoint) {\n        const ownerBlock = this._ownerBlock;\n        const otherBlock = connectionPoint.ownerBlock;\n        if (ownerBlock.target === NodeMaterialBlockTargets.Fragment) {\n            // Let's check we are not going reverse\n            if (otherBlock.target === NodeMaterialBlockTargets.Vertex) {\n                return NodeMaterialConnectionPointCompatibilityStates.TargetIncompatible;\n            }\n            for (const output of otherBlock.outputs) {\n                if (output.ownerBlock.target != NodeMaterialBlockTargets.Neutral && output.isConnectedInVertexShader) {\n                    return NodeMaterialConnectionPointCompatibilityStates.TargetIncompatible;\n                }\n            }\n        }\n        if (this.type !== connectionPoint.type && connectionPoint.innerType !== NodeMaterialBlockConnectionPointTypes.AutoDetect) {\n            // Equivalents\n            if (NodeMaterialConnectionPoint.AreEquivalentTypes(this.type, connectionPoint.type)) {\n                return NodeMaterialConnectionPointCompatibilityStates.Compatible;\n            }\n            // Accepted types\n            if ((connectionPoint.acceptedConnectionPointTypes && connectionPoint.acceptedConnectionPointTypes.indexOf(this.type) !== -1) ||\n                (connectionPoint._acceptedConnectionPointType && NodeMaterialConnectionPoint.AreEquivalentTypes(connectionPoint._acceptedConnectionPointType.type, this.type))) {\n                return NodeMaterialConnectionPointCompatibilityStates.Compatible;\n            }\n            else {\n                return NodeMaterialConnectionPointCompatibilityStates.TypeIncompatible;\n            }\n        }\n        // Excluded\n        if (connectionPoint.excludedConnectionPointTypes && connectionPoint.excludedConnectionPointTypes.indexOf(this.type) !== -1) {\n            return NodeMaterialConnectionPointCompatibilityStates.TypeIncompatible;\n        }\n        // Check hierarchy\n        let targetBlock = otherBlock;\n        let sourceBlock = ownerBlock;\n        if (this.direction === NodeMaterialConnectionPointDirection.Input) {\n            targetBlock = ownerBlock;\n            sourceBlock = otherBlock;\n        }\n        if (targetBlock.isAnAncestorOf(sourceBlock)) {\n            return NodeMaterialConnectionPointCompatibilityStates.HierarchyIssue;\n        }\n        return NodeMaterialConnectionPointCompatibilityStates.Compatible;\n    }\n    /**\n     * Connect this point to another connection point\n     * @param connectionPoint defines the other connection point\n     * @param ignoreConstraints defines if the system will ignore connection type constraints (default is false)\n     * @returns the current connection point\n     */\n    connectTo(connectionPoint, ignoreConstraints = false) {\n        if (!ignoreConstraints && !this.canConnectTo(connectionPoint)) {\n            throw \"Cannot connect these two connectors.\";\n        }\n        this._endpoints.push(connectionPoint);\n        connectionPoint._connectedPoint = this;\n        this._enforceAssociatedVariableName = false;\n        this.onConnectionObservable.notifyObservers(connectionPoint);\n        connectionPoint.onConnectionObservable.notifyObservers(this);\n        return this;\n    }\n    /**\n     * Disconnect this point from one of his endpoint\n     * @param endpoint defines the other connection point\n     * @returns the current connection point\n     */\n    disconnectFrom(endpoint) {\n        const index = this._endpoints.indexOf(endpoint);\n        if (index === -1) {\n            return this;\n        }\n        this._endpoints.splice(index, 1);\n        endpoint._connectedPoint = null;\n        this._enforceAssociatedVariableName = false;\n        endpoint._enforceAssociatedVariableName = false;\n        return this;\n    }\n    /**\n     * Fill the list of excluded connection point types with all types other than those passed in the parameter\n     * @param mask Types (ORed values of NodeMaterialBlockConnectionPointTypes) that are allowed, and thus will not be pushed to the excluded list\n     */\n    addExcludedConnectionPointFromAllowedTypes(mask) {\n        let bitmask = 1;\n        while (bitmask < NodeMaterialBlockConnectionPointTypes.All) {\n            if (!(mask & bitmask)) {\n                this.excludedConnectionPointTypes.push(bitmask);\n            }\n            bitmask = bitmask << 1;\n        }\n    }\n    /**\n     * Serializes this point in a JSON representation\n     * @param isInput defines if the connection point is an input (default is true)\n     * @returns the serialized point object\n     */\n    serialize(isInput = true) {\n        const serializationObject = {};\n        serializationObject.name = this.name;\n        serializationObject.displayName = this.displayName;\n        if (isInput && this.connectedPoint) {\n            serializationObject.inputName = this.name;\n            serializationObject.targetBlockId = this.connectedPoint.ownerBlock.uniqueId;\n            serializationObject.targetConnectionName = this.connectedPoint.name;\n            serializationObject.isExposedOnFrame = true;\n            serializationObject.exposedPortPosition = this.exposedPortPosition;\n        }\n        if (this.isExposedOnFrame || this.exposedPortPosition >= 0) {\n            serializationObject.isExposedOnFrame = true;\n            serializationObject.exposedPortPosition = this.exposedPortPosition;\n        }\n        return serializationObject;\n    }\n    /**\n     * Release resources\n     */\n    dispose() {\n        this.onConnectionObservable.clear();\n    }\n}\n//# sourceMappingURL=nodeMaterialBlockConnectionPoint.js.map","import { NodeMaterialConnectionPoint, NodeMaterialConnectionPointCompatibilityStates } from \"./nodeMaterialBlockConnectionPoint.js\";\n/**\n * Defines a connection point to be used for points with a custom object type\n */\nexport class NodeMaterialConnectionPointCustomObject extends NodeMaterialConnectionPoint {\n    /**\n     * Creates a new connection point\n     * @param name defines the connection point name\n     * @param ownerBlock defines the block hosting this connection point\n     * @param direction defines the direction of the connection point\n     * @param _blockType\n     * @param _blockName\n     */\n    constructor(name, ownerBlock, direction, _blockType, _blockName) {\n        super(name, ownerBlock, direction);\n        this._blockType = _blockType;\n        this._blockName = _blockName;\n        this.needDualDirectionValidation = true;\n    }\n    /**\n     * Gets a number indicating if the current point can be connected to another point\n     * @param connectionPoint defines the other connection point\n     * @returns a number defining the compatibility state\n     */\n    checkCompatibilityState(connectionPoint) {\n        return connectionPoint instanceof NodeMaterialConnectionPointCustomObject && connectionPoint._blockName === this._blockName\n            ? NodeMaterialConnectionPointCompatibilityStates.Compatible\n            : NodeMaterialConnectionPointCompatibilityStates.TypeIncompatible;\n    }\n    /**\n     * Creates a block suitable to be used as an input for this input point.\n     * If null is returned, a block based on the point type will be created.\n     * @returns The returned string parameter is the name of the output point of NodeMaterialBlock (first parameter of the returned array) that can be connected to the input\n     */\n    createCustomInputBlock() {\n        return [new this._blockType(this._blockName), this.name];\n    }\n}\n//# sourceMappingURL=nodeMaterialConnectionPointCustomObject.js.map","/**\n * Enum defining the type of properties that can be edited in the property pages in the NME\n */\nexport var PropertyTypeForEdition;\n(function (PropertyTypeForEdition) {\n    /** property is a boolean */\n    PropertyTypeForEdition[PropertyTypeForEdition[\"Boolean\"] = 0] = \"Boolean\";\n    /** property is a float */\n    PropertyTypeForEdition[PropertyTypeForEdition[\"Float\"] = 1] = \"Float\";\n    /** property is a int */\n    PropertyTypeForEdition[PropertyTypeForEdition[\"Int\"] = 2] = \"Int\";\n    /** property is a Vector2 */\n    PropertyTypeForEdition[PropertyTypeForEdition[\"Vector2\"] = 3] = \"Vector2\";\n    /** property is a list of values */\n    PropertyTypeForEdition[PropertyTypeForEdition[\"List\"] = 4] = \"List\";\n})(PropertyTypeForEdition || (PropertyTypeForEdition = {}));\n/**\n * Decorator that flags a property in a node material block as being editable\n * @param displayName\n * @param propertyType\n * @param groupName\n * @param options\n */\nexport function editableInPropertyPage(displayName, propertyType = PropertyTypeForEdition.Boolean, groupName = \"PROPERTIES\", options) {\n    return (target, propertyKey) => {\n        let propStore = target._propStore;\n        if (!propStore) {\n            propStore = [];\n            target._propStore = propStore;\n        }\n        propStore.push({\n            propertyName: propertyKey,\n            displayName: displayName,\n            type: propertyType,\n            groupName: groupName,\n            options: options !== null && options !== void 0 ? options : {},\n        });\n    };\n}\n//# sourceMappingURL=nodeMaterialDecorator.js.map"],"names":["IridescenceBlock","constructor","name","super","this","_isUnique","registerInput","registerOutput","initialize","state","_excludeVariableName","getClassName","intensity","_inputs","indexOfRefraction","thickness","iridescence","_outputs","autoConfigure","isConnected","intensityInput","value","output","connectTo","indexOfRefractionInput","thicknessInput","prepareDefines","mesh","nodeMaterial","defines","setValue","static","iridescenceBlock","code","associatedVariableName","_buildBlock","target","sharedData","bindableBlocks","push","blocksWithDefines","serialize","_deserialize","serializationObject","scene","rootUrl","mapOutputToVariable","ambientClr","diffuseDir","specularDir","clearcoatDir","sheenDir","diffuseInd","specularInd","clearcoatInd","sheenInd","refraction","lighting","shadow","alpha","PBRMetallicRoughnessBlock","block","_propertyName","that","worldPosition","generateOnlyFragmentCode","console","error","_setTarget","_setInitialTarget","getInputByName","_environmentBRDFTexture","_metallicReflectanceColor","_metallicF0Factor","directIntensity","environmentIntensity","specularIntensity","lightFalloff","useAlphaTest","alphaTestCutoff","useAlphaBlending","useRadianceOverAlpha","useSpecularOverAlpha","enableSpecularAntiAliasing","realTimeFiltering","realTimeFilteringQuality","useEnergyConservation","useRadianceOcclusion","useHorizonOcclusion","unlit","forceNormalForward","debugMode","debugLimit","debugFactor","worldNormal","view","cameraPosition","perturbedNormal","baseColor","metallic","roughness","ambientOcc","opacity","ambientColor","reflection","clearcoat","sheen","subsurface","anisotropy","material","cameraPositionInput","getInputBlockByPredicate","b","systemValue","setAsSystemValue","viewInput","_scene","getEngine","getCaps","textureLOD","alphaTestCutOffString","toString","indexOf","standardDerivatives","getScene","_features","needTypeSuffixInShaderConstants","isRGBD","_areImageProcessingDirty","imageProcessingConfiguration","_areLightsDirty","light","needNormals","needRebuild","lightmapMode","shadowEnabled","specularEnabled","_lightId","rebuild","maxSimultaneousLights","_needNormals","updateUniformsAndSamples","uniformBuffers","lightIndex","onlyUpdateBuffersList","uniforms","samplers","isReady","bind","effect","_a","_b","setTexture","_environmentBrdfSamplerName","setFloat2","ambientScene","setColor3","invertNormal","useRightHandedSystem","_mirroredCameraPosition","setFloat","_invertNormalName","setFloat4","ior","connectInputBlock","f0","Math","pow","scaleToRef","metallicF90","setColor4","_vMetallicReflectanceFactorsName","_injectVertexCode","worldPos","comments","undefined","counters","_emitFunctionFromInclude","supportUniformBuffers","replaceStrings","search","replace","repeatKey","dynamicUniformBlocks","worldPosVaryingName","_emitVaryingFromString","compilationString","reflectionBlock","connectedPoint","ownerBlock","viewConnectionPoint","handleVertexSide","_injectAtEnd","_emitCodeFromInclude","_getAlbedoOpacityCode","_getAmbientOcclusionCode","_getReflectivityCode","_getFreeVariableName","_emitUniformFromString","_c","_d","_e","_f","_g","_h","_j","_k","_l","_m","_o","_p","_q","_r","_s","_t","_u","_v","_w","_x","_y","_z","_0","_1","_2","_3","_4","_5","_6","_7","_8","_9","_10","_11","_12","_13","_14","_15","_16","worldPositionConnectionPoint","cameraPositionConnectionPoint","worldNormalConnectionPoint","forcedBindableBlocks","blockingBlocks","normalShading","worldPosVarName","_emitFunction","substitutionVars","_emit2DSampler","hints","needAlphaBlending","needAlphaTesting","_emitExtension","_defineSkyboxName","_vNormalWName","_registerTempVariable","_define3DName","anisotropyBlock","getCode","hasTexture","_defineOppositeZ","_defineProjectionName","_defineLODReflectionAlpha","_defineLinearSpecularReflection","_vReflectionFilteringInfoName","sheenBlock","GetCode","clearcoatBlock","generateTBNSpace","isTangentConnectedToPerturbNormal","worldTangent","isTangentConnectedToAnisotropy","vTBNAvailable","subsurfaceBlock","refractionBlock","indexOfRefractionConnectionPoint","_defineLODRefractionAlpha","_defineLinearSpecularRefraction","aoColor","aoDirectLightIntensity","hasEndpoints","remap","varName","conditions","_declareOutput","_dumpPropertiesCode","codeString","_codeVariableName","lightId","id","getLightById","min","max","notifiers","update","prototype","options","label","onValidation","_OnGenerateOnlyFragmentCodeChanged","ReflectionBlock","_onGenerateOnlyFragmentCodeChanged","position","forceIrradianceInFragment","useSphericalHarmonics","addExcludedConnectionPointFromAllowedTypes","world","color","_getTexture","reflectionColor","texture","environmentTexture","reflectionTexture","getTextureMatrix","lodLevelInAlpha","linearSpecularLOD","invertZ","gammaSpace","coordinatesMode","isCube","maxVaryingVectors","subMesh","_cubeSamplerName","_2DSamplerName","width","getSize","setFloat3","_vReflectionMicrosurfaceInfosName","lodGenerationScale","lodGenerationOffset","materialDefines","polynomials","sphericalPolynomial","USESPHERICALFROMREFLECTIONMAP","SPHERICAL_HARMONICS","preScaledHarmonics","setVector3","l00","l1_1","l10","l11","l2_2","l2_1","l20","l21","l22","x","y","z","xx","zz","yy","xy","yz","zx","reflectionVectorName","_vEnvironmentIrradianceName","_reflectionMatrixName","normalVarName","handleFragmentSideInits","computeReflectionCoordsFunc","handleFragmentSideCodeReflectionCoords","_reflectionVectorName","_vReflectionInfosName","_worldPositionNameInFragmentOnlyMode","_getFreeDefineName","RefractionBlock","linkRefractionWithTransparency","invertRefractionY","useThicknessAsDepth","tintAtDistance","volumeIndexOfRefraction","refractionTexture","boundingBoxSize","isReadyOrNotBlocking","setMatrix","_refractionMatrixName","getReflectionTextureMatrix","depth","_vRefractionInfosName","level","_vRefractionMicrosurfaceInfosName","_vRefractionFilteringInfoName","cubeTexture","boundingBoxPosition","textureBlocks","_samplerDeclaration","isRenderTarget","url","SheenBlock","albedoScaling","linkSheenWithAlbedo","SubSurfaceBlock","tintColor","translucencyIntensity","translucencyDiffusionDist","translucencyEnabled","ssBlock","translucencyDiffusionDistance","refractionTintAtDistance","refractionIntensity","refractionView","ParticleBlendMultiplyBlock","alphaTexture","alphaColor","blendColor","ParticleRampGradientBlock","rampColor","ParticleTextureBlock","_samplerName","convertToGammaSpace","convertToLinearSpace","uv","rgba","rgb","r","g","a","uvInput","isAttribute","setAsAttribute","_linearDefineName","_gammaDefineName","_writeOutput","swizzle","_tempTextureRead","VertexOutputBlock","vector","_isLogarithmicDepthEnabled","nodeList","node","useLogarithmicDepth","input","fragmentOutputNodes","ColorSplitterBlock","inputsAreExclusive","rgbIn","rgbOut","_inputRename","_outputRename","rgbOutput","rOutput","gOutput","bOutput","aOutput","MultiplyBlock","_typeConnectionSource","_linkConnectionTypes","left","right","RemapBlock","sourceRange","targetRange","sourceMin","sourceMax","targetMin","targetMax","_writeFloat","asArray","TransformBlock","complementW","complementZ","onConnectionObservable","add","other","isInput","otherAsInput","xyz","transform","transformName","type","nonUniformScaling","TrigonometryBlockOperations","TrigonometryBlock","operation","Cos","Sin","Abs","Exp","Exp2","Round","Floor","Ceiling","Sqrt","Log","Tan","ArcTan","ArcCos","ArcSin","Fract","Sign","Radians","Degrees","VectorMergerBlock","xSwizzle","ySwizzle","zSwizzle","wSwizzle","xyzwIn","xyzIn","xyIn","zwIn","w","xyzw","xyzOut","xyOut","zwOut","_buildSwizzle","len","substr","xInput","yInput","zInput","wInput","xyInput","zwInput","xyzInput","xyzwInput","v4Output","v3Output","v2Output","v2CompOutput","_writeVariable","NodeMaterialBlockConnectionPointMode","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","NodeMaterialModes","NodeMaterialSystemValues","BonesBlock","matricesIndices","matricesWeights","matricesIndicesExtra","matricesWeightsExtra","matricesIndicesInput","matricesWeightsInput","worldInput","provideFallbacks","fallbacks","useBones","computeBonesUsingShaders","skeleton","addCPUSkinningFallback","_areAttributesDirty","blocksWithFallbacks","removeAttributes","removeUniforms","removeVaryings","removeIfDef","influenceVariablename","InstancesBlock","world0","world1","world2","world3","instanceID","world0Input","world1Input","world2Input","world3Input","define","useInstances","changed","getRenderingMesh","hasThinInstances","markAsUnprocessed","engine","_caps","canUseGLInstanceID","MorphTargetsBlock","tangent","normal","positionOutput","normalOutput","tangentOutput","uvOutput","positionInput","normalInput","tangentInput","morphTargetManager","isUsingTextureForTargets","numInfluencers","markAsAttributesDirty","_bind","replaceRepeatableContent","vertexShaderState","fragmentShaderState","repeatCount","NUM_MORPH_INFLUENCERS","manager","hasNormals","supportsNormals","hasTangents","supportsTangents","hasUVs","supportsUVs","injectionCode","index","_repeatableContentAnchor","attributes","repeatableContentBlocks","LightInformationBlock","direction","shadowBias","shadowNormalBias","shadowDepthScale","shadowDepthRange","isDisposed","lights","length","_forcePrepareDefines","isEnabled","_lightDataUniformName","_lightColorUniformName","transferToNodeMaterialEffect","diffuse","generator","getShadowGenerator","_lightShadowUniformName","bias","normalBias","depthScale","activeCamera","shadowLight","_lightShadowExtraUniformName","getDepthMinZ","getDepthMaxZ","_lightTypeDefineName","AddBlock","ScaleBlock","factor","ClampBlock","minimum","maximum","CrossBlock","excludedConnectionPointTypes","CustomBlock","_options","_deserializeOptions","_code","functionName","forEach","rexp","RegExp","_getGLType","hasInput","JSON","stringify","join","inParameters","Object","defineProperty","get","enumerable","configurable","outParameters","_findInputByName","typeFromInput","inLinkedConnectionTypes","connection","input1","input2","i","DotBlock","NormalizeBlock","ColorMergerBlock","rSwizzle","gSwizzle","bSwizzle","aSwizzle","rInput","gInput","bInput","aInput","rgbInput","color4Output","color3Output","VectorSplitterBlock","zw","xyzOutput","xyOutput","zwOutput","xOutput","yOutput","zOutput","wOutput","LerpBlock","acceptedConnectionPointTypes","gradient","DivideBlock","SubtractBlock","StepBlock","edge","OneMinusBlock","ViewDirectionBlock","FresnelBlock","viewDirection","power","fresnel","viewDirectionInput","biasInput","powerInput","MaxBlock","MinBlock","DistanceBlock","LengthBlock","NegateBlock","PowBlock","WaveBlockKind","RandomNumberBlock","seed","ArcTan2Block","SmoothStepBlock","edge0","edge1","ReciprocalBlock","ReplaceColorBlock","reference","distance","replacement","PosterizeBlock","steps","WaveBlock","kind","SawTooth","Square","Triangle","GradientBlockColorStep","step","_step","val","_color","GradientBlock","colorStepsUpdated","onValueChangedObservable","notifyObservers","colorSteps","_writeColorConstant","tempColor","tempPosition","gradientSource","previousStep","_emitFloat","colorStep","NLerpBlock","WorleyNoise3DBlock","manhattanDistance","jitter","functionString","tempVariable","SimplexPerlin3DBlock","NormalBlendBlock","normalMap0","normalMap1","input0","stepR","stepG","Rotate2dBlock","angle","angleInput","ReflectBlock","incident","RefractBlock","DesaturateBlock","colorName","tempMin","tempMax","tempMerge","ModBlock","ConditionalBlockConditions","MatrixBuilderBlock","row0","row1","row2","row3","row0Input","row1Input","row2Input","row3Input","ConditionalBlock","condition","LessThan","_defaultConnectionPointType","true","false","trueStatement","falseStatement","Equal","NotEqual","LessOrEqual","GreaterThan","GreaterOrEqual","Xor","Or","And","CloudBlock","octaves","chaos","offsetX","offsetY","offsetZ","fractalBrownianString","fbmNewName","localVariable","seedType","chaosValue","VoronoiNoiseBlock","offset","density","cells","tempOutput","tempCells","ElbowBlock","_target","TriPlanarBlock","source","_texture","markAllMaterialsAsDirty","mat","textureY","sourceY","textureZ","sourceZ","_getImageSourceBlock","connectionPoint","samplerName","imageSourceBlock","samplerYName","samplerZName","hasImageSource","_convertToGammaSpace","_convertToLinearSpace","hideSourceZ","disableLevelMultiplication","sharpness","_areTexturesDirty","toGamma","toLinear","_textureInfoName","_imageSource","_generateTextureLookup","_generateConversionCode","complement","noMipmap","invertY","samplingMode","wrapU","wrapV","uAng","vAng","wAng","uOffset","vOffset","uScale","vScale","dpdx","dpdy","n","ma","mi","me","MatrixDeterminantBlock","MatrixTransposeBlock","NodeMaterialBuildState","Array","constants","functions","extensions","_attributeDeclaration","_uniformDeclaration","_constantDeclaration","_varyingTransfer","_repeatableContentAnchorIndex","_builtCompilationString","finalize","emitComments","isFragmentMode","functionCode","varyingDeclaration","extensionName","extension","prefix","variableNames","defineNames","includeName","replaceString","storeKey","key","temps","notDefine","varyings","startsWith","toFixed","NodeMaterialBuildStateSharedData","inputBlocks","animatedInputs","needWorldViewMatrix","needWorldViewProjectionMatrix","checks","emitVertex","emitFragment","notConnectedNonOptionalInputs","allowEmptyVertexProgram","emitErrors","errorMessage","notConnectedInput","onCreatedEffectParameters","NodeMaterialDefines","NORMAL","TANGENT","UV1","UV2","UV3","UV4","UV5","UV6","NUM_BONE_INFLUENCERS","BonesPerMesh","BONETEXTURE","MORPHTARGETS","MORPHTARGETS_NORMAL","MORPHTARGETS_TANGENT","MORPHTARGETS_UV","MORPHTARGETS_TEXTURE","IMAGEPROCESSING","VIGNETTE","VIGNETTEBLENDMODEMULTIPLY","VIGNETTEBLENDMODEOPAQUE","TONEMAPPING","TONEMAPPING_ACES","CONTRAST","EXPOSURE","COLORCURVES","COLORGRADING","COLORGRADING3D","SAMPLER3DGREENDEPTH","SAMPLER3DBGRMAP","DITHER","IMAGEPROCESSINGPOSTPROCESS","SKIPFINALCOLORCLAMP","BUMPDIRECTUV","CAMERA_ORTHOGRAPHIC","CAMERA_PERSPECTIVE","markAsUnprocessedIfDirty","_keys","NodeMaterial","_getGlobalNodeMaterialEditor","NODEEDITOR","BABYLON","NodeEditor","_imageProcessingConfiguration","_attachImageProcessingConfiguration","_markAllSubMeshesAsTexturesDirty","mode","_mode","buildId","_buildId","_BuildIdGenerator","_buildWasSuccessful","_cachedWorldViewMatrix","_cachedWorldViewProjectionMatrix","_optimizers","_animationFrame","BJSNODEMATERIALEDITOR","editorData","ignoreAlpha","onBuildObservable","_vertexOutputNodes","_fragmentOutputNodes","attachedBlocks","forceAlphaBlending","configuration","_imageProcessingObserver","onUpdateParameters","remove","_markAllSubMeshesAsImageProcessingDirty","getBlockByName","result","getBlockByPredicate","predicate","getInputBlocks","blocks","registerOptimizer","optimizer","unregisterOptimizer","splice","addOutputNode","_addVertexOutputNode","_addFragmentOutputNode","removeOutputNode","_removeVertexOutputNode","_removeFragmentOutputNode","_sharedData","_initializeBlock","nodesToProcessForOtherBuildState","_preparationId","isUnique","className","inputs","outputs","_resetDualBlocks","removeBlock","attachedBlockIndex","isFinalMerger","build","verbose","updateBuildId","_vertexCompilationState","supportsUniformBuffers","_fragmentCompilationState","vertexNodes","fragmentNodes","vertexOutputNode","fragmentOutputNode","optimize","slice","_vertexState","meshes","subMeshes","getMaterial","markAllAsDirty","reset","_prepareDefinesForAttributes","oldNormal","oldTangent","isVerticesDataPresent","uvChanged","oldUV","createPostProcess","camera","reusable","textureType","textureFormat","_createEffectForPostProcess","createEffectForPostProcess","postProcess","tempName","dummyMesh","_processDefines","updateEffect","nodeMaterialSource","onApplyObservable","_checkInternals","createProceduralTexture","size","proceduralTexture","reservedDataStore","hidden","createEffect","vertexElement","fragmentElement","_setEffect","onBeforeGenerationObservable","_createEffectForParticles","particleSystem","blendMode","onCompiled","onError","particleSystemDefinesJoined","getMeshByName","particleSystemDefines","fillDefines","createEffectForParticles","setCustomEffect","onBindObservable","particleSystemDefinesJoinedCurrent","frameId","getFrameId","animate","inputBlock","_transmit","createAsShadowDepthWrapper","targetMaterial","shadowDepthWrapper","ShadowDepthWrapper","markAsMiscDirty","initializeDefines","isDirty","lightDisposed","_areLightsDisposed","markAsProcessed","mergedUniforms","u","mergedSamplers","s","isReadyForSubMesh","isFrozen","_wasPreviouslyReady","_wasPreviouslyUsingInstances","_isReadyForSubMesh","some","previousEffect","vertex","fragment","vertexSource","fragmentSource","uniformsNames","uniformBuffersNames","indexParameters","maxSimultaneousMorphTargets","_onEffectCreatedObservable","allowShaderHotSwapping","resetCachedMaterial","setEffect","_materialContext","_renderId","getRenderId","performancePriority","checkReadyOnlyOnce","compiledShaders","bindOnlyWorldMatrix","_activeEffect","multiplyToRef","getViewMatrix","getTransformMatrix","_transmitWorld","bindForSubMesh","mustRebind","_mustRebind","visibility","_afterBind","getActiveTextures","activeTextures","filter","tb","map","getTextureBlocks","getAllTextureBlocks","_BlockIsTextureBlock","t","dispose","forceDisposeEffect","forceDisposeTextures","notBoundToMesh","clear","_createNodeEditor","Show","edit","config","Promise","resolve","editorUrl","editorURL","EditorURL","setToDefault","viewProjectionInput","worldPosdMultipliedByViewProjection","vertexOutput","pixelColor","fragmentOutput","setToDefaultPostProcess","const1","isConstant","vmerger","scale","visibleInInspector","uv0","currentScreen","setToDefaultProceduralTexture","time","isBoolean","matrixMode","animationType","vectorMerger","cos","setToDefaultParticle","P","multiply","rampGradient","cSplitter","blendMultiply","async","ParseFromFileAsync","_gatherBlocks","rootNode","list","generateCode","alreadyDumped","vertexBlocks","uniqueNames","outputNode","fragmentBlocks","_dumpCode","_dumpCodeForOutputConnections","selectedBlocks","parse","customType","outputNodes","uniqueId","_restoreConnections","outputPoint","candidate","targetBlockId","targetConnectionName","inputPoint","inputName","parseSerializedObject","merge","parsedBlock","blockType","blockIndex","outputNodeId","locations","location","blockId","concat","blockMap","comment","loadFromSerialization","clone","shareEffect","skipBuild","data","_loadFileAsync","snippetId","CreateDefault","reject","request","addEventListener","readyState","status","snippet","responseText","jsonPayload","getUniqueId","err","open","SnippetUrl","send","newMaterial","IgnoreTexturesAtLoadTime","NodeMaterialBlock","_name","newName","validateBlockName","_isFinalMerger","_isInput","e","getOutputByName","visibleOnFrame","_originalTargetIsNeutral","UniqueId","currentPoint","stringVersion","isOptional","point","getFirstAvailableInput","forOutput","getFirstAvailableOutput","forBlock","getSiblingOutput","current","isAnAncestorOf","endpoint","endpoints","notFound","canConnectTo","willBeGeneratedIntoVertexShaderFromFragmentShader","o","isDirectlyConnectedToVertexOutput","isConnectedInVertexShader","inputIndex0","inputIndex1","looseCoupling","_acceptedConnectionPointType","_linkedConnectionSource","_processBuild","activeBlocks","localBlockIsFragment","otherBlockWasGeneratedInVertexShader","_buildTarget","_noContextSwitch","_enforceAssociatedVariableName","reservedNames","reservedName","variableName","nameAsVariableName","connectedBlock","connectedOutput","_deserializePortDisplayNamesAndExposedOnFrame","serializedInputs","serializedOutputs","port","displayName","isExposedOnFrame","exposedPortPosition","NodeMaterialConnectionPointCompatibilityStates","NodeMaterialConnectionPointDirection","NodeMaterialConnectionPoint","type1","type2","_direction","_ownerBlock","_associatedVariableName","_connectedPoint","innerType","_type","_prioritizeVertex","isConnectedToInputBlock","sourceBlock","connectedBlocks","_endpoints","isConnectedInFragmentShader","createCustomInputBlock","needDualDirectionValidation","checkCompatibilityState","Compatible","otherBlock","TargetIncompatible","AreEquivalentTypes","TypeIncompatible","targetBlock","Input","HierarchyIssue","ignoreConstraints","disconnectFrom","mask","bitmask","NodeMaterialConnectionPointCustomObject","_blockType","_blockName","PropertyTypeForEdition","editableInPropertyPage","propertyType","Boolean","groupName","propertyKey","propStore","_propStore","propertyName"],"sourceRoot":""}